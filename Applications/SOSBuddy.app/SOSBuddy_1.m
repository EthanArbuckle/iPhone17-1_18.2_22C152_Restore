uint64_t sub_10009ABC0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void v34[9];
  unint64_t v35;

  v3 = *(void *)(v1 + 96);
  if (v3 >> 62)
  {
LABEL_68:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    return 0;
  }
  v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_69;
  }
LABEL_3:
  v33 = a1 + 48;
  swift_beginAccess();
  v5 = 0;
  v32 = v4;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      v7 = __OFADD__(v5++, 1);
      if (v7) {
        goto LABEL_66;
      }
    }
    else
    {
      if (v5 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_67;
      }
      v6 = *(void *)(v3 + 32 + 8 * v5);
      swift_retain();
      v7 = __OFADD__(v5++, 1);
      if (v7)
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    sub_1000A311C(v33, (uint64_t)v34);
    v8 = v35;
    if (v35 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        goto LABEL_26;
      }
    }
    else
    {
      v9 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v9) {
        goto LABEL_26;
      }
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      v10 = *(void *)(v8 + 32);
      swift_retain();
    }
    if (*(void *)(v10 + 16) == *(void *)(v6 + 16) && *(void *)(v10 + 24) == *(void *)(v6 + 24))
    {
      swift_bridgeObjectRelease_n();
      swift_release();
      goto LABEL_22;
    }
    v12 = a1;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    if (v13)
    {
      swift_bridgeObjectRelease_n();
      a1 = v12;
      goto LABEL_22;
    }
    a1 = v12;
    if (v9 == 1) {
      goto LABEL_26;
    }
    v30 = *(void *)(v6 + 24);
    v31 = *(void *)(v6 + 16);
    if ((v8 & 0xC000000000000001) == 0) {
      break;
    }
    v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    if (*(void *)(v18 + 16) == v31 && *(void *)(v18 + 24) == v30)
    {
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      goto LABEL_22;
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_unknownObjectRelease();
    if ((v25 & 1) == 0)
    {
      if (v9 != 2)
      {
        v26 = 2;
        while (1)
        {
          result = specialized _ArrayBuffer._getElementSlowPath(_:)();
          v27 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (*(void *)(result + 16) == v31 && *(void *)(result + 24) == v30)
          {
            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease();
            v4 = v32;
            goto LABEL_22;
          }
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_unknownObjectRelease();
          if (v29)
          {
            swift_bridgeObjectRelease_n();
            a1 = v12;
            v4 = v32;
            goto LABEL_22;
          }
          ++v26;
          a1 = v12;
          if (v27 == v9) {
            goto LABEL_26;
          }
        }
        __break(1u);
        goto LABEL_72;
      }
      goto LABEL_26;
    }
LABEL_48:
    swift_bridgeObjectRelease_n();
LABEL_22:
    if (*(void *)(v34[0] + 16)
      && (v14 = swift_retain(), sub_1001BECD0(v14), v16 = v15, swift_release(), (v16 & 1) != 0))
    {
      sub_1000A3178((uint64_t)v34);
      swift_release();
      if (v5 == v4) {
        goto LABEL_69;
      }
    }
    else
    {
LABEL_27:
      sub_1000A3178((uint64_t)v34);
      v17 = *(uint64_t (**)(uint64_t))(**(void **)(v6 + 48) + 80);
      swift_retain();
      LOBYTE(v17) = v17(a1);
      swift_release();
      if (v17)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
      swift_release();
      v4 = v32;
      if (v5 == v32) {
        goto LABEL_69;
      }
    }
  }
  v19 = *(void *)(v8 + 40);
  if (*(void *)(v19 + 16) == *(void *)(v6 + 16) && *(void *)(v19 + 24) == *(void *)(v6 + 24)) {
    goto LABEL_48;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    goto LABEL_48;
  }
  if (v9 == 2)
  {
LABEL_26:
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  v21 = 6;
  while (1)
  {
    v22 = v21 - 3;
    if (__OFADD__(v21 - 4, 1)) {
      break;
    }
    v23 = *(void *)(v8 + 8 * v21);
    v24 = *(void *)(v23 + 16) == v31 && *(void *)(v23 + 24) == v30;
    if (v24 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      swift_bridgeObjectRelease_n();
      v4 = v32;
      goto LABEL_22;
    }
    ++v21;
    if (v22 == v9) {
      goto LABEL_26;
    }
  }
LABEL_72:
  __break(1u);
  return result;
}

uint64_t sub_10009B02C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Questionnaire()
{
  return self;
}

void sub_10009B0A0(void *a1@<X8>)
{
  *a1 = &off_10034A5C0;
}

void sub_10009B0B0(void *a1@<X8>)
{
  *a1 = &off_10034A610;
}

void sub_10009B0C8(void *a1@<X8>)
{
  *a1 = &off_10034A638;
}

void sub_10009B0D8(void *a1@<X8>)
{
  *a1 = &off_10034A5E8;
}

Swift::Int sub_10009B0E8()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
    sub_100032A1C(v1, 1);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100032A28(v1, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_10009B19C()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(1uLL);
    sub_100032A1C(v1, 1);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100032A28(v1, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_10009B24C()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
    sub_100032A1C(v1, 1);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100032A28(v1, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_10009B2FC(uint64_t a1, uint64_t a2)
{
  return sub_1000A29D8(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_10009B318(uint64_t a1, uint64_t a2, char a3, _OWORD *a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v9 = v8;
  long long v12 = a4[1];
  *(_OWORD *)(v8 + 72) = *a4;
  *(_OWORD *)(v8 + 88) = v12;
  long long v13 = a4[3];
  *(_OWORD *)(v8 + 104) = a4[2];
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a7;
  *(unsigned char *)(v8 + 64) = a8;
  *(_OWORD *)(v8 + 120) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000A2FE8((uint64_t)a4);
  uint64_t v14 = sub_1000A2DAC(a5, (uint64_t)a4);
  *(void *)(v8 + 136) = v14;
  sub_10000D544((uint64_t)a4 + 40, (uint64_t)v21, &qword_100382450);
  sub_10000D544((uint64_t)v21, (uint64_t)&v22, &qword_100382450);
  if (v22)
  {
    v23[0] = _swiftEmptyArrayStorage;
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain_n();
      v16 = (unsigned char *)(v14 + 40);
      do
      {
        if (*v16 == 1)
        {
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v23[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v16 += 16;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      v17 = (void *)v23[0];
    }
    else
    {
      swift_bridgeObjectRetain();
      v17 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v17 = (void *)a5;
  }
  *(void *)(v9 + 144) = v17;
  sub_10000D544((uint64_t)(a4 + 3), (uint64_t)v20, &qword_100380920);
  sub_10000D544((uint64_t)v20, (uint64_t)v23, &qword_100380920);
  if (v23[1])
  {
    sub_1000A2FE8((uint64_t)a4);
    uint64_t v18 = sub_1000A2A24(a5, (uint64_t)a4);
    sub_1000A3050((uint64_t)a4);
    sub_1000A3050((uint64_t)a4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000A3050((uint64_t)a4);
    uint64_t v18 = 0;
  }
  *(void *)(v9 + 152) = v18;
  return v9;
}

uint64_t sub_10009B560(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 != 45 || a3 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1000A2B54(a4, a2, a3);
    swift_bridgeObjectRelease();
    if (v8) {
      return v8;
    }
  }
  return a1;
}

uint64_t sub_10009B60C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10009B6A8()
{
  sub_10009B60C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Question()
{
  return self;
}

uint64_t sub_10009B710()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OptionPresentation()
{
  return self;
}

void sub_10009B784(void *a1@<X8>)
{
  *a1 = &off_10034A660;
}

uint64_t sub_10009B794()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Option()
{
  return self;
}

uint64_t sub_10009B7F8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

Swift::Int sub_10009B808()
{
  return Hasher._finalize()();
}

uint64_t sub_10009B868()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10009B8C4()
{
  return Hasher._finalize()();
}

uint64_t sub_10009B920(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16)
    && *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t type metadata accessor for Condition()
{
  return self;
}

uint64_t type metadata accessor for NoPrerequisites()
{
  return self;
}

void sub_10009B994(void *a1@<X8>)
{
  *a1 = &off_10034A688;
}

uint64_t type metadata accessor for LogicalCondition()
{
  return self;
}

uint64_t sub_10009B9CC(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 24);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_21:
    BOOL v10 = 1;
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(a1);
    swift_release();
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v4 - 1;
      while (1)
      {
        BOOL v10 = v9 == v8;
        if (v9 == v8) {
          break;
        }
        unint64_t v11 = v8 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (__OFADD__(v11, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v11 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_19;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v8 + 40);
          swift_retain();
          if (__OFADD__(v11, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        char v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(a1);
        swift_release();
        ++v8;
        if ((v13 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      BOOL v10 = 0;
    }
    goto LABEL_22;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AndCondition()
{
  return self;
}

uint64_t sub_10009BBA8(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 24);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(a1);
    swift_release();
    if (v7)
    {
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = v4 - 1;
      while (1)
      {
        uint64_t v4 = v9 != v8;
        if (v9 == v8) {
          break;
        }
        unint64_t v10 = v8 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (__OFADD__(v10, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v10 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_19;
          }
          uint64_t v11 = *(void *)(v3 + 8 * v8 + 40);
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(a1);
        swift_release();
        ++v8;
        if (v12) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_17;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OrCondition()
{
  return self;
}

uint64_t sub_10009BD80(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 24);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_9:
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(a1);
    swift_release();
    return (v7 & 1) == 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NotCondition()
{
  return self;
}

void sub_10009BE9C(void *a1@<X8>)
{
  *a1 = &off_10034A6B0;
}

uint64_t sub_10009BEAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = a1 + 48;
  swift_beginAccess();
  sub_1000A311C(v5, (uint64_t)v8);
  char v6 = sub_10028977C(v8, v2, v3, v4);
  sub_1000A3178((uint64_t)v8);
  return v6 & 1;
}

uint64_t sub_10009BF38()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009BF40()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QuestionCondition()
{
  return self;
}

void sub_10009BF9C(void *a1@<X8>)
{
  *a1 = &off_10034A6D8;
}

uint64_t sub_10009BFAC()
{
  return sub_1000D74A4(*(void *)(v0 + 16), *(void *)(v0 + 24)) & 1;
}

uint64_t sub_10009BFDC()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for OptionCondition()
{
  return self;
}

void sub_10009C008(void *a1@<X8>)
{
  *a1 = &off_10034A700;
}

uint64_t sub_10009C018()
{
  return sub_1000C850C(*(unsigned char *)(v0 + 16)) & 1;
}

uint64_t sub_10009C048()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BuiltInCondition()
{
  return self;
}

uint64_t getEnumTagSinglePayload for BuiltInCondition.Operation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BuiltInCondition.Operation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009C1D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInCondition.Operation()
{
  return &type metadata for BuiltInCondition.Operation;
}

ValueMetadata *type metadata accessor for OptionCondition.Operation()
{
  return &type metadata for OptionCondition.Operation;
}

ValueMetadata *type metadata accessor for QuestionCondition.Operation()
{
  return &type metadata for QuestionCondition.Operation;
}

unsigned char *_s8SOSBuddy16LogicalConditionC9OperationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009C30CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LogicalCondition.Operation()
{
  return &type metadata for LogicalCondition.Operation;
}

ValueMetadata *type metadata accessor for Option.InputType()
{
  return &type metadata for Option.InputType;
}

uint64_t initializeBufferWithCopyOfBuffer for Question.OptionsPresentationOrderItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100032A1C(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for Question.OptionsPresentationOrderItem(uint64_t a1)
{
  return sub_100032A28(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for Question.OptionsPresentationOrderItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100032A1C(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_100032A28(v5, v6);
  return a1;
}

uint64_t assignWithTake for Question.OptionsPresentationOrderItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_100032A28(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Question.OptionsPresentationOrderItem()
{
  return &type metadata for Question.OptionsPresentationOrderItem;
}

uint64_t destroy for QuestionPresentation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for QuestionPresentation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for QuestionPresentation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for QuestionPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionPresentation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionPresentation()
{
  return &type metadata for QuestionPresentation;
}

ValueMetadata *type metadata accessor for Question.BuiltInParameters()
{
  return &type metadata for Question.BuiltInParameters;
}

unsigned char *_s8SOSBuddy8QuestionC4FlagOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10009C7B8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Question.Flag()
{
  return &type metadata for Question.Flag;
}

unsigned char *storeEnumTagSinglePayload for Question.QuestionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009C8BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Question.QuestionType()
{
  return &type metadata for Question.QuestionType;
}

uint64_t sub_10009C8F4()
{
  return sub_1000A350C(&qword_100384C40, &qword_100384C48);
}

unint64_t sub_10009C920()
{
  unint64_t result = qword_100384C50;
  if (!qword_100384C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384C50);
  }
  return result;
}

uint64_t sub_10009C974()
{
  return sub_1000A350C(&qword_100384C58, &qword_100384C60);
}

unint64_t sub_10009C9A0()
{
  unint64_t result = qword_100384C68;
  if (!qword_100384C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384C68);
  }
  return result;
}

unint64_t sub_10009C9F8()
{
  unint64_t result = qword_100384C70;
  if (!qword_100384C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384C70);
  }
  return result;
}

uint64_t sub_10009CA4C()
{
  return sub_1000A350C(&qword_100384C78, &qword_100384C80);
}

unint64_t sub_10009CA78()
{
  unint64_t result = qword_100384C88;
  if (!qword_100384C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384C88);
  }
  return result;
}

uint64_t sub_10009CACC()
{
  return sub_1000A350C(&qword_100384C90, &qword_100384C98);
}

unint64_t sub_10009CAF8()
{
  unint64_t result = qword_100384CA0;
  if (!qword_100384CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384CA0);
  }
  return result;
}

uint64_t sub_10009CB4C()
{
  return sub_1000A350C(&qword_100384CA8, &qword_100384CB0);
}

unint64_t sub_10009CB78()
{
  unint64_t result = qword_100384CB8;
  if (!qword_100384CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384CB8);
  }
  return result;
}

uint64_t sub_10009CBCC()
{
  return sub_1000A350C(&qword_100384CC0, &qword_100384CC8);
}

unint64_t sub_10009CBF8()
{
  unint64_t result = qword_100384CD0;
  if (!qword_100384CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384CD0);
  }
  return result;
}

uint64_t sub_10009CC4C()
{
  return sub_1000A350C(&qword_100384CD8, &qword_100384CE0);
}

unint64_t sub_10009CC78()
{
  unint64_t result = qword_100384CE8;
  if (!qword_100384CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384CE8);
  }
  return result;
}

uint64_t sub_10009CCCC()
{
  return sub_10009CD5C(&qword_100384CF0, (void (*)(void))type metadata accessor for Option);
}

uint64_t sub_10009CD14()
{
  return sub_10009CD5C(&qword_100384CF8, (void (*)(void))type metadata accessor for Question);
}

uint64_t sub_10009CD5C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009CDA0(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D58);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v29 = -1 << v28;
              }
              int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      long long v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009D078(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_1003930B0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v30 = a2;
    int64_t v8 = 0;
    v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v31 = -1 << v29;
              }
              int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      char v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009D340(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100393120);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v30 = -1 << v28;
              }
              int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009D614(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D50);
  char v37 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    v35 = (void *)(v5 + 64);
    uint64_t v36 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v35;
        if (v20 >= v34) {
          goto LABEL_33;
        }
        unint64_t v21 = v35[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v21 = v35[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v34)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v35 = -1 << v33;
              }
              int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v35[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v21 = v35[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      uint64_t v28 = *(void *)(v5 + 56) + 72 * v19;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      long long v41 = *(_OWORD *)(v28 + 24);
      uint64_t v31 = *(void *)(v28 + 40);
      uint64_t v39 = *(void *)(v28 + 48);
      uint64_t v40 = *(void *)(v28 + 16);
      uint64_t v32 = *(void *)(v28 + 56);
      char v38 = *(unsigned char *)(v28 + 64);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 72 * v16;
      *(void *)uint64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(void *)(v17 + 16) = v40;
      *(_OWORD *)(v17 + 24) = v41;
      *(void *)(v17 + 40) = v31;
      *(void *)(v17 + 48) = v39;
      *(void *)(v17 + 56) = v32;
      *(unsigned char *)(v17 + 64) = v38;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v36;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009D96C(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010((uint64_t *)&unk_100393140);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v18 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v19 = v18 | (v13 << 6);
      }
      else
      {
        int64_t v20 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v20 >= v29) {
          goto LABEL_33;
        }
        unint64_t v21 = v30[v20];
        ++v13;
        if (!v21)
        {
          int64_t v13 = v20 + 1;
          if (v20 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v21 = v30[v13];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v29)
            {
LABEL_33:
              swift_release();
              int v3 = v2;
              if (a2)
              {
                uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
                if (v28 >= 64) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v28;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v30[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v13 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v21 = v30[v13];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v22;
          }
        }
LABEL_30:
        unint64_t v10 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v13 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      long long v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v11 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009DC84(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D48);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          int v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = *(void *)(v5 + 56) + 16 * v20;
    char v31 = *(unsigned char *)v30;
    uint64_t v32 = *(void *)(v30 + 8);
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    uint64_t v18 = *(void *)(v7 + 56) + 16 * v17;
    *(unsigned char *)uint64_t v18 = v31;
    *(void *)(v18 + 8) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009DFB8(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D40);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          int v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    uint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009E2E4(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D38);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              int v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10004A864(v24, v35);
      }
      else
      {
        sub_1000A30C0((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10004A864(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009E5E4(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010((uint64_t *)&unk_100393090);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v33) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v34 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v33)
        {
LABEL_33:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v33) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = 8 * v20;
    uint64_t v30 = *(void *)(*(void *)(v5 + 48) + v29);
    uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
    if ((v35 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 8 * v17;
    *(void *)(*(void *)(v7 + 48) + v18) = v30;
    *(void *)(*(void *)(v7 + 56) + v18) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v22, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009E910(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100393080);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      int64_t v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        sub_10004A864(v21, v31);
      }
      else {
        sub_1000A30C0((uint64_t)v21, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = (uint64_t)sub_10004A864(v31, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009EBE8(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010((uint64_t *)&unk_100393070);
  char v38 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v37 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
    char v35 = v3;
    int64_t v36 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = v37[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v21 = v37[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_33:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v35;
                goto LABEL_40;
              }
              if (v34 >= 64) {
                bzero(v37, 8 * v36);
              }
              else {
                *char v37 = v33;
              }
              int v3 = v35;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v21 = v37[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 40 * v19;
      long long v39 = *(_OWORD *)v28;
      uint64_t v29 = *(void *)(v28 + 16);
      char v30 = *(unsigned char *)(v28 + 24);
      char v31 = *(unsigned char *)(v28 + 25);
      uint64_t v32 = *(void *)(v28 + 32);
      if ((v38 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 40 * v16;
      *(_OWORD *)uint64_t v17 = v39;
      *(void *)(v17 + 16) = v29;
      *(unsigned char *)(v17 + 24) = v30;
      *(unsigned char *)(v17 + 25) = v31;
      *(void *)(v17 + 32) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009EEE8(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D28);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          int v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    char v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v34 = *(void *)v33;
    long long v41 = *(_OWORD *)(v33 + 8);
    char v35 = *(unsigned char *)(v33 + 24);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_10000F1F0(v34, v41);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)uint64_t v19 = v34;
    *(_OWORD *)(v19 + 8) = v41;
    *(unsigned char *)(v19 + 24) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v37;
  char v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009F228(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D08);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009F540(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010((uint64_t *)&unk_100393050);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          int v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009F850(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_1003930F0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              int v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *int v3 = v7;
  return result;
}

uint64_t sub_10009FAF8(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D18);
  char v46 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  v44 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v42 = v3;
  int64_t v43 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v47 = v7;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v48 = v13;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    uint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    int64_t v25 = v13 + 1;
    if (!v24)
    {
      int64_t v25 = v13 + 2;
      if (v13 + 2 >= v43) {
        goto LABEL_33;
      }
      unint64_t v24 = v44[v25];
      if (!v24)
      {
        uint64_t v26 = v13 + 3;
        if (v13 + 3 >= v43)
        {
LABEL_33:
          swift_release();
          int v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v44[v26];
        if (!v24)
        {
          while (1)
          {
            int64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v25 >= v43) {
              goto LABEL_33;
            }
            unint64_t v24 = v44[v25];
            ++v26;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v25 = v13 + 3;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    int64_t v48 = v25;
    unint64_t v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_31:
    uint64_t v31 = *(void *)(v5 + 56);
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    char v35 = (uint64_t *)(v31 + 72 * v21);
    uint64_t v36 = v35[1];
    uint64_t v37 = v35[3];
    uint64_t v49 = *v35;
    uint64_t v50 = v35[2];
    uint64_t v38 = v35[4];
    long long v51 = *(_OWORD *)(v35 + 5);
    uint64_t v40 = v35[7];
    uint64_t v39 = v35[8];
    if ((v46 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v7 = v47;
    uint64_t v14 = -1 << *(unsigned char *)(v47 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v47 + 48) + 16 * v17);
    *unint64_t v18 = v33;
    v18[1] = v34;
    uint64_t v19 = *(void *)(v47 + 56) + 72 * v17;
    int64_t v13 = v48;
    *(void *)uint64_t v19 = v49;
    *(void *)(v19 + 8) = v36;
    *(void *)(v19 + 16) = v50;
    *(void *)(v19 + 24) = v37;
    *(void *)(v19 + 32) = v38;
    *(_OWORD *)(v19 + 40) = v51;
    *(void *)(v19 + 56) = v40;
    *(void *)(v19 + 64) = v39;
    ++*(void *)(v47 + 16);
  }
  swift_release();
  int v3 = v42;
  uint64_t v23 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v41 = 1 << *(unsigned char *)(v5 + 32);
  if (v41 >= 64) {
    bzero(v23, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v41;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10009FE9C(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D10);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_1000A01B4(uint64_t a1, int a2)
{
  int v3 = v2;
  uint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100004010(&qword_100384D30);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    char v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    int64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              int v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      BOOL v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_10004A864((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_1000A30C0(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_10004A864(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *int v3 = v10;
  return result;
}

uint64_t sub_1000A05B0(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100004010(&qword_100384D20);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

void *sub_1000A08C8()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A0A74()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_1003930B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A0C00()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100393120);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A0DA4()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 72 * v15;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v21 = *(void *)(v16 + 40);
    uint64_t v20 = *(void *)(v16 + 48);
    uint64_t v22 = *(void *)(v16 + 56);
    char v23 = *(unsigned char *)(v16 + 64);
    long long v24 = *(_OWORD *)(v16 + 24);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v25 = *(void *)(v4 + 56) + 72 * v15;
    *(void *)uint64_t v25 = v17;
    *(void *)(v25 + 8) = v18;
    *(void *)(v25 + 16) = v19;
    *(_OWORD *)(v25 + 24) = v24;
    *(void *)(v25 + 40) = v21;
    *(void *)(v25 + 48) = v20;
    *(void *)(v25 + 56) = v22;
    *(unsigned char *)(v25 + 64) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A0FA0()
{
  uint64_t v1 = v0;
  sub_100004010((uint64_t *)&unk_100393140);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    swift_retain();
    swift_retain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A1168()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    char v20 = *(unsigned char *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = *(void *)(v4 + 56) + v18;
    *(unsigned char *)uint64_t v22 = v20;
    *(void *)(v22 + 8) = v21;
    swift_retain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A1328()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A14E0()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000A30C0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_10004A864(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000A16C8()
{
  uint64_t v1 = v0;
  sub_100004010((uint64_t *)&unk_100393090);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A1874()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100393080);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_1000A30C0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = sub_10004A864(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A1A34()
{
  uint64_t v1 = v0;
  sub_100004010((uint64_t *)&unk_100393070);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)(v19 + 16);
    char v21 = *(unsigned char *)(v19 + 24);
    char v22 = *(unsigned char *)(v19 + 25);
    uint64_t v23 = *(void *)(v19 + 32);
    long long v24 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v25 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v25 = v24;
    *(void *)(v25 + 16) = v20;
    *(unsigned char *)(v25 + 24) = v21;
    *(unsigned char *)(v25 + 25) = v22;
    *(void *)(v25 + 32) = v23;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A1C10()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    char v23 = *(unsigned char *)(v21 + 24);
    long long v24 = (void *)(*(void *)(v4 + 48) + v16);
    long long v29 = *(_OWORD *)(v21 + 8);
    *long long v24 = v19;
    v24[1] = v18;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v25 = v22;
    *(_OWORD *)(v25 + 8) = v29;
    *(unsigned char *)(v25 + 24) = v23;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_10000F1F0(v22, v29);
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A1DF4()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1000A1FAC()
{
  unint64_t result = qword_100384D00;
  if (!qword_100384D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384D00);
  }
  return result;
}

id sub_1000A2000()
{
  uint64_t v1 = v0;
  sub_100004010((uint64_t *)&unk_100393050);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A21B4()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_1003930F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A2344()
{
  sub_100004010(&qword_100384D18);
  uint64_t v32 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v32 = v3;
    return result;
  }
  id result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    id result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v34 = v1 + 64;
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v33) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v29);
    ++v7;
    if (!v30)
    {
      int64_t v7 = v29 + 1;
      if (v29 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v34 + 8 * v7);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v10 = (v30 - 1) & v30;
    unint64_t v12 = __clz(__rbit64(v30)) + (v7 << 6);
LABEL_12:
    uint64_t v13 = 16 * v12;
    unint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v12);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = 72 * v12;
    uint64_t v18 = *(void *)(v1 + 56) + v17;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 32);
    uint64_t v24 = *(void *)(v18 + 56);
    uint64_t v25 = *(void *)(v18 + 64);
    int64_t v26 = (void *)(*(void *)(v3 + 48) + v13);
    long long v27 = *(_OWORD *)(v18 + 40);
    *int64_t v26 = v15;
    v26[1] = v16;
    uint64_t v28 = *(void *)(v3 + 56) + v17;
    *(void *)uint64_t v28 = v19;
    *(void *)(v28 + 8) = v20;
    *(void *)(v28 + 16) = v21;
    *(void *)(v28 + 24) = v22;
    *(void *)(v28 + 32) = v23;
    *(_OWORD *)(v28 + 40) = v27;
    *(void *)(v28 + 56) = v24;
    *(void *)(v28 + 64) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v33) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v34 + 8 * v31);
  if (v30)
  {
    int64_t v7 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v7 >= v33) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v7);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A2578()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100384D10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A2730()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004010(&qword_100384D30);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_1000A30C0(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = sub_10004A864(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000A29D8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0) {
    return (a4 & 1) == 0 && a1 == a3;
  }
  if (a4)
  {
    if (*(void *)(a1 + 16) == *(void *)(a3 + 16) && *(void *)(a1 + 24) == *(void *)(a3 + 24)) {
      return 1;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000A2A24(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = *(void *)(a2 + 48);
      a2 = *(void *)(a2 + 56);
      uint64_t v6 = 4;
      do
      {
        uint64_t v7 = v6 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v9 = __OFADD__(v7, 1);
          uint64_t v10 = v6 - 3;
          if (v9) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v6);
          swift_retain();
          BOOL v9 = __OFADD__(v7, 1);
          uint64_t v10 = v6 - 3;
          if (v9)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        if (a2)
        {
          BOOL v11 = *(void *)(v8 + 16) == v5 && a2 == *(void *)(v8 + 24);
          if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return v8;
          }
        }
        swift_release();
        ++v6;
      }
      while (v10 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000A2B54(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        BOOL v12 = *(void *)(v9 + 16) == a2 && *(void *)(v9 + 24) == a3;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_1000A2C80(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  sub_1001BF724(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = a2(v4, v7, v6);
      char v10 = v9;
      swift_bridgeObjectRelease();
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1001BF724(v11 > 1, v12 + 1, 1);
      }
      ++v4;
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      *((unsigned char *)v13 + 40) = v10 & 1;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A2DAC(unint64_t a1, uint64_t a2)
{
  sub_10000D544(a2 + 40, (uint64_t)v19, &qword_100382450);
  uint64_t v3 = sub_10000D544((uint64_t)v19, (uint64_t)&v20, &qword_100382450);
  uint64_t v4 = v20;
  if (v20)
  {
    __chkstk_darwin(v3);
    sub_10003E68C((uint64_t)v19);
    uint64_t v5 = sub_1000A2C80(v4, sub_1000A30B8);
    sub_10004F5B0((uint64_t)v19);
    return (uint64_t)v5;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v5;
  }
  uint64_t result = sub_1001BF724(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_1001BF724(v10 > 1, v11 + 1, 1);
        }
        ++v8;
        _swiftEmptyArrayStorage[2] = v11 + 1;
        unint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
        v12[4] = v9;
        *((unsigned char *)v12 + 40) = 1;
      }
      while (v7 != v8);
    }
    else
    {
      uint64_t v13 = (uint64_t *)(a1 + 32);
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      uint64_t v15 = 2 * v14;
      do
      {
        uint64_t v16 = *v13;
        unint64_t v17 = _swiftEmptyArrayStorage[3];
        swift_retain();
        if (v14 >= v17 >> 1) {
          sub_1001BF724(v17 > 1, v14 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v14 + 1;
        uint64_t v18 = &_swiftEmptyArrayStorage[v15];
        v18[4] = v16;
        *((unsigned char *)v18 + 40) = 1;
        v15 += 2;
        ++v13;
        ++v14;
        --v7;
      }
      while (v7);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A2FE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A3050(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A30B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009B560(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1000A30C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000A311C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000A3178(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for TransmissionProgress.PayloadType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8SOSBuddy8QuestionC9BuiltInIdOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A3328);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Question.BuiltInId()
{
  return &type metadata for Question.BuiltInId;
}

unsigned char *_s8SOSBuddy6OptionC9InputTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A342CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionPresentation.Flag()
{
  return &type metadata for QuestionPresentation.Flag;
}

uint64_t sub_1000A3464()
{
  return sub_1000A350C(&qword_100384D60, &qword_100384D68);
}

unint64_t sub_1000A3490()
{
  unint64_t result = qword_100384D70;
  if (!qword_100384D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384D70);
  }
  return result;
}

uint64_t sub_1000A34E4()
{
  return sub_1000A350C(&qword_100384D78, &qword_100384D80);
}

uint64_t sub_1000A350C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A3560()
{
  unint64_t result = qword_100384D88;
  if (!qword_100384D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384D88);
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionMinimalView()
{
  return &type metadata for SessionMinimalView;
}

uint64_t sub_1000A35E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A35FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = 1;
    if (sub_100078E0C(1, *(void *)(v3 + 200)))
    {
      type metadata accessor for BannerAppearanceModel();
      sub_1000A3718(&qword_10037F098, (void (*)(uint64_t))type metadata accessor for BannerAppearanceModel);
      uint64_t v4 = EnvironmentObject.init()();
      uint64_t v6 = v5;
      type metadata accessor for UIMetrics();
      sub_1000A3718((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      uint64_t result = EnvironmentObject.init()();
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t result = 0;
      uint64_t v8 = 0;
    }
    *a1 = v4;
    a1[1] = v6;
    a1[2] = result;
    a1[3] = v8;
  }
  else
  {
    type metadata accessor for BannerAppearanceModel();
    sub_1000A3718(&qword_10037F098, (void (*)(uint64_t))type metadata accessor for BannerAppearanceModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A3718(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A3770()
{
  unint64_t result = qword_100384D90;
  if (!qword_100384D90)
  {
    sub_1000094C4(&qword_100384D98);
    sub_1000A37E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384D90);
  }
  return result;
}

unint64_t sub_1000A37E4()
{
  unint64_t result = qword_100384DA0;
  if (!qword_100384DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384DA0);
  }
  return result;
}

void *ConnectionAssistantCamera.init(earth:coordinate:fraction:offset:rotation:viewport:)@<X0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>, float32x2_t a8@<D3>, float a9@<S4>, double a10@<D5>)
{
  sub_1000A41DC(a1, a2, a3, (uint64_t)v12, a5, a6, a7, a8, a9, a10);
  return memcpy(a4, v12, 0x180uLL);
}

__n64 ConnectionAssistantCamera.projectUV(point:)(float32x4_t a1)
{
  unint64_t v2 = ConnectionAssistantCamera.projectNormalized(point:)(a1);
  if ((v4 & 1) == 0)
  {
    if (*v1 && (uint64_t v5 = v1[1]) != 0)
    {
      float v6 = (float)*v1 / (float)v5;
      result.n64_f32[0] = fmaxf(v6, 1.0) * *(float *)&v2;
      if (v6 < 1.0) {
        goto LABEL_9;
      }
    }
    else
    {
      result.n64_u32[0] = v2;
    }
    float v6 = 1.0;
LABEL_9:
    result.n64_f32[1] = *((float *)&v2 + 1) / v6;
  }
  return result;
}

float ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 && a2)
  {
    float v3 = a3;
    if (a1 >= a2) {
      float v4 = (float)a2;
    }
    else {
      float v4 = (float)a1;
    }
    return (float)((float)(1.0 / v4) * v3) + (float)((float)(1.0 / v4) * v3);
  }
  else
  {
    float v5 = a3;
    return v5 + v5;
  }
}

__n64 ConnectionAssistantCamera.Viewport.aspectFillScale.getter(uint64_t a1, uint64_t a2)
{
  float v2 = 1.0;
  result.n64_u32[0] = 1.0;
  if (a1)
  {
    result.n64_u32[0] = 1.0;
    if (a2)
    {
      float v4 = (float)a1 / (float)a2;
      float v2 = fminf(v4, 1.0);
      result.n64_f32[0] = fmaxf(v4, 1.0);
    }
  }
  result.n64_f32[1] = 1.0 / v2;
  return result;
}

uint64_t ConnectionAssistantCamera.Viewport.pixelHeight.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ConnectionAssistantCamera.Viewport.init(pixelWidth:pixelHeight:scale:)(uint64_t a1)
{
  return a1 & ~(a1 >> 63);
}

float ConnectionAssistantCamera.Viewport.aspect.getter(uint64_t a1, uint64_t a2)
{
  float result = 1.0;
  if (a1)
  {
    if (a2) {
      return (float)a1 / (float)a2;
    }
  }
  return result;
}

double ConnectionAssistantCamera.Viewport.mtlViewport.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = (double)a1;
  *(double *)(a3 + 24) = (double)a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = xmmword_1002B7260;
  return result;
}

BOOL static ConnectionAssistantCamera.Viewport.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  BOOL v7 = a1 == a3 && a2 == a4;
  return a5 == a6 && v7;
}

BOOL sub_1000A39EC(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

double ConnectionAssistantCamera.viewport.getter()
{
  return *(double *)(v0 + 16);
}

float ConnectionAssistantCamera.fieldOfViewX.getter()
{
  return *(float *)(v0 + 24);
}

float ConnectionAssistantCamera.fieldOfViewY.getter()
{
  return *(float *)(v0 + 28);
}

float ConnectionAssistantCamera.nearPlane.getter()
{
  return *(float *)(v0 + 36);
}

float ConnectionAssistantCamera.farPlane.getter()
{
  return *(float *)(v0 + 40);
}

__n128 ConnectionAssistantCamera.target.getter()
{
  return v0[4];
}

__n128 ConnectionAssistantRenderer.RenderPipelines.Constants.earthOutlineColor.getter()
{
  return v0[5];
}

__n128 ConnectionAssistantCamera.left.getter()
{
  return v0[6];
}

__n128 ConnectionAssistantCamera.up.getter()
{
  return v0[7];
}

__n128 ConnectionAssistantCamera.cameraLookAt.getter()
{
  return v0[8];
}

__n128 ConnectionAssistantCamera.cameraView.getter()
{
  return v0[12];
}

__n128 ConnectionAssistantCamera.cameraProjection.getter()
{
  return v0[16];
}

__n128 ConnectionAssistantCamera.cameraProjectionView.getter()
{
  return v0[20];
}

double ConnectionAssistantCamera.projectLookAt(vector:)(float32x4_t a1)
{
  *(void *)&double result = vaddq_f32(v1[11], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[8], a1.f32[0]), v1[9], *(float32x2_t *)a1.f32, 1), v1[10], a1, 2)).u64[0];
  return result;
}

double ConnectionAssistantCamera.projectView(point:)(float32x4_t a1)
{
  *(void *)&double result = vaddq_f32(v1[15], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[12], a1.f32[0]), v1[13], *(float32x2_t *)a1.f32, 1), v1[14], a1, 2)).u64[0];
  return result;
}

unint64_t ConnectionAssistantCamera.projectNormalized(point:)(float32x4_t a1)
{
  float32x4_t v2 = vaddq_f32(v1[15], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[12], a1.f32[0]), v1[13], *(float32x2_t *)a1.f32, 1), v1[14], a1, 2));
  float32x4_t v3 = vmulq_f32(v2, (float32x4_t)xmmword_1002B7270);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0] < v1[2].f32[1])return 0; {
  float32x4_t v5 = vaddq_f32(v1[19], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[16], v2.f32[0]), v1[17], *(float32x2_t *)v2.f32, 1), v1[18], v2, 2));
  }
  return vdivq_f32(v5, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 3)).u64[0];
}

double ConnectionAssistantCamera.projectToViewport(point:)(float32x4_t a1)
{
  unint64_t v2 = ConnectionAssistantCamera.projectNormalized(point:)(a1);
  double result = 0.0;
  if ((v4 & 1) == 0)
  {
    __asm { FMOV            V2.2S, #1.0 }
    v10.i32[0] = vadd_f32((float32x2_t)v2, _D2).u32[0];
    v10.i32[1] = vsub_f32(_D2, (float32x2_t)v2).i32[1];
    *(void *)&double result = *(_OWORD *)&vdivq_f64(vcvtq_f64_f32(vmul_f32(vmul_f32(v10, vcvt_f32_f64(vcvtq_f64_s64(*v1))), (float32x2_t)0x3F0000003F000000)), (float64x2_t)vdupq_lane_s64(v1[1].i64[0], 0));
  }
  return result;
}

uint64_t sub_1000A3BCC(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return _s8SOSBuddy25ConnectionAssistantCameraV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t _s8SOSBuddy25ConnectionAssistantCameraV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  BOOL v2 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  if (!v2
    || *(float *)(a1 + 24) != *(float *)(a2 + 24)
    || *(float *)(a1 + 28) != *(float *)(a2 + 28)
    || *(float *)(a1 + 32) != *(float *)(a2 + 32)
    || *(float *)(a1 + 36) != *(float *)(a2 + 36)
    || *(float *)(a1 + 40) != *(float *)(a2 + 40))
  {
    return 0;
  }
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    long long v43 = v4;
    float v13 = *(float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    long long v44 = v5;
    float v14 = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v6 = v13 == v14;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v6) {
        break;
      }
      BOOL v6 = 0;
      uint64_t v7 = 0;
      if (v3 == 2) {
        return v7;
      }
    }
  }
  if (v13 != v14) {
    return 0;
  }
  uint64_t v9 = 0;
  long long v10 = *(_OWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a2 + 64);
  while (1)
  {
    long long v41 = v10;
    float v19 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    long long v42 = v11;
    float v20 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    BOOL v12 = v19 == v20;
    if (v9 == 2) {
      break;
    }
    while (1)
    {
      ++v9;
      if (v12) {
        break;
      }
      BOOL v12 = 0;
      uint64_t v7 = 0;
      if (v9 == 2) {
        return v7;
      }
    }
  }
  if (v19 != v20) {
    return 0;
  }
  uint64_t v15 = 0;
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v17 = *(_OWORD *)(a2 + 80);
  while (1)
  {
    long long v39 = v16;
    float v25 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    long long v40 = v17;
    float v26 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    BOOL v18 = v25 == v26;
    if (v15 == 2) {
      break;
    }
    while (1)
    {
      ++v15;
      if (v18) {
        break;
      }
      BOOL v18 = 0;
      uint64_t v7 = 0;
      if (v15 == 2) {
        return v7;
      }
    }
  }
  if (v25 != v26) {
    return 0;
  }
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a2 + 96);
  while (1)
  {
    long long v37 = v22;
    float v31 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
    long long v38 = v23;
    float v32 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
    BOOL v24 = v31 == v32;
    if (v21 == 2) {
      break;
    }
    while (1)
    {
      ++v21;
      if (v24) {
        break;
      }
      BOOL v24 = 0;
      uint64_t v7 = 0;
      if (v21 == 2) {
        return v7;
      }
    }
  }
  if (v31 != v32) {
    return 0;
  }
  uint64_t v27 = 0;
  long long v28 = *(_OWORD *)(a1 + 112);
  long long v29 = *(_OWORD *)(a2 + 112);
  while (1)
  {
    long long v35 = v28;
    float v33 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
    long long v36 = v29;
    float v34 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
    BOOL v30 = v33 == v34;
    if (v27 == 2) {
      break;
    }
    while (1)
    {
      ++v27;
      if (v30) {
        break;
      }
      BOOL v30 = 0;
      uint64_t v7 = 0;
      if (v27 == 2) {
        return v7;
      }
    }
  }
  if (v33 == v34
    && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 144), *(float32x4_t *)(a2 + 144)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 128), *(float32x4_t *)(a2 + 128))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 160), *(float32x4_t *)(a2 + 160)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 176), *(float32x4_t *)(a2 + 176))))) & 0x80000000) != 0&& (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a2 + 208)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a2 + 192))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 224), *(float32x4_t *)(a2 + 224)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 240), *(float32x4_t *)(a2 + 240))))) & 0x80000000) != 0&& (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 272), *(float32x4_t *)(a2 + 272)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 256), *(float32x4_t *)(a2 + 256))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 288), *(float32x4_t *)(a2 + 288)),
                                   (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 304), *(float32x4_t *)(a2 + 304))))) & 0x80000000) != 0)
  {
    return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 336), *(float32x4_t *)(a2 + 336)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 320), *(float32x4_t *)(a2 + 320))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 352), *(float32x4_t *)(a2 + 352)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 368), *(float32x4_t *)(a2 + 368))))) >> 31;
  }
  else
  {
    return 0;
  }
}

uint64_t _s8SOSBuddy25ConnectionAssistantCameraV8ViewportV4size5scaleAESo6CGSizeV_12CoreGraphics7CGFloatVtcfC_0(double a1, double a2, double a3)
{
  double v3 = a1 * a3;
  if (v3 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  double v4 = a2 * a3;
  if ((*(void *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_12;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < 9.22337204e18) {
    return (uint64_t)v3 & ~((uint64_t)v3 >> 63);
  }
LABEL_14:
  __break(1u);
  return result;
}

double sub_1000A4064(int32x4_t a1, float a2)
{
  float32x4_t v2 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a1, a1), (int8x16_t)a1, 0xCuLL);
  float32x4_t v3 = vmlaq_f32(vmulq_f32((float32x4_t)a1, (float32x4_t)xmmword_1002B7280), (float32x4_t)xmmword_1002B7270, v2);
  int8x16_t v4 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  float32x4_t v5 = vmulq_f32(v3, v3);
  float v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), v5)).f32[0]);
  if (v6 >= 0.00000011921)
  {
    int8x16_t v27 = v4;
  }
  else
  {
    float32x4_t v7 = vmlaq_f32(vmulq_f32((float32x4_t)a1, (float32x4_t)xmmword_1002B7290), (float32x4_t)xmmword_1002B72A0, v2);
    int8x16_t v8 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
    float32x4_t v9 = vmulq_f32(v7, v7);
    float32x4_t v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v9);
    float32x4_t v11 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v10);
    v11.f32[0] = sqrtf(v11.f32[0]);
    v10.i64[0] = 0x3400000034000000;
    int8x16_t v27 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v10, v11), 0), v4, v8);
    if (v11.f32[0] >= 0.00000011921) {
      float v6 = v11.f32[0];
    }
  }
  if (v6 == 0.0) {
    float v12 = 1.0;
  }
  else {
    float v12 = v6;
  }
  __float2 v13 = __sincosf_stret(a2 * 0.5);
  float32x4_t v14 = vmulq_n_f32((float32x4_t)a1, v13.__sinval);
  float32x4_t v15 = v14;
  v15.i32[3] = LODWORD(v13.__cosval);
  float32x4_t v16 = vmulq_f32(v15, (float32x4_t)xmmword_1002B72B0);
  int32x4_t v17 = (int32x4_t)vnegq_f32(v16);
  int8x16_t v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v16, vtrn1q_s32((int32x4_t)v16, v17));
  float32x4_t v19 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 8uLL), *(float *)&v27.i32[1] / v12);
  float32x4_t v20 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
  v20.i32[0] = v17.i32[1];
  v20.i32[3] = v17.i32[2];
  float32x4_t v21 = vmlaq_n_f32(vmlaq_n_f32(v19, (float32x4_t)vextq_s8(v18, v18, 8uLL), *(float *)v27.i32 / v12), v20, *(float *)&v27.i32[2] / v12);
  int32x4_t v22 = (int32x4_t)vnegq_f32(v21);
  int8x16_t v23 = (int8x16_t)vtrn2q_s32((int32x4_t)v21, vtrn1q_s32((int32x4_t)v21, v22));
  float32x4_t v24 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v22, 8uLL), *(float32x2_t *)v14.f32, 1), (float32x4_t)vextq_s8(v23, v23, 8uLL), v14.f32[0]);
  float32x4_t v25 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
  v25.i32[0] = v22.i32[1];
  v25.i32[3] = v22.i32[2];
  *(void *)&double result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v21, v15, 3), v25, v14, 2), v24).u64[0];
  return result;
}

float32x4_t sub_1000A41DC@<Q0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>, float32x2_t a8@<D3>, float a9@<S4>, double a10@<D5>)
{
  if (a2) {
    BOOL v18 = a3 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  int v19 = v18;
  if (v18)
  {
    float v20 = 0.17633;
    goto LABEL_19;
  }
  float v21 = (float)a2 / (float)a3;
  if (v21 >= 1.0)
  {
    float v20 = v21 * 0.17633;
LABEL_19:
    float v26 = atanf(v20);
    float v24 = v26 + v26;
    if ((~COERCE_INT(v26 + v26) & 0x7F800000) != 0 || (COERCE_UNSIGNED_INT(v26 + v26) & 0x7FFFFF) == 0)
    {
      float v23 = 0.34907;
      float v77 = 0.34907;
      if (v24 > 0.34907) {
        goto LABEL_26;
      }
    }
    else
    {
      float v24 = 0.34907;
      float v77 = 0.34907;
    }
    goto LABEL_25;
  }
  float v22 = atanf(0.17633 / v21);
  float v23 = v22 + v22;
  float v24 = 0.34907;
  if ((LODWORD(v23) & 0x7FFFFF) != 0) {
    float v25 = 0.34907;
  }
  else {
    float v25 = v23;
  }
  if ((~LODWORD(v23) & 0x7F800000) == 0) {
    float v23 = v25;
  }
  float v77 = v23;
  if (v23 >= 0.34907) {
LABEL_25:
  }
    float v23 = v24;
LABEL_26:
  float v75 = v23;
  float v28 = a1[17];
  *(double *)v29.i64 = ConnectionAssistantEarth.direction(for:)(a5, a6);
  float32x4_t v81 = v29;
  long long v82 = *(_OWORD *)a1;
  int32x4_t v30 = (int32x4_t)vmulq_f32(v29, v29);
  float32x4_t v31 = v29;
  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
  float32x2_t v32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  float32x2_t v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v32, v32)));
  float32x4_t v83 = vmulq_n_f32(v31, vmul_f32(v33, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v33, v33))).f32[0]);
  *(double *)v34.i64 = sub_1000A4064((int32x4_t)v83, a9);
  float v35 = (float)a2 / (float)a3;
  if (v19) {
    float v35 = 1.0;
  }
  float v73 = v35;
  float32x4_t v36 = v34;
  float32x4_t v37 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), vnegq_f32(v34)), v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
  int32x4_t v38 = (int32x4_t)vmulq_f32(v37, v37);
  v38.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), *(float32x2_t *)v38.i8)).u32[0];
  float32x4_t v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
  *(float32x2_t *)v37.f32 = vrsqrte_f32((float32x2_t)v38.u32[0]);
  *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)));
  float32x4_t v40 = vmulq_n_f32(v39, vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32))).f32[0]);
  float32x4_t v80 = v40;
  int8x16_t v79 = (int8x16_t)v36;
  v40.i32[1] = v36.i32[1];
  float32x2_t v68 = vsub_f32(0, *(float32x2_t *)v40.f32);
  v37.i64[0] = __PAIR64__(v68.u32[0], v36.u32[0]);
  v37.f32[2] = 0.0 - v83.f32[0];
  v37.i32[3] = 0;
  float32x4_t v69 = v37;
  float32x4_t v67 = (float32x4_t)v36.u32[1];
  float32x4_t v84 = (float32x4_t)v36.u32[2];
  float v41 = tanf(v24 * 0.5);
  float v42 = (float)(v41 + v41) * a7;
  BOOL v44 = (LODWORD(v42) & 0x7FFFFF) != 0 && (~LODWORD(v42) & 0x7F800000) == 0 || v42 == 0.0;
  float v45 = (float)(v28 + v28) / v42;
  if (v44) {
    float v46 = 0.0;
  }
  else {
    float v46 = v45;
  }
  float v66 = v46;
  float v47 = vmuls_lane_f32(v46, v81, 2);
  v48.i32[0] = vextq_s8(v79, v79, 8uLL).u32[0];
  v48.i32[1] = v80.i32[2];
  float32x2_t v49 = vsub_f32(0, v48);
  unsigned __int32 v71 = v49.u32[1];
  float32x4_t v50 = v84;
  v50.i32[1] = v49.i32[1];
  v50.f32[2] = 0.0 - v83.f32[2];
  float32x4_t v85 = v50;
  float v51 = (float)(v28 + v28) * vaddv_f32(vmul_f32(v49, a8));
  *(float *)&unsigned int v70 = v51 + (float)(*((float *)&v82 + 2) - v47);
  float v52 = tanf(v77 * 0.5);
  LODWORD(v53) = 0;
  *((float *)&v53 + 1) = 1.0 / v52;
  float32x4_t v72 = (float32x4_t)v53;
  float32x4_t v74 = (float32x4_t)COERCE_UNSIGNED_INT((float)(1.0 / v52) / v73);
  float v54 = tanf(v75 * 0.5);
  float32x2_t v55 = vsub_f32(0, (float32x2_t)__PAIR64__(v80.u32[1], v79.u32[0]));
  float32x4_t v56 = v67;
  v56.i32[1] = v55.i32[1];
  *(void *)&long long v57 = __PAIR64__(v55.u32[1], v68.u32[0]);
  v56.f32[2] = 0.0 - v83.f32[1];
  float32x2_t v58 = vmul_n_f32(vadd_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)a8), v68), vmul_f32(v55, a8)), v28 + v28);
  *(float32x2_t *)&long long v59 = vadd_f32(v58, vsub_f32(*(float32x2_t *)&v82, vmul_n_f32(*(float32x2_t *)v81.f32, v66)));
  float32x4_t v60 = vaddq_f32(vmlaq_f32(vmlaq_f32(v69, (float32x4_t)0, v56), (float32x4_t)0, v85), (float32x4_t)0);
  float32x4_t v61 = vmulq_f32(v69, (float32x4_t)0);
  float32x4_t v62 = vaddq_f32(vmlaq_f32(vaddq_f32(v56, v61), (float32x4_t)0, v85), (float32x4_t)0);
  float32x4_t v63 = vaddq_f32(vaddq_f32(v85, vmlaq_f32(v61, (float32x4_t)0, v56)), (float32x4_t)0);
  *((void *)&v57 + 1) = v71;
  *((void *)&v59 + 1) = v70;
  *(float32x2_t *)&long long v64 = vadd_f32(*(float32x2_t *)&v82, v58);
  *((float *)&v64 + 2) = *((float *)&v82 + 2) + v51;
  HIDWORD(v64) = 0;
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(double *)(a4 + 16) = a10;
  *(float *)(a4 + 24) = v24;
  *(float *)(a4 + 28) = v77;
  *(float *)(a4 + 32) = -1.0 / v54;
  *(void *)(a4 + 36) = 0x42C800003A83126FLL;
  *(_OWORD *)(a4 + 48) = v59;
  *(_OWORD *)(a4 + 64) = v64;
  float32x4_t result = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v69, 0.0 - *(float *)&v59), v56, 0.0 - *((float *)&v59 + 1)), v85, 0.0 - *(float *)&v70), (float32x4_t)xmmword_1002B72C0);
  *(float32x4_t *)(a4 + 80) = v83;
  *(int8x16_t *)(a4 + 96) = v79;
  *(_OWORD *)(a4 + 112) = v57;
  *(float32x4_t *)(a4 + 128) = v69;
  *(float32x4_t *)(a4 + 144) = v56;
  *(float32x4_t *)(a4 + 160) = v85;
  *(_OWORD *)(a4 + 176) = xmmword_1002B72C0;
  *(float32x4_t *)(a4 + 192) = v60;
  *(float32x4_t *)(a4 + 208) = v62;
  *(float32x4_t *)(a4 + 224) = v63;
  *(float32x4_t *)(a4 + 240) = result;
  *(float32x4_t *)(a4 + 256) = v74;
  *(float32x4_t *)(a4 + 272) = v72;
  *(_OWORD *)(a4 + 288) = xmmword_1002B72D0;
  *(_OWORD *)(a4 + 304) = xmmword_1002B72E0;
  *(float32x4_t *)(a4 + 320) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v60.f32[0]), v72, *(float32x2_t *)v60.f32, 1), (float32x4_t)xmmword_1002B72D0, v60, 2), (float32x4_t)xmmword_1002B72E0, v60, 3);
  *(float32x4_t *)(a4 + 336) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v62.f32[0]), v72, *(float32x2_t *)v62.f32, 1), (float32x4_t)xmmword_1002B72D0, v62, 2), (float32x4_t)xmmword_1002B72E0, v62, 3);
  *(float32x4_t *)(a4 + 352) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v63.f32[0]), v72, *(float32x2_t *)v63.f32, 1), (float32x4_t)xmmword_1002B72D0, v63, 2), (float32x4_t)xmmword_1002B72E0, v63, 3);
  *(float32x4_t *)(a4 + 368) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, result.f32[0]), v72, *(float32x2_t *)result.f32, 1), (float32x4_t)xmmword_1002B72D0, result, 2), (float32x4_t)xmmword_1002B72E0, result, 3);
  return result;
}

void *initializeWithCopy for ConnectionAssistantCamera(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x180uLL);
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantCamera(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 384)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantCamera(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 376) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)float32x4_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 384) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCamera()
{
  return &type metadata for ConnectionAssistantCamera;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCamera.Viewport()
{
  return &type metadata for ConnectionAssistantCamera.Viewport;
}

NSString sub_1000A47C8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1003A9910 = (uint64_t)result;
  return result;
}

NSString sub_1000A4800()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1003A9918 = (uint64_t)result;
  return result;
}

NSString sub_1000A4838()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1003A9920 = (uint64_t)result;
  return result;
}

NSString sub_1000A486C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1003A9928 = (uint64_t)result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for StewieAppId(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *NSString result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A4970);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *NSString result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StewieAppId()
{
  return &type metadata for StewieAppId;
}

unint64_t sub_1000A49AC()
{
  unint64_t result = qword_100384DA8;
  if (!qword_100384DA8)
  {
    sub_1000094C4(&qword_100384DB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384DA8);
  }
  return result;
}

void sub_1000A4A08(void *a1@<X8>)
{
  *a1 = &off_10034A730;
}

unint64_t sub_1000A4A1C()
{
  unint64_t result = qword_100384DB8;
  if (!qword_100384DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384DB8);
  }
  return result;
}

uint64_t initializeWithCopy for StewieAppDescription(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StewieAppDescription(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StewieAppDescription(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StewieAppDescription()
{
  return &type metadata for StewieAppDescription;
}

Swift::Int sub_1000A4BD8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000A4CA4()
{
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000A4D60()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_1000A4E28(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000A4E34(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_1000A4EEC(v5, v7) & 1;
}

unint64_t sub_1000A4E98()
{
  unint64_t result = qword_100384DC0;
  if (!qword_100384DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100384DC0);
  }
  return result;
}

uint64_t sub_1000A4EEC(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (a1[5] == a2[5] && a1[6] == a2[6])
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t sub_1000A4FB8(uint64_t a1)
{
  *(unsigned char *)(v1 + 24) = 2;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(void *)(v1 + 80) = 0;
  *(unsigned char *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 89) = 151126530;
  *(unsigned char *)(v1 + 93) = 2;
  uint64_t v3 = v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data;
  uint64_t v4 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1000A5064()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004010(&qword_10037F158);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10020CBFC((uint64_t)v4);
  uint64_t v5 = type metadata accessor for TransmissionProgress(0);
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  uint64_t result = sub_10000950C((uint64_t)v4, &qword_10037F158);
  int v8 = *(unsigned __int8 *)(v1 + 91);
  if (v8 == 2 || (v6 != 1) != (v8 & 1))
  {
    *(unsigned char *)(v1 + 91) = v6 != 1;
    return sub_1000A54BC();
  }
  return result;
}

uint64_t sub_1000A5168(uint64_t result)
{
  int v2 = *(unsigned __int8 *)(*(void *)(result + 48) + 120);
  int v3 = *(unsigned __int8 *)(v1 + 92);
  if (v3 == 9)
  {
    if (v2 == 9) {
      return result;
    }
LABEL_8:
    *(unsigned char *)(v1 + 92) = v2;
    return sub_1000A54BC();
  }
  if (v2 == 9 || v3 != v2) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1000A519C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 66);
  uint64_t result = sub_100078E0C(0, *(void *)(a1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__suggestedActions));
  int v4 = *(unsigned __int8 *)(v1 + 89);
  if (v4 == 2)
  {
    if (v2 != 2) {
      goto LABEL_10;
    }
  }
  else if (v2 == 2 || ((((v2 & 1) == 0) ^ v4) & 1) == 0)
  {
LABEL_10:
    *(unsigned char *)(v1 + 89) = v2;
    *(unsigned char *)(v1 + 90) = result & 1;
    return sub_1000A54BC();
  }
  int v5 = *(unsigned __int8 *)(v1 + 90);
  BOOL v7 = v5 == 2;
  int v6 = v5 & 1;
  BOOL v7 = !v7 && (result & 1) == v6;
  if (!v7) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1000A5240(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    char v3 = sub_100078E0C(5, *(void *)(v2 + 48));
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v1 + 93) = v3 & 1;

  return sub_1000A54BC();
}

uint64_t sub_1000A5288(uint64_t a1)
{
  sub_10000D544(a1, (uint64_t)v15, &qword_1003826B8);
  uint64_t v3 = v15[4];
  uint64_t v4 = sub_100004010(&qword_1003850E0);
  __chkstk_darwin(v4 - 8);
  int v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  sub_10000D544(a1, (uint64_t)v16, &qword_1003826B8);
  if (!*((void *)&v16[0] + 1)) {
    goto LABEL_10;
  }
  long long v20 = v16[2];
  long long v21 = v16[3];
  long long v22 = v16[4];
  uint64_t v23 = v17;
  long long v18 = v16[0];
  long long v19 = v16[1];
  sub_1000207A0(&v18, &v24);
  sub_1000207A0(&v24, &v25);
  if (v25 != 5 || BYTE1(v19) != 1)
  {
LABEL_10:
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 80) = 0;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(unsigned char *)(v1 + 88) = 1;
    *(_DWORD *)(v1 + 89) = 151126530;
    *(unsigned char *)(v1 + 93) = 2;
    uint64_t v12 = _s8SOSBuddy4DataVMa_0(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
    uint64_t v13 = v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data;
    swift_beginAccess();
    sub_1000A6D74((uint64_t)v6, v13);
    return swift_endAccess();
  }
  uint64_t result = sub_100141608(v3);
  uint64_t v8 = result;
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v1 + 40);
  if (v11)
  {
    if (v10
      && (*(void *)(v1 + 32) == result && v11 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      return swift_bridgeObjectRelease();
    }
  }
  else if (!v10)
  {
    return result;
  }
  *(void *)(v1 + 32) = v8;
  *(void *)(v1 + 40) = v10;
  swift_bridgeObjectRelease();
  return sub_1000A54BC();
}

uint64_t sub_1000A54BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004010(&qword_1003850E0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  float32x4_t v40 = &v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v3);
  BOOL v7 = &v34[-v6];
  __chkstk_darwin(v5);
  uint64_t v9 = &v34[-v8];
  uint64_t v10 = (int *)_s8SOSBuddy4DataVMa_0(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v17 = &v34[-v16];
  uint64_t v18 = *(void *)(v0 + 40);
  if (v18)
  {
    int v19 = *(unsigned __int8 *)(v0 + 24);
    if (v19 != 2)
    {
      int v20 = *(unsigned __int8 *)(v0 + 89);
      if (v20 != 2)
      {
        int v21 = *(unsigned __int8 *)(v0 + 90);
        if (v21 != 2 && *(unsigned char *)(v0 + 91) != 2)
        {
          int v37 = *(unsigned __int8 *)(v0 + 91);
          int v38 = v21;
          uint64_t v36 = *(void *)(v0 + 32);
          uint64_t v39 = v15;
          uint64_t result = sub_1000A60BC();
          if (result != 7)
          {
            char v22 = result;
            int v35 = v20 & 1;
            LOBYTE(v37) = v37 & 1;
            int v37 = v37;
            LOBYTE(v38) = v38 & 1;
            int v38 = v38;
            uint64_t v23 = v39;
            swift_bridgeObjectRetain();
            static DispatchTime.now()();
            uint64_t v24 = *(void *)(v1 + 80);
            char v25 = *(unsigned char *)(v1 + 88);
            float v26 = &v17[v10[5]];
            *float v26 = v36;
            v26[1] = v18;
            int8x16_t v27 = &v17[v10[6]];
            long long v28 = *(_OWORD *)(v1 + 64);
            *(_OWORD *)int8x16_t v27 = *(_OWORD *)(v1 + 48);
            *((_OWORD *)v27 + 1) = v28;
            *((void *)v27 + 4) = v24;
            v27[40] = v25;
            v17[v10[7]] = v19 & 1;
            v17[v10[8]] = v35 ^ 1;
            v17[v10[9]] = v38;
            v17[v10[10]] = v37;
            v17[v10[11]] = v22;
            uint64_t v29 = v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data;
            swift_beginAccess();
            sub_1000A6CA8(v29, (uint64_t)v9);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v23 + 48))(v9, 1, v10) == 1)
            {
              sub_10000950C((uint64_t)v9, &qword_1003850E0);
              sub_1000A6D10((uint64_t)v17, (uint64_t)v7);
              (*(void (**)(unsigned char *, void, uint64_t, int *))(v23 + 56))(v7, 0, 1, v10);
              uint64_t v30 = (uint64_t)v7;
              uint64_t v31 = (uint64_t)v40;
              uint64_t v32 = (uint64_t)v40;
            }
            else
            {
              sub_1000A6D10((uint64_t)v9, (uint64_t)v13);
              if (sub_1000A58A0((uint64_t)v13))
              {
                sub_1000A6E60((uint64_t)v13);
                return sub_1000A6E60((uint64_t)v17);
              }
              unint64_t v33 = sub_1000A5B14();
              sub_1001B6D38(6, v33);
              swift_bridgeObjectRelease();
              sub_1000A6E60((uint64_t)v13);
              sub_1000A6D10((uint64_t)v17, (uint64_t)v7);
              (*(void (**)(unsigned char *, void, uint64_t, int *))(v39 + 56))(v7, 0, 1, v10);
              uint64_t v30 = (uint64_t)v7;
              uint64_t v31 = (uint64_t)v40;
              uint64_t v32 = (uint64_t)v40;
            }
            sub_10000D544(v30, v32, &qword_1003850E0);
            swift_beginAccess();
            sub_1000A6D74(v31, v29);
            return swift_endAccess();
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000A58A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)_s8SOSBuddy4DataVMa_0(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v33 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  int v21 = (char *)&v32 - v20;
  uint64_t v22 = *(int *)(v19 + 32);
  int v23 = *(unsigned __int8 *)(v2 + v22);
  int v24 = *(unsigned __int8 *)(a1 + v22);
  sub_1000A6EBC(v2, (uint64_t)&v32 - v20);
  sub_1000A6EBC(a1, (uint64_t)v18);
  if (v23 != v24)
  {
    sub_1000A6E60((uint64_t)v18);
    sub_1000A6E60((uint64_t)v21);
    sub_1000A6EBC(v2, (uint64_t)v15);
    sub_1000A6EBC(a1, (uint64_t)v12);
LABEL_4:
    sub_1000A6E60((uint64_t)v12);
    sub_1000A6E60((uint64_t)v15);
    sub_1000A6EBC(v2, (uint64_t)v9);
    uint64_t v27 = v33;
    sub_1000A6EBC(a1, v33);
    goto LABEL_5;
  }
  int v25 = v21[v4[9]];
  sub_1000A6E60((uint64_t)v21);
  int v26 = v18[v4[9]];
  sub_1000A6E60((uint64_t)v18);
  sub_1000A6EBC(v2, (uint64_t)v15);
  sub_1000A6EBC(a1, (uint64_t)v12);
  if (v25 != v26) {
    goto LABEL_4;
  }
  int v30 = v15[v4[10]];
  sub_1000A6E60((uint64_t)v15);
  int v31 = v12[v4[10]];
  sub_1000A6E60((uint64_t)v12);
  sub_1000A6EBC(v2, (uint64_t)v9);
  uint64_t v27 = v33;
  sub_1000A6EBC(a1, v33);
  if (v30 == v31)
  {
    char v28 = sub_10028ADE8(v9[v4[11]], *(unsigned char *)(v27 + v4[11]));
    goto LABEL_6;
  }
LABEL_5:
  char v28 = 0;
LABEL_6:
  sub_1000A6E60(v27);
  sub_1000A6E60((uint64_t)v9);
  return v28 & 1;
}

unint64_t sub_1000A5B14()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_1003826A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002B7500;
  strcpy((char *)(inited + 32), "requestReason");
  *(_WORD *)(inited + 46) = -4864;
  uint64_t v3 = _s8SOSBuddy4DataVMa_0(0);
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0x6E6F697461727564;
  *(void *)(inited + 64) = 0xE800000000000000;
  unint64_t v4 = DispatchTime.uptimeNanoseconds.getter();
  if (DispatchTime.uptimeNanoseconds.getter() < v4)
  {
    unint64_t v5 = DispatchTime.uptimeNanoseconds.getter();
    if (v5 < DispatchTime.uptimeNanoseconds.getter())
    {
      __break(1u);
      JUMPOUT(0x1000A6084);
    }
  }
  *(NSNumber *)(inited + 72) = UInt64._bridgeToObjectiveC()();
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001002CCCB0;
  sub_100078C6C();
  *(void *)(inited + 96) = NSString.init(stringLiteral:)();
  strcpy((char *)(inited + 104), "currGPSState");
  *(unsigned char *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  *(NSNumber *)(inited + 120) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 128), "prevGPSState");
  *(unsigned char *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(NSNumber *)(inited + 144) = Bool._bridgeToObjectiveC()();
  *(void *)(inited + 152) = 0xD000000000000012;
  *(void *)(inited + 160) = 0x80000001002CCCD0;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 168) = v6;
  *(void *)(inited + 176) = 0xD000000000000013;
  *(void *)(inited + 184) = 0x80000001002CCCF0;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 192) = v7;
  strcpy((char *)(inited + 200), "currIsOriented");
  *(unsigned char *)(inited + 215) = -18;
  *(NSNumber *)(inited + 216) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 224), "prevIsOriented");
  *(unsigned char *)(inited + 239) = -18;
  *(NSNumber *)(inited + 240) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 248), "currUserAction");
  *(unsigned char *)(inited + 263) = -18;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 264) = v8;
  strcpy((char *)(inited + 272), "prevUserAction");
  *(unsigned char *)(inited + 287) = -18;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 288) = v9;
  unint64_t v10 = sub_100283ACC(inited);
  if ((*(unsigned char *)(v1 + *(int *)(v3 + 24) + 40) & 1) == 0)
  {
    Class isa = Double._bridgeToObjectiveC()().super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002699E8((uint64_t)isa, 0x76656C4572727563, 0xED00006E6F697461, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_1000A60BC()
{
  uint64_t result = 7;
  switch(*(unsigned char *)(v0 + 92))
  {
    case 1:
      uint64_t result = 6;
      break;
    case 2:
    case 3:
    case 7:
    case 8:
      uint64_t result = 1;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = *(unsigned char *)(v0 + 93) & 1 | 2u;
      break;
    case 6:
      uint64_t result = 0;
      break;
    case 9:
      return result;
    default:
      uint64_t result = 5;
      break;
  }
  return result;
}

uint64_t sub_1000A6144()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000950C(v0 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data, &qword_1003850E0);

  return swift_deallocClassInstance();
}

uint64_t sub_1000A61C0()
{
  return type metadata accessor for AnalyticsStateRetention(0);
}

uint64_t type metadata accessor for AnalyticsStateRetention(uint64_t a1)
{
  return sub_1000497F4(a1, (uint64_t *)&unk_100384DF8);
}

void sub_1000A61E8()
{
  sub_1000A62B8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000A62B8()
{
  if (!qword_100384E08)
  {
    _s8SOSBuddy4DataVMa_0(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100384E08);
    }
  }
}

uint64_t _s8SOSBuddy4DataVMa_0(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100385090);
}

void *sub_1000A6330(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (_OWORD *)((char *)a1 + v9);
    uint64_t v14 = (_OWORD *)((char *)a2 + v9);
    *(_OWORD *)((char *)v13 + 25) = *(_OWORD *)((char *)v14 + 25);
    long long v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v17 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000A6454(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A64CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (_OWORD *)(a1 + v8);
  uint64_t v13 = (_OWORD *)(a2 + v8);
  *(_OWORD *)((char *)v12 + 25) = *(_OWORD *)((char *)v13 + 25);
  long long v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000A65A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (_OWORD *)(a1 + v10);
  uint64_t v12 = (_OWORD *)(a2 + v10);
  long long v13 = *(_OWORD *)((char *)v12 + 25);
  long long v14 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v14;
  *(_OWORD *)((char *)v11 + 25) = v13;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000A6694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000A675C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  long long v14 = (_OWORD *)(a1 + v12);
  uint64_t v15 = (_OWORD *)(a2 + v12);
  long long v16 = v15[1];
  *long long v14 = *v15;
  v14[1] = v16;
  *(_OWORD *)((char *)v14 + 25) = *(_OWORD *)((char *)v15 + 25);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v17 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  return a1;
}

uint64_t sub_1000A6834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A6848);
}

uint64_t sub_1000A6848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000A690C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A6920);
}

uint64_t sub_1000A6920(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000A69E0()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1000A6A98(char a1)
{
  unint64_t result = 0x4154554F5F544153;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x5F544F4E5F544153;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000A6B8C(uint64_t a1)
{
  return sub_10000D544(a1, *v1 + 48, &qword_100382698);
}

uint64_t sub_1000A6BB4()
{
  return sub_1000A5064();
}

uint64_t sub_1000A6BD8(uint64_t a1)
{
  return sub_1000A5168(a1);
}

uint64_t sub_1000A6BFC(uint64_t a1)
{
  return sub_1000A519C(a1);
}

uint64_t sub_1000A6C20(uint64_t a1)
{
  return sub_1000A5240(a1);
}

uint64_t sub_1000A6C44(uint64_t a1)
{
  return sub_1000A5288(a1);
}

uint64_t sub_1000A6C68(uint64_t result)
{
  uint64_t v2 = *v1;
  int v3 = *(unsigned __int8 *)(v2 + 24);
  if (v3 == 2 || ((v3 ^ result) & 1) != 0)
  {
    *(unsigned char *)(v2 + 24) = result & 1;
    return sub_1000A54BC();
  }
  return result;
}

uint64_t sub_1000A6CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_1003850E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A6D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A6D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_1003850E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A6DDC(unsigned __int8 *a1, char *a2)
{
  return sub_10028ADE8(*a1, *a2);
}

Swift::Int sub_1000A6DE8()
{
  return sub_10016A8E8();
}

uint64_t sub_1000A6DF4()
{
  return sub_10016A7C0();
}

Swift::Int sub_1000A6DFC()
{
  return sub_10016A8E8();
}

unint64_t sub_1000A6E04@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000A707C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000A6E34@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000A6A98(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000A6E60(uint64_t a1)
{
  uint64_t v2 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A6EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for AnalyticsStateRetentionConnectionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A6FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsStateRetentionConnectionState()
{
  return &type metadata for AnalyticsStateRetentionConnectionState;
}

unint64_t sub_1000A7028()
{
  unint64_t result = qword_1003850E8[0];
  if (!qword_1003850E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003850E8);
  }
  return result;
}

unint64_t sub_1000A707C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10034A758, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000A70C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000A70D0()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000A711C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000A71A4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000A724C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AXConditionalContentWithPanelView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000A72DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A7324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_1000A735C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000A7454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000A754C(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        long long v16 = &v8[8 * v9];
        uint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)long long v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    int v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t sub_1000A7710@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  long long v16 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  sub_1000094C4(&qword_100385170);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  v15[1] = &protocol conformance descriptor for VStack<A>;
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  sub_1000094C4(&qword_100385178);
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for ModifiedContent();
  sub_1000094C4(&qword_100385180);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  sub_1000094C4(&qword_100385188);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = sub_100009B18(&qword_100385190, &qword_100385188);
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for VStack();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v15 - v10;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  long long v19 = *(_OWORD *)(a1 + 32);
  uint64_t v20 = v15[2];
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  unint64_t v12 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v12(v11, v9, v5);
  long long v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v5);
  v12(v16, v11, v5);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v5);
}

uint64_t sub_1000A7BB4@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *, uint64_t)@<X1>, uint64_t *a3@<X2>, void (*a4)(void, void)@<X3>, void (*a5)(char *, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  v103 = (void (*)(char *, uint64_t))a5;
  v91 = a4;
  uint64_t v92 = a1;
  uint64_t v99 = a6;
  sub_1000094C4(&qword_100385188);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  uint64_t v10 = type metadata accessor for TupleView();
  uint64_t v88 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  v87 = (char *)&v77 - v12;
  uint64_t v83 = *(a3 - 1);
  uint64_t v13 = __chkstk_darwin(v11);
  long long v82 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v9;
  uint64_t v86 = *(void *)(v9 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  float32x4_t v85 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v97 = (char *)&v77 - v18;
  uint64_t v81 = *(a2 - 1);
  uint64_t v19 = __chkstk_darwin(v17);
  float32x4_t v80 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = v8;
  v101 = *(char **)(v8 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  float32x4_t v84 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v100 = (char *)&v77 - v23;
  sub_1000094C4(&qword_100385170);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  sub_1000094C4(&qword_100385178);
  type metadata accessor for ModifiedContent();
  sub_1000094C4(&qword_100385180);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for ZStack();
  uint64_t v79 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v77 - v25;
  uint64_t v94 = v27;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v77 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  float32x4_t v34 = (char *)&v77 - v33;
  uint64_t v98 = v10;
  uint64_t v95 = type metadata accessor for _ConditionalContent();
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  v102 = (char *)&v77 - v35;
  uint64_t v36 = (void (*)(char *, char *, uint64_t))a2;
  v122 = (char *)a2;
  v123 = a3;
  uint64_t v96 = (uint64_t)a3;
  int v37 = (void (*)(char *, char *, uint64_t))v91;
  v124 = v91;
  v125 = (void (*)(void, void))v103;
  type metadata accessor for AXConditionalContentWithPanelView();
  uint64_t v38 = v92;
  uint64_t v39 = sub_1000A89D0();
  if (v39)
  {
    v101 = v34;
    __chkstk_darwin(v39);
    float32x4_t v40 = (void (*)(char *, char *, uint64_t))v96;
    *(&v77 - 6) = v36;
    *(&v77 - 5) = v40;
    float v41 = (void (*)(char *, char *, uint64_t))v103;
    *(&v77 - 4) = v37;
    *(&v77 - 3) = v41;
    *(&v77 - 2) = (void (*)(char *, char *, uint64_t))v38;
    static Alignment.center.getter();
    ZStack.init(alignment:content:)();
    uint64_t v42 = v94;
    uint64_t v43 = swift_getWitnessTable();
    sub_1000AA19C();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v26, v42);
    uint64_t v44 = sub_100009B18(&qword_100385190, &qword_100385188);
    uint64_t v104 = v43;
    uint64_t v105 = v44;
    swift_getWitnessTable();
    float v45 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    float v46 = v101;
    v45(v101, v32, v28);
    float v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v32, v28);
    v45(v32, v46, v28);
    swift_getWitnessTable();
    sub_1000A735C((uint64_t)v32, v28);
    v47(v32, v28);
    v47(v46, v28);
  }
  else
  {
    float32x2_t v48 = v80;
    (*(void (**)(void))(v38 + 16))();
    uint64_t v79 = v28;
    float32x2_t v49 = v84;
    sub_1000AA19C();
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v81 + 8))(v48, v36);
    uint64_t v50 = sub_100009B18(&qword_100385190, &qword_100385188);
    v120 = (void (*)(void, void))v37;
    uint64_t v121 = v50;
    uint64_t v51 = v50;
    uint64_t WitnessTable = v50;
    float32x4_t v80 = (char *)&protocol conformance descriptor for <> ModifiedContent<A, B>;
    uint64_t v52 = v90;
    uint64_t v81 = swift_getWitnessTable();
    unint64_t v53 = v101;
    float v77 = (void (*)(char *, char *, uint64_t))*((void *)v101 + 2);
    v77(v100, v49, v52);
    v91 = (void (*)(void, void))*((void *)v53 + 1);
    v101 = v53 + 8;
    uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v91)(v49, v52);
    float32x2_t v55 = v82;
    (*(void (**)(uint64_t))(v38 + 32))(v54);
    float32x4_t v56 = v85;
    uint64_t v57 = v96;
    float32x2_t v58 = (void (*)(void, void))v103;
    sub_1000AA19C();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v55, v57);
    v118 = v58;
    uint64_t v119 = v51;
    uint64_t v59 = v89;
    uint64_t v96 = swift_getWitnessTable();
    uint64_t v60 = v86;
    float32x4_t v61 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    float32x4_t v62 = v97;
    v61(v97, v56, v59);
    float32x4_t v63 = *(void (**)(char *, uint64_t))(v60 + 8);
    v63(v56, v59);
    v103 = v63;
    v77(v49, v100, v52);
    uint64_t v116 = 0;
    char v117 = 1;
    v122 = v49;
    v123 = &v116;
    v61(v56, v62, v59);
    v124 = (void (*)(void, void))v56;
    v115[0] = v52;
    v115[1] = &type metadata for Spacer;
    v115[2] = v59;
    uint64_t v112 = v81;
    v113 = &protocol witness table for Spacer;
    uint64_t v114 = v96;
    uint64_t v64 = (uint64_t)v87;
    sub_1000A754C((uint64_t)&v122, 3uLL, (uint64_t)v115);
    v63(v56, v59);
    v65 = v49;
    uint64_t v66 = v79;
    float32x4_t v67 = (void (*)(char *, uint64_t))v91;
    v91(v65, v52);
    uint64_t v110 = swift_getWitnessTable();
    uint64_t v111 = WitnessTable;
    swift_getWitnessTable();
    uint64_t v68 = v98;
    swift_getWitnessTable();
    sub_1000A7454(v64, v66, v68);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v64, v68);
    v103(v97, v59);
    v67(v100, v52);
  }
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v70 = sub_100009B18(&qword_100385190, &qword_100385188);
  uint64_t v108 = v69;
  uint64_t v109 = v70;
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v106 = v71;
  uint64_t v107 = v72;
  uint64_t v73 = v95;
  swift_getWitnessTable();
  uint64_t v74 = v93;
  float v75 = v102;
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 16))(v99, v102, v73);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v75, v73);
}

uint64_t sub_1000A89D0()
{
  if (*(void *)v0)
  {
    id v1 = *(id *)(*(void *)v0 + 112);
    char v2 = UIContentSizeCategory.isAccessibilityCategory.getter();

    return v2 & 1;
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000AA3D4((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A8A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  sub_1000094C4(&qword_100385178);
  type metadata accessor for ModifiedContent();
  sub_1000094C4(&qword_100385180);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getTupleTypeMetadata2();
  uint64_t v46 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v44 = type metadata accessor for VStack();
  uint64_t v50 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v36 - v10;
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v11 = __chkstk_darwin(v49);
  uint64_t v42 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  float v45 = (char *)&v36 - v13;
  sub_1000094C4(&qword_100385170);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  uint64_t v39 = &protocol conformance descriptor for VStack<A>;
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for ScrollView();
  uint64_t v53 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v38 = (char *)&v36 - v18;
  static Axis.Set.vertical.getter();
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v20 = v51;
  uint64_t v61 = a4;
  uint64_t v62 = v51;
  uint64_t v63 = a1;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v21 = v53;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  uint64_t v36 = v53 + 16;
  int v37 = v22;
  v22(v19, v17, v14);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  uint64_t v53 = v21 + 8;
  float v41 = v23;
  v23(v17, v14);
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v57 = v20;
  uint64_t v58 = a1;
  static HorizontalAlignment.center.getter();
  uint64_t v24 = v43;
  VStack.init(alignment:spacing:content:)();
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  uint64_t v25 = v44;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v42;
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v24, v25);
  v67[2] = v26;
  v67[3] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v28 = v49;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v29 = v48;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  uint64_t v31 = v45;
  v30(v45, v27, v28);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v29 + 8);
  v32(v27, v28);
  uint64_t v33 = v38;
  v37(v17, v38, v14);
  v67[0] = v17;
  v30(v27, v31, v28);
  v67[1] = v27;
  v66[0] = v14;
  v66[1] = v28;
  uint64_t v64 = v40;
  uint64_t v65 = v51;
  sub_1000A754C((uint64_t)v67, 2uLL, (uint64_t)v66);
  v32(v31, v28);
  float32x4_t v34 = v41;
  v41(v33, v14);
  v32(v27, v28);
  return v34(v17, v14);
}

uint64_t sub_1000A9118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  sub_1000094C4(&qword_100385170);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for VStack();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v20 - v15;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = v20;
  uint64_t v26 = a1;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v17(v16, v14, v10);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v14, v10);
  v17(v21, v16, v10);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, v10);
}

uint64_t sub_1000A9328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v5 = a1;
  uint64_t v44 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v31 - v11;
  float v45 = (char *)&v31 - v11;
  (*(void (**)(void))(v10 + 16))();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v39 = v6 + 16;
  uint64_t v40 = v13;
  uint64_t v38 = v9;
  v13(v12, v9, a2);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v41 = v6 + 8;
  uint64_t v42 = v14;
  v14(v9, a2);
  uint64_t v15 = static Color.clear.getter();
  long long v51 = *(_OWORD *)(v5 + 48);
  uint64_t v52 = *(void *)(v5 + 64);
  sub_100004010(&qword_100383D50);
  State.wrappedValue.getter();
  double v16 = *(double *)&v50;
  long long v51 = *(_OWORD *)(v5 + 48);
  uint64_t v52 = *(void *)(v5 + 64);
  State.wrappedValue.getter();
  double v17 = *(double *)&v50;
  uint64_t v18 = static Alignment.center.getter();
  sub_100165DE4(0.0, 1, 0.0, 1, INFINITY, 0, v16, 0, (uint64_t)&v51, 0.0, 1, v17, 0, v18, v19, v15);
  swift_release();
  long long v20 = v51;
  char v21 = v52;
  uint64_t v22 = v53;
  LOBYTE(v5) = v54;
  uint64_t v23 = v55;
  LOBYTE(v12) = v56;
  uint64_t v37 = v57;
  int v36 = v58;
  uint64_t v24 = v59;
  int v35 = v60;
  uint64_t v34 = v61;
  int v33 = v62;
  uint64_t v32 = v63;
  uint64_t v31 = v64;
  uint64_t v25 = v38;
  v40(v38, v45, a2);
  long long v51 = v20;
  LOBYTE(v52) = v21;
  uint64_t v53 = v22;
  char v54 = v5;
  uint64_t v55 = v23;
  char v56 = (char)v12;
  uint64_t v57 = v37;
  unsigned __int8 v58 = v36;
  uint64_t v59 = v24;
  unsigned __int8 v60 = v35;
  uint64_t v61 = v34;
  unsigned __int8 v62 = v33;
  uint64_t v63 = v32;
  uint64_t v64 = v31;
  uint64_t v26 = v25;
  uint64_t v49 = v25;
  uint64_t v50 = &v51;
  swift_retain();
  v48[0] = a2;
  uint64_t v27 = a2;
  v48[1] = sub_100004010(&qword_100385170);
  uint64_t v46 = v43;
  unint64_t v47 = sub_1000AA51C();
  sub_1000A754C((uint64_t)&v49, 2uLL, (uint64_t)v48);
  swift_release();
  uint64_t v28 = a2;
  uint64_t v29 = v42;
  v42(v45, v28);
  swift_release();
  return v29(v26, v27);
}

uint64_t sub_1000A96F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v21[0] = a5;
  v21[1] = a6;
  sub_1000094C4(&qword_100385178);
  type metadata accessor for ModifiedContent();
  sub_1000094C4(&qword_100385180);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for ZStack();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v16 = (char *)v21 - v15;
  static Alignment.bottom.getter();
  v21[4] = a2;
  v21[5] = a3;
  v21[6] = a4;
  v21[7] = v21[0];
  unsigned char v21[8] = a1;
  ZStack.init(alignment:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v18(v16, v14, v10);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  uint64_t v23 = 0;
  char v24 = 1;
  v25[0] = &v23;
  v18(v14, v16, v10);
  v25[1] = v14;
  v22[0] = &type metadata for Spacer;
  v22[1] = v10;
  v21[10] = &protocol witness table for Spacer;
  v21[11] = WitnessTable;
  sub_1000A754C((uint64_t)v25, 2uLL, (uint64_t)v22);
  v19(v16, v10);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v10);
}

uint64_t sub_1000A9990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v41 = a2;
  uint64_t v49 = a6;
  uint64_t v8 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  float v45 = (char *)&v40 - v12;
  sub_1000094C4(&qword_100385180);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v48 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v40 = (char *)&v40 - v17;
  __chkstk_darwin(v16);
  unint64_t v47 = (char *)&v40 - v18;
  long long v56 = *(_OWORD *)(a1 + 48);
  uint64_t v57 = *(void *)(a1 + 64);
  long long v58 = *(_OWORD *)(a1 + 48);
  *(void *)&long long v59 = *(void *)(a1 + 64);
  sub_100004010(&qword_100383D50);
  State.wrappedValue.getter();
  double v19 = *((double *)v53 + 1);
  long long v58 = v56;
  *(void *)&long long v59 = v57;
  State.wrappedValue.getter();
  double v20 = *((double *)v53 + 1);
  uint64_t v21 = static Alignment.center.getter();
  double v23 = sub_100166B8C(0.0, 1, 0.0, 1, INFINITY, 0, v19, 0, (uint64_t)&v58, 0.0, 1.0, 0.0, 1, v20, 0, v21, v22, 6);
  (*(void (**)(double))(a1 + 32))(v23);
  static Edge.Set.bottom.getter();
  if (*(void *)a1)
  {
    uint64_t v24 = qword_10037DCE8;
    swift_retain();
    if (v24 != -1) {
      swift_once();
    }
    swift_release();
    uint64_t v25 = v45;
    uint64_t v26 = v43;
    View.padding(_:_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v41;
    *(void *)(v27 + 24) = a3;
    *(void *)(v27 + 32) = v42;
    *(void *)(v27 + 40) = v26;
    long long v28 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v27 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v27 + 96) = v28;
    *(void *)(v27 + 112) = *(void *)(a1 + 64);
    long long v29 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v27 + 48) = *(_OWORD *)a1;
    *(_OWORD *)(v27 + 64) = v29;
    sub_1000AA37C(a1);
    type metadata accessor for CGSize(0);
    v55[4] = v26;
    v55[5] = &protocol witness table for _PaddingLayout;
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1000AA3D4(&qword_100380C98, type metadata accessor for CGSize);
    uint64_t v31 = v40;
    View.onGeometryChange<A>(of:do:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v25, v11);
    uint64_t v32 = sub_100009B18(&qword_100385198, &qword_100385180);
    v55[2] = WitnessTable;
    v55[3] = v32;
    uint64_t v33 = swift_getWitnessTable();
    uint64_t v34 = v44;
    int v35 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    int v36 = v47;
    v35(v47, v31, v13);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v34 + 8);
    v37(v31, v13);
    v53[6] = v64;
    v53[7] = v65;
    uint64_t v54 = v66;
    v53[2] = v60;
    v53[3] = v61;
    v53[4] = v62;
    v53[5] = v63;
    v53[0] = v58;
    v53[1] = v59;
    v55[0] = v53;
    uint64_t v38 = v48;
    v35(v48, v36, v13);
    v55[1] = v38;
    v52[0] = sub_100004010(&qword_100385178);
    v52[1] = v13;
    unint64_t v50 = sub_1000AA41C();
    uint64_t v51 = v33;
    sub_1000A754C((uint64_t)v55, 2uLL, (uint64_t)v52);
    v37(v36, v13);
    return ((uint64_t (*)(char *, uint64_t))v37)(v38, v13);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000AA3D4((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A9FCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (qword_10037DE38 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000FD84(v5, (uint64_t)qword_1003A9B80);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)&long long v13 = v3;
    *((void *)&v13 + 1) = v4;
    type metadata accessor for CGSize(0);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)&long long v13 = sub_1001B3178(v9, v10, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Floating panel size changed: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  long long v13 = *(_OWORD *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 64);
  v12[0] = v3;
  v12[1] = v4;
  sub_100004010(&qword_100383D50);
  return State.wrappedValue.setter();
}

uint64_t sub_1000AA19C()
{
  return swift_release();
}

uint64_t sub_1000AA210@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1000A7710(a1, a2);
}

void sub_1000AA254(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000AA25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_1000AA268()
{
  sub_10004F530();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t sub_1000AA2A4()
{
  return sub_1000AA504((uint64_t (*)(void, void, void, void, void))sub_1000A7BB4);
}

uint64_t sub_1000AA2BC()
{
  return sub_1000AA504((uint64_t (*)(void, void, void, void, void))sub_1000A8A6C);
}

uint64_t sub_1000AA2D4()
{
  return sub_1000AA504((uint64_t (*)(void, void, void, void, void))sub_1000A9118);
}

uint64_t sub_1000AA2EC()
{
  return sub_1000AA504((uint64_t (*)(void, void, void, void, void))sub_1000A96F0);
}

uint64_t sub_1000AA304()
{
  return sub_1000AA504((uint64_t (*)(void, void, void, void, void))sub_1000A9990);
}

uint64_t sub_1000AA31C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1000AA36C(uint64_t *a1)
{
  return sub_1000A9FCC(a1, v1 + 48);
}

uint64_t sub_1000AA37C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AA3D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AA41C()
{
  unint64_t result = qword_1003851A0;
  if (!qword_1003851A0)
  {
    sub_1000094C4(&qword_100385178);
    sub_1000AA498();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003851A0);
  }
  return result;
}

unint64_t sub_1000AA498()
{
  unint64_t result = qword_1003851A8;
  if (!qword_1003851A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003851A8);
  }
  return result;
}

uint64_t sub_1000AA4EC()
{
  return sub_1000AA504((uint64_t (*)(void, void, void, void, void))sub_1000A9328);
}

uint64_t sub_1000AA504(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_1000AA51C()
{
  unint64_t result = qword_1003851B0;
  if (!qword_1003851B0)
  {
    sub_1000094C4(&qword_100385170);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003851B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AXConditionalContentOnEnvironmentKey()
{
  return &type metadata for AXConditionalContentOnEnvironmentKey;
}

uint64_t sub_1000AA5A8()
{
  return swift_getWitnessTable();
}

void *sub_1000AA900()
{
  sub_100004010(&qword_1003851D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002B7840;
  *(void *)(inited + 32) = 6579570;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = static Color.red.getter();
  *(void *)(inited + 56) = 0x65676E61726FLL;
  *(void *)(inited + 64) = 0xE600000000000000;
  *(void *)(inited + 72) = static Color.orange.getter();
  *(void *)(inited + 80) = 0x776F6C6C6579;
  *(void *)(inited + 88) = 0xE600000000000000;
  *(void *)(inited + 96) = static Color.yellow.getter();
  *(void *)(inited + 104) = 0x6E65657267;
  *(void *)(inited + 112) = 0xE500000000000000;
  *(void *)(inited + 120) = static Color.green.getter();
  *(void *)(inited + 128) = 1953393005;
  *(void *)(inited + 136) = 0xE400000000000000;
  *(void *)(inited + 144) = static Color.mint.getter();
  *(void *)(inited + 152) = 1818322292;
  *(void *)(inited + 160) = 0xE400000000000000;
  *(void *)(inited + 168) = static Color.teal.getter();
  *(void *)(inited + 176) = 1851881827;
  *(void *)(inited + 184) = 0xE400000000000000;
  *(void *)(inited + 192) = static Color.cyan.getter();
  *(void *)(inited + 200) = 1702194274;
  *(void *)(inited + 208) = 0xE400000000000000;
  *(void *)(inited + 216) = static Color.blue.getter();
  *(void *)(inited + 224) = 0x6F6769646E69;
  *(void *)(inited + 232) = 0xE600000000000000;
  *(void *)(inited + 240) = static Color.indigo.getter();
  *(void *)(inited + 248) = 0x656C70727570;
  *(void *)(inited + 256) = 0xE600000000000000;
  *(void *)(inited + 264) = static Color.purple.getter();
  *(void *)(inited + 272) = 1802398064;
  *(void *)(inited + 280) = 0xE400000000000000;
  *(void *)(inited + 288) = static Color.pink.getter();
  *(void *)(inited + 296) = 0x6E776F7262;
  *(void *)(inited + 304) = 0xE500000000000000;
  *(void *)(inited + 312) = static Color.brown.getter();
  *(void *)(inited + 320) = 0x6574696877;
  *(void *)(inited + 328) = 0xE500000000000000;
  *(void *)(inited + 336) = static Color.white.getter();
  *(void *)(inited + 344) = 2036429415;
  *(void *)(inited + 352) = 0xE400000000000000;
  *(void *)(inited + 360) = static Color.gray.getter();
  *(void *)(inited + 368) = 0x6B63616C62;
  *(void *)(inited + 376) = 0xE500000000000000;
  *(void *)(inited + 384) = static Color.black.getter();
  *(void *)(inited + 392) = 0x7261656C63;
  *(void *)(inited + 400) = 0xE500000000000000;
  *(void *)(inited + 408) = static Color.clear.getter();
  *(void *)(inited + 416) = 0x7972616D697270;
  *(void *)(inited + 424) = 0xE700000000000000;
  *(void *)(inited + 432) = static Color.primary.getter();
  *(void *)(inited + 440) = 0x7261646E6F636573;
  *(void *)(inited + 448) = 0xE900000000000079;
  *(void *)(inited + 456) = static Color.secondary.getter();
  unint64_t result = (void *)sub_100283AE4(inited);
  off_1003851B8 = result;
  return result;
}

void *sub_1000AAB20()
{
  sub_100004010(&qword_1003851C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002B7850;
  *(void *)(inited + 32) = 0x72476D6574737973;
  *(void *)(inited + 40) = 0xEB00000000327961;
  uint64_t v1 = self;
  *(void *)(inited + 48) = [v1 systemGray2Color];
  *(void *)(inited + 56) = 0x72476D6574737973;
  *(void *)(inited + 64) = 0xEB00000000337961;
  *(void *)(inited + 72) = [v1 systemGray3Color];
  *(void *)(inited + 80) = 0x72476D6574737973;
  *(void *)(inited + 88) = 0xEB00000000347961;
  *(void *)(inited + 96) = [v1 systemGray4Color];
  *(void *)(inited + 104) = 0x72476D6574737973;
  *(void *)(inited + 112) = 0xEB00000000357961;
  *(void *)(inited + 120) = [v1 systemGray5Color];
  *(void *)(inited + 128) = 0x72476D6574737973;
  *(void *)(inited + 136) = 0xEB00000000367961;
  *(void *)(inited + 144) = [v1 systemGray6Color];
  *(void *)(inited + 152) = 0x6C6562616CLL;
  *(void *)(inited + 160) = 0xE500000000000000;
  *(void *)(inited + 168) = [v1 labelColor];
  strcpy((char *)(inited + 176), "secondaryLabel");
  *(unsigned char *)(inited + 191) = -18;
  *(void *)(inited + 192) = [v1 secondaryLabelColor];
  strcpy((char *)(inited + 200), "tertiaryLabel");
  *(_WORD *)(inited + 214) = -4864;
  *(void *)(inited + 216) = [v1 tertiaryLabelColor];
  *(void *)(inited + 224) = 0x616E726574617571;
  *(void *)(inited + 232) = 0xEF6C6562614C7972;
  *(void *)(inited + 240) = [v1 quaternaryLabelColor];
  *(void *)(inited + 248) = 1802398060;
  *(void *)(inited + 256) = 0xE400000000000000;
  *(void *)(inited + 264) = [v1 linkColor];
  *(void *)(inited + 272) = 0x6C6F686563616C70;
  *(void *)(inited + 280) = 0xEF74786554726564;
  *(void *)(inited + 288) = [v1 placeholderTextColor];
  *(void *)(inited + 296) = 0x6F74617261706573;
  *(void *)(inited + 304) = 0xE900000000000072;
  *(void *)(inited + 312) = [v1 separatorColor];
  *(void *)(inited + 320) = 0x655365757161706FLL;
  *(void *)(inited + 328) = 0xEF726F7461726170;
  *(void *)(inited + 336) = [v1 opaqueSeparatorColor];
  *(void *)(inited + 344) = 0xD000000000000010;
  *(void *)(inited + 352) = 0x80000001002CCD20;
  *(void *)(inited + 360) = [v1 systemBackgroundColor];
  *(void *)(inited + 368) = 0xD000000000000019;
  *(void *)(inited + 376) = 0x80000001002CCD40;
  *(void *)(inited + 384) = [v1 secondarySystemBackgroundColor];
  *(void *)(inited + 392) = 0xD000000000000018;
  *(void *)(inited + 400) = 0x80000001002CCD60;
  *(void *)(inited + 408) = [v1 tertiarySystemBackgroundColor];
  *(void *)(inited + 416) = 0xD000000000000017;
  *(void *)(inited + 424) = 0x80000001002CCD80;
  *(void *)(inited + 432) = [v1 systemGroupedBackgroundColor];
  *(void *)(inited + 440) = 0xD000000000000020;
  *(void *)(inited + 448) = 0x80000001002CCDA0;
  *(void *)(inited + 456) = [v1 secondarySystemGroupedBackgroundColor];
  *(void *)(inited + 464) = 0xD00000000000001FLL;
  *(void *)(inited + 472) = 0x80000001002CCDD0;
  *(void *)(inited + 480) = [v1 tertiarySystemGroupedBackgroundColor];
  *(void *)(inited + 488) = 0x69466D6574737973;
  *(void *)(inited + 496) = 0xEA00000000006C6CLL;
  *(void *)(inited + 504) = [v1 systemFillColor];
  *(void *)(inited + 512) = 0xD000000000000013;
  *(void *)(inited + 520) = 0x80000001002CCDF0;
  *(void *)(inited + 528) = [v1 secondarySystemFillColor];
  *(void *)(inited + 536) = 0xD000000000000012;
  *(void *)(inited + 544) = 0x80000001002CCE10;
  *(void *)(inited + 552) = [v1 tertiarySystemFillColor];
  *(void *)(inited + 560) = 0xD000000000000014;
  *(void *)(inited + 568) = 0x80000001002CCE30;
  *(void *)(inited + 576) = [v1 quaternarySystemFillColor];
  unint64_t result = (void *)sub_100283C00(inited);
  off_1003851C0 = result;
  return result;
}

uint64_t sub_1000AB050(uint64_t a1, uint64_t a2)
{
  if (qword_10037DD20 != -1) {
    swift_once();
  }
  uint64_t v4 = off_1003851B8;
  if (!*((void *)off_1003851B8 + 2))
  {
LABEL_7:
    if (qword_10037DD28 != -1) {
      swift_once();
    }
    uint64_t v8 = off_1003851C0;
    if (*((void *)off_1003851C0 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_1001BEC58(a1, a2);
      if (v10)
      {
        id v11 = *(id *)(v8[7] + 8 * v9);
        swift_bridgeObjectRelease();
        return Color.init(uiColor:)();
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1001BEC58(a1, a2);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v4[7] + 8 * v5);
  swift_retain();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000AB188()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  __chkstk_darwin(v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:));
  return Color.init(_:red:green:blue:opacity:)();
}

ValueMetadata *type metadata accessor for StewieOverInternetView()
{
  return &type metadata for StewieOverInternetView;
}

uint64_t sub_1000AB2A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AB2C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v2 = type metadata accessor for StackNavigationViewStyle();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100004010(&qword_1003851D8);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004010(&qword_1003851E0);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin(v8);
  char v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void **)(v1 + 32);
  if (v11)
  {
    uint64_t v13 = v11[9];
    uint64_t v12 = v11[10];
    sub_100008F88(v11 + 6, v13);
    uint64_t v14 = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 32))(v36, v13, v12);
    v24[1] = v24;
    __chkstk_darwin(v14);
    v24[-2] = v1;
    v24[-1] = v36;
    sub_100004010(&qword_1003851E8);
    uint64_t v15 = sub_1000094C4(&qword_1003851F0);
    uint64_t v16 = sub_1000094C4(&qword_1003851F8);
    uint64_t v17 = sub_1000094C4(&qword_100385200);
    uint64_t v18 = sub_100009B18(&qword_100385208, &qword_100385200);
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v20 = sub_100009B18(&qword_100385210, &qword_1003851F8);
    uint64_t v32 = v15;
    uint64_t v33 = v16;
    uint64_t v34 = OpaqueTypeConformance2;
    uint64_t v35 = v20;
    swift_getOpaqueTypeConformance2();
    NavigationView.init(content:)();
    StackNavigationViewStyle.init()();
    sub_100009B18(&qword_100385218, &qword_1003851D8);
    sub_1000ACCD8(&qword_100385220, (void (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle);
    uint64_t v21 = v28;
    uint64_t v22 = v30;
    View.navigationViewStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v22);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v31, v10, v26);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v36);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000ACCD8((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AB738@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v23[1] = a3;
  uint64_t v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = sub_100004010(&qword_1003851F0);
  uint64_t v9 = *(void *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  id v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = *a1;
  long long v37 = a1[1];
  long long v38 = v12;
  long long v36 = a1[2];
  sub_1000090FC(a2, (uint64_t)&v24);
  uint64_t v13 = (_OWORD *)swift_allocObject();
  long long v14 = a1[1];
  v13[1] = *a1;
  v13[2] = v14;
  v13[3] = a1[2];
  sub_100009164(&v24, (uint64_t)(v13 + 4));
  sub_1000090FC(a2, (uint64_t)v35);
  uint64_t v15 = swift_allocObject();
  sub_100009164(v35, v15 + 16);
  sub_10004ED30((uint64_t)&v38);
  sub_10004ED30((uint64_t)&v37);
  sub_10004ED30((uint64_t)&v36);
  type metadata accessor for UIMetrics();
  sub_1000ACCD8((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v16 = EnvironmentObject.init()();
  uint64_t v18 = v17;
  type metadata accessor for CGSize(0);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  State.init(wrappedValue:)();
  *(void *)&long long v24 = v16;
  *((void *)&v24 + 1) = v18;
  uint64_t v25 = sub_1000ACC28;
  uint64_t v26 = v13;
  uint64_t v27 = sub_1000ACC6C;
  uint64_t v28 = v15;
  long long v29 = v33;
  uint64_t v30 = v34;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v5);
  uint64_t v19 = sub_100004010(&qword_100385200);
  uint64_t v20 = sub_100009B18(&qword_100385208, &qword_100385200);
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v23[4] = a1;
  sub_100004010(&qword_1003851F8);
  *(void *)&long long v24 = v19;
  *((void *)&v24 + 1) = v20;
  swift_getOpaqueTypeConformance2();
  sub_100009B18(&qword_100385210, &qword_1003851F8);
  uint64_t v21 = v23[0];
  View.toolbar<A>(content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v21);
}

uint64_t sub_1000ABB7C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004010(&qword_100385240);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  uint64_t v9 = sub_100004010(&qword_100385248);
  sub_1000ABC9C(a1, a2, (uint64_t)&v8[*(int *)(v9 + 44)]);
  uint64_t v10 = sub_100008F88(a2, a2[3]);
  uint64_t v11 = *v10;
  long long v16 = *(_OWORD *)(*v10 + 48);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = *(void *)(v11 + 72);
  LOBYTE(a2) = static Edge.Set.all.getter();
  sub_10000D2A0((uint64_t)v8, a3, &qword_100385240);
  uint64_t v14 = a3 + *(int *)(sub_100004010(&qword_100385250) + 36);
  *(unsigned char *)uint64_t v14 = (_BYTE)a2;
  *(_OWORD *)(v14 + 8) = v16;
  *(void *)(v14 + 24) = v12;
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = 0;
  return sub_10000950C((uint64_t)v8, &qword_100385240);
}

uint64_t sub_1000ABC9C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004010(&qword_10037F140);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_100385258);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100004010(&qword_100385260);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  long long v16 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    if (*(void *)(v19 + 64))
    {
      uint64_t v20 = *(unsigned __int8 *)(v19 + 120);
      BOOL v21 = v20 == 2 || (v20 & 1) == 0;
    }
    else
    {
      BOOL v21 = 1;
    }
    uint64_t v77 = (uint64_t)&v71 - v17;
    uint64_t v75 = v18;
    uint64_t v76 = a3;
    uint64_t v22 = *(void **)(a1 + 32);
    if (v22)
    {
      uint64_t v23 = v22[9];
      uint64_t v24 = v22[10];
      uint64_t v74 = v22 + 6;
      uint64_t v72 = v22;
      sub_100008F88(v22 + 6, v23);
      (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24);
      static Font.Weight.light.getter();
      uint64_t v25 = enum case for Font.Design.default(_:);
      uint64_t v26 = type metadata accessor for Font.Design();
      uint64_t v27 = *(void *)(v26 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 104))(v8, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v8, 0, 1, v26);
      uint64_t v28 = static Font.system(size:weight:design:)();
      sub_10000950C((uint64_t)v8, &qword_10037F140);
      BOOL v29 = v21;
      sub_1000814FC(v28, (uint64_t)v11);
      swift_release();
      uint64_t v30 = a2[3];
      *(void *)&long long v73 = a2;
      sub_100008F88(a2, v30);
      static Alignment.center.getter();
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
      sub_10000D2A0((uint64_t)v11, (uint64_t)v16, &qword_100385258);
      uint64_t v31 = &v16[*(int *)(v12 + 36)];
      long long v32 = v85;
      *((_OWORD *)v31 + 4) = v84;
      *((_OWORD *)v31 + 5) = v32;
      *((_OWORD *)v31 + 6) = v86;
      long long v33 = v81;
      *(_OWORD *)uint64_t v31 = v80;
      *((_OWORD *)v31 + 1) = v33;
      long long v34 = v83;
      *((_OWORD *)v31 + 2) = v82;
      *((_OWORD *)v31 + 3) = v34;
      sub_10000950C((uint64_t)v11, &qword_100385258);
      sub_1000ACD20((uint64_t)v16, v77);
      uint64_t v35 = v72;
      uint64_t v36 = v72[9];
      uint64_t v37 = v72[10];
      long long v38 = v74;
      sub_100008F88(v74, v36);
      uint64_t v78 = (*(uint64_t (**)(BOOL, uint64_t, uint64_t))(v37 + 168))(v29, v36, v37);
      uint64_t v79 = v39;
      sub_100033310();
      uint64_t v40 = Text.init<A>(_:)();
      uint64_t v42 = v41;
      char v44 = v43 & 1;
      uint64_t v45 = v35[9];
      uint64_t v46 = v35[10];
      sub_100008F88(v38, v45);
      (*(void (**)(uint64_t, uint64_t))(v46 + 56))(v45, v46);
      uint64_t v47 = Text.font(_:)();
      uint64_t v49 = v48;
      uint64_t v71 = v50;
      LOBYTE(v29) = v51 & 1;
      sub_100033364(v40, v42, v44);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v52 = v35[9];
      uint64_t v53 = v35[10];
      sub_100008F88(v38, v52);
      (*(void (**)(uint64_t, uint64_t))(v53 + 64))(v52, v53);
      uint64_t v54 = Text.foregroundColor(_:)();
      uint64_t v56 = v55;
      uint64_t v74 = v57;
      char v59 = v58 & 1;
      sub_100033364(v47, v49, v29);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t KeyPath = swift_getKeyPath();
      long long v61 = sub_100008F88((void *)v73, *(void *)(v73 + 24));
      uint64_t v62 = *v61;
      long long v73 = *(_OWORD *)(*v61 + 184);
      uint64_t v63 = *(void *)(v62 + 208);
      uint64_t v72 = *(void **)(v62 + 200);
      LOBYTE(v53) = static Edge.Set.all.getter();
      uint64_t v64 = v77;
      uint64_t v65 = v75;
      sub_10000D2A0(v77, v75, &qword_100385260);
      uint64_t v66 = v76;
      sub_10000D2A0(v65, v76, &qword_100385260);
      uint64_t v67 = v66 + *(int *)(sub_100004010(&qword_100385268) + 48);
      *(void *)uint64_t v67 = v54;
      *(void *)(v67 + 8) = v56;
      *(unsigned char *)(v67 + 16) = v59;
      *(void *)(v67 + 24) = v74;
      *(void *)(v67 + 32) = KeyPath;
      *(unsigned char *)(v67 + 40) = 1;
      *(unsigned char *)(v67 + 48) = v53;
      *(_OWORD *)(v67 + 56) = v73;
      *(void *)(v67 + 72) = v72;
      *(void *)(v67 + 80) = v63;
      *(unsigned char *)(v67 + 88) = 0;
      sub_100033724(v54, v56, v59);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10000950C(v64, &qword_100385260);
      sub_100033364(v54, v56, v59);
      swift_release();
      swift_bridgeObjectRelease();
      return sub_10000950C(v65, &qword_100385260);
    }
    type metadata accessor for UIMetrics();
    uint64_t v69 = (unint64_t *)&qword_10037EFF0;
    uint64_t v70 = type metadata accessor for UIMetrics;
  }
  else
  {
    type metadata accessor for StewieModel();
    uint64_t v69 = &qword_100380DA0;
    uint64_t v70 = type metadata accessor for StewieModel;
  }
  sub_1000ACCD8(v69, (void (*)(uint64_t))v70);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

__n128 sub_1000AC3B8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = static HorizontalAlignment.center.getter();
  type metadata accessor for AppEvents();
  sub_1000ACCD8((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v4 = EnvironmentObject.init()();
  uint64_t v6 = v5;
  type metadata accessor for RoadsideAssistanceModel();
  sub_1000ACCD8(&qword_100380D48, (void (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
  uint64_t v7 = EnvironmentObject.init()();
  uint64_t v9 = v8;
  type metadata accessor for StewieModel();
  sub_1000ACCD8(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v10 = EnvironmentObject.init()();
  uint64_t v12 = v11;
  char v13 = static Edge.Set.top.getter();
  uint64_t v14 = (__n128 **)sub_100008F88(a1, a1[3]);
  __n128 v19 = (*v14)[3];
  unint64_t v16 = (*v14)[4].n128_u64[0];
  unint64_t v15 = (*v14)[4].n128_u64[1];
  char v17 = static Edge.Set.all.getter();
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 56) = v10;
  *(void *)(a2 + 64) = v12;
  *(unsigned char *)(a2 + 72) = v13;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(unsigned char *)(a2 + 112) = 1;
  *(unsigned char *)(a2 + 120) = v17;
  __n128 result = v19;
  *(__n128 *)(a2 + 128) = v19;
  *(void *)(a2 + 144) = v16;
  *(void *)(a2 + 152) = v15;
  *(unsigned char *)(a2 + 160) = 0;
  return result;
}

uint64_t sub_1000AC574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v3 = sub_100004010(&qword_100385228);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004010(&qword_100385230);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_100004010(&qword_1003818D8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter();
  v17[4] = a1;
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  sub_1000ACC84();
  ToolbarItem<>.init(placement:content:)();
  unint64_t v15 = &v5[*(int *)(v3 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v5, v14, v11);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v9, v6);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000AC850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    type metadata accessor for UIMetrics();
    uint64_t v22 = (unint64_t *)&qword_10037EFF0;
    uint64_t v23 = type metadata accessor for UIMetrics;
LABEL_9:
    sub_1000ACCD8(v22, (void (*)(uint64_t))v23);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  sub_1000090FC(v4 + 48, (uint64_t)v24);
  uint64_t v5 = v25;
  uint64_t v6 = v26;
  sub_100008F88(v24, v25);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    type metadata accessor for StewieModel();
    uint64_t v22 = &qword_100380DA0;
    uint64_t v23 = type metadata accessor for StewieModel;
    goto LABEL_9;
  }
  if (*(void *)(v7 + 64))
  {
    uint64_t v8 = *(void *)(v7 + 88);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 152))(v8, v5, v6);
  swift_bridgeObjectRelease();
  sub_100033310();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v24);
  static Font.headline.getter();
  uint64_t v14 = Text.font(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  swift_release();
  sub_100033364(v9, v11, v13);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(unsigned char *)(a2 + 16) = v18 & 1;
  *(void *)(a2 + 24) = v20;
  return result;
}

uint64_t sub_1000ACA30@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_1000ACCD8((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  type metadata accessor for StewieModel();
  sub_1000ACCD8(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v7 = v6;
  type metadata accessor for UIMetrics();
  sub_1000ACCD8((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v8 = EnvironmentObject.init()();
  uint64_t v10 = v9;
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  return result;
}

uint64_t sub_1000ACB94@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB2C4(a1);
}

uint64_t sub_1000ACBD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AB738(*(long long **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000ACBD8()
{
  swift_release();
  swift_release();
  swift_release();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 64);

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1000ACC28@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABB7C(v1 + 16, (void *)(v1 + 64), a1);
}

uint64_t sub_1000ACC34()
{
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

double sub_1000ACC6C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000AC3B8((void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_1000ACC74@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AC574(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000ACC7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AC850(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000ACC84()
{
  unint64_t result = qword_100385238;
  if (!qword_100385238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385238);
  }
  return result;
}

uint64_t sub_1000ACCD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ACD20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100385260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ACD90()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ExplorerFullScreenConnectionAssitanceView()
{
  return &type metadata for ExplorerFullScreenConnectionAssitanceView;
}

uint64_t sub_1000ACE70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000ACE8C@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v5 = a2[9];
    uint64_t v6 = a2[10];
    sub_100008F88(a2 + 6, v5);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 32))(v24, v5, v6);
    uint64_t v7 = static HorizontalAlignment.center.getter();
    sub_1000AD070(a1, (uint64_t)v20);
    *(_OWORD *)&v21[135] = v20[8];
    *(_OWORD *)&v21[151] = v20[9];
    *(_OWORD *)&v21[167] = v20[10];
    *(_OWORD *)&v21[183] = v20[11];
    *(_OWORD *)&v21[71] = v20[4];
    *(_OWORD *)&v21[87] = v20[5];
    *(_OWORD *)&v21[103] = v20[6];
    *(_OWORD *)&v21[119] = v20[7];
    *(_OWORD *)&v21[7] = v20[0];
    *(_OWORD *)&v21[23] = v20[1];
    *(_OWORD *)&v21[39] = v20[2];
    char v22 = 0;
    *(_OWORD *)&v21[55] = v20[3];
    uint64_t v8 = sub_100008F88(v24, v24[3]);
    long long v19 = *(_OWORD *)(*v8 + 48);
    uint64_t v9 = *(void *)(*v8 + 64);
    uint64_t v10 = *(void *)(*v8 + 72);
    char v11 = static Edge.Set.all.getter();
    long long v12 = *(_OWORD *)&v21[128];
    *(_OWORD *)(a3 + 161) = *(_OWORD *)&v21[144];
    long long v13 = *(_OWORD *)&v21[176];
    *(_OWORD *)(a3 + 177) = *(_OWORD *)&v21[160];
    *(_OWORD *)(a3 + 193) = v13;
    long long v14 = *(_OWORD *)&v21[64];
    *(_OWORD *)(a3 + 97) = *(_OWORD *)&v21[80];
    long long v15 = *(_OWORD *)&v21[112];
    *(_OWORD *)(a3 + 113) = *(_OWORD *)&v21[96];
    *(_OWORD *)(a3 + 129) = v15;
    *(_OWORD *)(a3 + 145) = v12;
    long long v16 = *(_OWORD *)v21;
    *(_OWORD *)(a3 + 33) = *(_OWORD *)&v21[16];
    long long v17 = *(_OWORD *)&v21[48];
    *(_OWORD *)(a3 + 49) = *(_OWORD *)&v21[32];
    *(_OWORD *)(a3 + 65) = v17;
    *(_OWORD *)(a3 + 81) = v14;
    char v23 = 0;
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    *(void *)(a3 + 208) = *(void *)&v21[191];
    *(_OWORD *)(a3 + 17) = v16;
    *(unsigned char *)(a3 + 216) = v11;
    *(_OWORD *)(a3 + 224) = v19;
    *(void *)(a3 + 240) = v9;
    *(void *)(a3 + 248) = v10;
    *(unsigned char *)(a3 + 256) = 0;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v24);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000AD55C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AD070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ConnectionClosedModel(0);
  sub_1000AD55C(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
  uint64_t v4 = EnvironmentObject.init()();
  uint64_t v39 = v5;
  type metadata accessor for ConnectivityModel();
  sub_1000AD55C(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
  uint64_t v45 = EnvironmentObject.init()();
  uint64_t v38 = v6;
  type metadata accessor for GuidanceModel(0);
  sub_1000AD55C(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
  uint64_t v42 = EnvironmentObject.init()();
  uint64_t v8 = v7;
  type metadata accessor for OrientationModel();
  sub_1000AD55C(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
  uint64_t v44 = EnvironmentObject.init()();
  uint64_t v37 = v9;
  type metadata accessor for StewieModel();
  sub_1000AD55C(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v43 = EnvironmentObject.init()();
  uint64_t v36 = v10;
  type metadata accessor for UIMetrics();
  sub_1000AD55C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v11 = EnvironmentObject.init()();
  if (a1)
  {
    uint64_t v40 = v11;
    uint64_t v41 = v4;
    if (*(void *)(a1 + 64) && *(void *)(*(void *)(a1 + 88) + 16))
    {
      uint64_t v35 = v12;
      uint64_t v13 = EnvironmentObject.init()();
      uint64_t v15 = v14;
      uint64_t v16 = EnvironmentObject.init()();
      uint64_t v18 = v17;
      type metadata accessor for GuidanceMessagesModel();
      sub_1000AD55C(&qword_100381CB8, (void (*)(uint64_t))type metadata accessor for GuidanceMessagesModel);
      uint64_t v19 = EnvironmentObject.init()();
      uint64_t v21 = v20;
      uint64_t v22 = EnvironmentObject.init()();
      uint64_t v23 = v19;
      uint64_t v24 = v18;
      uint64_t v25 = v13;
      uint64_t v26 = v22;
      uint64_t v11 = v40;
      uint64_t v28 = v27;
      uint64_t v12 = v35;
      uint64_t v29 = v15;
      unint64_t v30 = 0xE100000000000000;
      uint64_t v31 = 32;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v29 = 0;
      uint64_t v16 = 0;
      uint64_t v24 = 0;
      uint64_t v31 = 0;
      unint64_t v30 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      uint64_t v26 = 0;
      uint64_t v28 = 0;
    }
    *(void *)a2 = v41;
    *(void *)(a2 + 8) = v39;
    *(void *)(a2 + 16) = v45;
    *(void *)(a2 + 24) = v38;
    *(void *)(a2 + 32) = v42;
    *(void *)(a2 + 40) = v8;
    *(void *)(a2 + 48) = v44;
    *(void *)(a2 + 56) = v37;
    *(void *)(a2 + 64) = v43;
    *(void *)(a2 + 72) = v36;
    *(void *)(a2 + 80) = v11;
    *(void *)(a2 + 88) = v12;
    *(unsigned char *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = v25;
    *(void *)(a2 + 120) = v29;
    *(void *)(a2 + 128) = v16;
    *(void *)(a2 + 136) = v24;
    *(void *)(a2 + 144) = v31;
    *(void *)(a2 + 152) = v30;
    *(void *)(a2 + 160) = v23;
    *(void *)(a2 + 168) = v21;
    *(void *)(a2 + 176) = v26;
    *(void *)(a2 + 184) = v28;
    uint64_t v32 = v24;
    uint64_t v33 = v30;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000AD47C(v25, v29, v16, v32, v31, v33);
    sub_1000AD4EC(v25, v29, v16, v32, v31, v33);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AD470@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACE8C(*(void *)v1, *(void **)(v1 + 16), a1);
}

uint64_t sub_1000AD47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000AD4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000AD55C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AD5B4()
{
  unint64_t result = qword_100385280;
  if (!qword_100385280)
  {
    sub_1000094C4(&qword_100385288);
    sub_1000AD630();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385280);
  }
  return result;
}

unint64_t sub_1000AD630()
{
  unint64_t result = qword_100385290;
  if (!qword_100385290)
  {
    sub_1000094C4(&qword_100385298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385290);
  }
  return result;
}

uint64_t sub_1000AD68C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v59 = a1;
  uint64_t v60 = sub_100004010(&qword_1003852B8);
  __chkstk_darwin(v60);
  uint64_t v4 = (uint64_t *)((char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = sub_100004010(&qword_1003852C0);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_1003852C8);
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100004010(&qword_1003852D0);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v52 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v4 = static Alignment.center.getter();
  v4[1] = v10;
  uint64_t v11 = sub_100004010(&qword_1003852D8);
  sub_1000ADCBC((uint64_t)v1, (uint64_t)v4 + *(int *)(v11 + 44));
  long long v65 = v1[10];
  sub_100004010(&qword_10037ED78);
  State.projectedValue.getter();
  uint64_t v12 = (_OWORD *)swift_allocObject();
  long long v13 = v1[11];
  v12[11] = v1[10];
  v12[12] = v13;
  long long v14 = v1[13];
  v12[13] = v1[12];
  v12[14] = v14;
  long long v15 = v1[7];
  v12[7] = v1[6];
  v12[8] = v15;
  long long v16 = v1[9];
  v12[9] = v1[8];
  v12[10] = v16;
  long long v17 = v1[3];
  v12[3] = v1[2];
  v12[4] = v17;
  long long v18 = v1[5];
  v12[5] = v1[4];
  v12[6] = v18;
  long long v19 = v1[1];
  v12[1] = *v1;
  uint64_t v12[2] = v19;
  sub_1000B2FF0((uint64_t)v1);
  uint64_t v20 = sub_100009B18(&qword_1003852E0, &qword_1003852B8);
  unint64_t v21 = sub_1000B30E8();
  uint64_t v50 = v6;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10000950C((uint64_t)v4, &qword_1003852B8);
  uint64_t v22 = *((void *)v1 + 16);
  if (v22)
  {
    LOWORD(v65) = *(_WORD *)(v22 + 56);
    uint64_t v23 = (_OWORD *)swift_allocObject();
    long long v24 = v1[11];
    v23[11] = v1[10];
    v23[12] = v24;
    long long v25 = v1[13];
    v23[13] = v1[12];
    v23[14] = v25;
    long long v26 = v1[7];
    v23[7] = v1[6];
    v23[8] = v26;
    long long v27 = v1[9];
    v23[9] = v1[8];
    v23[10] = v27;
    long long v28 = v1[3];
    v23[3] = v1[2];
    v23[4] = v28;
    long long v29 = v1[5];
    void v23[5] = v1[4];
    v23[6] = v29;
    long long v30 = v1[1];
    v23[1] = *v1;
    void v23[2] = v30;
    sub_1000B2FF0((uint64_t)v1);
    uint64_t v31 = sub_100004010(&qword_1003852F0);
    uint64_t v61 = v60;
    uint64_t v62 = &type metadata for ExplorerTryOutView;
    uint64_t v63 = v20;
    unint64_t v64 = v21;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    unint64_t v33 = sub_1000B314C();
    long long v34 = v55;
    uint64_t v35 = v53;
    uint64_t v36 = v50;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v35);
    uint64_t v37 = *(void *)(v22 + 72);
    *(void *)&long long v65 = *(void *)(v22 + 64);
    *((void *)&v65 + 1) = v37;
    uint64_t v38 = (_OWORD *)swift_allocObject();
    long long v39 = v2[11];
    v38[11] = v2[10];
    v38[12] = v39;
    long long v40 = v2[13];
    v38[13] = v2[12];
    v38[14] = v40;
    long long v41 = v2[7];
    v38[7] = v2[6];
    v38[8] = v41;
    long long v42 = v2[9];
    v38[9] = v2[8];
    v38[10] = v42;
    long long v43 = v2[3];
    v38[3] = v2[2];
    v38[4] = v43;
    long long v44 = v2[5];
    v38[5] = v2[4];
    v38[6] = v44;
    long long v45 = v2[1];
    v38[1] = *v2;
    v38[2] = v45;
    sub_1000B2FF0((uint64_t)v2);
    swift_bridgeObjectRetain();
    sub_100004010(&qword_100380920);
    uint64_t v61 = v35;
    uint64_t v62 = (ValueMetadata *)v31;
    uint64_t v63 = OpaqueTypeConformance2;
    unint64_t v64 = v33;
    swift_getOpaqueTypeConformance2();
    sub_1000B3224();
    uint64_t v46 = v52;
    uint64_t v47 = v58;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v47);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v59, v46, v56);
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000ADCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004010(&qword_100385310);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v119 - v9;
  uint64_t v11 = sub_100004010(&qword_100385318);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  if (!*(void *)(a1 + 48))
  {
    type metadata accessor for ConnectivityModel();
    char v117 = &qword_10037F0F0;
    v118 = type metadata accessor for ConnectivityModel;
    goto LABEL_34;
  }
  uint64_t v17 = *(void *)(a1 + 64);
  if (!v17)
  {
    type metadata accessor for OffTheGridModel();
    sub_1000B4B08(&qword_1003852A8, (void (*)(uint64_t))type metadata accessor for OffTheGridModel);
    swift_retain();
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_28;
  }
  v129 = v10;
  uint64_t v18 = *(void *)(a1 + 80);
  if (!v18)
  {
LABEL_28:
    type metadata accessor for PartnerModel();
    sub_1000B4B08(&qword_100380DA8, (void (*)(uint64_t))type metadata accessor for PartnerModel);
    swift_retain();
    swift_retain();
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_29;
  }
  long long v19 = *(void **)(a1 + 96);
  if (!v19)
  {
LABEL_29:
    type metadata accessor for StewieModel();
    sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
    swift_retain();
    swift_retain();
    swift_retain();
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_30;
  }
  v136 = (char *)&v119 - v14;
  v137 = v16;
  uint64_t v126 = a2;
  uint64_t v130 = v15;
  v131 = v8;
  uint64_t v138 = v13;
  uint64_t v132 = v5;
  uint64_t v20 = *(void *)(a1 + 112);
  if (!v20)
  {
LABEL_30:
    type metadata accessor for SystemSettingsModel();
    sub_1000B4B08(&qword_1003852B0, (void (*)(uint64_t))type metadata accessor for SystemSettingsModel);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_31;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v21 = sub_1000B21CC(v17, v18, v19, v20);
  uint64_t v23 = v22;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!*(void *)(a1 + 144))
  {
LABEL_31:
    type metadata accessor for UIMetrics();
    char v117 = (unint64_t *)&qword_10037EFF0;
    v118 = type metadata accessor for UIMetrics;
    goto LABEL_34;
  }
  long long v24 = self;
  swift_retain();
  id v25 = [v24 mainScreen];
  id v26 = [v25 fixedCoordinateSpace];

  [v26 bounds];
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  CGFloat v34 = v33;
  swift_unknownObjectRelease();
  v206.origin.x = v28;
  v206.origin.y = v30;
  v206.size.width = v32;
  v206.size.height = v34;
  double Height = CGRectGetHeight(v206);
  swift_release();
  if (v23) {
    double v36 = 0.5;
  }
  else {
    double v36 = 1.0;
  }
  uint64_t v37 = *(void *)(a1 + 16);
  if (v37)
  {
    if ((*(unsigned char *)(v37 + 80) & 1) == 0)
    {
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      uint64_t v38 = 0;
      uint64_t countAndFlagsBits = 0;
      uint64_t object = 0;
      uint64_t v124 = 0;
      goto LABEL_15;
    }
    uint64_t v41 = *(void *)(a1 + 32);
    if (v41)
    {
      uint64_t v38 = *(unsigned __int8 *)(v41 + 40);
      Swift::String v182 = *(Swift::String *)(a1 + 208);
      sub_100004010(&qword_1003853C0);
      State.projectedValue.getter();
      uint64_t object = (uint64_t)v192._object;
      uint64_t countAndFlagsBits = v192._countAndFlagsBits;
      uint64_t v124 = v193;
      type metadata accessor for StewieModel();
      sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
      uint64_t v42 = EnvironmentObject.init()();
      uint64_t v134 = v43;
      uint64_t v135 = v42;
LABEL_15:
      int v44 = sub_1000AEFBC();
      uint64_t v133 = v4;
      uint64_t v127 = countAndFlagsBits;
      uint64_t v128 = v38;
      uint64_t v125 = object;
      if (v44)
      {
        if (v44 == 1)
        {
          double v45 = Height * 0.8;
          double v46 = v36 * (Height * 0.8);
          uint64_t v47 = swift_allocObject();
          long long v48 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(v47 + 176) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(v47 + 192) = v48;
          long long v49 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(v47 + 208) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(v47 + 224) = v49;
          long long v50 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(v47 + 112) = *(_OWORD *)(a1 + 96);
          *(_OWORD *)(v47 + 128) = v50;
          long long v51 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(v47 + 144) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v47 + 160) = v51;
          long long v52 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(v47 + 48) = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(v47 + 64) = v52;
          long long v53 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)(v47 + 80) = *(_OWORD *)(a1 + 64);
          *(_OWORD *)(v47 + 96) = v53;
          long long v54 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v47 + 16) = *(_OWORD *)a1;
          *(_OWORD *)(v47 + 32) = v54;
          *(double *)(v47 + 240) = v45;
          uint64_t v55 = swift_allocObject();
          *(void *)(v55 + 16) = v21;
          *(void *)(v55 + 24) = v23;
          long long v56 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(v55 + 192) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(v55 + 208) = v56;
          long long v57 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(v55 + 224) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(v55 + 240) = v57;
          long long v58 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(v55 + 128) = *(_OWORD *)(a1 + 96);
          *(_OWORD *)(v55 + 144) = v58;
          long long v59 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(v55 + 160) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v55 + 176) = v59;
          long long v60 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(v55 + 64) = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(v55 + 80) = v60;
          long long v61 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)(v55 + 96) = *(_OWORD *)(a1 + 64);
          *(_OWORD *)(v55 + 112) = v61;
          long long v62 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v55 + 32) = *(_OWORD *)a1;
          *(_OWORD *)(v55 + 48) = v62;
          sub_1000B2FF0(a1);
          sub_1000B2FF0(a1);
          type metadata accessor for UIMetrics();
          sub_1000B4B08((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
          uint64_t v63 = EnvironmentObject.init()();
          unint64_t v122 = v64;
          v123 = (void (*)(uint64_t, char *, uint64_t))v63;
          uint64_t v65 = qword_10037DCE8;
          swift_retain();
          if (v65 != -1) {
            swift_once();
          }
          id v121 = (id)xmmword_1003A9880;
          swift_release();
          uint64_t v66 = qword_1003A9890;
          char v67 = static Edge.Set.all.getter();
          char v147 = 0;
          static AnyTransition.opacity.getter();
          static Animation.easeIn(duration:)();
          AnyTransition.animation(_:)();
          swift_release();
          swift_release();
          static AnyTransition.identity.getter();
          uint64_t v68 = static AnyTransition.asymmetric(insertion:removal:)();
          swift_release();
          swift_release();
          v149._uint64_t countAndFlagsBits = (uint64_t)v123;
          v149._uint64_t object = (void *)v122;
          *(double *)&long long v150 = v46;
          *((void *)&v150 + 1) = sub_1000B38EC;
          *(void *)&long long v151 = v47;
          *((void *)&v151 + 1) = sub_1000B39A0;
          *(void *)v152 = v55;
          strcpy(&v152[8], "scrollViewNS");
          v152[21] = 0;
          *(_WORD *)&v152[22] = -5120;
          uint64_t v153 = 0;
          LOBYTE(v154) = v67;
          *(_DWORD *)((char *)&v154 + 1) = v148[0];
          DWORD1(v154) = *(_DWORD *)((char *)v148 + 3);
          *((void *)&v154 + 1) = v121;
          *(void *)&long long v155 = 0x4020000000000000;
          *((void *)&v155 + 1) = v66;
          *(void *)&long long v156 = 0x4020000000000000;
          BYTE8(v156) = v147;
          uint64_t v157 = v68;
          *(void *)&long long v166 = v68;
          long long v164 = v155;
          long long v165 = v156;
          long long v162 = *(unint64_t *)&v152[16];
          long long v163 = v154;
          long long v160 = v151;
          long long v161 = *(_OWORD *)v152;
          Swift::String v158 = v149;
          long long v159 = v150;
          sub_1000B39AC((uint64_t)&v158);
          sub_10000D544((uint64_t)&v158, (uint64_t)&v192, &qword_1003853B8);
          sub_1000B39B8((uint64_t)&v149);
          sub_100004010(&qword_100385348);
          sub_1000B3340();
          _ConditionalContent<>.init(storage:)();
          long long v187 = v145;
          v188[0] = v146[0];
          *(_OWORD *)((char *)v188 + 9) = *(_OWORD *)((char *)v146 + 9);
          *(_OWORD *)v184 = v141;
          *(_OWORD *)&v184[16] = v142;
          long long v185 = v143;
          long long v186 = v144;
          Swift::String v182 = v139;
          long long v183 = v140;
          sub_1000B3A24((uint64_t)&v182);
          sub_10000D544((uint64_t)&v182, (uint64_t)&v192, &qword_100385320);
          sub_100004010(&qword_100385328);
          sub_100004010(&qword_100385330);
          sub_1000B32C4();
          sub_1000B4490(&qword_100385370, &qword_100385330, (void (*)(void))sub_1000B3480);
          _ConditionalContent<>.init(storage:)();
          sub_1000B3A2C((uint64_t)&v149);
          long long v200 = v178;
          long long v201 = v179;
          long long v202 = v180;
          __int16 v203 = v181;
          long long v196 = v174;
          long long v197 = v175;
          long long v198 = v176;
          long long v199 = v177;
          Swift::String v192 = v170;
          long long v193 = v171;
          long long v194 = v172;
          long long v195 = v173;
          goto LABEL_25;
        }
        swift_bridgeObjectRelease();
        v123 = (void (*)(uint64_t, char *, uint64_t))static HorizontalAlignment.center.getter();
        sub_1000AF550((uint64_t)&v192);
        uint64_t v69 = v192._countAndFlagsBits;
        char v70 = (char)v192._object;
        long long v71 = v193;
        unint64_t v122 = *((void *)&v194 + 1);
        uint64_t v72 = v194;
        LODWORD(v121) = v195;
        uint64_t v120 = *((void *)&v195 + 1);
        char v73 = static Edge.Set.all.getter();
        LOBYTE(v139._countAndFlagsBits) = 1;
        LOBYTE(v149._countAndFlagsBits) = v70;
        LOBYTE(v148[0]) = 1;
        char v74 = static Edge.Set.bottom.getter();
        uint64_t v75 = qword_10037DCE8;
        swift_retain();
        if (v75 != -1) {
          swift_once();
        }
        swift_release();
        EdgeInsets.init(_all:)();
        LOBYTE(v158._countAndFlagsBits) = 0;
        Swift::String v182 = (Swift::String)(unint64_t)v123;
        LOBYTE(v183) = v139._countAndFlagsBits;
        *((void *)&v183 + 1) = v69;
        v184[0] = v149._countAndFlagsBits;
        *(_OWORD *)&v184[8] = v71;
        *(void *)&v184[24] = v72;
        *(void *)&long long v185 = v122;
        BYTE8(v185) = (_BYTE)v121;
        *(void *)&long long v186 = v120;
        BYTE8(v186) = v73;
        long long v187 = 0u;
        v188[0] = 0u;
        LOBYTE(v188[1]) = v148[0];
        BYTE8(v188[1]) = v74;
        *(void *)&long long v189 = v76;
        *((void *)&v189 + 1) = v77;
        *(void *)&long long v190 = v78;
        *((void *)&v190 + 1) = v79;
        LOBYTE(v191) = 0;
        sub_1000B32B8((uint64_t)&v182);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1000B3A98((uint64_t)&v158);
        sub_10000D544((uint64_t)&v158, (uint64_t)&v192, &qword_1003853B8);
        sub_100004010(&qword_100385348);
        sub_1000B3340();
        _ConditionalContent<>.init(storage:)();
        long long v187 = v145;
        v188[0] = v146[0];
        *(_OWORD *)((char *)v188 + 9) = *(_OWORD *)((char *)v146 + 9);
        *(_OWORD *)v184 = v141;
        *(_OWORD *)&v184[16] = v142;
        long long v185 = v143;
        long long v186 = v144;
        Swift::String v182 = v139;
        long long v183 = v140;
        sub_1000B3A24((uint64_t)&v182);
      }
      sub_10000D544((uint64_t)&v182, (uint64_t)&v170, &qword_100385320);
      sub_100004010(&qword_100385328);
      sub_100004010(&qword_100385330);
      sub_1000B32C4();
      sub_1000B4490(&qword_100385370, &qword_100385330, (void (*)(void))sub_1000B3480);
      _ConditionalContent<>.init(storage:)();
LABEL_25:
      Swift::String v182 = (Swift::String)(unint64_t)static HorizontalAlignment.center.getter();
      LOBYTE(v183) = 1;
      id v121 = self;
      id v80 = [v121 mainBundle];
      v81._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v204._uint64_t countAndFlagsBits = 0xD00000000000007ALL;
      v204._uint64_t object = (void *)0x80000001002CCE70;
      v81._uint64_t object = (void *)0x80000001002CCE50;
      v82._uint64_t countAndFlagsBits = 0;
      v82._uint64_t object = (void *)0xE000000000000000;
      Swift::String v83 = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, (Swift::String_optional)0, (NSBundle)v80, v82, v204);

      Swift::String v158 = v83;
      Swift::String v139 = *(Swift::String *)(a1 + 176);
      sub_100004010(&qword_10037ED78);
      State.projectedValue.getter();
      uint64_t v120 = sub_100004010(&qword_100385398);
      v123 = (void (*)(uint64_t, char *, uint64_t))sub_100009B18(&qword_1003853A0, &qword_100385398);
      unint64_t v122 = sub_100033310();
      sub_1000B3520();
      View.alert<A, B, C>(_:isPresented:actions:message:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      Swift::String v182 = (Swift::String)(unint64_t)static HorizontalAlignment.center.getter();
      LOBYTE(v183) = 1;
      id v84 = [v121 mainBundle];
      v205._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      v205._uint64_t object = (void *)0x80000001002C8F00;
      v85._uint64_t object = (void *)0x80000001002C8EE0;
      v85._uint64_t countAndFlagsBits = 0xD000000000000019;
      v86._uint64_t countAndFlagsBits = 0;
      v86._uint64_t object = (void *)0xE000000000000000;
      Swift::String v87 = NSLocalizedString(_:tableName:bundle:value:comment:)(v85, (Swift::String_optional)0, (NSBundle)v84, v86, v205);

      Swift::String v158 = v87;
      Swift::String v139 = *(Swift::String *)(a1 + 192);
      uint64_t v88 = State.projectedValue.getter();
      uint64_t v89 = __chkstk_darwin(v88);
      __chkstk_darwin(v89);
      sub_100004010(&qword_100380E00);
      sub_100009B18(&qword_100380E08, &qword_100380E00);
      uint64_t v90 = v129;
      View.alert<A, B, C>(_:isPresented:actions:message:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      long long v166 = v200;
      long long v167 = v201;
      long long v168 = v202;
      __int16 v169 = v203;
      long long v162 = v196;
      long long v163 = v197;
      long long v164 = v198;
      long long v165 = v199;
      Swift::String v158 = v192;
      long long v159 = v193;
      long long v160 = v194;
      long long v161 = v195;
      v123 = *(void (**)(uint64_t, char *, uint64_t))(v130 + 16);
      v123((uint64_t)v137, v136, v138);
      id v121 = *(id *)(v132 + 16);
      unint64_t v122 = v132 + 16;
      ((void (*)(char *, char *, uint64_t))v121)(v131, v90, v133);
      long long v91 = v167;
      long long v178 = v166;
      long long v179 = v167;
      long long v92 = v168;
      long long v180 = v168;
      long long v93 = v162;
      long long v94 = v163;
      long long v174 = v162;
      long long v175 = v163;
      long long v95 = v164;
      long long v96 = v165;
      long long v176 = v164;
      long long v177 = v165;
      Swift::String v97 = v158;
      long long v98 = v159;
      Swift::String v170 = v158;
      long long v171 = v159;
      long long v99 = v160;
      long long v100 = v161;
      long long v172 = v160;
      long long v173 = v161;
      uint64_t v101 = v126;
      uint64_t v102 = v127;
      *(_OWORD *)(v126 + 176) = v166;
      *(_OWORD *)(v101 + 192) = v91;
      *(_OWORD *)(v101 + 208) = v92;
      *(_OWORD *)(v101 + 112) = v93;
      *(_OWORD *)(v101 + 128) = v94;
      *(_OWORD *)(v101 + 144) = v95;
      *(_OWORD *)(v101 + 160) = v96;
      *(Swift::String *)(v101 + 48) = v97;
      *(_OWORD *)(v101 + 64) = v98;
      uint64_t v104 = v134;
      uint64_t v103 = v135;
      *(void *)uint64_t v101 = v135;
      *(void *)(v101 + 8) = v104;
      uint64_t v134 = v104;
      uint64_t v135 = v103;
      uint64_t v105 = v128;
      *(void *)(v101 + 16) = v128;
      *(void *)(v101 + 24) = v102;
      uint64_t v107 = v124;
      uint64_t v106 = v125;
      *(void *)(v101 + 32) = v125;
      *(void *)(v101 + 40) = v107;
      __int16 v181 = v169;
      *(_WORD *)(v101 + 224) = v169;
      *(_OWORD *)(v101 + 80) = v99;
      *(_OWORD *)(v101 + 96) = v100;
      uint64_t v108 = sub_100004010(&qword_1003853B0);
      v123(v101 + *(int *)(v108 + 64), v137, v138);
      uint64_t v109 = v101 + *(int *)(v108 + 80);
      uint64_t v110 = v131;
      uint64_t v111 = v133;
      ((void (*)(uint64_t, char *, uint64_t))v121)(v109, v131, v133);
      sub_1000B3584(v103, v104, v105, v102, v106);
      sub_1000B36F4((uint64_t)&v170, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))sub_1000B35D4);
      uint64_t v112 = *(void (**)(char *, uint64_t))(v132 + 8);
      uint64_t v113 = v111;
      v112(v129, v111);
      uint64_t v114 = *(void (**)(char *, uint64_t))(v130 + 8);
      uint64_t v115 = v138;
      v114(v136, v138);
      v112(v110, v113);
      v114(v137, v115);
      v188[1] = v166;
      long long v189 = v167;
      long long v190 = v168;
      __int16 v191 = v169;
      long long v185 = v162;
      long long v186 = v163;
      long long v187 = v164;
      v188[0] = v165;
      Swift::String v182 = v158;
      long long v183 = v159;
      *(_OWORD *)v184 = v160;
      *(_OWORD *)&v184[16] = v161;
      sub_1000B36F4((uint64_t)&v182, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))sub_1000B3770);
      return sub_1000B3894(v135, v134, v128, v127, v106);
    }
    type metadata accessor for AppRuntimeStateModel();
    char v117 = &qword_100380B58;
    v118 = type metadata accessor for AppRuntimeStateModel;
  }
  else
  {
    type metadata accessor for AppPropertiesModel();
    char v117 = &qword_1003852A0;
    v118 = type metadata accessor for AppPropertiesModel;
  }
LABEL_34:
  sub_1000B4B08(v117, (void (*)(uint64_t))v118);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000AEFBC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (!v1)
  {
    type metadata accessor for StewieModel();
    uint64_t v5 = &qword_100380DA0;
    uint64_t v6 = type metadata accessor for StewieModel;
    goto LABEL_14;
  }
  if (!*(void *)(v1 + 64)) {
    return 1;
  }
  if (sub_100078E0C(3, *(void *)(v1 + 88))) {
    return 0;
  }
  if (!*(void *)(v1 + 64)) {
    return 1;
  }
  uint64_t v3 = *(void *)(v1 + 88);
  if (!*(void *)(v3 + 16) || (sub_100078E0C(3, v3) & 1) != 0) {
    return 1;
  }
  uint64_t v4 = *(void *)(v0 + 48);
  if (!v4)
  {
    while (1)
    {
      type metadata accessor for ConnectivityModel();
      uint64_t v5 = &qword_10037F0F0;
      uint64_t v6 = type metadata accessor for ConnectivityModel;
LABEL_14:
      sub_1000B4B08(v5, (void (*)(uint64_t))v6);
      EnvironmentObject.error()();
      __break(1u);
    }
  }
  if (*(unsigned char *)(v4 + 57)) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t sub_1000AF0C8(_OWORD *a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FDBC();
  uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  long long v15 = a1[11];
  *(_OWORD *)(v14 + 176) = a1[10];
  *(_OWORD *)(v14 + 192) = v15;
  long long v16 = a1[13];
  *(_OWORD *)(v14 + 208) = a1[12];
  *(_OWORD *)(v14 + 224) = v16;
  long long v17 = a1[7];
  *(_OWORD *)(v14 + 112) = a1[6];
  *(_OWORD *)(v14 + 128) = v17;
  long long v18 = a1[9];
  *(_OWORD *)(v14 + 144) = a1[8];
  *(_OWORD *)(v14 + 160) = v18;
  long long v19 = a1[3];
  *(_OWORD *)(v14 + 48) = a1[2];
  *(_OWORD *)(v14 + 64) = v19;
  long long v20 = a1[5];
  *(_OWORD *)(v14 + 80) = a1[4];
  *(_OWORD *)(v14 + 96) = v20;
  long long v21 = a1[1];
  *(_OWORD *)(v14 + 16) = *a1;
  *(_OWORD *)(v14 + 32) = v21;
  *(double *)(v14 + 240) = a2;
  *(double *)(v14 + 248) = a3;
  aBlock[4] = sub_1000B3B00;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_1003547D0;
  uint64_t v22 = _Block_copy(aBlock);
  sub_1000B2FF0((uint64_t)a1);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000B4B08((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100009B18((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v25);
}

uint64_t sub_1000AF3E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = a4[11];
  v10[11] = a4[10];
  v10[12] = v11;
  long long v12 = a4[13];
  v10[13] = a4[12];
  v10[14] = v12;
  long long v13 = a4[7];
  v10[7] = a4[6];
  v10[8] = v13;
  long long v14 = a4[9];
  v10[9] = a4[8];
  v10[10] = v14;
  long long v15 = a4[3];
  v10[3] = a4[2];
  v10[4] = v15;
  long long v16 = a4[5];
  v10[5] = a4[4];
  v10[6] = v16;
  long long v17 = a4[1];
  v10[1] = *a4;
  v10[2] = v17;
  swift_bridgeObjectRetain();
  sub_1000B2FF0((uint64_t)a4);
  type metadata accessor for AppEvents();
  sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v18 = EnvironmentObject.init()();
  uint64_t v20 = v19;
  type metadata accessor for StewieModel();
  sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t result = EnvironmentObject.init()();
  *a5 = v18;
  a5[1] = v20;
  a5[2] = result;
  a5[3] = v22;
  a5[4] = a2;
  a5[5] = a3;
  a5[6] = a1;
  a5[7] = (uint64_t)sub_1000B3AA8;
  a5[8] = (uint64_t)v10;
  return result;
}

uint64_t sub_1000AF550@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self mainBundle];
  v13._uint64_t object = (void *)0x80000001002CD0B0;
  v3._uint64_t countAndFlagsBits = 0x6E6F4320706F7453;
  v3._uint64_t object = (void *)0xEF676E697463656ELL;
  v4.value._uint64_t countAndFlagsBits = 0x5072656972726143;
  v4.value._uint64_t object = (void *)0xED00006E6F656769;
  v5._uint64_t countAndFlagsBits = 0;
  v5._uint64_t object = (void *)0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0xD00000000000005ALL;
  Swift::String v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v13);

  type metadata accessor for AppEvents();
  sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v7 = EnvironmentObject.init()();
  uint64_t v9 = v8;
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v9;
  *(Swift::String *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  return result;
}

uint64_t sub_1000AF6B4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t result = EnvironmentObject.init()();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 5;
  return result;
}

uint64_t sub_1000AF72C@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self mainBundle];
  v9._uint64_t object = (void *)0x80000001002CD010;
  v3._uint64_t object = (void *)0x80000001002CCFA0;
  v3._uint64_t countAndFlagsBits = 0x1000000000000063;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0xD000000000000094;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v9);

  sub_100033310();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7 & 1;
  *(void *)(a1 + 24) = v8;
  return result;
}

uint64_t sub_1000AF804(_OWORD *a1)
{
  uint64_t v2 = sub_100004010(&qword_100381AE0);
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self mainBundle];
  v20._uint64_t object = (void *)0x80000001002CCF80;
  v6._uint64_t countAndFlagsBits = 19279;
  v6._uint64_t object = (void *)0xE200000000000000;
  v7._uint64_t countAndFlagsBits = 0;
  v7._uint64_t object = (void *)0xE000000000000000;
  v20._uint64_t countAndFlagsBits = 0xD000000000000017;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v20);

  Swift::String v19 = v8;
  static ButtonRole.cancel.getter();
  uint64_t v9 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  uint64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = a1[11];
  v10[11] = a1[10];
  v10[12] = v11;
  long long v12 = a1[13];
  v10[13] = a1[12];
  v10[14] = v12;
  long long v13 = a1[7];
  v10[7] = a1[6];
  v10[8] = v13;
  long long v14 = a1[9];
  v10[9] = a1[8];
  v10[10] = v14;
  long long v15 = a1[3];
  v10[3] = a1[2];
  v10[4] = v15;
  long long v16 = a1[5];
  v10[5] = a1[4];
  v10[6] = v16;
  long long v17 = a1[1];
  v10[1] = *a1;
  v10[2] = v17;
  sub_1000B2FF0((uint64_t)a1);
  sub_100033310();
  return Button<>.init<A>(_:role:action:)();
}

uint64_t sub_1000AF9D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 64);
    uint64_t v3 = *(void *)(v1 + 72);
    if (v3)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    else
    {
      swift_retain();
    }
    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 72) = 0;
    swift_bridgeObjectRelease();
    sub_100297680(v2, v3);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AFB20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 64);
    if (!*(void *)(v3 + 72))
    {
      id v5 = [self mainBundle];
      v12._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
      v12._uint64_t object = (void *)0x80000001002CCF10;
      v6._uint64_t object = (void *)0x80000001002CCEF0;
      v6._uint64_t countAndFlagsBits = 0xD000000000000010;
      v7._uint64_t countAndFlagsBits = 0;
      v7._uint64_t object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)v4, (NSBundle)v5, v7, v12);
    }
    sub_100033310();
    swift_bridgeObjectRetain();
    uint64_t result = Text.init<A>(_:)();
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v9;
    *(unsigned char *)(a2 + 16) = v10 & 1;
    *(void *)(a2 + 24) = v11;
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AFC80(void *a1)
{
  uint64_t v1 = a1[16];
  if (v1)
  {
    if (*(unsigned __int16 *)(v1 + 56) >= 0x4000u) {
      return sub_1000AFDC0();
    }
    if (*a1)
    {
      swift_retain();
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
      swift_release();
      return sub_1000AFDC0();
    }
    type metadata accessor for AppEvents();
    uint64_t v3 = (unint64_t *)&qword_10037F000;
    unint64_t v4 = type metadata accessor for AppEvents;
  }
  else
  {
    type metadata accessor for TryOutModel();
    uint64_t v3 = &qword_1003827A8;
    unint64_t v4 = type metadata accessor for TryOutModel;
  }
  sub_1000B4B08(v3, (void (*)(uint64_t))v4);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000AFDC0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  __chkstk_darwin(v4);
  Swift::String v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v13 = (char *)&v25 - v12;
  sub_10000FDBC();
  uint64_t v26 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  double v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v11, v7);
  long long v14 = (_OWORD *)swift_allocObject();
  long long v15 = v0[11];
  v14[11] = v0[10];
  v14[12] = v15;
  long long v16 = v0[13];
  v14[13] = v0[12];
  v14[14] = v16;
  long long v17 = v0[7];
  v14[7] = v0[6];
  v14[8] = v17;
  long long v18 = v0[9];
  v14[9] = v0[8];
  v14[10] = v18;
  long long v19 = v0[3];
  v14[3] = v0[2];
  v14[4] = v19;
  long long v20 = v0[5];
  v14[5] = v0[4];
  v14[6] = v20;
  long long v21 = v0[1];
  v14[1] = *v0;
  v14[2] = v21;
  aBlock[4] = sub_1000B3298;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_100354708;
  uint64_t v22 = _Block_copy(aBlock);
  sub_1000B2FF0((uint64_t)v0);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000B4B08((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100009B18((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = (void *)v26;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v29);
  return ((uint64_t (*)(char *, uint64_t))v27)(v13, v7);
}

uint64_t sub_1000B01AC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TryOutModel();
  sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
  uint64_t result = EnvironmentObject.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000B021C(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    sub_100004010(&qword_10037ED78);
    return State.wrappedValue.setter();
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B02E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    sub_100004010(&qword_10037ED78);
    State.wrappedValue.getter();
    if (v3 == 1) {
      return State.wrappedValue.setter();
    }
    else {
      return sub_1000AFDC0();
    }
  }
  return result;
}

uint64_t sub_1000B0374(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 128);
  if (v1)
  {
    if (*(void *)(v1 + 72))
    {
      sub_100004010(&qword_10037ED78);
      return State.wrappedValue.setter();
    }
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B0430@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD68C(a1);
}

uint64_t sub_1000B0494@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[2])
  {
    long long v73 = *(_OWORD *)(a1 + 3);
    *(void *)&long long v74 = a1[5];
    sub_100004010(&qword_100387450);
    Binding.wrappedValue.getter();
    uint64_t v5 = v66;
    type metadata accessor for AppPropertiesModel();
    sub_1000B4B08(&qword_1003852A0, (void (*)(uint64_t))type metadata accessor for AppPropertiesModel);
    uint64_t v6 = EnvironmentObject.init()();
    uint64_t v51 = v7;
    uint64_t v52 = v6;
    type metadata accessor for ConnectivityModel();
    sub_1000B4B08(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
    uint64_t v8 = EnvironmentObject.init()();
    uint64_t v49 = v9;
    uint64_t v50 = v8;
    type metadata accessor for GeoLocationModel();
    sub_1000B4B08(&qword_100385440, (void (*)(uint64_t))type metadata accessor for GeoLocationModel);
    uint64_t v10 = EnvironmentObject.init()();
    uint64_t v47 = v11;
    uint64_t v48 = v10;
    type metadata accessor for GuidanceMessagesModel();
    sub_1000B4B08(&qword_100381CB8, (void (*)(uint64_t))type metadata accessor for GuidanceMessagesModel);
    uint64_t v12 = EnvironmentObject.init()();
    uint64_t v45 = v13;
    uint64_t v46 = v12;
    type metadata accessor for GuidanceModel(0);
    sub_1000B4B08(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
    uint64_t v14 = EnvironmentObject.init()();
    uint64_t v43 = v15;
    uint64_t v44 = v14;
    type metadata accessor for PartnerModel();
    sub_1000B4B08(&qword_100380DA8, (void (*)(uint64_t))type metadata accessor for PartnerModel);
    uint64_t v16 = EnvironmentObject.init()();
    uint64_t v18 = v17;
    type metadata accessor for StewieModel();
    sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
    uint64_t v19 = EnvironmentObject.init()();
    uint64_t v21 = v20;
    type metadata accessor for TimeZoneModel();
    sub_1000B4B08(&qword_100385448, (void (*)(uint64_t))type metadata accessor for TimeZoneModel);
    uint64_t v22 = EnvironmentObject.init()();
    uint64_t v24 = v23;
    type metadata accessor for TryOutModel();
    sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    *(void *)&long long v66 = v52;
    *((void *)&v66 + 1) = v51;
    *(void *)char v67 = v50;
    *(void *)&v67[8] = v49;
    *(void *)&v67[16] = v48;
    *(void *)&v67[24] = v47;
    *(void *)&v67[32] = v46;
    *(void *)&v67[40] = v45;
    *(void *)&v67[48] = v44;
    *(void *)&v67[56] = v43;
    *(void *)&long long v68 = v16;
    *((void *)&v68 + 1) = v18;
    *(void *)&long long v69 = v19;
    *((void *)&v69 + 1) = v21;
    *(void *)&long long v70 = v22;
    *((void *)&v70 + 1) = v24;
    *(void *)&long long v71 = EnvironmentObject.init()();
    *((void *)&v71 + 1) = v25;
    *(void *)uint64_t v72 = v5;
    *(_OWORD *)&v72[8] = xmmword_1002B7990;
    *(_OWORD *)&v72[24] = xmmword_1002B79A0;
    v72[40] = static Edge.Set.all.getter();
    sub_1000B4B50((uint64_t)&v66);
  }
  else
  {
    uint64_t v4 = static HorizontalAlignment.center.getter();
    sub_1000B0BA0((uint64_t)&v73);
    long long v66 = (unint64_t)v4;
    v67[0] = 1;
    *(_OWORD *)&v67[8] = v73;
    *(_OWORD *)&v67[24] = v74;
    *(_OWORD *)&v67[40] = v75;
    *(void *)&v67[56] = v76;
    LOBYTE(v68) = BYTE8(v76);
    sub_1000B4890((uint64_t)&v66);
  }
  sub_10000D544((uint64_t)&v66, (uint64_t)v64, &qword_100385410);
  sub_100004010(&qword_100385418);
  sub_100004010(&qword_100385420);
  sub_1000B4490(&qword_100385428, &qword_100385418, (void (*)(void))sub_1000B489C);
  sub_100009B18(&qword_100385438, &qword_100385420);
  _ConditionalContent<>.init(storage:)();
  uint64_t v26 = *a1;
  if (*a1)
  {
    if (*(void *)(v26 + 64) && (sub_100078E0C(3, *(void *)(v26 + 88)) & 1) != 0)
    {
      uint64_t v27 = static HorizontalAlignment.center.getter();
      type metadata accessor for UIMetrics();
      sub_1000B4B08((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      uint64_t v28 = EnvironmentObject.init()();
      uint64_t v30 = v29;
      uint64_t v31 = 1;
      char v32 = 1;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v31 = 0;
      uint64_t v30 = 0;
      char v32 = 0;
      uint64_t v28 = 1;
    }
    long long v61 = v81;
    long long v62 = v82;
    *(_OWORD *)uint64_t v63 = v83[0];
    *(_OWORD *)&v63[10] = *(_OWORD *)((char *)v83 + 10);
    long long v33 = v77;
    long long v57 = v77;
    long long v58 = v78;
    long long v34 = v79;
    long long v59 = v79;
    long long v60 = v80;
    long long v35 = v73;
    long long v53 = v73;
    long long v54 = v74;
    long long v55 = v75;
    long long v56 = v76;
    long long v36 = v82;
    v64[8] = v81;
    v64[9] = v82;
    v65[0] = v83[0];
    *(_OWORD *)((char *)v65 + 10) = *(_OWORD *)((char *)v83 + 10);
    long long v37 = v78;
    v64[4] = v77;
    v64[5] = v78;
    long long v38 = v80;
    v64[6] = v79;
    v64[7] = v80;
    long long v39 = v74;
    long long v40 = v75;
    v64[0] = v73;
    v64[1] = v74;
    long long v41 = v76;
    v64[2] = v75;
    v64[3] = v76;
    *(_OWORD *)(a2 + 128) = v81;
    *(_OWORD *)(a2 + 144) = v36;
    *(_OWORD *)(a2 + 160) = v83[0];
    *(_OWORD *)(a2 + 170) = *(_OWORD *)((char *)v83 + 10);
    *(_OWORD *)(a2 + 64) = v33;
    *(_OWORD *)(a2 + 80) = v37;
    *(_OWORD *)(a2 + 96) = v34;
    *(_OWORD *)(a2 + 112) = v38;
    *(_OWORD *)a2 = v35;
    *(_OWORD *)(a2 + 16) = v39;
    *(_OWORD *)(a2 + 32) = v40;
    *(_OWORD *)(a2 + 48) = v41;
    *(void *)(a2 + 192) = v27;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = v31;
    *(void *)(a2 + 216) = v28;
    *(void *)(a2 + 224) = v30;
    *(void *)(a2 + 232) = 0;
    *(unsigned char *)(a2 + 240) = v32;
    sub_1000B49D0((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))sub_1000B48F0);
    sub_1000B49A8(v27, 0, v31, v28);
    sub_1000B49BC(v27, 0, v31, v28);
    long long v71 = v61;
    *(_OWORD *)uint64_t v72 = v62;
    *(_OWORD *)&v72[16] = *(_OWORD *)v63;
    *(_OWORD *)&v72[26] = *(_OWORD *)&v63[10];
    *(_OWORD *)&v67[48] = v57;
    long long v68 = v58;
    long long v69 = v59;
    long long v70 = v60;
    long long v66 = v53;
    *(_OWORD *)char v67 = v54;
    *(_OWORD *)&v67[16] = v55;
    *(_OWORD *)&v67[32] = v56;
    return sub_1000B49D0((uint64_t)&v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))sub_1000B4A54);
  }
  else
  {
    type metadata accessor for StewieModel();
    sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_1000B0BA0@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for StewieModel();
  sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  type metadata accessor for UIMetrics();
  sub_1000B4B08((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v7 = v6;
  sub_100004010(&qword_100387450);
  Binding.wrappedValue.getter();
  double result = v9;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  return result;
}

double sub_1000B0CC0@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  v18[0] = *v1;
  v18[1] = v3;
  v18[2] = v1[2];
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  sub_1000B0494((uint64_t *)v18, (uint64_t)v19);
  long long v7 = v31;
  long long v8 = v32;
  long long v9 = v29;
  *(_OWORD *)(a1 + 208) = v30;
  *(_OWORD *)(a1 + 224) = v7;
  *(_OWORD *)(a1 + 240) = v8;
  long long v10 = v27;
  long long v11 = v28;
  long long v12 = v25;
  *(_OWORD *)(a1 + 144) = v26;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v9;
  long long v13 = v23;
  long long v14 = v24;
  *(_OWORD *)(a1 + 80) = v22;
  *(_OWORD *)(a1 + 96) = v13;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 256) = v33;
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 128) = v12;
  long long v15 = v19[1];
  *(_OWORD *)(a1 + 16) = v19[0];
  *(_OWORD *)(a1 + 32) = v15;
  double result = *(double *)&v20;
  long long v17 = v21;
  *(_OWORD *)(a1 + 48) = v20;
  *(_OWORD *)(a1 + 64) = v17;
  return result;
}

uint64_t sub_1000B0D78@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  sub_10000D544(a1 + 32, (uint64_t)v50, &qword_100385408);
  sub_10000D544((uint64_t)v50, (uint64_t)v51, &qword_100385408);
  uint64_t v4 = v52;
  if (v52)
  {
    char v5 = v51[0];
    uint64_t v6 = swift_allocObject();
    *(unsigned char *)(v6 + 16) = v5;
    *(void *)(v6 + 24) = v4;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v6 + 80) = v7;
    *(void *)(v6 + 96) = *(void *)(a1 + 64);
    long long v8 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v6 + 48) = v8;
    sub_1000B4640(a1);
    long long v9 = (uint64_t (*)@<X0>(uint64_t@<X8>))ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
    long long v10 = sub_1000B4824;
  }
  else
  {
    long long v10 = 0;
    uint64_t v6 = 0;
    long long v9 = 0;
  }
  uint64_t v11 = swift_allocObject();
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v11 + 64) = v12;
  *(void *)(v11 + 80) = *(void *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v13;
  sub_1000B4640(a1);
  sub_100039BF8((uint64_t)v50);
  type metadata accessor for ConnectivityModel();
  sub_1000B4B08(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
  uint64_t v14 = EnvironmentObject.init()();
  uint64_t v47 = v15;
  type metadata accessor for PartnerModel();
  sub_1000B4B08(&qword_100380DA8, (void (*)(uint64_t))type metadata accessor for PartnerModel);
  uint64_t v16 = EnvironmentObject.init()();
  uint64_t v46 = v17;
  type metadata accessor for StewieModel();
  sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v18 = EnvironmentObject.init()();
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    if (*(void *)(v20 + 64))
    {
      uint64_t v21 = v14;
      uint64_t v22 = v6;
      long long v23 = v10;
      long long v24 = v9;
      if (*(void *)(*(void *)(v20 + 88) + 16))
      {
        uint64_t v43 = v19;
        uint64_t v44 = v18;
        id v25 = [self mainBundle];
        v53._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        v53._uint64_t object = (void *)0x80000001002CD130;
        v26._uint64_t object = (void *)0x80000001002CD110;
        v26._uint64_t countAndFlagsBits = 0xD000000000000019;
        v27.value._uint64_t countAndFlagsBits = 0x5072656972726143;
        v27.value._uint64_t object = (void *)0xED00006E6F656769;
        v28._uint64_t countAndFlagsBits = 0;
        v28._uint64_t object = (void *)0xE000000000000000;
        Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v53);

        type metadata accessor for AppEvents();
        sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
        uint64_t v30 = EnvironmentObject.init()();
        uint64_t v32 = v31;
        State.init(wrappedValue:)();
        uint64_t v33 = v32;
        uint64_t v34 = v30;
        uint64_t object = (uint64_t (*)@<X0>(uint64_t@<X8>))v29._object;
        uint64_t countAndFlagsBits = v29._countAndFlagsBits;
        uint64_t v19 = v43;
        uint64_t v18 = v44;
        long long v37 = (uint64_t (*)@<X0>(uint64_t@<X8>))v48;
        long long v38 = v49;
LABEL_10:
        *a2 = v23;
        a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v22;
        uint64_t v45 = (uint64_t)v23;
        a2[2] = v24;
        a2[3] = 0;
        a2[4] = (uint64_t (*)@<X0>(uint64_t@<X8>))v21;
        a2[5] = v47;
        a2[6] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
        a2[7] = v46;
        a2[8] = (uint64_t (*)@<X0>(uint64_t@<X8>))v18;
        a2[9] = v19;
        a2[10] = (uint64_t (*)@<X0>(uint64_t@<X8>))sub_1000B469C;
        a2[11] = (uint64_t (*)@<X0>(uint64_t@<X8>))v11;
        a2[12] = (uint64_t (*)@<X0>(uint64_t@<X8>))v34;
        a2[13] = (uint64_t (*)@<X0>(uint64_t@<X8>))v33;
        a2[14] = (uint64_t (*)@<X0>(uint64_t@<X8>))countAndFlagsBits;
        a2[15] = object;
        a2[16] = v37;
        a2[17] = v38;
        uint64_t v39 = (uint64_t)v23;
        uint64_t v40 = v34;
        uint64_t v41 = v33;
        sub_1000B46A4(v39);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1000B46E8(v40, v41, countAndFlagsBits, (uint64_t)object);
        sub_1000B4738(v40, v41, countAndFlagsBits, (uint64_t)object);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return sub_1000B4788(v45);
      }
    }
    else
    {
      uint64_t v21 = v14;
      uint64_t v22 = v6;
      long long v23 = v10;
      long long v24 = v9;
    }
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    uint64_t countAndFlagsBits = 0;
    uint64_t object = 0;
    long long v37 = 0;
    long long v38 = 0;
    goto LABEL_10;
  }
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000B1210@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v8 + 64) = v9;
  *(void *)(v8 + 80) = *(void *)(a3 + 64);
  long long v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v10;
  *(unsigned char *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = sub_1000B4888;
  *(void *)(a4 + 24) = v8;
  swift_bridgeObjectRetain();

  return sub_1000B4640(a3);
}

uint64_t sub_1000B12A8(char a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
      return (*(uint64_t (**)(void))(a2 + 56))();
    case 3:
      if (*(void *)a2) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 4:
      if (*(void *)a2) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 5:
      if (!*(void *)a2) {
        goto LABEL_14;
      }
LABEL_12:
      swift_retain();
      PassthroughSubject.send(_:)();
      uint64_t result = swift_release();
      break;
    default:
      if (!*(void *)a2)
      {
LABEL_14:
        type metadata accessor for AppEvents();
        sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
        EnvironmentObject.error()();
        __break(1u);
        JUMPOUT(0x1000B1454);
      }
      swift_retain();
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t sub_1000B146C(uint64_t a1, void *a2)
{
  switch((char)a1)
  {
    case 1:
      a1 = 1;
      goto LABEL_7;
    case 2:
      a1 = 4;
      goto LABEL_7;
    case 3:
      a1 = 2;
      goto LABEL_7;
    case 4:
      if (*a2) {
        goto LABEL_13;
      }
      goto LABEL_14;
    default:
LABEL_7:
      uint64_t v3 = a2[2];
      if (!v3)
      {
        type metadata accessor for StewieModel();
        char v5 = &qword_100380DA0;
        uint64_t v6 = type metadata accessor for StewieModel;
        goto LABEL_16;
      }
      if (*(void *)(v3 + 64) && (sub_100078E0C(a1, *(void *)(v3 + 80)) & 1) != 0)
      {
        if (*a2) {
          goto LABEL_13;
        }
        goto LABEL_14;
      }
      if (!*a2)
      {
LABEL_14:
        type metadata accessor for AppEvents();
        char v5 = (unint64_t *)&qword_10037F000;
        uint64_t v6 = type metadata accessor for AppEvents;
LABEL_16:
        sub_1000B4B08(v5, (void (*)(uint64_t))v6);
        EnvironmentObject.error()();
        __break(1u);
        JUMPOUT(0x1000B1600);
      }
LABEL_13:
      swift_retain();
      PassthroughSubject.send(_:)();
      return swift_release();
  }
}

uint64_t sub_1000B1614@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v16[2] = *(_OWORD *)(v1 + 32);
  v16[3] = v3;
  uint64_t v17 = *(void *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 16);
  v16[0] = *(_OWORD *)v1;
  v16[1] = v4;
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(void *)(v5 + 80) = *(void *)(v1 + 64);
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  sub_1000B4640((uint64_t)v16);
  uint64_t v8 = sub_100037794();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t result = swift_release();
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 24) = v14 & 1;
  return result;
}

uint64_t sub_1000B16F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v40 = type metadata accessor for BorderedButtonStyle();
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ButtonBorderShape();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  long long v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100381AE0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100004010(&qword_1003853D0);
  uint64_t v10 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100004010(&qword_1003853D8);
  __chkstk_darwin(v34);
  char v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100004010(&qword_1003853E0);
  uint64_t v43 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  long long v36 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter();
  uint64_t v16 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 0, 1, v16);
  long long v17 = *v2;
  long long v54 = v2[1];
  long long v55 = v17;
  long long v53 = v2[2];
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = v2[1];
  v18[1] = *v2;
  v18[2] = v19;
  _OWORD v18[3] = v2[2];
  uint64_t v46 = v2;
  uint64_t v35 = *((void *)&v54 + 1);
  sub_10004ED30((uint64_t)&v55);
  sub_100039BF8((uint64_t)&v54);
  sub_100006A94((uint64_t)&v53);
  sub_100004010(&qword_1003853E8);
  sub_1000B4490(&qword_1003853F0, &qword_1003853E8, (void (*)(void))sub_100043500);
  Button.init(role:action:label:)();
  static ButtonBorderShape.roundedRectangle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = v34;
  uint64_t v22 = (uint64_t *)&v14[*(int *)(v34 + 36)];
  uint64_t v23 = sub_100004010(&qword_100381038);
  uint64_t v24 = v38;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v22 + *(int *)(v23 + 28), v6, v38);
  *uint64_t v22 = KeyPath;
  uint64_t v25 = v37;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v37);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
  Swift::String v26 = v39;
  BorderedButtonStyle.init()();
  unint64_t v27 = sub_1000B4514();
  uint64_t v28 = sub_1000B4B08((unint64_t *)&qword_100381E40, (void (*)(uint64_t))&type metadata accessor for BorderedButtonStyle);
  Swift::String v29 = v36;
  uint64_t v30 = v40;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v30);
  sub_10000950C((uint64_t)v14, &qword_1003853D8);
  long long v51 = v53;
  long long v52 = v54;
  swift_bridgeObjectRetain();
  sub_100004010(&qword_10037ED78);
  State.projectedValue.getter();
  uint64_t v45 = v2;
  sub_100004010(&qword_100380E00);
  uint64_t v47 = v21;
  uint64_t v48 = v30;
  unint64_t v49 = v27;
  uint64_t v50 = v28;
  swift_getOpaqueTypeConformance2();
  sub_100033310();
  sub_100009B18(&qword_100380E08, &qword_100380E00);
  uint64_t v31 = v41;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v29, v31);
}

uint64_t sub_1000B1DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)&long long v24 = *(void *)(a1 + 16);
  *((void *)&v24 + 1) = v3;
  sub_100033310();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v11 = static Alignment.center.getter();
  sub_100165FA0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v22, 0.0, 1, 0.0, 1, v11, v12, v4, v6, v10, v8);
  sub_100033364(v4, v6, v10);
  swift_bridgeObjectRelease();
  long long v30 = v22[6];
  long long v31 = v22[7];
  long long v32 = v22[8];
  long long v26 = v22[2];
  long long v27 = v22[3];
  long long v28 = v22[4];
  long long v29 = v22[5];
  long long v24 = v22[0];
  long long v25 = v22[1];
  LOBYTE(v4) = static Edge.Set.vertical.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  char v23 = 0;
  long long v14 = v31;
  *(_OWORD *)(a2 + 96) = v30;
  *(_OWORD *)(a2 + 112) = v14;
  *(_OWORD *)(a2 + 128) = v32;
  long long v15 = v27;
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v15;
  long long v16 = v29;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v16;
  long long v17 = v25;
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v17;
  *(unsigned char *)(a2 + 144) = v4;
  *(_DWORD *)(a2 + 145) = v22[0];
  *(_DWORD *)(a2 + 148) = *(_DWORD *)((char *)v22 + 3);
  *(void *)(a2 + 152) = v18;
  *(void *)(a2 + 160) = v19;
  *(void *)(a2 + 168) = v20;
  *(void *)(a2 + 176) = v21;
  *(unsigned char *)(a2 + 184) = v23;
  return result;
}

uint64_t sub_1000B1F44(long long *a1)
{
  uint64_t v2 = sub_100004010(&qword_100381AE0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = a1[1];
  long long v10 = a1[1];
  swift_bridgeObjectRetain();
  static ButtonRole.destructive.getter();
  uint64_t v5 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  long long v6 = *a1;
  long long v11 = a1[2];
  long long v12 = v6;
  uint64_t v7 = (_OWORD *)swift_allocObject();
  long long v8 = a1[1];
  v7[1] = *a1;
  v7[2] = v8;
  _OWORD v7[3] = a1[2];
  sub_100039BF8((uint64_t)&v13);
  sub_10004ED30((uint64_t)&v12);
  sub_100006A94((uint64_t)&v11);
  sub_100033310();
  return Button<>.init<A>(_:role:action:)();
}

uint64_t sub_1000B20A4(void *a1)
{
  if (*a1)
  {
    swift_retain();
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B2190@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B16F4(a1);
}

uint64_t sub_1000B21CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (*(void *)(a2 + 56)) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a4 + 42);
  if (v5 != 2 && (v5 & 1) == 0) {
    return 7;
  }
  int v7 = *(unsigned __int8 *)(a4 + 43);
  if (v7 != 2 && (v7 & 1) == 0) {
    return 8;
  }
  if (!a3[8]) {
    goto LABEL_33;
  }
  uint64_t v10 = a3[10];
  if (*(void *)(v10 + 16))
  {
    Swift::Int v12 = sub_10026554C((uint64_t)&off_10034A820);
    char v13 = sub_10020D19C(v10, v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = a3[8];
    if ((v13 & 1) == 0)
    {
      if (v14 && !*(void *)(a3[11] + 16) && (sub_100078E0C(2, a3[10]) & 1) != 0)
      {
        __int16 v17 = *(_WORD *)(*(void *)(a1 + 40) + 120);
        if (v17 == 2) {
          return 0;
        }
        else {
          return v17 & 1;
        }
      }
      return 0;
    }
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (sub_100078E0C(2, a3[13]))
  {
    sub_100004010(&qword_1003853C8);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1002B3350;
    *(unsigned char *)(v15 + 32) = 2;
    if (a3[8])
    {
      if (sub_100078E0C(0, a3[13]))
      {
        long long v16 = sub_1001B2314((void *)1, 2, 1, (void *)v15);
        v16[2] = 2;
        *((unsigned char *)v16 + 33) = 3;
      }
    }
    return 2;
  }
  if (!a3[8]) {
    goto LABEL_33;
  }
  if (sub_100078E0C(0, a3[13])) {
    return 3;
  }
  if (a3[8]) {
    uint64_t v18 = (void *)swift_bridgeObjectRetain();
  }
  else {
LABEL_33:
  }
    uint64_t v18 = _swiftEmptySetSingleton;
  int64_t v19 = 0;
  uint64_t v20 = v18 + 7;
  uint64_t v21 = 1 << *((unsigned char *)v18 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v18[7];
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  while (v23)
  {
    unint64_t v25 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v26 = v25 | (v19 << 6);
LABEL_53:
    if (*(unsigned char *)(v18[6] + v26) != 3)
    {
      swift_release();
      return 0;
    }
  }
  int64_t v27 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_64;
  }
  if (v27 >= v24) {
    goto LABEL_55;
  }
  unint64_t v28 = v20[v27];
  ++v19;
  if (v28) {
    goto LABEL_52;
  }
  int64_t v19 = v27 + 1;
  if (v27 + 1 >= v24) {
    goto LABEL_55;
  }
  unint64_t v28 = v20[v19];
  if (v28) {
    goto LABEL_52;
  }
  int64_t v19 = v27 + 2;
  if (v27 + 2 >= v24) {
    goto LABEL_55;
  }
  unint64_t v28 = v20[v19];
  if (v28)
  {
LABEL_52:
    unint64_t v23 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v19 << 6);
    goto LABEL_53;
  }
  int64_t v29 = v27 + 3;
  if (v29 < v24)
  {
    unint64_t v28 = v20[v29];
    if (!v28)
    {
      while (1)
      {
        int64_t v19 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          break;
        }
        if (v19 >= v24) {
          goto LABEL_55;
        }
        unint64_t v28 = v20[v19];
        ++v29;
        if (v28) {
          goto LABEL_52;
        }
      }
LABEL_64:
      __break(1u);
      JUMPOUT(0x1000B2560);
    }
    int64_t v19 = v29;
    goto LABEL_52;
  }
LABEL_55:
  swift_release();
  uint64_t v30 = a3[8];
  if (!v30) {
    return 6;
  }
  if (!*(void *)(v30 + 16)) {
    return 6;
  }
  uint64_t v31 = sub_1001BEB10(0);
  if ((v32 & 1) == 0) {
    return 6;
  }
  uint64_t v33 = *(unsigned __int8 *)(*(void *)(v30 + 56) + v31);
  uint64_t result = 6;
  switch(v33)
  {
    case 1:
      uint64_t result = 5;
      break;
    case 2:
      uint64_t result = 4;
      break;
    default:
      return result;
  }
  return result;
}

double sub_1000B2584@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_1000B4B08((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v39 = EnvironmentObject.init()();
  uint64_t v38 = v2;
  type metadata accessor for AppPropertiesModel();
  sub_1000B4B08(&qword_1003852A0, (void (*)(uint64_t))type metadata accessor for AppPropertiesModel);
  uint64_t v3 = EnvironmentObject.init()();
  uint64_t v36 = v4;
  uint64_t v37 = v3;
  type metadata accessor for AppRuntimeStateModel();
  sub_1000B4B08(&qword_100380B58, (void (*)(uint64_t))type metadata accessor for AppRuntimeStateModel);
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v34 = v6;
  uint64_t v35 = v5;
  type metadata accessor for ConnectivityModel();
  sub_1000B4B08(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
  uint64_t v7 = EnvironmentObject.init()();
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  type metadata accessor for OffTheGridModel();
  sub_1000B4B08(&qword_1003852A8, (void (*)(uint64_t))type metadata accessor for OffTheGridModel);
  uint64_t v9 = EnvironmentObject.init()();
  uint64_t v30 = v10;
  uint64_t v31 = v9;
  type metadata accessor for PartnerModel();
  sub_1000B4B08(&qword_100380DA8, (void (*)(uint64_t))type metadata accessor for PartnerModel);
  uint64_t v11 = EnvironmentObject.init()();
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  type metadata accessor for StewieModel();
  sub_1000B4B08(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v13 = EnvironmentObject.init()();
  uint64_t v26 = v14;
  uint64_t v27 = v13;
  type metadata accessor for SystemSettingsModel();
  sub_1000B4B08(&qword_1003852B0, (void (*)(uint64_t))type metadata accessor for SystemSettingsModel);
  uint64_t v15 = EnvironmentObject.init()();
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  type metadata accessor for TryOutModel();
  sub_1000B4B08(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
  uint64_t v23 = EnvironmentObject.init()();
  uint64_t v18 = v17;
  type metadata accessor for UIMetrics();
  sub_1000B4B08((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v19 = EnvironmentObject.init()();
  uint64_t v21 = v20;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  double result = v40;
  *(void *)a1 = v39;
  *(void *)(a1 + 8) = v38;
  *(void *)(a1 + 16) = v37;
  *(void *)(a1 + 24) = v36;
  *(void *)(a1 + 32) = v35;
  *(void *)(a1 + 40) = v34;
  *(void *)(a1 + 48) = v33;
  *(void *)(a1 + 56) = v32;
  *(void *)(a1 + 64) = v31;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v26;
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v23;
  *(void *)(a1 + 136) = v18;
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v21;
  *(unsigned char *)(a1 + 160) = LOBYTE(v40);
  *(void *)(a1 + 168) = v41;
  *(unsigned char *)(a1 + 176) = LOBYTE(v40);
  *(void *)(a1 + 184) = v41;
  *(unsigned char *)(a1 + 192) = LOBYTE(v40);
  *(void *)(a1 + 200) = v41;
  *(double *)(a1 + 208) = v40;
  *(void *)(a1 + 216) = v41;
  return result;
}

uint64_t destroy for ExplorerMainView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ExplorerMainView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  uint64_t v13 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v13;
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExplorerMainView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ExplorerMainView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for ExplorerMainView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_release();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_release();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_release();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_release();
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v10;
  swift_release();
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  swift_release();
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_release();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerMainView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 224)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerMainView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 224) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerMainView()
{
  return &type metadata for ExplorerMainView;
}

uint64_t sub_1000B2FC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B2FE0()
{
  return sub_1000B3B60(240);
}

uint64_t sub_1000B2FE8()
{
  return sub_1000AFC80((void *)(v0 + 16));
}

uint64_t sub_1000B2FF0(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000B30E8()
{
  unint64_t result = qword_1003852E8;
  if (!qword_1003852E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003852E8);
  }
  return result;
}

uint64_t sub_1000B313C()
{
  return sub_1000B3B60(240);
}

uint64_t sub_1000B3144()
{
  return sub_1000B021C(v0 + 16);
}

unint64_t sub_1000B314C()
{
  unint64_t result = qword_1003852F8;
  if (!qword_1003852F8)
  {
    sub_1000094C4(&qword_1003852F0);
    sub_1000B31C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003852F8);
  }
  return result;
}

unint64_t sub_1000B31C0()
{
  unint64_t result = qword_100385300;
  if (!qword_100385300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385300);
  }
  return result;
}

uint64_t sub_1000B3214()
{
  return sub_1000B3B60(240);
}

uint64_t sub_1000B321C(uint64_t a1, uint64_t a2)
{
  return sub_1000B02E0(a1, a2);
}

unint64_t sub_1000B3224()
{
  unint64_t result = qword_100385308;
  if (!qword_100385308)
  {
    sub_1000094C4(&qword_100380920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385308);
  }
  return result;
}

uint64_t sub_1000B3290()
{
  return sub_1000B3B60(240);
}

uint64_t sub_1000B3298()
{
  return sub_1000B0374(v0 + 16);
}

uint64_t sub_1000B32A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B32B0()
{
  return swift_release();
}

uint64_t sub_1000B32B8(uint64_t result)
{
  *(unsigned char *)(result + 177) = 1;
  return result;
}

unint64_t sub_1000B32C4()
{
  unint64_t result = qword_100385338;
  if (!qword_100385338)
  {
    sub_1000094C4(&qword_100385328);
    sub_1000B3340();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385338);
  }
  return result;
}

unint64_t sub_1000B3340()
{
  unint64_t result = qword_100385340;
  if (!qword_100385340)
  {
    sub_1000094C4(&qword_100385348);
    sub_1000B33E0();
    sub_100009B18(&qword_100380E70, &qword_100380E78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385340);
  }
  return result;
}

unint64_t sub_1000B33E0()
{
  unint64_t result = qword_100385350;
  if (!qword_100385350)
  {
    sub_1000094C4(&qword_100385358);
    sub_100009B18(&qword_100385360, &qword_100385368);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385350);
  }
  return result;
}

unint64_t sub_1000B3480()
{
  unint64_t result = qword_100385378;
  if (!qword_100385378)
  {
    sub_1000094C4(&qword_100385380);
    sub_100009B18(&qword_100385388, &qword_100385390);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385378);
  }
  return result;
}

unint64_t sub_1000B3520()
{
  unint64_t result = qword_1003853A8;
  if (!qword_1003853A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003853A8);
  }
  return result;
}

uint64_t sub_1000B3574()
{
  return sub_1000AF804(*(_OWORD **)(v0 + 16));
}

uint64_t sub_1000B357C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AFB20(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000B3584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000B35D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if (a24)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    char v26 = a18 & 1;
    return sub_1000B3678(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, v26);
  }
}

uint64_t sub_1000B3678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000B36F4(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(_WORD *)(a1 + 176));
  return a1;
}

uint64_t sub_1000B3770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if (a24)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    char v26 = a18 & 1;
    return sub_1000B3814(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, v26);
  }
}

uint64_t sub_1000B3814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B3894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B38E4()
{
  return sub_1000B3B60(248);
}

uint64_t sub_1000B38EC(double a1)
{
  return sub_1000AF0C8((_OWORD *)(v1 + 16), a1, *(double *)(v1 + 240));
}

uint64_t sub_1000B38F8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 256, 7);
}

uint64_t sub_1000B39A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000AF3E4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), (_OWORD *)(v2 + 32), a2);
}

uint64_t sub_1000B39AC(uint64_t result)
{
  *(unsigned char *)(result + 136) = 1;
  return result;
}

uint64_t sub_1000B39B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B3A24(uint64_t result)
{
  *(unsigned char *)(result + 177) = 0;
  return result;
}

uint64_t sub_1000B3A2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B3A98(uint64_t result)
{
  *(unsigned char *)(result + 136) = 0;
  return result;
}

uint64_t sub_1000B3AA0()
{
  return sub_1000B3B60(240);
}

uint64_t sub_1000B3AA8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000B3AF8()
{
  return sub_1000B3B60(256);
}

uint64_t sub_1000B3B00()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000B3B58()
{
  return sub_1000B3B60(240);
}

uint64_t sub_1000B3B60(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000B3C0C()
{
  return sub_1000AF9D4(v0 + 16);
}

uint64_t destroy for _ExplorerEndSatelliteConnectionButtonView()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for _ExplorerEndSatelliteConnectionButtonView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ExplorerEndSatelliteConnectionButtonView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ExplorerEndSatelliteConnectionButtonView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ExplorerEndSatelliteConnectionButtonView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ExplorerEndSatelliteConnectionButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerEndSatelliteConnectionButtonView()
{
  return &type metadata for _ExplorerEndSatelliteConnectionButtonView;
}

uint64_t destroy for _ExplorerMainViewContentList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for _ExplorerMainViewContentList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ExplorerMainViewContentList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ExplorerMainViewContentList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ExplorerMainViewContentList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ExplorerMainViewContentList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerMainViewContentList()
{
  return &type metadata for _ExplorerMainViewContentList;
}

uint64_t destroy for _ExplorerFullScreenBackgroundView()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for _ExplorerFullScreenBackgroundView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ExplorerFullScreenBackgroundView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for _ExplorerFullScreenBackgroundView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for _ExplorerFullScreenBackgroundView()
{
  return &type metadata for _ExplorerFullScreenBackgroundView;
}

uint64_t sub_1000B429C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B43E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B43FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B4418()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B4438()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000B4488@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1DD0(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000B4490(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B4514()
{
  unint64_t result = qword_1003853F8;
  if (!qword_1003853F8)
  {
    sub_1000094C4(&qword_1003853D8);
    sub_100009B18(&qword_100385400, &qword_1003853D0);
    sub_100009B18(&qword_100381048, &qword_100381038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003853F8);
  }
  return result;
}

uint64_t sub_1000B45D8()
{
  return sub_1000B1F44(*(long long **)(v0 + 16));
}

uint64_t sub_1000B45E4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000B462C()
{
  return sub_1000B20A4((void *)(v0 + 16));
}

uint64_t sub_1000B4638@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  return sub_1000B0D78(v1 + 16, a1);
}

uint64_t sub_1000B4640(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B469C(uint64_t a1)
{
  return sub_1000B146C(a1, (void *)(v1 + 16));
}

uint64_t sub_1000B46A4(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000B46E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000B4738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B4788(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B47CC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1000B4824@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1210(*(unsigned char *)(v1 + 16), *(void *)(v1 + 24), v1 + 32, a1);
}

uint64_t sub_1000B4838()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000B4888(char a1)
{
  return sub_1000B12A8(a1, v1 + 16);
}

uint64_t sub_1000B4890(uint64_t result)
{
  *(unsigned char *)(result + 185) = 1;
  return result;
}

unint64_t sub_1000B489C()
{
  unint64_t result = qword_100385430;
  if (!qword_100385430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385430);
  }
  return result;
}

uint64_t sub_1000B48F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char a25)
{
  if ((a25 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000B49A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000B49BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B49D0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(_WORD *)(a1 + 184));
  return a1;
}

uint64_t sub_1000B4A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char a25)
{
  if ((a25 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t sub_1000B4B08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B4B50(uint64_t result)
{
  *(unsigned char *)(result + 185) = 0;
  return result;
}

uint64_t sub_1000B4B58()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000B4C98()
{
  unint64_t result = qword_100385450;
  if (!qword_100385450)
  {
    sub_1000094C4(&qword_100385458);
    sub_100009B18(&qword_100380C08, &qword_100380BF8);
    sub_100009B18(qword_100380C10, &qword_100380C00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385450);
  }
  return result;
}

uint64_t sub_1000B4D5C()
{
  return sub_100009B18(&qword_100385460, &qword_100385468);
}

uint64_t sub_1000B4DA0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v12 = *(void *)(v0 - 8);
  uint64_t v13 = v0;
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  id v5 = [self mainBundle];
  id v6 = [v5 bundleIdentifier];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0x80000001002C5A40;
    uint64_t v7 = 0xD000000000000012;
  }
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  uint64_t v14 = (void *)v7;
  unint64_t v15 = v9;
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 0x456369747061482ELL;
  v10._uint64_t object = (void *)0xED0000656E69676ELL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_1000B9368((unint64_t *)&unk_10037FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100004010((uint64_t *)&unk_10038D2B0);
  sub_100011C70((unint64_t *)&unk_10037FF70, (uint64_t *)&unk_10038D2B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v13);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100385470 = result;
  return result;
}

uint64_t sub_1000B5094()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = 0;
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9A48);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136446210;
    type metadata accessor for HapticAgent();
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] init", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v1;
}

uint64_t sub_1000B5260()
{
  uint64_t v1 = v0;
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9A48);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136446210;
    type metadata accessor for HapticAgent();
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_release();
  return v1;
}

uint64_t sub_1000B5430()
{
  sub_1000B5260();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HapticAgent()
{
  return self;
}

uint64_t sub_1000B5488()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *Swift::String v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    if (qword_10037DDD0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v20 = v4;
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000FD84(v12, (uint64_t)qword_1003A9A48);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting HapticAgent", v15, 2u);
    swift_slowDealloc();
  }

  if (qword_10037DD30 != -1) {
    swift_once();
  }
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1000B943C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_100354D70;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000B9368((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v20);
  swift_release();
  swift_release();
  return 1;
}

void sub_1000B592C()
{
  unsigned int v0 = objc_msgSend(objc_msgSend(self, "capabilitiesForHardware"), "supportsHaptics");
  swift_unknownObjectRelease();
  if (v0)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1000B6684();
      swift_release();
    }
  }
  else
  {
    if (qword_10037DDD0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000FD84(v1, (uint64_t)qword_1003A9A48);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Haptic capabilities are not supported", v3, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000B5AA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *uint64_t v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    if (qword_10037DDD0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = v6;
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000FD84(v14, (uint64_t)qword_1003A9A48);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping HapticAgent", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (qword_10037DD30 != -1) {
    swift_once();
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v1;
  *(void *)(v19 + 24) = v18;
  aBlock[4] = sub_1000B9434;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_100354D48;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain_n();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1000B9368((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v23);
  return swift_release();
}

void sub_1000B5F50()
{
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000FD84(v0, (uint64_t)qword_1003A9A48);
  swift_retain_n();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    type metadata accessor for HapticAgent();
    swift_retain();
    uint64_t v4 = String.init<A>(describing:)();
    sub_1001B3178(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2082;
    swift_retain();
    sub_100004010(&qword_100385688);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s] hapticEngineState instance [%{public}s] will be destroyed upon capturing closure exit", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
}

uint64_t sub_1000B6194(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000FD84(v11, (uint64_t)qword_1003A9A48);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  int v25 = a1;
  if (v14)
  {
    uint64_t v23 = v2;
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = v5;
    aBlock[0] = v16;
    *(_DWORD *)unint64_t v15 = 136446210;
    LOBYTE(v28) = a1;
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v28 = (void *)sub_1001B3178(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "play haptic: %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v24;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_10037DD30 != -1) {
    swift_once();
  }
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(unsigned char *)(v20 + 24) = v25;
  aBlock[4] = (uint64_t)sub_1000B93E8;
  aBlock[5] = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100207A1C;
  aBlock[3] = (uint64_t)&unk_100354CF8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = _swiftEmptyArrayStorage;
  sub_1000B9368((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  swift_release();
  return swift_release();
}

uint64_t sub_1000B6604(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 16);
    swift_retain();
    uint64_t result = swift_release();
    if (v4)
    {
      sub_1000B81E8(a2);
      return swift_release();
    }
  }
  return result;
}

void sub_1000B6684()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10037DD30 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100385470;
  *uint64_t v6 = qword_100385470;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (qword_10037DDD0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000FD84(v9, (uint64_t)qword_1003A9A48);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting CHHapticEngine", v12, 2u);
    swift_slowDealloc();
  }

  id v13 = objc_allocWithZone((Class)CHHapticEngine);
  id aBlock = 0;
  id v14 = [v13 initAndReturnError:&aBlock];
  id v15 = aBlock;
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v2;
    uint64_t v36 = sub_1000B9200;
    uint64_t v37 = v18;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v34 = sub_100207A1C;
    uint64_t v35 = &unk_100354C30;
    uint64_t v19 = _Block_copy(&aBlock);
    id v20 = v15;
    swift_release();
    [v16 setResetHandler:v19];
    _Block_release(v19);
    uint64_t v36 = sub_1000B7008;
    uint64_t v37 = 0;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v34 = sub_1000B71C4;
    uint64_t v35 = &unk_100354C58;
    uint64_t v21 = _Block_copy(&aBlock);
    [v16 setStoppedHandler:v21];
    _Block_release(v21);
    [v16 setAutoShutdownEnabled:1];
    type metadata accessor for HapticEngineState();
    swift_allocObject();
    uint64_t v22 = sub_1000B9208(v16);

    v1[2] = v22;
    swift_release();
  }
  else
  {
    id v23 = aBlock;
    uint64_t v24 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    int v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      id aBlock = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v31 = v24;
      swift_errorRetain();
      sub_100004010(&qword_10037FFB0);
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v31 = sub_1001B3178(v28, v29, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to create CHHapticEngine: %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_1000B6C14()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000FD84(v8, (uint64_t)qword_1003A9A48);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Reset handler invoked", v11, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = v5;
    uint64_t v17 = v4;
    uint64_t v18 = v1;
    swift_weakInit();
    if (qword_10037DD30 != -1) {
      swift_once();
    }
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = Strong;
    aBlock[4] = sub_1000B9340;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100207A1C;
    aBlock[3] = &unk_100354CA8;
    id v15 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000B9368((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v17);
    swift_weakDestroy();
    return swift_release();
  }
  return result;
}

void sub_1000B7008()
{
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000FD84(v0, (uint64_t)qword_1003A9A48);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446210;
    type metadata accessor for StoppedReason(0);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1001B3178(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Stop handler invoked: the engine stopped for reason: %{public}s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1000B71C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1000B7218()
{
  uint64_t v1 = v0;
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9A48);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HapticEngineState deinit", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Stopping engine", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = *(void **)(v1 + 16);
  v12[4] = sub_1000B7408;
  v12[5] = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  uint64_t v12[2] = sub_100273438;
  v12[3] = &unk_100354BB8;
  os_log_type_t v10 = _Block_copy(v12);
  [v9 stopWithCompletionHandler:v10];
  _Block_release(v10);

  swift_bridgeObjectRelease();
  return v1;
}

void sub_1000B7408(uint64_t a1)
{
  if (a1)
  {
    if (qword_10037DDD0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000FD84(v1, (uint64_t)qword_1003A9A48);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136446210;
      swift_errorRetain();
      sub_100004010(&qword_100385630);
      uint64_t v4 = String.init<A>(describing:)();
      sub_1001B3178(v4, v5, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to stop engine: %{public}s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_10037DDD0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000FD84(v6, (uint64_t)qword_1003A9A48);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Engine stopped", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000B76B0()
{
  sub_1000B7218();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HapticEngineState()
{
  return self;
}

void sub_1000B7704()
{
  if (qword_10037DDD0 != -1) {
    swift_once();
  }
  uint64_t v79 = v0;
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000FD84(v1, (uint64_t)qword_1003A9A48);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "prepareEngine", v4, 2u);
    swift_slowDealloc();
  }

  sub_100004010(&qword_100385638);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002B3350;
  CHHapticPatternKey v6 = CHHapticPatternKeyPattern;
  *(void *)(inited + 32) = CHHapticPatternKeyPattern;
  sub_100004010(&qword_100385640);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1002B3350;
  sub_100004010(&qword_100385648);
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002B3350;
  CHHapticPatternKey v9 = CHHapticPatternKeyEvent;
  *(void *)(v8 + 32) = CHHapticPatternKeyEvent;
  sub_100004010((uint64_t *)&unk_100385650);
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_1002B4DF0;
  CHHapticPatternKey v11 = CHHapticPatternKeyEventType;
  *(void *)(v10 + 32) = CHHapticPatternKeyEventType;
  CHHapticEventType v12 = CHHapticEventTypeHapticTransient;
  type metadata accessor for EventType(0);
  *(void *)(v10 + 40) = v12;
  CHHapticPatternKey v13 = CHHapticPatternKeyTime;
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 72) = v13;
  *(void *)(v10 + 80) = 0x3F50624DD2F1A9FCLL;
  CHHapticPatternKey v15 = CHHapticPatternKeyEventDuration;
  *(void *)(v10 + 104) = &type metadata for Double;
  *(void *)(v10 + 112) = v15;
  *(void *)(v10 + 144) = &type metadata for Double;
  *(void *)(v10 + 120) = 0x3FF0000000000000;
  uint64_t v16 = v6;
  uint64_t v17 = v9;
  uint64_t v18 = v11;
  uint64_t v19 = v12;
  id v20 = v13;
  uint64_t v21 = v15;
  *(void *)(v8 + 40) = sub_100283D24(v10);
  *(void *)(v7 + 32) = sub_100283D4C(v8);
  *(void *)(inited + 40) = v7;
  unint64_t v80 = sub_100283D58(inited);
  CHHapticEventType v22 = CHHapticEventTypeHapticContinuous;
  sub_100004010(&qword_1003913B0);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1002B7BC0;
  CHHapticEventParameterID v24 = CHHapticEventParameterIDHapticIntensity;
  id v25 = objc_allocWithZone((Class)CHHapticEventParameter);
  os_log_type_t v26 = v22;
  LODWORD(v27) = 1.0;
  *(void *)(v23 + 32) = [v25 initWithParameterID:v24 value:v27];
  CHHapticEventParameterID v28 = CHHapticEventParameterIDHapticSharpness;
  id v29 = objc_allocWithZone((Class)CHHapticEventParameter);
  LODWORD(v30) = 1061997773;
  *(void *)(v23 + 40) = [v29 initWithParameterID:v28 value:v30];
  specialized Array._endMutation()();
  id v31 = objc_allocWithZone((Class)CHHapticEvent);
  sub_10001E6FC(0, &qword_100385660);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v33 = [v31 initWithEventType:v26 parameters:isa relativeTime:0.0 duration:0.1];

  CHHapticEventType v34 = CHHapticEventTypeHapticContinuous;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1002B7BC0;
  CHHapticEventParameterID v36 = CHHapticEventParameterIDHapticIntensity;
  id v37 = objc_allocWithZone((Class)CHHapticEventParameter);
  uint64_t v38 = v34;
  LODWORD(v39) = 0.5;
  *(void *)(v35 + 32) = [v37 initWithParameterID:v36 value:v39];
  CHHapticEventParameterID v40 = CHHapticEventParameterIDHapticSharpness;
  id v41 = objc_allocWithZone((Class)CHHapticEventParameter);
  LODWORD(v42) = 1050253722;
  *(void *)(v35 + 40) = [v41 initWithParameterID:v40 value:v42];
  specialized Array._endMutation()();
  id v43 = objc_allocWithZone((Class)CHHapticEvent);
  Class v44 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v45 = [v43 initWithEventType:v38 parameters:v44 relativeTime:0.15 duration:0.15];

  sub_1001748E4(v80);
  swift_bridgeObjectRelease();
  id v46 = objc_allocWithZone((Class)CHHapticPattern);
  id v47 = sub_1000B8ED8();
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1002B7BC0;
  *(void *)(v48 + 32) = v33;
  *(void *)(v48 + 40) = v45;
  id v82 = (id)v48;
  specialized Array._endMutation()();
  id v49 = objc_allocWithZone((Class)CHHapticPattern);
  id v50 = v47;
  id v51 = v33;
  id v52 = v45;
  id v53 = sub_1000B8FFC();
  long long v81 = v51;
  sub_100004010(&qword_100385668);
  uint64_t v54 = swift_initStackObject();
  *(_OWORD *)(v54 + 16) = xmmword_1002B3F10;
  *(unsigned char *)(v54 + 32) = 0;
  long long v55 = *(void **)(v79 + 16);
  id v82 = 0;
  id v56 = v53;
  id v57 = [v55 createPlayerWithPattern:v50 error:&v82];

  id v58 = v82;
  if (v57)
  {
    *(void *)(v54 + 40) = v57;
    *(unsigned char *)(v54 + 48) = 1;
    id v82 = 0;
    id v59 = v58;
    id v60 = [v55 createPlayerWithPattern:v56 error:&v82];
    id v61 = v82;
    if (v60)
    {
      *(void *)(v54 + 56) = v60;
      *(unsigned char *)(v54 + 64) = 2;
      id v82 = 0;
      id v62 = v61;
      id v63 = [v55 createPlayerWithPattern:v56 error:&v82];
      id v64 = v82;
      if (v63)
      {
        *(void *)(v54 + 72) = v63;
        *(unsigned char *)(v54 + 80) = 3;
        id v82 = 0;
        id v65 = v64;
        id v66 = [v55 createPlayerWithPattern:v56 error:&v82];

        id v67 = v82;
        if (v66)
        {
          *(void *)(v54 + 88) = v66;
          unint64_t v68 = sub_1002862E0(v54);
          swift_setDeallocating();
          id v69 = v67;
          sub_100004010(&qword_100385670);
          swift_arrayDestroy();

          *(void *)(v79 + 24) = v68;
          swift_bridgeObjectRelease();
          return;
        }
        id v73 = v82;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_unknownObjectRelease();
      }
      else
      {
        id v72 = v82;

        _convertNSErrorToError(_:)();
        swift_willThrow();
      }
      swift_unknownObjectRelease();
    }
    else
    {
      id v71 = v82;

      _convertNSErrorToError(_:)();
      swift_willThrow();
    }
    swift_unknownObjectRelease();
  }
  else
  {
    id v70 = v82;

    _convertNSErrorToError(_:)();
    swift_willThrow();
  }
  *(void *)(v54 + 16) = 0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  long long v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, v75))
  {
    long long v76 = (uint8_t *)swift_slowAlloc();
    id v82 = (id)swift_slowAlloc();
    *(_DWORD *)long long v76 = 136446210;
    swift_errorRetain();
    sub_100004010(&qword_10037FFB0);
    uint64_t v77 = String.init<A>(describing:)();
    sub_1001B3178(v77, v78, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to make players: %{public}s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
}

void sub_1000B81E8(uint64_t a1)
{
  uint64_t v2 = v1;
  char v3 = a1;
  uint64_t v4 = *(void *)(v1 + 24);
  if (*(void *)(v4 + 16) && (uint64_t v5 = sub_1001BEB10(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    uint64_t v8 = qword_10037DDD0;
    swift_unknownObjectRetain();
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000FD84(v9, (uint64_t)qword_1003A9A48);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      CHHapticEventType v12 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)CHHapticEventType v12 = 136446210;
      LOBYTE(v26) = v3;
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v26 = sub_1001B3178(v13, v14, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting engine for %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    CHHapticPatternKey v15 = *(void **)(v2 + 16);
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = v3;
    *(void *)(v17 + 24) = v16;
    *(void *)(v17 + 32) = v7;
    aBlock[4] = (uint64_t)sub_1000B91A4;
    aBlock[5] = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100273438;
    aBlock[3] = (uint64_t)&unk_100354B90;
    uint64_t v18 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_release();
    [v15 startWithCompletionHandler:v18];
    _Block_release(v18);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_10037DDD0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000FD84(v19, (uint64_t)qword_1003A9A48);
    oslog = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      LOBYTE(v26) = v3;
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v26 = sub_1001B3178(v22, v23, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v20, "Requested player %{public}s does not exist", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

unsigned char *storeEnumTagSinglePayload for HapticAgent.HapticType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B86D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HapticAgent.HapticType()
{
  return &type metadata for HapticAgent.HapticType;
}

unint64_t sub_1000B8710()
{
  unint64_t result = qword_100385620;
  if (!qword_100385620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385620);
  }
  return result;
}

void sub_1000B8764(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    if (qword_10037DDD0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000FD84(v4, (uint64_t)qword_1003A9A48);
    swift_errorRetain();
    swift_errorRetain();
    osloga = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      uint64_t v7 = String.init<A>(describing:)();
      sub_1001B3178(v7, v8, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2082;
      swift_errorRetain();
      sub_100004010(&qword_100385630);
      uint64_t v9 = String.init<A>(describing:)();
      id v36 = (id)sub_1001B3178(v9, v10, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, osloga, v5, "Failed to start engine for %{public}s: %{public}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_10037DDD0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000FD84(v11, (uint64_t)qword_1003A9A48);
    CHHapticEventType v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v14 = 136446210;
      uint64_t v15 = String.init<A>(describing:)();
      id v36 = (id)sub_1001B3178(v15, v16, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Engine started for %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      id v36 = 0;
      if ([a4 startAtTime:&v36 error:0.0])
      {
        id v18 = v36;
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          id v36 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v21 = 136446210;
          uint64_t v22 = String.init<A>(describing:)();
          sub_1001B3178(v22, v23, (uint64_t *)&v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Player started for %{public}s", v21, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
      }
      else
      {
        id v27 = v36;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v28))
        {
          uint64_t v29 = swift_slowAlloc();
          id v36 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 136446466;
          uint64_t v30 = String.init<A>(describing:)();
          sub_1001B3178(v30, v31, (uint64_t *)&v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v29 + 12) = 2082;
          swift_errorRetain();
          sub_100004010(&qword_10037FFB0);
          uint64_t v32 = String.init<A>(describing:)();
          sub_1001B3178(v32, v33, (uint64_t *)&v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v28, "Failed to start player for %{public}s: %{public}s", (uint8_t *)v29, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          return;
        }
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      CHHapticEventParameterID v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "HapticEngineState is already destroyed, ignoring play request", v26, 2u);
        swift_slowDealloc();
      }
    }
  }
}

id sub_1000B8ED8()
{
  type metadata accessor for Key(0);
  sub_1000B9368(&qword_10037ECD0, type metadata accessor for Key);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithDictionary:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_1000B8FFC()
{
  sub_10001E6FC(0, &qword_100385678);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10001E6FC(0, &qword_100385680);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = 0;
  id v3 = [v0 initWithEvents:isa parameters:v2 error:&v7];

  if (v3)
  {
    id v4 = v7;
  }
  else
  {
    id v5 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1000B912C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B9164()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000B91A4(uint64_t a1)
{
  sub_1000B8764(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000B91B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B91C0()
{
  return swift_release();
}

uint64_t sub_1000B91C8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9200()
{
  return sub_1000B6C14();
}

uint64_t sub_1000B9208(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = sub_1002862E0((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v4;
  uint64_t v5 = qword_10037DDD0;
  id v6 = a1;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000FD84(v7, (uint64_t)qword_1003A9A48);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "HapticEngineState init", v10, 2u);
    swift_slowDealloc();
  }

  sub_1000B7704();
  return v2;
}

uint64_t sub_1000B9308()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B9340()
{
  if (*(void *)(v0 + 16)) {
    sub_1000B7704();
  }
}

uint64_t sub_1000B9368(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B93B0()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000B93E8()
{
  return sub_1000B6604(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1000B93F4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000B9434()
{
}

void sub_1000B943C()
{
}

uint64_t destroy for StewieCompressedData(uint64_t a1)
{
  return sub_10000F294(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t initializeWithCopy for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10000F1F0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10000F1F0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10000F294(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000F294(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for StewieCompressedData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StewieCompressedData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StewieCompressedData()
{
  return &type metadata for StewieCompressedData;
}

ValueMetadata *type metadata accessor for TryOutQuestionnaireIntroView()
{
  return &type metadata for TryOutQuestionnaireIntroView;
}

uint64_t sub_1000B9644()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B9660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v44 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v2 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  BOOL v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100004010(&qword_100385690);
  id v45 = *(uint64_t **)(v5 - 8);
  uint64_t v46 = v5;
  __chkstk_darwin(v5);
  id v43 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100385698);
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_1003856A0);
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  __chkstk_darwin(v9);
  id v47 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100004010(&qword_1003856A8);
  __chkstk_darwin(v51);
  id v52 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CHHapticEventType v12 = *(void **)v1;
  if (*(void *)v1)
  {
    uint64_t v13 = v12[9];
    uint64_t v14 = v12[10];
    sub_100008F88(v12 + 6, v13);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 24))(v60, v13, v14);
    uint64_t v15 = *(void *)(v1 + 16);
    char v16 = *(unsigned char *)(v1 + 24);
    uint64_t v17 = *(void *)(v1 + 32);
    uint64_t v61 = *(void *)(v1 + 48);
    v62[0] = v17;
    sub_1000090FC((uint64_t)v60, (uint64_t)v58);
    uint64_t v18 = swift_allocObject();
    long long v19 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v18 + 32) = v19;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(v1 + 32);
    *(void *)(v18 + 64) = *(void *)(v1 + 48);
    sub_100009164(v58, v18 + 72);
    sub_1000090FC((uint64_t)v60, (uint64_t)v58);
    uint64_t v20 = swift_allocObject();
    long long v21 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v20 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v20 + 32) = v21;
    *(_OWORD *)(v20 + 48) = *(_OWORD *)(v1 + 32);
    *(void *)(v20 + 64) = *(void *)(v1 + 48);
    sub_100009164(v58, v20 + 72);
    swift_retain();
    uint64_t v42 = v15;
    sub_10004C6D4(v15, v16);
    sub_10004ED30((uint64_t)v62);
    swift_retain();
    sub_10003E68C((uint64_t)&v61);
    swift_retain();
    sub_10004C6D4(v15, v16);
    sub_10004ED30((uint64_t)v62);
    swift_retain();
    sub_10003E68C((uint64_t)&v61);
    sub_1001621AC(v56, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_1000BB674, v18, sub_1000BB684, v20, 0);
    uint64_t v22 = v4;
    uint64_t v23 = v44;
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v44);
    uint64_t v24 = sub_100004010(&qword_1003856B0);
    uint64_t v25 = sub_100009B18(&qword_1003856B8, &qword_1003856B0);
    uint64_t v26 = v43;
    View.navigationBarTitleDisplayMode(_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v22, v23);
    v58[8] = v56[8];
    v58[9] = v56[9];
    v58[10] = v56[10];
    uint64_t v59 = v57;
    v58[4] = v56[4];
    v58[5] = v56[5];
    v58[6] = v56[6];
    v58[7] = v56[7];
    v58[0] = v56[0];
    v58[1] = v56[1];
    v58[2] = v56[2];
    v58[3] = v56[3];
    sub_100009354((uint64_t)v58);
    uint64_t v27 = v42;
    sub_10004C6D4(v42, v16);
    sub_10004EE90(v27, v16);
    sub_10004C738(v27, v16);
    *(void *)&v56[0] = v24;
    *((void *)&v56[0] + 1) = v25;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v29 = v48;
    uint64_t v30 = v46;
    View.navigationBarBackButtonHidden(_:)();
    uint64_t v31 = ((uint64_t (*)(char *, uint64_t))v45[1])(v26, v30);
    id v45 = &v41;
    __chkstk_darwin(v31);
    *(&v41 - 2) = v1;
    sub_100004010(&qword_1003856C0);
    *(void *)&v56[0] = v30;
    *((void *)&v56[0] + 1) = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_1003856C8, &qword_1003856C0);
    uint64_t v32 = v47;
    uint64_t v33 = v50;
    View.toolbar<A>(content:)();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v33);
    sub_10004C6D4(v27, v16);
    char v34 = sub_10004EE90(v27, v16);
    sub_10004C738(v27, v16);
    if (v34) {
      char v35 = static Edge.Set.top.getter();
    }
    else {
      char v35 = Edge.Set.init(rawValue:)();
    }
    char v36 = v35;
    uint64_t v38 = (uint64_t)v52;
    uint64_t v37 = v53;
    uint64_t v39 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v32, v54);
    *(unsigned char *)(v38 + *(int *)(v51 + 36)) = v36;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v39);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v60);
    return sub_10000D544(v38, v55, &qword_1003856A8);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000BB698((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B9E08@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004010(&qword_100385708);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100004010(&qword_100385710);
  uint64_t v9 = __chkstk_darwin(v45);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  if (*a1)
  {
    uint64_t v14 = self;
    swift_retain();
    id v15 = [v14 sharedApplication];
    id v16 = [v15 userInterfaceLayoutDirection];

    swift_release();
    unint64_t v17 = 0xD00000000000001BLL;
    unint64_t v18 = 0xD00000000000001FLL;
    if (v16 != (id)1) {
      unint64_t v18 = 0xD00000000000001BLL;
    }
    unint64_t v44 = v18;
    unint64_t v19 = 0x80000001002CD260;
    if (v16 != (id)1)
    {
      unint64_t v19 = 0x80000001002CD240;
      unint64_t v17 = 0;
    }
    unint64_t v42 = v17;
    unint64_t v43 = v19;
    if (v16 == (id)1) {
      unint64_t v20 = 0x80000001002CD240;
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for UIMetrics();
    sub_1000BB698((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t v22 = EnvironmentObject.init()();
    uint64_t v41 = v23;
    *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
    *((void *)v8 + 1) = 0;
    v8[16] = 0;
    uint64_t v24 = sub_100004010(&qword_100385718);
    sub_1000BA1F8(a1, (uint64_t)&v8[*(int *)(v24 + 44)]);
    uint64_t v26 = a2[3];
    uint64_t v25 = a2[4];
    sub_100008F88(a2, v26);
    double v27 = (*(double (**)(uint64_t, uint64_t))(v25 + 24))(v26, v25);
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    char v34 = static Edge.Set.all.getter();
    sub_10000D2A0((uint64_t)v8, (uint64_t)v11, &qword_100385708);
    char v35 = &v11[*(int *)(v45 + 36)];
    char *v35 = v34;
    *((double *)v35 + 1) = v27;
    *((void *)v35 + 2) = v29;
    *((void *)v35 + 3) = v31;
    *((void *)v35 + 4) = v33;
    v35[40] = 0;
    sub_10000950C((uint64_t)v8, &qword_100385708);
    sub_10000D544((uint64_t)v11, (uint64_t)v13, &qword_100385710);
    sub_10000D2A0((uint64_t)v13, (uint64_t)v11, &qword_100385710);
    uint64_t v36 = v41;
    *(void *)a3 = v22;
    *(void *)(a3 + 8) = v36;
    *(void *)(a3 + 16) = KeyPath;
    *(unsigned char *)(a3 + 24) = 0;
    unint64_t v37 = v43;
    *(void *)(a3 + 32) = v44;
    *(void *)(a3 + 40) = v37;
    *(void *)(a3 + 48) = v42;
    *(void *)(a3 + 56) = v20;
    uint64_t v38 = sub_100004010(&qword_100385720);
    sub_10000D2A0((uint64_t)v11, a3 + *(int *)(v38 + 48), &qword_100385710);
    swift_retain();
    sub_10004C6D4(KeyPath, 0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000950C((uint64_t)v13, &qword_100385710);
    sub_10000950C((uint64_t)v11, &qword_100385710);
    swift_release();
    sub_10004C738(KeyPath, 0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000BB698((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BA1F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v3 = type metadata accessor for AccessibilityTraits();
  uint64_t v73 = *(void *)(v3 - 8);
  uint64_t v74 = v3;
  __chkstk_darwin(v3);
  id v72 = &v67[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_100004010(&qword_100381938);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  long long v76 = &v67[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  id v71 = &v67[-v9];
  __chkstk_darwin(v8);
  uint64_t v79 = &v67[-v10];
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.title.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v69 = Text.font(_:)();
  uint64_t v70 = v16;
  uint64_t v18 = v17;
  int v68 = v19;
  swift_release();
  sub_100033364(v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v20 = *a1;
  if (*a1)
  {
    id v21 = *(id *)(v20 + 112);
    char v22 = static UIContentSizeCategory.>= infix(_:_:)();

    BOOL v23 = (v22 & 1) == 0;
    uint64_t KeyPath = swift_getKeyPath();
    id v25 = *(id *)(v20 + 112);
    static Alignment.center.getter();
    UIContentSizeCategory v77 = UIContentSizeCategoryAccessibilityExtraLarge;
    char v26 = static UIContentSizeCategory.>= infix(_:_:)();
    uint64_t v78 = v20;
    if (v26 & 1) != 0 && (static Alignment.center.getter(), (static Alignment.== infix(_:_:)()))
    {
      uint64_t v27 = v18;
      static Alignment.leading.getter();
    }
    else
    {
      uint64_t v27 = v18;
    }

    uint64_t v28 = v69;
    uint64_t v115 = v69;
    uint64_t v116 = v27;
    char v29 = v68 & 1;
    char v117 = v68 & 1;
    uint64_t v118 = v70;
    uint64_t v119 = KeyPath;
    BOOL v120 = v23;
    __int16 v121 = 256;
    sub_100166194(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v106, 0.0, 1, 0.0, 1);
    sub_100033364(v28, v27, v29);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v30 = v78;
    id v31 = *(id *)(v78 + 112);
    LOBYTE(v28) = static UIContentSizeCategory.>= infix(_:_:)();

    if (v28) {
      double v32 = 1.0;
    }
    else {
      double v32 = 0.5;
    }
    uint64_t v33 = swift_getKeyPath();
    char v34 = static Edge.Set.top.getter();
    char v104 = 1;
    char v35 = static Edge.Set.bottom.getter();
    char v105 = 1;
    v103[6] = v106[6];
    v103[7] = v106[7];
    v103[8] = v106[8];
    v103[9] = v106[9];
    v103[2] = v106[2];
    v103[3] = v106[3];
    v103[4] = v106[4];
    v103[5] = v106[5];
    v103[0] = v106[0];
    v103[1] = v106[1];
    *(void *)&v103[10] = v33;
    *((double *)&v103[10] + 1) = v32;
    LOBYTE(v103[11]) = v34;
    *(_OWORD *)((char *)&v103[11] + 8) = 0u;
    *(_OWORD *)((char *)&v103[12] + 8) = 0u;
    BYTE8(v103[13]) = v104;
    LOBYTE(v103[14]) = v35;
    *(_OWORD *)((char *)&v103[14] + 8) = 0u;
    *(_OWORD *)((char *)&v103[15] + 8) = 0u;
    BYTE8(v103[16]) = 1;
    uint64_t v36 = v72;
    static AccessibilityTraits.isHeader.getter();
    sub_100004010(&qword_100381940);
    sub_10004F6C4(&qword_100381948, &qword_100381940, (void (*)(void))sub_10004F694);
    uint64_t v37 = (uint64_t)v71;
    View.accessibility(addTraits:)();
    (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v36, v74);
    memcpy(v107, v103, 0x109uLL);
    sub_100043A24((uint64_t)v107);
    sub_10000D544(v37, (uint64_t)v79, &qword_100381938);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v73 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v74 = v38;
    uint64_t v40 = v39;
    LODWORD(v72) = v41;
    id v42 = *(id *)(v30 + 112);
    char v43 = static UIContentSizeCategory.>= infix(_:_:)();

    uint64_t v44 = swift_getKeyPath();
    id v45 = *(id *)(v30 + 112);
    static Alignment.center.getter();
    if ((static UIContentSizeCategory.>= infix(_:_:)() & 1) != 0
      && (static Alignment.center.getter(), (static Alignment.== infix(_:_:)() & 1) != 0))
    {
      uint64_t v46 = v40;
      static Alignment.leading.getter();
    }
    else
    {
      uint64_t v46 = v40;
    }

    char v47 = v72 & 1;
    uint64_t v48 = v73;
    uint64_t v108 = v73;
    uint64_t v109 = v46;
    char v110 = v72 & 1;
    uint64_t v111 = v74;
    uint64_t v112 = v44;
    BOOL v113 = (v43 & 1) == 0;
    __int16 v114 = 256;
    sub_100166194(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v93, 0.0, 1, 0.0, 1);
    sub_100033364(v48, v46, v47);
    swift_release();
    swift_bridgeObjectRelease();
    id v49 = *(id *)(v78 + 112);
    LOBYTE(v48) = static UIContentSizeCategory.>= infix(_:_:)();

    if (v48) {
      double v50 = 1.0;
    }
    else {
      double v50 = 0.5;
    }
    uint64_t v51 = swift_getKeyPath();
    char v52 = static Edge.Set.top.getter();
    char v80 = 1;
    uint64_t v53 = v79;
    uint64_t v54 = v76;
    sub_10000D2A0((uint64_t)v79, (uint64_t)v76, &qword_100381938);
    char v55 = v80;
    uint64_t v56 = v75;
    sub_10000D2A0((uint64_t)v54, v75, &qword_100381938);
    uint64_t v57 = (_OWORD *)(v56 + *(int *)(sub_100004010(&qword_100385728) + 48));
    long long v87 = v99;
    long long v88 = v100;
    long long v89 = v101;
    long long v90 = v102;
    long long v85 = v97;
    long long v86 = v98;
    long long v83 = v95;
    long long v58 = v95;
    long long v84 = v96;
    long long v81 = v93;
    long long v82 = v94;
    *(void *)&long long v91 = v51;
    *((double *)&v91 + 1) = v50;
    LOBYTE(v92[0]) = v52;
    long long v59 = v100;
    v57[6] = v99;
    v57[7] = v59;
    long long v60 = v90;
    v57[8] = v89;
    v57[9] = v60;
    long long v61 = v84;
    long long v62 = v85;
    long long v63 = v86;
    v57[2] = v58;
    v57[3] = v61;
    *(_OWORD *)((char *)v92 + 8) = 0u;
    *(_OWORD *)((char *)&v92[1] + 8) = 0u;
    BYTE8(v92[2]) = v55;
    v57[4] = v62;
    v57[5] = v63;
    long long v64 = v82;
    *uint64_t v57 = v81;
    v57[1] = v64;
    long long v65 = v92[0];
    v57[10] = v91;
    v57[11] = v65;
    v57[12] = v92[1];
    *(_OWORD *)((char *)v57 + 201) = *(_OWORD *)((char *)&v92[1] + 9);
    sub_1000439C8((uint64_t)&v81);
    sub_10000950C((uint64_t)v53, &qword_100381938);
    v103[6] = v99;
    v103[7] = v100;
    v103[8] = v101;
    v103[9] = v102;
    v103[2] = v95;
    v103[3] = v96;
    v103[4] = v97;
    v103[5] = v98;
    v103[0] = v93;
    v103[1] = v94;
    *(void *)&v103[10] = v51;
    *((double *)&v103[10] + 1) = v50;
    LOBYTE(v103[11]) = v52;
    *(_OWORD *)((char *)&v103[11] + 8) = 0u;
    *(_OWORD *)((char *)&v103[12] + 8) = 0u;
    BYTE8(v103[13]) = v55;
    sub_100043A24((uint64_t)v103);
    return sub_10000950C((uint64_t)v54, &qword_100381938);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_1000BB698((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BAA80@<X0>(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = [self mainBundle];
  v48._uint64_t object = (void *)0x80000001002C8F50;
  v7._uint64_t countAndFlagsBits = 1954047310;
  v7._uint64_t object = (void *)0xE400000000000000;
  v8._uint64_t countAndFlagsBits = 0;
  v8._uint64_t object = (void *)0xE000000000000000;
  v48._uint64_t countAndFlagsBits = 0xD000000000000050;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v48);

  long long v43 = *a1;
  uint64_t v10 = *((void *)a1 + 2);
  char v42 = *((unsigned char *)a1 + 24);
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v40 = *((void *)a1 + 4);
  uint64_t v41 = v10;
  uint64_t v39 = v11;
  uint64_t v12 = swift_allocObject();
  long long v13 = a1[1];
  *(_OWORD *)(v12 + 16) = *a1;
  *(_OWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 48) = a1[2];
  *(void *)(v12 + 64) = *((void *)a1 + 6);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = swift_getKeyPath();
  char v47 = 1;
  sub_10004ED30((uint64_t)&v43);
  sub_10004F4AC((uint64_t)&v41);
  sub_10004ED30((uint64_t)&v40);
  swift_retain();
  sub_10003E68C((uint64_t)&v39);
  State.init(wrappedValue:)();
  char v47 = 0;
  State.init(wrappedValue:)();
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  sub_100008F88(a2, v14);
  double v16 = (*(double (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  char v34 = static Edge.Set.all.getter();
  char v46 = 0;
  char v45 = 0;
  char v44 = 0;
  char v33 = static Edge.Set.top.getter();
  char v23 = v46;
  LOBYTE(v14) = v45;
  LOBYTE(v15) = v44;
  char v47 = 1;
  char v24 = static Edge.Set.bottom.getter();
  uint64_t v25 = a2[3];
  uint64_t v26 = a2[4];
  sub_100008F88(a2, v25);
  (*(void (**)(uint64_t, uint64_t))(v26 + 112))(v25, v26);
  uint64_t result = EdgeInsets.init(_all:)();
  char v28 = v47;
  *(void *)a3 = KeyPath;
  *(unsigned char *)(a3 + 8) = v23;
  *(void *)(a3 + 16) = v35;
  *(unsigned char *)(a3 + 24) = v14;
  *(Swift::String *)(a3 + 32) = v9;
  *(void *)(a3 + 48) = sub_1000BB78C;
  *(void *)(a3 + 56) = v12;
  *(unsigned char *)(a3 + 64) = v37;
  *(void *)(a3 + 72) = v38;
  *(unsigned char *)(a3 + 80) = v37;
  *(void *)(a3 + 88) = v38;
  *(unsigned char *)(a3 + 96) = v34;
  *(double *)(a3 + 104) = v16;
  *(void *)(a3 + 112) = v18;
  *(void *)(a3 + 120) = v20;
  *(void *)(a3 + 128) = v22;
  *(unsigned char *)(a3 + 136) = v15;
  *(unsigned char *)(a3 + 144) = v33;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(unsigned char *)(a3 + 184) = v28;
  *(unsigned char *)(a3 + 192) = v24;
  *(void *)(a3 + 200) = v29;
  *(void *)(a3 + 208) = v30;
  *(void *)(a3 + 216) = v31;
  *(void *)(a3 + 224) = v32;
  *(unsigned char *)(a3 + 232) = 0;
  return result;
}

uint64_t sub_1000BAD84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v1;
  sub_10004ED30((uint64_t)&v8);
  swift_retain();
  sub_10003E68C((uint64_t)&v9);
  sub_100004010(&qword_100381910);
  Binding.wrappedValue.getter();
  uint64_t v2 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001B1A30(0, v7[2] + 1, 1, v7);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001B1A30((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 0xD000000000000024;
  v5[5] = 0x80000001002CD210;
  Binding.wrappedValue.setter();
  sub_10004F584((uint64_t)&v8);
  swift_release();
  return sub_10004F5B0((uint64_t)&v9);
}

uint64_t sub_1000BAEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v44 = sub_100004010(&qword_1003856D0);
  __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100004010(&qword_1003818D0);
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100004010(&qword_1003856D8);
  __chkstk_darwin(v36);
  Swift::String v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004010(&qword_1003818D8);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v11 - 8);
  uint64_t v39 = sub_100004010(&qword_1003856E0);
  uint64_t v12 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100004010(&qword_1003856E8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = *(void *)(a1 + 16);
  LOBYTE(a1) = *(unsigned char *)(a1 + 24);
  sub_10004C6D4(v21, a1);
  char v22 = sub_10004EE90(v21, a1);
  sub_10004C738(v21, a1);
  if (v22)
  {
    uint64_t v23 = sub_100004010(&qword_1003856F8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v18, 1, 1, v23);
    sub_100009B18(&qword_100385700, &qword_1003856F8);
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_10000950C((uint64_t)v18, &qword_1003856E8);
  }
  else
  {
    static ToolbarItemPlacement.navigationBarLeading.getter();
    type metadata accessor for TryOutBackButtonView();
    sub_1000BB698(&qword_1003856F0, (void (*)(uint64_t))type metadata accessor for TryOutBackButtonView);
    uint64_t v35 = v14;
    ToolbarItem<>.init(placement:content:)();
    static ToolbarItemPlacement.principal.getter();
    ToolbarItem<>.init(placement:content:)();
    char v24 = &v7[*(int *)(v36 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v7, v14, v39);
    uint64_t v26 = v37;
    uint64_t v25 = v38;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v24, v10, v38);
    TupleToolbarContent.init(_:)();
    uint64_t v27 = sub_100004010(&qword_1003856F8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v18, 0, 1, v27);
    sub_100009B18(&qword_100385700, &qword_1003856F8);
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_10000950C((uint64_t)v18, &qword_1003856E8);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v35, v39);
  }
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  sub_10004F324();
  char v28 = v40;
  ToolbarItem<>.init(placement:content:)();
  uint64_t v29 = v43 + *(int *)(v44 + 48);
  sub_10000D2A0((uint64_t)v20, v43, &qword_1003856E8);
  uint64_t v30 = v41;
  uint64_t v31 = v29;
  uint64_t v32 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v31, v28, v42);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v32);
  return sub_10000950C((uint64_t)v20, &qword_1003856E8);
}

uint64_t sub_1000BB540@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_100004010(&qword_1003819B0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000BB598@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_1000BB698((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1000BB62C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9660(a1);
}

uint64_t sub_1000BB674@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E08((uint64_t *)(v1 + 16), (void *)(v1 + 72), a1);
}

uint64_t sub_1000BB684@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAA80((long long *)(v1 + 16), (void *)(v1 + 72), a1);
}

uint64_t sub_1000BB690@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEC0(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000BB698(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BB6E8()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_1000BB70C()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_1000BB730()
{
  swift_release();
  sub_10004C738(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000BB78C()
{
  return sub_1000BAD84(v0 + 16);
}

unint64_t sub_1000BB7C0()
{
  unint64_t result = qword_100385730;
  if (!qword_100385730)
  {
    sub_1000094C4(&qword_1003856A8);
    sub_1000094C4(&qword_100385698);
    sub_1000094C4(&qword_1003856C0);
    sub_1000094C4(&qword_100385690);
    sub_1000094C4(&qword_1003856B0);
    sub_100009B18(&qword_1003856B8, &qword_1003856B0);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_1003856C8, &qword_1003856C0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385730);
  }
  return result;
}

uint64_t destroy for TryOutEndButton()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for TryOutEndButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TryOutEndButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TryOutEndButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutEndButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutEndButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutEndButton()
{
  return &type metadata for TryOutEndButton;
}

uint64_t sub_1000BBBCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BBBE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v74 = a1;
  uint64_t v3 = type metadata accessor for KeyboardShortcut();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  __chkstk_darwin(v3);
  id v71 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ButtonBorderShape();
  uint64_t v69 = *(void *)(v5 - 8);
  uint64_t v70 = v5;
  __chkstk_darwin(v5);
  int v68 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for BorderedProminentButtonStyle();
  uint64_t v64 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_100381AE0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100004010(&qword_100380E00);
  uint64_t v58 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100004010(&qword_100381AE8);
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100004010(&qword_100381AF0);
  __chkstk_darwin(v54);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100004010(&qword_100381AF8);
  uint64_t v66 = *(void *)(v18 - 8);
  uint64_t v67 = v18;
  __chkstk_darwin(v18);
  uint64_t v57 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100004010(&qword_100385738) - 8;
  __chkstk_darwin(v63);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100004010(&qword_100385740);
  __chkstk_darwin(v65);
  uint64_t v61 = (uint64_t)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [self mainBundle];
  v80._uint64_t object = (void *)0x80000001002C9590;
  v24._uint64_t countAndFlagsBits = 6581829;
  v24._uint64_t object = (void *)0xE300000000000000;
  v25._uint64_t countAndFlagsBits = 0;
  v25._uint64_t object = (void *)0xE000000000000000;
  v80._uint64_t countAndFlagsBits = 0xD000000000000082;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v80);

  Swift::String v77 = v26;
  uint64_t v27 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 1, 1, v27);
  uint64_t v28 = swift_allocObject();
  long long v29 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v28 + 32) = v29;
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v2 + 32);
  *(void *)(v28 + 64) = *(void *)(v2 + 48);
  sub_1000BCC88(v2);
  unint64_t v55 = sub_100033310();
  Button<>.init<A>(_:role:action:)();
  BorderedProminentButtonStyle.init()();
  sub_100009B18(&qword_100380E08, &qword_100380E00);
  sub_1000BCF88(&qword_100381030, (void (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle);
  uint64_t v30 = v56;
  uint64_t v31 = v62;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v31);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v30);
  uint64_t v32 = v68;
  static ButtonBorderShape.roundedRectangle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = (uint64_t *)&v17[*(int *)(v54 + 36)];
  uint64_t v35 = sub_100004010(&qword_100381038);
  uint64_t v37 = v69;
  uint64_t v36 = v70;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))((char *)v34 + *(int *)(v35 + 28), v32, v70);
  *uint64_t v34 = KeyPath;
  uint64_t v38 = v59;
  uint64_t v39 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v17, v15, v60);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v36);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v39);
  uint64_t v40 = v71;
  static KeyboardShortcut.defaultAction.getter();
  sub_100054C70();
  uint64_t v41 = v57;
  View.keyboardShortcut(_:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v73);
  sub_10000950C((uint64_t)v17, &qword_100381AF0);
  static Color.white.getter();
  uint64_t v42 = Color.opacity(_:)();
  swift_release();
  uint64_t v43 = swift_getKeyPath();
  uint64_t v45 = v66;
  uint64_t v44 = v67;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v21, v41, v67);
  char v46 = (uint64_t *)&v21[*(int *)(v63 + 44)];
  *char v46 = v43;
  v46[1] = v42;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v44);
  uint64_t v47 = *(void *)(v2 + 32);
  uint64_t v48 = swift_getKeyPath();
  uint64_t v49 = v61;
  sub_1000BCD48((uint64_t)v21, v61);
  double v50 = (uint64_t *)(v49 + *(int *)(v65 + 36));
  *double v50 = v48;
  v50[1] = v47;
  swift_retain();
  sub_10000950C((uint64_t)v21, &qword_100385738);
  uint64_t v78 = sub_1000BC564();
  uint64_t v79 = v51;
  long long v76 = *(_OWORD *)(v2 + 40);
  sub_100004010(&qword_10037ED78);
  State.projectedValue.getter();
  uint64_t v75 = v2;
  sub_100004010(&qword_100385748);
  sub_1000BCDB8();
  sub_100009B18(&qword_100385760, &qword_100385748);
  View.alert<A, B>(_:isPresented:actions:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000950C(v49, &qword_100385740);
}

uint64_t sub_1000BC564()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    unsigned int v2 = *(unsigned __int16 *)(v1 + 56);
    int v3 = *(_WORD *)(v1 + 56);
    id v4 = [self mainBundle];
    if (v3 || v2 >> 9 > 0x7E || (v2 & 0xC000) != 0x4000)
    {
      unint64_t v5 = 0xD000000000000031;
      unint64_t v12 = 0x80000001002CD460;
      uint64_t v6 = "Do you want to end the Satellite Connection demo?";
    }
    else
    {
      unint64_t v5 = 0xD00000000000002ALL;
      unint64_t v12 = 0x80000001002CD4C0;
      uint64_t v6 = "Do you want to end the Emergency SOS demo?";
    }
    unint64_t v7 = (unint64_t)(v6 - 32) | 0x8000000000000000;
    v8._uint64_t countAndFlagsBits = 0;
    v8._uint64_t object = (void *)0xE000000000000000;
    unint64_t v9 = 0xD000000000000023;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, (NSBundle)v4, v8, *(Swift::String *)(&v12 - 1))._countAndFlagsBits;

    return countAndFlagsBits;
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_1000BCF88(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BC6CC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_100004010(&qword_100381AE0);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004010(&qword_100380E00);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v37 = (char *)&v36 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = self;
  id v18 = [v17 mainBundle];
  v41._uint64_t object = (void *)0x80000001002CD3B0;
  v19._uint64_t countAndFlagsBits = 0x656D75736552;
  v19._uint64_t object = (void *)0xE600000000000000;
  v20._uint64_t countAndFlagsBits = 0;
  v20._uint64_t object = (void *)0xE000000000000000;
  v41._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v41);

  Swift::String v40 = v21;
  static ButtonRole.cancel.getter();
  uint64_t v22 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v5, 0, 1, v22);
  sub_100033310();
  Button<>.init<A>(_:role:action:)();
  id v23 = [v17 mainBundle];
  v42._uint64_t countAndFlagsBits = 0xD000000000000037;
  v42._uint64_t object = (void *)0x80000001002CD3E0;
  v24._uint64_t countAndFlagsBits = 0x6F6D654420646E45;
  v24._uint64_t object = (void *)0xE800000000000000;
  v25._uint64_t countAndFlagsBits = 0;
  v25._uint64_t object = (void *)0xE000000000000000;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v42);

  Swift::String v40 = v26;
  uint64_t v27 = swift_allocObject();
  long long v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v27 + 32) = v28;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v27 + 64) = *(void *)(a1 + 48);
  sub_1000BCC88(a1);
  Button<>.init<A>(_:action:)();
  long long v29 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v30 = v37;
  v29(v37, v16, v6);
  uint64_t v31 = v38;
  v29(v38, v14, v6);
  uint64_t v32 = v39;
  v29(v39, v30, v6);
  uint64_t v33 = sub_100004010(&qword_100385768);
  v29(&v32[*(int *)(v33 + 48)], v31, v6);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
  v34(v14, v6);
  v34(v16, v6);
  v34(v31, v6);
  return ((uint64_t (*)(char *, uint64_t))v34)(v30, v6);
}

uint64_t sub_1000BCB04(void *a1)
{
  if (*a1)
  {
    swift_retain();
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_1000BCF88((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BCBF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BBBE8(a1);
}

uint64_t sub_1000BCC38()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000BCC88(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BCCE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000BCD14()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_1000BCD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100385738);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BCDB0@<X0>(char *a1@<X8>)
{
  return sub_1000BC6CC(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000BCDB8()
{
  unint64_t result = qword_100385750;
  if (!qword_100385750)
  {
    sub_1000094C4(&qword_100385740);
    sub_1000BCE58();
    sub_100009B18(&qword_10037F1F0, &qword_10037F1F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385750);
  }
  return result;
}

unint64_t sub_1000BCE58()
{
  unint64_t result = qword_100385758;
  if (!qword_100385758)
  {
    sub_1000094C4(&qword_100385738);
    sub_1000094C4(&qword_100381AF0);
    sub_100054C70();
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_10037F1F0, &qword_10037F1F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385758);
  }
  return result;
}

uint64_t sub_1000BCF30()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000BCF80()
{
  return sub_1000BCB04((void *)(v0 + 16));
}

uint64_t sub_1000BCF88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BCFD0()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DismissEndSessionScreenButtonView()
{
  return &type metadata for DismissEndSessionScreenButtonView;
}

uint64_t sub_1000BD0A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BD0BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v63 = a3;
  uint64_t v62 = sub_100004010(&qword_10037F010);
  __chkstk_darwin(v62);
  long long v85 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for KeyboardShortcut();
  uint64_t v83 = *(void *)(v4 - 8);
  uint64_t v84 = v4;
  __chkstk_darwin(v4);
  long long v82 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ButtonBorderShape();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  __chkstk_darwin(v6);
  long long v76 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BorderedProminentButtonStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  uint64_t v73 = v9;
  __chkstk_darwin(v8);
  uint64_t v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_100381AE0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100004010(&qword_100380E00);
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100004010(&qword_100381AE8);
  uint64_t v70 = *(void *)(v16 - 8);
  uint64_t v71 = v16;
  __chkstk_darwin(v16);
  id v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100004010(&qword_100381AF0);
  __chkstk_darwin(v64);
  Swift::String v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100004010(&qword_100381AF8);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v79 = v21;
  __chkstk_darwin(v21);
  uint64_t v67 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100004010(&qword_100385770) - 8;
  __chkstk_darwin(v77);
  Swift::String v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100004010(&qword_100385778);
  __chkstk_darwin(v69 - 8);
  Swift::String v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = [self mainBundle];
  v87._uint64_t object = (void *)0x80000001002CD4F0;
  v28._uint64_t countAndFlagsBits = 1701736260;
  v28._uint64_t object = (void *)0xE400000000000000;
  v29._uint64_t countAndFlagsBits = 0;
  v29._uint64_t object = (void *)0xE000000000000000;
  v87._uint64_t countAndFlagsBits = 0xD00000000000009DLL;
  Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v87);

  Swift::String v86 = v30;
  uint64_t v31 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v13, 1, 1, v31);
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v75;
  *(void *)(v32 + 16) = v74;
  *(void *)(v32 + 24) = v33;
  sub_100033310();
  swift_retain();
  uint64_t v34 = (uint64_t)v26;
  Button<>.init<A>(_:role:action:)();
  uint64_t v35 = v65;
  BorderedProminentButtonStyle.init()();
  sub_100009B18(&qword_100380E08, &qword_100380E00);
  sub_1000BDD98(&qword_100381030, (void (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle);
  uint64_t v36 = v66;
  uint64_t v37 = v72;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v35, v37);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v15, v36);
  uint64_t v38 = v76;
  static ButtonBorderShape.roundedRectangle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  Swift::String v40 = (uint64_t *)&v20[*(int *)(v64 + 36)];
  uint64_t v41 = sub_100004010(&qword_100381038);
  uint64_t v43 = v80;
  uint64_t v42 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))((char *)v40 + *(int *)(v41 + 28), v38, v81);
  *Swift::String v40 = KeyPath;
  uint64_t v45 = v70;
  uint64_t v44 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v20, v18, v71);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v42);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v44);
  char v46 = v82;
  static KeyboardShortcut.defaultAction.getter();
  sub_100054C70();
  uint64_t v47 = v67;
  View.keyboardShortcut(_:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v46, v84);
  uint64_t v48 = (uint64_t)v20;
  uint64_t v49 = (uint64_t)v85;
  sub_10000950C(v48, &qword_100381AF0);
  id v50 = [self systemGray3Color];
  uint64_t v51 = Color.init(uiColor:)();
  uint64_t v52 = swift_getKeyPath();
  v86._uint64_t countAndFlagsBits = v51;
  swift_retain();
  uint64_t v53 = AnyShapeStyle.init<A>(_:)();
  uint64_t v55 = v78;
  uint64_t v54 = v79;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v24, v47, v79);
  swift_release();
  uint64_t v56 = (uint64_t *)&v24[*(int *)(v77 + 44)];
  *uint64_t v56 = v52;
  v56[1] = v53;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v54);
  uint64_t v57 = static Color.white.getter();
  sub_1000BDBBC((uint64_t)v24, v34);
  *(void *)(v34 + *(int *)(v69 + 36)) = v57;
  sub_10000950C((uint64_t)v24, &qword_100385770);
  uint64_t v58 = enum case for DynamicTypeSize.xxLarge(_:);
  uint64_t v59 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v49, v58, v59);
  sub_1000BDD98(&qword_10037F020, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_1000BDC24();
    sub_100009B18(&qword_10037F030, &qword_10037F010);
    View.dynamicTypeSize<A>(_:)();
    sub_10000950C(v49, &qword_10037F010);
    return sub_10000950C(v34, &qword_100385778);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BDA80(uint64_t a1)
{
  if (a1)
  {
    swift_retain();
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_1000BDD98((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BDB64@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD0BC(*v1, v1[1], a1);
}

uint64_t sub_1000BDB6C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BDBA4()
{
  return sub_1000BDA80(*(void *)(v0 + 16));
}

uint64_t sub_1000BDBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100385770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000BDC24()
{
  unint64_t result = qword_100385780;
  if (!qword_100385780)
  {
    sub_1000094C4(&qword_100385778);
    sub_1000BDCC4();
    sub_100009B18(&qword_1003831E8, &qword_1003831F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385780);
  }
  return result;
}

unint64_t sub_1000BDCC4()
{
  unint64_t result = qword_100385788;
  if (!qword_100385788)
  {
    sub_1000094C4(&qword_100385770);
    sub_1000094C4(&qword_100381AF0);
    sub_100054C70();
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_100380F50, &qword_100380F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385788);
  }
  return result;
}

uint64_t sub_1000BDD98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BDDE0()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for BuiltInEmergencyForkContentView()
{
  return &type metadata for BuiltInEmergencyForkContentView;
}

uint64_t sub_1000BDE94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BDEB0@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = (_OWORD *)v1;
  uint64_t v4 = *(void **)(v1 + 16);
  if (v4)
  {
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[10];
    sub_100008F88(v4 + 6, v5);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v19, v5, v6);
    uint64_t v7 = v20;
    uint64_t v8 = v21;
    sub_100008F88(v19, v20);
    double v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 232))(v7, v8);
    uint64_t v10 = static HorizontalAlignment.center.getter();
    sub_1000BE080(v2, (uint64_t)v16);
    *(_OWORD *)&v17[71] = v16[4];
    *(_OWORD *)&v17[87] = v16[5];
    *(_OWORD *)&v17[103] = v16[6];
    *(_OWORD *)&v17[119] = v16[7];
    *(_OWORD *)&v17[7] = v16[0];
    *(_OWORD *)&v17[23] = v16[1];
    *(_OWORD *)&v17[39] = v16[2];
    *(_OWORD *)&v17[55] = v16[3];
    *(double *)(a1 + 8) = v9;
    long long v11 = *(_OWORD *)&v17[64];
    *(_OWORD *)(a1 + 97) = *(_OWORD *)&v17[80];
    long long v12 = *(_OWORD *)&v17[112];
    *(_OWORD *)(a1 + 113) = *(_OWORD *)&v17[96];
    *(_OWORD *)(a1 + 129) = v12;
    long long v13 = *(_OWORD *)v17;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)&v17[16];
    long long v14 = *(_OWORD *)&v17[48];
    *(_OWORD *)(a1 + 49) = *(_OWORD *)&v17[32];
    *(_OWORD *)(a1 + 65) = v14;
    char v18 = 0;
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 144) = *(void *)&v17[127];
    *(_OWORD *)(a1 + 81) = v11;
    *(_OWORD *)(a1 + 17) = v13;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v19);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10004F378((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BE080@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = self;
  id v5 = [v4 mainBundle];
  v6._uint64_t countAndFlagsBits = 0xD000000000000013;
  v30._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
  v30._uint64_t object = (void *)0x80000001002C9840;
  v6._uint64_t object = (void *)0x80000001002C7F70;
  v7.value._uint64_t countAndFlagsBits = 0xD000000000000012;
  v7.value._uint64_t object = (void *)0x80000001002C7760;
  v8._uint64_t countAndFlagsBits = 0;
  v8._uint64_t object = (void *)0xE000000000000000;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v30);

  type metadata accessor for OptionPresentation();
  uint64_t v10 = (Swift::String *)swift_allocObject();
  v10[1] = v9;
  v10[3]._uint64_t countAndFlagsBits = 0;
  v10[3]._uint64_t object = 0;
  v10[4]._uint64_t countAndFlagsBits = static Color.clear.getter();
  v10[2]._uint64_t countAndFlagsBits = 0;
  v10[2]._uint64_t object = 0;
  long long v11 = (_OWORD *)swift_allocObject();
  long long v12 = a1[3];
  v11[3] = a1[2];
  v11[4] = v12;
  v11[5] = a1[4];
  long long v13 = a1[1];
  v11[1] = *a1;
  v11[2] = v13;
  sub_1000594D0((uint64_t)a1);
  type metadata accessor for UIMetrics();
  sub_10004F378((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v14 = EnvironmentObject.init()();
  uint64_t v26 = v15;
  uint64_t v27 = v14;
  id v16 = [v4 mainBundle];
  v31._uint64_t countAndFlagsBits = 0xD000000000000044;
  v31._uint64_t object = (void *)0x80000001002C9890;
  v17._uint64_t countAndFlagsBits = 0x636E656772656D45;
  v17._uint64_t object = (void *)0xE900000000000079;
  v18.value._uint64_t countAndFlagsBits = 0xD000000000000012;
  v18.value._uint64_t object = (void *)0x80000001002C7760;
  v19._uint64_t countAndFlagsBits = 0;
  v19._uint64_t object = (void *)0xE000000000000000;
  Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v31);

  long long v28 = a1[4];
  sub_100004010(&qword_10037ED78);
  State.wrappedValue.getter();
  uint64_t v21 = (_OWORD *)swift_allocObject();
  long long v22 = a1[3];
  v21[3] = a1[2];
  v21[4] = v22;
  v21[5] = a1[4];
  long long v23 = a1[1];
  v21[1] = *a1;
  v21[2] = v23;
  sub_1000594D0((uint64_t)a1);
  uint64_t result = EnvironmentObject.init()();
  *(_DWORD *)(a2 + 105) = v28;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)((char *)&v28 + 3);
  *(void *)a2 = v27;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 40) = sub_100059548;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = result;
  *(void *)(a2 + 64) = v25;
  *(Swift::String *)(a2 + 72) = v20;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0xE000000000000000;
  *(unsigned char *)(a2 + 104) = v29;
  *(void *)(a2 + 112) = sub_1000BE5A0;
  *(void *)(a2 + 120) = v21;
  return result;
}

uint64_t sub_1000BE350()
{
  if (*(void *)v0)
  {
    swift_retain();
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    swift_release();
    sub_100004010(&qword_10037ED78);
    uint64_t result = State.wrappedValue.getter();
    if ((v5 & 1) == 0)
    {
      State.wrappedValue.setter();
      unsigned int v2 = (_OWORD *)swift_allocObject();
      long long v3 = v0[3];
      v2[3] = v0[2];
      v2[4] = v3;
      v2[5] = v0[4];
      long long v4 = v0[1];
      v2[1] = *v0;
      v2[2] = v4;
      swift_retain();
      sub_1000594D0((uint64_t)v0);
      PassthroughSubject.send(_:)();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_10004F378((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BE4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  Swift::String v6 = &type metadata for RecordedForkAnswer;
  LOWORD(v5) = 257;
  sub_1000CF5E8(v3, (uint64_t)&v5);
  sub_100059550((uint64_t)&v5);
  long long v5 = *(_OWORD *)(a2 + 64);
  sub_100004010(&qword_10037ED78);
  return State.wrappedValue.setter();
}

uint64_t sub_1000BE554@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BDEB0(a1);
}

uint64_t sub_1000BE5A0()
{
  return sub_1000BE350();
}

uint64_t sub_1000BE5C8(uint64_t a1)
{
  return sub_1000BE4DC(a1, v1 + 16);
}

unint64_t sub_1000BE5D4()
{
  unint64_t result = qword_100385790;
  if (!qword_100385790)
  {
    sub_1000094C4(&qword_100385798);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385790);
  }
  return result;
}

id sub_1000BE630()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  unsigned int v2 = *(uint8_t **)(v1 - 8);
  uint64_t v50 = v1;
  uint64_t v51 = v2;
  __chkstk_darwin(v1);
  uint64_t v49 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v47);
  uint64_t v48 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  char v46 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationAuthorizationChanged;
  sub_100004010(&qword_100385860);
  swift_allocObject();
  Swift::String v8 = v0;
  *(void *)&v0[v7] = PassthroughSubject.init()();
  uint64_t v9 = OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationReceived;
  sub_100004010(&qword_100393C30);
  swift_allocObject();
  *(void *)&v8[v9] = PassthroughSubject.init()();
  *(void *)&v8[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager] = 0;
  uint64_t v10 = &v8[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__lastLocationReceived];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  id v44 = self;
  id v11 = [v44 mainBundle];
  id v12 = [v11 bundleIdentifier];

  unint64_t v13 = 0x80000001002C5A40;
  if (v12)
  {
    uint64_t v14 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = (void *)0xD000000000000012;
    unint64_t v16 = 0x80000001002C5A40;
  }
  uint64_t v17 = sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  uint64_t v54 = v14;
  unint64_t v55 = v16;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = 0xD000000000000019;
  v18._uint64_t object = (void *)0x80000001002CD670;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_10007616C((unint64_t *)&unk_10037FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100004010((uint64_t *)&unk_10038D2B0);
  v43[0] = sub_100011C70((unint64_t *)&unk_10037FF70, (uint64_t *)&unk_10038D2B0);
  v43[1] = v20;
  v43[2] = v19;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v21 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  long long v22 = (void (*)(char *, uint64_t, uint64_t))*((void *)v51 + 13);
  v51 += 104;
  v22(v49, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v50);
  uint64_t v45 = v17;
  *(void *)&v8[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__managerQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v23 = [v44 mainBundle];
  id v24 = [v23 bundleIdentifier];

  if (v24)
  {
    uint64_t v25 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v26;
  }
  else
  {
    uint64_t v25 = (void *)0xD000000000000012;
  }
  uint64_t v54 = v25;
  unint64_t v55 = v13;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v27._uint64_t object = (void *)0x80000001002CD690;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v22(v49, v21, v50);
  *(void *)&v8[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  long long v28 = (objc_class *)type metadata accessor for GeoLocationSource();
  v53.receiver = v8;
  v53.super_class = v28;
  [super init];
  uint64_t v30 = qword_10037DD80;
  id v31 = v29;
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10000FD84(v32, (uint64_t)qword_1003A9958);
  id v33 = v31;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136446210;
    uint64_t v51 = v36 + 4;
    id v37 = v33;
    id v38 = [v37 description];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v52 = sub_1001B3178(v39, v41, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "init: %{public}s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return v33;
}

id sub_1000BECD8()
{
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000FD84(v1, (uint64_t)qword_1003A9958);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    id v6 = v2;
    id v7 = [v6 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    sub_1001B3178(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v11 = (objc_class *)type metadata accessor for GeoLocationSource();
  v14.receiver = v2;
  v14.super_class = v11;
  [super dealloc];
}

uint64_t type metadata accessor for GeoLocationSource()
{
  return self;
}

uint64_t sub_1000BEF94()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (void *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *id v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  char v13 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    v20[1] = *(void *)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__managerQueue);
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v16 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    aBlock[4] = sub_1000C0E18;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100207A1C;
    aBlock[3] = &unk_1003553B8;
    Swift::String v18 = _Block_copy(aBlock);
    swift_retain();
    id v19 = v16;
    static DispatchQoS.unspecified.getter();
    long long v22 = &_swiftEmptyArrayStorage;
    sub_10007616C((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000BF378(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    id v5 = objc_allocWithZone((Class)CLLocationManager);
    id v6 = a2;
    uint64_t v7 = v4;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v5 initWithEffectiveBundlePath:v8 delegate:v7 onQueue:v6];

    if (v9)
    {
      [v9 setDesiredAccuracy:kCLLocationAccuracyThreeKilometers];
      uint64_t v10 = *(Class *)((char *)&v7->isa + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager);
      *(Class *)((char *)&v7->isa + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager) = (Class)v9;
      uint64_t v11 = v9;

      if (qword_10037DDE0 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10000FD84(v12, (uint64_t)qword_1003A9A78);
      char v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "CLLocationManager instance created", v15, 2u);
        swift_slowDealloc();

LABEL_14:
        return;
      }
    }
    else
    {
      if (qword_10037DDE0 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10000FD84(v16, (uint64_t)qword_1003A9A78);
      char v13 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v17))
      {
        Swift::String v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v17, "Failed to create CLLocationManager instance", v18, 2u);
        swift_slowDealloc();
        uint64_t v11 = v7;
        goto LABEL_14;
      }
      uint64_t v11 = v13;
    }
    char v13 = v7;
    goto LABEL_14;
  }
}

uint64_t sub_1000BF608()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v18[0] - 8);
  __chkstk_darwin(v18[0]);
  NSString v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *uint64_t v12 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  char v13 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v1;
    aBlock[4] = sub_1000C0DC0;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100207A1C;
    aBlock[3] = &unk_100355368;
    uint64_t v16 = _Block_copy(aBlock);
    id v17 = v1;
    static DispatchQoS.unspecified.getter();
    v18[1] = _swiftEmptyArrayStorage;
    sub_10007616C((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, void))(v6 + 8))(v8, v18[0]);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BF9A4()
{
  return sub_1000BF9F4("startUpdatingLocation", (uint64_t)sub_1000C0D64, (uint64_t)&unk_100355318);
}

uint64_t sub_1000BF9CC()
{
  return sub_1000BF9F4("stopUpdatingLocation", (uint64_t)sub_1000C0D40, (uint64_t)&unk_1003552F0);
}

uint64_t sub_1000BF9F4(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DDE0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000FD84(v12, (uint64_t)qword_1003A9A78);
  char v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a1, v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a2;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = a3;
  id v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  long long v22 = &_swiftEmptyArrayStorage;
  sub_10007616C((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v20);
  swift_release();
  return swift_release();
}

void sub_1000BFD6C(uint64_t a1, SEL *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    id v5 = *(id *)(Strong + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager);

    [v5 *a2];
  }
}

uint64_t sub_1000BFDEC()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();

    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000BFF00(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7);
  os_log_type_t v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char **)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = v1;
  char v13 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    if (qword_10037DDE0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  id v33 = v6;
  uint64_t v16 = type metadata accessor for Logger();
  sub_10000FD84(v16, (uint64_t)qword_1003A9A78);
  id v17 = a1;
  Swift::String v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  p_base_prots = &SessionEnvironmentFactory.base_prots;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    LODWORD(v38) = [v17 authorizationStatus];
    type metadata accessor for CLAuthorizationStatus(0);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v38 = sub_1001B3178(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    p_base_prots = (__objc2_prot_list **)(&SessionEnvironmentFactory + 40);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Location authorization received - %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unsigned int v24 = [v17 p_base_prots[425]];
  unsigned int v25 = (v24 < 5) & (0x19u >> v24);
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  unint64_t v26 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v27;
  *(unsigned char *)(v28 + 24) = v25;
  aBlock[4] = (uint64_t)sub_1000C05FC;
  aBlock[5] = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100207A1C;
  aBlock[3] = (uint64_t)&unk_100355278;
  id v29 = _Block_copy(aBlock);
  swift_release();
  uint64_t v30 = v35;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10007616C((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  id v31 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v30, v37);
}

uint64_t sub_1000C0488()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();

    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLocation2D()
{
  return &type metadata for GeoLocation2D;
}

uint64_t sub_1000C058C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C05C4()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000C05FC()
{
  return sub_1000C0488();
}

uint64_t sub_1000C0608(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C0618()
{
  return swift_release();
}

void sub_1000C0620(unint64_t a1)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char **)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = v1;
  id v14 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue);
  *char v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    if (!(a1 >> 62))
    {
      uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v17) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  if (_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_4:
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_24:
        swift_once();
LABEL_11:
        uint64_t v39 = v7;
        uint64_t v23 = type metadata accessor for Logger();
        sub_10000FD84(v23, (uint64_t)qword_1003A9A78);
        unsigned int v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          unint64_t v26 = (uint8_t *)swift_slowAlloc();
          uint64_t v44 = swift_slowAlloc();
          *(_DWORD *)unint64_t v26 = 136315138;
          double aBlock = v2;
          uint64_t v46 = *(void *)&v3;
          type metadata accessor for CLLocationCoordinate2D(0);
          uint64_t v27 = String.init<A>(describing:)();
          double aBlock = COERCE_DOUBLE(sub_1001B3178(v27, v28, &v44));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Location update received - %s", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        sub_10001E6FC(0, (unint64_t *)&qword_100387440);
        id v29 = (void *)static OS_dispatch_queue.main.getter();
        uint64_t v30 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = v30;
        *(double *)(v31 + 24) = v2;
        *(double *)(v31 + 32) = v3;
        uint64_t v49 = sub_1000C0D34;
        uint64_t v50 = v31;
        double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        uint64_t v46 = 1107296256;
        uint64_t v47 = sub_100207A1C;
        uint64_t v48 = &unk_1003552C8;
        uint64_t v32 = _Block_copy(&aBlock);
        swift_release();
        id v33 = v41;
        static DispatchQoS.unspecified.getter();
        double aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        sub_10007616C((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100004010((uint64_t *)&unk_10037FF80);
        sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
        uint64_t v34 = v39;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v32);

        (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v5);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v8);
        return;
      }
      id v18 = *(id *)(a1 + 32);
    }
    os_log_type_t v19 = v18;
    swift_bridgeObjectRelease();
    [v19 coordinate];
    double v2 = v20;
    double v3 = v21;

    uint64_t v22 = v43 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__lastLocationReceived;
    if ((*(unsigned char *)(v43 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__lastLocationReceived + 16) & 1) == 0
      && *(double *)v22 == v2
      && *(double *)(v22 + 8) == v3)
    {
      return;
    }
    *(double *)uint64_t v22 = v2;
    *(double *)(v22 + 8) = v3;
    *(unsigned char *)(v22 + 16) = 0;
    if (qword_10037DDE0 == -1) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  if (qword_10037DDE0 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_10000FD84(v35, (uint64_t)qword_1003A9A78);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Empty location update received", v38, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000C0CFC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C0D34()
{
  return sub_1000BFDEC();
}

void sub_1000C0D40()
{
  sub_1000BFD6C(v0, (SEL *)&selRef_stopUpdatingLocation);
}

void sub_1000C0D64()
{
  sub_1000BFD6C(v0, (SEL *)&selRef_startUpdatingLocation);
}

uint64_t sub_1000C0D88()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000C0DC0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  double v2 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager);
  *(void *)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager) = 0;
}

uint64_t sub_1000C0DD8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000C0E18()
{
  sub_1000BF378(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for OptionSelected()
{
  return self;
}

uint64_t sub_1000C0E6C()
{
  uint64_t v0 = self;
  id v1 = [v0 mainBundle];
  v21._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v2._uint64_t countAndFlagsBits = 0xD000000000000038;
  v21._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CDC30;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v21);

  id v6 = [v0 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v22._uint64_t countAndFlagsBits = 0xD00000000000005ALL;
  v22._uint64_t object = (void *)0x80000001002CDCA0;
  v7._uint64_t object = (void *)0x80000001002CDC70;
  v8.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v8.value._uint64_t object = (void *)0x80000001002CD700;
  v9._uint64_t countAndFlagsBits = 0;
  v9._uint64_t object = (void *)0xE000000000000000;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v22);

  v16[0] = v5;
  v16[1] = v10;
  uint64_t v17 = _swiftEmptyArrayStorage;
  type metadata accessor for BuiltInCondition();
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 4;
  type metadata accessor for NotCondition();
  uint64_t v12 = swift_allocObject();
  sub_100004010(&qword_1003913B0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1002B3AF0;
  *(void *)(v13 + 32) = v11;
  uint64_t v15 = v13;
  specialized Array._endMutation()();
  *(unsigned char *)(v12 + 16) = 2;
  *(void *)(v12 + 24) = v15;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x434E454752454D45, 0xEE004B524F465F59, 3, v16, (unint64_t)_swiftEmptyArrayStorage, v12, (uint64_t)&off_10034A268, 3);
}

uint64_t sub_1000C1098()
{
  id v0 = [self mainBundle];
  v1._uint64_t countAndFlagsBits = 0xD000000000000023;
  v14._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v14._uint64_t object = (void *)0x80000001002CD740;
  v1._uint64_t object = (void *)0x80000001002CDC00;
  v2.value._uint64_t object = (void *)0x80000001002CD700;
  v2.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3._uint64_t countAndFlagsBits = 0;
  v3._uint64_t object = (void *)0xE000000000000000;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v14);

  Swift::String v7 = v4;
  uint64_t v8 = 0;
  unint64_t v9 = 0xE000000000000000;
  Swift::String v10 = _swiftEmptyArrayStorage;
  type metadata accessor for BuiltInCondition();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 7;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x505F5443454C4553, 0xEF52454449564F52, 3, &v7, (unint64_t)_swiftEmptyArrayStorage, v5, (uint64_t)&off_10034A290, 4);
}

uint64_t sub_1000C11EC()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD000000000000021;
  v64._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v64._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CDAE0;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v64);

  Swift::String v58 = v5;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  uint64_t v61 = &off_10034A2B8;
  long long v62 = xmmword_1002B8130;
  unint64_t v63 = 0xEA00000000005245;
  sub_100004010(&qword_1003913B0);
  unint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002B8140;
  Swift::String v7 = v0;
  id v8 = [v0 mainBundle];
  v65._uint64_t object = (void *)0x80000001002CDB10;
  v9._uint64_t countAndFlagsBits = 0x4F2064656B636F4CLL;
  v9._uint64_t object = (void *)0xEA00000000007475;
  v10.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v10.value._uint64_t object = (void *)0x80000001002CD700;
  v11._uint64_t countAndFlagsBits = 0;
  v11._uint64_t object = (void *)0xE000000000000000;
  v65._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v65);

  uint64_t v13 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  Swift::String v14 = (Swift::String *)swift_allocObject();
  v14[1] = v12;
  v14[3]._uint64_t countAndFlagsBits = 0;
  v14[3]._uint64_t object = 0;
  v14[4]._uint64_t countAndFlagsBits = v13;
  type metadata accessor for Option();
  v14[2]._uint64_t countAndFlagsBits = 0;
  v14[2]._uint64_t object = 0;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0x4B434C5F45505954;
  *(void *)(v15 + 24) = 0xE900000000000044;
  *(void *)(v15 + 32) = v14;
  *(unsigned char *)(v15 + 40) = 0;
  *(void *)(v15 + 48) = 40;
  *(void *)(v6 + 32) = v15;
  id v16 = [v7 mainBundle];
  v17._uint64_t countAndFlagsBits = 0xD000000000000011;
  v66._uint64_t object = (void *)0x80000001002CDB10;
  v17._uint64_t object = (void *)0x80000001002CDB50;
  v18.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v18.value._uint64_t object = (void *)0x80000001002CD700;
  v19._uint64_t countAndFlagsBits = 0;
  v19._uint64_t object = (void *)0xE000000000000000;
  v66._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v66);

  uint64_t v21 = static Color.clear.getter();
  Swift::String v22 = (Swift::String *)swift_allocObject();
  v22[1] = v20;
  v22[3]._uint64_t countAndFlagsBits = 0;
  v22[3]._uint64_t object = 0;
  v22[4]._uint64_t countAndFlagsBits = v21;
  v22[2]._uint64_t countAndFlagsBits = 0;
  v22[2]._uint64_t object = 0;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = 0x4555465F45505954;
  *(void *)(v23 + 24) = 0xE90000000000004CLL;
  *(void *)(v23 + 32) = v22;
  *(unsigned char *)(v23 + 40) = 0;
  *(void *)(v23 + 48) = 40;
  *(void *)(v6 + 40) = v23;
  id v24 = [v7 mainBundle];
  v25._uint64_t object = (void *)0xE900000000000065;
  v67._uint64_t object = (void *)0x80000001002CDB10;
  v25._uint64_t countAndFlagsBits = 0x7269542074616C46;
  v26.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v26.value._uint64_t object = (void *)0x80000001002CD700;
  v27._uint64_t countAndFlagsBits = 0;
  v27._uint64_t object = (void *)0xE000000000000000;
  v67._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, (NSBundle)v24, v27, v67);

  uint64_t v29 = static Color.clear.getter();
  uint64_t v30 = (Swift::String *)swift_allocObject();
  v30[1] = v28;
  v30[3]._uint64_t countAndFlagsBits = 0;
  v30[3]._uint64_t object = 0;
  v30[4]._uint64_t countAndFlagsBits = v29;
  v30[2]._uint64_t countAndFlagsBits = 0;
  v30[2]._uint64_t object = 0;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0x414C465F45505954;
  *(void *)(v31 + 24) = 0xE900000000000054;
  *(void *)(v31 + 32) = v30;
  *(unsigned char *)(v31 + 40) = 0;
  *(void *)(v31 + 48) = 40;
  *(void *)(v6 + 48) = v31;
  id v32 = [v7 mainBundle];
  v33._uint64_t countAndFlagsBits = 0xD000000000000016;
  v68._uint64_t object = (void *)0x80000001002CDB10;
  v33._uint64_t object = (void *)0x80000001002CDB70;
  v34.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v34.value._uint64_t object = (void *)0x80000001002CD700;
  v35._uint64_t countAndFlagsBits = 0;
  v35._uint64_t object = (void *)0xE000000000000000;
  v68._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  Swift::String v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v68);

  uint64_t v37 = static Color.clear.getter();
  uint64_t v38 = (Swift::String *)swift_allocObject();
  v38[1] = v36;
  v38[3]._uint64_t countAndFlagsBits = 0;
  v38[3]._uint64_t object = 0;
  v38[4]._uint64_t countAndFlagsBits = v37;
  v38[2]._uint64_t countAndFlagsBits = 0;
  v38[2]._uint64_t object = 0;
  uint64_t v39 = swift_allocObject();
  strcpy((char *)(v39 + 16), "TYPE_WONTSTRT");
  *(_WORD *)(v39 + 30) = -4864;
  *(void *)(v39 + 32) = v38;
  *(unsigned char *)(v39 + 40) = 0;
  *(void *)(v39 + 48) = 40;
  *(void *)(v6 + 56) = v39;
  id v40 = [v7 mainBundle];
  v69._uint64_t object = (void *)0x80000001002CDB10;
  v41._uint64_t countAndFlagsBits = 0x20656C6369686556;
  v41._uint64_t object = (void *)0xED00006B63757453;
  v42.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v42.value._uint64_t object = (void *)0x80000001002CD700;
  v43._uint64_t countAndFlagsBits = 0;
  v43._uint64_t object = (void *)0xE000000000000000;
  v69._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  Swift::String v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, (NSBundle)v40, v43, v69);

  uint64_t v45 = static Color.clear.getter();
  uint64_t v46 = (Swift::String *)swift_allocObject();
  v46[1] = v44;
  v46[3]._uint64_t countAndFlagsBits = 0;
  v46[3]._uint64_t object = 0;
  v46[4]._uint64_t countAndFlagsBits = v45;
  v46[2]._uint64_t countAndFlagsBits = 0;
  v46[2]._uint64_t object = 0;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 0x5554535F45505954;
  *(void *)(v47 + 24) = 0xEA00000000004B43;
  *(void *)(v47 + 32) = v46;
  *(unsigned char *)(v47 + 40) = 0;
  *(void *)(v47 + 48) = 40;
  *(void *)(v6 + 64) = v47;
  id v48 = [v7 mainBundle];
  v70._uint64_t countAndFlagsBits = 0xD000000000000066;
  v70._uint64_t object = (void *)0x80000001002CDB90;
  v49._uint64_t countAndFlagsBits = 0x734920726568744FLL;
  v49._uint64_t object = (void *)0xEB00000000657573;
  v50.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v50.value._uint64_t object = (void *)0x80000001002CD700;
  v51._uint64_t countAndFlagsBits = 0;
  v51._uint64_t object = (void *)0xE000000000000000;
  Swift::String v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, (NSBundle)v48, v51, v70);

  uint64_t v53 = static Color.clear.getter();
  uint64_t v54 = (Swift::String *)swift_allocObject();
  v54[1] = v52;
  v54[3]._uint64_t countAndFlagsBits = 0;
  v54[3]._uint64_t object = 0;
  v54[4]._uint64_t countAndFlagsBits = v53;
  v54[2]._uint64_t countAndFlagsBits = 0;
  v54[2]._uint64_t object = 0;
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = 0x48544F5F45505954;
  *(void *)(v55 + 24) = 0xEA00000000005245;
  *(void *)(v55 + 32) = v54;
  *(unsigned char *)(v55 + 40) = 0;
  *(void *)(v55 + 48) = 40;
  *(void *)(v6 + 72) = v55;
  specialized Array._endMutation()();
  type metadata accessor for NoPrerequisites();
  uint64_t v56 = swift_allocObject();
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(1162893652, 0xE400000000000000, 0, &v58, v6, v56, (uint64_t)&off_10034A2E0, 7);
}

uint64_t sub_1000C1918()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD000000000000028;
  v33._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v33._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CDA70;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v33);

  Swift::String v26 = v5;
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_100004010(&qword_1003913B0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002B7BC0;
  id v7 = [v0 mainBundle];
  v34._uint64_t object = (void *)0x80000001002CDAA0;
  v8._uint64_t countAndFlagsBits = 0x492064656B636F4CLL;
  v8._uint64_t object = (void *)0xED0000656469736ELL;
  v9.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v9.value._uint64_t object = (void *)0x80000001002CD700;
  v10._uint64_t countAndFlagsBits = 0;
  v10._uint64_t object = (void *)0xE000000000000000;
  v34._uint64_t countAndFlagsBits = 0xD000000000000036;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v34);

  uint64_t v12 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  uint64_t v13 = (Swift::String *)swift_allocObject();
  v13[1] = v11;
  v13[3]._uint64_t countAndFlagsBits = 0;
  v13[3]._uint64_t object = 0;
  v13[4]._uint64_t countAndFlagsBits = v12;
  type metadata accessor for Option();
  v13[2]._uint64_t countAndFlagsBits = 0;
  v13[2]._uint64_t object = 0;
  uint64_t v14 = swift_allocObject();
  strcpy((char *)(v14 + 16), "LCKD_KEYS_VHCL");
  *(unsigned char *)(v14 + 31) = -18;
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 40;
  *(void *)(v6 + 32) = v14;
  id v15 = [v0 mainBundle];
  v35._uint64_t object = (void *)0x80000001002CDAA0;
  v16._uint64_t countAndFlagsBits = 0x72656877656D6F53;
  v16._uint64_t object = (void *)0xEE0065736C452065;
  v17.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v17.value._uint64_t object = (void *)0x80000001002CD700;
  v18._uint64_t countAndFlagsBits = 0;
  v18._uint64_t object = (void *)0xE000000000000000;
  v35._uint64_t countAndFlagsBits = 0xD000000000000036;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v35);

  uint64_t v20 = static Color.clear.getter();
  uint64_t v21 = (Swift::String *)swift_allocObject();
  v21[1] = v19;
  v21[3]._uint64_t countAndFlagsBits = 0;
  v21[3]._uint64_t object = 0;
  v21[4]._uint64_t countAndFlagsBits = v20;
  v21[2]._uint64_t countAndFlagsBits = 0;
  v21[2]._uint64_t object = 0;
  uint64_t v22 = swift_allocObject();
  strcpy((char *)(v22 + 16), "LCKD_KEYS_LOST");
  *(unsigned char *)(v22 + 31) = -18;
  *(void *)(v22 + 32) = v21;
  *(unsigned char *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = 40;
  *(void *)(v6 + 40) = v22;
  specialized Array._endMutation()();
  unint64_t v23 = v6;
  type metadata accessor for OptionSelected();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0x4B434C5F45505954;
  *(void *)(v24 + 24) = 0xE900000000000044;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x59454B5F444B434CLL, 0xE900000000000053, 0, &v26, v23, v24, (uint64_t)&off_10034A308, 7);
}

uint64_t sub_1000C1C98()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD000000000000027;
  v33._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v33._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CDA00;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v33);

  Swift::String v26 = v5;
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_100004010(&qword_1003913B0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002B7BC0;
  id v7 = [v0 mainBundle];
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v34._uint64_t object = (void *)0x80000001002CD900;
  v8._uint64_t object = (void *)0x80000001002CDA30;
  v9.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v9.value._uint64_t object = (void *)0x80000001002CD700;
  v10._uint64_t countAndFlagsBits = 0;
  v10._uint64_t object = (void *)0xE000000000000000;
  v34._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v34);

  uint64_t v12 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  uint64_t v13 = (Swift::String *)swift_allocObject();
  v13[1] = v11;
  v13[3]._uint64_t countAndFlagsBits = 0;
  v13[3]._uint64_t object = 0;
  v13[4]._uint64_t countAndFlagsBits = v12;
  type metadata accessor for Option();
  v13[2]._uint64_t countAndFlagsBits = 0;
  v13[2]._uint64_t object = 0;
  uint64_t v14 = swift_allocObject();
  strcpy((char *)(v14 + 16), "FLAT_SPARE_YES");
  *(unsigned char *)(v14 + 31) = -18;
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 40;
  *(void *)(v6 + 32) = v14;
  id v15 = [v0 mainBundle];
  v16._uint64_t countAndFlagsBits = 0xD000000000000014;
  v35._uint64_t object = (void *)0x80000001002CD900;
  v16._uint64_t object = (void *)0x80000001002CDA50;
  v17.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v17.value._uint64_t object = (void *)0x80000001002CD700;
  v18._uint64_t countAndFlagsBits = 0;
  v18._uint64_t object = (void *)0xE000000000000000;
  v35._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v35);

  uint64_t v20 = static Color.clear.getter();
  uint64_t v21 = (Swift::String *)swift_allocObject();
  v21[1] = v19;
  v21[3]._uint64_t countAndFlagsBits = 0;
  v21[3]._uint64_t object = 0;
  v21[4]._uint64_t countAndFlagsBits = v20;
  v21[2]._uint64_t countAndFlagsBits = 0;
  v21[2]._uint64_t object = 0;
  uint64_t v22 = swift_allocObject();
  strcpy((char *)(v22 + 16), "FLAT_SPARE_NO");
  *(_WORD *)(v22 + 30) = -4864;
  *(void *)(v22 + 32) = v21;
  *(unsigned char *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = 40;
  *(void *)(v6 + 40) = v22;
  specialized Array._endMutation()();
  unint64_t v23 = v6;
  type metadata accessor for OptionSelected();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0x414C465F45505954;
  *(void *)(v24 + 24) = 0xE900000000000054;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x4150535F54414C46, 0xEA00000000004552, 0, &v26, v23, v24, (uint64_t)&off_10034A330, 7);
}

uint64_t sub_1000C2014()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD000000000000028;
  v52._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v52._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CD980;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v52);

  Swift::String v45 = v5;
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  id v48 = _swiftEmptyArrayStorage;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_100004010(&qword_1003913B0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002B6800;
  id v7 = v0;
  id v8 = [v0 mainBundle];
  v53._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v53._uint64_t object = (void *)0x80000001002CD9B0;
  v9._uint64_t countAndFlagsBits = 0x656E696C6F736147;
  v9._uint64_t object = (void *)0xE800000000000000;
  v10.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v10.value._uint64_t object = (void *)0x80000001002CD700;
  v11._uint64_t countAndFlagsBits = 0;
  v11._uint64_t object = (void *)0xE000000000000000;
  Swift::String v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v53);

  uint64_t v13 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  uint64_t v14 = (Swift::String *)swift_allocObject();
  v14[1] = v12;
  v14[3]._uint64_t countAndFlagsBits = 0;
  v14[3]._uint64_t object = 0;
  v14[4]._uint64_t countAndFlagsBits = v13;
  type metadata accessor for Option();
  v14[2]._uint64_t countAndFlagsBits = 0;
  v14[2]._uint64_t object = 0;
  uint64_t v15 = swift_allocObject();
  strcpy((char *)(v15 + 16), "FUEL_TYPE_GAS");
  *(_WORD *)(v15 + 30) = -4864;
  *(void *)(v15 + 32) = v14;
  *(unsigned char *)(v15 + 40) = 0;
  *(void *)(v15 + 48) = 40;
  *(void *)(v6 + 32) = v15;
  Swift::String v16 = v7;
  id v17 = [v7 mainBundle];
  v54._uint64_t object = (void *)0x80000001002CD9B0;
  v18._uint64_t countAndFlagsBits = 0x6C6573656944;
  v18._uint64_t object = (void *)0xE600000000000000;
  v19.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v19.value._uint64_t object = (void *)0x80000001002CD700;
  v20._uint64_t countAndFlagsBits = 0;
  v20._uint64_t object = (void *)0xE000000000000000;
  v54._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v54);

  uint64_t v22 = static Color.clear.getter();
  unint64_t v23 = (Swift::String *)swift_allocObject();
  v23[1] = v21;
  v23[3]._uint64_t countAndFlagsBits = 0;
  v23[3]._uint64_t object = 0;
  v23[4]._uint64_t countAndFlagsBits = v22;
  v23[2]._uint64_t countAndFlagsBits = 0;
  v23[2]._uint64_t object = 0;
  uint64_t v24 = swift_allocObject();
  strcpy((char *)(v24 + 16), "FUEL_TYPE_DSL");
  *(_WORD *)(v24 + 30) = -4864;
  *(void *)(v24 + 32) = v23;
  *(unsigned char *)(v24 + 40) = 0;
  *(void *)(v24 + 48) = 40;
  *(void *)(v6 + 40) = v24;
  id v25 = [v7 mainBundle];
  v55._uint64_t object = (void *)0x80000001002CD9B0;
  v26._uint64_t countAndFlagsBits = 0x6369727463656C45;
  v26._uint64_t object = (void *)0xE800000000000000;
  v27.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v27.value._uint64_t object = (void *)0x80000001002CD700;
  v28._uint64_t countAndFlagsBits = 0;
  v28._uint64_t object = (void *)0xE000000000000000;
  v55._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v55);

  uint64_t v30 = static Color.clear.getter();
  uint64_t v31 = (Swift::String *)swift_allocObject();
  v31[1] = v29;
  v31[3]._uint64_t countAndFlagsBits = 0;
  v31[3]._uint64_t object = 0;
  v31[4]._uint64_t countAndFlagsBits = v30;
  v31[2]._uint64_t countAndFlagsBits = 0;
  v31[2]._uint64_t object = 0;
  uint64_t v32 = swift_allocObject();
  strcpy((char *)(v32 + 16), "FUEL_TYPE_EV");
  *(unsigned char *)(v32 + 29) = 0;
  *(_WORD *)(v32 + 30) = -5120;
  *(void *)(v32 + 32) = v31;
  *(unsigned char *)(v32 + 40) = 0;
  *(void *)(v32 + 48) = 40;
  unint64_t v33 = v6;
  *(void *)(v6 + 48) = v32;
  id v34 = [v16 mainBundle];
  v35._uint64_t countAndFlagsBits = 0xD000000000000011;
  v56._uint64_t object = (void *)0x80000001002CD9B0;
  v35._uint64_t object = (void *)0x80000001002CD9E0;
  v36.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v36.value._uint64_t object = (void *)0x80000001002CD700;
  v37._uint64_t countAndFlagsBits = 0;
  v37._uint64_t object = (void *)0xE000000000000000;
  v56._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v56);

  uint64_t v39 = static Color.clear.getter();
  id v40 = (Swift::String *)swift_allocObject();
  v40[1] = v38;
  v40[3]._uint64_t countAndFlagsBits = 0;
  v40[3]._uint64_t object = 0;
  v40[4]._uint64_t countAndFlagsBits = v39;
  v40[2]._uint64_t countAndFlagsBits = 0;
  v40[2]._uint64_t object = 0;
  uint64_t v41 = swift_allocObject();
  strcpy((char *)(v41 + 16), "FUEL_TYPE_OTHR");
  *(unsigned char *)(v41 + 31) = -18;
  *(void *)(v41 + 32) = v40;
  *(unsigned char *)(v41 + 40) = 0;
  *(void *)(v41 + 48) = 40;
  *(void *)(v33 + 56) = v41;
  specialized Array._endMutation()();
  unint64_t v42 = v33;
  type metadata accessor for OptionSelected();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 0x4555465F45505954;
  *(void *)(v43 + 24) = 0xE90000000000004CLL;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x5059545F4C455546, 0xE900000000000045, 0, &v45, v42, v43, (uint64_t)&off_10034A358, 7);
}

uint64_t sub_1000C2564()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD000000000000022;
  v33._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v33._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CD950;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v33);

  Swift::String v26 = v5;
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  Swift::String v29 = _swiftEmptyArrayStorage;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_100004010(&qword_1003913B0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002B7BC0;
  id v7 = [v0 mainBundle];
  v34._uint64_t object = (void *)0x80000001002CD900;
  v8._uint64_t countAndFlagsBits = 0x724420656C696857;
  v8._uint64_t object = (void *)0xED0000676E697669;
  v9.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v9.value._uint64_t object = (void *)0x80000001002CD700;
  v10._uint64_t countAndFlagsBits = 0;
  v10._uint64_t object = (void *)0xE000000000000000;
  v34._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v34);

  uint64_t v12 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  uint64_t v13 = (Swift::String *)swift_allocObject();
  v13[1] = v11;
  v13[3]._uint64_t countAndFlagsBits = 0;
  v13[3]._uint64_t object = 0;
  v13[4]._uint64_t countAndFlagsBits = v12;
  type metadata accessor for Option();
  v13[2]._uint64_t countAndFlagsBits = 0;
  v13[2]._uint64_t object = 0;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0xD000000000000010;
  *(void *)(v14 + 24) = 0x80000001002CD890;
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 40;
  *(void *)(v6 + 32) = v14;
  id v15 = [v0 mainBundle];
  v35._uint64_t object = (void *)0x80000001002CD900;
  v16._uint64_t countAndFlagsBits = 0x745320656C696857;
  v16._uint64_t object = (void *)0xED0000646570706FLL;
  v17.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v17.value._uint64_t object = (void *)0x80000001002CD700;
  v18._uint64_t countAndFlagsBits = 0;
  v18._uint64_t object = (void *)0xE000000000000000;
  v35._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v35);

  uint64_t v20 = static Color.clear.getter();
  Swift::String v21 = (Swift::String *)swift_allocObject();
  v21[1] = v19;
  v21[3]._uint64_t countAndFlagsBits = 0;
  v21[3]._uint64_t object = 0;
  v21[4]._uint64_t countAndFlagsBits = v20;
  v21[2]._uint64_t countAndFlagsBits = 0;
  v21[2]._uint64_t object = 0;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0x54525453544E4F57;
  *(void *)(v22 + 24) = 0xEF4F4E5F5652445FLL;
  *(void *)(v22 + 32) = v21;
  *(unsigned char *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = 40;
  *(void *)(v6 + 40) = v22;
  specialized Array._endMutation()();
  unint64_t v23 = v6;
  type metadata accessor for OptionSelected();
  uint64_t v24 = swift_allocObject();
  strcpy((char *)(v24 + 16), "TYPE_WONTSTRT");
  *(_WORD *)(v24 + 30) = -4864;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x54525453544E4F57, 0xEC0000005652445FLL, 0, &v26, v23, v24, (uint64_t)&off_10034A380, 7);
}

uint64_t sub_1000C2908()
{
  id v33 = self;
  id v0 = [v33 mainBundle];
  v1._uint64_t countAndFlagsBits = 0xD000000000000028;
  v41._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v41._uint64_t object = (void *)0x80000001002CD740;
  v1._uint64_t object = (void *)0x80000001002CD8B0;
  v2.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v2.value._uint64_t object = (void *)0x80000001002CD700;
  v3._uint64_t countAndFlagsBits = 0;
  v3._uint64_t object = (void *)0xE000000000000000;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v41);

  Swift::String v34 = v4;
  uint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  Swift::String v37 = _swiftEmptyArrayStorage;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  sub_100004010(&qword_1003913B0);
  unint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002B7BC0;
  id v6 = [v33 mainBundle];
  v42._uint64_t object = (void *)0x80000001002CD900;
  v7._uint64_t object = (void *)0x80000001002CD8E0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000011;
  v8.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v8.value._uint64_t object = (void *)0x80000001002CD700;
  v9._uint64_t countAndFlagsBits = 0;
  v9._uint64_t object = (void *)0xE000000000000000;
  v42._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v42);

  uint64_t v11 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  uint64_t v12 = (Swift::String *)swift_allocObject();
  v12[1] = v10;
  v12[3]._uint64_t countAndFlagsBits = 0;
  v12[3]._uint64_t object = 0;
  v12[4]._uint64_t countAndFlagsBits = v11;
  type metadata accessor for Option();
  v12[2]._uint64_t countAndFlagsBits = 0;
  v12[2]._uint64_t object = 0;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0x5345595F574F54;
  *(void *)(v13 + 24) = 0xE700000000000000;
  *(void *)(v13 + 32) = v12;
  *(unsigned char *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = 40;
  *(void *)(v5 + 32) = v13;
  id v14 = [v33 mainBundle];
  v43._uint64_t object = (void *)0x80000001002CD900;
  v15._uint64_t object = (void *)0x80000001002CD930;
  v15._uint64_t countAndFlagsBits = 0xD000000000000011;
  v16.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v16.value._uint64_t object = (void *)0x80000001002CD700;
  v17._uint64_t countAndFlagsBits = 0;
  v17._uint64_t object = (void *)0xE000000000000000;
  v43._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v43);

  uint64_t v19 = static Color.clear.getter();
  uint64_t v20 = (Swift::String *)swift_allocObject();
  v20[1] = v18;
  v20[3]._uint64_t countAndFlagsBits = 0;
  v20[3]._uint64_t object = 0;
  v20[4]._uint64_t countAndFlagsBits = v19;
  v20[2]._uint64_t countAndFlagsBits = 0;
  v20[2]._uint64_t object = 0;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0x4F4E5F574F54;
  *(void *)(v21 + 24) = 0xE600000000000000;
  *(void *)(v21 + 32) = v20;
  *(unsigned char *)(v21 + 40) = 0;
  *(void *)(v21 + 48) = 40;
  *(void *)(v5 + 40) = v21;
  specialized Array._endMutation()();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1002B8150;
  type metadata accessor for OptionSelected();
  uint64_t v23 = swift_allocObject();
  strcpy((char *)(v23 + 16), "LCKD_KEYS_LOST");
  *(unsigned char *)(v23 + 31) = -18;
  *(void *)(v22 + 32) = v23;
  uint64_t v24 = swift_allocObject();
  strcpy((char *)(v24 + 16), "FLAT_SPARE_NO");
  *(_WORD *)(v24 + 30) = -4864;
  *(void *)(v22 + 40) = v24;
  uint64_t v25 = swift_allocObject();
  strcpy((char *)(v25 + 16), "FUEL_TYPE_EV");
  *(unsigned char *)(v25 + 29) = 0;
  *(_WORD *)(v25 + 30) = -5120;
  *(void *)(v22 + 48) = v25;
  uint64_t v26 = swift_allocObject();
  strcpy((char *)(v26 + 16), "FUEL_TYPE_OTHR");
  *(unsigned char *)(v26 + 31) = -18;
  *(void *)(v22 + 56) = v26;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0xD000000000000010;
  *(void *)(v27 + 24) = 0x80000001002CD890;
  *(void *)(v22 + 64) = v27;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0x5554535F45505954;
  *(void *)(v28 + 24) = 0xEA00000000004B43;
  *(void *)(v22 + 72) = v28;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0x48544F5F45505954;
  *(void *)(v29 + 24) = 0xEA00000000005245;
  *(void *)(v22 + 80) = v29;
  specialized Array._endMutation()();
  uint64_t v30 = v22;
  type metadata accessor for OrCondition();
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 1;
  *(void *)(v31 + 24) = v30;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(5721940, 0xE300000000000000, 0, &v34, v5, v31, (uint64_t)&off_10034A3A8, 7);
}

uint64_t sub_1000C2DEC()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v48._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CD7F0;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  v48._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v48);

  Swift::String v41 = v5;
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  Swift::String v44 = _swiftEmptyArrayStorage;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  sub_100004010(&qword_1003913B0);
  unint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002B6800;
  id v7 = [v0 mainBundle];
  v49._uint64_t object = (void *)0x80000001002CD820;
  v8._uint64_t countAndFlagsBits = 0x6E6F737265502031;
  v8._uint64_t object = (void *)0xE800000000000000;
  v9.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v9.value._uint64_t object = (void *)0x80000001002CD700;
  v10._uint64_t countAndFlagsBits = 0;
  v10._uint64_t object = (void *)0xE000000000000000;
  v49._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v49);

  uint64_t v12 = static Color.clear.getter();
  type metadata accessor for OptionPresentation();
  uint64_t v13 = (Swift::String *)swift_allocObject();
  v13[1] = v11;
  v13[3]._uint64_t countAndFlagsBits = 0;
  v13[3]._uint64_t object = 0;
  v13[4]._uint64_t countAndFlagsBits = v12;
  type metadata accessor for Option();
  v13[2]._uint64_t countAndFlagsBits = 0;
  v13[2]._uint64_t object = 0;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0x5F45444952574F54;
  *(void *)(v14 + 24) = 0xE900000000000031;
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 40;
  *(void *)(v6 + 32) = v14;
  id v15 = [v0 mainBundle];
  v50._uint64_t object = (void *)0x80000001002CD820;
  v16._uint64_t countAndFlagsBits = 0x656C706F65502032;
  v16._uint64_t object = (void *)0xE800000000000000;
  v17.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v17.value._uint64_t object = (void *)0x80000001002CD700;
  v18._uint64_t countAndFlagsBits = 0;
  v18._uint64_t object = (void *)0xE000000000000000;
  v50._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  Swift::String v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v50);

  uint64_t v20 = static Color.clear.getter();
  uint64_t v21 = (Swift::String *)swift_allocObject();
  v21[1] = v19;
  v21[3]._uint64_t countAndFlagsBits = 0;
  v21[3]._uint64_t object = 0;
  v21[4]._uint64_t countAndFlagsBits = v20;
  v21[2]._uint64_t countAndFlagsBits = 0;
  v21[2]._uint64_t object = 0;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0x5F45444952574F54;
  *(void *)(v22 + 24) = 0xE900000000000032;
  *(void *)(v22 + 32) = v21;
  *(unsigned char *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = 40;
  *(void *)(v6 + 40) = v22;
  id v23 = [v0 mainBundle];
  v24._uint64_t countAndFlagsBits = 0xD000000000000010;
  v51._uint64_t object = (void *)0x80000001002CD820;
  v24._uint64_t object = (void *)0x80000001002CD870;
  v25.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v25.value._uint64_t object = (void *)0x80000001002CD700;
  v26._uint64_t countAndFlagsBits = 0;
  v26._uint64_t object = (void *)0xE000000000000000;
  v51._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  Swift::String v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v51);

  uint64_t v28 = static Color.clear.getter();
  uint64_t v29 = (Swift::String *)swift_allocObject();
  v29[1] = v27;
  v29[3]._uint64_t countAndFlagsBits = 0;
  v29[3]._uint64_t object = 0;
  v29[4]._uint64_t countAndFlagsBits = v28;
  v29[2]._uint64_t countAndFlagsBits = 0;
  v29[2]._uint64_t object = 0;
  uint64_t v30 = swift_allocObject();
  strcpy((char *)(v30 + 16), "TOWRIDE_3PLUS");
  *(_WORD *)(v30 + 30) = -4864;
  *(void *)(v30 + 32) = v29;
  *(unsigned char *)(v30 + 40) = 0;
  *(void *)(v30 + 48) = 40;
  *(void *)(v6 + 48) = v30;
  id v31 = [v0 mainBundle];
  v52._uint64_t object = (void *)0x80000001002CD820;
  v32._uint64_t countAndFlagsBits = 0x2065646952206F4ELL;
  v32._uint64_t object = (void *)0xEE0064656465654ELL;
  v33.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v33.value._uint64_t object = (void *)0x80000001002CD700;
  v34._uint64_t countAndFlagsBits = 0;
  v34._uint64_t object = (void *)0xE000000000000000;
  v52._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  Swift::String v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v52);

  uint64_t v36 = static Color.clear.getter();
  Swift::String v37 = (Swift::String *)swift_allocObject();
  v37[1] = v35;
  v37[3]._uint64_t countAndFlagsBits = 0;
  v37[3]._uint64_t object = 0;
  v37[4]._uint64_t countAndFlagsBits = v36;
  v37[2]._uint64_t countAndFlagsBits = 0;
  v37[2]._uint64_t object = 0;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = 0x5F45444952574F54;
  *(void *)(v38 + 24) = 0xEA00000000004F4ELL;
  *(void *)(v38 + 32) = v37;
  *(unsigned char *)(v38 + 40) = 0;
  *(void *)(v38 + 48) = 40;
  *(void *)(v6 + 56) = v38;
  specialized Array._endMutation()();
  type metadata accessor for QuestionCondition();
  uint64_t v39 = swift_allocObject();
  *(unsigned char *)(v39 + 16) = 0;
  *(void *)(v39 + 24) = 5721940;
  *(void *)(v39 + 32) = 0xE300000000000000;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x45444952574F54, 0xE700000000000000, 0, &v41, v6, v39, (uint64_t)&off_10034A3D0, 7);
}

uint64_t sub_1000C3324()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v18._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v18._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CD720;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v18);

  id v6 = [v0 mainBundle];
  v19._uint64_t countAndFlagsBits = 0xD000000000000024;
  v7._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
  v19._uint64_t object = (void *)0x80000001002CD7C0;
  v7._uint64_t object = (void *)0x80000001002CD770;
  v8.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v8.value._uint64_t object = (void *)0x80000001002CD700;
  v9._uint64_t countAndFlagsBits = 0;
  v9._uint64_t object = (void *)0xE000000000000000;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v19);

  v13[0] = v5;
  v13[1] = v10;
  uint64_t v14 = _swiftEmptyArrayStorage;
  type metadata accessor for BuiltInCondition();
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 8;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x505F5443454C4553, 0xEC0000004D554E48, 3, v13, (unint64_t)_swiftEmptyArrayStorage, v11, (uint64_t)_swiftEmptyArrayStorage, 5);
}

uint64_t sub_1000C34F0()
{
  id v0 = self;
  id v1 = [v0 mainBundle];
  v2._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v27._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v27._uint64_t object = (void *)0x80000001002CD740;
  v2._uint64_t object = (void *)0x80000001002CD720;
  v3.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v3.value._uint64_t object = (void *)0x80000001002CD700;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v27);

  id v6 = [v0 mainBundle];
  v28._uint64_t countAndFlagsBits = 0xD000000000000024;
  v7._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
  v28._uint64_t object = (void *)0x80000001002CD7C0;
  v7._uint64_t object = (void *)0x80000001002CD770;
  v8.value._uint64_t countAndFlagsBits = 0xD000000000000017;
  v8.value._uint64_t object = (void *)0x80000001002CD700;
  v9._uint64_t countAndFlagsBits = 0;
  v9._uint64_t object = (void *)0xE000000000000000;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v28);

  v22[0] = v5;
  v22[1] = v10;
  id v23 = _swiftEmptyArrayStorage;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_100004010(&qword_1003913B0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1002B7BC0;
  type metadata accessor for QuestionCondition();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 2;
  strcpy((char *)(v12 + 24), "SELECT_PHNUM");
  *(unsigned char *)(v12 + 37) = 0;
  *(_WORD *)(v12 + 38) = -5120;
  type metadata accessor for NotCondition();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002B3AF0;
  *(void *)(v14 + 32) = v12;
  uint64_t v20 = v14;
  specialized Array._endMutation()();
  *(unsigned char *)(v13 + 16) = 2;
  *(void *)(v13 + 24) = v20;
  *(void *)(v11 + 32) = v13;
  type metadata accessor for BuiltInCondition();
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = 9;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1002B3AF0;
  *(void *)(v17 + 32) = v15;
  uint64_t v21 = v17;
  specialized Array._endMutation()();
  *(unsigned char *)(v16 + 16) = 2;
  *(void *)(v16 + 24) = v21;
  *(void *)(v11 + 40) = v16;
  specialized Array._endMutation()();
  type metadata accessor for AndCondition();
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = v11;
  type metadata accessor for Question();
  swift_allocObject();
  return sub_10009B318(0x48505F5245544E45, 0xEB000000004D554ELL, 3, v22, (unint64_t)_swiftEmptyArrayStorage, v18, (uint64_t)_swiftEmptyArrayStorage, 6);
}

uint64_t sub_1000C37FC()
{
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000FD84(v0, (uint64_t)qword_1003A9B08);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::String_optional v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String_optional v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Creating built-in roadside assistance Questionnaire instance", v3, 2u);
    swift_slowDealloc();
  }

  v6[0] = 1;
  unint64_t v7 = 0xD000000000000017;
  unint64_t v8 = 0x80000001002CD700;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 1;
  sub_100004010(&qword_1003913B0);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002B8160;
  *(void *)(v4 + 32) = sub_1000C0E6C();
  *(void *)(v4 + 40) = sub_1000C1098();
  *(void *)(v4 + 48) = sub_1000C11EC();
  *(void *)(v4 + 56) = sub_1000C1918();
  *(void *)(v4 + 64) = sub_1000C1C98();
  *(void *)(v4 + 72) = sub_1000C2014();
  *(void *)(v4 + 80) = sub_1000C2564();
  *(void *)(v4 + 88) = sub_1000C2908();
  *(void *)(v4 + 96) = sub_1000C2DEC();
  *(void *)(v4 + 104) = sub_1000C3324();
  *(void *)(v4 + 112) = sub_1000C34F0();
  specialized Array._endMutation()();
  type metadata accessor for Questionnaire();
  swift_allocObject();
  return sub_10009A3E0(1, 0, (uint64_t)v6, 0, v4);
}

uint64_t sub_1000C3B80()
{
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000FD84(v0, (uint64_t)qword_1003A9B08);
  swift_bridgeObjectRetain_n();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::String_optional v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)Swift::String_optional v3 = 136446210;
    swift_bridgeObjectRetain();
    sub_100004010(&qword_100380920);
    uint64_t v4 = String.init<A>(describing:)();
    sub_1001B3178(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Creating roadside assistance Questionnaire instance from bundle: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return sub_1000C37FC();
}

uint64_t destroy for BuiltInNotifyContactsConsentHeaderView()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for BuiltInNotifyContactsConsentHeaderView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for BuiltInNotifyContactsConsentHeaderView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for BuiltInNotifyContactsConsentHeaderView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for BuiltInNotifyContactsConsentHeaderView()
{
  return &type metadata for BuiltInNotifyContactsConsentHeaderView;
}

uint64_t sub_1000C3EB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C3ED4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6 = a4;
  uint64_t v75 = a3;
  uint64_t v76 = a4;
  uint64_t v8 = a3;
  uint64_t v74 = a2;
  uint64_t v80 = a5;
  uint64_t v11 = sub_100004010(&qword_100385938);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100004010(&qword_100385940);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v72 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100004010(&qword_100385948) - 8;
  __chkstk_darwin(v79);
  uint64_t v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100004010(&qword_100385950) - 8;
  uint64_t v19 = __chkstk_darwin(v78);
  uint64_t v73 = (uint64_t)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v77 = (uint64_t)&v71 - v21;
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 0;
  uint64_t v22 = sub_100004010(&qword_100385958);
  sub_1000C44C8(a1, a2, v8, v6, (long long *)&v13[*(int *)(v22 + 44)], a6);
  LOBYTE(v8) = static Edge.Set.top.getter();
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_100008F88(a1, v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 128))(v23, v24);
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = v72;
  sub_10000D2A0((uint64_t)v13, v72, &qword_100385938);
  uint64_t v34 = v33 + *(int *)(v15 + 44);
  *(unsigned char *)uint64_t v34 = v8;
  *(void *)(v34 + 8) = v26;
  *(void *)(v34 + 16) = v28;
  *(void *)(v34 + 24) = v30;
  *(void *)(v34 + 32) = v32;
  *(unsigned char *)(v34 + 40) = 0;
  sub_10000950C((uint64_t)v13, &qword_100385938);
  LOBYTE(v8) = static Edge.Set.bottom.getter();
  uint64_t v35 = a1[3];
  uint64_t v36 = a1[4];
  sub_100008F88(a1, v35);
  (*(void (**)(uint64_t, uint64_t))(v36 + 304))(v35, v36);
  EdgeInsets.init(_all:)();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  sub_10000D2A0(v33, (uint64_t)v18, &qword_100385940);
  uint64_t v45 = &v18[*(int *)(v79 + 44)];
  *uint64_t v45 = v8;
  *((void *)v45 + 1) = v38;
  *((void *)v45 + 2) = v40;
  *((void *)v45 + 3) = v42;
  *((void *)v45 + 4) = v44;
  v45[40] = 0;
  sub_10000950C(v33, &qword_100385940);
  uint64_t v46 = v73;
  sub_10000D2A0((uint64_t)v18, v73, &qword_100385948);
  uint64_t v47 = (void *)(v46 + *(int *)(v78 + 44));
  *uint64_t v47 = 0x7453726564616548;
  v47[1] = 0xEB000000006B6361;
  sub_10000950C((uint64_t)v18, &qword_100385948);
  uint64_t v48 = v77;
  sub_10000D544(v46, v77, &qword_100385950);
  uint64_t v79 = static HorizontalAlignment.center.getter();
  sub_1000C5094(a1, v74, (uint64_t)v81);
  *(_OWORD *)&v82[119] = v81[7];
  *(_OWORD *)&v82[135] = v81[8];
  *(_OWORD *)&v82[151] = v81[9];
  *(_OWORD *)&v82[167] = v81[10];
  *(_OWORD *)&v82[55] = v81[3];
  *(_OWORD *)&v82[71] = v81[4];
  *(_OWORD *)&v82[87] = v81[5];
  *(_OWORD *)&v82[103] = v81[6];
  *(_OWORD *)&v82[7] = v81[0];
  *(_OWORD *)&v82[23] = v81[1];
  char v83 = 0;
  *(_OWORD *)&v82[39] = v81[2];
  LOBYTE(v36) = static Edge.Set.bottom.getter();
  uint64_t v49 = a1[3];
  uint64_t v50 = a1[4];
  sub_100008F88(a1, v49);
  (*(void (**)(uint64_t, uint64_t))(v50 + 312))(v49, v50);
  EdgeInsets.init(_all:)();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  char v84 = 0;
  sub_10000D2A0(v48, v46, &qword_100385950);
  LOBYTE(v6) = v84;
  uint64_t v59 = v80;
  sub_10000D2A0(v46, v80, &qword_100385950);
  uint64_t v60 = *(int *)(sub_100004010(&qword_100385960) + 48);
  *(_OWORD *)((char *)&v86[8] + 1) = *(_OWORD *)&v82[128];
  *(_OWORD *)((char *)&v86[9] + 1) = *(_OWORD *)&v82[144];
  *(_OWORD *)((char *)&v86[10] + 1) = *(_OWORD *)&v82[160];
  *(_OWORD *)((char *)&v86[4] + 1) = *(_OWORD *)&v82[64];
  *(_OWORD *)((char *)&v86[5] + 1) = *(_OWORD *)&v82[80];
  *(_OWORD *)((char *)&v86[6] + 1) = *(_OWORD *)&v82[96];
  *(_OWORD *)((char *)&v86[7] + 1) = *(_OWORD *)&v82[112];
  *(_OWORD *)((char *)&v86[1] + 1) = *(_OWORD *)&v82[16];
  *(_OWORD *)((char *)&v86[2] + 1) = *(_OWORD *)&v82[32];
  uint64_t v61 = v59 + v60;
  uint64_t v62 = v79;
  long long v85 = (unint64_t)v79;
  LOBYTE(v86[0]) = 0;
  *(void *)&v86[11] = *(void *)&v82[175];
  *(_OWORD *)((char *)&v86[3] + 1) = *(_OWORD *)&v82[48];
  *(_OWORD *)((char *)v86 + 1) = *(_OWORD *)v82;
  BYTE8(v86[11]) = v36;
  *(void *)&long long v87 = v52;
  *((void *)&v87 + 1) = v54;
  *(void *)&long long v88 = v56;
  *((void *)&v88 + 1) = v58;
  char v89 = v6;
  *(unsigned char *)(v61 + 240) = v6;
  long long v63 = v86[8];
  *(_OWORD *)(v61 + 128) = v86[7];
  *(_OWORD *)(v61 + 144) = v63;
  long long v64 = v86[10];
  *(_OWORD *)(v61 + 160) = v86[9];
  *(_OWORD *)(v61 + 176) = v64;
  long long v65 = v86[4];
  *(_OWORD *)(v61 + 64) = v86[3];
  *(_OWORD *)(v61 + 80) = v65;
  long long v66 = v86[6];
  *(_OWORD *)(v61 + 96) = v86[5];
  *(_OWORD *)(v61 + 112) = v66;
  long long v67 = v86[0];
  *(_OWORD *)uint64_t v61 = v85;
  *(_OWORD *)(v61 + 16) = v67;
  long long v68 = v86[2];
  *(_OWORD *)(v61 + 32) = v86[1];
  *(_OWORD *)(v61 + 48) = v68;
  long long v69 = v87;
  *(_OWORD *)(v61 + 192) = v86[11];
  *(_OWORD *)(v61 + 208) = v69;
  *(_OWORD *)(v61 + 224) = v88;
  sub_1000C54EC((uint64_t)&v85);
  sub_10000950C(v48, &qword_100385950);
  long long v100 = *(_OWORD *)&v82[128];
  long long v101 = *(_OWORD *)&v82[144];
  *(_OWORD *)long long v102 = *(_OWORD *)&v82[160];
  long long v96 = *(_OWORD *)&v82[64];
  long long v97 = *(_OWORD *)&v82[80];
  long long v98 = *(_OWORD *)&v82[96];
  long long v99 = *(_OWORD *)&v82[112];
  long long v92 = *(_OWORD *)v82;
  long long v93 = *(_OWORD *)&v82[16];
  long long v94 = *(_OWORD *)&v82[32];
  v90[0] = v62;
  v90[1] = 0;
  char v91 = 0;
  *(void *)&v102[15] = *(void *)&v82[175];
  long long v95 = *(_OWORD *)&v82[48];
  char v103 = v36;
  uint64_t v104 = v52;
  uint64_t v105 = v54;
  uint64_t v106 = v56;
  uint64_t v107 = v58;
  char v108 = v6;
  sub_1000C5548((uint64_t)v90);
  return sub_10000950C(v46, &qword_100385950);
}

uint64_t sub_1000C44C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X8>, double a6@<D0>)
{
  uint64_t v120 = a3;
  uint64_t v121 = a4;
  uint64_t v124 = a5;
  uint64_t v9 = type metadata accessor for AccessibilityTraits();
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  __chkstk_darwin(v9);
  char v110 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_100385968);
  __chkstk_darwin(v11 - 8);
  __int16 v114 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_100004010(&qword_100385970);
  __chkstk_darwin(v113);
  uint64_t v116 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100004010(&qword_100385978);
  __chkstk_darwin(v115);
  uint64_t v119 = (uint64_t)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100004010(&qword_100385980);
  uint64_t v15 = __chkstk_darwin(v118);
  uint64_t v123 = (uint64_t)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v117 = (uint64_t)&v107 - v18;
  __chkstk_darwin(v17);
  uint64_t v122 = (uint64_t)&v107 - v19;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  uint64_t v126 = a1;
  sub_100008F88(a1, v25);
  (*(void (**)(uint64_t, uint64_t))(v26 + 160))(v25, v26);
  uint64_t v27 = Text.font(_:)();
  uint64_t v29 = v28;
  LODWORD(v125) = v30;
  uint64_t v109 = v31;
  swift_release();
  sub_100033364(v20, v22, v24);
  swift_bridgeObjectRelease();
  if (a2)
  {
    id v32 = *(id *)(a2 + 112);
    char v33 = static UIContentSizeCategory.>= infix(_:_:)();

    BOOL v34 = (v33 & 1) == 0;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v128 = a2;
    id v36 = *(id *)(a2 + 112);
    static Alignment.center.getter();
    UIContentSizeCategory v127 = UIContentSizeCategoryAccessibilityExtraLarge;
    if (static UIContentSizeCategory.>= infix(_:_:)())
    {
      static Alignment.center.getter();
      if (static Alignment.== infix(_:_:)()) {
        static Alignment.leading.getter();
      }
    }

    uint64_t v169 = v27;
    uint64_t v170 = v29;
    char v37 = v125 & 1;
    char v171 = v125 & 1;
    uint64_t v172 = v109;
    uint64_t v173 = KeyPath;
    BOOL v174 = v34;
    sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v153, 0.0, 1, 0.0, 1);
    sub_100033364(v27, v29, v37);
    swift_release();
    swift_bridgeObjectRelease();
    id v38 = *(id *)(v128 + 112);
    LODWORD(v109) = static UIContentSizeCategory.>= infix(_:_:)();

    uint64_t v125 = swift_getKeyPath();
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    char v43 = v42 & 1;
    uint64_t v44 = v126;
    uint64_t v45 = v126[3];
    uint64_t v46 = v126[4];
    sub_100008F88(v126, v45);
    (*(void (**)(uint64_t, uint64_t))(v46 + 152))(v45, v46);
    uint64_t v47 = Text.font(_:)();
    uint64_t v49 = v48;
    char v51 = v50;
    uint64_t v107 = v52;
    swift_release();
    sub_100033364(v39, v41, v43);
    swift_bridgeObjectRelease();
    uint64_t v53 = v44[3];
    uint64_t v54 = v44[4];
    sub_100008F88(v44, v53);
    (*(void (**)(uint64_t, uint64_t))(v54 + 168))(v53, v54);
    uint64_t v55 = Text.foregroundColor(_:)();
    uint64_t v57 = v56;
    char v59 = v58;
    uint64_t v108 = v60;
    swift_release();
    sub_100033364(v47, v49, v51 & 1);
    swift_bridgeObjectRelease();
    uint64_t v61 = v128;
    id v62 = *(id *)(v128 + 112);
    char v63 = static UIContentSizeCategory.>= infix(_:_:)();

    uint64_t v64 = swift_getKeyPath();
    id v65 = *(id *)(v61 + 112);
    static Alignment.center.getter();
    if (static UIContentSizeCategory.>= infix(_:_:)())
    {
      static Alignment.center.getter();
      if (static Alignment.== infix(_:_:)()) {
        static Alignment.leading.getter();
      }
    }

    double v66 = 0.5;
    uint64_t v163 = v55;
    uint64_t v164 = v57;
    char v165 = v59 & 1;
    if (v109) {
      double v67 = 1.0;
    }
    else {
      double v67 = 0.5;
    }
    uint64_t v166 = v108;
    uint64_t v167 = v64;
    BOOL v168 = (v63 & 1) == 0;
    sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v129, 0.0, 1, 0.0, 1);
    sub_100033364(v55, v57, v59 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v68 = v128;
    id v69 = *(id *)(v128 + 112);
    char v70 = static UIContentSizeCategory.>= infix(_:_:)();

    if (v70) {
      double v66 = 1.0;
    }
    uint64_t v71 = swift_getKeyPath();
    long long v148 = v129[6];
    long long v149 = v129[7];
    long long v150 = v129[8];
    long long v151 = v129[9];
    long long v144 = v129[2];
    long long v145 = v129[3];
    long long v146 = v129[4];
    long long v147 = v129[5];
    long long v142 = v129[0];
    long long v143 = v129[1];
    *(void *)&long long v152 = v71;
    *((double *)&v152 + 1) = v66;
    uint64_t v72 = v110;
    static AccessibilityTraits.isHeader.getter();
    sub_100004010(&qword_100385988);
    sub_1000C57C0();
    uint64_t v73 = (uint64_t)v114;
    View.accessibility(addTraits:)();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v72, v112);
    v130[8] = v150;
    v130[9] = v151;
    v130[10] = v152;
    v130[4] = v146;
    v130[5] = v147;
    v130[6] = v148;
    v130[7] = v149;
    v130[0] = v142;
    v130[1] = v143;
    v130[2] = v144;
    v130[3] = v145;
    sub_100043A24((uint64_t)v130);
    uint64_t v74 = static Alignment.center.getter();
    uint64_t v76 = v75;
    uint64_t v77 = v116;
    sub_10000D2A0(v73, v116, &qword_100385968);
    uint64_t v78 = (uint64_t *)(v77 + *(int *)(v113 + 36));
    *uint64_t v78 = v74;
    v78[1] = v76;
    sub_10000950C(v73, &qword_100385968);
    sub_1000090FC((uint64_t)v126, (uint64_t)&v142);
    uint64_t v79 = swift_allocObject();
    uint64_t v80 = v120;
    uint64_t v81 = v121;
    *(void *)(v79 + 16) = v68;
    *(void *)(v79 + 24) = v80;
    *(double *)(v79 + 32) = a6;
    *(void *)(v79 + 40) = v81;
    sub_100009164(&v142, v79 + 48);
    uint64_t v82 = v119;
    sub_10000D2A0(v77, v119, &qword_100385970);
    char v83 = (uint64_t (**)(uint64_t))(v82 + *(int *)(v115 + 36));
    *char v83 = sub_1000C58A8;
    v83[1] = (uint64_t (*)(uint64_t))v79;
    swift_retain();
    swift_retain();
    sub_10000950C(v77, &qword_100385970);
    LOBYTE(v76) = static Edge.Set.top.getter();
    *(double *)&long long v142 = a6;
    *((void *)&v142 + 1) = v81;
    sub_100004010(&qword_1003853C0);
    State.wrappedValue.getter();
    EdgeInsets.init(_all:)();
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    uint64_t v92 = v117;
    sub_10000D2A0(v82, v117, &qword_100385978);
    uint64_t v93 = v92 + *(int *)(v118 + 36);
    *(unsigned char *)uint64_t v93 = v76;
    *(void *)(v93 + 8) = v85;
    *(void *)(v93 + 16) = v87;
    *(void *)(v93 + 24) = v89;
    *(void *)(v93 + 32) = v91;
    *(unsigned char *)(v93 + 40) = 0;
    sub_10000950C(v82, &qword_100385978);
    uint64_t v94 = v122;
    sub_10000D544(v92, v122, &qword_100385980);
    uint64_t v95 = v123;
    sub_10000D2A0(v94, v123, &qword_100385980);
    long long v137 = v159;
    long long v138 = v160;
    long long v139 = v161;
    long long v140 = v162;
    long long v133 = v155;
    long long v96 = v155;
    long long v134 = v156;
    long long v135 = v157;
    long long v136 = v158;
    long long v131 = v153;
    long long v132 = v154;
    long long v97 = v124;
    uint64_t v98 = v125;
    *(void *)&long long v141 = v125;
    *((double *)&v141 + 1) = v67;
    long long v99 = v160;
    v124[6] = v159;
    v97[7] = v99;
    long long v100 = v140;
    v97[8] = v139;
    v97[9] = v100;
    long long v101 = v134;
    long long v102 = v135;
    long long v103 = v136;
    v97[2] = v96;
    v97[3] = v101;
    v97[4] = v102;
    v97[5] = v103;
    long long v104 = v132;
    long long *v97 = v131;
    v97[1] = v104;
    v97[10] = v141;
    uint64_t v105 = sub_100004010(&qword_100385998);
    sub_10000D2A0(v95, (uint64_t)v97 + *(int *)(v105 + 48), &qword_100385980);
    sub_1000439C8((uint64_t)&v131);
    sub_10000950C(v94, &qword_100385980);
    sub_10000950C(v95, &qword_100385980);
    long long v148 = v159;
    long long v149 = v160;
    long long v150 = v161;
    long long v151 = v162;
    long long v144 = v155;
    long long v145 = v156;
    long long v146 = v157;
    long long v147 = v158;
    long long v142 = v153;
    long long v143 = v154;
    *(void *)&long long v152 = v98;
    *((double *)&v152 + 1) = v67;
    return sub_100043A24((uint64_t)&v142);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_100092DDC();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C4F84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v5 = *(double **)result;
  if (*(void *)(*(void *)result + 16))
  {
    CGFloat v6 = v5[4];
    CGFloat v7 = v5[5];
    CGFloat v8 = v5[6];
    CGFloat v9 = v5[7];
    uint64_t v10 = a5[3];
    uint64_t v11 = a5[4];
    sub_100008F88(a5, v10);
    (*(void (**)(uint64_t, uint64_t))(v11 + 136))(v10, v11);
    v12.origin.x = v6;
    v12.origin.y = v7;
    v12.size.width = v8;
    v12.size.height = v9;
    CGRectGetMidY(v12);
    sub_100004010(&qword_1003853C0);
    State.wrappedValue.getter();
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000C5094@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v5 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_100008F88(a1, v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 200))(v11, v10);
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  swift_release();
  sub_100033364(v5, v7, v9);
  swift_bridgeObjectRelease();
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100008F88(a1, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 168))(v17, v18);
  uint64_t v38 = Text.foregroundColor(_:)();
  uint64_t v39 = v19;
  uint64_t v21 = v20;
  char v36 = v22;
  swift_release();
  sub_100033364(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  if (a2)
  {
    id v23 = *(id *)(a2 + 112);
    char v24 = static UIContentSizeCategory.>= infix(_:_:)();

    uint64_t KeyPath = swift_getKeyPath();
    id v26 = *(id *)(a2 + 112);
    static Alignment.center.getter();
    if (static UIContentSizeCategory.>= infix(_:_:)())
    {
      static Alignment.center.getter();
      if (static Alignment.== infix(_:_:)()) {
        static Alignment.leading.getter();
      }
    }

    uint64_t v41 = v38;
    uint64_t v42 = v21;
    char v43 = v36 & 1;
    uint64_t v44 = v39;
    uint64_t v45 = KeyPath;
    BOOL v46 = (v24 & 1) == 0;
    sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v40, 0.0, 1, 0.0, 1);
    sub_100033364(v38, v21, v36 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    id v27 = *(id *)(a2 + 112);
    char v28 = static UIContentSizeCategory.>= infix(_:_:)();

    if (v28) {
      double v29 = 1.0;
    }
    else {
      double v29 = 0.5;
    }
    uint64_t result = swift_getKeyPath();
    long long v31 = v40[7];
    *(_OWORD *)(a3 + 96) = v40[6];
    *(_OWORD *)(a3 + 112) = v31;
    long long v32 = v40[9];
    *(_OWORD *)(a3 + 128) = v40[8];
    *(_OWORD *)(a3 + 144) = v32;
    long long v33 = v40[3];
    *(_OWORD *)(a3 + 32) = v40[2];
    *(_OWORD *)(a3 + 48) = v33;
    long long v34 = v40[5];
    *(_OWORD *)(a3 + 64) = v40[4];
    *(_OWORD *)(a3 + 80) = v34;
    long long v35 = v40[1];
    *(_OWORD *)a3 = v40[0];
    *(_OWORD *)(a3 + 16) = v35;
    *(void *)(a3 + 160) = result;
    *(double *)(a3 + 168) = v29;
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_100092DDC();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C53F8@<X0>(uint64_t a1@<X8>)
{
  Swift::String_optional v3 = *(void **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)v1)
  {
    double v5 = *(double *)(v1 + 16);
    uint64_t v6 = *(void *)(v1 + 24);
    uint64_t v7 = v3[9];
    uint64_t v8 = v3[10];
    sub_100008F88(v3 + 6, v7);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 24))(v11, v7, v8);
    *(void *)a1 = static HorizontalAlignment.center.getter();
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v9 = sub_100004010(&qword_100385930);
    sub_1000C3ED4(v11, (uint64_t)v3, v2, v6, a1 + *(int *)(v9 + 44), v5);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v11);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_100092DDC();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C54EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C5548(uint64_t a1)
{
  return a1;
}

void sub_1000C55A4()
{
  qword_100385928 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1000C55B8@<X0>(void *a1@<X8>)
{
  if (qword_10037DD38 != -1) {
    swift_once();
  }
  *a1 = qword_100385928;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000C5624(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return sub_10011047C(v3);
}

double sub_1000C5670()
{
  uint64_t v0 = type metadata accessor for NamedCoordinateSpace();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[0] = 0x7453726564616548;
  v7[1] = 0xEB000000006B6361;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.frame<A>(in:)();
  double v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

unint64_t sub_1000C57C0()
{
  unint64_t result = qword_100385990;
  if (!qword_100385990)
  {
    sub_1000094C4(&qword_100385988);
    sub_100033574();
    sub_100009B18(&qword_100381990, &qword_100381998);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385990);
  }
  return result;
}

uint64_t sub_1000C5860()
{
  swift_release();
  swift_release();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 48);

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000C58A8(uint64_t a1)
{
  return sub_1000C4F84(a1, v1[2], v1[3], v1[5], v1 + 6);
}

ValueMetadata *type metadata accessor for ViewFrameInHeaderStack()
{
  return &type metadata for ViewFrameInHeaderStack;
}

uint64_t sub_1000C58CC()
{
  return sub_100009B18(&qword_1003859A0, &qword_1003859A8);
}

ValueMetadata *type metadata accessor for BusinessOnboardingView()
{
  return &type metadata for BusinessOnboardingView;
}

unint64_t sub_1000C591C()
{
  unint64_t result = qword_1003859B0;
  if (!qword_1003859B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003859B0);
  }
  return result;
}

uint64_t sub_1000C5970(uint64_t (*a1)(void))
{
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9958);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    double v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Onboarding controller dismissed", v5, 2u);
    swift_slowDealloc();
  }

  return a1();
}

id sub_1000C5A64()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = objc_allocWithZone((Class)CKBusinessOnboardingController);
  v8[4] = sub_1000C5D28;
  v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100207A1C;
  v8[3] = &unk_100355560;
  double v5 = _Block_copy(v8);
  swift_retain();
  id v6 = [v4 initWithCompletionHandler:v5];
  _Block_release(v5);
  swift_release();
  return v6;
}

uint64_t sub_1000C5B64()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

void *sub_1000C5BA0()
{
  return &protocol witness table for Never;
}

uint64_t sub_1000C5BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C5C9C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C5C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C5C9C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000C5C74()
{
}

unint64_t sub_1000C5C9C()
{
  unint64_t result = qword_1003859B8;
  if (!qword_1003859B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003859B8);
  }
  return result;
}

uint64_t sub_1000C5CF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C5D28()
{
  return sub_1000C5970(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000C5D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C5D40()
{
  return swift_release();
}

void *sub_1000C5D48(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3;
  if (a3 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      unint64_t v21 = v4 & 0xC000000000000001;
      unint64_t v6 = &_swiftEmptyArrayStorage;
      uint64_t v7 = 4;
      uint64_t v19 = v5;
      unint64_t v20 = v4;
      while (1)
      {
        uint64_t v9 = v7 - 4;
        if (v21)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v11 = __OFADD__(v9, 1);
          uint64_t v12 = v7 - 3;
          if (v11) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(v4 + 8 * v7);
          swift_retain();
          BOOL v11 = __OFADD__(v9, 1);
          uint64_t v12 = v7 - 3;
          if (v11)
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v38 = v10;
        a1(&v29, &v38);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return v6;
        }
        swift_release();
        uint64_t v13 = v30;
        if (v30)
        {
          uint64_t v14 = v31;
          uint64_t v23 = v29;
          uint64_t v24 = v35;
          char v15 = v36;
          long long v27 = v33;
          long long v28 = v37;
          uint64_t v25 = v34;
          uint64_t v26 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v6 = sub_1001B2444(0, v6[2] + 1, 1, v6);
          }
          unint64_t v17 = v6[2];
          unint64_t v16 = v6[3];
          if (v17 >= v16 >> 1) {
            unint64_t v6 = sub_1001B2444((void *)(v16 > 1), v17 + 1, 1, v6);
          }
          v6[2] = v17 + 1;
          uint64_t v8 = &v6[11 * v17];
          v8[4] = v23;
          v8[5] = v13;
          void v8[6] = v14;
          v8[7] = v26;
          *((_OWORD *)v8 + 4) = v27;
          v8[10] = v25;
          v8[11] = v24;
          *((unsigned char *)v8 + 96) = v15 & 1;
          *(_OWORD *)(v8 + 13) = v28;
          uint64_t v5 = v19;
          unint64_t v4 = v20;
        }
        ++v7;
        if (v12 == v5)
        {
          swift_bridgeObjectRelease();
          return v6;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyArrayStorage;
}

void *sub_1000C5F78(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1001BF6C4(0, v1, 0);
  unint64_t result = (void *)sub_1000D7390(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v4;
  uint64_t v23 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    BOOL v11 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
    uint64_t v12 = v11[1];
    uint64_t v24 = *v11;
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    unint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      unint64_t result = (void *)sub_1001BF6C4(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    char v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v24;
    v15[5] = v12;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v10);
    if ((v16 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2 << (v5 & 0x3F));
    if (v17)
    {
      int64_t v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v21;
    }
    else
    {
      unint64_t v18 = v10 + 1;
      unint64_t v19 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v21;
      if (v10 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v10)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              unint64_t v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000C6184(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (void *)((char *)&v32[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *int64_t v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once();
LABEL_12:
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000FD84(v15, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v31 = a1;
      v33[0] = v19;
      *(_DWORD *)uint64_t v18 = 136446466;
      uint64_t v20 = sub_1000C8E54();
      v32[0] = sub_1001B3178(v20, v21, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain();
      v32[0] = sub_1001B3178(v31, a2, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] linkIsAvailable: for expired send token %{public}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    return;
  }
  swift_beginAccess();
  sub_1000A311C(v3 + 48, (uint64_t)v33);
  if (!v35)
  {
    sub_1000A3178((uint64_t)v33);
    goto LABEL_11;
  }
  sub_1000D6BEC((uint64_t)&v34, (uint64_t)v32);
  sub_1000A3178((uint64_t)v33);
  uint64_t v12 = v32[0];
  uint64_t v11 = v32[1];
  swift_bridgeObjectRetain();
  sub_1000D4FE8((uint64_t)v32);
  if (v12 == a1 && v11 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_11:
    if (qword_10037DE10 == -1) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_8:
  sub_1000A311C(v3 + 48, (uint64_t)v33);
  if (v35)
  {
    char v14 = v36;
    sub_1000A3178((uint64_t)v33);
    if (v14) {
      return;
    }
  }
  else
  {
    sub_1000A3178((uint64_t)v33);
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10000FD84(v22, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v23, v24))
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (*(void *)(v3 + 32)) {
      goto LABEL_20;
    }
LABEL_22:
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    goto LABEL_23;
  }
  uint64_t v25 = swift_slowAlloc();
  uint64_t v26 = swift_slowAlloc();
  uint64_t v31 = a1;
  v33[0] = v26;
  *(_DWORD *)uint64_t v25 = 136446466;
  uint64_t v27 = sub_1000C8E54();
  v32[0] = sub_1001B3178(v27, v28, v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v25 + 12) = 2082;
  swift_bridgeObjectRetain();
  v32[0] = sub_1001B3178(v31, a2, v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] linkIsAvailable: for token %{public}s", (uint8_t *)v25, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (!*(void *)(v3 + 32)) {
    goto LABEL_22;
  }
LABEL_20:
  *(unsigned char *)(v3 + 40) = 1;
LABEL_23:
  uint64_t v30 = sub_1000C8DDC();
  if (*(void *)(v29 + 112)) {
    *(unsigned char *)(v29 + 168) = 1;
  }
  ((void (*)(uint64_t *, void))v30)(v33, 0);
  if (*(void *)(v3 + 32))
  {
    *(unsigned char *)(v3 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
}

uint64_t sub_1000C6818()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *uint64_t v6 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  char v7 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  swift_beginAccess();
  sub_1000A311C(v2 + 48, (uint64_t)v18);
  if (!v20[1]) {
    return sub_1000A3178((uint64_t)v18);
  }
  sub_1000D6BEC((uint64_t)v20, (uint64_t)v17);
  sub_1000A3178((uint64_t)v18);
  uint64_t v1 = v17[0];
  uint64_t v6 = (uint64_t *)v17[1];
  swift_bridgeObjectRetain();
  sub_1000D4FE8((uint64_t)v17);
  if (qword_10037DE10 != -1) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000FD84(v8, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_bridgeObjectRetain();
  int64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v18[0] = v16;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v15 = v1;
    uint64_t v12 = sub_1000C8E54();
    v17[0] = sub_1001B3178(v12, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    swift_bridgeObjectRetain();
    v17[0] = sub_1001B3178(v15, (unint64_t)v6, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s] Resetting current send token %{public}s to nil", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (*(void *)(v2 + 32))
    {
LABEL_6:
      *(unsigned char *)(v2 + 40) = 1;
      goto LABEL_10;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (*(void *)(v2 + 32)) {
      goto LABEL_6;
    }
  }
  sub_100004010(&qword_100393AA0);
  sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
  Subject<>.send()();
LABEL_10:
  __int16 v19 = 0;
  memset(v18, 0, sizeof(v18));
  swift_beginAccess();
  sub_1000D7664((uint64_t)v18, v2 + 152);
  uint64_t result = swift_endAccess();
  if (*(void *)(v2 + 32))
  {
    *(unsigned char *)(v2 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    return Subject<>.send()();
  }
  return result;
}

void sub_1000C6C64(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *os_log_type_t v10 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v3 = v4 + 48;
  swift_beginAccess();
  uint64_t v7 = v4 + 152;
  sub_10000D2A0(v4 + 152, (uint64_t)&v42, &qword_100385E70);
  if (*((void *)&v42 + 1))
  {
    sub_1000D6B90((uint64_t)&v42, (uint64_t)v45);
    if ((v45[0] != a1 || v45[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10000FD84(v32, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      long long v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        *(void *)&long long v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446466;
        uint64_t v36 = sub_1000C8E54();
        uint64_t v41 = sub_1001B3178(v36, v37, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_1001B3178(a1, a2, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}s] donePreparingForSend: for expired send token %{public}s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        swift_bridgeObjectRelease_n();
      }

      goto LABEL_26;
    }
    if (qword_10037DE10 == -1)
    {
LABEL_7:
      uint64_t v12 = type metadata accessor for Logger();
      sub_10000FD84(v12, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v39 = a1;
        uint64_t v16 = v15;
        uint64_t v17 = swift_slowAlloc();
        uint64_t v40 = v3;
        *(void *)&long long v42 = v17;
        *(_DWORD *)uint64_t v16 = 136446466;
        uint64_t v18 = sub_1000C8E54();
        uint64_t v41 = sub_1001B3178(v18, v19, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_1001B3178(v39, a2, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] donePreparingForSend: for token %{public}s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (*(void *)(v4 + 32))
        {
LABEL_9:
          *(unsigned char *)(v4 + 40) = 1;
          goto LABEL_16;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
        if (*(void *)(v4 + 32)) {
          goto LABEL_9;
        }
      }
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
LABEL_16:
      uint64_t v26 = sub_1000C8E54();
      uint64_t v28 = v27;
      uint64_t v29 = v45[7];
      uint64_t v30 = type metadata accessor for QuestionnaireState.DefaultTextEncoder();
      uint64_t v31 = (void *)swift_allocObject();
      _OWORD v31[2] = v26;
      v31[3] = v28;
      v31[4] = v29;
      uint64_t v43 = v30;
      uint64_t v44 = &off_1003556C8;
      *(void *)&long long v42 = v31;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v4 + 80);
      sub_100009164(&v42, v4 + 80);
      sub_10000950C(v7, &qword_100385E70);
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_WORD *)(v7 + 64) = 0;
      swift_endAccess();
      if (*(void *)(v4 + 32))
      {
        *(unsigned char *)(v4 + 41) = 1;
      }
      else
      {
        sub_100004010(&qword_100393AA0);
        sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
        Subject<>.send()();
      }
LABEL_26:
      sub_1000D4FE8((uint64_t)v45);
      return;
    }
LABEL_28:
    swift_once();
    goto LABEL_7;
  }
  sub_10000950C((uint64_t)&v42, &qword_100385E70);
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10000FD84(v20, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v24 = sub_1000C8E54();
    *(void *)&long long v42 = sub_1001B3178(v24, v25, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] donePreparingForSend: send is not in progress", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1000C7498(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (uint64_t *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *os_log_type_t v14 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v53 = a3;
  a3 = v4 + 48;
  swift_beginAccess();
  sub_1000A311C(v4 + 48, (uint64_t)&v62);
  if (v71[1])
  {
    uint64_t v50 = a2;
    int v51 = a1;
    sub_1000D6BEC((uint64_t)v71, (uint64_t)&v60);
    sub_1000A3178((uint64_t)&v62);
    uint64_t v16 = v60;
    unint64_t v17 = v61;
    swift_bridgeObjectRetain();
    sub_1000D4FE8((uint64_t)&v60);
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000FD84(v18, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_bridgeObjectRetain();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v52 = v4 + 48;
      uint64_t v22 = v21;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v62 = v49;
      *(_DWORD *)uint64_t v22 = 136446466;
      uint64_t v23 = sub_1000C8E54();
      uint64_t v60 = sub_1001B3178(v23, v24, &v62);
      uint64_t v48 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_1001B3178(v48, v17, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%{public}s] prepareForSend: send token %{public}s is already pending, overriding", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v52;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    LOBYTE(a1) = v51;
  }
  else
  {
    sub_1000A3178((uint64_t)&v62);
  }
  UUID.init()();
  uint64_t v25 = UUID.uuidString.getter();
  unint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v55);
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = sub_1000C5F78(v28);
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_1000D75CC((uint64_t)v29);
  swift_bridgeObjectRelease();
  unint64_t v31 = sub_1002836FC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v62 = v25;
  unint64_t v63 = v27;
  uint64_t v64 = v53;
  swift_unknownObjectWeakInit();
  uint64_t v65 = v30;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  unint64_t v68 = v31;
  char v69 = a1 & 1;
  char v70 = 0;
  if (qword_10037DE10 != -1) {
    goto LABEL_22;
  }
LABEL_11:
  uint64_t v32 = type metadata accessor for Logger();
  sub_10000FD84(v32, (uint64_t)qword_1003A9B08);
  sub_1000D6BEC((uint64_t)&v62, (uint64_t)&v60);
  sub_1000D6BEC((uint64_t)&v62, (uint64_t)v59);
  sub_1000D6BEC((uint64_t)&v62, (uint64_t)v58);
  swift_retain_n();
  long long v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v52 = a3;
    uint64_t v57 = v36;
    *(_DWORD *)uint64_t v35 = 136446978;
    uint64_t v37 = sub_1000C8E54();
    uint64_t v56 = sub_1001B3178(v37, v38, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v39 = v60;
    unint64_t v40 = v61;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1001B3178(v39, v40, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000D4FE8((uint64_t)&v60);
    *(_WORD *)(v35 + 22) = 2050;
    uint64_t v41 = *(void *)(v59[4] + 16);
    sub_1000D4FE8((uint64_t)v59);
    uint64_t v56 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v35 + 32) = 1026;
    int v42 = v58[64];
    sub_1000D4FE8((uint64_t)v58);
    LODWORD(v56) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}s] prepareForSend: new send token - %{public}s, texts to compress - %{public}ld, linkIsAvailable - %{BOOL,public}d", (uint8_t *)v35, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000D4FE8((uint64_t)v58);
    sub_1000D4FE8((uint64_t)v59);
    swift_release_n();
    sub_1000D4FE8((uint64_t)&v60);
  }

  if (*(void *)(v4 + 32))
  {
    *(unsigned char *)(v4 + 40) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  sub_1000D6BEC((uint64_t)&v62, (uint64_t)&v60);
  swift_beginAccess();
  sub_1000D7664((uint64_t)&v60, v4 + 152);
  swift_endAccess();
  if (*(void *)(v4 + 32))
  {
    *(unsigned char *)(v4 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  uint64_t v43 = v62;
  unint64_t v44 = v63;
  swift_bridgeObjectRetain();
  sub_1000D23D4(v43, v44);
  swift_bridgeObjectRelease();
  sub_1000D6BEC((uint64_t)&v62, (uint64_t)&v60);
  sub_1000D4FE8((uint64_t)&v60);
  uint64_t v45 = v62;
  sub_1000D6BEC((uint64_t)&v62, (uint64_t)v59);
  swift_bridgeObjectRetain();
  sub_1000D4FE8((uint64_t)v59);
  sub_1000D4FE8((uint64_t)&v62);
  return v45;
}

void sub_1000C7D1C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)&v37[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *uint64_t v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_33:
    swift_once();
LABEL_15:
    uint64_t v23 = type metadata accessor for Logger();
    sub_10000FD84(v23, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v36 = a1;
      v38[0] = v24;
      *(_DWORD *)uint64_t v18 = 136446466;
      uint64_t v25 = sub_1000C8E54();
      v37[0] = sub_1001B3178(v25, v26, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain();
      v37[0] = sub_1001B3178(v36, a2, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v22 = "[%{public}s] mandatoryWaitBeforeSendHasBeenObserved: for expired send token %{public}s";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  swift_beginAccess();
  sub_1000A311C(v3 + 48, (uint64_t)v38);
  if (!v40)
  {
    sub_1000A3178((uint64_t)v38);
    goto LABEL_14;
  }
  sub_1000D6BEC((uint64_t)&v39, (uint64_t)v37);
  sub_1000A3178((uint64_t)v38);
  uint64_t v12 = v37[0];
  uint64_t v11 = v37[1];
  swift_bridgeObjectRetain();
  sub_1000D4FE8((uint64_t)v37);
  if (v12 == a1 && v11 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_14:
    if (qword_10037DE10 == -1) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_8:
  sub_1000A311C(v3 + 48, (uint64_t)v38);
  if (v40)
  {
    int v14 = v41;
    sub_1000A3178((uint64_t)v38);
    if (v14 == 1)
    {
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10000FD84(v15, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v36 = a1;
        v38[0] = v19;
        *(_DWORD *)uint64_t v18 = 136446466;
        uint64_t v20 = sub_1000C8E54();
        v37[0] = sub_1001B3178(v20, v21, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2082;
        swift_bridgeObjectRetain();
        v37[0] = sub_1001B3178(v36, a2, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v22 = "[%{public}s] mandatoryWaitBeforeSendHasBeenObserved: already reported for token %{public}s";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v16, v17, v22, (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
LABEL_18:

      swift_bridgeObjectRelease_n();
      swift_release_n();
      return;
    }
  }
  else
  {
    sub_1000A3178((uint64_t)v38);
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10000FD84(v27, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v28, v29))
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (*(void *)(v3 + 32)) {
      goto LABEL_24;
    }
LABEL_26:
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    goto LABEL_27;
  }
  uint64_t v30 = swift_slowAlloc();
  uint64_t v31 = swift_slowAlloc();
  uint64_t v36 = a1;
  v38[0] = v31;
  *(_DWORD *)uint64_t v30 = 136446466;
  uint64_t v32 = sub_1000C8E54();
  v37[0] = sub_1001B3178(v32, v33, v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 12) = 2082;
  swift_bridgeObjectRetain();
  v37[0] = sub_1001B3178(v36, a2, v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s] mandatoryWaitBeforeSendHasBeenObserved: for token %{public}s", (uint8_t *)v30, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (!*(void *)(v3 + 32)) {
    goto LABEL_26;
  }
LABEL_24:
  *(unsigned char *)(v3 + 40) = 1;
LABEL_27:
  uint64_t v35 = sub_1000C8DDC();
  if (*(void *)(v34 + 112)) {
    *(unsigned char *)(v34 + 169) = 1;
  }
  ((void (*)(uint64_t *, void))v35)(v38, 0);
  if (*(void *)(v3 + 32))
  {
    *(unsigned char *)(v3 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
}

uint64_t sub_1000C850C(char a1)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    switch(a1)
    {
      case 1:
        unint64_t v6 = *(void *)(Strong[7] + 152);
        if (v6 < 2) {
          goto LABEL_26;
        }
        uint64_t v7 = *(void *)(v6 + 16);
        swift_unknownObjectRelease();
        char v8 = v7 != 0;
        return v8 & 1;
      case 2:
        uint64_t v9 = *(void *)(Strong[6] + 32);
        if (!*(void *)(v9 + 64)) {
          goto LABEL_26;
        }
        uint64_t v4 = *(void *)(v9 + 80);
        uint64_t v5 = 1;
        goto LABEL_9;
      case 3:
        char v10 = sub_1001AFD54();
        goto LABEL_19;
      case 4:
        uint64_t v11 = Strong[11];
        if (*(unsigned char *)(v11 + 248) == 3 || (*(unsigned char *)(v11 + 232) & 1) != 0 || *(void *)(v11 + 224) != 1) {
          goto LABEL_26;
        }
        int v12 = byte_10038ADB8;
        swift_unknownObjectRelease();
        char v8 = (v12 & 1) == 0;
        if (v12 == 2) {
          char v8 = 0;
        }
        return v8 & 1;
      case 5:
        uint64_t v18 = Strong[7];
        if (*(unsigned char *)(v18 + 128) == 3 || (*(unsigned char *)(v18 + 112) & 1) != 0 || *(void *)(v18 + 104) != 8) {
          goto LABEL_26;
        }
        int v19 = byte_10038ADB8;
        swift_unknownObjectRelease();
        char v8 = v19 & 1;
        if (v19 == 2) {
          char v8 = 0;
        }
        return v8 & 1;
      case 6:
        int v20 = *(unsigned __int8 *)(Strong[11] + 248);
        swift_unknownObjectRelease();
        char v8 = v20 == 2;
        return v8 & 1;
      case 7:
        uint64_t v13 = Strong[11];
        int v14 = *(_DWORD *)(v13 + 200);
        int v15 = *(unsigned __int8 *)(v13 + 248);
        swift_unknownObjectRelease();
        char v8 = (v15 == 3) | v14;
        return v8 & 1;
      case 8:
        if (*(void *)(Strong[11] + 160)) {
          unint64_t v21 = *(void **)(Strong[11] + 160);
        }
        else {
          unint64_t v21 = _swiftEmptyArrayStorage;
        }
        uint64_t v22 = v21[2];
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        char v8 = v22 != 0;
        return v8 & 1;
      case 9:
        char v10 = sub_1001AFE3C();
        goto LABEL_19;
      default:
        uint64_t v3 = *(void *)(Strong[6] + 32);
        if (!*(void *)(v3 + 64))
        {
LABEL_26:
          swift_unknownObjectRelease();
          goto LABEL_27;
        }
        uint64_t v4 = *(void *)(v3 + 80);
        uint64_t v5 = 0;
LABEL_9:
        char v10 = sub_100078E0C(v5, v4);
LABEL_19:
        char v16 = v10;
        swift_unknownObjectRelease();
        uint64_t result = v16 & 1;
        break;
    }
  }
  else
  {
LABEL_27:
    char v8 = 0;
    return v8 & 1;
  }
  return result;
}

void *sub_1000C8730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_100004010(&qword_100393AA0);
  swift_allocObject();
  v3[2] = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v8 = PassthroughSubject.init()();
  v3[6] = a3;
  v3[7] = 0;
  v3[3] = v8;
  v3[4] = a1;
  v3[5] = a2;
  uint64_t v9 = self;
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  v15[4] = sub_1000D7CDC;
  v15[5] = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10008A9B0;
  void v15[3] = &unk_100355840;
  uint64_t v11 = _Block_copy(v15);
  swift_release();
  id v12 = [v9 scheduledTimerWithTimeInterval:1 repeats:v11 block:1.0];
  _Block_release(v11);
  uint64_t v13 = (void *)v4[7];
  v4[7] = v12;

  return v4;
}

uint64_t sub_1000C88A0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000C88F8();
    return swift_release();
  }
  return result;
}

void sub_1000C88F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *uint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = (void *)v1[7];
  if (v7)
  {
    uint64_t v8 = v1[6];
    if (v8 < 0)
    {
      [v7 invalidate];
      unint64_t v21 = (void *)v1[7];
      v1[7] = 0;

LABEL_13:
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
      return;
    }
    v1[6] = v8 - 1;
    if (qword_10037DE10 == -1)
    {
LABEL_5:
      uint64_t v9 = type metadata accessor for Logger();
      sub_10000FD84(v9, (uint64_t)qword_1003A9B08);
      swift_retain();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136446466;
        uint64_t v13 = v1[4];
        unint64_t v14 = v1[5];
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1001B3178(v13, v14, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2050;
        uint64_t v22 = v1[6];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] %{public}ld seconds left before auto send", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      goto LABEL_13;
    }
LABEL_16:
    swift_once();
    goto LABEL_5;
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000FD84(v15, (uint64_t)qword_1003A9B08);
  swift_retain();
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v19 = v1[4];
    unint64_t v20 = v1[5];
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1001B3178(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] Autosend timer already expired", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

uint64_t sub_1000C8D8C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t (*sub_1000C8DDC())()
{
  return j__swift_endAccess;
}

dispatch_semaphore_t sub_1000C8E30()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(1);
  qword_1003859C8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000C8E54()
{
  uint64_t v1 = 69;
  if (*(unsigned char *)(*(void *)(v0 + 264) + 32)) {
    uint64_t v1 = 82;
  }
  uint64_t v8 = v1;
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 46;
  v2._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._uint64_t object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

BOOL sub_1000C8F28()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1000C8FC0);
  }
  BOOL result = 0;
  switch(*(unsigned char *)(v2 + v1 + 31))
  {
    case 2:
      if (v2 > 1) {
        goto LABEL_3;
      }
      BOOL result = *(void *)(*(void *)(v0 + 48) + 16) != 0;
      break;
    case 3:
    case 4:
LABEL_3:
      BOOL result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C8FD4@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 144);
  if (!*(void *)(v3 + 16))
  {
    uint64_t v5 = 0;
LABEL_6:
    LOBYTE(v4) = 1;
    goto LABEL_8;
  }
  int v4 = *(unsigned __int8 *)(v3 + 32);
  if (v4 != 2)
  {
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(v1 + 128);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_retain();
  LOBYTE(v4) = 2;
LABEL_8:
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v5;
  return swift_retain();
}

void *sub_1000C9064()
{
  unint64_t v2 = v0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  unint64_t v33 = _swiftEmptyArrayStorage;
  swift_beginAccess();
  uint64_t v4 = v2[18];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    uint64_t v30 = v5;
    uint64_t v31 = v4;
    uint64_t v29 = v4 + 32;
    while (1)
    {
      if (v7 >= *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        swift_once();
LABEL_37:
        uint64_t v20 = type metadata accessor for Logger();
        sub_10000FD84(v20, (uint64_t)qword_1003A9B08);
        swift_retain();
        swift_retain();
        sub_10009049C(v1);
        swift_retain();
        swift_retain();
        sub_10009049C(v1);
        unint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446467;
          uint64_t v24 = sub_1000C8E54();
          sub_1001B3178(v24, v25, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2081;
          swift_retain();
          sub_10009049C(v1);
          uint64_t v26 = String.init<A>(describing:)();
          sub_1001B3178(v26, v27, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          sub_1000904E0(v1);
          swift_release();
          sub_1000904E0(v1);
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] buildNavigationPath: dropping first page: %{private}s", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          sub_1000904E0(v1);
        }
        else
        {
          swift_release();
          sub_1000904E0(v1);
          swift_release();
          swift_release_n();
          sub_1000904E0(v1);
          swift_release();
          sub_1000904E0(v1);
        }
        return v33;
      }
      int v9 = *(unsigned __int8 *)(v6 + v7);
      if (v9 != 2) {
        break;
      }
      unint64_t v10 = v2[15];
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          uint64_t v17 = v2[17];
          if (!v17) {
            goto LABEL_5;
          }
LABEL_29:
          swift_retain_n();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v3 = sub_1001B2320(0, v3[2] + 1, 1, v3);
          }
          unint64_t v1 = v3[2];
          unint64_t v18 = v3[3];
          if (v1 >= v18 >> 1) {
            uint64_t v3 = sub_1001B2320((void *)(v18 > 1), v1 + 1, 1, v3);
          }
          v3[2] = v1 + 1;
          uint64_t v19 = &v3[5 * v1];
          v19[4] = v2;
          *((unsigned char *)v19 + 40) = 2;
          v19[7] = 0;
          unsigned char v19[8] = 0;
          v19[6] = v17;
          swift_release();
LABEL_4:
          unint64_t v33 = v3;
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11) {
          goto LABEL_28;
        }
      }
      if (v11 < 1) {
        goto LABEL_42;
      }
      uint64_t v12 = 0;
      do
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v13 = *(void *)(v10 + 8 * v12 + 32);
          swift_retain();
        }
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_1001B2320(0, v3[2] + 1, 1, v3);
        }
        unint64_t v1 = v3[2];
        unint64_t v14 = v3[3];
        if (v1 >= v14 >> 1) {
          uint64_t v3 = sub_1001B2320((void *)(v14 > 1), v1 + 1, 1, v3);
        }
        v3[2] = v1 + 1;
        uint64_t v15 = &v3[5 * v1];
        v15[4] = v2;
        ++v12;
        *((unsigned char *)v15 + 40) = 2;
        v15[7] = 0;
        v15[8] = 0;
        void v15[6] = v13;
        swift_release();
      }
      while (v11 != v12);
      swift_bridgeObjectRelease();
      unint64_t v33 = v3;
      uint64_t v5 = v30;
      uint64_t v4 = v31;
      uint64_t v6 = v29;
      uint64_t v17 = v2[17];
      if (v17) {
        goto LABEL_29;
      }
LABEL_5:
      if (++v7 == v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_1001B2320(0, v3[2] + 1, 1, v3);
    }
    unint64_t v1 = v3[2];
    unint64_t v16 = v3[3];
    if (v1 >= v16 >> 1) {
      uint64_t v3 = sub_1001B2320((void *)(v16 > 1), v1 + 1, 1, v3);
    }
    v3[2] = v1 + 1;
    uint64_t v8 = &v3[5 * v1];
    v8[4] = v2;
    *((unsigned char *)v8 + 40) = v9;
    v8[7] = 0;
    v8[8] = 0;
    void v8[6] = 0;
    goto LABEL_4;
  }
LABEL_35:
  if (v3[2])
  {
    unint64_t v1 = v3[6];
    swift_retain();
    sub_10009049C(v1);
    sub_1001D7690(0, 1);
    if (qword_10037DE10 != -1) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  return v33;
}

uint64_t sub_1000C9680()
{
  swift_beginAccess();
  sub_1000A311C(v0 + 48, (uint64_t)v6);
  if (v7[1])
  {
    sub_1000D6BEC((uint64_t)v7, (uint64_t)&v5);
    sub_1000A3178((uint64_t)v6);
    sub_1000D6BEC((uint64_t)&v5, (uint64_t)v4);
    sub_1000D4FE8((uint64_t)v4);
    uint64_t v1 = v5;
    sub_1000D6BEC((uint64_t)&v5, (uint64_t)v3);
    swift_bridgeObjectRetain();
    sub_1000D4FE8((uint64_t)v3);
    sub_1000D4FE8((uint64_t)&v5);
  }
  else
  {
    sub_1000A3178((uint64_t)v6);
    return 0;
  }
  return v1;
}

void sub_1000C978C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v15 = 0;
  memset(v14, 0, sizeof(v14));
  swift_retain();
  unint64_t v5 = sub_1002833BC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v6 = sub_1002834D8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v7 = sub_100285D1C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v8 = sub_1002835E4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v9 = sub_1002836FC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = type metadata accessor for QuestionnaireState.DefaultTextEncoder();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 63;
  v11[3] = 0xE100000000000000;
  v11[4] = v9;
  *(void *)(v3 + 104) = v10;
  *(void *)(v3 + 112) = &off_1003556C8;
  *(void *)(v3 + 72) = v8;
  *(void *)(v3 + 80) = v11;
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 56) = v6;
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 120) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = &off_10034A3F8;
  sub_1000D7828((uint64_t)v14, v3 + 152);
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 248) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v3 + 256) = 2;
  if (qword_10037DD40 != -1) {
    swift_once();
  }
  OS_dispatch_semaphore.wait()();
  uint64_t v12 = qword_1003859C0;
  if (qword_1003859C0 == -1)
  {
    __break(1u);
  }
  else
  {
    ++qword_1003859C0;
    OS_dispatch_semaphore.signal()();
    *(void *)(v3 + 264) = a1;
    *(void *)(v3 + 272) = v12;
    *(void *)(v3 + 248) = a3;
    swift_unknownObjectWeakAssign();
    swift_retain();
    swift_release();
    *(void *)(v3 + 32) = 0;
    *(_WORD *)(v3 + 40) = 0;
    sub_100004010(&qword_100393AA0);
    swift_allocObject();
    *(void *)(v3 + 16) = PassthroughSubject.init()();
    swift_allocObject();
    *(void *)(v3 + 24) = PassthroughSubject.init()();
    swift_retain();
    sub_1000C99B4(0);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1000C99B4(char a1)
{
  uint64_t v2 = v1;
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000FD84(v3, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    unint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v7 = sub_1000C8E54();
    HIDWORD(v44[0]) = (unint64_t)sub_1001B3178(v7, v8, (uint64_t *)&v45) >> 32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 1024;
    LODWORD(v44[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] State reset(onBackToFirstPage: %{BOOL}d)", (uint8_t *)v6, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  __int16 v60 = 0;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  unint64_t v9 = sub_1002833BC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v10 = sub_1002834D8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v11 = sub_100285D1C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v12 = sub_1002835E4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v13 = sub_1002836FC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = type metadata accessor for QuestionnaireState.DefaultTextEncoder();
  __int16 v15 = (void *)swift_allocObject();
  v15[2] = 63;
  void v15[3] = 0xE100000000000000;
  v15[4] = v13;
  uint64_t v43 = v14;
  uint64_t v50 = v14;
  int v51 = &off_1003556C8;
  unint64_t v48 = v12;
  uint64_t v49 = v15;
  unint64_t v45 = v9;
  unint64_t v46 = v10;
  unint64_t v47 = v11;
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v53 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = &off_10034A1A0;
  swift_beginAccess();
  sub_1000D7CEC((uint64_t)&v45, v2 + 48);
  swift_endAccess();
  uint64_t v16 = *(void *)(v2 + 264);
  uint64_t v17 = sub_10009ABC0(v2);
  int v18 = *(unsigned __int8 *)(v2 + 256);
  if (v18 == 2)
  {
    uint64_t v19 = &off_10034A1C8;
  }
  else
  {
    char v20 = ((v18 & 1) == 0) ^ *(unsigned char *)(v16 + 32);
    unint64_t v21 = &off_10034A240;
    if (a1) {
      unint64_t v21 = &off_10034A218;
    }
    if (v20) {
      uint64_t v19 = v21;
    }
    else {
      uint64_t v19 = &off_10034A1F0;
    }
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  os_log_type_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  uint64_t v42 = v2 + 48;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446723;
    uint64_t v25 = sub_1000C8E54();
    unint64_t v45 = sub_1001B3178(v25, v26, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2081;
    if (v17)
    {
      uint64_t v27 = *(void *)(v17 + 16);
      uint64_t v28 = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    unint64_t v45 = v27;
    unint64_t v46 = v28;
    sub_100004010(&qword_100380920);
    uint64_t v29 = String.init<A>(describing:)();
    unint64_t v45 = sub_1001B3178(v29, v30, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v31 = Array.description.getter();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    unint64_t v45 = sub_1001B3178(v31, v33, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s] First question: %{private}s, initial stage history: %{public}s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  __int16 v60 = 0;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  unint64_t v34 = sub_1002833BC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v35 = sub_1002834D8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v36 = sub_100285D1C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v37 = sub_1002835E4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v38 = sub_1002836FC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = 63;
  v39[3] = 0xE100000000000000;
  v39[4] = v38;
  unint64_t v48 = v37;
  uint64_t v49 = v39;
  unint64_t v45 = v34;
  unint64_t v46 = v35;
  unint64_t v47 = v36;
  uint64_t v50 = v43;
  int v51 = &off_1003556C8;
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v53 = v17;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v54 = v17;
  uint64_t v55 = v19;
  swift_beginAccess();
  swift_retain();
  sub_1000D7D24((uint64_t)&v45, v42);
  swift_endAccess();
  return sub_1000A3178((uint64_t)&v45);
}

void sub_1000C9FF4()
{
  if (sub_1000CE1C4(1u, 2))
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000FD84(v1, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      v15[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      uint64_t v5 = sub_1000C8E54();
      sub_1001B3178(v5, v6, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%{public}s] Starting", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    if (*(void *)(v0 + 136)) {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446467;
      uint64_t v10 = sub_1000C8E54();
      sub_1001B3178(v10, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2081;
      swift_bridgeObjectRetain();
      sub_100004010(&qword_100380920);
      uint64_t v12 = String.init<A>(describing:)();
      sub_1001B3178(v12, v13, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] Current question: %{private}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
  }
}

uint64_t sub_1000CA380()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    int v4 = *(unsigned __int8 *)(v3 + v2 + 32 - 1);
    if (v4 == 1)
    {
      return 1;
    }
    else
    {
      BOOL v5 = v3 == 2 && v4 == 3;
      if (v5 && *(unsigned char *)(v2 + 32) == 1 && *(unsigned char *)(v2 + 33) == 3)
      {
        uint64_t v6 = sub_1000C9064()[2];
        swift_bridgeObjectRelease();
        return v6 == 1;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CA424(uint64_t result)
{
  char v2 = result;
  int v3 = *(unsigned __int8 *)(v1 + 256);
  if (v3 == 2)
  {
    if (result == 2) {
      return result;
    }
  }
  else if (result != 2 && ((v3 ^ result) & 1) == 0)
  {
    return result;
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000FD84(v4, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  BOOL v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446722;
    uint64_t v8 = sub_1000C8E54();
    sub_1001B3178(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    sub_100004010(&qword_100385EA0);
    uint64_t v10 = String.init<A>(describing:)();
    sub_1001B3178(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    uint64_t v12 = String.init<A>(describing:)();
    sub_1001B3178(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] invokedFromScope changed from: %s to %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  *(unsigned char *)(v1 + 256) = v2;
  uint64_t result = sub_1000C8F28();
  if ((result & 1) == 0)
  {
    if (*(void *)(v1 + 32))
    {
      *(unsigned char *)(v1 + 40) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    uint64_t result = sub_1000C99B4(0);
    if (*(void *)(v1 + 32))
    {
      *(unsigned char *)(v1 + 41) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      return Subject<>.send()();
    }
  }
  return result;
}

uint64_t sub_1000CA784(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 144);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    __break(1u);
LABEL_86:
    swift_once();
LABEL_9:
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000FD84(v21, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446723;
      uint64_t v24 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v24, v25, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2081;
      uint64_t v26 = a1[2];
      unint64_t v27 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v26, v27, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2082;
      LOBYTE(v135) = v4;
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v135 = sub_1001B3178(v28, v29, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v22, "[%{public}s] Requested to record answer for question %{private}s on %{public}s stage, ignoring", (uint8_t *)v23, 0x20u);
      goto LABEL_11;
    }
LABEL_12:

    swift_release_n();
    swift_release_n();
    return 0;
  }
  int v4 = *(unsigned __int8 *)(v10 + v9 + 31);
  if (v4 != 2)
  {
    if (qword_10037DE10 == -1) {
      goto LABEL_9;
    }
    goto LABEL_86;
  }
  unint64_t v11 = *(void *)(v3 + 120);
  swift_bridgeObjectRetain();
  char v12 = sub_10012C77C((uint64_t)a1, v11);
  swift_bridgeObjectRelease();
  if (v12)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000FD84(v13, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446467;
      uint64_t v17 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v17, v18, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2081;
      uint64_t v19 = a1[2];
      unint64_t v20 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v19, v20, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] Question %{private}s is already recorded", (uint8_t *)v16, 0x16u);
LABEL_11:
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
    goto LABEL_12;
  }
  if (a2)
  {
    uint64_t v31 = (void *)a1[14];
    if (v31 && (uint64_t v32 = *(void *)(a2 + 16), v33 = *(void *)(a2 + 24), (sub_10012C964(v32, v33, v31) & 1) == 0))
    {
      uint64_t v56 = qword_10037DE10;
      swift_retain();
      if (v56 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_10000FD84(v57, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      long long v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        os_log_type_t v131 = v59;
        uint64_t v60 = swift_slowAlloc();
        v134[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136446723;
        loga = v58;
        uint64_t v61 = sub_1000C8E54();
        uint64_t v135 = sub_1001B3178(v61, v62, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 2081;
        uint64_t typea = v32;
        char v63 = a3;
        uint64_t v65 = a1[2];
        unint64_t v64 = a1[3];
        swift_bridgeObjectRetain();
        uint64_t v66 = v65;
        a3 = v63;
        uint64_t v135 = sub_1001B3178(v66, v64, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 22) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_1001B3178(typea, v33, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, v131, "[%{public}s] Question %{private}s optionsOrder must contain %{private}s", (uint8_t *)v60, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        swift_release_n();
        swift_release_n();
      }
    }
    else
    {
      swift_retain();
    }
    if (!a3)
    {
      swift_release();
      goto LABEL_37;
    }
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10000FD84(v34, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      char v132 = a3;
      uint64_t v37 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446979;
      uint64_t v38 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v38, v39, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2081;
      os_log_type_t type = v36;
      uint64_t v41 = a1[2];
      unint64_t v40 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v41, v40, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 22) = 2081;
      uint64_t v42 = *(void *)(a2 + 16);
      unint64_t v43 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v42, v43, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 32) = 2080;
      LOBYTE(v135) = v132;
      uint64_t v44 = String.init<A>(describing:)();
      uint64_t v135 = sub_1001B3178(v44, v45, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, type, "[%{public}s] Question %{private}s recorded with option %{private}s, but the provided choice is %s (expected to be .answered)", (uint8_t *)v37, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v132;
      swift_slowDealloc();
      swift_release();

      goto LABEL_37;
    }

    swift_release_n();
    swift_release_n();
  }
  else
  {
    if (a3) {
      goto LABEL_37;
    }
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_10000FD84(v46, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      char v133 = a3;
      uint64_t v49 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446723;
      os_log_type_t log = v48;
      uint64_t v50 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v50, v51, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2081;
      uint64_t v52 = a1[2];
      unint64_t v53 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v52, v53, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 22) = 2080;
      LOBYTE(v135) = 0;
      uint64_t v54 = String.init<A>(describing:)();
      uint64_t v135 = sub_1001B3178(v54, v55, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, log, "[%{public}s] Question %{private}s recorded with nil option, but the provided choice is %s", (uint8_t *)v49, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v133;
      swift_slowDealloc();

      goto LABEL_37;
    }

    swift_release_n();
  }
  swift_release_n();
LABEL_37:
  uint64_t v67 = *(void *)(v5 + 32);
  BOOL v68 = __CFADD__(v67, 1);
  uint64_t v69 = v67 + 1;
  if (v68)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 32) = v69;
    *(unsigned char *)(v5 + 40) = 1;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v135 = *(void *)(v5 + 48);
    *(void *)(v5 + 48) = 0x8000000000000000;
    sub_100269164(a3, a2, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
    *(void *)(v5 + 48) = v135;
    swift_release();
    swift_bridgeObjectRelease();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v5 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)(v5 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      goto LABEL_39;
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_39:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  *(void *)(v5 + 136) = sub_10009ABC0(v5);
  swift_release();
  if (*(void *)(v5 + 32))
  {
    *(unsigned char *)(v5 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  switch(a3)
  {
    case 1:
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      sub_10000FD84(v83, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v84, v85)) {
        goto LABEL_74;
      }
      uint64_t v86 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136446467;
      uint64_t v87 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v87, v88, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v86 + 12) = 2081;
      uint64_t v89 = a1[2];
      unint64_t v90 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v89, v90, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v91 = "[%{public}s] Recorded free form answer for: %{private}s";
      goto LABEL_69;
    case 2:
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v92 = type metadata accessor for Logger();
      sub_10000FD84(v92, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v84, v85)) {
        goto LABEL_74;
      }
      uint64_t v86 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136446467;
      uint64_t v93 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v93, v94, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v86 + 12) = 2081;
      uint64_t v95 = a1[2];
      unint64_t v96 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v95, v96, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v91 = "[%{public}s] Recorded multiple choice answer for: %{private}s";
      goto LABEL_69;
    case 3:
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v97 = type metadata accessor for Logger();
      sub_10000FD84(v97, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v84, v85)) {
        goto LABEL_74;
      }
      uint64_t v86 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136446467;
      uint64_t v98 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v98, v99, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v86 + 12) = 2081;
      uint64_t v100 = a1[2];
      unint64_t v101 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v100, v101, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v91 = "[%{public}s] Recorded skip for: %{private}s";
      goto LABEL_69;
    case 4:
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      sub_10000FD84(v102, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v84, v85)) {
        goto LABEL_74;
      }
      uint64_t v86 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136446467;
      uint64_t v103 = sub_1000C8E54();
      uint64_t v135 = sub_1001B3178(v103, v104, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v86 + 12) = 2081;
      uint64_t v105 = a1[2];
      unint64_t v106 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v135 = sub_1001B3178(v105, v106, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v91 = "[%{public}s] Recorded built-in for: %{private}s";
      goto LABEL_69;
    default:
      uint64_t v71 = qword_10037DE10;
      if (a2)
      {
        swift_retain();
        if (v71 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        sub_10000FD84(v72, (uint64_t)qword_1003A9B08);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v73, v74))
        {
          uint64_t v75 = swift_slowAlloc();
          v134[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v75 = 136446723;
          uint64_t v76 = sub_1000C8E54();
          uint64_t v135 = sub_1001B3178(v76, v77, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v75 + 12) = 2081;
          uint64_t v79 = *(void *)(a2 + 16);
          unint64_t v78 = *(void *)(a2 + 24);
          swift_bridgeObjectRetain();
          uint64_t v135 = sub_1001B3178(v79, v78, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v75 + 22) = 2081;
          uint64_t v80 = a1[2];
          unint64_t v81 = a1[3];
          swift_bridgeObjectRetain();
          uint64_t v135 = sub_1001B3178(v80, v81, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "[%{public}s] Recorded answer: %{private}s for: %{private}s", (uint8_t *)v75, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          uint64_t v82 = *(void *)(v5 + 136);
          if (!v82) {
            goto LABEL_70;
          }
          goto LABEL_76;
        }

        swift_release_n();
        swift_release_n();
      }
      else
      {
        if (qword_10037DE10 != -1) {
          swift_once();
        }
        uint64_t v107 = type metadata accessor for Logger();
        sub_10000FD84(v107, (uint64_t)qword_1003A9B08);
        swift_retain_n();
        swift_retain_n();
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          uint64_t v86 = swift_slowAlloc();
          v134[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = 136446467;
          uint64_t v108 = sub_1000C8E54();
          uint64_t v135 = sub_1001B3178(v108, v109, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 12) = 2081;
          uint64_t v110 = a1[2];
          unint64_t v111 = a1[3];
          swift_bridgeObjectRetain();
          uint64_t v135 = sub_1001B3178(v110, v111, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          uint64_t v91 = "[%{public}s] Recorded nil answer for: %{private}s";
LABEL_69:
          _os_log_impl((void *)&_mh_execute_header, v84, v85, v91, (uint8_t *)v86, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v82 = *(void *)(v5 + 136);
          if (!v82) {
            goto LABEL_70;
          }
          goto LABEL_76;
        }
LABEL_74:

        swift_release_n();
      }
      swift_release_n();
      uint64_t v82 = *(void *)(v5 + 136);
      if (!v82)
      {
LABEL_70:
        if (qword_10037DE10 != -1) {
          swift_once();
        }
        uint64_t v112 = type metadata accessor for Logger();
        sub_10000FD84(v112, (uint64_t)qword_1003A9B08);
        swift_retain_n();
        uint64_t v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          v134[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v115 = 136446210;
          uint64_t v116 = sub_1000C8E54();
          uint64_t v135 = sub_1001B3178(v116, v117, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v113, v114, "[%{public}s] Last question was answered or skipped, questionnaire is done", v115, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        sub_1000CF41C();
        goto LABEL_83;
      }
LABEL_76:
      uint64_t v118 = qword_10037DE10;
      swift_retain();
      if (v118 != -1) {
        swift_once();
      }
      uint64_t v119 = type metadata accessor for Logger();
      sub_10000FD84(v119, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      uint64_t v120 = Logger.logObject.getter();
      os_log_type_t v121 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v120, v121))
      {
        uint64_t v122 = swift_slowAlloc();
        v134[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v122 = 136446467;
        uint64_t v123 = sub_1000C8E54();
        uint64_t v135 = sub_1001B3178(v123, v124, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v122 + 12) = 2081;
        uint64_t v125 = *(void *)(v82 + 16);
        unint64_t v126 = *(void *)(v82 + 24);
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_1001B3178(v125, v126, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "[%{public}s] Next question: %{private}s", (uint8_t *)v122, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release_n();
        swift_release_n();
      }
LABEL_83:
      sub_10024562C();
      return 1;
  }
}

uint64_t sub_1000CC230(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) == 2)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000FD84(v2, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446467;
      uint64_t v6 = sub_1000C8E54();
      sub_1001B3178(v6, v7, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2081;
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      sub_1001B3178(v8, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] Recording free form answer for: %{private}s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    char v18 = sub_1000CA784((void *)a1, 0, 1);
  }
  else
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000FD84(v10, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446467;
      uint64_t v14 = sub_1000C8E54();
      sub_1001B3178(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2081;
      uint64_t v16 = *(void *)(a1 + 16);
      unint64_t v17 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      sub_1001B3178(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s] Recording free form answer for non-free-form question: %{private}s, ignoring", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1000CC640(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) != 1)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10000FD84(v14, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446467;
      uint64_t v18 = sub_1000C8E54();
      uint64_t v31 = sub_1001B3178(v18, v19, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2081;
      uint64_t v20 = *(void *)(a1 + 16);
      unint64_t v21 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_1001B3178(v20, v21, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v22 = "[%{public}s] Recording multiple choice answer for non-multiple-choice question: %{private}s, ignoring";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v15, v16, v22, (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_19:
      char v28 = 0;
      return v28 & 1;
    }
LABEL_18:

    swift_release_n();
    swift_release_n();
    goto LABEL_19;
  }
  swift_beginAccess();
  if (!*(void *)(*(void *)(v1 + 56) + 16)
    || (uint64_t v3 = swift_retain(), sub_1001BECD0(v3), v5 = v4, swift_release(), (v5 & 1) == 0))
  {
    if ((sub_1000CFCC0(a1, (uint64_t)_swiftEmptySetSingleton) & 1) == 0)
    {
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10000FD84(v23, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      swift_retain_n();
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446467;
        uint64_t v24 = sub_1000C8E54();
        sub_1001B3178(v24, v25, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2081;
        uint64_t v26 = *(void *)(a1 + 16);
        unint64_t v27 = *(void *)(a1 + 24);
        swift_bridgeObjectRetain();
        sub_1001B3178(v26, v27, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_type_t v22 = "[%{public}s] Failed to update multiple choice selection for question: %{private}s, ignoring recording answer";
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_retain_n();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446467;
    uint64_t v10 = sub_1000C8E54();
    sub_1001B3178(v10, v11, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_1001B3178(v12, v13, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] Recording multiple choice answer for: %{private}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  char v28 = sub_1000CA784((void *)a1, 0, 2);
  return v28 & 1;
}

uint64_t sub_1000CCC10()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
LABEL_24:
    swift_once();
    goto LABEL_4;
  }
  unsigned int v1 = *(unsigned __int8 *)(v3 + v2 + 31);
  if (v1 >= 3)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000FD84(v12, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      uint64_t v16 = sub_1000C8E54();
      sub_1001B3178(v16, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2082;
      uint64_t v18 = String.init<A>(describing:)();
      sub_1001B3178(v18, v19, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] User inactivity is ignored on stage %{public}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

LABEL_19:
    swift_release_n();
    return 0;
  }
  if (qword_10037DE10 != -1) {
    goto LABEL_24;
  }
LABEL_4:
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000FD84(v4, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = sub_1000C8E54();
    sub_1001B3178(v8, v9, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v10 = String.init<A>(describing:)();
    sub_1001B3178(v10, v11, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] User inactivity is detected on stage %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (*(unsigned char *)(*(void *)(v0 + 264) + 80))
  {
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v22 = 136446210;
      uint64_t v23 = sub_1000C8E54();
      sub_1001B3178(v23, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}s] Auto send is not supported by this questionnaire scope", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

    goto LABEL_19;
  }
  if (!sub_1000CE1C4(v1, 3)) {
    return 0;
  }
  swift_retain_n();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)unint64_t v27 = 136446210;
    uint64_t v28 = sub_1000C8E54();
    sub_1001B3178(v28, v29, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%{public}s] Starting auto send countdown", v27, 0xCu);
    uint64_t v30 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    return 1;
  }
  return v30;
}

uint64_t sub_1000CD25C()
{
  return sub_1000CF42C(3, "[%{public}s] Questionnaire is ready to (auto) send");
}

BOOL sub_1000CD26C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  int v3 = *(unsigned __int8 *)(v2 + v1 + 31);
  BOOL result = v3 == 2 || v2 != 1;
  if (v3 == 2 && v2 == 1)
  {
    unint64_t v6 = *(void *)(v0 + 120);
    if (!(v6 >> 62))
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      return v7 != 0;
    }
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    return v7 != 0;
  }
  return result;
}

BOOL sub_1000CD31C()
{
  uint64_t v3 = (uint64_t)v0;
  if (sub_1000CD26C())
  {
    swift_beginAccess();
    Class isa = v0[18].isa;
    uint64_t v5 = *((void *)isa + 2);
    if (v5)
    {
      switch(*((unsigned char *)isa + v5 + 31))
      {
        case 2:
          goto LABEL_17;
        case 3:
          return sub_1000CE810();
        case 4:
          if (!sub_1000CE810()) {
            return 0;
          }
          Class isa = v0[18].isa;
          uint64_t v5 = *((void *)isa + 2);
          if (v5)
          {
LABEL_17:
            if (*((unsigned char *)isa + v5 + 31) != 2) {
              return 1;
            }
            uint64_t v1 = v0 + 15;
            Class v19 = v0[15].isa;
            if (!((unint64_t)v19 >> 62))
            {
              if (*(void *)(((unint64_t)v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_20;
              }
LABEL_47:
              if (!sub_1000CE810())
              {
                if (qword_10037DE10 == -1) {
                  goto LABEL_55;
                }
                goto LABEL_76;
              }
              uint64_t v34 = *(void *)(v3 + 144);
              uint64_t v35 = *(void *)(v34 + 16);
              if (!v35)
              {
LABEL_75:
                __break(1u);
LABEL_76:
                swift_once();
LABEL_55:
                uint64_t v38 = type metadata accessor for Logger();
                sub_10000FD84(v38, (uint64_t)qword_1003A9B08);
                swift_retain_n();
                unint64_t v39 = Logger.logObject.getter();
                os_log_type_t v40 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v39, v40))
                {
                  uint64_t v41 = (uint8_t *)swift_slowAlloc();
                  v51[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v41 = 136446210;
                  uint64_t v42 = sub_1000C8E54();
                  uint64_t v50 = sub_1001B3178(v42, v43, v51);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  uint64_t v44 = "[%{public}s] Going back from the first question and cannot go back a stage, resetting the state";
LABEL_61:
                  _os_log_impl((void *)&_mh_execute_header, v39, v40, v44, v41, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

LABEL_63:
                  if (*(void *)(v3 + 32))
                  {
                    *(unsigned char *)(v3 + 40) = 1;
                  }
                  else
                  {
                    sub_100004010(&qword_100393AA0);
                    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
                    Subject<>.send()();
                  }
                  BOOL v18 = 1;
                  sub_1000C99B4(1);
                  if (*(void *)(v3 + 32))
                  {
                    *(unsigned char *)(v3 + 41) = 1;
                  }
                  else
                  {
                    sub_100004010(&qword_100393AA0);
                    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
                    Subject<>.send()();
                    return 1;
                  }
                  return v18;
                }
                goto LABEL_62;
              }
              int v36 = *(unsigned __int8 *)(v35 + v34 + 31);
              if (v36 == 1)
              {
                if (qword_10037DE10 != -1) {
                  swift_once();
                }
                uint64_t v45 = type metadata accessor for Logger();
                sub_10000FD84(v45, (uint64_t)qword_1003A9B08);
                swift_retain_n();
                unint64_t v39 = Logger.logObject.getter();
                os_log_type_t v40 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v39, v40))
                {
                  uint64_t v41 = (uint8_t *)swift_slowAlloc();
                  v51[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v41 = 136446210;
                  uint64_t v46 = sub_1000C8E54();
                  uint64_t v50 = sub_1001B3178(v46, v47, v51);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  uint64_t v44 = "[%{public}s] Got back to introduction, resetting the state";
                  goto LABEL_61;
                }
LABEL_62:

                swift_release_n();
                goto LABEL_63;
              }
              if (!v36 && swift_unknownObjectWeakLoadStrong())
              {
                uint64_t v37 = swift_allocObject();
                swift_weakInit();
                swift_retain();
                sub_1001AF7A0(v3, (uint64_t)sub_1000D7CE4, v37);
                swift_release_n();
                swift_unknownObjectRelease();
                return 1;
              }
              return 1;
            }
          }
          else
          {
            __break(1u);
LABEL_45:
            __break(1u);
          }
          swift_bridgeObjectRetain();
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v33)
          {
LABEL_20:
            if (*(void *)(v3 + 32))
            {
              *(unsigned char *)(v3 + 40) = 1;
            }
            else
            {
              sub_100004010(&qword_100393AA0);
              sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
              Subject<>.send()();
            }
            swift_beginAccess();
            if ((unint64_t)v1->isa >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v48) {
                goto LABEL_28;
              }
            }
            else if (*(void *)(((uint64_t)v1->isa & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_28:
              uint64_t v21 = sub_1000D71B0();
              if (v21) {
                goto LABEL_32;
              }
              if ((unint64_t)v1->isa >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                unint64_t v23 = v49 - 1;
                if (!__OFSUB__(v49, 1)) {
                  goto LABEL_31;
                }
              }
              else
              {
                uint64_t v22 = *(void *)(((uint64_t)v1->isa & 0xFFFFFFFFFFFFFF8) + 0x10);
                unint64_t v23 = v22 - 1;
                if (!__OFSUB__(v22, 1))
                {
LABEL_31:
                  uint64_t v21 = sub_1000D70C4(v23);
LABEL_32:
                  *(void *)(v3 + 136) = v21;
                  swift_endAccess();
                  swift_release();
                  if (*(void *)(v3 + 32))
                  {
                    *(unsigned char *)(v3 + 41) = 1;
                    uint64_t v24 = *(void *)(v3 + 136);
                    if (v24)
                    {
LABEL_34:
                      uint64_t v2 = *(void *)(v24 + 16);
                      uint64_t v1 = *(NSObject **)(v24 + 24);
                      swift_bridgeObjectRetain();
                      goto LABEL_37;
                    }
                  }
                  else
                  {
                    sub_100004010(&qword_100393AA0);
                    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
                    Subject<>.send()();
                    uint64_t v24 = *(void *)(v3 + 136);
                    if (v24) {
                      goto LABEL_34;
                    }
                  }
                  uint64_t v2 = 0;
                  uint64_t v1 = 0;
LABEL_37:
                  if (qword_10037DE10 == -1)
                  {
LABEL_38:
                    uint64_t v25 = type metadata accessor for Logger();
                    sub_10000FD84(v25, (uint64_t)qword_1003A9B08);
                    swift_bridgeObjectRetain();
                    swift_retain_n();
                    os_log_type_t v26 = Logger.logObject.getter();
                    os_log_type_t v27 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v26, v27))
                    {
                      uint64_t v28 = swift_slowAlloc();
                      uint64_t v50 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v28 = 136446467;
                      uint64_t v29 = sub_1000C8E54();
                      v51[0] = sub_1001B3178(v29, v30, &v50);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      *(_WORD *)(v28 + 12) = 2081;
                      v51[0] = v2;
                      v51[1] = (uint64_t)v1;
                      swift_bridgeObjectRetain();
                      sub_100004010(&qword_100380920);
                      uint64_t v31 = String.init<A>(describing:)();
                      v51[0] = sub_1001B3178(v31, v32, &v50);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s] Back to: %{private}s", (uint8_t *)v28, 0x16u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                      swift_release_n();
                    }
                    return 1;
                  }
LABEL_71:
                  swift_once();
                  goto LABEL_38;
                }
              }
              __break(1u);
              goto LABEL_75;
            }
            __break(1u);
            goto LABEL_71;
          }
          goto LABEL_47;
        default:
          if (qword_10037DE10 != -1) {
            swift_once();
          }
          uint64_t v6 = type metadata accessor for Logger();
          sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
          swift_retain_n();
          uint64_t v1 = Logger.logObject.getter();
          os_log_type_t v7 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v1, v7)) {
            goto LABEL_22;
          }
          uint64_t v8 = swift_slowAlloc();
          v51[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v8 = 136446466;
          uint64_t v9 = sub_1000C8E54();
          uint64_t v50 = sub_1001B3178(v9, v10, v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v8 + 12) = 2080;
          if (!*((void *)v0[18].isa + 2)) {
            goto LABEL_45;
          }
          uint64_t v11 = String.init<A>(describing:)();
          uint64_t v50 = sub_1001B3178(v11, v12, v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v1, v7, "[%{public}s] Not expected to go back while on %s stage", (uint8_t *)v8, 0x16u);
          goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
  if (qword_10037DE10 != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000FD84(v13, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v16 = sub_1000C8E54();
    v51[0] = sub_1001B3178(v16, v17, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v14, "[%{public}s] Going back requested when canGoBack() == false", v15, 0xCu);
LABEL_12:
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
LABEL_22:

    swift_release_n();
  }
  return 0;
}

uint64_t sub_1000CDEFC(char a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000FD84(v4, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      uint64_t v8 = sub_1000C8E54();
      sub_1001B3178(v8, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] Transitioning to previous questionnaire, success: %{BOOL}d", (uint8_t *)v7, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (a1) {
        return swift_release();
      }
    }
    else
    {

      swift_release_n();
      if (a1) {
        return swift_release();
      }
    }
    if (*(void *)(v3 + 32))
    {
      *(unsigned char *)(v3 + 40) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    sub_1000C99B4(1);
    if (*(void *)(v3 + 32))
    {
      *(unsigned char *)(v3 + 41) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    return swift_release();
  }
  return result;
}

BOOL sub_1000CE1C4(unsigned __int8 a1, char a2)
{
  uint64_t v4 = v2;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 144);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_4:
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000FD84(v9, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446722;
      uint64_t v13 = sub_1000C8E54();
      uint64_t v37 = sub_1001B3178(v13, v14, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      LOBYTE(v37) = a1;
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v37 = sub_1001B3178(v15, v16, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2082;
      LOBYTE(v37) = a2;
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v37 = sub_1001B3178(v17, v18, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] Transitioned from stage %{public}s to %{public}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (*(void *)(v2 + 32))
      {
LABEL_6:
        *(unsigned char *)(v2 + 40) = 1;
LABEL_13:
        swift_beginAccess();
        uint64_t v31 = *(void **)(v2 + 144);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v4 + 144) = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v31 = sub_1001B1C50(0, v31[2] + 1, 1, v31);
          *(void *)(v4 + 144) = v31;
        }
        unint64_t v34 = v31[2];
        unint64_t v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          uint64_t v31 = sub_1001B1C50((void *)(v33 > 1), v34 + 1, 1, v31);
          *(void *)(v4 + 144) = v31;
        }
        _OWORD v31[2] = v34 + 1;
        *((unsigned char *)v31 + v34 + 32) = a2;
        swift_endAccess();
        sub_1000CED50();
        if (*(void *)(v4 + 32))
        {
          *(unsigned char *)(v4 + 41) = 1;
        }
        else
        {
          sub_100004010(&qword_100393AA0);
          sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
          Subject<>.send()();
        }
        return v3 == a1;
      }
    }
    else
    {

      swift_release_n();
      if (*(void *)(v2 + 32)) {
        goto LABEL_6;
      }
    }
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    goto LABEL_13;
  }
  int v3 = *(unsigned __int8 *)(v8 + v7 + 31);
  if (v3 == a1)
  {
    if (qword_10037DE10 == -1) {
      goto LABEL_4;
    }
    goto LABEL_23;
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10000FD84(v19, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446978;
    uint64_t v23 = sub_1000C8E54();
    uint64_t v37 = sub_1001B3178(v23, v24, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    LOBYTE(v37) = a1;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v37 = sub_1001B3178(v25, v26, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2082;
    LOBYTE(v37) = a2;
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v37 = sub_1001B3178(v27, v28, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 2082;
    LOBYTE(v37) = v3;
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v37 = sub_1001B3178(v29, v30, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}s] Requested transition from stage %{public}s to %{public}s while on stage %{public}s, ignored", (uint8_t *)v22, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v3 == a1;
}

BOOL sub_1000CE810()
{
  uint64_t v3 = v0;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_23:
    swift_once();
    goto LABEL_6;
  }
  char v2 = *(unsigned char *)(v5 + v4 + 31);
  if (v5 != 1)
  {
    if (*(void *)(v0 + 32))
    {
      *(unsigned char *)(v0 + 40) = 1;
    }
    else
    {
      uint64_t v1 = &qword_100393AA0;
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    swift_beginAccess();
    unint64_t v14 = *(void **)(v0 + 144);
    if (v14[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v15 = v14[2];
        if (v15) {
          goto LABEL_12;
        }
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t v14 = sub_1001D5810(v14);
    uint64_t v15 = v14[2];
    if (v15)
    {
LABEL_12:
      v14[2] = v15 - 1;
      *(void *)(v3 + 144) = v14;
      swift_endAccess();
      sub_1000CED50();
      if (*(void *)(v3 + 32))
      {
        *(unsigned char *)(v3 + 41) = 1;
      }
      else
      {
        LOBYTE(v1) = sub_100004010(&qword_100393AA0);
        sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
        Subject<>.send()();
      }
      uint64_t v16 = *(void *)(v3 + 144);
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        LOBYTE(v1) = *(unsigned char *)(v17 + v16 + 31);
        if (qword_10037DE10 == -1) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      swift_once();
LABEL_17:
      uint64_t v18 = type metadata accessor for Logger();
      sub_10000FD84(v18, (uint64_t)qword_1003A9B08);
      swift_retain_n();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v19))
      {
        char v28 = (char)v1;
        uint64_t v20 = swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136446722;
        uint64_t v21 = sub_1000C8E54();
        uint64_t v30 = sub_1001B3178(v21, v22, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2082;
        LOBYTE(v30) = v2;
        uint64_t v23 = String.init<A>(describing:)();
        uint64_t v30 = sub_1001B3178(v23, v24, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 22) = 2082;
        LOBYTE(v30) = v28;
        uint64_t v25 = String.init<A>(describing:)();
        uint64_t v30 = sub_1001B3178(v25, v26, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v19, "[%{public}s] Went back from from stage %{public}s to %{public}s", (uint8_t *)v20, 0x20u);
        goto LABEL_19;
      }
LABEL_20:

      swift_release_n();
      return v5 != 1;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (qword_10037DE10 != -1) {
    goto LABEL_23;
  }
LABEL_6:
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v8)) {
    goto LABEL_20;
  }
  uint64_t v9 = swift_slowAlloc();
  v29[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v9 = 136446466;
  uint64_t v10 = sub_1000C8E54();
  uint64_t v30 = sub_1001B3178(v10, v11, v29);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v9 + 12) = 2082;
  LOBYTE(v30) = v2;
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v30 = sub_1001B3178(v12, v13, v29);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] Requested going back from stage %{public}s, ignored", (uint8_t *)v9, 0x16u);
LABEL_19:
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return v5 != 1;
}

void sub_1000CED50()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
LABEL_21:
    swift_once();
LABEL_6:
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000FD84(v7, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    os_log_type_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v11 = sub_1000C8E54();
      sub_1001B3178(v11, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] Auto send is not supported by this questionnaire scope", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  int v4 = *(unsigned __int8 *)(v3 + v2 + 31);
  uint64_t v5 = *(void *)(v0 + 224);
  if (v4 == 3)
  {
    if (v5) {
      return;
    }
    uint64_t v6 = *(void *)(v0 + 264);
    if (*(unsigned char *)(v6 + 80))
    {
      if (qword_10037DE10 == -1) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
    uint64_t v13 = *(void *)(v6 + 64);
    uint64_t v14 = sub_1000C8E54();
    uint64_t v16 = v15;
    type metadata accessor for QuestionnaireState.AutoSendCountdown();
    uint64_t v17 = swift_allocObject();
    sub_1000C8730(v14, v16, v13);
    *(void *)(v1 + 224) = v17;
    swift_retain();
    swift_release();
    sub_10000FDBC();
    swift_retain();
    uint64_t v18 = static OS_dispatch_queue.main.getter();
    sub_100004010(&qword_100385E98);
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      uint64_t v20 = (void *)sub_100265020((unint64_t)_swiftEmptyArrayStorage);
    }
    else {
      uint64_t v20 = _swiftEmptySetSingleton;
    }
    *(void *)(v19 + 32) = v20;
    swift_weakAssign();
    swift_release();
    *(void *)(v19 + 24) = v18;
    swift_retain();
    uint64_t v21 = swift_retain();
    sub_1002A9370(v21, (uint64_t)sub_1000D7CD4, v1);
    swift_retain();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v22 = swift_retain();
    uint64_t v23 = sub_1002A9370(v22, (uint64_t)sub_1000CF3F8, 0);
    swift_retain();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v1 + 232) = v23;
    swift_release();
  }
  else if (v5)
  {
    if (*(void *)(v0 + 32))
    {
      *(unsigned char *)(v0 + 40) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    *(void *)(v0 + 232) = 0;
    swift_release();
    *(void *)(v0 + 224) = 0;
    swift_release();
    if (*(void *)(v0 + 32))
    {
      *(unsigned char *)(v0 + 41) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
  }
}

void sub_1000CF1B4(uint64_t a1)
{
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v6 = sub_1000C8E54();
    sub_1001B3178(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] Auto send countdown timer ticked", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (*(void *)(a1 + 32))
    {
LABEL_5:
      *(unsigned char *)(a1 + 40) = 1;
LABEL_8:
      *(unsigned char *)(a1 + 41) = 1;
      return;
    }
  }
  else
  {

    swift_release_n();
    if (*(void *)(a1 + 32)) {
      goto LABEL_5;
    }
  }
  sub_100004010(&qword_100393AA0);
  sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
  Subject<>.send()();
  if (*(void *)(a1 + 32)) {
    goto LABEL_8;
  }
  sub_100004010(&qword_100393AA0);
  Subject<>.send()();
}

uint64_t sub_1000CF3F8()
{
  return sub_1000CD25C();
}

void sub_1000CF41C()
{
}

void sub_1000CF42C(unsigned __int8 a1, const char *a2, ...)
{
  if (sub_1000CE1C4(a1, 4))
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000FD84(v3, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t v7 = sub_1000C8E54();
      sub_1001B3178(v7, v8, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, a2, v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

BOOL sub_1000CF5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 64);
  if (v4 != 7)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
    sub_10000D2A0(a2, (uint64_t)v32, &qword_10038D290);
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446723;
      uint64_t v28 = a2;
      v29[0] = v27;
      uint64_t v10 = v4;
      uint64_t v11 = sub_1000C8E54();
      *(void *)&long long v30 = sub_1001B3178(v11, v12, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v14 = *(void *)(a1 + 16);
      unint64_t v13 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v15 = v14;
      uint64_t v4 = v10;
      *(void *)&long long v30 = sub_1001B3178(v15, v13, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 2081;
      sub_10000D2A0((uint64_t)v32, (uint64_t)&v30, &qword_10038D290);
      sub_100004010(&qword_10038D290);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)&long long v30 = sub_1001B3178(v16, v17, v29);
      a2 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000950C((uint64_t)v32, &qword_10038D290);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] Recording built-in answer for: %{private}s, opaque data: %{private}s", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_release_n();
      sub_10000950C((uint64_t)v32, &qword_10038D290);
    }

    if (*(void *)(v2 + 32))
    {
      *(unsigned char *)(v2 + 40) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    sub_10000D2A0(a2, (uint64_t)&v30, &qword_10038D290);
    if (v31)
    {
      sub_10004A864(&v30, v32);
      sub_1000A30C0((uint64_t)v32, (uint64_t)&v30);
      swift_beginAccess();
      sub_1001B78D4((uint64_t)&v30, v4);
      swift_endAccess();
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v32);
      if (*(void *)(v2 + 32))
      {
LABEL_17:
        *(unsigned char *)(v2 + 41) = 1;
        return v4 != 7;
      }
    }
    else
    {
      sub_10000950C((uint64_t)&v30, &qword_10038D290);
      swift_beginAccess();
      sub_1000CFC00(v4, v32);
      sub_10000950C((uint64_t)v32, &qword_10038D290);
      swift_endAccess();
      if (*(void *)(v2 + 32)) {
        goto LABEL_17;
      }
    }
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    return v4 != 7;
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000FD84(v18, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    *(void *)&v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446467;
    uint64_t v22 = sub_1000C8E54();
    *(void *)&long long v30 = sub_1001B3178(v22, v23, (uint64_t *)v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v24 = *(void *)(a1 + 16);
    unint64_t v25 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    *(void *)&long long v30 = sub_1001B3178(v24, v25, (uint64_t *)v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%{public}s] Recording built-in answer for non-built-in question: %{private}s, ignoring", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  return v4 != 7;
}

double sub_1000CFC00@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1001BEB10(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000A1874();
      uint64_t v9 = v11;
    }
    sub_10004A864((_OWORD *)(*(void *)(v9 + 56) + 32 * v7), a2);
    sub_1001C0D80(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1000CFCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v3 + 136);
  if (!v10
    || ((uint64_t v12 = *(void *)(a1 + 16), v11 = *(void *)(a1 + 24), *(void *)(v10 + 16) == v12)
      ? (BOOL v13 = *(void *)(v10 + 24) == v11)
      : (BOOL v13 = 0),
        !v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      uint64_t v76 = v74;
      *(_DWORD *)uint64_t v17 = 136446723;
      uint64_t v18 = sub_1000C8E54();
      v75[0] = sub_1001B3178(v18, v19, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2081;
      uint64_t v20 = *(void *)(a1 + 16);
      unint64_t v21 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      v75[0] = sub_1001B3178(v20, v21, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 22) = 2081;
      uint64_t v22 = *(void *)(v3 + 136);
      if (v22)
      {
        uint64_t v23 = *(void *)(v22 + 16);
        uint64_t v24 = swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      v75[0] = v23;
      v75[1] = v24;
      sub_100004010(&qword_100380920);
      uint64_t v29 = String.init<A>(describing:)();
      v75[0] = sub_1001B3178(v29, v30, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s] updateMultipleChoiceSelection: trying to update the value for %{private}s when current question is %{private}s", (uint8_t *)v17, 0x20u);
      goto LABEL_23;
    }
LABEL_20:

    swift_release_n();
    swift_release_n();
    return 0;
  }
  if (*(unsigned char *)(a1 + 32) != 1)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      v75[0] = v74;
      *(_DWORD *)uint64_t v26 = 136446467;
      uint64_t v27 = sub_1000C8E54();
      uint64_t v76 = sub_1001B3178(v27, v28, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v76 = sub_1001B3178(v12, v11, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v25, "[%{public}s] Attempted to update multiple choice selection for non-multiple-choice question: %{private}s", (uint8_t *)v26, 0x16u);
LABEL_23:
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
    goto LABEL_20;
  }
  uint64_t v71 = v9;
  uint64_t v14 = *(void *)(v3 + 32);
  uint64_t v74 = a2;
  if (v14)
  {
    *(unsigned char *)(v3 + 40) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    a2 = v74;
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v76 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0x8000000000000000;
  sub_100269590(a2, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 56) = v76;
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (*(void *)(v3 + 32))
  {
    *(unsigned char *)(v3 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    a2 = v74;
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  unint64_t v33 = v71;
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_10000FD84(v6, (uint64_t)qword_1003A9B08);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v33, v34, v6);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v35 = Logger.logObject.getter();
  int v70 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v35, (os_log_type_t)v70))
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
    return 1;
  }
  uint64_t v68 = v7;
  uint64_t v69 = v6;
  uint64_t v36 = swift_slowAlloc();
  uint64_t v66 = swift_slowAlloc();
  uint64_t v80 = v66;
  *(_DWORD *)uint64_t v36 = 136446723;
  uint64_t v37 = sub_1000C8E54();
  v75[0] = sub_1001B3178(v37, v38, &v80);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v36 + 12) = 2081;
  swift_bridgeObjectRetain();
  v75[0] = sub_1001B3178(v12, v11, &v80);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  uint64_t v67 = (uint8_t *)v36;
  *(_WORD *)(v36 + 22) = 2081;
  unint64_t v73 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    uint64_t v39 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v39 = *(void *)(a2 + 16);
  }
  if (!v39) {
    goto LABEL_55;
  }
  uint64_t v79 = _swiftEmptyArrayStorage;
  sub_1001BF6C4(0, v39 & ~(v39 >> 63), 0);
  if (v73)
  {
    uint64_t v40 = __CocoaSet.startIndex.getter();
    char v42 = 1;
  }
  else
  {
    uint64_t v40 = sub_1000D7304(a2);
    char v42 = v43 & 1;
  }
  uint64_t v76 = v40;
  uint64_t v77 = v41;
  char v78 = v42;
  if ((v39 & 0x8000000000000000) == 0)
  {
    uint64_t v44 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0) {
      uint64_t v44 = a2;
    }
    uint64_t v72 = v44;
    do
    {
      while (1)
      {
        uint64_t v50 = v35;
        int64_t v51 = v76;
        uint64_t v52 = v77;
        char v53 = v78;
        uint64_t v54 = sub_100130F6C(v76, v77, v78, a2);
        uint64_t v56 = *(void *)(v54 + 16);
        uint64_t v55 = *(void *)(v54 + 24);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v57 = v79;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001BF6C4(0, v57[2] + 1, 1);
          uint64_t v57 = v79;
        }
        unint64_t v59 = v57[2];
        unint64_t v58 = v57[3];
        if (v59 >= v58 >> 1)
        {
          sub_1001BF6C4(v58 > 1, v59 + 1, 1);
          uint64_t v57 = v79;
        }
        v57[2] = v59 + 1;
        uint64_t v60 = &v57[2 * v59];
        v60[4] = v56;
        void v60[5] = v55;
        if (v73) {
          break;
        }
        a2 = v74;
        int64_t v45 = sub_1000D7220(v51, v52, v53, v74);
        uint64_t v47 = v46;
        char v49 = v48;
        sub_1000D7CC8(v51, v52, v53);
        uint64_t v76 = v45;
        uint64_t v77 = v47;
        char v78 = v49 & 1;
        uint64_t v35 = v50;
        if (!--v39) {
          goto LABEL_54;
        }
      }
      a2 = v74;
      if ((v53 & 1) == 0) {
        goto LABEL_57;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      uint64_t v35 = v50;
      sub_100004010(&qword_100385E90);
      uint64_t v61 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v61(v75, 0);
      --v39;
    }
    while (v39);
LABEL_54:
    sub_1000D7CC8(v76, v77, v78);
LABEL_55:
    unint64_t v62 = v67;
    uint64_t v63 = Array.description.getter();
    unint64_t v65 = v64;
    swift_bridgeObjectRelease();
    v75[0] = sub_1001B3178(v63, v65, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v70, "[%{public}s] Updated multiple choice selection for: %{private}s to %{private}s", v62, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v68 + 8))(v71, v69);
    return 1;
  }
  __break(1u);
LABEL_57:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000D0804(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v114 = v4 + 48;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v4 + 136);
  if (!v12
    || ((uint64_t v13 = *(void *)(a1 + 16), v14 = *(uint8_t **)(a1 + 24), *(void *)(v12 + 16) == v13)
      ? (BOOL v15 = *(void *)(v12 + 24) == (void)v14)
      : (BOOL v15 = 0),
        !v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    sub_10000FD84(v8, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      v121[0] = v115;
      *(_DWORD *)uint64_t v26 = 136446723;
      uint64_t v27 = sub_1000C8E54();
      v116[0] = sub_1001B3178(v27, v28, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v29 = *(void *)(a1 + 16);
      unint64_t v30 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      v116[0] = sub_1001B3178(v29, v30, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 2081;
      uint64_t v31 = *(void *)(v4 + 136);
      if (v31)
      {
        uint64_t v32 = *(void *)(v31 + 16);
        uint64_t v33 = swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
      v116[0] = v32;
      v116[1] = v33;
      sub_100004010(&qword_100380920);
      uint64_t v39 = String.init<A>(describing:)();
      v116[0] = sub_1001B3178(v39, v40, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%{public}s] updateMultipleChoiceSelection: trying to update the value for %{private}s when current question is %{private}s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy();
      goto LABEL_24;
    }
LABEL_21:

    swift_release_n();
    swift_release_n();
    return 0;
  }
  int v16 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v112 = v14;
  uint64_t v113 = v13;
  if (v16 != 1)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    sub_10000FD84(v8, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      v116[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446467;
      uint64_t v36 = sub_1000C8E54();
      v121[0] = sub_1001B3178(v36, v37, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2081;
      unint64_t v38 = (unint64_t)v112;
      swift_bridgeObjectRetain();
      v121[0] = sub_1001B3178(v113, v38, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v34, "[%{public}s] Attempted to update multiple choice selection for non-multiple-choice question: %{private}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
LABEL_24:
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
    goto LABEL_21;
  }
  uint64_t v110 = v9;
  uint64_t v17 = *(void *)(v4 + 56);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v111 = v8;
  if (v18)
  {
    uint64_t v19 = swift_retain();
    uint64_t v20 = sub_1001BECD0(v19);
    uint64_t v21 = a2;
    if (v22)
    {
      uint64_t v23 = *(void **)(*(void *)(v17 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v23 = _swiftEmptySetSingleton;
    }
    swift_release();
  }
  else
  {
    uint64_t v23 = _swiftEmptySetSingleton;
    uint64_t v21 = a2;
  }
  uint64_t v123 = (uint64_t)v23;
  swift_bridgeObjectRetain();
  int v42 = sub_100078E10(v21, (uint64_t)v23);
  swift_bridgeObjectRelease();
  if (((v42 ^ a3) & 1) == 0)
  {
    uint64_t v57 = v111;
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    sub_10000FD84(v57, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc();
      v116[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136446723;
      uint64_t v61 = sub_1000C8E54();
      v121[0] = sub_1001B3178(v61, v62, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2081;
      uint64_t v63 = *(void *)(v21 + 16);
      unint64_t v64 = *(void *)(v21 + 24);
      swift_bridgeObjectRetain();
      v121[0] = sub_1001B3178(v63, v64, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 22) = 2080;
      if (a3) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = 544501614;
      }
      if (a3) {
        unint64_t v66 = 0xE000000000000000;
      }
      else {
        unint64_t v66 = 0xE400000000000000;
      }
      v121[0] = sub_1001B3178(v65, v66, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "[%{public}s] Option %{private}s is already %s selected, ignoring", (uint8_t *)v60, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    goto LABEL_85;
  }
  uint64_t v43 = v111;
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v44 = sub_10000FD84(v43, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_retain_n();
  os_log_t v109 = v44;
  int64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  int v47 = v46;
  BOOL v48 = os_log_type_enabled(v45, v46);
  uint64_t v115 = (uint64_t)v11;
  if (v48)
  {
    uint64_t v49 = swift_slowAlloc();
    v116[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 136446723;
    uint64_t v107 = v49 + 4;
    int v108 = v47;
    uint64_t v50 = sub_1000C8E54();
    v121[0] = sub_1001B3178(v50, v51, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    if (a3) {
      uint64_t v52 = 0x6E697463656C6553;
    }
    else {
      uint64_t v52 = 0x7463656C65736544;
    }
    if (a3) {
      unint64_t v53 = 0xE900000000000067;
    }
    else {
      unint64_t v53 = 0xEB00000000676E69;
    }
    v121[0] = sub_1001B3178(v52, v53, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 22) = 2081;
    uint64_t v107 = v49 + 24;
    uint64_t v55 = *(void *)(v21 + 16);
    unint64_t v54 = *(void *)(v21 + 24);
    swift_bridgeObjectRetain();
    uint64_t v56 = v55;
    unint64_t v11 = (char *)v115;
    v121[0] = sub_1001B3178(v56, v54, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v108, "[%{public}s] %s option %{private}s", (uint8_t *)v49, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if ((a3 & 1) == 0) {
      goto LABEL_40;
    }
  }
  else
  {

    swift_release_n();
    swift_release_n();
    if ((a3 & 1) == 0)
    {
LABEL_40:
      sub_100254E8C(v21);
      goto LABEL_53;
    }
  }
  swift_retain();
  sub_10012EDC8(v116, v21);
LABEL_53:
  swift_release();
  if (*(void *)(v4 + 32))
  {
    *(unsigned char *)(v4 + 40) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    unint64_t v11 = (char *)v115;
    Subject<>.send()();
  }
  uint64_t v67 = v123;
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v121[0] = *(void *)(v4 + 56);
  *(void *)(v4 + 56) = 0x8000000000000000;
  sub_100269590(v67, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 56) = v121[0];
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (*(void *)(v4 + 32))
  {
    *(unsigned char *)(v4 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    unint64_t v11 = (char *)v115;
    Subject<>.send()();
  }
  uint64_t v69 = v110;
  uint64_t v70 = v111;
  (*(void (**)(char *, os_log_t, uint64_t))(v110 + 16))(v11, v109, v111);
  swift_retain_n();
  swift_retain_n();
  uint64_t v71 = Logger.logObject.getter();
  int v72 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v71, (os_log_type_t)v72))
  {

    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v11, v70);
LABEL_85:
    swift_bridgeObjectRelease();
    return 1;
  }
  int v108 = v72;
  os_log_t v109 = v71;
  uint64_t v73 = swift_slowAlloc();
  uint64_t v107 = swift_slowAlloc();
  uint64_t v122 = v107;
  *(_DWORD *)uint64_t v73 = 136446723;
  uint64_t v74 = sub_1000C8E54();
  v116[0] = sub_1001B3178(v74, v75, &v122);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v73 + 12) = 2081;
  unint64_t v76 = (unint64_t)v112;
  swift_bridgeObjectRetain();
  v116[0] = sub_1001B3178(v113, v76, &v122);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  uint64_t v112 = (uint8_t *)v73;
  *(_WORD *)(v73 + 22) = 2081;
  swift_beginAccess();
  uint64_t v77 = v123;
  unint64_t v114 = v123 & 0xC000000000000001;
  if ((v123 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v78 = __CocoaSet.count.getter();
    uint64_t v79 = v115;
    if (v78) {
      goto LABEL_63;
    }
LABEL_67:
    swift_bridgeObjectRelease();
LABEL_84:
    uint64_t v102 = v112;
    uint64_t v103 = Array.description.getter();
    unint64_t v105 = v104;
    swift_bridgeObjectRelease();
    v116[0] = sub_1001B3178(v103, v105, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v106 = v109;
    _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v108, "[%{public}s] Updated multiple choice selection for: %{private}s to %{private}s", v102, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v79, v111);
    goto LABEL_85;
  }
  uint64_t v78 = *(void *)(v123 + 16);
  swift_bridgeObjectRetain();
  uint64_t v79 = v115;
  if (!v78) {
    goto LABEL_67;
  }
LABEL_63:
  uint64_t v120 = _swiftEmptyArrayStorage;
  sub_1001BF6C4(0, v78 & ~(v78 >> 63), 0);
  if (v114)
  {
    uint64_t v80 = __CocoaSet.startIndex.getter();
    char v82 = 1;
  }
  else
  {
    uint64_t v80 = sub_1000D7304(v77);
    char v82 = v83 & 1;
  }
  uint64_t v117 = v80;
  uint64_t v118 = v81;
  char v119 = v82;
  if ((v78 & 0x8000000000000000) == 0)
  {
    uint64_t v84 = v77 & 0xFFFFFFFFFFFFFF8;
    if (v77 < 0) {
      uint64_t v84 = v77;
    }
    uint64_t v113 = v84;
    do
    {
      while (1)
      {
        int64_t v91 = v117;
        uint64_t v90 = v118;
        char v92 = v119;
        uint64_t v93 = sub_100130F6C(v117, v118, v119, v77);
        uint64_t v94 = *(void *)(v93 + 16);
        uint64_t v95 = *(void *)(v93 + 24);
        swift_bridgeObjectRetain();
        swift_release();
        unint64_t v96 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001BF6C4(0, v96[2] + 1, 1);
          unint64_t v96 = v120;
        }
        unint64_t v98 = v96[2];
        unint64_t v97 = v96[3];
        if (v98 >= v97 >> 1)
        {
          sub_1001BF6C4(v97 > 1, v98 + 1, 1);
          unint64_t v96 = v120;
        }
        v96[2] = v98 + 1;
        unint64_t v99 = &v96[2 * v98];
        v99[4] = v94;
        v99[5] = v95;
        if (v114) {
          break;
        }
        int64_t v85 = sub_1000D7220(v91, v90, v92, v77);
        uint64_t v87 = v86;
        char v89 = v88;
        sub_1000D7CC8(v91, v90, v92);
        uint64_t v117 = v85;
        uint64_t v118 = v87;
        char v119 = v89 & 1;
        uint64_t v79 = v115;
        if (!--v78) {
          goto LABEL_83;
        }
      }
      if ((v92 & 1) == 0) {
        goto LABEL_87;
      }
      uint64_t v100 = __CocoaSet.Index.handleBitPattern.getter();
      uint64_t v79 = v115;
      if (v100) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100004010(&qword_100385E90);
      unint64_t v101 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v101(v116, 0);
      --v78;
    }
    while (v78);
LABEL_83:
    sub_1000D7CC8(v117, v118, v119);
    swift_bridgeObjectRelease();
    goto LABEL_84;
  }
  __break(1u);
LABEL_87:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000D18BC(Swift::Int a1, Swift::Int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 136);
  if (!v10)
  {
    uint64_t v11 = 0;
LABEL_28:
    if (qword_10037DE10 != -1) {
LABEL_47:
    }
      swift_once();
    uint64_t v25 = type metadata accessor for Logger();
    sub_10000FD84(v25, (uint64_t)qword_1003A9B08);
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446979;
      uint64_t v29 = sub_1000C8E54();
      v51[0] = sub_1001B3178(v29, v30, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2081;
      uint64_t v31 = *(void *)(a1 + 16);
      unint64_t v32 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      v51[0] = sub_1001B3178(v31, v32, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 22) = 2081;
      uint64_t v33 = *(void *)(a2 + 16);
      unint64_t v34 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      sub_1001B3178(v33, v34, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 32) = 2081;
      v51[1] = v11;
      swift_bridgeObjectRetain();
      sub_100004010(&qword_100380920);
      uint64_t v35 = String.init<A>(describing:)();
      v51[0] = sub_1001B3178(v35, v36, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s] updateQuestionsAnsweredInputValue: trying to update the value for %{private}s:%{private}s when current question is %{private}s", (uint8_t *)v28, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

    swift_bridgeObjectRelease_n();
LABEL_33:
    swift_release_n();
    swift_release_n();
    swift_release_n();
    return 0;
  }
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  BOOL v14 = *(void *)(v10 + 16) == v12 && v11 == v13;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 40) != 1)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000FD84(v17, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446723;
      uint64_t v21 = sub_1000C8E54();
      uint64_t v52 = sub_1001B3178(v21, v22, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1001B3178(v12, v13, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2081;
      uint64_t v23 = *(void *)(a2 + 16);
      unint64_t v24 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1001B3178(v23, v24, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] Attempted to update value for non-text option: %{private}s:%{private}s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

    goto LABEL_33;
  }
  uint64_t v15 = a2;
  a2 = a1;
  uint64_t v52 = a3;
  unint64_t v53 = a4;
  uint64_t type = v15;
  a1 = *(void *)(v15 + 48);
  swift_bridgeObjectRetain();
  uint64_t v11 = 7;
  while ((a4 & 0x1000000000000000) != 0)
  {
    if (a1 >= String.UTF8View._foreignCount()()) {
      goto LABEL_20;
    }
LABEL_16:
    if ((a4 & 0x2000000000000000) != 0)
    {
      if ((a4 & 0xF00000000000000) == 0)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    else if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
    {
      goto LABEL_46;
    }
    String.index(before:)();
    String.remove(at:)();
    swift_bridgeObjectRelease();
    a3 = v52;
    a4 = v53;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v16 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v16 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 < v16) {
    goto LABEL_16;
  }
LABEL_20:
  if (*(void *)(v5 + 32))
  {
    *(unsigned char *)(v5 + 40) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *(void *)(v5 + 72);
  *(void *)(v5 + 72) = 0x8000000000000000;
  sub_1002692D4(a3, a4, type, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 72) = v50;
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (*(void *)(v5 + 32))
  {
    *(unsigned char *)(v5 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  sub_10000FD84(v39, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136446979;
    uint64_t v43 = sub_1000C8E54();
    v51[0] = sub_1001B3178(v43, v44, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2081;
    swift_bridgeObjectRetain();
    v51[0] = sub_1001B3178(v12, v13, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 22) = 2081;
    uint64_t v45 = *(void *)(type + 16);
    unint64_t v46 = *(void *)(type + 24);
    swift_bridgeObjectRetain();
    v51[0] = sub_1001B3178(v45, v46, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 32) = 2081;
    swift_beginAccess();
    uint64_t v47 = v52;
    unint64_t v48 = v53;
    swift_bridgeObjectRetain();
    sub_1001B3178(v47, v48, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%{public}s] Updated value for: %{private}s:%{private}s to '%{private}s'", (uint8_t *)v42, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_release_n();
    swift_release_n();
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1000D22FC()
{
  sub_1000A3178(v0 + 48);
  sub_10002D3E4(v0 + 240);

  return swift_release();
}

uint64_t sub_1000D2334()
{
  swift_release();
  swift_release();
  sub_1000A3178(v0 + 48);
  sub_10002D3E4(v0 + 240);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QuestionnaireState()
{
  return self;
}

uint64_t type metadata accessor for QuestionnaireState.AutoSendCountdown()
{
  return self;
}

uint64_t sub_1000D23D4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v63 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  os_log_type_t v59 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v53[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = sub_1000D2F50(a1, a2);
  if (v14)
  {
    uint64_t v15 = result;
    uint64_t v16 = v14;
    uint64_t v58 = a1;
    static String.Encoding.utf8.getter();
    uint64_t v17 = String.data(using:allowLossyConversion:)();
    unint64_t v19 = v18;
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
    if (v19 >> 60 == 15)
    {
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v57 = v6;
      uint64_t v20 = type metadata accessor for Logger();
      sub_10000FD84(v20, (uint64_t)qword_1003A9B08);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v56 = (void *)swift_slowAlloc();
        double aBlock = v56;
        *(_DWORD *)uint64_t v23 = 136446722;
        uint64_t v24 = sub_1000C8E54();
        uint64_t v65 = sub_1001B3178(v24, v25, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2050;
        uint64_t v26 = String.count.getter();
        swift_bridgeObjectRelease();
        uint64_t v65 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 22) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v27 = v58;
        uint64_t v65 = sub_1001B3178(v58, a2, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] Failed to convert questionnaire text of length %{public}ld to UTF-8 for token %{public}s", (uint8_t *)v23, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        uint64_t v27 = v58;
      }
      sub_1000D5668(v27, a2, v15, v16, 0, 0, 0, 2);
      swift_bridgeObjectRelease();
      sub_10000FDBC();
      unint64_t v34 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v35 = swift_allocObject();
      swift_weakInit();
      unint64_t v36 = (void *)swift_allocObject();
      v36[2] = v35;
      uint64_t v36[3] = v27;
      v36[4] = a2;
      uint64_t v70 = sub_1000D81C0;
      uint64_t v71 = v36;
      double aBlock = _NSConcreteStackBlock;
      uint64_t v67 = 1107296256;
      uint64_t v68 = sub_100207A1C;
      uint64_t v69 = &unk_100355728;
      unint64_t v37 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      unint64_t v38 = v59;
      static DispatchQoS.unspecified.getter();
      double aBlock = _swiftEmptyArrayStorage;
      sub_10007C914();
      sub_100004010((uint64_t *)&unk_10037FF80);
      sub_100009B18((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
      uint64_t v39 = v60;
      uint64_t v40 = v63;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
    }
    else
    {
      uint64_t v56 = (void *)v17;
      uint64_t v55 = v15;
      swift_beginAccess();
      sub_1000A311C(v3 + 48, (uint64_t)&aBlock);
      if (v72)
      {
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        sub_1000A3178((uint64_t)&aBlock);
        if (Strong)
        {
          uint64_t v29 = swift_allocObject();
          swift_weakInit();
          unint64_t v30 = (void *)swift_allocObject();
          uint64_t v31 = v58;
          v30[2] = v29;
          uint64_t v30[3] = v31;
          uint64_t v32 = v55;
          v30[4] = a2;
          v30[5] = v32;
          v30[6] = v16;
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v33 = (uint64_t)v56;
          sub_100275B8C((uint64_t)v56, v19, (uint64_t)sub_1000D776C, (uint64_t)v30);
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
          return sub_10000FD70(v33, v19);
        }
      }
      else
      {
        sub_1000A3178((uint64_t)&aBlock);
      }
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v57 = v6;
      uint64_t v41 = type metadata accessor for Logger();
      sub_10000FD84(v41, (uint64_t)qword_1003A9B08);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      int v44 = v43;
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v45 = swift_slowAlloc();
        int v54 = v44;
        uint64_t v46 = v45;
        double aBlock = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136446466;
        uint64_t v47 = sub_1000C8E54();
        uint64_t v64 = sub_1001B3178(v47, v48, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v49 = v58;
        uint64_t v64 = sub_1001B3178(v58, a2, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v54, "[%{public}s] No compressor set for token %{public}s", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v50 = v55;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
        uint64_t v50 = v55;
        uint64_t v49 = v58;
      }
      sub_1000D5668(v49, a2, v50, v16, 0, 0, 0, 2);
      swift_bridgeObjectRelease();
      sub_10000FDBC();
      unint64_t v34 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v51 = swift_allocObject();
      swift_weakInit();
      uint64_t v52 = (void *)swift_allocObject();
      void v52[2] = v51;
      uint64_t v52[3] = v49;
      v52[4] = a2;
      uint64_t v70 = sub_1000D81C0;
      uint64_t v71 = v52;
      double aBlock = _NSConcreteStackBlock;
      uint64_t v67 = 1107296256;
      uint64_t v68 = sub_100207A1C;
      uint64_t v69 = &unk_100355778;
      unint64_t v37 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      unint64_t v38 = v59;
      static DispatchQoS.unspecified.getter();
      double aBlock = _swiftEmptyArrayStorage;
      sub_10007C914();
      sub_100004010((uint64_t *)&unk_10037FF80);
      sub_100009B18((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
      uint64_t v39 = v60;
      uint64_t v40 = v63;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      sub_10000FD70((uint64_t)v56, v19);
    }
    _Block_release(v37);

    (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v39, v40);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v61 + 8))(v38, v62);
  }
  return result;
}

uint64_t sub_1000D2F50(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  *uint64_t v9 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (qword_10037DE10 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000FD84(v11, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v53[0] = v50;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v15 = sub_1000C8E54();
    v52[0] = sub_1001B3178(v15, v16, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain();
    v52[0] = sub_1001B3178(a1, a2, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s] markNextTextForCompression: for token %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_beginAccess();
  sub_10000D2A0(v3 + 152, (uint64_t)v52, &qword_100385E70);
  if (!v52[1])
  {
    sub_10000950C((uint64_t)v52, &qword_100385E70);
    swift_retain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v25 = 136446210;
      uint64_t v26 = sub_1000C8E54();
      v52[0] = sub_1001B3178(v26, v27, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] markNextTextForCompression: send is not in progress", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
  sub_1000D6B90((uint64_t)v52, (uint64_t)v53);
  if ((v53[0] != a1 || v53[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446466;
      uint64_t v35 = sub_1000C8E54();
      uint64_t v51 = sub_1001B3178(v35, v36, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_1001B3178(a1, a2, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%{public}s] markNextTextForCompression: for expired send token %{public}s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    goto LABEL_29;
  }
  if (v55)
  {
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136446210;
      uint64_t v20 = sub_1000C8E54();
      uint64_t v51 = sub_1001B3178(v20, v21, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v22 = "[%{public}s] markNextTextForCompression: already waiting for the compression result, ignoring";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v22, v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_28:

LABEL_29:
      sub_1000D4FE8((uint64_t)v53);
      return 0;
    }
    goto LABEL_27;
  }
  if (!*(void *)(v54 + 16))
  {
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136446210;
      uint64_t v37 = sub_1000C8E54();
      uint64_t v51 = sub_1001B3178(v37, v38, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v22 = "[%{public}s] markNextTextForCompression: no texts to compress";
      goto LABEL_13;
    }
LABEL_27:
    swift_release_n();
    goto LABEL_28;
  }
  uint64_t v28 = sub_10012C650(v54);
  if (!v29)
  {
    swift_retain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446210;
      uint64_t v43 = sub_1000C8E54();
      uint64_t v51 = sub_1001B3178(v43, v44, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%{public}s] markNextTextForCompression: unexpected failure extracting text to compress", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    if (*(void *)(v3 + 32))
    {
      *(unsigned char *)(v3 + 40) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    unint64_t v48 = sub_1000C8DDC();
    if (*(void *)(v47 + 112))
    {
      uint64_t v49 = v47;
      swift_bridgeObjectRelease();
      *(void *)(v49 + 136) = &_swiftEmptySetSingleton;
    }
    ((void (*)(uint64_t *, void))v48)(v52, 0);
    if (*(void *)(v3 + 32))
    {
      *(unsigned char *)(v3 + 41) = 1;
    }
    else
    {
      sub_100004010(&qword_100393AA0);
      sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
      Subject<>.send()();
    }
    goto LABEL_29;
  }
  uint64_t v30 = v28;
  uint64_t v31 = v29;
  if (*(void *)(v3 + 32))
  {
    *(unsigned char *)(v3 + 40) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  uint64_t v46 = sub_1000C8DDC();
  if (v45[14])
  {
    v45[18] = v30;
    v45[19] = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  ((void (*)(uint64_t *, void))v46)(v52, 0);
  if (*(void *)(v3 + 32))
  {
    *(unsigned char *)(v3 + 41) = 1;
  }
  else
  {
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
  }
  sub_1000D4FE8((uint64_t)v53);
  return v30;
}

void *sub_1000D3AF8()
{
  swift_beginAccess();
  sub_1000A311C(v0 + 48, (uint64_t)v25);
  unint64_t v1 = v25[9];
  uint64_t v23 = v0;
  os_log_type_t v24 = v25;
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1000C5D48((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000D7890, (uint64_t)v22, v1);
  swift_bridgeObjectRelease();
  sub_1000A3178((uint64_t)v25);
  uint64_t v3 = v2[2];
  if (v3)
  {
    uint64_t v4 = v2 + 7;
    uint64_t v5 = &_swiftEmptyArrayStorage;
    do
    {
      if ((v4[5] & 1) == 0)
      {
        uint64_t v9 = v4[3];
        unint64_t v10 = v4[4];
        uint64_t v11 = HIBYTE(v10) & 0xF;
        if ((v10 & 0x2000000000000000) == 0) {
          uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
        }
        if (v11)
        {
          uint64_t v12 = *(v4 - 2);
          uint64_t v13 = *v4;
          uint64_t v18 = *(v4 - 1);
          uint64_t v19 = *(v4 - 3);
          uint64_t v14 = v4[2];
          uint64_t v17 = v4[1];
          uint64_t v20 = v4[7];
          uint64_t v21 = v4[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v25[0] = v5;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1001BF744(0, v5[2] + 1, 1);
            uint64_t v5 = (void *)v25[0];
          }
          unint64_t v7 = v5[2];
          unint64_t v6 = v5[3];
          if (v7 >= v6 >> 1)
          {
            sub_1001BF744(v6 > 1, v7 + 1, 1);
            uint64_t v5 = (void *)v25[0];
          }
          v5[2] = v7 + 1;
          uint64_t v8 = &v5[11 * v7];
          v8[4] = v19;
          v8[5] = v12;
          void v8[6] = v18;
          v8[7] = v13;
          v8[8] = v17;
          v8[9] = v14;
          v8[10] = v9;
          v8[11] = v10;
          *((unsigned char *)v8 + 96) = 0;
          v8[13] = v21;
          v8[14] = v20;
        }
      }
      v4 += 11;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v5;
}

void sub_1000D3CE0(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + 32);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1001BEC58(a1, a2);
    if (v10)
    {
      uint64_t v11 = *(void *)(v8 + 56) + 32 * v9;
      uint64_t v12 = *(void *)v11;
      unint64_t v13 = *(void *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 16);
      int v15 = *(unsigned __int8 *)(v11 + 24);
      sub_10000F1F0(*(void *)v11, v13);
      swift_bridgeObjectRelease();
      if (qword_10037DE10 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10000FD84(v16, (uint64_t)qword_1003A9B08);
      sub_10000F1F0(v12, v13);
      sub_10000F1F0(v12, v13);
      sub_10000F1F0(v12, v13);
      sub_10000F1F0(v12, v13);
      swift_bridgeObjectRetain();
      sub_10000F1F0(v12, v13);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10000F1F0(v12, v13);
      swift_retain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v33 = v18;
        uint64_t v35 = v14;
        os_log_type_t log = v17;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136447234;
        uint64_t v21 = *(void *)(v4 + 16);
        unint64_t v20 = *(void *)(v4 + 24);
        swift_bridgeObjectRetain();
        sub_1001B3178(v21, v20, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2050;
        String.count.getter();
        swift_bridgeObjectRelease();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2050;
        uint64_t v14 = v35;
        switch(v13 >> 62)
        {
          case 1uLL:
            sub_10000F294(v12, v13);
            if (__OFSUB__(HIDWORD(v12), v12))
            {
              __break(1u);
              JUMPOUT(0x1000D433CLL);
            }
            return;
          case 2uLL:
            uint64_t v32 = *(void *)(v12 + 16);
            uint64_t v31 = *(void *)(v12 + 24);
            sub_10000F294(v12, v13);
            if (__OFSUB__(v31, v32))
            {
              __break(1u);
              goto LABEL_20;
            }
            break;
          default:
LABEL_20:
            sub_10000F294(v12, v13);
            break;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10000F294(v12, v13);
        *(_WORD *)(v19 + 32) = 2050;
        sub_10000F294(v12, v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10000F294(v12, v13);
        *(_WORD *)(v19 + 42) = 1026;
        sub_10000F294(v12, v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10000F294(v12, v13);
        uint64_t v17 = log;
        _os_log_impl((void *)&_mh_execute_header, log, v33, "[%{public}s] Encoding as compressed text - reduced from %{public}ld bytes to %{public}ld bytes, codecId - %{public}lu, preferred - %{BOOL,public}d", (uint8_t *)v19, 0x30u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10000F294(v12, v13);
        sub_10000F294(v12, v13);
        sub_10000F294(v12, v13);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        sub_10000F294(v12, v13);
        sub_10000F294(v12, v13);
        sub_10000F294(v12, v13);
      }

      if (v15) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v14;
      }
      char v29 = 1;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10000FD84(v22, (uint64_t)qword_1003A9B08);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136446466;
    uint64_t v27 = *(void *)(v4 + 16);
    unint64_t v26 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    sub_1001B3178(v27, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2050;
    String.count.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] Encoding as uncompressed text of %{public}ld bytes", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000D434C(a1, a2);
  unint64_t v13 = v28;
  char v29 = 0;
  uint64_t v30 = 0;
  LOBYTE(v15) = 1;
LABEL_26:
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v13;
  *(unsigned char *)(a3 + 16) = v29;
  *(void *)(a3 + 24) = v30;
  *(unsigned char *)(a3 + 32) = v15;
}

uint64_t sub_1000D434C(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100004010(&qword_100385E80);
  if (swift_dynamicCast())
  {
    sub_100009164(v38, (uint64_t)&v41);
    sub_100008F88(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_10000950C((uint64_t)v38, &qword_100385E88);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      unint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        unint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        unint64_t v6 = 0;
      }
      unint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_1000D7B38(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_1000D7B9C(v11);
  *((void *)&v38[0] + 1) = v12;
  __chkstk_darwin(*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_1000D6C24((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1000D7C3C);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_1001B3680(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_1001B3680(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    sub_10000FD70(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_10000FD70((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_1000D487C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QuestionnaireState.DefaultTextEncoder()
{
  return self;
}

uint64_t destroy for QuestionnaireState.State(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for QuestionnaireState.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 32;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = v7;
  unint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(a1 + 32, v6, v8);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v12;
    swift_bridgeObjectRetain();
    swift_unknownObjectWeakCopyInit();
    uint64_t v13 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v13;
    uint64_t v14 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v14;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v15;
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    long long v16 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v16;
  }
  uint64_t v17 = *(void *)(a2 + 176);
  uint64_t v18 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = v17;
  *(void *)(a1 + 184) = v18;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QuestionnaireState.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000D4DB8((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 104);
  uint64_t v5 = (_OWORD *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v6)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakCopyAssign();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
    }
    else
    {
      sub_1000D4FE8(a1 + 104);
      *uint64_t v4 = *v5;
      long long v8 = *(_OWORD *)(a2 + 136);
      long long v7 = *(_OWORD *)(a2 + 152);
      long long v9 = *(_OWORD *)(a2 + 120);
      *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v8;
      *(_OWORD *)(a1 + 152) = v7;
      *(_OWORD *)(a1 + 120) = v9;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_unknownObjectWeakCopyInit();
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v4 = *v5;
    long long v10 = *(_OWORD *)(a2 + 120);
    long long v11 = *(_OWORD *)(a2 + 136);
    long long v12 = *(_OWORD *)(a2 + 152);
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v11;
    *(_OWORD *)(a1 + 152) = v12;
    *(_OWORD *)(a1 + 120) = v10;
  }
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *sub_1000D4DB8(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *unint64_t v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1000D4FE8(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for QuestionnaireState.State(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v7 = (_OWORD *)(a1 + 104);
  uint64_t v8 = (_OWORD *)(a2 + 104);
  if (*(void *)(a2 + 112))
  {
    *uint64_t v7 = *v8;
    swift_unknownObjectWeakTakeInit();
    uint64_t v9 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v9;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v10;
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    long long v11 = *(_OWORD *)(a2 + 120);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 120) = v11;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 104);
  uint64_t v7 = (_OWORD *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (v8)
    {
      *uint64_t v6 = *v7;
      swift_unknownObjectWeakTakeInit();
      uint64_t v10 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v10;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
      goto LABEL_8;
    }
LABEL_7:
    long long v11 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v11;
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    long long v12 = *(_OWORD *)(a2 + 120);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 120) = v12;
    goto LABEL_8;
  }
  if (!v8)
  {
    sub_1000D4FE8(a1 + 104);
    goto LABEL_7;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
LABEL_8:
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireState.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireState.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireState.State()
{
  return &type metadata for QuestionnaireState.State;
}

uint64_t destroy for QuestionnaireState.PrepareToSendState()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

uint64_t initializeWithTake for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectWeakTakeInit();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireState.PrepareToSendState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 66)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireState.PrepareToSendState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 66) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireState.PrepareToSendState()
{
  return &type metadata for QuestionnaireState.PrepareToSendState;
}

void sub_1000D5668(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  uint64_t v9 = v8;
  LODWORD(v97) = a8;
  uint64_t v93 = a7;
  unint64_t v94 = a6;
  uint64_t v98 = a3;
  uint64_t v96 = a1;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  long long v16 = (uint64_t *)((char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FDBC();
  uint64_t *v16 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    if (qword_10037DE10 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10000FD84(v18, (uint64_t)qword_1003A9B08);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v92 = a5;
  uint64_t v95 = a4;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v91 = v19;
    uint64_t v99 = v24;
    *(_DWORD *)uint64_t v23 = 136446466;
    uint64_t v25 = sub_1000C8E54();
    v104[0] = sub_1001B3178(v25, v26, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v27 = v96;
    v104[0] = sub_1001B3178(v96, a2, &v99);
    a4 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}s] consumeCompressionResult: for token %{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v27 = v96;
  }
  swift_beginAccess();
  sub_10000D2A0(v9 + 152, (uint64_t)&v99, &qword_100385E70);
  char v28 = (char)v97;
  if (v100)
  {
    sub_1000D6B90((uint64_t)&v99, (uint64_t)v104);
    if ((v104[0] != v27 || v104[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      long long v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v40, v41))
      {
        swift_release_n();
        swift_bridgeObjectRelease_n();
LABEL_61:

        sub_1000D4FE8((uint64_t)v104);
        return;
      }
      uint64_t v42 = swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446466;
      uint64_t v43 = sub_1000C8E54();
      uint64_t v103 = sub_1001B3178(v43, v44, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v103 = sub_1001B3178(v96, a2, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%{public}s] consumeCompressionResult: for expired send token %{public}s", (uint8_t *)v42, 0x16u);
LABEL_59:
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_61;
    }
    uint64_t v96 = v9 + 48;
    unint64_t v29 = v94;
    if (!v105 || (v104[5] != v98 || v105 != a4) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_retain_n();
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136446210;
        uint64_t v33 = sub_1000C8E54();
        uint64_t v103 = sub_1001B3178(v33, v34, &v99);
        unint64_t v29 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s] consumeCompressionResult: original data in the compression result != waitingForCompressionForText", v32, 0xCu);
        swift_arrayDestroy();
        char v28 = (char)v97;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      a4 = v95;
    }
    uint64_t v45 = v104[4];
    swift_bridgeObjectRetain();
    char v46 = sub_100078F90(v98, a4, v45);
    swift_bridgeObjectRelease();
    swift_retain();
    if (v46)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = v92;
      uint64_t v47 = v93;
      sub_1000D7800(v92, v29, v93, v28);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1000D7800(v48, v29, v47, v28);
      uint64_t v49 = Logger.logObject.getter();
      int v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, (os_log_type_t)v50))
      {
        LODWORD(v97) = v50;
        uint64_t v51 = swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        uint64_t v103 = v91;
        *(_DWORD *)uint64_t v51 = 136446722;
        uint64_t v52 = sub_1000C8E54();
        uint64_t v99 = sub_1001B3178(v52, v53, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2050;
        uint64_t v54 = String.count.getter();
        swift_bridgeObjectRelease();
        uint64_t v99 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 22) = 2082;
        if (v28 == 2)
        {
          uint64_t v55 = 0;
        }
        else
        {
          uint64_t v55 = 0;
          switch(v94 >> 62)
          {
            case 1uLL:
              LODWORD(v55) = HIDWORD(v92) - v92;
              if (__OFSUB__(HIDWORD(v92), v92))
              {
                __break(1u);
LABEL_65:
                __break(1u);
                JUMPOUT(0x1000D65E4);
              }
              uint64_t v55 = (int)v55;
              break;
            case 2uLL:
              uint64_t v66 = *(void *)(v92 + 16);
              uint64_t v65 = *(void *)(v92 + 24);
              BOOL v67 = __OFSUB__(v65, v66);
              uint64_t v55 = v65 - v66;
              if (!v67) {
                break;
              }
              goto LABEL_65;
            case 3uLL:
              break;
            default:
              uint64_t v55 = BYTE6(v94);
              break;
          }
        }
        uint64_t v99 = v55;
        LOBYTE(v100) = v28 == 2;
        sub_100004010(&qword_100380FA0);
        uint64_t v68 = String.init<A>(describing:)();
        uint64_t v99 = sub_1001B3178(v68, v69, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v48 = v92;
        uint64_t v70 = v93;
        unint64_t v71 = v94;
        sub_1000D7814(v92, v94, v93, v28);
        sub_1000D7814(v48, v71, v70, v28);
        _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v97, "[%{public}s] consumeCompressionResult: text size - %{public}ld, compressed size - %{public}s", (uint8_t *)v51, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v29 = v71;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        swift_bridgeObjectRelease_n();
        sub_1000D7814(v48, v29, v47, v28);
        sub_1000D7814(v48, v29, v47, v28);
      }

      uint64_t v72 = v48;
      if (*(void *)(v9 + 32))
      {
        *(unsigned char *)(v9 + 40) = 1;
      }
      else
      {
        sub_100004010(&qword_100393AA0);
        sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
        Subject<>.send()();
      }
      uint64_t v73 = v95;
      uint64_t v74 = sub_1000C8DDC();
      if (*(void *)(v75 + 112))
      {
        sub_100254CFC(v98, v73);
        ((void (*)(uint64_t *, void))v74)(&v99, 0);
        swift_bridgeObjectRelease();
      }
      else
      {
        ((void (*)(uint64_t *, void))v74)(&v99, 0);
      }
      uint64_t v77 = sub_1000C8DDC();
      if (v76[14])
      {
        v76[18] = 0;
        v76[19] = 0;
        swift_bridgeObjectRelease();
      }
      ((void (*)(uint64_t *, void))v77)(&v99, 0);
      if (v28 != 2)
      {
        sub_10000F1F0(v72, v29);
        uint64_t v79 = sub_1000C8DDC();
        uint64_t v80 = v72;
        if (*(void *)(v78 + 112))
        {
          uint64_t v81 = v78;
          unint64_t v97 = v79;
          swift_bridgeObjectRetain();
          uint64_t v82 = v73;
          uint64_t v83 = v93;
          sub_1000D7800(v80, v29, v93, v28);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v103 = *(void *)(v81 + 160);
          *(void *)(v81 + 160) = 0x8000000000000000;
          sub_100269830(v80, v29, v83, v28 & 1, v98, v82, isUniquelyReferenced_nonNull_native);
          *(void *)(v81 + 160) = v103;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t *, void))v97)(&v99, 0);
        }
        else
        {
          ((void (*)(uint64_t *, void))v79)(&v99, 0);
          uint64_t v83 = v93;
        }
        sub_1000D7814(v80, v29, v83, v28);
      }
      if (*(void *)(v9 + 32))
      {
        *(unsigned char *)(v9 + 41) = 1;
      }
      else
      {
        sub_100004010(&qword_100393AA0);
        sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
        Subject<>.send()();
      }
      sub_1000A311C(v96, (uint64_t)&v99);
      if (v101)
      {
        uint64_t v85 = v102;
        swift_bridgeObjectRetain();
        sub_1000A3178((uint64_t)&v99);
        uint64_t v86 = *(void *)(v85 + 16);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1000A3178((uint64_t)&v99);
        uint64_t v86 = -1;
      }
      swift_retain_n();
      long long v40 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v87))
      {
        uint64_t v88 = swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 136446466;
        uint64_t v89 = sub_1000C8E54();
        uint64_t v103 = sub_1001B3178(v89, v90, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v88 + 12) = 2050;
        uint64_t v103 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v60 = "[%{public}s] consumeCompressionResult: texts awaiting compression - %{public}ld";
        uint64_t v61 = v40;
        os_log_type_t v62 = v87;
        uint64_t v63 = (uint8_t *)v88;
        uint32_t v64 = 22;
        goto LABEL_58;
      }
    }
    else
    {
      swift_retain();
      long long v40 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136446210;
        uint64_t v58 = sub_1000C8E54();
        uint64_t v103 = sub_1001B3178(v58, v59, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v60 = "[%{public}s] consumeCompressionResult: received compression result is not for a string in textsToCompress set, ignoring";
        uint64_t v61 = v40;
        os_log_type_t v62 = v56;
        uint64_t v63 = v57;
        uint32_t v64 = 12;
LABEL_58:
        _os_log_impl((void *)&_mh_execute_header, v61, v62, v60, v63, v64);
        goto LABEL_59;
      }
    }
    swift_release_n();
    goto LABEL_61;
  }
  sub_10000950C((uint64_t)&v99, &qword_100385E70);
  swift_retain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136446210;
    uint64_t v38 = sub_1000C8E54();
    v104[0] = sub_1001B3178(v38, v39, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s] consumeCompressionResult: send is not in progress", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1000D65F4(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a3;
  uint64_t v44 = a8;
  int v45 = a4;
  uint64_t v41 = a1;
  unint64_t v42 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v39 = v15;
    uint64_t v35 = a9;
    os_log_type_t v36 = v18;
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v37 = v16;
    uint64_t v38 = v14;
    uint64_t v40 = v12;
    uint64_t v20 = type metadata accessor for Logger();
    sub_10000FD84(v20, (uint64_t)qword_1003A9B08);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v11;
      aBlock[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446466;
      uint64_t v25 = sub_1000C8E54();
      uint64_t v46 = sub_1001B3178(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1001B3178(a6, a7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] Received questionnaire text compression result for token %{public}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      uint64_t v11 = v34;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    sub_1000D5668(a6, a7, v44, v35, v41, v42, v43, v45);
    sub_10000FDBC();
    uint64_t v27 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    unint64_t v29 = (void *)swift_allocObject();
    v29[2] = v28;
    uint64_t v29[3] = a6;
    v29[4] = a7;
    aBlock[4] = (uint64_t)sub_1000D77E0;
    aBlock[5] = (uint64_t)v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100207A1C;
    aBlock[3] = (uint64_t)&unk_1003557F0;
    unint64_t v30 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    os_log_type_t v31 = v36;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10007C914();
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_100009B18((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
    uint64_t v32 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v30);
    swift_release();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v31, v39);
  }
  return result;
}

uint64_t sub_1000D6B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000D23D4(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000D6B90(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  swift_unknownObjectWeakTakeInit();
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 64);
  return a2;
}

uint64_t sub_1000D6BEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

char *sub_1000D6C24(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v1 = xmmword_1002B8420;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_1000D7010((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1000D7010(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *unint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *unint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *unint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *sub_1000D6F28@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_1000D7974(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_1000D7A38((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_1000D7AB4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_1000D6FA0(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_1000D7010(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_1000D70C4(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = sub_1001D5824(v3);
    *unint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D71B0()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v1;
  if (!result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_1001D5824(v1);
    uint64_t v1 = result;
    *uint64_t v0 = result;
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

int64_t sub_1000D7220(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000D7304(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000D7390(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000D7418@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D74A4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  sub_1000A311C(v2 + 48, (uint64_t)v13);
  uint64_t v5 = *(void *)(*(void *)(v2 + 264) + 112);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001BEC58(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char v11 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000A2B54(v9, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  char v11 = sub_1002898B8(v13, v8, v10);
  swift_release();
  swift_release();
LABEL_8:
  sub_1000A3178((uint64_t)v13);
  return v11 & 1;
}

uint64_t sub_1000D75CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10012EC04(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000D7664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100385E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D76CC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D7708(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D7718()
{
  return swift_release();
}

uint64_t sub_1000D7724()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D776C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  return sub_1000D65F4(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48));
}

uint64_t sub_1000D77A0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D77E0()
{
  return sub_1000D6B1C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000D7800(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2) {
    return sub_10000F1F0(a1, a2);
  }
  return a1;
}

uint64_t sub_1000D7814(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2) {
    return sub_10000F294(a1, a2);
  }
  return a1;
}

uint64_t sub_1000D7828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100385E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D7890@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E6020(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_1000D78AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000D7920();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_10012F08C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t sub_1000D7920()
{
  unint64_t result = qword_100385E78;
  if (!qword_100385E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385E78);
  }
  return result;
}

uint64_t sub_1000D7974(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000D7A38(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1000D7AB4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *sub_1000D7B38(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_1000D7974(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_1000D7A38((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_1000D7AB4((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1000D7B9C(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void *sub_1000D7C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  uint64_t v12[2] = v13;
  uint64_t result = sub_1000D6FA0((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000D7CA8, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1000D7CA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000D7418(a1, a2);
}

uint64_t sub_1000D7CC8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000D7CD4(uint64_t a1)
{
}

uint64_t sub_1000D7CDC()
{
  return sub_1000C88A0();
}

uint64_t sub_1000D7CE4(char a1)
{
  return sub_1000CDEFC(a1);
}

uint64_t sub_1000D7CEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000D7D24(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for QuestionnaireState.RecordedAnswerChoice()
{
  return &type metadata for QuestionnaireState.RecordedAnswerChoice;
}

uint64_t destroy for QuestionnaireState.QuestionsAnsweredPresentationItem()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireState.QuestionsAnsweredPresentationItem()
{
  return &type metadata for QuestionnaireState.QuestionsAnsweredPresentationItem;
}

unsigned char *_s8SOSBuddy18QuestionnaireStateC20RecordedAnswerChoiceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D8080);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireState.Stage()
{
  return &type metadata for QuestionnaireState.Stage;
}

uint64_t assignWithCopy for QuestionnaireState.RecordedAnswer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.RecordedAnswer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireState.RecordedAnswer()
{
  return &type metadata for QuestionnaireState.RecordedAnswer;
}

unint64_t sub_1000D8150()
{
  unint64_t result = qword_100385EA8;
  if (!qword_100385EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385EA8);
  }
  return result;
}

uint64_t destroy for RadarView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for RadarView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RadarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for RadarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_release();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_release();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarView()
{
  return &type metadata for RadarView;
}

uint64_t sub_1000D853C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D8558()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000D857C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LayoutDirection();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_1000D8644(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = (void *)type metadata accessor for AccessibilityChildBehavior();
  uint64_t v6 = (void (**)(void, void))*(v5 - 1);
  __chkstk_darwin(v5);
  unint64_t v109 = (unint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100004010(&qword_100382818);
  __chkstk_darwin(v102);
  os_log_t v106 = (uint64_t *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v107 = type metadata accessor for LayoutDirection();
  uint64_t v104 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v103 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_100004010(&qword_100385EC8);
  __chkstk_darwin(v101);
  uint64_t v105 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_100385ED0);
  __chkstk_darwin(v11);
  uint64_t v108 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100004010(&qword_100385ED8);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100004010(&qword_100385EE0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v117 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v24 = *v1;
  if (!v24) {
    goto LABEL_19;
  }
  uint64_t v110 = v11;
  uint64_t v111 = v6;
  uint64_t v25 = v2[2];
  if (!v25)
  {
LABEL_20:
    type metadata accessor for ConnectivityModel();
    sub_1000E25FC(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
LABEL_23:
    swift_retain();
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v26 = v2[4];
  if (!v26)
  {
    type metadata accessor for GuidanceModel(0);
    sub_1000E25FC(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
    swift_retain();
    goto LABEL_23;
  }
  uint64_t v112 = v16;
  id v113 = v5;
  uint64_t v27 = v2[6];
  if (!v27)
  {
    type metadata accessor for OrientationModel();
    sub_1000E25FC(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
    swift_retain();
    swift_retain();
    goto LABEL_23;
  }
  uint64_t v28 = v2[8];
  if (!v28)
  {
LABEL_24:
    type metadata accessor for StewieModel();
    sub_1000E25FC(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v114 = v14;
  uint64_t v115 = v13;
  uint64_t v93 = v21;
  uint64_t v94 = (uint64_t)&v93 - v22;
  uint64_t v95 = v23;
  uint64_t v96 = v4;
  uint64_t v29 = v2[10];
  if (v29)
  {
    sub_1000D9EF4((unsigned char *)v2 + 96, &v127);
    type metadata accessor for RadarMetrics();
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 72) = xmmword_1002B8680;
    *(void *)(v30 + 88) = 0x3FD0C152382D7365;
    sub_1000D9EF4(&v127, (unsigned char *)(v30 + 16));
    *(void *)(v30 + 24) = v24;
    *(void *)(v30 + 32) = v25;
    *(void *)(v30 + 40) = v26;
    *(void *)(v30 + 48) = v27;
    *(void *)(v30 + 56) = v28;
    *(void *)(v30 + 64) = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000ECD04();
    double v32 = v31;
    double v34 = v33;
    uint64_t v100 = static HorizontalAlignment.center.getter();
    sub_1000EEF10((uint64_t)v126);
    long long v98 = *(_OWORD *)&v126[16];
    long long v99 = *(_OWORD *)v126;
    long long v97 = *(_OWORD *)&v126[32];
    uint64_t v35 = *(void *)&v126[48];
    uint64_t v36 = *(void *)&v126[56];
    uint64_t v116 = v26;
    __int16 v37 = *(_WORD *)&v126[64];
    char v38 = v126[66];
    uint64_t v39 = static Alignment.center.getter();
    uint64_t v41 = v40;
    sub_1000D9490(v30);
    v121[0] = v39;
    v121[1] = v41;
    memcpy(&v121[2], v119, 0x3A2uLL);
    v122[958] = v38;
    memcpy(&v122[5], v121, 0x3B2uLL);
    v123[0] = v39;
    v123[1] = v41;
    memcpy(v124, v119, 0x3A2uLL);
    sub_1000DCD60((uint64_t)v121);
    sub_1000DD3F4((uint64_t)v123);
    v124[936] = 0;
    uint64_t v128 = v100;
    uint64_t v129 = 0;
    char v130 = 0;
    long long v131 = v99;
    long long v132 = v98;
    long long v133 = v97;
    uint64_t v134 = v35;
    uint64_t v135 = v36;
    __int16 v136 = v37;
    char v137 = v38;
    memcpy(v138, v122, sizeof(v138));
    static Alignment.center.getter();
    sub_100166D4C(0.0, 1, 0.0, 1, v32, 0, v34, 0, (uint64_t)v120, 0.0, 1, v34, 0);
    sub_1000DD3F4((uint64_t)v121);
    memcpy(v125, v120, sizeof(v125));
    LOBYTE(v39) = static Edge.Set.all.getter();
    memcpy(v126, v125, 0x488uLL);
    v126[1160] = v39;
    memset(&v126[1168], 0, 33);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v44 = v103;
    uint64_t v43 = v104;
    uint64_t v45 = v107;
    (*(void (**)(char *, void, uint64_t))(v104 + 104))(v103, enum case for LayoutDirection.leftToRight(_:), v107);
    uint64_t v46 = v106;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))((char *)v106 + *(int *)(v102 + 28), v44, v45);
    *uint64_t v46 = KeyPath;
    uint64_t v47 = v105;
    sub_10000D2A0((uint64_t)v46, (uint64_t)&v105[*(int *)(v101 + 36)], &qword_100382818);
    memcpy(v47, v126, 0x4B1uLL);
    sub_1000DDAAC((uint64_t)v126);
    sub_10000950C((uint64_t)v46, &qword_100382818);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
    sub_1000DDDDC((uint64_t)v125);
    uint64_t v107 = v30;
    double v48 = sub_1000ECFCC();
    static UnitPoint.center.getter();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v53 = v108;
    sub_10000D2A0((uint64_t)v47, v108, &qword_100385EC8);
    uint64_t v54 = v110;
    uint64_t v55 = (double *)(v53 + *(int *)(v110 + 36));
    *uint64_t v55 = v48;
    v55[1] = v48;
    *((void *)v55 + 2) = v50;
    *((void *)v55 + 3) = v52;
    sub_10000950C((uint64_t)v47, &qword_100385EC8);
    unint64_t v56 = v109;
    static AccessibilityChildBehavior.ignore.getter();
    uint64_t v57 = (void *)sub_1000DE1D8(&qword_100385EE8, &qword_100385ED0, (void (*)(void))sub_1000DE10C);
    uint64_t v58 = v112;
    View.accessibilityElement(children:)();
    ((void (**)(unint64_t, id))v111)[1](v56, v113);
    sub_10000950C(v53, &qword_100385ED0);
    id v113 = self;
    id v59 = [v113 mainBundle];
    v60._uint64_t countAndFlagsBits = 0xD000000000000014;
    unint64_t v109 = (unint64_t)"Swift/UnsafePointer.swift";
    uint64_t v111 = (void (**)(void, void))0x80000001002CE060;
    v139._uint64_t object = (void *)0x80000001002CE060;
    v60._uint64_t object = (void *)0x80000001002C75B0;
    v61._uint64_t countAndFlagsBits = 0;
    v61._uint64_t object = (void *)0xE000000000000000;
    v139._uint64_t countAndFlagsBits = 0xD000000000000027;
    Swift::String v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, (Swift::String_optional)0, (NSBundle)v59, v61, v139);

    Swift::String v118 = v62;
    sub_100033310();
    uint64_t v63 = Text.init<A>(_:)();
    uint64_t v65 = v64;
    LOBYTE(v37) = v66 & 1;
    v118._uint64_t countAndFlagsBits = v54;
    v118._uint64_t object = v57;
    swift_getOpaqueTypeConformance2();
    uint64_t v67 = v115;
    View.accessibility(label:)();
    char v68 = v37;
    uint64_t v69 = v116;
    sub_100033364(v63, v65, v68);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v58, v67);
    uint64_t v70 = OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow;
    if ((*(unsigned char *)(v69 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow) & 1) != 0
      || (*(unsigned char *)(v69 + 66) & 1) != 0
      || (uint64_t v71 = v69 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing,
          (*(unsigned char *)(v69 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing + 24) & 1) != 0))
    {
      id v72 = [v113 mainBundle];
      v73._uint64_t countAndFlagsBits = 0xD000000000000015;
      v140._uint64_t object = v111;
      v73._uint64_t object = (void *)0x80000001002CE090;
      v74._uint64_t countAndFlagsBits = 0;
      v74._uint64_t object = (void *)0xE000000000000000;
      v140._uint64_t countAndFlagsBits = 0xD000000000000027;
      Swift::String v75 = NSLocalizedString(_:tableName:bundle:value:comment:)(v73, (Swift::String_optional)0, (NSBundle)v72, v74, v140);
      uint64_t countAndFlagsBits = v75._countAndFlagsBits;
      uint64_t object = v75._object;

LABEL_11:
      v118._uint64_t countAndFlagsBits = countAndFlagsBits;
      v118._uint64_t object = object;
      uint64_t v78 = Text.init<A>(_:)();
      uint64_t v80 = v79;
      char v82 = v81 & 1;
      uint64_t v83 = v95;
      uint64_t v84 = (uint64_t)v117;
      ModifiedContent<>.accessibility(value:)();
      sub_100033364(v78, v80, v82);
      swift_release();
      swift_bridgeObjectRelease();
      sub_10000950C(v84, &qword_100385EE0);
      uint64_t v85 = v94;
      sub_10000D544(v83, v94, &qword_100385EE0);
      return sub_10000D544(v85, v96, &qword_100385EE0);
    }
    id v87 = [v113 mainBundle];
    v141._uint64_t object = (void *)(v109 | 0x8000000000000000);
    v88._uint64_t countAndFlagsBits = 0x20676E6964616548;
    v88._uint64_t object = (void *)0xAE00B0C266302E25;
    v89._uint64_t countAndFlagsBits = 0;
    v89._uint64_t object = (void *)0xE000000000000000;
    v141._uint64_t countAndFlagsBits = 0xD000000000000027;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v88, (Swift::String_optional)0, (NSBundle)v87, v89, v141);

    sub_100004010(&qword_100380030);
    uint64_t v90 = swift_allocObject();
    *(_OWORD *)(v90 + 16) = xmmword_1002B3350;
    if (*(unsigned char *)(v69 + v70))
    {
      __break(1u);
    }
    else if ((*(unsigned char *)(v69 + 66) & 1) == 0)
    {
      if ((*(unsigned char *)(v71 + 24) & 1) == 0)
      {
        double v91 = *(double *)v71 * 57.2957795;
        *(void *)(v90 + 56) = &type metadata for Double;
        *(void *)(v90 + 64) = &protocol witness table for Double;
        *(double *)(v90 + 32) = v91;
        uint64_t countAndFlagsBits = String.init(format:_:)();
        uint64_t object = v92;
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    type metadata accessor for ConnectionClosedModel(0);
    sub_1000E25FC(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_20;
  }
LABEL_25:
  type metadata accessor for UIMetrics();
  sub_1000E25FC((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000D9490(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  __dst = v2;
  uint64_t v75 = static Color.clear.getter();
  unsigned int v83 = *(unsigned __int8 *)(v1 + 16) - 2;
  if (v83 < 3)
  {
    sub_1000ECD04();
    sub_1000ECD04();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v3 = v123;
  char v4 = v124;
  uint64_t v5 = v125;
  char v6 = v126;
  uint64_t v68 = v128;
  uint64_t v69 = v127;
  uint64_t v7 = Namespace.wrappedValue.getter();
  int v66 = static MatchedGeometryProperties.position.getter();
  static UnitPoint.top.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_1000ED944((uint64_t)v129);
  sub_10000D544((uint64_t)v129, (uint64_t)v122, &qword_100385F30);
  sub_10000D544((uint64_t)v129, (uint64_t)v146, &qword_100385F30);
  uint64_t v73 = v3;
  char v72 = v4;
  uint64_t v71 = v5;
  char v70 = v6;
  uint64_t v67 = v7;
  if (sub_1000DE2F4((uint64_t *)v146) == 1)
  {
    sub_1000DE30C(__src);
  }
  else
  {
    long long v116 = v146[10];
    long long v117 = v146[11];
    long long v118 = v146[12];
    long long v119 = v146[13];
    v114[6] = v146[6];
    v114[7] = v146[7];
    v114[8] = v146[8];
    long long v115 = v146[9];
    v114[2] = v146[2];
    v114[3] = v146[3];
    v114[4] = v146[4];
    v114[5] = v146[5];
    v114[0] = v146[0];
    v114[1] = v146[1];
    sub_10000D544((uint64_t)v122, (uint64_t)v87, &qword_100385F30);
    sub_1000DFB2C((uint64_t)v87);
    uint64_t v12 = Namespace.wrappedValue.getter();
    int v13 = static MatchedGeometryProperties.position.getter();
    static UnitPoint.bottom.getter();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v18 = Namespace.wrappedValue.getter();
    int v19 = static MatchedGeometryProperties.position.getter();
    static UnitPoint.top.getter();
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    sub_1000DE57C(v129);
    *(_OWORD *)&__src[160] = v116;
    *(_OWORD *)&__src[176] = v117;
    *(_OWORD *)&__src[192] = v118;
    *(_OWORD *)&__src[208] = v119;
    *(_OWORD *)&__src[96] = v114[6];
    *(_OWORD *)&__src[112] = v114[7];
    *(_OWORD *)&__src[128] = v114[8];
    *(_OWORD *)&__src[144] = v115;
    *(_OWORD *)&__src[32] = v114[2];
    *(_OWORD *)&__src[48] = v114[3];
    *(_OWORD *)&__src[64] = v114[4];
    *(_OWORD *)&__src[80] = v114[5];
    *(_OWORD *)__src = v114[0];
    *(_OWORD *)&__src[16] = v114[1];
    *(void *)&__src[224] = 0xD000000000000012;
    *(void *)&__src[232] = 0x80000001002CE0B0;
    *(void *)&__src[240] = v12;
    *(_DWORD *)&__src[248] = v13;
    *(void *)&__src[256] = v15;
    *(void *)&__src[264] = v17;
    __src[272] = 1;
    strcpy(&__src[280], "stack-top");
    *(_WORD *)&__src[290] = 0;
    *(_DWORD *)&__src[292] = -385875968;
    *(void *)&__src[296] = v18;
    *(_DWORD *)&__src[304] = v19;
    *(void *)&__src[312] = v21;
    *(void *)&__src[320] = v23;
    __src[328] = 0;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
  }
  sub_10000D544((uint64_t)__src, (uint64_t)v121, &qword_100385F38);
  sub_1000EFC50((uint64_t)__src);
  uint64_t v64 = *(void *)&__src[16];
  uint64_t v65 = *(void *)&__src[8];
  uint64_t v81 = *(void *)&__src[24];
  uint64_t v82 = *(void *)__src;
  uint64_t v63 = *(void *)&__src[40];
  uint64_t v79 = *(void *)&__src[48];
  uint64_t v80 = *(void *)&__src[32];
  uint64_t v77 = *(void *)&__src[64];
  uint64_t v78 = *(void *)&__src[56];
  char v76 = __src[72];
  char v24 = __src[73];
  uint64_t v62 = Namespace.wrappedValue.getter();
  int v61 = static MatchedGeometryProperties.position.getter();
  static UnitPoint.center.getter();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v60 = static Animation.easeIn.getter();
  if (v83 >= 3)
  {
    double v29 = 145.0;
    double v31 = 153.0;
  }
  else
  {
    double v29 = dbl_1002B8DA0[(char)v83];
    sub_1000ECD04();
    double v31 = v30 * 0.5;
  }
  char v84 = v24;
  v120[263] = v24;
  sub_1000EE094((uint64_t)v130);
  sub_10000D544((uint64_t)v130, (uint64_t)v134, &qword_100385F40);
  uint64_t v32 = v138;
  if (v138)
  {
    uint64_t v55 = v134[1];
    uint64_t v57 = v134[0];
    char v33 = v135;
    uint64_t v34 = v134[2];
    uint64_t v35 = v136;
    uint64_t v59 = v28;
    uint64_t v36 = v9;
    uint64_t v37 = v137;
    uint64_t v38 = v139;
    long long v51 = v141;
    long long v53 = v140;
    uint64_t v39 = v11;
    uint64_t v40 = v142;
    uint64_t v41 = v26;
    uint64_t v42 = v143;
    char v43 = v144;
    char v44 = v145;
    sub_1000EE5B8((uint64_t)v87);
    *(_OWORD *)((char *)&v114[2] + 6) = v87[2];
    *(_OWORD *)((char *)&v114[1] + 6) = v87[1];
    *(_OWORD *)((char *)&v114[6] + 6) = v87[6];
    *(_OWORD *)((char *)&v114[5] + 6) = v87[5];
    *(_OWORD *)((char *)&v114[7] + 6) = v87[7];
    *(_OWORD *)((char *)&v114[3] + 6) = v87[3];
    *(_OWORD *)((char *)&v114[4] + 6) = v87[4];
    v86[0] = v33;
    *(void *)((char *)&v114[8] + 6) = v88;
    *(_OWORD *)((char *)v114 + 6) = v87[0];
    *(void *)__src = v57;
    *(void *)&__src[8] = v55;
    *(void *)&__src[16] = v34;
    __src[24] = v33;
    *(void *)&__src[32] = v35;
    *(void *)&__src[40] = v37;
    uint64_t v9 = v36;
    uint64_t v28 = v59;
    *(void *)&__src[48] = v32;
    *(void *)&__src[56] = v38;
    *(_OWORD *)&__src[64] = v53;
    *(_OWORD *)&__src[80] = v51;
    *(void *)&__src[96] = v40;
    uint64_t v11 = v39;
    *(void *)&__src[104] = v42;
    uint64_t v26 = v41;
    __src[112] = v43;
    __src[113] = v44;
    *(_OWORD *)&__src[114] = v114[0];
    *(_OWORD *)&__src[178] = v114[4];
    *(_OWORD *)&__src[162] = v114[3];
    *(_OWORD *)&__src[146] = v114[2];
    *(_OWORD *)&__src[130] = v114[1];
    *(_OWORD *)&__src[240] = *(_OWORD *)((char *)&v114[7] + 14);
    *(_OWORD *)&__src[226] = v114[7];
    *(_OWORD *)&__src[210] = v114[6];
    *(_OWORD *)&__src[194] = v114[5];
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
  }
  else
  {
    sub_1000DE344(__src);
  }
  sub_10000D544((uint64_t)__src, (uint64_t)v120, &qword_100385F48);
  sub_1000EFA54((uint64_t)v131);
  sub_10000D544((uint64_t)v131, (uint64_t)v132, &qword_100385F50);
  if ((v133 & 0xFF00) == 0x200)
  {
    uint64_t v56 = 0;
    uint64_t v58 = 0;
    uint64_t v54 = 0;
    uint64_t v50 = 0;
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    __int16 v48 = 512;
  }
  else
  {
    uint64_t v56 = v132[1];
    uint64_t v58 = v132[0];
    uint64_t v54 = v132[2];
    uint64_t v50 = v132[4];
    uint64_t v52 = v132[3];
    uint64_t v49 = v132[5];
    __int16 v48 = v133 & 0x101;
    uint64_t v46 = v132[6];
    uint64_t v47 = v132[7];
  }
  sub_10000D544((uint64_t)v121, (uint64_t)v86, &qword_100385F38);
  sub_10000D544((uint64_t)v120, (uint64_t)v85, &qword_100385F48);
  sub_10000D544((uint64_t)v86, (uint64_t)v87, &qword_100385F38);
  *(void *)&long long v89 = v82;
  *((void *)&v89 + 1) = v65;
  *(void *)&long long v90 = v64;
  *((void *)&v90 + 1) = v81;
  *(void *)&long long v91 = v80;
  *((void *)&v91 + 1) = v63;
  *(void *)&long long v92 = v79;
  *((void *)&v92 + 1) = v78;
  *(void *)&long long v93 = v77;
  BYTE8(v93) = v76;
  BYTE9(v93) = v84;
  *(void *)&long long v94 = 0xD000000000000012;
  *((void *)&v94 + 1) = 0x80000001002CE0B0;
  *(void *)&long long v95 = v62;
  DWORD2(v95) = v61;
  *(void *)&long long v96 = v26;
  *((void *)&v96 + 1) = v28;
  LOBYTE(v97) = 0;
  *((void *)&v97 + 1) = v60;
  double v98 = v29 - v31;
  sub_10000D544((uint64_t)v85, (uint64_t)v99, &qword_100385F48);
  *(void *)__src = v75;
  *(_WORD *)&__src[8] = 256;
  *(void *)&__src[16] = v73;
  __src[24] = v72;
  *(void *)&__src[32] = v71;
  __src[40] = v70;
  *(void *)&__src[48] = v69;
  *(void *)&__src[56] = v68;
  strcpy(&__src[64], "stack-top");
  *(_WORD *)&__src[74] = 0;
  *(_DWORD *)&__src[76] = -385875968;
  *(void *)&__src[80] = v67;
  *(_DWORD *)&__src[88] = v66;
  *(void *)&__src[96] = v9;
  *(void *)&__src[104] = v11;
  __src[112] = 1;
  sub_10000D544((uint64_t)v87, (uint64_t)&__src[120], &qword_100385F38);
  *(_OWORD *)&__src[552] = v95;
  *(_OWORD *)&__src[568] = v96;
  *(_OWORD *)&__src[584] = v97;
  *(_OWORD *)&__src[488] = v91;
  *(_OWORD *)&__src[504] = v92;
  *(_OWORD *)&__src[520] = v93;
  *(_OWORD *)&__src[536] = v94;
  *(_OWORD *)&__src[456] = v89;
  *(_OWORD *)&__src[472] = v90;
  *(double *)&__src[600] = v98;
  sub_10000D544((uint64_t)v99, (uint64_t)&__src[608], &qword_100385F48);
  *(void *)&__src[864] = v58;
  *(void *)&__src[872] = v56;
  *(void *)&__src[880] = v54;
  *(void *)&__src[888] = v52;
  *(void *)&__src[896] = v50;
  *(void *)&__src[904] = v49;
  *(void *)&__src[912] = v46;
  *(void *)&__src[920] = v47;
  *(_WORD *)&__src[928] = v48;
  memcpy(__dst, __src, 0x3A2uLL);
  sub_10000D544((uint64_t)v85, (uint64_t)v101, &qword_100385F48);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000DE4E0((uint64_t)v87, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000DD07C);
  sub_1000DE36C((uint64_t)&v89);
  sub_1000DE3E4((uint64_t)v99, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DD388);
  sub_1000DE3E4((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DDA18);
  v102[0] = v82;
  v102[1] = v65;
  v102[2] = v64;
  v102[3] = v81;
  v102[4] = v80;
  v102[5] = v63;
  v102[6] = v79;
  v102[7] = v78;
  v102[8] = v77;
  char v103 = v76;
  char v104 = v84;
  unint64_t v105 = 0xD000000000000012;
  unint64_t v106 = 0x80000001002CE0B0;
  uint64_t v107 = v62;
  int v108 = v61;
  uint64_t v109 = v26;
  uint64_t v110 = v28;
  char v111 = 0;
  uint64_t v112 = v60;
  double v113 = v29 - v31;
  sub_1000DE468((uint64_t)v102);
  sub_10000D544((uint64_t)v86, (uint64_t)v114, &qword_100385F38);
  sub_1000DE4E0((uint64_t)v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000DD70C);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000D9EA8(uint64_t a1)
{
  return sub_1000D8644(a1);
}

unsigned char *sub_1000D9EF4(unsigned char *a1, unsigned char *a2)
{
  return a2;
}

uint64_t sub_1000D9F50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = type metadata accessor for AnimationTimelineSchedule();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v20 = sub_100004010(&qword_1003860D8);
  uint64_t v10 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnimationTimelineSchedule.init(minimumInterval:paused:)();
  uint64_t v13 = swift_allocObject();
  memcpy((void *)(v13 + 16), v2, 0x168uLL);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1000E2440;
  *(void *)(v14 + 24) = v13;
  sub_1000E2488((uint64_t)v2);
  sub_100004010(&qword_1003860E0);
  sub_1000E25FC(&qword_10037ED70, (void (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule);
  sub_1000E2644();
  TimelineView<>.init(_:content:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v16 = v20;
  uint64_t v15 = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v21, v12, v20);
  uint64_t v17 = (_OWORD *)(v15 + *(int *)(sub_100004010(&qword_100386120) + 36));
  long long v18 = v23;
  _OWORD *v17 = v22;
  v17[1] = v18;
  v17[2] = v24;
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v16);
}

uint64_t sub_1000DA260@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100004010(qword_10037ED80);
  TimelineView.Context.date.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  long double v9 = v8;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  long long v10 = a1[19];
  long long v71 = a1[18];
  long long v72 = v10;
  long long v11 = a1[21];
  long long v73 = a1[20];
  long long v74 = v11;
  uint64_t v75 = *((void *)a1 + 44);
  long long v12 = a1[15];
  long long v67 = a1[14];
  long long v68 = v12;
  long long v13 = a1[17];
  long long v69 = a1[16];
  long long v70 = v13;
  long double v14 = *(double *)&v67;
  char v15 = v71;
  double v16 = remainder(v9, *(long double *)&v67);
  double v17 = v16;
  if (v16 < 0.0)
  {
    long long v18 = a1[11];
    long long v19 = a1[9];
    long long v62 = a1[10];
    long long v63 = v18;
    long long v20 = a1[11];
    long long v21 = a1[13];
    long long v64 = a1[12];
    long long v65 = v21;
    long long v22 = a1[7];
    long long v23 = a1[5];
    double v24 = fabs(v14 * 0.5 + v16) / (v14 * 0.5);
    long long v58 = a1[6];
    long long v59 = v22;
    long long v25 = a1[7];
    long long v26 = a1[9];
    long long v60 = a1[8];
    long long v61 = v26;
    long long v27 = a1[3];
    long long v28 = a1[1];
    long long v54 = a1[2];
    long long v55 = v27;
    long long v29 = a1[3];
    long long v30 = a1[5];
    long long v56 = a1[4];
    long long v57 = v30;
    long long v31 = a1[1];
    long long v52 = *a1;
    long long v53 = v31;
    v50[10] = v62;
    v50[11] = v20;
    long long v32 = a1[13];
    v50[12] = v64;
    v50[13] = v32;
    v50[6] = v58;
    v50[7] = v25;
    v50[8] = v60;
    v50[9] = v19;
    v50[2] = v54;
    v50[3] = v29;
    v50[4] = v56;
    v50[5] = v23;
    v50[0] = v52;
    v50[1] = v28;
    long long v33 = a1[21];
    v50[20] = a1[20];
    v50[21] = v33;
    *(void *)&v50[22] = *((void *)a1 + 44);
    long long v34 = a1[17];
    unsigned char v50[16] = a1[16];
    v50[17] = v34;
    long long v35 = a1[19];
    v50[18] = a1[18];
    v50[19] = v35;
    long long v36 = a1[15];
    v50[14] = a1[14];
    v50[15] = v36;
    memcpy(v48, v50, sizeof(v48));
    double v49 = v24;
    sub_1000E2A1C((uint64_t)v48);
    sub_10000D544((uint64_t)v48, (uint64_t)v51, &qword_100386130);
    sub_1000DFB2C((uint64_t)&v52);
    sub_1000E2820((uint64_t)&v67);
LABEL_12:
    sub_100004010(&qword_100386110);
    sub_1000E2734();
    sub_1000E4768(&qword_100386108, &qword_100386110, (void (*)(void))sub_1000E2788);
    _ConditionalContent<>.init(storage:)();
    memcpy(v51, v66, 0x179uLL);
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v51);
    goto LABEL_13;
  }
  long long v37 = a1[11];
  long long v62 = a1[10];
  long long v63 = v37;
  long long v38 = a1[13];
  long long v64 = a1[12];
  long long v65 = v38;
  long long v39 = a1[7];
  long long v58 = a1[6];
  long long v59 = v39;
  long long v40 = a1[9];
  long long v60 = a1[8];
  long long v61 = v40;
  long long v41 = a1[3];
  long long v54 = a1[2];
  long long v55 = v41;
  long long v42 = a1[5];
  long long v56 = a1[4];
  long long v57 = v42;
  long long v43 = a1[1];
  long long v52 = *a1;
  long long v53 = v43;
  if ((BYTE8(v55) & 1) == 0)
  {
    if (v15)
    {
      *(double *)&uint64_t v44 = COERCE_DOUBLE(sub_1000E2904(v9, v14, *(double *)&v55));
      if (v45)
      {
        sub_1000E29E0((uint64_t)v66);
        goto LABEL_11;
      }
      double v46 = *(double *)&v44;
    }
    else
    {
      double v46 = 0.0;
    }
    v51[10] = v62;
    v51[11] = v63;
    v51[12] = v64;
    v51[13] = v65;
    v51[6] = v58;
    v51[7] = v59;
    char v51[8] = v60;
    v51[9] = v61;
    v51[2] = v54;
    uint64_t v51[3] = v55;
    v51[4] = v56;
    v51[5] = v57;
    v51[0] = v52;
    v51[1] = v53;
    v51[20] = v73;
    v51[21] = v74;
    *(void *)&v51[22] = v75;
    v51[17] = v70;
    v51[19] = v72;
    v51[18] = v71;
    v51[15] = v68;
    v51[16] = v69;
    v51[14] = v67;
    memcpy(v66, v51, 0x168uLL);
    v66[45] = v17 / (v14 * 0.5);
    v66[46] = v46;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v66);
    sub_1000E2820((uint64_t)&v67);
    sub_1000DFB2C((uint64_t)&v52);
LABEL_11:
    sub_10000D544((uint64_t)v66, (uint64_t)v50, &qword_100386110);
    sub_10000D544((uint64_t)v50, (uint64_t)v48, &qword_100386110);
    sub_1000E28F8((uint64_t)v48);
    sub_10000D544((uint64_t)v48, (uint64_t)v51, &qword_100386130);
    goto LABEL_12;
  }
  sub_1000E27DC((uint64_t)v51);
LABEL_13:
  sub_10000D544((uint64_t)v51, (uint64_t)v66, &qword_1003860E0);
  return sub_10000D544((uint64_t)v66, a2, &qword_1003860E0);
}

uint64_t sub_1000DA720@<X0>(double *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = *((void *)a1 + 25);
  uint64_t v6 = *((void *)a1 + 29);
  uint64_t v5 = *((void *)a1 + 30);
  uint64_t v29 = *((void *)a1 + 31);
  uint64_t v7 = *((void *)a1 + 33);
  uint64_t v8 = *((void *)a1 + 34);
  uint64_t v9 = *((void *)a1 + 35);
  uint64_t v30 = *((void *)a1 + 42);
  double v10 = a1[45];
  double v32 = sub_1000ECC00(*((void *)a1 + 32), v10);
  double v11 = sub_1000ECC00(v9, v10);
  double v12 = sub_1000ECC00(v7, v10);
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  double v13 = sub_1000ECC00(v6, v10);
  double v14 = sub_1000ECC00(v9, v10);
  double v15 = sub_1000ECC00(v5, v10);
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)&long long v43 = v4;
  *((void *)&v43 + 1) = v30;
  *(double *)&long long v44 = a3;
  *((double *)&v44 + 1) = v32;
  LOBYTE(v45) = 0;
  *((void *)&v45 + 1) = v8;
  LOWORD(v46) = 256;
  *((double *)&v46 + 1) = v11;
  *(double *)&long long v47 = v12;
  BYTE8(v47) = 0;
  *(void *)&long long v48 = v33;
  BYTE8(v48) = v34;
  *(void *)&long long v49 = v35;
  BYTE8(v49) = v36;
  long long v50 = v37;
  *(void *)&long long v51 = v4;
  *((void *)&v51 + 1) = v30;
  *(double *)&long long v52 = a3;
  *((double *)&v52 + 1) = v13;
  LOBYTE(v53) = 0;
  *((void *)&v53 + 1) = v29;
  LOWORD(v54) = 256;
  *((double *)&v54 + 1) = v14;
  *(double *)&long long v55 = v15;
  BYTE8(v55) = 0;
  *(void *)&long long v56 = v38;
  BYTE8(v56) = v39;
  *(void *)&long long v57 = v40;
  BYTE8(v57) = v41;
  long long v58 = v42;
  long long v63 = v47;
  long long v64 = v48;
  long long v65 = v49;
  long long v66 = v37;
  long long v59 = v43;
  long long v60 = v44;
  long long v61 = v45;
  long long v62 = v46;
  long long v69 = v53;
  long long v70 = v54;
  long long v67 = v51;
  long long v68 = v52;
  long long v73 = v57;
  long long v74 = v42;
  long long v71 = v55;
  long long v72 = v56;
  long long v16 = v43;
  long long v17 = v44;
  long long v18 = v46;
  a2[2] = v45;
  a2[3] = v18;
  *a2 = v16;
  a2[1] = v17;
  long long v19 = v63;
  long long v20 = v64;
  long long v21 = v66;
  a2[6] = v65;
  a2[7] = v21;
  a2[4] = v19;
  a2[5] = v20;
  long long v22 = v67;
  long long v23 = v68;
  long long v24 = v70;
  a2[10] = v69;
  a2[11] = v24;
  a2[8] = v22;
  a2[9] = v23;
  long long v25 = v71;
  long long v26 = v72;
  long long v27 = v74;
  a2[14] = v73;
  a2[15] = v27;
  a2[12] = v25;
  a2[13] = v26;
  v75[0] = v4;
  v75[1] = v30;
  *(double *)&v75[2] = a3;
  *(double *)&v75[3] = v13;
  char v76 = 0;
  uint64_t v77 = v29;
  __int16 v78 = 256;
  double v79 = v14;
  double v80 = v15;
  char v81 = 0;
  uint64_t v82 = v38;
  char v83 = v39;
  uint64_t v84 = v40;
  char v85 = v41;
  long long v86 = v42;
  sub_1000E4904((uint64_t)&v43);
  sub_1000E4904((uint64_t)&v51);
  sub_1000E4930((uint64_t)v75);
  v87[0] = v4;
  v87[1] = v30;
  *(double *)&v87[2] = a3;
  *(double *)&v87[3] = v32;
  char v88 = 0;
  uint64_t v89 = v8;
  __int16 v90 = 256;
  double v91 = v11;
  double v92 = v12;
  char v93 = 0;
  uint64_t v94 = v33;
  char v95 = v34;
  uint64_t v96 = v35;
  char v97 = v36;
  long long v98 = v37;
  return sub_1000E4930((uint64_t)v87);
}

double sub_1000DAA54@<D0>(uint64_t a1@<X8>)
{
  memcpy(v16, v1, sizeof(v16));
  double v3 = sub_1000ECC00(*(uint64_t *)&v16[43], v16[45]);
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  sub_1000DA720(v16, v17, v3);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  long long v7 = v29;
  *(_OWORD *)(a1 + 208) = v28;
  *(_OWORD *)(a1 + 224) = v7;
  long long v8 = v31;
  *(_OWORD *)(a1 + 240) = v30;
  *(_OWORD *)(a1 + 256) = v8;
  long long v9 = v25;
  *(_OWORD *)(a1 + 144) = v24;
  *(_OWORD *)(a1 + 160) = v9;
  long long v10 = v27;
  *(_OWORD *)(a1 + 176) = v26;
  *(_OWORD *)(a1 + 192) = v10;
  long long v11 = v21;
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = v11;
  long long v12 = v23;
  *(_OWORD *)(a1 + 112) = v22;
  *(_OWORD *)(a1 + 128) = v12;
  long long v13 = v17[1];
  *(_OWORD *)(a1 + 16) = v17[0];
  *(_OWORD *)(a1 + 32) = v13;
  double result = *(double *)&v18;
  long long v15 = v19;
  *(_OWORD *)(a1 + 48) = v18;
  *(_OWORD *)(a1 + 64) = v15;
  return result;
}

double sub_1000DAB0C@<D0>(uint64_t a1@<X8>)
{
  double v3 = *(double *)(v1 + 208);
  int v4 = *(unsigned __int8 *)(v1 + 288);
  uint64_t v5 = *(void *)(v1 + 296);
  uint64_t v6 = *(void *)(v1 + 304);
  uint64_t v8 = *(void *)(v1 + 312);
  uint64_t v7 = *(void *)(v1 + 320);
  uint64_t v9 = *(void *)(v1 + 328);
  double v10 = *(double *)(v1 + 360);
  uint64_t v21 = *(void *)(v1 + 368);
  uint64_t v22 = *(void *)(v1 + 200);
  double v11 = sub_1000ECC00(*(void *)(v1 + 352), v10);
  double v12 = sub_1000ECC00(v5, v10);
  if (v4) {
    double v13 = v3;
  }
  else {
    double v13 = 0.0;
  }
  static UnitPoint.bottom.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  double v18 = sub_1000ECC00(v6, v10);
  double v19 = sub_1000ECC00(v8, v10);
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v11;
  *(double *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v7;
  *(_WORD *)(a1 + 88) = 256;
  *(double *)(a1 + 96) = v18;
  *(double *)(a1 + 104) = v19;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = v23;
  *(unsigned char *)(a1 + 128) = v24;
  *(void *)(a1 + 136) = v25;
  *(unsigned char *)(a1 + 144) = v26;
  double result = *(double *)&v27;
  *(_OWORD *)(a1 + 152) = v27;
  return result;
}

void sub_1000DAC84(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double v7 = *(double *)(v5 + 8);
  if (v7 <= 0.0
    || v7 >= 3.14159265
    || CGRectIsNull(*(CGRect *)&a2)
    || (v30.origin.x = a2, v30.origin.y = a3, v30.size.width = a4, v30.size.height = a5, CGRectIsInfinite(v30)))
  {
    Path.init()();
    uint64_t v12 = v24;
    uint64_t v13 = v26;
    uint64_t v14 = v27;
    uint64_t v15 = v28;
    char v16 = v29;
  }
  else
  {
    v31.origin.x = a2;
    v31.origin.y = a3;
    v31.size.width = a4;
    v31.size.height = a5;
    CGRectGetWidth(v31);
    v32.origin.x = a2;
    v32.origin.y = a3;
    v32.size.width = a4;
    v32.size.height = a5;
    CGRectGetHeight(v32);
    double v17 = *(double *)v5;
    double v25 = *(double *)v5;
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    Path.init()();
    __sincos_stret(v25);
    Path.move(to:)();
    char v18 = *(unsigned char *)(v5 + 32);
    if (v18)
    {
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    }
    else
    {
      Path.addLine(to:)();
    }
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    __sincos_stret(v17);
    if (v18)
    {
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    }
    else
    {
      Path.addLine(to:)();
    }
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    Path.closeSubpath()();
    uint64_t v12 = v19;
    uint64_t v13 = v20;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
    char v16 = v23;
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 32) = v16;
}

double sub_1000DB018@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  long long v7 = v5[1];
  long long v12 = *v5;
  long long v13 = v7;
  char v14 = *((unsigned char *)v5 + 32);
  sub_1000DAC84((uint64_t)v10, a2, a3, a4, a5);
  double result = *(double *)v10;
  long long v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t sub_1000DB078()
{
  return Shape.sizeThatFits(_:)();
}

uint64_t (*sub_1000DB090(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000DB100;
}

uint64_t sub_1000DB108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E4FC8();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DB16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E4FC8();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DB1D0(uint64_t a1)
{
  unint64_t v2 = sub_1000E4FC8();

  return Shape.body.getter(a1, v2);
}

uint64_t sub_1000DB21C@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_1000D9F50(a1);
}

uint64_t sub_1000DB268@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  int v4 = (_OWORD *)swift_allocObject();
  long long v5 = a1[11];
  v4[11] = a1[10];
  v4[12] = v5;
  long long v6 = a1[13];
  v4[13] = a1[12];
  v4[14] = v6;
  long long v7 = a1[7];
  v4[7] = a1[6];
  v4[8] = v7;
  long long v8 = a1[9];
  v4[9] = a1[8];
  v4[10] = v8;
  long long v9 = a1[3];
  v4[3] = a1[2];
  v4[4] = v9;
  long long v10 = a1[5];
  v4[5] = a1[4];
  v4[6] = v10;
  long long v11 = a1[1];
  v4[1] = *a1;
  v4[2] = v11;
  long long v12 = (_OWORD *)swift_allocObject();
  long long v13 = a1[11];
  v12[11] = a1[10];
  v12[12] = v13;
  long long v14 = a1[13];
  v12[13] = a1[12];
  v12[14] = v14;
  long long v15 = a1[7];
  v12[7] = a1[6];
  v12[8] = v15;
  long long v16 = a1[9];
  v12[9] = a1[8];
  v12[10] = v16;
  long long v17 = a1[3];
  v12[3] = a1[2];
  void v12[4] = v17;
  long long v18 = a1[5];
  v12[5] = a1[4];
  void v12[6] = v18;
  long long v19 = a1[1];
  v12[1] = *a1;
  uint64_t v12[2] = v19;
  v34[0] = 0;
  sub_1000DFB2C((uint64_t)a1);
  sub_1000DFB2C((uint64_t)a1);
  State.init(wrappedValue:)();
  char v20 = __dst[0];
  uint64_t v21 = __dst[1];
  long long v22 = a1[11];
  long long v45 = a1[10];
  long long v46 = v22;
  long long v23 = a1[13];
  long long v47 = a1[12];
  long long v48 = v23;
  long long v24 = a1[7];
  long long v41 = a1[6];
  long long v42 = v24;
  long long v25 = a1[9];
  long long v43 = a1[8];
  long long v44 = v25;
  long long v26 = a1[3];
  long long v37 = a1[2];
  long long v38 = v26;
  long long v27 = a1[5];
  long long v39 = a1[4];
  long long v40 = v27;
  long long v28 = a1[1];
  long long v35 = *a1;
  long long v36 = v28;
  sub_10000D544((uint64_t)&v39, (uint64_t)v49, &qword_100385F78);
  if (sub_1000DFBF4((uint64_t)v49) == 1)
  {
    sub_1000DFC0C((uint64_t)__dst);
  }
  else
  {
    *(_OWORD *)&__src[160] = v45;
    *(_OWORD *)&__src[176] = v46;
    *(_OWORD *)&__src[192] = v47;
    *(_OWORD *)&__src[208] = v48;
    *(_OWORD *)&__src[96] = v41;
    *(_OWORD *)&__src[112] = v42;
    *(_OWORD *)&__src[128] = v43;
    *(_OWORD *)&__src[144] = v44;
    *(_OWORD *)&__src[32] = v37;
    *(_OWORD *)&__src[48] = v38;
    *(_OWORD *)&__src[64] = v39;
    *(_OWORD *)&__src[80] = v40;
    *(_OWORD *)__src = v35;
    *(_OWORD *)&__src[16] = v36;
    *(_OWORD *)&__src[320] = v49[6];
    *(_OWORD *)&__src[336] = v49[7];
    *(void *)&__src[352] = v50;
    *(_OWORD *)&__src[256] = v49[2];
    *(_OWORD *)&__src[272] = v49[3];
    *(_OWORD *)&__src[288] = v49[4];
    *(_OWORD *)&__src[304] = v49[5];
    *(_OWORD *)&__src[224] = v49[0];
    *(_OWORD *)&__src[240] = v49[1];
    memcpy(__dst, __src, 0x168uLL);
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__dst);
    sub_1000DFB2C((uint64_t)a1);
  }
  sub_10000D544((uint64_t)__dst, (uint64_t)v34, &qword_100385F80);
  sub_10000D544((uint64_t)v34, (uint64_t)v30, &qword_100385F80);
  sub_10000D544((uint64_t)v30, (uint64_t)v31, &qword_100385F80);
  LOBYTE(__dst[0]) = v20;
  __dst[1] = v21;
  __dst[2] = sub_1000DFA70;
  __dst[3] = v4;
  __dst[4] = sub_1000DFB24;
  __dst[5] = v12;
  sub_10000D544((uint64_t)v31, (uint64_t)&__dst[6], &qword_100385F80);
  memcpy(a2, __dst, 0x198uLL);
  sub_10000D544((uint64_t)v30, (uint64_t)__src, &qword_100385F80);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000DFE48((uint64_t)v31, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DFC44);
  sub_1000DFDEC((uint64_t *)&v39);
  sub_1000DFE48((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DFEE4);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000DB5A0(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 184);
  long long v34 = *(_OWORD *)(a1 + 168);
  long long v35 = v6;
  long long v36 = *(_OWORD *)(a1 + 200);
  uint64_t v37 = *(void *)(a1 + 216);
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v30 = *(_OWORD *)(a1 + 104);
  long long v31 = v7;
  long long v8 = *(_OWORD *)(a1 + 152);
  long long v32 = *(_OWORD *)(a1 + 136);
  long long v33 = v8;
  long long v9 = *(_OWORD *)(a1 + 56);
  long long v26 = *(_OWORD *)(a1 + 40);
  long long v27 = v9;
  long long v10 = *(_OWORD *)(a1 + 88);
  long long v28 = *(_OWORD *)(a1 + 72);
  long long v29 = v10;
  sub_1000DFB2C(a1);
  swift_bridgeObjectRetain();
  static UnitPoint.bottom.getter();
  RadialGradient.init(gradient:center:startRadius:endRadius:)();
  *(_OWORD *)&__src[168] = v34;
  *(_OWORD *)&__src[184] = v35;
  *(_OWORD *)&__src[200] = v36;
  *(_OWORD *)&__src[104] = v30;
  *(_OWORD *)&__src[120] = v31;
  *(_OWORD *)&__src[136] = v32;
  *(_OWORD *)&__src[152] = v33;
  *(_OWORD *)&__src[40] = v26;
  *(_OWORD *)&__src[56] = v27;
  *(_OWORD *)&__src[72] = v28;
  *(void *)__src = v1;
  *(void *)&__src[8] = v3;
  *(void *)&__src[16] = v2;
  *(void *)&__src[24] = v5;
  *(void *)&__src[32] = v4;
  *(void *)&__src[216] = v37;
  *(_OWORD *)&__src[88] = v29;
  *(void *)&__src[224] = v4;
  *(void *)&__src[232] = v18;
  *(_OWORD *)&__src[240] = v19;
  *(_OWORD *)&__src[256] = v20;
  *(_WORD *)&__src[272] = 256;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  memcpy(v12, __src, sizeof(v12));
  char v40 = v22;
  char v39 = v24;
  uint64_t v13 = v21;
  char v14 = v22;
  uint64_t v15 = v23;
  char v16 = v24;
  long long v17 = v25;
  sub_100004010(&qword_100385F88);
  sub_1000E008C();
  View.accessibility(hidden:)();
  return sub_1000E012C((uint64_t)__src);
}

void sub_1000DB79C(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double v7 = *(double *)(v5 + 224);
  if (v7 <= 0.0
    || v7 >= 3.14159265
    || CGRectIsNull(*(CGRect *)&a2)
    || (v28.origin.x = a2, v28.origin.y = a3, v28.size.width = a4, v28.size.height = a5, CGRectIsInfinite(v28)))
  {
    Path.init()();
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    char v16 = v27;
  }
  else
  {
    double v17 = *(double *)(v5 + 200);
    v29.origin.x = a2;
    v29.origin.y = a3;
    v29.size.width = a4;
    v29.size.height = a5;
    CGRectGetWidth(v29);
    v30.origin.x = a2;
    v30.origin.y = a3;
    v30.size.width = a4;
    v30.size.height = a5;
    CGRectGetHeight(v30);
    Path.init()();
    Path.move(to:)();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    __sincos_stret(v17);
    Path.addLine(to:)();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    Path.closeSubpath()();
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    uint64_t v14 = v20;
    uint64_t v15 = v21;
    char v16 = v22;
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 32) = v16;
}

double sub_1000DB98C@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  long long v7 = v5[13];
  long long v30 = v5[12];
  long long v31 = v7;
  uint64_t v32 = *((void *)v5 + 28);
  long long v8 = v5[9];
  long long v26 = v5[8];
  long long v27 = v8;
  long long v9 = v5[11];
  long long v28 = v5[10];
  long long v29 = v9;
  long long v10 = v5[5];
  long long v22 = v5[4];
  long long v23 = v10;
  long long v11 = v5[7];
  long long v24 = v5[6];
  long long v25 = v11;
  long long v12 = v5[1];
  long long v18 = *v5;
  long long v19 = v12;
  long long v13 = v5[3];
  long long v20 = v5[2];
  long long v21 = v13;
  sub_1000DB79C((uint64_t)v16, a2, a3, a4, a5);
  double result = *(double *)v16;
  long long v15 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 32) = v17;
  return result;
}

void sub_1000DBA20(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_1000DBA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E2A24();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DBACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E2A24();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DBB30(uint64_t a1)
{
  unint64_t v2 = sub_1000E2A24();

  return Shape.body.getter(a1, v2);
}

void *sub_1000DBB7C@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[11];
  v14[10] = v1[10];
  v14[11] = v3;
  long long v4 = v1[13];
  v14[12] = v1[12];
  v14[13] = v4;
  long long v5 = v1[7];
  v14[6] = v1[6];
  v14[7] = v5;
  long long v6 = v1[9];
  v14[8] = v1[8];
  v14[9] = v6;
  long long v7 = v1[3];
  v14[2] = v1[2];
  v14[3] = v7;
  long long v8 = v1[5];
  _OWORD v14[4] = v1[4];
  v14[5] = v8;
  long long v9 = v1[1];
  v14[0] = *v1;
  v14[1] = v9;
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v12 = v11;
  sub_1000DB268(v14, __src);
  *a1 = v10;
  a1[1] = v12;
  return memcpy(a1 + 2, __src, 0x198uLL);
}

uint64_t sub_1000DBC10@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double v4 = *(double *)a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((unsigned __int8 *)a1 + 24);
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  double v12 = *((double *)a1 + 8);
  uint64_t v11 = a1[9];
  uint64_t v14 = a1[10];
  uint64_t v13 = a1[11];
  uint64_t v15 = a1[12];
  uint64_t v16 = a1[13];
  if (*((unsigned char *)a1 + 112) == 1)
  {
    if (*((unsigned char *)a1 + 113)) {
      __int16 v17 = 257;
    }
    else {
      __int16 v17 = 1;
    }
    double v75 = *(double *)a1;
    uint64_t v76 = v3;
    uint64_t v77 = v5;
    uint64_t v78 = v6;
    uint64_t v79 = v7;
    uint64_t v80 = v8;
    uint64_t v81 = v9;
    uint64_t v82 = v10;
    double v83 = v12;
    uint64_t v84 = v11;
    uint64_t v85 = v14;
    uint64_t v86 = v13;
    uint64_t v87 = v15;
    uint64_t v88 = v16;
    __int16 v89 = v17;
    char v90 = 0;
  }
  else
  {
    if (*((unsigned char *)a1 + 113)) {
      __int16 v18 = 256;
    }
    else {
      __int16 v18 = 0;
    }
    double v75 = *(double *)a1;
    uint64_t v76 = v3;
    uint64_t v77 = v5;
    uint64_t v78 = v6;
    uint64_t v79 = v7;
    uint64_t v80 = v8;
    uint64_t v81 = v9;
    uint64_t v82 = v10;
    double v83 = v12;
    uint64_t v84 = v11;
    uint64_t v85 = v14;
    uint64_t v86 = v13;
    uint64_t v87 = v15;
    uint64_t v88 = v16;
    __int16 v89 = v18;
    char v90 = 1;
  }
  sub_1000DF618();
  sub_1000DF66C();
  swift_retain();
  swift_retain();
  _ConditionalContent<>.init(storage:)();
  uint64_t v19 = *((void *)&__src[0] + 1);
  uint64_t v20 = *((void *)&__src[1] + 1);
  uint64_t v21 = *(void *)&__src[1];
  uint64_t v51 = *((void *)&__src[2] + 1);
  uint64_t v52 = *(void *)&__src[0];
  uint64_t v50 = *(void *)&__src[2];
  long long v22 = __src[3];
  uint64_t v56 = *((void *)&__src[4] + 1);
  uint64_t v57 = *(void *)&__src[4];
  uint64_t v54 = *((void *)&__src[5] + 1);
  uint64_t v55 = *(void *)&__src[5];
  uint64_t v46 = *((void *)&__src[6] + 1);
  uint64_t v47 = *(void *)&__src[6];
  __int16 v53 = __src[7];
  char v45 = BYTE2(__src[7]);
  long long v49 = __src[1];
  if (v10)
  {
    double v44 = v12 / 6.28318531;
    swift_retain();
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    double v23 = v4;
    static UnitPoint.center.getter();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    swift_release();
    LOBYTE(v74[0]) = v95;
    LOBYTE(v61[0]) = v97;
    *(void *)&__src[0] = 0;
    *((double *)__src + 1) = v44;
    __src[1] = v91;
    __src[2] = v92;
    *(void *)&__src[3] = v93;
    *((void *)&__src[3] + 1) = KeyPath;
    *(void *)&__src[4] = v10;
    *((double *)&__src[4] + 1) = v23;
    *(void *)&__src[5] = v25;
    *((void *)&__src[5] + 1) = v27;
    *(void *)&__src[6] = v94;
    BYTE8(__src[6]) = v95;
    *(void *)&__src[7] = v96;
    BYTE8(__src[7]) = v97;
    __src[8] = v98;
    uint64_t v20 = *((void *)&v49 + 1);
    uint64_t v21 = v49;
    *(void *)&__src[9] = 0;
    *((void *)&__src[9] + 1) = v16;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
  }
  else
  {
    sub_1000DF6C0(__src);
  }
  sub_10000D544((uint64_t)__src, (uint64_t)&v75, &qword_100385F70);
  long long v28 = *(_OWORD *)(a1 + 25);
  long long v29 = *(_OWORD *)(a1 + 29);
  v59[6] = *(_OWORD *)(a1 + 27);
  v59[7] = v29;
  uint64_t v60 = a1[31];
  long long v30 = *(_OWORD *)(a1 + 17);
  long long v31 = *(_OWORD *)(a1 + 21);
  v59[2] = *(_OWORD *)(a1 + 19);
  v59[3] = v31;
  v59[4] = *(_OWORD *)(a1 + 23);
  v59[5] = v28;
  v59[0] = *(_OWORD *)(a1 + 15);
  v59[1] = v30;
  sub_10000D544((uint64_t)&v75, (uint64_t)v58, &qword_100385F70);
  sub_10000D544((uint64_t)v58, (uint64_t)v61, &qword_100385F70);
  long long v32 = *(_OWORD *)(a1 + 25);
  long long v33 = *(_OWORD *)(a1 + 29);
  long long v68 = *(_OWORD *)(a1 + 27);
  long long v69 = v33;
  uint64_t v70 = a1[31];
  long long v34 = *(_OWORD *)(a1 + 17);
  long long v35 = *(_OWORD *)(a1 + 21);
  long long v64 = *(_OWORD *)(a1 + 19);
  long long v65 = v35;
  long long v66 = *(_OWORD *)(a1 + 23);
  long long v67 = v32;
  long long v62 = *(_OWORD *)(a1 + 15);
  long long v63 = v34;
  *(void *)&__src[0] = v52;
  *((void *)&__src[0] + 1) = v19;
  *(void *)&__src[1] = v21;
  *((void *)&__src[1] + 1) = v20;
  *(void *)&__src[2] = v50;
  *((void *)&__src[2] + 1) = v51;
  __src[3] = v22;
  *(void *)&__src[4] = v57;
  *((void *)&__src[4] + 1) = v56;
  *(void *)&__src[5] = v55;
  *((void *)&__src[5] + 1) = v54;
  *(void *)&__src[6] = v47;
  *((void *)&__src[6] + 1) = v46;
  LOWORD(__src[7]) = v53;
  BYTE2(__src[7]) = v45;
  sub_10000D544((uint64_t)v61, (uint64_t)&__src[7] + 8, &qword_100385F70);
  *(_OWORD *)((char *)&__src[23] + 8) = v68;
  *(_OWORD *)((char *)&__src[24] + 8) = v69;
  *(_OWORD *)((char *)&__src[19] + 8) = v64;
  *(_OWORD *)((char *)&__src[20] + 8) = v65;
  *(_OWORD *)((char *)&__src[21] + 8) = v66;
  *(_OWORD *)((char *)&__src[22] + 8) = v67;
  *(_OWORD *)((char *)&__src[17] + 8) = v62;
  *(_OWORD *)((char *)&__src[18] + 8) = v63;
  *((void *)&__src[25] + 1) = v70;
  memcpy(a2, __src, 0x1A0uLL);
  long long v36 = *(_OWORD *)(a1 + 25);
  long long v37 = *(_OWORD *)(a1 + 29);
  v72[6] = *(_OWORD *)(a1 + 27);
  v72[7] = v37;
  uint64_t v73 = a1[31];
  long long v38 = *(_OWORD *)(a1 + 17);
  long long v39 = *(_OWORD *)(a1 + 21);
  v72[2] = *(_OWORD *)(a1 + 19);
  v72[3] = v39;
  long long v40 = *(_OWORD *)(a1 + 23);
  v72[5] = v36;
  v72[4] = v40;
  long long v41 = *(_OWORD *)(a1 + 15);
  v72[1] = v38;
  v72[0] = v41;
  sub_1000DF6DC();
  sub_1000DF7FC(v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DF718);
  sub_1000DF768((uint64_t)&v62);
  sub_1000DF768((uint64_t)v59);
  sub_1000DF7B4((uint64_t)v72);
  sub_10000D544((uint64_t)v58, (uint64_t)v74, &qword_100385F70);
  sub_1000DF7FC(v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DF868);
  return sub_1000DF8B8();
}

double sub_1000DC240@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 104);
  swift_retain();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v3;
  *(_WORD *)(a1 + 48) = 256;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  *(unsigned char *)(a1 + 96) = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 104) = v18;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v4;
  return result;
}

uint64_t sub_1000DC36C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)v0;
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  uint64_t result = Angle.animatableData.setter();
  if (v1)
  {
    if (((360 / v1) & 0x8000000000000000) == 0)
    {
      swift_getKeyPath();
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = v7;
      long long v4 = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v3 + 104) = v4;
      *(_OWORD *)(v3 + 120) = *(_OWORD *)(v0 + 96);
      long long v5 = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v3 + 24) = *(_OWORD *)v0;
      *(_OWORD *)(v3 + 40) = v5;
      long long v6 = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v3 + 56) = *(_OWORD *)(v0 + 32);
      *(_WORD *)(v3 + 136) = *(_WORD *)(v0 + 112);
      *(_OWORD *)(v3 + 72) = v6;
      sub_1000E209C(v0);
      sub_100004010(&qword_100386068);
      sub_100004010(&qword_100386070);
      sub_1000E20D0();
      sub_1000E21A0();
      return ForEach<>.init(_:id:content:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000DC4CC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  if ((unsigned __int128)(*(uint64_t *)(a2 + 32) * (__int128)*result) >> 64 == (*(void *)(a2 + 32) * *result) >> 63)
  {
    double v6 = *(double *)(a2 + 96);
    uint64_t v5 = *(void *)(a2 + 104);
    uint64_t v7 = *(void *)(a2 + 48);
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    __double2 v8 = __sincos_stret(a4);
    swift_retain();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t result = (uint64_t *)static Animation.linear.getter();
    *(void *)a3 = v7;
    *(_WORD *)(a3 + 8) = 256;
    *(double *)(a3 + 16) = a4;
    *(unsigned char *)(a3 + 24) = v10;
    *(void *)(a3 + 32) = v11;
    *(unsigned char *)(a3 + 40) = v12;
    *(void *)(a3 + 48) = v13;
    *(void *)(a3 + 56) = v14;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = v5;
    *(double *)(a3 + 80) = v6;
    *(double *)(a3 + 88) = v6 * v8.__cosval;
    *(double *)(a3 + 96) = v6 * v8.__sinval;
    *(void *)(a3 + 104) = result;
    *(double *)(a3 + 112) = v6 * v8.__cosval;
    *(double *)(a3 + 120) = v6 * v8.__sinval;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000DC604()
{
  return sub_1000DC36C();
}

double sub_1000DC658@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[13];
  _OWORD v20[12] = v1[12];
  void v20[13] = v3;
  long long v4 = v1[15];
  v20[14] = v1[14];
  v20[15] = v4;
  long long v5 = v1[9];
  v20[8] = v1[8];
  v20[9] = v5;
  long long v6 = v1[11];
  v20[10] = v1[10];
  v20[11] = v6;
  long long v7 = v1[5];
  v20[4] = v1[4];
  v20[5] = v7;
  long long v8 = v1[7];
  v20[6] = v1[6];
  v20[7] = v8;
  long long v9 = v1[1];
  v20[0] = *v1;
  v20[1] = v9;
  long long v10 = v1[3];
  void v20[2] = v1[2];
  v20[3] = v10;
  uint64_t v11 = static Alignment.center.getter();
  uint64_t v13 = v12;
  sub_1000DBC10((uint64_t *)v20, __src);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v22 = v16;
  char v21 = v18;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  memcpy((void *)(a1 + 16), __src, 0x1A0uLL);
  *(void *)(a1 + 432) = v15;
  *(unsigned char *)(a1 + 440) = v22;
  *(void *)(a1 + 448) = v17;
  *(unsigned char *)(a1 + 456) = v21;
  double result = *(double *)&v19;
  *(_OWORD *)(a1 + 464) = v19;
  return result;
}

double sub_1000DC75C@<D0>(uint64_t a1@<X8>)
{
  double v3 = *(double *)v1;
  double v4 = *(double *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  char v10 = *(unsigned char *)(v1 + 65);
  __double2 v11 = __sincos_stret(*(double *)v1);
  uint64_t v12 = swift_allocObject();
  *(double *)(v12 + 16) = v3;
  *(double *)(v12 + 24) = v4;
  *(void *)(v12 + 32) = v5;
  *(void *)(v12 + 40) = v6;
  *(void *)(v12 + 48) = v8;
  *(void *)(v12 + 56) = v7;
  *(void *)(v12 + 64) = v9;
  *(void *)(v12 + 72) = *(void *)(v1 + 56);
  *(unsigned char *)(v12 + 80) = *(unsigned char *)(v1 + 64);
  *(unsigned char *)(v12 + 81) = v10;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v13 = static Animation.linear.getter();
  *(unsigned char *)a1 = v10 & 1;
  *(void *)(a1 + 8) = sub_1000DF610;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v9;
  *(double *)(a1 + 88) = v4;
  double result = v11.__cosval * v4;
  *(double *)(a1 + 96) = v11.__cosval * v4;
  *(double *)(a1 + 104) = v11.__sinval * v4;
  *(void *)(a1 + 112) = v13;
  *(double *)(a1 + 120) = v11.__cosval * v4;
  *(double *)(a1 + 128) = v11.__sinval * v4;
  return result;
}

double sub_1000DC8C4@<D0>(uint64_t a1@<X8>)
{
  sub_100004010(&qword_1003860D0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1002B31C0;
  uint64_t v5 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 40);
  int v10 = *(_DWORD *)(v1 + 44);
  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v13 = *(void *)(v1 + 64);
  long long v24 = *(_OWORD *)(v1 + 72);
  long long v25 = *(_OWORD *)(v1 + 88);
  long long v26 = *(_OWORD *)(v1 + 104);
  uint64_t v19 = *(void *)(v1 + 128);
  double v20 = *(double *)(v1 + 120);
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v7;
  specialized Array._endMutation()();
  swift_retain();
  swift_retain();
  Gradient.init(colors:)();
  static UnitPoint.center.getter();
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  Angle.animatableData.setter();
  AngularGradient.init(gradient:center:startAngle:endAngle:)();
  sub_1000DF768(v1);
  swift_bridgeObjectRetain();
  uint64_t v14 = static Alignment.center.getter();
  uint64_t v16 = v15;
  uint64_t v17 = static Animation.linear.getter();
  *(_OWORD *)(a1 + 72) = v24;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 44) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 88) = v25;
  *(_OWORD *)(a1 + 104) = v26;
  double result = v20;
  *(double *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v19;
  *(void *)(a1 + 136) = v4;
  *(void *)(a1 + 144) = v8;
  *(_DWORD *)(a1 + 152) = v9;
  *(_DWORD *)(a1 + 156) = v10;
  *(void *)(a1 + 160) = v11;
  *(void *)(a1 + 168) = v12;
  *(void *)(a1 + 176) = v13;
  *(void *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 192) = v21;
  *(void *)(a1 + 208) = v22;
  *(void *)(a1 + 216) = v23;
  *(_WORD *)(a1 + 224) = 256;
  *(void *)(a1 + 232) = v14;
  *(void *)(a1 + 240) = v16;
  *(void *)(a1 + 248) = 0;
  *(double *)(a1 + 256) = v20;
  *(void *)(a1 + 264) = v17;
  *(void *)(a1 + 272) = v4;
  return result;
}

double sub_1000DCAB4@<D0>(uint64_t a1@<X8>)
{
  return sub_1000DC8C4(a1);
}

double sub_1000DCB08@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[7];
  long long v17 = v1[6];
  long long v18 = v3;
  long long v19 = v1[8];
  long long v4 = v1[3];
  long long v13 = v1[2];
  long long v14 = v4;
  long long v5 = v1[5];
  long long v15 = v1[4];
  long long v16 = v5;
  long long v6 = v1[1];
  long long v11 = *v1;
  long long v12 = v6;
  sub_1000E495C((uint64_t)v9);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_1000DCB7C@<X0>(void *a1@<X8>)
{
  uint64_t result = Angle.animatableData.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1000DCBA8()
{
  return Angle.animatableData.setter();
}

uint64_t (*sub_1000DCBD0(void *a1))()
{
  a1[1] = v1;
  Angle.animatableData.getter();
  *a1 = v3;
  return sub_1000DCC1C;
}

uint64_t sub_1000DCC1C()
{
  return Angle.animatableData.setter();
}

uint64_t sub_1000DCC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E4C8C();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DCCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E4C8C();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DCD14(uint64_t a1)
{
  unint64_t v2 = sub_1000E4C8C();

  return Shape.body.getter(a1, v2);
}

uint64_t sub_1000DCD60(uint64_t a1)
{
  uint64_t v23 = *(void *)(a1 + 144);
  uint64_t v24 = *(void *)(a1 + 136);
  uint64_t v21 = *(void *)(a1 + 160);
  uint64_t v22 = *(void *)(a1 + 152);
  uint64_t v19 = *(void *)(a1 + 176);
  uint64_t v20 = *(void *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 192);
  uint64_t v18 = *(void *)(a1 + 184);
  long long v14 = *(_OWORD *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 472);
  uint64_t v12 = *(void *)(a1 + 480);
  uint64_t v11 = *(void *)(a1 + 488);
  uint64_t v10 = *(void *)(a1 + 496);
  uint64_t v9 = *(void *)(a1 + 504);
  uint64_t v8 = *(void *)(a1 + 512);
  uint64_t v7 = *(void *)(a1 + 520);
  uint64_t v6 = *(void *)(a1 + 528);
  uint64_t v2 = *(void *)(a1 + 536);
  char v3 = *(unsigned char *)(a1 + 544);
  char v4 = *(unsigned char *)(a1 + 545);
  uint64_t v28 = *(void *)(a1 + 632);
  uint64_t v29 = *(void *)(a1 + 624);
  uint64_t v26 = *(void *)(a1 + 648);
  uint64_t v27 = *(void *)(a1 + 640);
  uint64_t v25 = *(void *)(a1 + 656);
  uint64_t v15 = *(void *)(a1 + 664);
  uint64_t v16 = *(void *)(a1 + 672);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000DD07C(v24, v23, v22, v21, v20, v19, v18, v17, v14, *((uint64_t *)&v14 + 1));
  sub_1000DD274(v13, v12, v11, v10, v9, v8, v7, v6, v2, v3, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000DD388(v29, v28, v27, v26, v25, v15, v16);
  return a1;
}

uint64_t sub_1000DD07C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_1000DD184(a9, a10);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000DD184(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000DD274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if (a11)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else
  {
    return sub_1000DD320();
  }
}

uint64_t sub_1000DD320()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t sub_1000DD388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000DD3F4(uint64_t a1)
{
  uint64_t v23 = *(void *)(a1 + 144);
  uint64_t v24 = *(void *)(a1 + 136);
  uint64_t v21 = *(void *)(a1 + 160);
  uint64_t v22 = *(void *)(a1 + 152);
  uint64_t v19 = *(void *)(a1 + 176);
  uint64_t v20 = *(void *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 192);
  uint64_t v18 = *(void *)(a1 + 184);
  long long v14 = *(_OWORD *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 472);
  uint64_t v12 = *(void *)(a1 + 480);
  uint64_t v11 = *(void *)(a1 + 488);
  uint64_t v2 = *(void *)(a1 + 504);
  uint64_t v10 = *(void *)(a1 + 496);
  uint64_t v9 = *(void *)(a1 + 512);
  uint64_t v8 = *(void *)(a1 + 520);
  uint64_t v7 = *(void *)(a1 + 528);
  uint64_t v3 = *(void *)(a1 + 536);
  char v4 = *(unsigned char *)(a1 + 544);
  char v5 = *(unsigned char *)(a1 + 545);
  uint64_t v28 = *(void *)(a1 + 632);
  uint64_t v29 = *(void *)(a1 + 624);
  uint64_t v26 = *(void *)(a1 + 648);
  uint64_t v27 = *(void *)(a1 + 640);
  uint64_t v25 = *(void *)(a1 + 656);
  uint64_t v15 = *(void *)(a1 + 664);
  uint64_t v16 = *(void *)(a1 + 672);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000DD70C(v24, v23, v22, v21, v20, v19, v18, v17, v14, *((uint64_t *)&v14 + 1));
  sub_1000DD904(v13, v12, v11, v10, v2, v9, v8, v7, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000DDA18(v29, v28, v27, v26, v25, v15, v16);
  return a1;
}

uint64_t sub_1000DD70C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    sub_1000DD814(a9, a10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DD814(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DD904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if (a11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    return sub_1000DD9B0();
  }
}

uint64_t sub_1000DD9B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000DDA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000DDA84()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000DDAAC(uint64_t a1)
{
  uint64_t v24 = *(void *)(a1 + 232);
  uint64_t v23 = *(void *)(a1 + 240);
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v20 = *(void *)(a1 + 264);
  uint64_t v19 = *(void *)(a1 + 272);
  uint64_t v18 = *(void *)(a1 + 280);
  uint64_t v17 = *(void *)(a1 + 288);
  long long v14 = *(_OWORD *)(a1 + 296);
  uint64_t v13 = *(void *)(a1 + 568);
  uint64_t v12 = *(void *)(a1 + 576);
  uint64_t v11 = *(void *)(a1 + 584);
  uint64_t v10 = *(void *)(a1 + 592);
  uint64_t v9 = *(void *)(a1 + 600);
  uint64_t v8 = *(void *)(a1 + 608);
  uint64_t v7 = *(void *)(a1 + 616);
  uint64_t v6 = *(void *)(a1 + 624);
  uint64_t v2 = *(void *)(a1 + 632);
  char v3 = *(unsigned char *)(a1 + 640);
  char v4 = *(unsigned char *)(a1 + 641);
  uint64_t v28 = *(void *)(a1 + 728);
  uint64_t v29 = *(void *)(a1 + 720);
  uint64_t v26 = *(void *)(a1 + 744);
  uint64_t v27 = *(void *)(a1 + 736);
  uint64_t v25 = *(void *)(a1 + 752);
  uint64_t v15 = *(void *)(a1 + 760);
  uint64_t v16 = *(void *)(a1 + 768);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000DD07C(v24, v23, v22, v21, v20, v19, v18, v17, v14, *((uint64_t *)&v14 + 1));
  sub_1000DD274(v13, v12, v11, v10, v9, v8, v7, v6, v2, v3, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000DD388(v29, v28, v27, v26, v25, v15, v16);
  return a1;
}

uint64_t sub_1000DDDDC(uint64_t a1)
{
  uint64_t v24 = *(void *)(a1 + 232);
  uint64_t v23 = *(void *)(a1 + 240);
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v20 = *(void *)(a1 + 264);
  uint64_t v19 = *(void *)(a1 + 272);
  uint64_t v18 = *(void *)(a1 + 280);
  uint64_t v17 = *(void *)(a1 + 288);
  long long v14 = *(_OWORD *)(a1 + 296);
  uint64_t v13 = *(void *)(a1 + 568);
  uint64_t v12 = *(void *)(a1 + 576);
  uint64_t v11 = *(void *)(a1 + 584);
  uint64_t v10 = *(void *)(a1 + 592);
  uint64_t v2 = *(void *)(a1 + 600);
  uint64_t v9 = *(void *)(a1 + 608);
  uint64_t v8 = *(void *)(a1 + 616);
  uint64_t v7 = *(void *)(a1 + 624);
  uint64_t v3 = *(void *)(a1 + 632);
  char v4 = *(unsigned char *)(a1 + 640);
  char v5 = *(unsigned char *)(a1 + 641);
  uint64_t v28 = *(void *)(a1 + 728);
  uint64_t v29 = *(void *)(a1 + 720);
  uint64_t v26 = *(void *)(a1 + 744);
  uint64_t v27 = *(void *)(a1 + 736);
  uint64_t v25 = *(void *)(a1 + 752);
  uint64_t v15 = *(void *)(a1 + 760);
  uint64_t v16 = *(void *)(a1 + 768);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000DD70C(v24, v23, v22, v21, v20, v19, v18, v17, v14, *((uint64_t *)&v14 + 1));
  sub_1000DD904(v13, v12, v11, v10, v2, v9, v8, v7, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000DDA18(v29, v28, v27, v26, v25, v15, v16);
  return a1;
}

unint64_t sub_1000DE10C()
{
  unint64_t result = qword_100385EF0;
  if (!qword_100385EF0)
  {
    sub_1000094C4(&qword_100385EC8);
    sub_1000DE1D8(&qword_100385EF8, &qword_100385F00, (void (*)(void))sub_1000DE254);
    sub_100009B18(&qword_100385F28, &qword_100382818);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385EF0);
  }
  return result;
}

uint64_t sub_1000DE1D8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000DE254()
{
  unint64_t result = qword_100385F08;
  if (!qword_100385F08)
  {
    sub_1000094C4(&qword_100385F10);
    sub_100009B18(&qword_100385F18, &qword_100385F20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385F08);
  }
  return result;
}

uint64_t sub_1000DE2F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1000DE30C(_OWORD *a1)
{
  double result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 313) = 0u;
  return result;
}

double sub_1000DE344(_OWORD *a1)
{
  double result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1000DE36C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DE3E4(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  return a1;
}

uint64_t sub_1000DE468(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DE4E0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v9 = *(unsigned char *)(a1 + 328);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    *(void *)(a1 + 320),
    v9);
  return a1;
}

uint64_t *sub_1000DE57C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000DE5F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_1000DD814(a9, a10);
  }
  return result;
}

__n128 initializeWithCopy for RadarMetrics.TargetMetrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.TargetMetrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 66)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 65);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.TargetMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 66) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 65) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetView()
{
  return &type metadata for TargetView;
}

uint64_t destroy for TicksView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TicksView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TicksView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  return a1;
}

__n128 initializeWithTake for TicksView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t assignWithTake for TicksView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v5;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for TicksView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 256)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TicksView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 256) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 256) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TicksView()
{
  return &type metadata for TicksView;
}

uint64_t initializeWithCopy for RadarMetrics.TargetZoneMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v4;
    uint64_t v5 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v6;
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v7;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    uint64_t v9 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v10 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    long long v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.TargetZoneMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_retain();
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_retain();
      swift_release();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000DF1CC(a1 + 64);
      *uint64_t v5 = *v6;
      long long v8 = *(_OWORD *)(a2 + 128);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v8;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v9;
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v11 = *(_OWORD *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 176) = v11;
      *(_OWORD *)(a1 + 144) = v13;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v5 = *v6;
    long long v14 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    long long v17 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 160);
    long long v19 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 176) = v19;
    *(_OWORD *)(a1 + 144) = v17;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

uint64_t sub_1000DF1CC(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for RadarMetrics.TargetZoneMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 72);
  if (!v4)
  {
    sub_1000DF1CC(a1 + 64);
LABEL_5:
    long long v5 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v5;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.TargetZoneMetrics(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.TargetZoneMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetZone()
{
  return &type metadata for TargetZone;
}

unint64_t sub_1000DF498()
{
  unint64_t result = qword_100385F58;
  if (!qword_100385F58)
  {
    sub_1000094C4(&qword_100385EE0);
    sub_1000094C4(&qword_100385ED0);
    sub_1000DE1D8(&qword_100385EE8, &qword_100385ED0, (void (*)(void))sub_1000DE10C);
    swift_getOpaqueTypeConformance2();
    sub_1000E25FC(&qword_10037F200, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385F58);
  }
  return result;
}

uint64_t sub_1000DF5AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DF5C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DF5E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DF600()
{
  return _swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1000DF610@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EF14C(v1 + 16, a1);
}

unint64_t sub_1000DF618()
{
  unint64_t result = qword_100385F60;
  if (!qword_100385F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385F60);
  }
  return result;
}

unint64_t sub_1000DF66C()
{
  unint64_t result = qword_100385F68;
  if (!qword_100385F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385F68);
  }
  return result;
}

double sub_1000DF6C0(_OWORD *a1)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1000DF6DC()
{
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000DF718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000DF768(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DF7B4(uint64_t a1)
{
  return a1;
}

void *sub_1000DF7FC(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_1000DF868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000DF8B8()
{
  swift_release();

  return swift_release();
}

uint64_t sub_1000DF8F4@<X0>(uint64_t a1@<X0>, void (*a2)(void *__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004010(qword_10037ED80);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_100004010(&qword_100386128);
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t result = v9 - 8;
  if (*(void *)(v11 + 64) == v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    a2(v12, (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(char *, uint64_t))(v7 + 8))((char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    sub_10000D544((uint64_t)v12, (uint64_t)v13, &qword_1003860E0);
    return sub_10000D544((uint64_t)v13, a3, &qword_1003860E0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000DFA70()
{
  return *(unsigned char *)(v0 + 56) & 1;
}

uint64_t sub_1000DFA80()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 240, 7);
}

uint64_t sub_1000DFB24()
{
  return sub_1000DB5A0(v0 + 16);
}

uint64_t sub_1000DFB2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  sub_1000DD184(v2, v3);
  return a1;
}

uint64_t sub_1000DFBF4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_1000DFC0C(uint64_t a1)
{
  *(void *)(a1 + 352) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000DFC44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_1000DD184(a9, a10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *sub_1000DFDEC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000DFE48(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    *(void *)(a1 + 352));
  return a1;
}

uint64_t sub_1000DFEE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    sub_1000DD814(a9, a10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000E008C()
{
  unint64_t result = qword_100385F90;
  if (!qword_100385F90)
  {
    sub_1000094C4(&qword_100385F88);
    sub_100009B18(&qword_100385F98, &qword_100385FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385F90);
  }
  return result;
}

uint64_t sub_1000E012C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 64);
  swift_bridgeObjectRelease();
  sub_1000DD814(v4, v2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithCopy for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

__n128 initializeWithTake for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.NudgeMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.NudgeMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Nudge()
{
  return &type metadata for Nudge;
}

__n128 initializeWithTake for RadarMetrics.TicksMetrics(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

ValueMetadata *type metadata accessor for TicksView.DotTicks()
{
  return &type metadata for TicksView.DotTicks;
}

uint64_t destroy for RadarMetrics.TicksMetrics()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for RadarMetrics.TicksMetrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.TicksMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  return a1;
}

uint64_t assignWithTake for RadarMetrics.TicksMetrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.TicksMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 114)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.TicksMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 114) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 114) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TicksView.RingTicks()
{
  return &type metadata for TicksView.RingTicks;
}

uint64_t initializeWithCopy for WavesView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v4;
    uint64_t v5 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v6;
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v7;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    uint64_t v9 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v10 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    long long v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v15;
  uint64_t v16 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v16;
  uint64_t v17 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  uint64_t v18 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v18;
  uint64_t v23 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v23;
  uint64_t v19 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v19;
  uint64_t v20 = *(void *)(a2 + 344);
  uint64_t v21 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = v20;
  *(void *)(a1 + 352) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WavesView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_retain();
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_retain();
      swift_release();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000DF1CC(a1 + 64);
      *uint64_t v5 = *v6;
      long long v8 = *(_OWORD *)(a2 + 128);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v8;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v9;
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v11 = *(_OWORD *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 176) = v11;
      *(_OWORD *)(a1 + 144) = v13;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v5 = *v6;
    long long v14 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    long long v17 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 160);
    long long v19 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 176) = v19;
    *(_OWORD *)(a1 + 144) = v17;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v21 = *(void *)(a2 + 224);
  uint64_t v20 = a2 + 224;
  *(void *)(a1 + 224) = v21;
  *(void *)(a1 + 232) = *(void *)(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(v20 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(v20 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 256) = *(void *)(v20 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(v20 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(v20 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 280) = *(void *)(v20 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(v20 + 64);
  *(void *)(a1 + 296) = *(void *)(v20 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(v20 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(v20 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(v20 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 328) = *(void *)(v20 + 104);
  *(void *)(a1 + 336) = *(void *)(v20 + 112);
  *(void *)(a1 + 344) = *(void *)(v20 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(v20 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for WavesView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for WavesView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 72);
  if (!v4)
  {
    sub_1000DF1CC(a1 + 64);
LABEL_5:
    long long v5 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v5;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_release();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_release();
  uint64_t v9 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v9;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WavesView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 360)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 360) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 360) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView()
{
  return &type metadata for WavesView;
}

uint64_t destroy for RadarMetrics.TargetZoneMetrics(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 72);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TargetZone.Wedge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v4;
    uint64_t v5 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v6;
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v7;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    uint64_t v9 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v10 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    long long v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t assignWithCopy for TargetZone.Wedge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_retain();
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_retain();
      swift_release();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000DF1CC(a1 + 64);
      *uint64_t v5 = *v6;
      long long v8 = *(_OWORD *)(a2 + 128);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v8;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v9;
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v11 = *(_OWORD *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 176) = v11;
      *(_OWORD *)(a1 + 144) = v13;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v5 = *v6;
    long long v14 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    long long v17 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 160);
    long long v19 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 176) = v19;
    *(_OWORD *)(a1 + 144) = v17;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

__n128 initializeWithTake for TargetZone.Wedge(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for TargetZone.Wedge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 72);
  if (!v4)
  {
    sub_1000DF1CC(a1 + 64);
LABEL_5:
    long long v5 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v5;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for TargetZone.Wedge(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 232)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TargetZone.Wedge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetZone.Wedge()
{
  return &type metadata for TargetZone.Wedge;
}

unint64_t sub_1000E1B54()
{
  unint64_t result = qword_100385FA8;
  if (!qword_100385FA8)
  {
    sub_1000094C4(&qword_100385FB0);
    sub_1000E1C18(&qword_100385FB8, &qword_100385FC0, (void (*)(void))sub_1000E1C98);
    sub_100009B18(&qword_100386000, &qword_100386008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385FA8);
  }
  return result;
}

uint64_t sub_1000E1C18(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    sub_1000E1D68();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E1C98()
{
  return sub_1000DE1D8(&qword_100385FC8, &qword_100385FD0, (void (*)(void))sub_1000E1CC8);
}

unint64_t sub_1000E1CC8()
{
  unint64_t result = qword_100385FD8;
  if (!qword_100385FD8)
  {
    sub_1000094C4(&qword_100385FE0);
    sub_100009B18(&qword_100385FE8, &qword_100385FF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385FD8);
  }
  return result;
}

unint64_t sub_1000E1D68()
{
  unint64_t result = qword_100385FF8;
  if (!qword_100385FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100385FF8);
  }
  return result;
}

unint64_t sub_1000E1DC0()
{
  unint64_t result = qword_100386010;
  if (!qword_100386010)
  {
    sub_1000094C4(&qword_100386018);
    sub_100009B18(&qword_100386020, &qword_100386028);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386010);
  }
  return result;
}

uint64_t sub_1000E1E60()
{
  return sub_100009B18(&qword_100386030, &qword_100386038);
}

uint64_t sub_1000E1E9C()
{
  return sub_100009B18(&qword_100386040, &qword_100386048);
}

unint64_t sub_1000E1EDC()
{
  unint64_t result = qword_100386050;
  if (!qword_100386050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386050);
  }
  return result;
}

unint64_t sub_1000E1F34()
{
  unint64_t result = qword_100386058;
  if (!qword_100386058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386058);
  }
  return result;
}

unint64_t sub_1000E1F8C()
{
  unint64_t result = qword_100386060;
  if (!qword_100386060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386060);
  }
  return result;
}

uint64_t sub_1000E1FE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E1FFC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E2018()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E2034()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E2050()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 138, 7);
}

uint64_t *sub_1000E2090@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DC4CC(a1, v2 + 24, a2, *(double *)(v2 + 16));
}

uint64_t sub_1000E209C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000E20D0()
{
  unint64_t result = qword_100386078;
  if (!qword_100386078)
  {
    sub_1000094C4(&qword_100386068);
    sub_1000E214C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386078);
  }
  return result;
}

unint64_t sub_1000E214C()
{
  unint64_t result = qword_100386080;
  if (!qword_100386080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386080);
  }
  return result;
}

unint64_t sub_1000E21A0()
{
  unint64_t result = qword_100386088;
  if (!qword_100386088)
  {
    sub_1000094C4(&qword_100386070);
    sub_1000E1C18(&qword_100386090, &qword_100386098, (void (*)(void))sub_1000E2264);
    sub_100009B18(&qword_100386000, &qword_100386008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386088);
  }
  return result;
}

uint64_t sub_1000E2264()
{
  return sub_1000DE1D8(&qword_1003860A0, &qword_1003860A8, (void (*)(void))sub_1000E2294);
}

unint64_t sub_1000E2294()
{
  unint64_t result = qword_1003860B0;
  if (!qword_1003860B0)
  {
    sub_1000094C4(&qword_1003860B8);
    sub_100009B18(&qword_1003860C0, &qword_1003860C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003860B0);
  }
  return result;
}

uint64_t sub_1000E2334()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 376, 7);
}

uint64_t sub_1000E2440@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DA260((long long *)(v1 + 16), a1);
}

uint64_t sub_1000E2448()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E2480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DF8F4(a1, *(void (**)(void *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t sub_1000E2488(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  sub_1000DD184(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000E25FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E2644()
{
  return sub_1000E4768(&qword_1003860E8, &qword_1003860E0, (void (*)(void))sub_1000E2680);
}

unint64_t sub_1000E2680()
{
  unint64_t result = qword_1003860F0;
  if (!qword_1003860F0)
  {
    sub_1000094C4(&qword_1003860F8);
    sub_1000E2734();
    sub_1000E4768(&qword_100386108, &qword_100386110, (void (*)(void))sub_1000E2788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003860F0);
  }
  return result;
}

unint64_t sub_1000E2734()
{
  unint64_t result = qword_100386100;
  if (!qword_100386100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386100);
  }
  return result;
}

unint64_t sub_1000E2788()
{
  unint64_t result = qword_100386118;
  if (!qword_100386118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386118);
  }
  return result;
}

double sub_1000E27DC(uint64_t a1)
{
  *(void *)(a1 + 368) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 376) = -1;
  return result;
}

uint64_t sub_1000E2820(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E28F8(uint64_t result)
{
  *(unsigned char *)(result + 376) = 1;
  return result;
}

uint64_t sub_1000E2904(long double a1, long double a2, double a3)
{
  double v6 = a1 - remainder(a1, a2) - a2 * 0.5;
  if ((byte_100385EC0 & 1) == 0 && *(double *)&qword_100385EB0 == v6) {
    return qword_100385EB8;
  }
  if (a2 * 0.5 + a2 * 0.125 < a1 - v6) {
    return 0;
  }
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  Angle.animatableData.setter();
  uint64_t result = *(void *)&a3;
  qword_100385EB0 = *(void *)&v6;
  qword_100385EB8 = *(void *)&a3;
  byte_100385EC0 = 0;
  return result;
}

double sub_1000E29E0(uint64_t a1)
{
  *(void *)(a1 + 368) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000E2A1C(uint64_t result)
{
  *(unsigned char *)(result + 376) = 0;
  return result;
}

unint64_t sub_1000E2A24()
{
  unint64_t result = qword_100386138;
  if (!qword_100386138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386138);
  }
  return result;
}

uint64_t destroy for RadarMetrics.NudgeMetrics()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ArrowShape(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArrowShape(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for ArrowShape(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArrowShape(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArrowShape(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArrowShape()
{
  return &type metadata for ArrowShape;
}

uint64_t initializeWithCopy for WavesView.DownSignalView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v4;
    uint64_t v5 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v6;
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v7;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    uint64_t v9 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v10 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    long long v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v15;
  uint64_t v16 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v16;
  uint64_t v17 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  uint64_t v18 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v18;
  uint64_t v23 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v23;
  uint64_t v19 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v19;
  uint64_t v22 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v22;
  uint64_t v20 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WavesView.DownSignalView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_retain();
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_retain();
      swift_release();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000DF1CC(a1 + 64);
      *uint64_t v5 = *v6;
      long long v8 = *(_OWORD *)(a2 + 128);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v8;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v9;
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v11 = *(_OWORD *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 176) = v11;
      *(_OWORD *)(a1 + 144) = v13;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v5 = *v6;
    long long v14 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    long long v17 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 160);
    long long v19 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 176) = v19;
    *(_OWORD *)(a1 + 144) = v17;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v21 = *(void *)(a2 + 224);
  uint64_t v20 = a2 + 224;
  *(void *)(a1 + 224) = v21;
  *(void *)(a1 + 232) = *(void *)(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(v20 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(v20 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 256) = *(void *)(v20 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(v20 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(v20 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 280) = *(void *)(v20 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(v20 + 64);
  *(void *)(a1 + 296) = *(void *)(v20 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(v20 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(v20 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(v20 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 328) = *(void *)(v20 + 104);
  *(void *)(a1 + 336) = *(void *)(v20 + 112);
  *(void *)(a1 + 344) = *(void *)(v20 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(v20 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 360) = *(void *)(v20 + 136);
  *(void *)(a1 + 368) = *(void *)(v20 + 144);
  return a1;
}

void *initializeWithTake for WavesView.DownSignalView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x178uLL);
}

uint64_t assignWithTake for WavesView.DownSignalView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 72);
  if (!v4)
  {
    sub_1000DF1CC(a1 + 64);
LABEL_5:
    long long v5 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v5;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_release();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_release();
  uint64_t v9 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v9;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for WavesView.DownSignalView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 376)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView.DownSignalView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 376) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 376) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView.DownSignalView()
{
  return &type metadata for WavesView.DownSignalView;
}

uint64_t _s8SOSBuddy9WavesViewVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WavesView.UpSignalView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v4;
    uint64_t v5 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v5;
    uint64_t v6 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v6;
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v7;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    uint64_t v9 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v10 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    long long v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v15;
  uint64_t v16 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v16;
  uint64_t v17 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  uint64_t v18 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v18;
  uint64_t v22 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v22;
  uint64_t v19 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v19;
  uint64_t v21 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v21;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WavesView.UpSignalView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_retain();
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_retain();
      swift_release();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000DF1CC(a1 + 64);
      *uint64_t v5 = *v6;
      long long v8 = *(_OWORD *)(a2 + 128);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v8;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v9;
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v11 = *(_OWORD *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 144);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 176) = v11;
      *(_OWORD *)(a1 + 144) = v13;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *uint64_t v5 = *v6;
    long long v14 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v15;
    long long v17 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 160);
    long long v19 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 176) = v19;
    *(_OWORD *)(a1 + 144) = v17;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v21 = *(void *)(a2 + 224);
  uint64_t v20 = a2 + 224;
  *(void *)(a1 + 224) = v21;
  *(void *)(a1 + 232) = *(void *)(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(v20 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(v20 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 256) = *(void *)(v20 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(v20 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(v20 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 280) = *(void *)(v20 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(v20 + 64);
  *(void *)(a1 + 296) = *(void *)(v20 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(v20 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(v20 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(v20 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 328) = *(void *)(v20 + 104);
  *(void *)(a1 + 336) = *(void *)(v20 + 112);
  *(void *)(a1 + 344) = *(void *)(v20 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(v20 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 360) = *(void *)(v20 + 136);
  return a1;
}

void *initializeWithTake for WavesView.UpSignalView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t assignWithTake for WavesView.UpSignalView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 72);
  if (!v4)
  {
    sub_1000DF1CC(a1 + 64);
LABEL_5:
    long long v5 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v5;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_release();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_release();
  uint64_t v9 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v9;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  return a1;
}

uint64_t getEnumTagSinglePayload for WavesView.UpSignalView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 368)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView.UpSignalView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 368) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 368) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView.UpSignalView()
{
  return &type metadata for WavesView.UpSignalView;
}

uint64_t sub_1000E4438()
{
  return sub_1000DE1D8(&qword_100386140, &qword_100386148, (void (*)(void))sub_1000E447C);
}

unint64_t sub_1000E447C()
{
  unint64_t result = qword_100386150;
  if (!qword_100386150)
  {
    sub_1000094C4(&qword_100386158);
    sub_100009B18(&qword_100386160, &qword_100386168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386150);
  }
  return result;
}

uint64_t sub_1000E451C()
{
  return sub_1000E4768(&qword_100386170, &qword_100386178, (void (*)(void))sub_1000E21A0);
}

unint64_t sub_1000E4570()
{
  unint64_t result = qword_100386180;
  if (!qword_100386180)
  {
    sub_1000094C4(&qword_100386188);
    sub_1000E4610();
    sub_100009B18(&qword_1003861B0, &qword_1003861B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386180);
  }
  return result;
}

unint64_t sub_1000E4610()
{
  unint64_t result = qword_100386190;
  if (!qword_100386190)
  {
    sub_1000094C4(&qword_100386198);
    sub_100009B18(&qword_1003861A0, &qword_1003861A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386190);
  }
  return result;
}

unint64_t sub_1000E46B4()
{
  unint64_t result = qword_1003861C0;
  if (!qword_1003861C0)
  {
    sub_1000094C4(&qword_100386120);
    sub_1000E4768(&qword_1003861C8, &qword_1003860D8, (void (*)(void))sub_1000E2644);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003861C0);
  }
  return result;
}

uint64_t sub_1000E4768(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E47D4()
{
  return sub_100009B18(&qword_1003861D0, &qword_1003861D8);
}

void *sub_1000E4810()
{
  return &protocol witness table for Double;
}

unint64_t sub_1000E4820()
{
  unint64_t result = qword_1003861E0;
  if (!qword_1003861E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003861E0);
  }
  return result;
}

unint64_t sub_1000E4878()
{
  unint64_t result = qword_1003861E8;
  if (!qword_1003861E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003861E8);
  }
  return result;
}

uint64_t sub_1000E48CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E48E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E4904(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E4930(uint64_t a1)
{
  return a1;
}

double sub_1000E495C@<D0>(uint64_t a1@<X8>)
{
  Path.init()();
  double v3 = *v1;
  double v4 = v1[16] * 0.5;
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  Angle.animatableData.setter();
  if ((static Angle.== infix(_:_:)() & 1) == 0)
  {
    double v5 = v1[17];
    double v6 = v5 < 0.0 ? -v5 : v1[17];
    if (v4 < v6)
    {
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      __sincos_stret(v3);
      if (v5 <= 0.0)
      {
        Angle.animatableData.getter();
        Angle.animatableData.setter();
      }
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      if (v5 <= 0.0)
      {
        Angle.animatableData.getter();
        Angle.animatableData.setter();
      }
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      if (v4 >= v6)
      {
        Angle.animatableData.getter();
        Angle.animatableData.getter();
        Angle.animatableData.setter();
      }
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      __sincos_stret(v5);
      Angle.animatableData.getter();
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      __sincos_stret(v5);
      Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
      Path.addLine(to:)();
      Path.move(to:)();
      Path.addLine(to:)();
    }
  }
  double result = *(double *)&v8;
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

unint64_t sub_1000E4C8C()
{
  unint64_t result = qword_1003861F0;
  if (!qword_1003861F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003861F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WavesView.Signal(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView.Signal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView.Signal()
{
  return &type metadata for WavesView.Signal;
}

uint64_t sub_1000E4D8C()
{
  return sub_100009B18(&qword_1003861F8, &qword_100386200);
}

uint64_t sub_1000E4DC8()
{
  return sub_1000DE1D8(&qword_100386208, &qword_100386210, (void (*)(void))sub_1000E4E0C);
}

uint64_t sub_1000E4E0C()
{
  return sub_1000DE1D8(&qword_100386218, &qword_100386220, (void (*)(void))sub_1000E4E3C);
}

unint64_t sub_1000E4E3C()
{
  unint64_t result = qword_100386228;
  if (!qword_100386228)
  {
    sub_1000094C4(&qword_100386230);
    sub_100009B18(&qword_100386238, &qword_100386240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386228);
  }
  return result;
}

uint64_t sub_1000E4EDC()
{
  return sub_100009B18(&qword_100386248, &qword_100386250);
}

unint64_t sub_1000E4F1C()
{
  unint64_t result = qword_100386258;
  if (!qword_100386258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386258);
  }
  return result;
}

unint64_t sub_1000E4F74()
{
  unint64_t result = qword_100386260;
  if (!qword_100386260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386260);
  }
  return result;
}

unint64_t sub_1000E4FC8()
{
  unint64_t result = qword_100386268;
  if (!qword_100386268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386268);
  }
  return result;
}

ValueMetadata *type metadata accessor for FallbackQuestionnairePageView()
{
  return &type metadata for FallbackQuestionnairePageView;
}

ValueMetadata *type metadata accessor for QuestionnairePageView()
{
  return &type metadata for QuestionnairePageView;
}

uint64_t sub_1000E503C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E5058@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v36 = a1;
  uint64_t v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100004010(&qword_100386270);
  uint64_t v7 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  long long v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100004010(&qword_100386278);
  uint64_t v10 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  long long v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = static HorizontalAlignment.center.getter();
  sub_1000E54A4(v2, (uint64_t)&v38);
  uint64_t v14 = *(void *)&v39[48];
  unsigned __int16 v15 = v40;
  unsigned __int8 v16 = BYTE2(v40);
  char v17 = BYTE3(v40);
  long long v18 = v38;
  long long v19 = *(_OWORD *)v39;
  long long v20 = *(_OWORD *)&v39[16];
  long long v21 = *(_OWORD *)&v39[32];
  long long v38 = (unint64_t)v13;
  v39[0] = 0;
  *(_OWORD *)&v39[8] = v18;
  *(_OWORD *)&v39[24] = v19;
  *(_OWORD *)&v39[40] = v20;
  long long v40 = v21;
  uint64_t v41 = v14;
  unsigned __int8 v43 = v16;
  unsigned __int16 v42 = v15;
  char v44 = v17;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  uint64_t v22 = sub_100004010(&qword_100386280);
  uint64_t v23 = sub_100009B18(&qword_100386288, &qword_100386280);
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1000E72A8(*(uint64_t *)&v39[8], *(uint64_t *)&v39[16], *(uint64_t *)&v39[24], *(uint64_t *)&v39[32], *(uint64_t *)&v39[40], *(uint64_t *)&v39[48], v40, SBYTE8(v40), v41, v42, v43, (v42 | (v43 << 16)) >> 24, v44);
  uint64_t v24 = v33;
  uint64_t v37 = v33;
  sub_100004010(&qword_100386290);
  *(void *)&long long v38 = v22;
  *((void *)&v38 + 1) = v23;
  swift_getOpaqueTypeConformance2();
  sub_100009B18(&qword_100386298, &qword_100386290);
  uint64_t v25 = v34;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  uint64_t v26 = *(void *)(v24 + 16);
  type metadata accessor for QuestionnaireState();
  sub_1000E7B64(&qword_10037F008, (void (*)(uint64_t))type metadata accessor for QuestionnaireState);
  uint64_t v27 = static ObservableObject.environmentStore.getter();
  uint64_t v29 = v35;
  uint64_t v28 = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v36, v12, v35);
  long long v30 = (uint64_t *)(v28 + *(int *)(sub_100004010(&qword_1003862A0) + 36));
  *long long v30 = v27;
  v30[1] = v26;
  long long v31 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  return v31(v12, v29);
}

uint64_t sub_1000E54A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = a2;
  switch(*(unsigned char *)(a1 + 24))
  {
    case 1:
      char v7 = *(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 264) + 32);
      type metadata accessor for AppEvents();
      sub_1000E7B64((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
      uint64_t v8 = EnvironmentObject.init()();
      uint64_t v10 = v9;
      uint64_t v45 = v5;
      if (v7)
      {
        type metadata accessor for RoadsideAssistanceModel();
        sub_1000E7B64(&qword_100380D48, (void (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
        uint64_t v11 = EnvironmentObject.init()();
        uint64_t v13 = v12;
        type metadata accessor for UIMetrics();
        sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
        *(void *)&long long v58 = v8;
        *((void *)&v58 + 1) = v10;
        *(void *)&long long v61 = v11;
        *((void *)&v61 + 1) = v13;
        *(void *)&long long v64 = EnvironmentObject.init()();
        *((void *)&v64 + 1) = v14;
        LOBYTE(v66) = 1;
      }
      else
      {
        type metadata accessor for EmergencyModel();
        sub_1000E7B64(&qword_100380D50, (void (*)(uint64_t))type metadata accessor for EmergencyModel);
        uint64_t v30 = EnvironmentObject.init()();
        uint64_t v32 = v31;
        type metadata accessor for UIMetrics();
        sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
        *(void *)&long long v58 = v8;
        *((void *)&v58 + 1) = v10;
        *(void *)&long long v61 = v30;
        *((void *)&v61 + 1) = v32;
        *(void *)&long long v64 = EnvironmentObject.init()();
        *((void *)&v64 + 1) = v33;
        LOBYTE(v66) = 0;
      }
      sub_1000E76D0();
      sub_1000E7724();
      _ConditionalContent<>.init(storage:)();
      sub_1000E7A78();
      sub_100004010(&qword_1003862E0);
      sub_1000E7640();
      sub_1000E7694();
      _ConditionalContent<>.init(storage:)();
      long long v74 = v58;
      long long v76 = v61;
      long long v78 = v64;
      *(void *)&long long v80 = v66;
      *((void *)&v80 + 1) = BYTE8(v66);
      uint64_t v82 = 0;
      unsigned __int16 v84 = 0;
      unsigned __int8 v86 = 0;
      sub_100004010(&qword_1003862C8);
      sub_100004010(&qword_100386300);
      sub_1000E757C();
      sub_1000E7778();
      _ConditionalContent<>.init(storage:)();
      sub_1000E79AC(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000E79E8, (uint64_t (*)(uint64_t))sub_1000E7AC0);
      sub_100004010(&qword_1003862B0);
      sub_1000E75B8(&qword_1003862B8, &qword_1003862B0, (void (*)(void))sub_1000E757C, (void (*)(void))sub_1000E7778);
      sub_1000E78D8();
      _ConditionalContent<>.init(storage:)();
      sub_1000E7408();
      uint64_t result = sub_1000E79AC(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000E7374, (uint64_t (*)(uint64_t))sub_1000E744C);
      goto LABEL_20;
    case 2:
      uint64_t v45 = a2;
      if (v2)
      {
        sub_10009049C(v2);
        type metadata accessor for AppEvents();
        sub_1000E7B64((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v15 = EnvironmentObject.init()();
        uint64_t v17 = v16;
        type metadata accessor for UIMetrics();
        sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
        uint64_t v18 = EnvironmentObject.init()();
        uint64_t v20 = v19;
        type metadata accessor for QuestionnaireState();
        sub_1000E7B64(&qword_10037F008, (void (*)(uint64_t))type metadata accessor for QuestionnaireState);
        *(void *)&long long v59 = v15;
        *((void *)&v59 + 1) = v17;
        *(void *)&long long v62 = v18;
        *((void *)&v62 + 1) = v20;
        *(void *)&long long v65 = EnvironmentObject.init()();
        *((void *)&v65 + 1) = v21;
        *(void *)&long long v67 = v2;
        *((void *)&v67 + 1) = v3;
        uint64_t v69 = v4;
        unsigned __int8 v71 = 0;
        sub_1000E7830();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        _ConditionalContent<>.init(storage:)();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      else
      {
        uint64_t v69 = 0;
        long long v65 = 0u;
        long long v67 = 0u;
        long long v59 = 0u;
        long long v62 = 0u;
        unsigned __int8 v71 = 1;
        sub_1000E7830();
        _ConditionalContent<>.init(storage:)();
      }
      char v35 = v83;
      uint64_t v36 = v81;
      uint64_t v43 = *((void *)&v73 + 1);
      uint64_t v44 = v73;
      uint64_t v41 = *((void *)&v75 + 1);
      uint64_t v42 = v75;
      uint64_t v39 = *((void *)&v77 + 1);
      uint64_t v40 = v77;
      uint64_t v37 = *((void *)&v79 + 1);
      uint64_t v38 = v79;
      sub_1000E792C(v73, *((uint64_t *)&v73 + 1), v75, *((uint64_t *)&v75 + 1), v77, *((uint64_t *)&v77 + 1), v79, *((uint64_t *)&v79 + 1), v81, v83);
      sub_100004010(&qword_100386310);
      sub_1000E77B4();
      sub_1000E7884();
      _ConditionalContent<>.init(storage:)();
      if (v72) {
        __int16 v34 = 256;
      }
      else {
        __int16 v34 = 0;
      }
      long long v74 = v59;
      long long v76 = v62;
      long long v78 = v65;
      long long v80 = v67;
      uint64_t v82 = v69;
      unsigned __int16 v84 = v34 | v71;
      unsigned __int8 v86 = 1;
      sub_100004010(&qword_1003862C8);
      sub_100004010(&qword_100386300);
      sub_1000E757C();
      sub_1000E7778();
      _ConditionalContent<>.init(storage:)();
      sub_1000E79AC(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000E79E8, (uint64_t (*)(uint64_t))sub_1000E7AC0);
      sub_100004010(&qword_1003862B0);
      sub_1000E75B8(&qword_1003862B8, &qword_1003862B0, (void (*)(void))sub_1000E757C, (void (*)(void))sub_1000E7778);
      sub_1000E78D8();
      _ConditionalContent<>.init(storage:)();
      sub_1000E74EC(v44, v43, v42, v41, v40, v39, v38, v37, v36, v35);
      uint64_t result = sub_1000E79AC(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000E7374, (uint64_t (*)(uint64_t))sub_1000E744C);
LABEL_20:
      long long v23 = v74;
      long long v24 = v76;
      long long v25 = v78;
      long long v26 = v80;
      uint64_t v27 = v82;
      int v28 = v84 | (v86 << 16);
      char v29 = v87;
      uint64_t v5 = v45;
      goto LABEL_21;
    case 3:
      type metadata accessor for AppEvents();
      sub_1000E7B64((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
      EnvironmentObject.init()();
      type metadata accessor for UIMetrics();
      sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      EnvironmentObject.init()();
      type metadata accessor for QuestionnaireState();
      sub_1000E7B64(&qword_10037F008, (void (*)(uint64_t))type metadata accessor for QuestionnaireState);
      EnvironmentObject.init()();
      *(void *)&long long v57 = 10;
      State.init(wrappedValue:)();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100004010(&qword_100386310);
      sub_1000E77B4();
      sub_1000E7884();
      _ConditionalContent<>.init(storage:)();
      if (v72) {
        __int16 v22 = 256;
      }
      else {
        __int16 v22 = 0;
      }
      long long v73 = v57;
      long long v75 = v60;
      long long v77 = v63;
      long long v79 = v66;
      uint64_t v81 = v68;
      unsigned __int16 v83 = v22 | v70;
      unsigned __int8 v85 = 1;
      sub_100004010(&qword_1003862C8);
      sub_100004010(&qword_100386300);
      sub_1000E757C();
      sub_1000E7778();
      _ConditionalContent<>.init(storage:)();
      sub_100004010(&qword_1003862B0);
      sub_1000E75B8(&qword_1003862B8, &qword_1003862B0, (void (*)(void))sub_1000E757C, (void (*)(void))sub_1000E7778);
      sub_1000E78D8();
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      goto LABEL_12;
    case 4:
      type metadata accessor for AppEvents();
      sub_1000E7B64((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
      EnvironmentObject.init()();
      type metadata accessor for ConnectionModel(0);
      sub_1000E7B64(&qword_10037F100, (void (*)(uint64_t))type metadata accessor for ConnectionModel);
      EnvironmentObject.init()();
      type metadata accessor for UIMetrics();
      sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      EnvironmentObject.init()();
      type metadata accessor for QuestionnaireState();
      sub_1000E7B64(&qword_10037F008, (void (*)(uint64_t))type metadata accessor for QuestionnaireState);
      EnvironmentObject.init()();
      sub_100004010(&qword_1003862B0);
      sub_1000E75B8(&qword_1003862B8, &qword_1003862B0, (void (*)(void))sub_1000E757C, (void (*)(void))sub_1000E7778);
      sub_1000E78D8();
      uint64_t result = _ConditionalContent<>.init(storage:)();
      goto LABEL_12;
    default:
      swift_retain();
      sub_10009049C(v2);
      type metadata accessor for UIMetrics();
      sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      EnvironmentObject.init()();
      swift_retain();
      swift_retain();
      sub_10009049C(v2);
      sub_100004010(&qword_1003862E0);
      sub_1000E7640();
      sub_1000E7694();
      _ConditionalContent<>.init(storage:)();
      long long v73 = v57;
      long long v75 = v60;
      long long v77 = v63;
      *(void *)&long long v79 = v66;
      *((void *)&v79 + 1) = BYTE8(v66);
      uint64_t v81 = 0;
      unsigned __int16 v83 = 0;
      unsigned __int8 v85 = 0;
      sub_100004010(&qword_1003862C8);
      sub_100004010(&qword_100386300);
      sub_1000E757C();
      sub_1000E7778();
      _ConditionalContent<>.init(storage:)();
      sub_100004010(&qword_1003862B0);
      sub_1000E75B8(&qword_1003862B8, &qword_1003862B0, (void (*)(void))sub_1000E757C, (void (*)(void))sub_1000E7778);
      sub_1000E78D8();
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_release();
      uint64_t result = sub_1000904E0(v2);
LABEL_12:
      long long v23 = v73;
      long long v24 = v75;
      long long v25 = v77;
      long long v26 = v79;
      uint64_t v27 = v81;
      int v28 = v83 | (v85 << 16);
      char v29 = v87;
LABEL_21:
      *(_OWORD *)uint64_t v5 = v23;
      *(_OWORD *)(v5 + 16) = v24;
      *(_OWORD *)(v5 + 32) = v25;
      *(_OWORD *)(v5 + 48) = v26;
      *(void *)(v5 + 64) = v27;
      *(_WORD *)(v5 + 72) = v28;
      *(unsigned char *)(v5 + 74) = BYTE2(v28);
      *(unsigned char *)(v5 + 75) = v29;
      return result;
  }
}

uint64_t sub_1000E656C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004010(&qword_1003862A8);
  __chkstk_darwin(v4);
  double v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100385230);
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_100004010(&qword_1003818D8);
  uint64_t v40 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100004010(&qword_1003818E0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - v18;
  if (*(unsigned char *)(a1 + 24) == 1)
  {
    uint64_t v20 = sub_100004010(&qword_1003818F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v17, 1, 1, v20);
    uint64_t v21 = sub_100009B18(&qword_1003818E8, &qword_1003818D8);
    uint64_t v43 = v11;
    uint64_t v44 = v21;
    swift_getOpaqueTypeConformance2();
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_10000950C((uint64_t)v17, &qword_1003818E0);
LABEL_5:
    static ToolbarItemPlacement.navigationBarTrailing.getter();
    sub_1000ACC84();
    ToolbarItem<>.init(placement:content:)();
    uint64_t v32 = &v6[*(int *)(v4 + 48)];
    sub_10000D2A0((uint64_t)v19, (uint64_t)v6, &qword_1003818E0);
    uint64_t v33 = v41;
    __int16 v34 = v32;
    uint64_t v35 = v42;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v34, v9, v42);
    TupleToolbarContent.init(_:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v35);
    return sub_10000950C((uint64_t)v19, &qword_1003818E0);
  }
  uint64_t v37 = v6;
  uint64_t v38 = v4;
  uint64_t v39 = a2;
  __int16 v22 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v23 = *(void *)(a1 + 16);
    uint64_t v24 = v22[9];
    uint64_t v25 = v22[10];
    sub_100008F88(v22 + 6, v24);
    uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v25 + 160))(*(unsigned __int8 *)(*(void *)(v23 + 264) + 32), v24, v25);
    int v28 = v27;
    uint64_t v29 = static ToolbarItemPlacement.principal.getter();
    __chkstk_darwin(v29);
    *(&v37 - 2) = (char *)v26;
    *(&v37 - 1) = v28;
    ToolbarItem<>.init(placement:content:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_100009B18(&qword_1003818E8, &qword_1003818D8);
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    uint64_t v31 = sub_100004010(&qword_1003818F0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v17, 0, 1, v31);
    uint64_t v43 = v11;
    uint64_t v44 = v30;
    swift_getOpaqueTypeConformance2();
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_10000950C((uint64_t)v17, &qword_1003818E0);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v11);
    uint64_t v4 = v38;
    double v6 = v37;
    goto LABEL_5;
  }
  type metadata accessor for UIMetrics();
  sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000E6B38@<X0>(uint64_t a1@<X8>)
{
  sub_100033310();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.headline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  swift_release();
  sub_100033364(v2, v4, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  return result;
}

uint64_t sub_1000E6C18@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_1000E7B64((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  type metadata accessor for StewieModel();
  sub_1000E7B64(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v7 = v6;
  type metadata accessor for UIMetrics();
  sub_1000E7B64((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v8 = EnvironmentObject.init()();
  uint64_t v10 = v9;
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  return result;
}

uint64_t sub_1000E6D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E5058(a1);
}

uint64_t sub_1000E6DC0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E6DDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v1 = type metadata accessor for ControlSize();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  __chkstk_darwin(v1);
  __int16 v34 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CircularProgressViewStyle();
  uint64_t v32 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004010(&qword_10037F118);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100004010(&qword_10037F120);
  uint64_t v10 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  char v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100004010(&qword_10037F128);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ProgressView<>.init<>()();
  CircularProgressViewStyle.init()();
  sub_100009B18(&qword_10037F210, &qword_10037F118);
  sub_1000E7B64(&qword_10037F218, (void (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle);
  View.progressViewStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v18 = v34;
  uint64_t v17 = v35;
  uint64_t v19 = v36;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, enum case for ControlSize.regular(_:), v36);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  uint64_t v22 = sub_100004010(&qword_10037F228);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))((char *)v21 + *(int *)(v22 + 28), v18, v19);
  *uint64_t v21 = KeyPath;
  uint64_t v23 = v33;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v12, v33);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v23);
  id v24 = [self labelColor];
  uint64_t v25 = Color.init(uiColor:)();
  uint64_t v26 = swift_getKeyPath();
  uint64_t v38 = v25;
  swift_retain();
  uint64_t v27 = AnyShapeStyle.init<A>(_:)();
  uint64_t v28 = v37;
  sub_10000D2A0((uint64_t)v16, v37, &qword_10037F128);
  swift_release();
  uint64_t v29 = (uint64_t *)(v28 + *(int *)(sub_100004010(&qword_100382080) + 36));
  uint64_t *v29 = v26;
  v29[1] = v27;
  return sub_10000950C((uint64_t)v16, &qword_10037F128);
}

uint64_t sub_1000E72A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, __int16 a10, char a11, char a12, char a13)
{
  if ((a13 & 1) == 0) {
    return sub_1000E79AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11 & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000E7374, (uint64_t (*)(uint64_t))sub_1000E744C);
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000E7374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    return sub_1000E7408();
  }
  else
  {
    swift_release();
    swift_release();
    return sub_1000904E0(a5);
  }
}

uint64_t sub_1000E7408()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000E744C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if (a11)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    char v13 = a10 & 1;
    return sub_1000E74EC(a1, a2, a3, a4, a5, a6, a7, a8, a9, v13);
  }
}

uint64_t sub_1000E74EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000E756C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E656C(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000E7574@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E6B38(a1);
}

uint64_t sub_1000E757C()
{
  return sub_1000E75B8(&qword_1003862C0, &qword_1003862C8, (void (*)(void))sub_1000E7640, (void (*)(void))sub_1000E7694);
}

uint64_t sub_1000E75B8(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E7640()
{
  unint64_t result = qword_1003862D0;
  if (!qword_1003862D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003862D0);
  }
  return result;
}

uint64_t sub_1000E7694()
{
  return sub_1000E75B8(&qword_1003862D8, &qword_1003862E0, (void (*)(void))sub_1000E76D0, (void (*)(void))sub_1000E7724);
}

unint64_t sub_1000E76D0()
{
  unint64_t result = qword_1003862E8;
  if (!qword_1003862E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003862E8);
  }
  return result;
}

unint64_t sub_1000E7724()
{
  unint64_t result = qword_1003862F0;
  if (!qword_1003862F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003862F0);
  }
  return result;
}

uint64_t sub_1000E7778()
{
  return sub_1000E75B8(&qword_1003862F8, &qword_100386300, (void (*)(void))sub_1000E77B4, (void (*)(void))sub_1000E7884);
}

unint64_t sub_1000E77B4()
{
  unint64_t result = qword_100386308;
  if (!qword_100386308)
  {
    sub_1000094C4(&qword_100386310);
    sub_1000E7830();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386308);
  }
  return result;
}

unint64_t sub_1000E7830()
{
  unint64_t result = qword_100386318;
  if (!qword_100386318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386318);
  }
  return result;
}

unint64_t sub_1000E7884()
{
  unint64_t result = qword_100386320;
  if (!qword_100386320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386320);
  }
  return result;
}

unint64_t sub_1000E78D8()
{
  unint64_t result = qword_100386328;
  if (!qword_100386328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386328);
  }
  return result;
}

uint64_t sub_1000E792C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000E79AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, __int16 a10, char a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void), uint64_t (*a13)(uint64_t))
{
  if (a11) {
    return a13(a1);
  }
  else {
    return a12(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  }
}

uint64_t sub_1000E79E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    return sub_1000E7A78();
  }
  else
  {
    swift_retain();
    swift_retain();
    return sub_10009049C(a5);
  }
}

uint64_t sub_1000E7A78()
{
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000E7AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if (a11)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    char v13 = a10 & 1;
    return sub_1000E792C(a1, a2, a3, a4, a5, a6, a7, a8, a9, v13);
  }
}

uint64_t sub_1000E7B64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E7BB0()
{
  unint64_t result = qword_100386330;
  if (!qword_100386330)
  {
    sub_1000094C4(&qword_100382080);
    sub_10000CA44();
    sub_100009B18(&qword_100380F50, &qword_100380F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386330);
  }
  return result;
}

unint64_t sub_1000E7C54()
{
  unint64_t result = qword_100386338;
  if (!qword_100386338)
  {
    sub_1000094C4(&qword_1003862A0);
    sub_1000094C4(&qword_100386270);
    sub_1000094C4(&qword_100386290);
    sub_1000094C4(&qword_100386280);
    sub_100009B18(&qword_100386288, &qword_100386280);
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_100386298, &qword_100386290);
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_100386340, &qword_100386348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386338);
  }
  return result;
}

ValueMetadata *type metadata accessor for FullScreenGuidanceActionsButtonsView()
{
  return &type metadata for FullScreenGuidanceActionsButtonsView;
}

uint64_t sub_1000E7DE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E7DFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 32);
  if (v2)
  {
    if (v2[8])
    {
      char v4 = sub_100078E0C(0, v2[11]);
      uint64_t v5 = v2[8];
      if (v4)
      {
        if (v5)
        {
          unint64_t v6 = v2[15];
          char v7 = sub_100078E0C(0, v2[11]);
          LOBYTE(v2) = 0;
          if ((v7 & 1) != 0 && (v6 & 0xFF00) != 0x200) {
            uint64_t v2 = (void *)((v6 >> 8) & 1);
          }
          goto LABEL_14;
        }
LABEL_13:
        LOBYTE(v2) = 0;
LABEL_14:
        static HorizontalAlignment.center.getter();
        sub_1000E802C(v1, (char)v2, (uint64_t)v18);
        goto LABEL_16;
      }
      if (v5)
      {
        char v8 = sub_100078E0C(1, v2[11]);
        if (v2[8])
        {
          unint64_t v9 = v2[15];
          if ((sub_100078E0C(0, v2[11]) & 1) != 0 && (v9 & 0xFF00) != 0x200)
          {
            uint64_t v2 = (void *)((v9 >> 8) & 1);
            if (!(v8 & 1 | (v9 >> 8) & 1)) {
              goto LABEL_16;
            }
            goto LABEL_14;
          }
        }
        if (v8) {
          goto LABEL_13;
        }
      }
    }
LABEL_16:
    sub_100004010(&qword_100386350);
    sub_100009B18(&qword_100386358, &qword_100386350);
    uint64_t result = _ConditionalContent<>.init(storage:)();
    long long v11 = v18[1];
    long long v12 = v18[2];
    long long v13 = v18[3];
    long long v14 = v18[4];
    uint64_t v15 = v19;
    char v16 = v20;
    char v17 = v21;
    *(_OWORD *)a1 = v18[0];
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 64) = v14;
    *(void *)(a1 + 80) = v15;
    *(unsigned char *)(a1 + 88) = v16;
    *(unsigned char *)(a1 + 89) = v17;
    return result;
  }
  type metadata accessor for StewieModel();
  sub_1000E88DC(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000E802C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (_OWORD *)result;
  uint64_t v4 = *(void *)(result + 32);
  if (!v4)
  {
    type metadata accessor for StewieModel();
    char v20 = &qword_100380DA0;
    char v21 = type metadata accessor for StewieModel;
    goto LABEL_19;
  }
  long long v6 = 0uLL;
  if (*(void *)(v4 + 64))
  {
    uint64_t result = sub_100078E0C(0, *(void *)(v4 + 88));
    if (result)
    {
      if (a2)
      {
        type metadata accessor for AppEvents();
        sub_1000E88DC((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
        uint64_t v8 = EnvironmentObject.init()();
        type metadata accessor for UIMetrics();
        sub_1000E88DC((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
        EnvironmentObject.init()();
      }
      else
      {
        uint64_t v8 = 1;
      }
      long long v17 = *v3;
      long long v27 = v3[1];
      long long v28 = v17;
      uint64_t v18 = (_OWORD *)swift_allocObject();
      long long v19 = v3[1];
      v18[1] = *v3;
      void v18[2] = v19;
      _OWORD v18[3] = v3[2];
      sub_10004ED30((uint64_t)&v28);
      sub_10004ED30((uint64_t)&v27);
      type metadata accessor for UIMetrics();
      sub_1000E88DC((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      swift_retain();
      EnvironmentObject.init()();
      sub_1000E8850(v8);
      swift_retain();
      swift_retain();
      sub_1000E8850(v8);
      sub_1000E8898(v8);
      sub_1000E8850(v8);
      swift_retain();
      swift_retain();
      sub_100004010(&qword_100386360);
      sub_100009B18(&qword_100386368, &qword_100386360);
      sub_1000E8798();
      _ConditionalContent<>.init(storage:)();
      sub_1000E8898(v8);
      sub_1000E8898(v8);
      swift_release_n();
      uint64_t result = swift_release_n();
      goto LABEL_16;
    }
    if (!*(void *)(v4 + 64) || (uint64_t result = sub_100078E0C(1, *(void *)(v4 + 88)), (result & 1) == 0))
    {
      char v13 = -1;
      long long v14 = 0uLL;
      long long v15 = 0uLL;
      long long v16 = 0uLL;
      long long v6 = 0uLL;
      goto LABEL_17;
    }
    uint64_t v9 = *((void *)v3 + 2);
    long long v6 = 0uLL;
    if (!v9)
    {
      while (1)
      {
        type metadata accessor for RoadsideAssistanceModel();
        char v20 = &qword_100380D48;
        char v21 = type metadata accessor for RoadsideAssistanceModel;
LABEL_19:
        sub_1000E88DC(v20, (void (*)(uint64_t))v21);
        EnvironmentObject.error()();
        __break(1u);
      }
    }
    if (*(unsigned char *)(v9 + 248) != 3 && (*(unsigned char *)(v9 + 216) & 1) == 0)
    {
      uint64_t v10 = *(void *)(v9 + 208);
      long long v28 = *v3;
      uint64_t v11 = swift_allocObject();
      long long v12 = v3[1];
      *(_OWORD *)(v11 + 16) = *v3;
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v3[2];
      *(void *)(v11 + 64) = v10;
      swift_retain();
      sub_10004ED30((uint64_t)&v28);
      type metadata accessor for UIMetrics();
      sub_1000E88DC((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      swift_retain();
      EnvironmentObject.init()();
      sub_100004010(&qword_100386360);
      sub_100009B18(&qword_100386368, &qword_100386360);
      sub_1000E8798();
      uint64_t result = _ConditionalContent<>.init(storage:)();
LABEL_16:
      long long v6 = v22;
      long long v14 = v23;
      long long v15 = v24;
      long long v16 = v25;
      char v13 = v26;
      goto LABEL_17;
    }
  }
  char v13 = -1;
  long long v14 = 0uLL;
  long long v15 = 0uLL;
  long long v16 = 0uLL;
LABEL_17:
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v14;
  *(_OWORD *)(a3 + 32) = v15;
  *(_OWORD *)(a3 + 48) = v16;
  *(unsigned char *)(a3 + 64) = v13;
  return result;
}

uint64_t sub_1000E856C(void *a1)
{
  if (*a1)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    swift_retain();
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_1000E88DC((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E8674(void *a1)
{
  if (*a1)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    swift_retain();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_1000E88DC((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E8748@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E7DFC(a1);
}

uint64_t sub_1000E8784()
{
  return sub_1000E87F4(72);
}

uint64_t sub_1000E878C()
{
  return sub_1000E8674((void *)(v0 + 16));
}

unint64_t sub_1000E8798()
{
  unint64_t result = qword_100386370;
  if (!qword_100386370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386370);
  }
  return result;
}

uint64_t sub_1000E87EC()
{
  return sub_1000E87F4(64);
}

uint64_t sub_1000E87F4(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000E8848()
{
  return sub_1000E856C((void *)(v0 + 16));
}

uint64_t sub_1000E8850(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000E8898(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000E88DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E8928()
{
  unint64_t result = qword_100386378;
  if (!qword_100386378)
  {
    sub_1000094C4(&qword_100386380);
    sub_100009B18(&qword_100386358, &qword_100386350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386378);
  }
  return result;
}

uint64_t sub_1000E89C8()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v21 = *(void *)(v0 - 8);
  uint64_t v22 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  id v5 = [self mainBundle];
  id v6 = [v5 bundleIdentifier];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0x80000001002C5A40;
    uint64_t v7 = 0xD000000000000012;
  }
  sub_10000FDBC();
  v25[0] = v7;
  v25[1] = v9;
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 0x6E6567414445452ELL;
  v10._uint64_t object = (void *)0xE900000000000074;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v25[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000EAEAC((unint64_t *)&unk_10037FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100004010((uint64_t *)&unk_10038D2B0);
  sub_100011C70((unint64_t *)&unk_10037FF70, (uint64_t *)&unk_10038D2B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  uint64_t v11 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = v23;
  *(void *)(v23 + 16) = v11;
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000FD84(v13, (uint64_t)qword_1003A9958);
  swift_retain_n();
  long long v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    long long v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v24 = v12;
    v25[0] = v17;
    *(_DWORD *)long long v16 = 136446210;
    type metadata accessor for EEDAgent();
    swift_retain();
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v24 = sub_1001B3178(v18, v19, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] init", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v12;
}

uint64_t sub_1000E8E28()
{
  uint64_t v1 = v0;
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9958);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136446210;
    type metadata accessor for EEDAgent();
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }

  return v1;
}

uint64_t sub_1000E8FF8()
{
  sub_1000E8E28();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EEDAgent()
{
  return self;
}

uint64_t sub_1000E9050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = a2;
  uint64_t v67 = a1;
  uint64_t v70 = type metadata accessor for DispatchTime();
  uint64_t v75 = *(void *)(v70 - 8);
  uint64_t v6 = __chkstk_darwin(v70);
  uint64_t v68 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v48 - v8;
  uint64_t v66 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  long long v57 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v72 = v10;
  uint64_t v73 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  char v20 = (char *)&v48 - v19;
  char v56 = *(void (**)(char *, uint64_t))(v3 + 16);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v50 = v15 + 16;
  long long v65 = v21;
  v21((char *)&v48 - v19, a1, v14);
  v21(v18, (uint64_t)v20, v14);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  uint64_t v63 = v22 | 7;
  uint64_t v24 = v16 + v23;
  uint64_t v25 = v23;
  uint64_t v64 = v23;
  unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v62 = v26 + 16;
  unint64_t v27 = v26;
  unint64_t v61 = v26;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  uint64_t v58 = v15 + 32;
  long long v60 = v29;
  v29(v28 + v25, v18, v14);
  uint64_t v30 = (void *)(v28 + v27);
  *uint64_t v30 = v71;
  v30[1] = a3;
  uint64_t v55 = a3;
  uint64_t v81 = sub_1000EA5D0;
  uint64_t v82 = v28;
  double aBlock = _NSConcreteStackBlock;
  uint64_t v78 = 1107296256;
  long long v59 = &v79;
  long long v79 = sub_100207A1C;
  long long v80 = &unk_1003563E0;
  uint64_t v31 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v32 = v13;
  static DispatchQoS.unspecified.getter();
  long long v76 = _swiftEmptyArrayStorage;
  uint64_t v52 = sub_1000EAEAC((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v51 = sub_100004010((uint64_t *)&unk_10037FF80);
  uint64_t v54 = sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  uint64_t v33 = v57;
  uint64_t v34 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v31);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v74 + 8);
  v74 += 8;
  char v56 = v35;
  v35(v33, v34);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v73 + 8);
  v73 += 8;
  char v53 = v36;
  uint64_t v37 = v32;
  v36(v32, v72);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  swift_release();
  sub_10000FDBC();
  uint64_t v38 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v39 = v68;
  static DispatchTime.now()();
  uint64_t v40 = v69;
  + infix(_:_:)();
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v75 + 8);
  v75 += 8;
  uint64_t v49 = v41;
  uint64_t v42 = v70;
  v41(v39, v70);
  v65(v20, v67, v14);
  uint64_t v43 = swift_allocObject();
  v60(v43 + v64, v20, v14);
  uint64_t v44 = (void *)(v43 + v61);
  uint64_t v45 = v55;
  void *v44 = v71;
  v44[1] = v45;
  uint64_t v81 = sub_1000EAC68;
  uint64_t v82 = v43;
  double aBlock = _NSConcreteStackBlock;
  uint64_t v78 = 1107296256;
  long long v79 = sub_100207A1C;
  long long v80 = &unk_100356430;
  uint64_t v46 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  double aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v46);

  v56(v33, v34);
  v53(v37, v72);
  return v49(v40, v42);
}

uint64_t sub_1000E97A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v98 = a3;
  uint64_t v97 = a2;
  uint64_t v112 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v103 = *(void *)(v3 - 8);
  uint64_t v104 = v3;
  __chkstk_darwin(v3);
  uint64_t v101 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DispatchQoS();
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  long long v99 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v96 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v90 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v94 = (char *)&v90 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v106 = (unint64_t)&v90 - v16;
  uint64_t v95 = v17;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v90 - v18;
  if (qword_10037DDB0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_10000FD84(v20, (uint64_t)qword_1003A99E8);
  char v111 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v111(v19, v112, v6);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v110 = v7;
  uint64_t v107 = v7 + 16;
  uint64_t v105 = v21;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    sub_1000EAEAC(&qword_10037F4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v113 = sub_1001B3178(v26, v27, (uint64_t *)aBlock);
    uint64_t v7 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v108 = *(void (**)(char *, uint64_t))(v7 + 8);
    v108(v19, v6);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[ID: %s] fetchStateAsync: fetching", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v108 = *(void (**)(char *, uint64_t))(v7 + 8);
    v108(v19, v6);
  }

  aBlock[0] = 0;
  id v28 = (id)CLGetEEDCloakingKey();
  id v29 = aBlock[0];
  if (v28)
  {
    uint64_t v30 = v28;
    id v31 = aBlock[0];
    uint64_t v109 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    unint64_t v34 = v106;
    if (!v29) {
      goto LABEL_14;
    }
  }
  else
  {
    id v35 = aBlock[0];
    uint64_t v109 = 0;
    unint64_t v33 = 0xF000000000000000;
    unint64_t v34 = v106;
    if (!v29) {
      goto LABEL_14;
    }
  }
  v111((char *)v34, v112, v6);
  id v36 = v29;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = swift_slowAlloc();
    long long v92 = (void *)swift_slowAlloc();
    aBlock[0] = v92;
    *(_DWORD *)uint64_t v39 = 136315394;
    sub_1000EAEAC(&qword_10037F4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v113 = sub_1001B3178(v40, v41, (uint64_t *)aBlock);
    uint64_t v93 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v108((char *)v34, v6);
    *(_WORD *)(v39 + 12) = 2082;
    unint64_t v106 = v33;
    uint64_t v42 = v36;
    id v43 = [v42 description];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;

    uint64_t v47 = v44;
    uint64_t v7 = v110;
    uint64_t v113 = sub_1001B3178(v47, v46, (uint64_t *)aBlock);
    uint64_t v12 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "[ID: %s] CLGetEEDCloakingKey returned error: %{public}s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10000FD70(v109, v106);

    uint64_t v37 = v42;
  }
  else
  {

    v108((char *)v34, v6);
    sub_10000FD70(v109, v33);
  }
  uint64_t v109 = 0;
  unint64_t v33 = 0xF000000000000000;
LABEL_14:
  unint64_t v106 = v33;
  aBlock[0] = 0;
  id v48 = (id)CLGetEEDEmergencyContactNames();
  id v49 = aBlock[0];
  uint64_t v50 = v49;
  if (v48)
  {
    uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!v50) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v51 = 0;
    if (!v49) {
      goto LABEL_22;
    }
  }
  id v52 = v50;
  swift_bridgeObjectRelease();
  char v53 = v94;
  v111(v94, v112, v6);
  id v54 = v52;
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  int v57 = v56;
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v58 = swift_slowAlloc();
    uint64_t v93 = (char *)swift_slowAlloc();
    aBlock[0] = v93;
    *(_DWORD *)uint64_t v58 = 136315394;
    sub_1000EAEAC(&qword_10037F4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    LODWORD(v92) = v57;
    uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v113 = sub_1001B3178(v59, v60, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v108(v53, v6);
    *(_WORD *)(v58 + 12) = 2082;
    uint64_t v94 = (char *)(v58 + 14);
    id v61 = v54;
    unint64_t v62 = v12;
    id v63 = [v61 description];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_t v91 = v55;
    uint64_t v65 = v64;
    unint64_t v67 = v66;

    uint64_t v12 = v62;
    uint64_t v113 = sub_1001B3178(v65, v67, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v7 = v110;
    swift_bridgeObjectRelease();
    os_log_t v68 = v91;
    _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v92, "[ID: %s] CLGetEEDEmergencyContactNames returned error: %{public}s", (uint8_t *)v58, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v108(v53, v6);
  }

  uint64_t v51 = 0;
LABEL_22:
  v111(v12, v112, v6);
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 136315138;
    sub_1000EAEAC(&qword_10037F4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v113 = sub_1001B3178(v72, v73, (uint64_t *)aBlock);
    uint64_t v7 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v108(v12, v6);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "[ID: %s] fetchStateAsync: done", v71, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v108(v12, v6);
  }

  sub_10000FDBC();
  uint64_t v74 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v75 = v96;
  v111(v96, v112, v6);
  unint64_t v76 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v77 = (v95 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v79 = (char *)swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v79[v76], v75, v6);
  long long v80 = &v79[v77];
  uint64_t v81 = v98;
  *(void *)long long v80 = v97;
  *((void *)v80 + 1) = v81;
  uint64_t v82 = &v79[v78];
  uint64_t v83 = v109;
  unint64_t v84 = v106;
  *(void *)uint64_t v82 = v109;
  *((void *)v82 + 1) = v84;
  *(void *)&v79[(v78 + 23) & 0xFFFFFFFFFFFFFFF8] = v51;
  aBlock[4] = sub_1000EAE00;
  aBlock[5] = v79;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_100356480;
  unsigned __int8 v85 = _Block_copy(aBlock);
  swift_retain();
  sub_10000FD5C(v83, v84);
  swift_release();
  unsigned __int8 v86 = v99;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000EAEAC((unint64_t *)&qword_100383A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_100011C70((unint64_t *)&qword_100383A10, (uint64_t *)&unk_10037FF80);
  char v87 = v101;
  uint64_t v88 = v104;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v85);

  sub_10000FD70(v83, v84);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v87, v88);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v86, v102);
}

uint64_t sub_1000EA5D0()
{
  return sub_1000EAC80(sub_1000E97A4);
}

uint64_t sub_1000EA5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000EA5F8()
{
  return swift_release();
}

uint64_t sub_1000EA600(uint64_t a1, void (*a2)(void, void, void, void), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v30 = a3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DDB0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000FD84(v15, (uint64_t)qword_1003A99E8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v29 = a1;
  v16(v14, a1, v11);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = a6;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = a2;
    uint64_t v32 = v21;
    uint64_t v26 = a4;
    unint64_t v27 = a5;
    *(_DWORD *)uint64_t v20 = 136315138;
    sub_1000EAEAC(&qword_10037F4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = sub_1001B3178(v22, v23, &v32);
    a4 = v26;
    a5 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[ID: %s] fetchStateAsync: done and notifying", v20, 0xCu);
    swift_arrayDestroy();
    a2 = v25;
    swift_slowDealloc();
    a6 = v28;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  sub_10000FD5C(a4, a5);
  swift_bridgeObjectRetain();
  a2(v29, a4, a5, a6);
  sub_10000FD70(a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EA8FC(uint64_t a1, uint64_t (*a2)(void, void, void, void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DDB0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000FD84(v10, (uint64_t)qword_1003A99E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = a2;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v19 = a1;
    uint64_t v20 = a3;
    *(_DWORD *)uint64_t v14 = 136315138;
    sub_1000EAEAC(&qword_10037F4A8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = sub_1001B3178(v15, v16, &v23);
    a1 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[ID: %s] fetchStateAsync: failsafe timeout triggered", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v21;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return a2(a1, 0, 0xF000000000000000, 0);
}

uint64_t sub_1000EABC0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000EAC68()
{
  return sub_1000EAC80((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000EA8FC);
}

uint64_t sub_1000EAC80(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v1 + v3;
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];

  return a1(v4, v6, v7);
}

uint64_t sub_1000EAD24()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  unint64_t v6 = *(void *)(v0 + v5 + 8);
  if (v6 >> 60 != 15) {
    sub_10000F294(*(void *)(v0 + v5), v6);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000EAE00()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = *(void (**)(void, void, void, void))(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v3 + 8);
  uint64_t v7 = *(void *)(v0 + v4);
  unint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000EA600(v0 + v2, v5, v6, v7, v8, v9);
}

uint64_t sub_1000EAEAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EAF04()
{
  return swift_initClassMetadata2();
}

__n128 sub_1000EAF54()
{
  __asm { FMOV            V0.2D, #28.0 }
  xmmword_1003A9930 = (__int128)result;
  return result;
}

BOOL sub_1000EAF64(char *a1, char *a2)
{
  return static ConnectionAssistantRendererEarthOutline.Error.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000EAF70()
{
  return ConnectionAssistantRendererEarthOutline.Error.hashValue.getter(*v0);
}

void sub_1000EAF78(uint64_t a1)
{
  ConnectionAssistantRendererEarthOutline.Error.hash(into:)(a1, *v1);
}

Swift::Int sub_1000EAF80()
{
  Hasher.init(_seed:)();
  ConnectionAssistantRendererEarthOutline.Error.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

void sub_1000EAFC0()
{
}

uint64_t sub_1000EB018(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

void sub_1000EB030()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for SessionAccessoryView();
  [super layoutSubviews];
  id v1 = [*(id *)&v0[qword_100386448] view];
  if (v1)
  {
    unint64_t v2 = v1;
    [v0 bounds];
    [v2 setFrame:];
  }
}

void sub_1000EB0F8(void *a1)
{
  id v1 = a1;
  sub_1000EB030();
}

double sub_1000EB140(void *a1)
{
  id v1 = a1;
  double v2 = sub_1000EB3E8();

  return v2;
}

void sub_1000EB184()
{
}

id sub_1000EB1C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SessionAccessoryView();
  return [super dealloc];
}

void sub_1000EB23C(uint64_t a1)
{
}

uint64_t type metadata accessor for SessionAccessoryView()
{
  return sub_100006BAC();
}

unsigned char *sub_1000EB264(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EB330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for SessionAccessoryView.AccessoryRole()
{
  return sub_100006BAC();
}

uint64_t sub_1000EB370()
{
  return swift_getWitnessTable();
}

void sub_1000EB38C()
{
}

double sub_1000EB3E8()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + qword_100386440);
  if (qword_10037DD48 != -1) {
    swift_once();
  }
  double v2 = 0.0;
  if (v1 < 2) {
    double v2 = 3.0;
  }
  return *(double *)&xmmword_1003A9930 - v2;
}

void sub_1000EB460()
{
}

uint64_t destroy for ExplorerTryOutConnectButton()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ExplorerTryOutConnectButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExplorerTryOutConnectButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ExplorerTryOutConnectButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerTryOutConnectButton(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerTryOutConnectButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerTryOutConnectButton()
{
  return &type metadata for ExplorerTryOutConnectButton;
}

uint64_t sub_1000EB6BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EB6D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v2 = type metadata accessor for ControlSize();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  __chkstk_darwin(v2);
  uint64_t v64 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for BorderedProminentButtonStyle();
  uint64_t v62 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  int v57 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for ButtonBorderShape();
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unsigned int v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100004010(&qword_1003865B0);
  uint64_t v7 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100004010(&qword_1003865B8);
  __chkstk_darwin(v51);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100004010(&qword_1003865C0);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  id v52 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100004010(&qword_1003865C8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  id v54 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100004010(&qword_1003865D0);
  __chkstk_darwin(v63);
  uint64_t v60 = (uint64_t)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = *v1;
  long long v74 = *(long long *)((char *)v1 + 24);
  long long v75 = v17;
  uint64_t v18 = swift_allocObject();
  unint64_t v67 = v1;
  long long v19 = v1[1];
  *(_OWORD *)(v18 + 16) = *v1;
  *(_OWORD *)(v18 + 32) = v19;
  *(void *)(v18 + 48) = *((void *)v1 + 4);
  sub_10004ED30((uint64_t)&v75);
  sub_100006A94((uint64_t)&v74);
  sub_100004010(&qword_1003865D8);
  uint64_t v20 = sub_1000094C4(&qword_1003820A8);
  uint64_t v21 = sub_1000EC694(&qword_1003820C8, &qword_1003820A8, (void (*)(void))sub_10006528C);
  uint64_t v71 = v20;
  uint64_t v72 = v21;
  swift_getOpaqueTypeConformance2();
  Button.init(action:label:)();
  static ButtonBorderShape.roundedRectangle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v23 = (uint64_t *)&v11[*(int *)(v51 + 36)];
  uint64_t v24 = sub_100004010(&qword_100381038);
  uint64_t v25 = v55;
  uint64_t v26 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))((char *)v23 + *(int *)(v24 + 28), v6, v56);
  *uint64_t v23 = KeyPath;
  uint64_t v27 = v53;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v53);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v26);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v27);
  uint64_t v28 = v57;
  BorderedProminentButtonStyle.init()();
  sub_1000EC718();
  sub_1000EC9B8(&qword_100381030, (void (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle);
  uint64_t v29 = v52;
  uint64_t v30 = v61;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v28, v30);
  sub_10000950C((uint64_t)v11, &qword_1003865B8);
  uint64_t v32 = v65;
  uint64_t v31 = v66;
  unint64_t v33 = v64;
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v64, enum case for ControlSize.large(_:), v66);
  uint64_t v34 = swift_getKeyPath();
  uint64_t v35 = (uint64_t)v54;
  id v36 = (uint64_t *)&v54[*(int *)(v14 + 44)];
  uint64_t v37 = sub_100004010(&qword_10037F228);
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))((char *)v36 + *(int *)(v37 + 28), v33, v31);
  *id v36 = v34;
  uint64_t v38 = v58;
  uint64_t v39 = v59;
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v35, v29, v59);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v31);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  id v40 = [self systemGray4Color];
  uint64_t v41 = Color.init(uiColor:)();
  uint64_t v42 = swift_getKeyPath();
  uint64_t v71 = v41;
  swift_retain();
  uint64_t v43 = AnyShapeStyle.init<A>(_:)();
  uint64_t v44 = v60;
  sub_10000D2A0(v35, v60, &qword_1003865C8);
  swift_release();
  unint64_t v45 = (uint64_t *)(v44 + *(int *)(v63 + 36));
  *unint64_t v45 = v42;
  v45[1] = v43;
  sub_10000950C(v35, &qword_1003865C8);
  id v46 = [self mainBundle];
  v76._uint64_t countAndFlagsBits = 0xD00000000000007ALL;
  v76._uint64_t object = (void *)0x80000001002CCE70;
  v47._uint64_t object = (void *)0x80000001002CCE50;
  v47._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v48._uint64_t countAndFlagsBits = 0;
  v48._uint64_t object = (void *)0xE000000000000000;
  Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v47, (Swift::String_optional)0, (NSBundle)v46, v48, v76);

  Swift::String v73 = v49;
  long long v70 = v74;
  sub_100004010(&qword_10037ED78);
  State.projectedValue.getter();
  uint64_t v69 = v67;
  sub_1000EC7F4();
  sub_100033310();
  sub_1000B3520();
  View.alert<A, B, C>(_:isPresented:actions:message:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000950C(v44, &qword_1003865D0);
}

uint64_t sub_1000EC034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v29 = sub_100004010(&qword_10037F010);
  __chkstk_darwin(v29);
  uint64_t v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100004010(&qword_100382090);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100004010(&qword_100382098);
  __chkstk_darwin(v28);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_1003820A0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100004010(&qword_1003820A8);
  __chkstk_darwin(v30);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self mainBundle];
  v35._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  v35._uint64_t object = (void *)0x80000001002C8F00;
  v15._uint64_t object = (void *)0x80000001002C8EE0;
  v15._uint64_t countAndFlagsBits = 0xD000000000000019;
  v16._uint64_t countAndFlagsBits = 0;
  v16._uint64_t object = (void *)0xE000000000000000;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v35);

  Swift::String v32 = v17;
  sub_100033310();
  v32._uint64_t countAndFlagsBits = Text.init<A>(_:)();
  v32._uint64_t object = v18;
  char v33 = v19 & 1;
  uint64_t v34 = v20;
  uint64_t v21 = enum case for DynamicTypeSize.accessibility2(_:);
  uint64_t v22 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v2, v21, v22);
  sub_1000EC9B8(&qword_10037F020, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_100009B18(&qword_10037F030, &qword_10037F010);
    View.dynamicTypeSize<A>(_:)();
    sub_10000950C((uint64_t)v2, &qword_10037F010);
    sub_100033364(v32._countAndFlagsBits, (uint64_t)v32._object, v33);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
    uint64_t v25 = &v8[*(int *)(v28 + 36)];
    *(void *)uint64_t v25 = KeyPath;
    v25[8] = 1;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v26 = static Alignment.center.getter();
    sub_100166904(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v26, v27);
    sub_10000950C((uint64_t)v8, &qword_100382098);
    sub_10000D2A0((uint64_t)v11, (uint64_t)v13, &qword_1003820A0);
    *(_WORD *)&v13[*(int *)(v30 + 36)] = 256;
    sub_10000950C((uint64_t)v11, &qword_1003820A0);
    static Font.Weight.semibold.getter();
    sub_1000EC694(&qword_1003820C8, &qword_1003820A8, (void (*)(void))sub_10006528C);
    View.fontWeight(_:)();
    return sub_10000950C((uint64_t)v13, &qword_1003820A8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EC548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 16);
  type metadata accessor for AppEvents();
  sub_1000EC9B8((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t result = EnvironmentObject.init()();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1000EC5C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EB6D8(a1);
}

uint64_t sub_1000EC604()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000EC644()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000EC694(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000EC718()
{
  unint64_t result = qword_1003865E0;
  if (!qword_1003865E0)
  {
    sub_1000094C4(&qword_1003865B8);
    sub_100009B18(&qword_1003865E8, &qword_1003865B0);
    sub_100009B18(&qword_100381048, &qword_100381038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003865E0);
  }
  return result;
}

uint64_t sub_1000EC7EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EC548(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000EC7F4()
{
  unint64_t result = qword_1003865F0;
  if (!qword_1003865F0)
  {
    sub_1000094C4(&qword_1003865D0);
    sub_1000EC894();
    sub_100009B18(&qword_100380F50, &qword_100380F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003865F0);
  }
  return result;
}

unint64_t sub_1000EC894()
{
  unint64_t result = qword_1003865F8;
  if (!qword_1003865F8)
  {
    sub_1000094C4(&qword_1003865C8);
    sub_1000094C4(&qword_1003865B8);
    type metadata accessor for BorderedProminentButtonStyle();
    sub_1000EC718();
    sub_1000EC9B8(&qword_100381030, (void (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_10037F220, &qword_10037F228);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003865F8);
  }
  return result;
}

uint64_t sub_1000EC9B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ECA08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000ECAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
  Swift::String v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  void v17[6] = a2;
  v17[7] = a3;
  TimelineView<>.init(_:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

double sub_1000ECC00(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0.0;
  }
  double result = *(double *)(a1 + 32);
  double v5 = *(double *)(a1 + 40);
  if (v5 < a2)
  {
    unsigned int v6 = (double *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 16);
    do
    {
      if (!--v7) {
        return *(double *)(a1 + 32 + 24 * v2 - 24);
      }
      double v8 = v5;
      double v9 = result;
      uint64_t v10 = v6 + 3;
      double result = *(v6 - 1);
      double v5 = *v6;
      BOOL v11 = *v6 < a2;
      v6 += 3;
    }
    while (v11);
    double v12 = a2 - v8;
    if (*((unsigned char *)v10 - 16) == 1) {
      double v12 = sqrt(v12);
    }
    return v9 + (result - v9) * v12 / (v5 - v8);
  }
  return result;
}

BOOL sub_1000ECC8C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow)) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 66)) {
    return 0;
  }
  uint64_t v2 = v1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing;
  if (*(unsigned char *)(v2 + 24)) {
    return 0;
  }
  double v4 = round(*(double *)v2 * 57.2957795) * 0.0174532925;
  double v5 = -v4;
  if (v4 >= 0.0) {
    double v5 = v4;
  }
  return v5 <= 0.785398163;
}

void sub_1000ECD04()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if ((v1 - 3) >= 2)
  {
    if (v1 == 2)
    {
      uint64_t v2 = *(void **)(v0 + 64);
      uint64_t v3 = v2[9];
      uint64_t v4 = v2[10];
      sub_100008F88(v2 + 6, v3);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v22, v3, v4);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v22);
    }
    else
    {
      double v5 = self;
      id v6 = [v5 mainScreen];
      [v6 nativeScale];
      double v8 = v7;

      id v9 = [v5 mainScreen];
      [v9 scale];
      double v11 = v10;

      if (v11 < v8)
      {
        id v12 = [v5 mainScreen];
        [v12 nativeScale];
        double v14 = v13;

        if (v14 > 0.0)
        {
          id v15 = [v5 mainScreen];
          [v15 scale];

          id v16 = [v5 mainScreen];
          [v16 nativeScale];
        }
      }
      uint64_t v17 = *(void *)(v0 + 64);
      id v18 = *(id *)(v17 + 112);
      static UIContentSizeCategory.>= infix(_:_:)();

      uint64_t v19 = (void *)(v17 + 48);
      uint64_t v20 = *(void *)(v17 + 72);
      uint64_t v21 = *(void *)(v17 + 80);
      sub_100008F88(v19, v20);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 32))(v22, v20, v21);
      sub_100008F88(v22, v22[3]);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v22);
    }
  }
}

double sub_1000ECFCC()
{
  double v1 = 1.0;
  if (*(unsigned __int8 *)(v0 + 16) - 2 >= 3)
  {
    uint64_t v2 = self;
    id v3 = [v2 mainScreen];
    [v3 nativeScale];
    double v5 = v4;

    id v6 = [v2 mainScreen];
    [v6 scale];
    double v8 = v7;

    if (v8 < v5)
    {
      id v9 = [v2 mainScreen];
      [v9 nativeScale];
      double v11 = v10;

      if (v11 > 0.0)
      {
        id v12 = [v2 mainScreen];
        [v12 scale];
        double v14 = v13;

        id v15 = [v2 mainScreen];
        [v15 nativeScale];
        double v17 = v16;

        return v14 / v17;
      }
    }
  }
  return v1;
}

uint64_t sub_1000ED114@<X0>(uint64_t a1@<X8>)
{
  if (!sub_1000EDE88() || *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) + 48) + 120) - 1 <= 8) {
    goto LABEL_6;
  }
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 2)
  {
    if (qword_10037DD58 != -1) {
      swift_once();
    }
    uint64_t v5 = qword_100386668;
    uint64_t v30 = qword_100386678;
    uint64_t v32 = qword_100386670;
    uint64_t v6 = qword_100386688;
    uint64_t v7 = qword_100386690;
    uint64_t v8 = qword_100386698;
    uint64_t v9 = qword_1003866A0;
    char v34 = byte_1003866A8;
    uint64_t v26 = unk_1003866B8;
    uint64_t v28 = qword_100386680;
    uint64_t v10 = unk_1003866C8;
    uint64_t v21 = qword_1003866B0;
    uint64_t v24 = qword_1003866C0;
    v53[0] = 0x3FE921FB54442D18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v11 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    sub_100004010(&qword_1003869D8);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1002B31C0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 0;
    *(unsigned char *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 56) = xmmword_1002B9200;
    *(unsigned char *)(v12 + 72) = 1;
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1002B31C0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 0;
    long long v14 = xmmword_1002B9210;
    goto LABEL_17;
  }
  if (v3 == 3)
  {
    if (qword_10037DD60 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1003866D0;
    uint64_t v31 = qword_1003866E0;
    uint64_t v33 = qword_1003866D8;
    uint64_t v16 = qword_1003866F0;
    uint64_t v17 = qword_1003866F8;
    uint64_t v18 = qword_100386700;
    uint64_t v19 = qword_100386708;
    char v35 = byte_100386710;
    uint64_t v27 = unk_100386720;
    uint64_t v29 = qword_1003866E8;
    uint64_t v20 = unk_100386730;
    uint64_t v22 = qword_100386718;
    uint64_t v25 = qword_100386728;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    v53[0] = 0x3FE921FB54442D18;
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    sub_100004010(&qword_1003869D8);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1002B31C0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 0;
    *(unsigned char *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 56) = xmmword_1002B91E0;
    *(unsigned char *)(v12 + 72) = 1;
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1002B31C0;
    *(_OWORD *)(v13 + 32) = xmmword_1002B91F0;
    *(unsigned char *)(v13 + 48) = 0;
    *(_OWORD *)(v13 + 56) = xmmword_1002B7260;
    *(unsigned char *)(v13 + 72) = 1;
    uint64_t v36 = v15;
    uint64_t v37 = v33;
    uint64_t v38 = v31;
    uint64_t v39 = v29;
    uint64_t v40 = v16;
    uint64_t v41 = v17;
    uint64_t v42 = v18;
    uint64_t v43 = v19;
    char v44 = v35;
    uint64_t v45 = v22;
    uint64_t v46 = v27;
    uint64_t v47 = v25;
    uint64_t v48 = v20;
    uint64_t v49 = 0x3FE921FB54442D18;
    goto LABEL_18;
  }
  if (v3 != 4)
  {
    if (qword_10037DD50 != -1) {
      swift_once();
    }
    uint64_t v5 = qword_100386600;
    uint64_t v30 = qword_100386610;
    uint64_t v32 = qword_100386608;
    uint64_t v6 = qword_100386620;
    uint64_t v7 = qword_100386628;
    uint64_t v8 = qword_100386630;
    uint64_t v9 = qword_100386638;
    char v34 = byte_100386640;
    uint64_t v26 = unk_100386650;
    uint64_t v28 = qword_100386618;
    uint64_t v10 = unk_100386660;
    uint64_t v23 = qword_100386648;
    uint64_t v24 = qword_100386658;
    v53[0] = 0x3FE921FB54442D18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v11 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    sub_100004010(&qword_1003869D8);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1002B31C0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 0;
    *(unsigned char *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 56) = xmmword_1002B9220;
    *(unsigned char *)(v12 + 72) = 1;
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1002B31C0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 0;
    long long v14 = xmmword_1002B9230;
LABEL_17:
    *(_OWORD *)(v13 + 56) = v14;
    *(unsigned char *)(v13 + 72) = 1;
    uint64_t v36 = v5;
    uint64_t v37 = v32;
    uint64_t v38 = v30;
    uint64_t v39 = v28;
    uint64_t v40 = v6;
    uint64_t v41 = v7;
    uint64_t v42 = v8;
    uint64_t v43 = v9;
    char v44 = v34;
    uint64_t v45 = v11;
    uint64_t v46 = v26;
    uint64_t v47 = v24;
    uint64_t v48 = v10;
    uint64_t v49 = 0x3FD921FB54442D18;
LABEL_18:
    uint64_t v50 = 0x3FE921FB54442D18;
    uint64_t v51 = v12;
    uint64_t v52 = v13;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(&v36);
    goto LABEL_7;
  }
LABEL_6:
  sub_1000F2004((uint64_t)&v36);
LABEL_7:
  sub_10000D544((uint64_t)&v36, (uint64_t)v53, &qword_100385F78);
  return sub_10000D544((uint64_t)v53, a1, &qword_100385F78);
}

uint64_t sub_1000ED72C()
{
  uint64_t v0 = sub_1000AB188();
  uint64_t v1 = sub_1000AB188();
  uint64_t result = sub_1000AB188();
  qword_100386600 = 0x4008000000000000;
  qword_100386608 = (uint64_t)&off_10034AD48;
  qword_100386610 = (uint64_t)&off_10034ADB0;
  qword_100386618 = v0;
  qword_100386620 = (uint64_t)&off_10034AE18;
  qword_100386628 = (uint64_t)&off_10034AE68;
  qword_100386630 = v1;
  qword_100386638 = (uint64_t)&off_10034AED0;
  byte_100386640 = 1;
  qword_100386648 = (uint64_t)&off_10034AF38;
  unk_100386650 = &off_10034AF88;
  qword_100386658 = (uint64_t)&off_10034B020;
  unk_100386660 = result;
  return result;
}

uint64_t sub_1000ED7E0()
{
  uint64_t v0 = sub_1000AB188();
  uint64_t v1 = sub_1000AB188();
  uint64_t result = sub_1000AB188();
  qword_100386668 = 0x4008000000000000;
  qword_100386670 = (uint64_t)&off_10034B0B8;
  qword_100386678 = (uint64_t)&off_10034B120;
  qword_100386680 = v0;
  qword_100386688 = (uint64_t)&off_10034B1A0;
  qword_100386690 = (uint64_t)&off_10034B1F0;
  qword_100386698 = v1;
  qword_1003866A0 = (uint64_t)&off_10034B270;
  byte_1003866A8 = 1;
  qword_1003866B0 = (uint64_t)&off_10034B2D8;
  unk_1003866B8 = &off_10034B328;
  qword_1003866C0 = (uint64_t)&off_10034B3A8;
  unk_1003866C8 = result;
  return result;
}

uint64_t sub_1000ED894()
{
  uint64_t v0 = sub_1000AB188();
  uint64_t v1 = sub_1000AB188();
  uint64_t result = sub_1000AB188();
  qword_1003866D0 = 0x4008000000000000;
  qword_1003866D8 = (uint64_t)&off_10034B440;
  qword_1003866E0 = (uint64_t)&off_10034B4A8;
  qword_1003866E8 = v0;
  qword_1003866F0 = (uint64_t)&off_10034B528;
  qword_1003866F8 = (uint64_t)&off_10034B578;
  qword_100386700 = v1;
  qword_100386708 = (uint64_t)&off_10034B5F8;
  byte_100386710 = 0;
  qword_100386718 = (uint64_t)&off_10034B660;
  unk_100386720 = &off_10034B6B0;
  qword_100386728 = (uint64_t)&off_10034B718;
  unk_100386730 = result;
  return result;
}

uint64_t sub_1000ED944@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 != 4)
  {
    uint64_t v4 = sub_1000EDC14();
    if (v3 == 2)
    {
      double v5 = 40.0;
      uint64_t v7 = 0x4049800000000000;
    }
    else
    {
      if (v3 == 3)
      {
        double v5 = 10.0;
        double v6 = 12.0;
        goto LABEL_9;
      }
      double v5 = 145.0;
      uint64_t v7 = 0x4068600000000000;
    }
    double v6 = *(double *)&v7;
LABEL_9:
    v29[0] = 0x3FE921FB54442D18;
    Angle.animatableData.getter();
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) + 48) + 120);
    BOOL v10 = v8 == 1 || v8 == 4;
    double v11 = 0.0;
    if (!sub_1000ECC8C()
      || (uint64_t v12 = *(void *)(v1 + 40),
          (*(unsigned char *)(v12 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow) & 1) != 0)
      || (*(unsigned char *)(v12 + 66) & 1) != 0
      || (uint64_t v13 = v12 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing,
          (*(unsigned char *)(v13 + 24) & 1) != 0))
    {
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      double v11 = round(*(double *)v13 * 57.2957795) * 0.0174532925;
    }
    sub_1000ED114((uint64_t)v28);
    sub_10000D544((uint64_t)v28, (uint64_t)v26, &qword_100385F78);
    if (v3 == 2)
    {
      double v16 = 2.5;
      uint64_t v17 = 0x403E400000000000;
    }
    else
    {
      if (v3 == 3)
      {
        double v15 = 11.0;
        double v16 = 2.0;
LABEL_26:
        *(void *)&long long v19 = v4;
        *((double *)&v19 + 1) = v6;
        *(double *)&long long v20 = v5;
        *((void *)&v20 + 1) = 0x3FF921FB54442D18;
        *(void *)&long long v21 = 0x3FE921FB54442D18;
        BYTE8(v21) = v10;
        *(double *)&long long v22 = v11;
        BYTE8(v22) = v14;
        sub_10000D544((uint64_t)v26, (uint64_t)v23, &qword_100385F78);
        *((void *)&v24 + 1) = 0x4012D97C7F3321D2;
        *(double *)&long long v25 = v15;
        *((double *)&v25 + 1) = v16;
        v27[10] = v23[6];
        v27[11] = v23[7];
        v27[6] = v23[2];
        v27[7] = v23[3];
        v27[8] = v23[4];
        v27[9] = v23[5];
        v27[2] = v21;
        v27[3] = v22;
        v27[4] = v23[0];
        v27[5] = v23[1];
        v27[0] = v19;
        v27[1] = v20;
        v27[12] = v24;
        v27[13] = v25;
        ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v27);
        goto LABEL_27;
      }
      double v16 = 8.5;
      uint64_t v17 = 0x405EC00000000000;
    }
    double v15 = *(double *)&v17;
    goto LABEL_26;
  }
  sub_1000F1FE0(v27);
LABEL_27:
  sub_10000D544((uint64_t)v27, (uint64_t)v29, &qword_100385F30);
  return sub_10000D544((uint64_t)v29, a1, &qword_100385F30);
}

uint64_t sub_1000EDC14()
{
  if (sub_1000EDE88())
  {
    switch(*(unsigned char *)(*(void *)(*(void *)(v0 + 32) + 48) + 120))
    {
      case 1:
      case 4:
        int v4 = *(unsigned __int8 *)(v0 + 16);
        if ((v4 - 3) < 2) {
          goto LABEL_7;
        }
        if (v4 != 2) {
          goto LABEL_16;
        }
        sub_100004010(&qword_1003860D0);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_1002B31C0;
        *(void *)(v8 + 32) = static Color.white.getter();
        static Color.white.getter();
        uint64_t v9 = Color.opacity(_:)();
        swift_release();
        *(void *)(v8 + 40) = v9;
        break;
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 9:
        int v1 = *(unsigned __int8 *)(v0 + 16);
        if ((v1 - 3) < 2) {
          goto LABEL_7;
        }
        if (v1 == 2)
        {
          sub_100004010(&qword_1003860D0);
          uint64_t v2 = swift_allocObject();
          *(_OWORD *)(v2 + 16) = xmmword_1002B3350;
          id v3 = [self systemGray3Color];
        }
        else
        {
          sub_100004010(&qword_1003860D0);
          uint64_t v2 = swift_allocObject();
          *(_OWORD *)(v2 + 16) = xmmword_1002B3350;
          id v3 = [self systemGray4Color];
        }
        id v7 = v3;
        uint64_t v5 = Color.init(uiColor:)();
        goto LABEL_8;
      case 8:
        goto LABEL_7;
      default:
LABEL_16:
        sub_100004010(&qword_1003860D0);
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_1002B31C0;
        *(void *)(v10 + 32) = sub_1000AB188();
        *(void *)(v10 + 40) = sub_1000AB188();
        break;
    }
  }
  else
  {
LABEL_7:
    sub_100004010(&qword_1003860D0);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1002B3350;
    uint64_t v5 = static Color.clear.getter();
LABEL_8:
    *(void *)(v2 + 32) = v5;
  }
  specialized Array._endMutation()();

  return Gradient.init(colors:)();
}

BOOL sub_1000EDE88()
{
  uint64_t v1 = sub_100004010(&qword_100380780);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + 24) + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess();
  sub_10000D2A0(v4, (uint64_t)v3, &qword_100380780);
  uint64_t v5 = type metadata accessor for ConnectionClosed(0);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5);
  sub_10000950C((uint64_t)v3, &qword_100380780);
  if (v4 != 1) {
    return 0;
  }
  uint64_t v6 = *(void *)(v0 + 56);
  if (!*(void *)(v6 + 64)) {
    return 0;
  }
  BOOL result = 0;
  if (*(unsigned char *)(v6 + 56) == 5 && (unint64_t)*(unsigned __int8 *)(v6 + 73) << 8 == 256)
  {
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) + 48) + 120);
    if ((v8 - 1) < 5) {
      return *(unsigned __int8 *)(v0 + 16) - 5 < 0xFFFFFFFE;
    }
    return (v8 - 6) >= 4;
  }
  return result;
}

BOOL sub_1000EDFF8()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 3)
  {
    uint64_t v3 = *(void *)(v0 + 40);
    if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow) & 1) == 0
      && (*(unsigned char *)(v3 + 66) & 1) == 0)
    {
      char v2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing + 24) ^ 1;
      return v2 & 1;
    }
    goto LABEL_12;
  }
  if (v1 == 4)
  {
LABEL_3:
    char v2 = 1;
    return v2 & 1;
  }
  if (!sub_1000EDE88())
  {
LABEL_12:
    char v2 = 0;
    return v2 & 1;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(v0 + 32) + 48) + 120)) {
    goto LABEL_3;
  }

  return sub_1000ECC8C();
}

void sub_1000EE094(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 4)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    __int16 v10 = 0;
    long long v11 = 0uLL;
    double v12 = 0.0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    double v15 = 0.0;
    int64x2_t v16 = 0uLL;
    goto LABEL_30;
  }
  uint64_t v17 = *(void *)(v1 + 48);
  double v12 = 0.0;
  if ((*(unsigned char *)(v17 + 104) & 1) == 0) {
    double v12 = round(*(double *)(v17 + 32) * 57.2957795) * 0.0174532925;
  }
  uint64_t v18 = *(void *)(v1 + 40);
  long long v19 = xmmword_1002B3310;
  if ((*(unsigned char *)(v18 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow) & 1) == 0
    && (*(unsigned char *)(v18 + 66) & 1) == 0)
  {
    uint64_t v20 = v18 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing;
    if ((*(unsigned char *)(v20 + 24) & 1) == 0)
    {
      *((void *)&v19 + 1) = 0;
      *(double *)&long long v19 = round(*(double *)v20 * 57.2957795) * 0.0174532925;
    }
  }
  long long v33 = v19;
  uint64_t v21 = 0x4021000000000000;
  if (v3 == 3) {
    uint64_t v21 = 0x4000000000000000;
  }
  if (v3 == 2) {
    uint64_t v6 = 0x4004000000000000;
  }
  else {
    uint64_t v6 = v21;
  }
  id v22 = [self systemGray3Color];
  uint64_t v7 = Color.init(uiColor:)();
  if (!sub_1000EDE88()
    || (int v23 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) + 48) + 120), (v23 - 1) >= 5)
    && (v23 - 6) < 4)
  {
    uint64_t v24 = 0;
    unsigned int v25 = v3 - 2;
    if (v3 != 2) {
      goto LABEL_20;
    }
LABEL_17:
    uint64_t v9 = 0x403E400000000000;
    uint64_t v8 = 0x401A000000000000;
    double v26 = 40.0;
    goto LABEL_22;
  }
  uint64_t v24 = sub_1000AB188();
  unsigned int v25 = v3 - 2;
  if (v3 == 2) {
    goto LABEL_17;
  }
LABEL_20:
  if (v3 != 3)
  {
    uint64_t v8 = 0x402A000000000000;
    uint64_t v9 = 0x405EC00000000000;
    uint64_t v14 = 0x4073200000000000;
    uint64_t v13 = 0x4074400000000000;
    double v26 = 145.0;
    double v30 = 153.0;
    if (v25 <= 2) {
      goto LABEL_23;
    }
LABEL_25:
    uint64_t v5 = 10;
    goto LABEL_26;
  }
  uint64_t v9 = 0x4026000000000000;
  double v26 = 10.0;
  uint64_t v8 = 0x4008000000000000;
LABEL_22:
  sub_1000ECD04();
  uint64_t v13 = v27;
  uint64_t v14 = v28;
  sub_1000ECD04();
  double v30 = v29 * 0.5;
  if (v25 > 2) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v5 = qword_1002B98C0[(char)v25];
LABEL_26:
  double v15 = v26 - v30;
  BOOL v31 = sub_1000EDFF8();
  if (sub_1000ECC8C()) {
    __int16 v32 = 256;
  }
  else {
    __int16 v32 = 0;
  }
  __int16 v10 = v32 & 0xFFFE | v31;
  int64x2_t v16 = vdupq_n_s64(0x3FF921FB54442D18uLL);
  v16.i64[0] = v24;
  uint64_t v4 = 0x4012D97C7F3321D2;
  long long v11 = v33;
LABEL_30:
  *(void *)a1 = v4;
  *(double *)(a1 + 8) = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(int64x2_t *)(a1 + 56) = v16;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v9;
  *(double *)(a1 + 104) = v15;
  *(_WORD *)(a1 + 112) = v10;
}

BOOL sub_1000EE384()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if ((v1 - 3) < 2) {
    return 0;
  }
  if (v1 != 2) {
    return 1;
  }
  uint64_t v3 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow)) {
    return 0;
  }
  if (*(unsigned char *)(v3 + 66)) {
    return 0;
  }
  uint64_t v4 = v3 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing;
  if (*(unsigned char *)(v4 + 24)) {
    return 0;
  }
  double v5 = round(*(double *)v4 * 57.2957795) * 0.0174532925;
  double v6 = -v5;
  if (v5 >= 0.0) {
    double v6 = v5;
  }
  return v6 <= 0.785398163;
}

uint64_t sub_1000EE41C()
{
  if (*(unsigned __int8 *)(v0 + 16) - 3 < 2) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow)) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 66)) {
    return 0;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing + 24)) {
    return 0;
  }
  double v2 = *(double *)(v1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing);
  if (sub_1001E2D40((uint64_t)&off_10034B798, *(void *)(v1 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__suggestedActions)))return 0; {
  double v3 = round(v2 * 57.2957795) * 0.0174532925;
  }
  double v4 = v3 < 0.0 ? -v3 : v3;
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  Angle.animatableData.setter();
  if (v4 <= 0.785398163
    || sub_1000EDE88() && *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) + 48) + 120) - 1 > 8)
  {
    return 0;
  }
  if (v3 > 0.0)
  {
    Angle.animatableData.getter();
    Angle.animatableData.setter();
  }
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  Angle.animatableData.setter();
  return *(void *)&v3;
}

void sub_1000EE5B8(uint64_t a1@<X8>)
{
  double v3 = COERCE_DOUBLE(sub_1000EE41C());
  double v4 = 0.0;
  if ((v5 & 1) == 0)
  {
    double v4 = v3;
    double v6 = -v3;
    if (v3 >= 0.0) {
      double v6 = v3;
    }
    if (v6 <= 0.261799388) {
      double v4 = 0.0;
    }
  }
  uint64_t v7 = sub_1000AB188();
  uint64_t v8 = static Color.white.getter();
  unsigned int v9 = *(unsigned __int8 *)(v1 + 16) - 2;
  if (v9 >= 3)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v12 = v27;
    uint64_t v13 = v28;
    double v24 = -8.0;
    double v23 = 20.0;
    uint64_t v14 = v29;
    uint64_t v15 = v30;
    uint64_t v20 = 0x4073200000000000;
    uint64_t v18 = 0x4074400000000000;
    uint64_t v11 = 0x405EC00000000000;
    uint64_t v16 = v31;
  }
  else
  {
    uint64_t v10 = 8 * (char)v9;
    double v25 = *(double *)((char *)&unk_1002B9908 + v10);
    double v26 = *(double *)((char *)&unk_1002B98F0 + v10);
    uint64_t v11 = *(void *)((char *)&unk_1002B9920 + v10);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v12 = v27;
    uint64_t v13 = v28;
    uint64_t v14 = v29;
    uint64_t v15 = v30;
    uint64_t v16 = v31;
    sub_1000ECD04();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    sub_1000ECD04();
    double v22 = v21 * -0.5;
    double v23 = v26;
    double v24 = v25 + v22;
  }
  *(void *)a1 = 0x4012D97C7F3321D2;
  *(double *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  *(double *)(a1 + 72) = v23;
  *(_OWORD *)(a1 + 80) = xmmword_1002B9250;
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v11;
  *(double *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = 0x3FF921FB54442D18;
}

uint64_t sub_1000EE7A8@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = sub_100004010(&qword_100380780);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[3] + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess();
  sub_10000D2A0(v6, (uint64_t)v5, &qword_100380780);
  uint64_t v7 = type metadata accessor for ConnectionClosed(0);
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  sub_10000950C((uint64_t)v5, &qword_100380780);
  if (v6 == 1
    && (uint64_t v8 = v1[7], *(void *)(v8 + 64))
    && *(unsigned char *)(v8 + 56) == 5
    && (unint64_t)*(unsigned __int8 *)(v8 + 73) << 8 == 256)
  {
    uint64_t v9 = v1[4];
    int v10 = 1 << *(unsigned char *)(*(void *)(v9 + 48) + 120);
    if ((v10 & 0x3DA) != 0)
    {
      uint64_t v11 = (void *)v1[8];
      uint64_t v12 = v11[9];
      uint64_t v13 = v11[10];
      sub_100008F88(v11 + 6, v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 96))(v9, v12, v13);
    }
    else
    {
      if ((v10 & 0x24) != 0)
      {
        uint64_t v15 = static Color.white.getter();
        uint64_t v19 = (void *)v1[8];
        uint64_t v20 = v19[9];
        uint64_t v21 = v19[10];
        sub_100008F88(v19 + 6, v20);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 96))(v9, v20, v21);
        unint64_t v18 = 0x80000001002C5860;
        unint64_t v17 = 0xD00000000000001BLL;
        goto LABEL_9;
      }
      uint64_t v14 = sub_1000AB188();
    }
  }
  else
  {
    uint64_t v14 = static Color.white.getter();
  }
  uint64_t v15 = v14;
  uint64_t result = 0;
  unint64_t v17 = 0x662E656C63726963;
  unint64_t v18 = 0xEB000000006C6C69;
LABEL_9:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = 0x662E656C63726963;
  a1[3] = 0xEB000000006C6C69;
  a1[4] = v15;
  a1[5] = result;
  return result;
}

CGFloat sub_1000EEA08@<D0>(uint64_t a1@<X8>)
{
  double v3 = *(double *)v1;
  double v4 = atan2(*(long double *)(v1 + 16), *(long double *)(v1 + 8));
  __double2 v5 = __sincos_stret(v4);
  CGAffineTransformMakeTranslation(&v9, v3 * v5.__cosval, v3 * v5.__sinval);
  CGFloat result = v9.a;
  long long v7 = *(_OWORD *)&v9.c;
  long long v8 = *(_OWORD *)&v9.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v9.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v8;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

__n128 sub_1000EEA84@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

__n128 sub_1000EEA90(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

__n128 (*sub_1000EEA9C(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  return sub_1000EEAC8;
}

__n128 sub_1000EEAC8(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 8) = *a1;
  return result;
}

uint64_t sub_1000EEAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1000F354C();

  return static GeometryEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000EEB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1000F354C();

  return static GeometryEffect._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000EEBD0()
{
  return static GeometryEffect._viewListCount(inputs:body:)();
}

void sub_1000EEC2C()
{
}

double sub_1000EEC40(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

double (*sub_1000EEC4C(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return sub_1000EEC78;
}

double sub_1000EEC78(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

uint64_t sub_1000EEC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1000F2FF4();

  return static AnimatableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000EED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1000F2FF4();

  return static AnimatableModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000EED80()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1000EED9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004010(&qword_10037F140);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  static Font.system(size:weight:design:)();
  sub_10000950C((uint64_t)v6, &qword_10037F140);
  uint64_t v8 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = sub_100004010(&qword_100386A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a2, a1, v10);
  uint64_t result = sub_100004010(&qword_100386A50);
  uint64_t v12 = (uint64_t *)(a2 + *(int *)(result + 36));
  *uint64_t v12 = KeyPath;
  v12[1] = v8;
  return result;
}

double sub_1000EEF10@<D0>(uint64_t a1@<X8>)
{
  if (*(unsigned __int8 *)(v1 + 16) - 2 >= 3)
  {
    id v3 = *(id *)(*(void *)(v1 + 64) + 112);
    char v4 = static UIContentSizeCategory.>= infix(_:_:)();

    if ((v4 & 1) == 0)
    {
      static HorizontalAlignment.center.getter();
      static Edge.Set.bottom.getter();
      id v5 = [self mainScreen];
      id v6 = [v5 fixedCoordinateSpace];

      [v6 bounds];
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      CGFloat v14 = v13;
      swift_unknownObjectRelease();
      v22.origin.x = v8;
      v22.origin.y = v10;
      v22.size.width = v12;
      v22.size.height = v14;
      CGRectGetHeight(v22);
      EdgeInsets.init(_all:)();
    }
    sub_100004010(&qword_1003869D0);
    sub_1000F0BD4();
    _ConditionalContent<>.init(storage:)();
  }
  sub_100004010(&qword_1003869B8);
  sub_1000F0B58();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v16;
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v17;
  *(_OWORD *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 48) = v19;
  *(_WORD *)(a1 + 64) = v20;
  *(unsigned char *)(a1 + 66) = v21;
  return result;
}

uint64_t sub_1000EF14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004010(&qword_100386A70);
  __chkstk_darwin(v4 - 8);
  id v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *id v6 = static Alignment.center.getter();
  v6[1] = v7;
  uint64_t v8 = sub_100004010(&qword_100386A78);
  sub_1000EF264(a1, (uint64_t)v6 + *(int *)(v8 + 44));
  static Color.black.getter();
  uint64_t v9 = Color.opacity(_:)();
  swift_release();
  double v10 = *(double *)(a1 + 16) * 0.5;
  sub_10000D2A0((uint64_t)v6, a2, &qword_100386A70);
  uint64_t v11 = a2 + *(int *)(sub_100004010(&qword_100386A80) + 36);
  *(void *)uint64_t v11 = v9;
  *(double *)(v11 + 8) = v10;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  return sub_10000950C((uint64_t)v6, &qword_100386A70);
}

uint64_t sub_1000EF264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v4);
  id v6 = (double *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_100004010(&qword_1003809F8);
  __chkstk_darwin(v59);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100004010(&qword_100386A88);
  __chkstk_darwin(v62);
  double v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100004010(&qword_100386A90);
  uint64_t v11 = __chkstk_darwin(v61);
  uint64_t v60 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  long long v18 = (char *)&v51 - v17;
  __chkstk_darwin(v16);
  uint64_t v63 = (uint64_t)&v51 - v19;
  uint64_t v20 = sub_100004010(&qword_100386A98);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  double v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v70 = (uint64_t)&v51 - v24;
  uint64_t v71 = static Color.white.getter();
  double v25 = *(double *)(a1 + 16);
  double v26 = v25 + v25;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v69 = v72;
  int v68 = v73;
  uint64_t v67 = v74;
  int v66 = v75;
  uint64_t v65 = v76;
  uint64_t v64 = v77;
  if (*(unsigned char *)(a1 + 65))
  {
    double v29 = *(double *)(a1 + 24);
    uint64_t v58 = v15;
    uint64_t v52 = v4;
    uint64_t v30 = (char *)v6 + *(int *)(v4 + 20);
    uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
    unsigned int v57 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v55 = type metadata accessor for RoundedCornerStyle();
    uint64_t v32 = *(void *)(v55 - 8);
    uint64_t v51 = v18;
    uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 104);
    v56(v30, v31, v55);
    *id v6 = v29 * 0.5;
    v6[1] = v29 * 0.5;
    uint64_t v33 = static Color.white.getter();
    sub_100034580((uint64_t)v6, (uint64_t)v8);
    uint64_t v34 = v59;
    *(void *)&v8[*(int *)(v59 + 52)] = v33;
    *(_WORD *)&v8[*(int *)(v34 + 56)] = 256;
    sub_1000345E4((uint64_t)v6);
    double v53 = v25 * 1.3;
    double v54 = v29;
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_10000D2A0((uint64_t)v8, (uint64_t)v10, &qword_1003809F8);
    char v35 = &v10[*(int *)(v62 + 36)];
    long long v36 = v79;
    *(_OWORD *)char v35 = v78;
    *((_OWORD *)v35 + 1) = v36;
    *((_OWORD *)v35 + 2) = v80;
    sub_10000950C((uint64_t)v8, &qword_1003809F8);
    uint64_t v37 = (uint64_t)v51;
    sub_10000D2A0((uint64_t)v10, (uint64_t)v51, &qword_100386A88);
    uint64_t v38 = v37 + *(int *)(v61 + 36);
    *(double *)uint64_t v38 = -v26;
    *(void *)(v38 + 8) = 0;
    sub_10000950C((uint64_t)v10, &qword_100386A88);
    sub_10000D544(v37, v63, &qword_100386A90);
    v56((char *)v6 + *(int *)(v52 + 20), v57, v55);
    *id v6 = v29 * 0.5;
    v6[1] = v29 * 0.5;
    uint64_t v39 = static Color.white.getter();
    sub_100034580((uint64_t)v6, (uint64_t)v8);
    *(void *)&v8[*(int *)(v34 + 52)] = v39;
    *(_WORD *)&v8[*(int *)(v34 + 56)] = 256;
    sub_1000345E4((uint64_t)v6);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_10000D2A0((uint64_t)v8, (uint64_t)v10, &qword_1003809F8);
    uint64_t v40 = &v10[*(int *)(v62 + 36)];
    long long v41 = v82;
    *(_OWORD *)uint64_t v40 = v81;
    *((_OWORD *)v40 + 1) = v41;
    *((_OWORD *)v40 + 2) = v83;
    sub_10000950C((uint64_t)v8, &qword_1003809F8);
    uint64_t v42 = (uint64_t)v58;
    sub_10000D2A0((uint64_t)v10, (uint64_t)v58, &qword_100386A88);
    uint64_t v43 = v42 + *(int *)(v61 + 36);
    *(double *)uint64_t v43 = v26;
    *(void *)(v43 + 8) = 0;
    sub_10000950C((uint64_t)v10, &qword_100386A88);
    sub_10000D544(v42, v37, &qword_100386A90);
    uint64_t v44 = v63;
    sub_10000D2A0(v63, v42, &qword_100386A90);
    uint64_t v45 = v60;
    sub_10000D2A0(v37, v60, &qword_100386A90);
    sub_10000D2A0(v42, (uint64_t)v23, &qword_100386A90);
    uint64_t v46 = sub_100004010(qword_100386AB0);
    sub_10000D2A0(v45, (uint64_t)&v23[*(int *)(v46 + 48)], &qword_100386A90);
    sub_10000950C(v37, &qword_100386A90);
    sub_10000950C(v44, &qword_100386A90);
    sub_10000950C(v45, &qword_100386A90);
    sub_10000950C(v42, &qword_100386A90);
    uint64_t v47 = sub_100004010(&qword_100386AA0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v23, 0, 1, v47);
    uint64_t v28 = v70;
    sub_10000D544((uint64_t)v23, v70, &qword_100386A98);
  }
  else
  {
    uint64_t v27 = sub_100004010(&qword_100386AA0);
    uint64_t v28 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v70, 1, 1, v27);
  }
  sub_10000D2A0(v28, (uint64_t)v23, &qword_100386A98);
  *(void *)a2 = v71;
  *(_WORD *)(a2 + 8) = 256;
  *(void *)(a2 + 16) = v69;
  *(unsigned char *)(a2 + 24) = v68;
  *(void *)(a2 + 32) = v67;
  *(unsigned char *)(a2 + 40) = v66;
  uint64_t v48 = v64;
  *(void *)(a2 + 48) = v65;
  *(void *)(a2 + 56) = v48;
  uint64_t v49 = sub_100004010(&qword_100386AA8);
  sub_10000D2A0((uint64_t)v23, a2 + *(int *)(v49 + 48), &qword_100386A98);
  swift_retain();
  sub_10000950C(v28, &qword_100386A98);
  sub_10000950C((uint64_t)v23, &qword_100386A98);
  return swift_release();
}

void sub_1000EFA54(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = 0;
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel___cachedInSilencePeriodNow) & 1) != 0
    || (*(unsigned char *)(v3 + 66) & 1) != 0
    || (*(unsigned char *)(v3 + OBJC_IVAR____TtC8SOSBuddy13GuidanceModel__correctedTargetRelativeBearing + 24) & 1) != 0
    || (int v5 = *(unsigned __int8 *)(v1 + 16), v5 == 4)
    || v5 == 3 && !*(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 48) + 120))
  {
    uint64_t v6 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    double v14 = 0.0;
    __int16 v15 = 512;
    goto LABEL_11;
  }
  Angle.animatableData.getter();
  Angle.animatableData.getter();
  Angle.animatableData.setter();
  uint64_t v6 = 0x4012D97C7F3321D2;
  unsigned int v7 = v5 - 2;
  if (v5 == 2)
  {
    uint64_t v8 = 0x4008000000000000;
    uint64_t v10 = 0x401A000000000000;
    uint64_t v11 = 0x403E400000000000;
    double v9 = 40.0;
  }
  else
  {
    if (v5 != 3)
    {
      double v14 = -8.0;
      uint64_t v11 = 0x405EC00000000000;
      uint64_t v10 = 0x402A000000000000;
      uint64_t v8 = 0x4018000000000000;
      uint64_t v13 = 0x4073200000000000;
      uint64_t v4 = 0x4074400000000000;
      goto LABEL_15;
    }
    uint64_t v8 = 0;
    double v9 = 10.0;
    uint64_t v10 = 0x4008000000000000;
    uint64_t v11 = 0x4026000000000000;
  }
  sub_1000ECD04();
  uint64_t v4 = v16;
  uint64_t v13 = v17;
  sub_1000ECD04();
  double v14 = v9 + v18 * -0.5;
LABEL_15:
  __int16 v19 = v7 < 3;
  if (v7 >= 3) {
    uint64_t v12 = 0x403A000000000000;
  }
  else {
    uint64_t v12 = 0;
  }
  if (sub_1000EE384()) {
    __int16 v20 = 256;
  }
  else {
    __int16 v20 = 0;
  }
  __int16 v15 = v20 | v19;
LABEL_11:
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v13;
  *(double *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v12;
  *(_WORD *)(a1 + 64) = v15;
}

double sub_1000EFC50@<D0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 2)
  {
    uint64_t v7 = 0x4008000000000000;
    uint64_t v8 = 0x4032000000000000;
LABEL_8:
    sub_1000EE7A8(&v34);
    *(void *)&long long v27 = v8;
    *((void *)&v27 + 1) = v34;
    long long v28 = v35;
    long long v29 = v36;
    *(void *)&long long v30 = v37;
    *((void *)&v30 + 1) = v7;
    uint64_t v31 = sub_1000EFEC8();
    char v32 = 0;
    goto LABEL_9;
  }
  if (v3 == 3)
  {
    sub_1000EE7A8(&v34);
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = v34;
    long long v28 = v35;
    long long v29 = v36;
    long long v30 = v37;
    uint64_t v31 = sub_1000EFEC8();
    char v32 = 1;
LABEL_9:
    sub_1000F0A5C();
    sub_1000F0AB0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    *(_OWORD *)uint64_t v22 = v17;
    *(_OWORD *)&unsigned char v22[16] = *(_OWORD *)v18;
    long long v23 = *(_OWORD *)&v18[16];
    long long v24 = v19;
    uint64_t v25 = v20;
    __int16 v26 = v21;
    sub_100004010(&qword_100386990);
    sub_1000F09E0();
    sub_1000F0B04();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (v3 != 4)
  {
    uint64_t v7 = 0x4018000000000000;
    uint64_t v8 = 0x4051000000000000;
    goto LABEL_8;
  }
  sub_1000EE7A8((unint64_t *)&v17);
  long long v16 = v17;
  uint64_t v4 = *(void *)v18;
  unint64_t v5 = *(void *)&v18[24];
  uint64_t v6 = sub_1000EFEC8();
  *(void *)uint64_t v22 = 0;
  *(_OWORD *)&v22[8] = v16;
  *(void *)&v22[24] = v4;
  long long v23 = *(_OWORD *)&v18[8];
  long long v24 = v5;
  uint64_t v25 = v6;
  __int16 v26 = 256;
  sub_100004010(&qword_100386990);
  sub_1000F09E0();
  sub_1000F0B04();
  _ConditionalContent<>.init(storage:)();
LABEL_10:
  double result = *(double *)&v27;
  long long v10 = v28;
  long long v11 = v29;
  long long v12 = v30;
  uint64_t v13 = v31;
  char v14 = v32;
  char v15 = v33;
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  *(void *)(a1 + 64) = v13;
  *(unsigned char *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 73) = v15;
  return result;
}

uint64_t sub_1000EFEC8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  switch(*(unsigned char *)(*(void *)(v1 + 48) + 120))
  {
    case 1:
    case 5:
      double v2 = self;
      int v3 = &selRef_systemOrangeColor;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 9:
      double v2 = self;
      int v3 = &selRef_systemGrayColor;
      break;
    case 7:
    case 8:
      int v4 = *(unsigned __int8 *)(v1 + 56);
      double v2 = self;
      int v3 = &selRef_systemGrayColor;
      if (v4) {
        int v3 = &selRef_systemOrangeColor;
      }
      break;
    default:
      double v2 = self;
      int v3 = &selRef_systemGreenColor;
      break;
  }
  id v5 = [v2 *v3];

  return Color.init(uiColor:)();
}

uint64_t sub_1000EFFC8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = Image.init(systemName:)();
  static Font.Weight.bold.getter();
  uint64_t v9 = v8;
  uint64_t v10 = static Color.black.getter();
  swift_bridgeObjectRetain();
  uint64_t v11 = Image.init(systemName:)();
  static Font.Weight.bold.getter();
  uint64_t v13 = v12;
  swift_retain();
  uint64_t v14 = v5;
  if (!v5) {
    uint64_t v14 = static Color.clear.getter();
  }
  swift_retain();
  static Color.black.getter();
  uint64_t v15 = Color.opacity(_:)();
  swift_release();
  uint64_t v16 = static Animation.easeInOut(duration:)();
  uint64_t v17 = v5;
  if (!v5)
  {
    swift_retain();
    uint64_t v17 = v4;
  }
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v7;
  a2[1] = v3;
  a2[2] = v9;
  a2[3] = v10;
  a2[4] = v11;
  a2[5] = v3;
  a2[6] = v13;
  a2[7] = v4;
  a2[8] = v14;
  a2[9] = v15;
  a2[10] = v6;
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = v16;
  a2[14] = v17;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000F0228()
{
  long long v1 = *(_OWORD *)(v0 + 48);
  uint64_t v25[2] = *(_OWORD *)(v0 + 32);
  v25[3] = v1;
  uint64_t v26 = *(void *)(v0 + 64);
  long long v2 = *(_OWORD *)(v0 + 16);
  v25[0] = *(_OWORD *)v0;
  v25[1] = v2;
  uint64_t v3 = static Alignment.center.getter();
  uint64_t v5 = v4;
  sub_1000EFFC8((uint64_t *)v25, &v16);
  uint64_t v6 = v16;
  long long v7 = v18;
  long long v8 = v20;
  uint64_t v9 = *(void *)v21;
  long long v11 = v22;
  uint64_t v10 = v23;
  long long v12 = v17;
  long long v13 = v19;
  long long v14 = *(_OWORD *)&v21[8];
  uint64_t v16 = v3;
  *(void *)&long long v17 = v5;
  *((void *)&v17 + 1) = v6;
  long long v18 = v12;
  long long v19 = v7;
  long long v20 = v13;
  *(_OWORD *)unsigned __int8 v21 = v8;
  *(void *)&v21[16] = v9;
  long long v22 = v14;
  long long v23 = v11;
  uint64_t v24 = v10;
  sub_100004010(&qword_1003869E0);
  sub_100009B18(&qword_1003869E8, &qword_1003869E0);
  View.accessibility(hidden:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000F0380()
{
  if (!*(void *)(v0 + 48)) {
    swift_retain();
  }
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_100004010(&qword_1003860B8);
  sub_1000E2294();
  View.accessibility(hidden:)();
  return swift_release();
}

uint64_t sub_1000F0460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = sub_100004010(&qword_1003869F8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  long long v12 = (char *)&v20 - v11;
  __chkstk_darwin(v10);
  long long v14 = (char *)&v20 - v13;
  uint64_t v15 = static Color.white.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v15;
  __int16 v22 = 256;
  uint64_t v23 = v28;
  char v24 = v29;
  uint64_t v25 = v30;
  char v26 = v31;
  long long v27 = v32;
  sub_100004010(&qword_1003860B8);
  sub_1000E2294();
  View.accessibility(hidden:)();
  swift_release();
  uint64_t v16 = *(void *)(a1 + 64);
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v16;
  __int16 v22 = 256;
  uint64_t v23 = v33;
  char v24 = v34;
  uint64_t v25 = v35;
  char v26 = v36;
  long long v27 = v37;
  View.accessibility(hidden:)();
  swift_release();
  sub_10000D2A0((uint64_t)v14, (uint64_t)v9, &qword_1003869F8);
  sub_10000D2A0((uint64_t)v12, (uint64_t)v6, &qword_1003869F8);
  uint64_t v17 = v20;
  sub_10000D2A0((uint64_t)v9, v20, &qword_1003869F8);
  uint64_t v18 = sub_100004010(&qword_100386A00);
  sub_10000D2A0((uint64_t)v6, v17 + *(int *)(v18 + 48), &qword_1003869F8);
  sub_10000950C((uint64_t)v12, &qword_1003869F8);
  sub_10000950C((uint64_t)v14, &qword_1003869F8);
  sub_10000950C((uint64_t)v6, &qword_1003869F8);
  return sub_10000950C((uint64_t)v9, &qword_1003869F8);
}

uint64_t sub_1000F06F4@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v8[2] = *(_OWORD *)(v1 + 32);
  v8[3] = v3;
  uint64_t v9 = *(void *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v4;
  *a1 = static Alignment.center.getter();
  a1[1] = v5;
  uint64_t v6 = sub_100004010(&qword_1003869F0);
  return sub_1000F0460((uint64_t)v8, (uint64_t)a1 + *(int *)(v6 + 44));
}

uint64_t sub_1000F0758()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RadarMetrics()
{
  return self;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.Presentation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000F088CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 2;
  if (v8 <= 2) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RadarMetrics.Presentation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000F0974);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1000F099C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000F09B8(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.Presentation()
{
  return &type metadata for RadarMetrics.Presentation;
}

unint64_t sub_1000F09E0()
{
  unint64_t result = qword_100386998;
  if (!qword_100386998)
  {
    sub_1000094C4(&qword_100386990);
    sub_1000F0A5C();
    sub_1000F0AB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386998);
  }
  return result;
}

unint64_t sub_1000F0A5C()
{
  unint64_t result = qword_1003869A0;
  if (!qword_1003869A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003869A0);
  }
  return result;
}

unint64_t sub_1000F0AB0()
{
  unint64_t result = qword_1003869A8;
  if (!qword_1003869A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003869A8);
  }
  return result;
}

unint64_t sub_1000F0B04()
{
  unint64_t result = qword_1003869B0;
  if (!qword_1003869B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003869B0);
  }
  return result;
}

unint64_t sub_1000F0B58()
{
  unint64_t result = qword_1003869C0;
  if (!qword_1003869C0)
  {
    sub_1000094C4(&qword_1003869B8);
    sub_1000F0BD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003869C0);
  }
  return result;
}

unint64_t sub_1000F0BD4()
{
  unint64_t result = qword_1003869C8;
  if (!qword_1003869C8)
  {
    sub_1000094C4(&qword_1003869D0);
    sub_100009B18(&qword_1003853A0, &qword_100385398);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003869C8);
  }
  return result;
}

uint64_t sub_1000F0C74@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  State.init(wrappedValue:)();
  *(unsigned char *)a5 = v15;
  *(void *)(a5 + 8) = v16;
  *(unsigned char *)(a5 + 16) = a1;
  uint64_t v10 = _s8SOSBuddy19TimelineViewContentVMa_0();
  uint64_t v11 = a5 + *(int *)(v10 + 40);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  long long v14 = (void *)(a5 + *(int *)(v10 + 44));
  *long long v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t sub_1000F0D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v93 = (char *)&WitnessTable - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = a1;
  uint64_t v7 = *(void *)(a1 - 8);
  a1 -= 8;
  uint64_t v97 = v7;
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_t v91 = (char *)&WitnessTable - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v76 = (char *)&WitnessTable - v11;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v77 = *(void *)(v12 - 8);
  __chkstk_darwin(v10);
  long long v14 = (char *)&WitnessTable - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v78 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v74 = (char *)&WitnessTable - v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v72 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v70 = (char *)&WitnessTable - v18;
  sub_1000094C4(&qword_100386BE0);
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v88 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  char v87 = (char *)&WitnessTable - v20;
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v107 = v21;
  int v108 = &protocol witness table for _RotationEffect;
  uint64_t v69 = v15;
  uint64_t v22 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v105 = WitnessTable;
  unint64_t v106 = &protocol witness table for _ScaleEffect;
  uint64_t v71 = v17;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = sub_100009B18(&qword_100386BE8, &qword_100386BE0);
  uint64_t v75 = v23;
  uint64_t v103 = v23;
  uint64_t v104 = v24;
  uint64_t v25 = v14;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = sub_1000F3E68(&qword_100386BF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v89 = v19;
  uint64_t v99 = v19;
  uint64_t v100 = v4;
  uint64_t v95 = v4;
  uint64_t v84 = v26;
  uint64_t v101 = v26;
  uint64_t v102 = v27;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v85 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v28 = __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v30 = (char *)&WitnessTable - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  long long v80 = (char *)&WitnessTable - v32;
  (*(void (**)(uint64_t))(v22 + *(int *)(a1 + 52)))(v31);
  int v33 = *(unsigned __int8 *)(v22 + 16);
  if (v33 == 1)
  {
    uint64_t v34 = *(void *)(v22 + 8);
    LOBYTE(v99) = *(unsigned char *)v22;
    uint64_t v100 = v34;
    sub_100004010(&qword_10037ED78);
    State.wrappedValue.getter();
  }
  static UnitPoint.center.getter();
  uint64_t v35 = v74;
  View.rotationEffect(_:anchor:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v25, v12);
  uint64_t v36 = v97;
  long long v37 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
  uint64_t v38 = v76;
  uint64_t v77 = v22;
  uint64_t v39 = v22;
  uint64_t v40 = v82;
  unsigned __int8 v73 = v37;
  v37(v76, v39, v82);
  uint64_t v90 = v12;
  uint64_t v83 = v21;
  uint64_t v81 = v27;
  long long v79 = v30;
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v40);
    uint64_t v42 = v72;
    uint64_t v43 = v71;
    uint64_t v44 = v70;
    uint64_t v45 = v69;
    uint64_t v46 = v35;
    goto LABEL_7;
  }
  uint64_t v41 = *((void *)v38 + 1);
  LOBYTE(v99) = *v38;
  uint64_t v100 = v41;
  sub_100004010(&qword_10037ED78);
  State.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v40);
  uint64_t v42 = v72;
  uint64_t v43 = v71;
  uint64_t v44 = v70;
  uint64_t v45 = v69;
  uint64_t v46 = v35;
  if ((v98 & 1) == 0)
  {
LABEL_7:
    uint64_t v47 = v40;
    goto LABEL_8;
  }
  uint64_t v47 = v40;
LABEL_8:
  static UnitPoint.center.getter();
  View.scaleEffect(_:anchor:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v46, v45);
  static Animation.easeInOut(duration:)();
  uint64_t v48 = v77;
  uint64_t v49 = *(void *)(v77 + 8);
  LOBYTE(v99) = *(unsigned char *)v77;
  uint64_t v100 = v49;
  sub_100004010(&qword_10037ED78);
  State.wrappedValue.getter();
  LOBYTE(v99) = v98;
  uint64_t v50 = v87;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
  uint64_t v52 = v93;
  uint64_t v51 = v94;
  uint64_t v53 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v48 + *(int *)(v47 + 40), v95);
  double v54 = v91;
  v73(v91, v48, v47);
  uint64_t v55 = v97;
  unint64_t v56 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  uint64_t v57 = swift_allocObject();
  uint64_t v58 = v83;
  *(void *)(v57 + 16) = v90;
  *(void *)(v57 + 24) = v58;
  (*(void (**)(unint64_t, char *, uint64_t))(v55 + 32))(v57 + v56, v54, v47);
  uint64_t v59 = v79;
  uint64_t v60 = v89;
  uint64_t v61 = v84;
  uint64_t v62 = v81;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v50, v60);
  uint64_t v99 = v60;
  uint64_t v100 = v53;
  uint64_t v101 = v61;
  uint64_t v102 = v62;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v64 = v80;
  uint64_t v65 = OpaqueTypeMetadata2;
  sub_1000A7320(v59, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  int v66 = *(void (**)(char *, uint64_t))(v85 + 8);
  v66(v59, v65);
  sub_1000A7320(v64, v65, OpaqueTypeConformance2);
  return ((uint64_t (*)(char *, uint64_t))v66)(v64, v65);
}

uint64_t sub_1000F177C()
{
  return swift_release();
}

uint64_t sub_1000F1810@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  int v34 = a1;
  uint64_t v37 = a6;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v33 = type metadata accessor for PeriodicTimelineSchedule();
  __chkstk_darwin(v33);
  long long v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = _s8SOSBuddy19TimelineViewContentVMa_0();
  uint64_t v32 = sub_1000F3E68(qword_100386B58, (void (*)(uint64_t))&type metadata accessor for PeriodicTimelineSchedule);
  uint64_t v16 = type metadata accessor for TimelineView();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v29 - v21;
  static Date.now.getter();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  PeriodicTimelineSchedule.init(from:by:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v31;
  *(void *)(v23 + 16) = v30;
  *(void *)(v23 + 24) = v24;
  *(unsigned char *)(v23 + 32) = v34;
  *(void *)(v23 + 40) = v35;
  *(void *)(v23 + 48) = v36;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1000ECAA8((uint64_t)v14, (uint64_t)sub_1000F35F0, v23, v33, v15, v32, WitnessTable);
  uint64_t v38 = WitnessTable;
  uint64_t v26 = swift_getWitnessTable();
  sub_1000A7320(v20, v16, v26);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  sub_1000A7320(v22, v16, v26);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v16);
}

uint64_t sub_1000F1BA0@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v19[0] = a2;
  v19[1] = a4;
  uint64_t v6 = type metadata accessor for Date();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s8SOSBuddy19TimelineViewContentVMa_0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v19 - v14;
  sub_100004010(qword_10037ED80);
  TimelineView.Context.date.getter();
  swift_retain();
  sub_1000F0C74(a1, (uint64_t)v8, v19[0], a3, (uint64_t)v13);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1000A7320(v13, v9, WitnessTable);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  sub_1000A7320(v15, v9, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t sub_1000F1D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F1810(*v2, *((void *)v2 + 1), *((void *)v2 + 2), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_1000F1DA4@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v23 = a1;
  uint64_t v7 = sub_100004010(qword_10037ED80);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = type metadata accessor for TimelineView.Context();
  uint64_t v19 = *(void *)(v17 - 8);
  uint64_t result = v17 - 8;
  if (*(void *)(v19 + 64) == v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v7);
    v25((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v20 = v27;
    sub_1000A7320(v14, a4, v27);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
    v21(v14, a4);
    sub_1000A7320(v16, a4, v20);
    return ((uint64_t (*)(char *, uint64_t))v21)(v16, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1000F1FE0(_OWORD *a1)
{
  double result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1000F2004(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

ValueMetadata *type metadata accessor for PseudoKeyframeFunction()
{
  return &type metadata for PseudoKeyframeFunction;
}

ValueMetadata *type metadata accessor for PseudoKeyframeFunction.Key()
{
  return &type metadata for PseudoKeyframeFunction.Key;
}

uint64_t destroy for RadarMetrics.WavesMetrics()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RadarMetrics.WavesMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.WavesMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RadarMetrics.WavesMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.WavesMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.WavesMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.WavesMetrics()
{
  return &type metadata for RadarMetrics.WavesMetrics;
}

ValueMetadata *type metadata accessor for RadarMetrics.TargetZoneMetrics()
{
  return &type metadata for RadarMetrics.TargetZoneMetrics;
}

ValueMetadata *type metadata accessor for RadarMetrics._CompactSessionExplorerCenterpieceView()
{
  return &type metadata for RadarMetrics._CompactSessionExplorerCenterpieceView;
}

ValueMetadata *type metadata accessor for RadarMetrics._CompactSessionCenterpieceView()
{
  return &type metadata for RadarMetrics._CompactSessionCenterpieceView;
}

ValueMetadata *type metadata accessor for RadarMetrics._CenterpieceView()
{
  return &type metadata for RadarMetrics._CenterpieceView;
}

uint64_t sub_1000F2550()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F256C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F2588()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RadarMetrics._DeviceFontSize()
{
  return &type metadata for RadarMetrics._DeviceFontSize;
}

unsigned char *storeEnumTagSinglePayload for PseudoKeyframeFunction.Function(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F2680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PseudoKeyframeFunction.Function()
{
  return &type metadata for PseudoKeyframeFunction.Function;
}

uint64_t destroy for RadarMetrics.WavesConstMetrics()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for RadarMetrics.WavesConstMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.WavesConstMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RadarMetrics.WavesConstMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.WavesConstMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.WavesConstMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.WavesConstMetrics()
{
  return &type metadata for RadarMetrics.WavesConstMetrics;
}

uint64_t _s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t _s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *_s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for RadarMetrics.CenterpieceMetrics()
{
  return &type metadata for RadarMetrics.CenterpieceMetrics;
}

unint64_t sub_1000F2D08()
{
  unint64_t result = qword_100386A08;
  if (!qword_100386A08)
  {
    sub_1000094C4(&qword_100386A10);
    sub_100009B18(&qword_1003869E8, &qword_1003869E0);
    sub_1000F3E68(&qword_10037F200, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A08);
  }
  return result;
}

unint64_t sub_1000F2DDC()
{
  unint64_t result = qword_100386A18;
  if (!qword_100386A18)
  {
    sub_1000094C4(&qword_1003869F8);
    sub_1000E2294();
    sub_1000F3E68(&qword_10037F200, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A18);
  }
  return result;
}

uint64_t sub_1000F2E88()
{
  return sub_100009B18(&qword_100386A20, &qword_100386A28);
}

unint64_t sub_1000F2EC8()
{
  unint64_t result = qword_100386A30;
  if (!qword_100386A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A30);
  }
  return result;
}

uint64_t sub_1000F2F1C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000F2F40()
{
  unint64_t result = qword_100386A38;
  if (!qword_100386A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A38);
  }
  return result;
}

unint64_t sub_1000F2F98()
{
  unint64_t result = qword_100386A40;
  if (!qword_100386A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A40);
  }
  return result;
}

unint64_t sub_1000F2FF4()
{
  unint64_t result = qword_100386A58;
  if (!qword_100386A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A58);
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.TargetMetrics()
{
  return &type metadata for RadarMetrics.TargetMetrics;
}

ValueMetadata *type metadata accessor for RadarMetrics.TicksMetrics()
{
  return &type metadata for RadarMetrics.TicksMetrics;
}

uint64_t destroy for RadarMetrics.CenterpieceSymbol()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for RadarMetrics.CenterpieceSymbol(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RadarMetrics.CenterpieceSymbol(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RadarMetrics.CenterpieceSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for RadarMetrics.CenterpieceSymbol()
{
  return &type metadata for RadarMetrics.CenterpieceSymbol;
}

unint64_t sub_1000F3230()
{
  unint64_t result = qword_100386A60;
  if (!qword_100386A60)
  {
    sub_1000094C4(&qword_100386A50);
    sub_100009B18(&qword_100386A68, &qword_100386A48);
    sub_100009B18(&qword_10037F1E0, &qword_10037F1E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386A60);
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.TickCircleEffect()
{
  return &type metadata for RadarMetrics.TickCircleEffect;
}

uint64_t sub_1000F3308(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t sub_1000F3340(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000F3384(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for RockingView()
{
  return sub_100006BAC();
}

ValueMetadata *type metadata accessor for RadarMetrics.NudgeMetrics()
{
  return &type metadata for RadarMetrics.NudgeMetrics;
}

uint64_t sub_1000F3470()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F34B4()
{
  return sub_100009B18(&qword_100386B38, &qword_100386B40);
}

unint64_t sub_1000F34F4()
{
  unint64_t result = qword_100386B48;
  if (!qword_100386B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386B48);
  }
  return result;
}

unint64_t sub_1000F354C()
{
  unint64_t result = qword_100386B50;
  if (!qword_100386B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386B50);
  }
  return result;
}

uint64_t _s8SOSBuddy19TimelineViewContentVMa_0()
{
  return sub_100006BAC();
}

uint64_t sub_1000F35B8()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F35F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F1BA0(*(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_1000F3600()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000F3638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F1DA4(a1, *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

uint64_t sub_1000F3648()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000F36F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 44);
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000F3810(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

uint64_t sub_1000F38A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  return a1;
}

uint64_t sub_1000F3970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000F3A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000F3AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  swift_release();
  return a1;
}

uint64_t sub_1000F3B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F3BB0);
}

uint64_t sub_1000F3BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 44));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1000F3C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F3C88);
}

uint64_t sub_1000F3C88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 40);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000F3D48()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000F3E24()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F3E68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F3EB0()
{
  unint64_t v1 = (int *)(_s8SOSBuddy19TimelineViewContentVMa_0() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  uint64_t v7 = v6 + v1[12];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000F3FB8()
{
  _s8SOSBuddy19TimelineViewContentVMa_0();

  return sub_1000F177C();
}

uint64_t sub_1000F403C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t (*sub_1000F41B8())()
{
  return j__swift_endAccess;
}

void sub_1000F4214(uint64_t a1)
{
  uint64_t v56 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = _s8SOSBuddy4DataVMa_1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_100386E38);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v52 = (uint64_t)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v50 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v50 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v50 - v18;
  uint64_t v55 = v1;
  uint64_t v20 = v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  swift_beginAccess();
  sub_1000F6978(v20, (uint64_t)v19);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v57 = v5;
  unsigned int v22 = v21(v19, 1, v5);
  uint64_t v23 = &unk_10037D000;
  double v54 = v4;
  if (v22)
  {
    sub_1000F69E0((uint64_t)v19);
    uint64_t v24 = v57;
    uint64_t v25 = v58;
  }
  else
  {
    uint64_t v53 = v21;
    sub_1000F6C30((uint64_t)v19, (uint64_t)v8);
    sub_1000F69E0((uint64_t)v19);
    uint64_t v26 = sub_1000F4A60();
    unint64_t v28 = v27;
    sub_1000F6A40((uint64_t)v8);
    if (qword_10037DD78 != -1) {
      swift_once();
    }
    sub_10000FD84(v59, (uint64_t)qword_1003A9940);
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(void *)&long long v62 = v51;
      *(_DWORD *)uint64_t v31 = 136380675;
      v50[1] = v31 + 4;
      swift_bridgeObjectRetain();
      v65[0] = sub_1001B3178(v26, v28, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "QuestionnaireProgressTiming: previous event for %{private}s was not concluded, resetting", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v23 = (void *)&unk_10037D000;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v24 = v57;
    uint64_t v25 = v58;
    uint64_t v21 = v53;
  }
  long long v32 = *(_OWORD *)(v56 + 24);
  long long v62 = *(_OWORD *)(v56 + 8);
  long long v63 = v32;
  uint64_t v64 = *(void *)(v56 + 40);
  sub_1000F4C40(&v62, (uint64_t)v17);
  swift_beginAccess();
  sub_1000F6A9C((uint64_t)v17, v20);
  swift_endAccess();
  sub_1000F6978(v20, (uint64_t)v14);
  unsigned int v33 = v21(v14, 1, v24);
  sub_1000F69E0((uint64_t)v14);
  uint64_t v34 = v23[431];
  if (v33 == 1)
  {
    if (v34 != -1) {
      swift_once();
    }
    sub_10000FD84(v59, (uint64_t)qword_1003A9940);
    sub_1000F6B04((uint64_t)&v63, (uint64_t)v65);
    swift_retain();
    sub_1000F6B6C(v65);
    swift_retain();
    sub_1000F6B6C(v65);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      LOBYTE(v60) = BYTE8(v62);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v60 = sub_1001B3178(v38, v39, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000F6B9C(v65);
      swift_release();
      sub_1000F6B9C(v65);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "QuestionnaireProgressTiming: ignoring Appeared event for %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_1000F6B9C(v65);
      swift_release();
      sub_1000F6B9C(v65);
    }
  }
  else
  {
    uint64_t v53 = v21;
    if (v34 != -1) {
      swift_once();
    }
    uint64_t v40 = v59;
    uint64_t v41 = sub_10000FD84(v59, (uint64_t)qword_1003A9940);
    uint64_t v42 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v54, v41, v40);
    swift_retain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136380675;
      uint64_t v46 = v52;
      sub_1000F6978(v20, v52);
      if (v53((char *)v46, 1, v24) == 1)
      {
        swift_release();
        __break(1u);
      }
      else
      {
        uint64_t v47 = sub_1000F4A60();
        unint64_t v49 = v48;
        sub_1000F6A40(v46);
        uint64_t v61 = sub_1001B3178(v47, v49, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "QuestionnaireProgressTiming: started tracking page event for %{private}s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v58 + 8))(v54, v59);
      }
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v42, v59);
    }
  }
}

uint64_t sub_1000F4A60()
{
  uint64_t v1 = _s8SOSBuddy4DataVMa_1(0);
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)(v0 + *(int *)(v1 + 32));
  uint64_t v4 = (void *)v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v0 + *(int *)(v2 + 20))) {
      uint64_t v6 = 82;
    }
    else {
      uint64_t v6 = 69;
    }
    unint64_t v7 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v6);
    v8._uint64_t countAndFlagsBits = 45;
    v8._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 0x697473657551205DLL;
    v10._uint64_t object = (void *)0xED0000203D206E6FLL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = v5;
    v11._uint64_t object = v4;
    String.append(_:)(v11);
  }
  else
  {
    if (*(unsigned char *)(v0 + *(int *)(v1 + 20))) {
      uint64_t v12 = 82;
    }
    else {
      uint64_t v12 = 69;
    }
    unint64_t v13 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v12);
    v14._uint64_t countAndFlagsBits = 45;
    v14._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 8285;
    v16._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    uint64_t v17 = (uint64_t *)(v0 + *(int *)(v2 + 28));
    uint64_t v18 = *v17;
    uint64_t v19 = (void *)v17[1];
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v18;
    v20._uint64_t object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
  }
  return 91;
}

uint64_t sub_1000F4C40@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v8 = 0xE500000000000000;
  uint64_t v9 = 0x6F72746E49;
  switch(a1[8])
  {
    case 1:
      goto LABEL_7;
    case 2:
      unint64_t v8 = 0xE800000000000000;
      uint64_t v9 = 0x6E6F697473657551;
      goto LABEL_7;
    case 3:
      unint64_t v8 = 0xE800000000000000;
      uint64_t v9 = 0x646E65536F747541;
LABEL_7:
      static DispatchTime.now()();
      uint64_t v13 = *(void *)(*(void *)a1 + 264);
      char v14 = *(unsigned char *)(v13 + 32);
      uint64_t v15 = *(void *)(v13 + 88);
      sub_1000F6B04((uint64_t)(a1 + 16), (uint64_t)v22);
      sub_1000F6B04((uint64_t)v22, (uint64_t)v23);
      if (v23[0])
      {
        uint64_t v17 = *(void *)(v23[0] + 16);
        uint64_t v16 = *(void *)(v23[0] + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v16 = 0;
      }
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(a2, v7, v4);
      uint64_t v18 = (int *)_s8SOSBuddy4DataVMa_1(0);
      *(unsigned char *)(a2 + v18[5]) = v14;
      *(void *)(a2 + v18[6]) = v15;
      uint64_t v19 = (uint64_t *)(a2 + v18[7]);
      *uint64_t v19 = v9;
      v19[1] = v8;
      Swift::String v20 = (void *)(a2 + v18[8]);
      *Swift::String v20 = v17;
      v20[1] = v16;
      uint64_t v21 = (void *)(a2 + v18[9]);
      *uint64_t v21 = 0;
      v21[1] = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v18 - 1) + 56))(a2, 0, 1, v18);
      break;
    default:
      uint64_t v10 = _s8SOSBuddy4DataVMa_1(0);
      Swift::String v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      uint64_t result = v11(a2, 1, 1, v10);
      break;
  }
  return result;
}

void sub_1000F4EC4(uint64_t a1)
{
  uint64_t v3 = sub_100004010(&qword_100386E38);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v88 - v7;
  uint64_t v9 = _s8SOSBuddy4DataVMa_1(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v88 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v88 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v88 - v17;
  __chkstk_darwin(v16);
  Swift::String v20 = (char *)&v88 - v19;
  uint64_t v89 = v1;
  uint64_t v21 = v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  swift_beginAccess();
  sub_1000F6978(v21, (uint64_t)v8);
  unsigned int v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v22(v8, 1, v9) != 1)
  {
    sub_1000F6BCC((uint64_t)v8, (uint64_t)v20);
    long long v30 = *(_OWORD *)(a1 + 24);
    long long v93 = *(_OWORD *)(a1 + 8);
    long long v94 = v30;
    uint64_t v95 = *(void *)(a1 + 40);
    sub_1000F4C40(&v93, (uint64_t)v6);
    uint64_t v31 = v20;
    if (v22(v6, 1, v9) == 1)
    {
      sub_1000F69E0((uint64_t)v6);
      if (qword_10037DD78 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10000FD84(v32, (uint64_t)qword_1003A9940);
      sub_1000F6B04((uint64_t)&v94, (uint64_t)v91);
      swift_retain();
      sub_1000F6B6C(v91);
      swift_retain();
      sub_1000F6B6C(v91);
      unsigned int v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        v96[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315138;
        LOBYTE(v92[0]) = BYTE8(v93);
        uint64_t v36 = String.init<A>(describing:)();
        v92[0] = sub_1001B3178(v36, v37, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1000F6B9C(v91);
        swift_release();
        sub_1000F6B9C(v91);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "QuestionnaireProgressTiming: ignoring Concluded event for %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v38 = (uint64_t)v31;
LABEL_24:
        sub_1000F6A40(v38);
        return;
      }
      swift_release();

      sub_1000F6B9C(v91);
      swift_release();
      sub_1000F6B9C(v91);
LABEL_23:
      uint64_t v38 = (uint64_t)v31;
      goto LABEL_24;
    }
    uint64_t v39 = (uint64_t)v18;
    sub_1000F6BCC((uint64_t)v6, (uint64_t)v18);
    uint64_t v40 = sub_1000F4A60();
    uint64_t v42 = v41;
    uint64_t v43 = sub_1000F4A60();
    if (v40 == v43 && v42 == v44)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
      {
        if (qword_10037DD78 != -1) {
          swift_once();
        }
        uint64_t v46 = type metadata accessor for Logger();
        sub_10000FD84(v46, (uint64_t)qword_1003A9940);
        sub_1000F6C30((uint64_t)v18, (uint64_t)v15);
        uint64_t v47 = v20;
        uint64_t v48 = v88;
        sub_1000F6C30((uint64_t)v20, v88);
        unint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = swift_slowAlloc();
          uint64_t v89 = swift_slowAlloc();
          v91[0] = v89;
          *(_DWORD *)uint64_t v51 = 136380931;
          uint64_t v52 = sub_1000F4A60();
          v96[0] = sub_1001B3178(v52, v53, v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000F6A40((uint64_t)v15);
          *(_WORD *)(v51 + 12) = 2081;
          uint64_t v54 = sub_1000F4A60();
          v96[0] = sub_1001B3178(v54, v55, v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000F6A40(v48);
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "QuestionnaireProgressTiming: mismatched page concluded event for [%{private}s], expected [%{private}s], ignoring", (uint8_t *)v51, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_1000F6A40(v48);
          sub_1000F6A40((uint64_t)v15);
        }
        sub_1000F6A40(v39);
        uint64_t v38 = (uint64_t)v47;
        goto LABEL_24;
      }
    }
    uint64_t v31 = v20;
    if (BYTE8(v93) != 2
      || (sub_1000F6B04((uint64_t)&v94, (uint64_t)v92), sub_1000F6B04((uint64_t)v92, (uint64_t)v96), !v96[0])
      || *(unsigned __int8 *)(v96[0] + 32) - 1 < 2)
    {
LABEL_22:
      sub_1000F5A84();
      sub_1000F6A40((uint64_t)v18);
      goto LABEL_23;
    }
    if (!*(unsigned char *)(v96[0] + 32))
    {
      uint64_t v56 = v93;
      swift_beginAccess();
      uint64_t v57 = *(void *)(v56 + 48);
      if (!*(void *)(v57 + 16)) {
        goto LABEL_22;
      }
      uint64_t v58 = swift_retain_n();
      uint64_t v59 = sub_1001BECD0(v58);
      if ((v60 & 1) == 0)
      {
        swift_release_n();
        goto LABEL_22;
      }
      uint64_t v61 = (unsigned __int8 *)(*(void *)(v57 + 56) + 16 * v59);
      uint64_t v62 = *v61;
      uint64_t v63 = *((void *)v61 + 1);
      swift_retain();
      swift_release();
      if (v63)
      {
        switch(v62)
        {
          case 1:
          case 2:
          case 3:
          case 4:
            swift_release();
            goto LABEL_46;
          default:
            swift_retain();
            uint64_t v77 = sub_1000F41B8();
            long long v79 = v78;
            if (!v22(v78, 1, v9))
            {
              uint64_t v80 = *(void *)(v63 + 24);
              uint64_t v81 = &v79[*(int *)(v9 + 36)];
              *(void *)uint64_t v81 = *(void *)(v63 + 16);
              *((void *)v81 + 1) = v80;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
            }
            ((void (*)(uint64_t *, void))v77)(v91, 0);
            swift_release();
            swift_release_n();
            uint64_t v31 = v20;
            break;
        }
        goto LABEL_22;
      }
LABEL_46:
      swift_release();
      goto LABEL_22;
    }
    uint64_t v64 = *(unsigned __int8 *)(v96[0] + 64);
    if ((v64 | 2) != 3) {
      goto LABEL_22;
    }
    uint64_t v65 = v93;
    swift_beginAccess();
    uint64_t v66 = *(void *)(v65 + 64);
    if (!*(void *)(v66 + 16)) {
      goto LABEL_22;
    }
    uint64_t v67 = sub_1001BEB10(v64);
    if ((v68 & 1) == 0) {
      goto LABEL_22;
    }
    sub_1000A30C0(*(void *)(v66 + 56) + 32 * v67, (uint64_t)v91);
    swift_retain();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_46;
    }
    int v69 = v90;
    if (v64 == 3)
    {
      uint64_t v70 = sub_1000F41B8();
      uint64_t v72 = v82;
      if (!v22(v82, 1, v9))
      {
        unint64_t v73 = 0xD00000000000001ALL;
        unint64_t v74 = 0xD000000000000010;
        uint64_t v75 = "SwitchedFromRSAToEmergency";
        uint64_t v76 = "ContinuedWithRSA";
        goto LABEL_52;
      }
    }
    else
    {
      if (v64 != 1) {
        goto LABEL_46;
      }
      uint64_t v70 = sub_1000F41B8();
      uint64_t v72 = v71;
      if (!v22(v71, 1, v9))
      {
        unint64_t v73 = 0xD00000000000001ALL;
        unint64_t v74 = 0xD000000000000016;
        uint64_t v75 = "SwitchedFromEmergencyToRSA";
        uint64_t v76 = "ContinuedWithEmergency";
LABEL_52:
        uint64_t v83 = v75 - 32;
        uint64_t v84 = v76 - 32;
        if (!v69) {
          unint64_t v73 = v74;
        }
        unint64_t v85 = (unint64_t)v84 | 0x8000000000000000;
        unint64_t v86 = (unint64_t)v83 | 0x8000000000000000;
        char v87 = (unint64_t *)&v72[*(int *)(v9 + 36)];
        if (v69) {
          unint64_t v85 = v86;
        }
        unint64_t *v87 = v73;
        v87[1] = v85;
        swift_bridgeObjectRelease();
      }
    }
    ((void (*)(uint64_t *, void))v70)(v91, 0);
    swift_release();
    uint64_t v31 = v20;
    goto LABEL_22;
  }
  sub_1000F69E0((uint64_t)v8);
  if (qword_10037DD78 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10000FD84(v23, (uint64_t)qword_1003A9940);
  long long v24 = *(_OWORD *)(a1 + 24);
  long long v93 = *(_OWORD *)(a1 + 8);
  long long v94 = v24;
  uint64_t v95 = *(void *)(a1 + 40);
  sub_1000F6B04((uint64_t)&v94, (uint64_t)v91);
  swift_retain();
  sub_1000F6B6C(v91);
  swift_retain();
  sub_1000F6B6C(v91);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v27 = 136315138;
    LOBYTE(v92[0]) = BYTE8(v93);
    uint64_t v28 = String.init<A>(describing:)();
    v92[0] = sub_1001B3178(v28, v29, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000F6B9C(v91);
    swift_release();
    sub_1000F6B9C(v91);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "QuestionnaireProgressTiming: untracked page concluded for %s, ignoring", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_1000F6B9C(v91);
    swift_release();
    sub_1000F6B9C(v91);
  }
}

uint64_t sub_1000F5A84()
{
  uint64_t v1 = sub_100004010(&qword_100386E38);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v17[-v6];
  __chkstk_darwin(v5);
  uint64_t v9 = &v17[-v8];
  uint64_t v10 = v0 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  swift_beginAccess();
  sub_1000F6978(v10, (uint64_t)v9);
  uint64_t v11 = _s8SOSBuddy4DataVMa_1(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  uint64_t result = sub_1000F69E0((uint64_t)v9);
  if (v14 != 1)
  {
    sub_1000F6978(v10, (uint64_t)v7);
    uint64_t result = v13(v7, 1, v11);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      unint64_t v16 = sub_1000F5C90();
      sub_1000F6A40((uint64_t)v7);
      sub_1001B6D38(3, v16);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
      swift_beginAccess();
      sub_1000F6A9C((uint64_t)v4, v10);
      return swift_endAccess();
    }
  }
  return result;
}

unint64_t sub_1000F5C90()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004010(&qword_1003826A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002B31C0;
  *(void *)(inited + 32) = 0x6570795465676170;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v7 = _s8SOSBuddy4DataVMa_1(0);
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "responseTime");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  static DispatchTime.now()();
  unint64_t v8 = DispatchTime.uptimeNanoseconds.getter();
  if (DispatchTime.uptimeNanoseconds.getter() < v8
    && (unint64_t v9 = DispatchTime.uptimeNanoseconds.getter(), result = DispatchTime.uptimeNanoseconds.getter(), v9 < result))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(NSNumber *)(inited + 72) = UInt64._bridgeToObjectiveC()();
    unint64_t v11 = sub_100283ACC(inited);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = v11;
    sub_1002699E8((uint64_t)v12, 0x5465636976726573, 0xEB00000000657079, isUniquelyReferenced_nonNull_native);
    unint64_t v14 = v23;
    swift_bridgeObjectRelease();
    Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = v14;
    sub_1002699E8((uint64_t)isa, 0x6E6F697473657571, 0xEF6449657269616ELL, v16);
    unint64_t v17 = v23;
    swift_bridgeObjectRelease();
    if (*(void *)(v1 + *(int *)(v7 + 32) + 8))
    {
      NSString v18 = String._bridgeToObjectiveC()();
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v23 = v17;
      sub_1002699E8((uint64_t)v18, 0x6E6F697473657571, 0xEA00000000006449, v19);
      unint64_t v17 = v23;
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v1 + *(int *)(v7 + 36) + 8))
    {
      NSString v20 = String._bridgeToObjectiveC()();
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v23 = v17;
      sub_1002699E8((uint64_t)v20, 0xD000000000000010, 0x80000001002CE2C0, v21);
      unint64_t v17 = v23;
      swift_bridgeObjectRelease();
    }
    return v17;
  }
  return result;
}

uint64_t sub_1000F5FF8()
{
  swift_release();
  sub_1000F69E0(v0 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data);

  return swift_deallocClassInstance();
}

uint64_t sub_1000F6064()
{
  return type metadata accessor for AnalyticsQuestionnaireProgressTiming(0);
}

uint64_t type metadata accessor for AnalyticsQuestionnaireProgressTiming(uint64_t a1)
{
  return sub_1000497F4(a1, (uint64_t *)&unk_100386C30);
}

void sub_1000F608C()
{
  sub_1000F6134();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000F6134()
{
  if (!qword_100386C40)
  {
    _s8SOSBuddy4DataVMa_1(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100386C40);
    }
  }
}

uint64_t _s8SOSBuddy4DataVMa_1(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100386DF0);
}

void *sub_1000F61AC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    unint64_t v11 = (void *)((char *)a1 + v9);
    NSString v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *unint64_t v11 = *v12;
    v11[1] = v13;
    unint64_t v14 = (void *)((char *)a1 + v10);
    uint64_t v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *unint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    NSString v18 = (void *)((char *)a1 + v17);
    char v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *NSString v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000F62CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F6364(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  unint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  unint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)(a1 + v16);
  NSString v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F6434(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  unint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *unint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  unint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *unint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F6540(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000F65E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  unint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *unint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F66BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F66D0);
}

uint64_t sub_1000F66D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000F6794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F67A8);
}

uint64_t sub_1000F67A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000F6868()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000F6920(uint64_t result)
{
  uint64_t v2 = *v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_currentQuestionnaireId;
  *(void *)uint64_t v2 = *(void *)(*(void *)(result + 264) + 88);
  *(unsigned char *)(v2 + 8) = 0;
  return result;
}

void sub_1000F6944(unsigned char *a1)
{
  if (*a1) {
    sub_1000F4EC4((uint64_t)a1);
  }
  else {
    sub_1000F4214((uint64_t)a1);
  }
}

uint64_t sub_1000F6978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100386E38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F69E0(uint64_t a1)
{
  uint64_t v2 = sub_100004010(&qword_100386E38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F6A40(uint64_t a1)
{
  uint64_t v2 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F6A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100386E38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F6B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100386E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000F6B6C(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_1000F6B9C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000F6BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F6C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SessionLeadingView()
{
  return &type metadata for SessionLeadingView;
}

uint64_t sub_1000F6CA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F6CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    uint64_t result = sub_100078E0C(0, *(void *)(a1 + 200));
    if (result)
    {
      type metadata accessor for BannerAppearanceModel();
      sub_1000F8A94(&qword_10037F098, (void (*)(uint64_t))type metadata accessor for BannerAppearanceModel);
      uint64_t v4 = EnvironmentObject.init()();
      uint64_t v6 = v5;
      type metadata accessor for UIMetrics();
      sub_1000F8A94((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      uint64_t v7 = EnvironmentObject.init()();
      uint64_t v9 = v8;
      unsigned __int8 v10 = static Edge.Set.trailing.getter();
      uint64_t result = EdgeInsets.init(_all:)();
      uint64_t v15 = v10;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v15 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v4 = 1;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v11;
    *(void *)(a2 + 48) = v12;
    *(void *)(a2 + 56) = v13;
    *(void *)(a2 + 64) = v14;
    *(unsigned char *)(a2 + 72) = 0;
  }
  else
  {
    type metadata accessor for BannerAppearanceModel();
    sub_1000F8A94(&qword_10037F098, (void (*)(uint64_t))type metadata accessor for BannerAppearanceModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F6E4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F6CC0(*v1, a1);
}

ValueMetadata *type metadata accessor for SessionLeadingContentView()
{
  return &type metadata for SessionLeadingContentView;
}

unint64_t sub_1000F6E68()
{
  unint64_t result = qword_100386E48;
  if (!qword_100386E48)
  {
    sub_1000094C4(&qword_100386E50);
    sub_1000F6EDC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386E48);
  }
  return result;
}

unint64_t sub_1000F6EDC()
{
  unint64_t result = qword_100386E58;
  if (!qword_100386E58)
  {
    sub_1000094C4(&qword_100386E60);
    sub_1000A37E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386E58);
  }
  return result;
}

uint64_t sub_1000F6F58()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F6F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v113[1] = a2;
  uint64_t v144 = a4;
  uint64_t v135 = sub_100004010(&qword_100385258);
  __chkstk_darwin(v135);
  uint64_t v130 = (uint64_t)v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_100004010(&qword_100386E68);
  __chkstk_darwin(v142);
  uint64_t v143 = (uint64_t)v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_100004010(&qword_100386E70);
  __chkstk_darwin(v138);
  uint64_t v136 = (_OWORD *)((char *)v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v132 = sub_100004010(&qword_100386E78);
  __chkstk_darwin(v132);
  uint64_t v133 = (uint64_t)v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_100004010(&qword_100386E80);
  __chkstk_darwin(v139);
  uint64_t v134 = (char *)v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_100004010(&qword_100386E88);
  __chkstk_darwin(v141);
  uint64_t v137 = (char *)v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_100004010(&qword_100386E90);
  __chkstk_darwin(v127);
  uint64_t v129 = (uint64_t)v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SymbolVariants();
  uint64_t v118 = *(void *)(v13 - 8);
  uint64_t v119 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100004010(&qword_10037F140);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100004010(&qword_1003831D0);
  uint64_t v115 = *(void *)(v19 - 8);
  uint64_t v116 = v19;
  __chkstk_darwin(v19);
  uint64_t v114 = (char *)v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100004010(&qword_100386E98);
  uint64_t v120 = *(void *)(v21 - 8);
  uint64_t v121 = v21;
  __chkstk_darwin(v21);
  long long v117 = (char *)v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_100004010(&qword_100386EA0);
  __chkstk_darwin(v122);
  char v124 = (char *)v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100004010(&qword_100386EA8);
  uint64_t v24 = __chkstk_darwin(v126);
  uint64_t v123 = (char *)v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v125 = (uint64_t)v113 - v26;
  uint64_t v131 = sub_100004010(&qword_100386EB0);
  __chkstk_darwin(v131);
  uint64_t v128 = (char *)v113 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100004010(&qword_10037F0C8);
  __chkstk_darwin(v28 - 8);
  long long v30 = (char *)v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100004010(&qword_100386EB8);
  __chkstk_darwin(v31 - 8);
  long long v140 = (char *)v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    type metadata accessor for UIMetrics();
    sub_1000F8A94((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    EnvironmentObject.error()();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v34 = a3[9];
  uint64_t v33 = a3[10];
  sub_100008F88(a3 + 6, v34);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v33 + 16))(v167, v34, v33);
  if (!a1)
  {
LABEL_15:
    type metadata accessor for BannerAppearanceModel();
    sub_1000F8A94(&qword_10037F098, (void (*)(uint64_t))type metadata accessor for BannerAppearanceModel);
    EnvironmentObject.error()();
    __break(1u);
    JUMPOUT(0x1000F8640);
  }
  uint64_t v35 = a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
  swift_beginAccess();
  sub_10000D2A0(v35, (uint64_t)v30, &qword_10037F0C8);
  uint64_t v36 = type metadata accessor for ConnectionAssitantBannerMode.Mode();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v30, 1, v36) != 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_10002D24C((uint64_t)v30);
        goto LABEL_8;
      case 2u:
      case 4u:
LABEL_8:
        type metadata accessor for ConnectionClosedModel(0);
        sub_1000F8A94(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
        uint64_t v61 = EnvironmentObject.init()();
        uint64_t v134 = v62;
        uint64_t v135 = v61;
        type metadata accessor for ConnectivityModel();
        sub_1000F8A94(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
        uint64_t v63 = EnvironmentObject.init()();
        uint64_t v133 = v64;
        type metadata accessor for GuidanceModel(0);
        sub_1000F8A94(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
        uint64_t v65 = EnvironmentObject.init()();
        uint64_t v67 = v66;
        type metadata accessor for OrientationModel();
        sub_1000F8A94(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
        uint64_t v68 = EnvironmentObject.init()();
        uint64_t v70 = v69;
        type metadata accessor for StewieModel();
        sub_1000F8A94(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
        uint64_t v71 = EnvironmentObject.init()();
        uint64_t v73 = v72;
        type metadata accessor for UIMetrics();
        sub_1000F8A94((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
        uint64_t v74 = EnvironmentObject.init()();
        uint64_t v145 = v135;
        long long v146 = v134;
        uint64_t v147 = v63;
        uint64_t v148 = v133;
        uint64_t v149 = v65;
        uint64_t v150 = v67;
        uint64_t v151 = v68;
        uint64_t v152 = v70;
        uint64_t v153 = v71;
        uint64_t v154 = v73;
        uint64_t v155 = v74;
        uint64_t v156 = v75;
        long long v157 = xmmword_1002B9A10;
        char v158 = 0;
        goto LABEL_10;
      case 3u:
        uint64_t v98 = a3[9];
        uint64_t v99 = a3[10];
        sub_100008F88(a3 + 6, v98);
        (*(void (**)(uint64_t, uint64_t))(v99 + 40))(v98, v99);
        static Font.Weight.regular.getter();
        uint64_t v100 = type metadata accessor for Font.Design();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v18, 1, 1, v100);
        uint64_t v101 = static Font.system(size:weight:design:)();
        sub_10000950C((uint64_t)v18, &qword_10037F140);
        uint64_t v102 = v130;
        sub_1000814FC(v101, v130);
        swift_release();
        sub_10000D2A0(v102, v133, &qword_100385258);
        swift_storeEnumTagMultiPayload();
        sub_1000F8780();
        sub_1000F8818(&qword_100386EF8, &qword_100385258, (void (*)(void))sub_10008486C);
        uint64_t v103 = (uint64_t)v134;
        _ConditionalContent<>.init(storage:)();
        sub_10000D2A0(v103, (uint64_t)v136, &qword_100386E80);
        swift_storeEnumTagMultiPayload();
        sub_100004010(&qword_100386F08);
        sub_1000F86E0();
        sub_1000F89CC();
        uint64_t v104 = (uint64_t)v137;
        _ConditionalContent<>.init(storage:)();
        sub_10000950C(v103, &qword_100386E80);
        sub_10000D2A0(v104, v143, &qword_100386E88);
        swift_storeEnumTagMultiPayload();
        sub_1000F8664();
        uint64_t v37 = (uint64_t)v140;
        _ConditionalContent<>.init(storage:)();
        sub_10000950C(v104, &qword_100386E88);
        sub_10000950C(v102, &qword_100385258);
        goto LABEL_11;
      case 5u:
        type metadata accessor for ConnectionClosedModel(0);
        sub_1000F8A94(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
        uint64_t v76 = EnvironmentObject.init()();
        uint64_t v134 = v77;
        uint64_t v135 = v76;
        type metadata accessor for ConnectivityModel();
        sub_1000F8A94(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
        uint64_t v78 = EnvironmentObject.init()();
        uint64_t v133 = v79;
        type metadata accessor for GuidanceModel(0);
        sub_1000F8A94(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
        uint64_t v80 = EnvironmentObject.init()();
        uint64_t v82 = v81;
        type metadata accessor for OrientationModel();
        sub_1000F8A94(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
        uint64_t v83 = EnvironmentObject.init()();
        uint64_t v85 = v84;
        type metadata accessor for StewieModel();
        sub_1000F8A94(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
        uint64_t v86 = EnvironmentObject.init()();
        uint64_t v88 = v87;
        type metadata accessor for UIMetrics();
        sub_1000F8A94((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
        uint64_t v89 = EnvironmentObject.init()();
        uint64_t v145 = v135;
        long long v146 = v134;
        uint64_t v147 = v78;
        uint64_t v148 = v133;
        uint64_t v149 = v80;
        uint64_t v150 = v82;
        uint64_t v151 = v83;
        uint64_t v152 = v85;
        uint64_t v153 = v86;
        uint64_t v154 = v88;
        uint64_t v155 = v89;
        uint64_t v156 = v90;
        long long v157 = xmmword_1002B9A00;
        char v158 = 1;
LABEL_10:
        sub_1000F8A40();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        _ConditionalContent<>.init(storage:)();
        char v91 = v166;
        long long v92 = v160;
        long long v93 = v136;
        _OWORD *v136 = v159;
        v93[1] = v92;
        long long v94 = v162;
        v93[2] = v161;
        v93[3] = v94;
        long long v95 = v164;
        v93[4] = v163;
        v93[5] = v95;
        v93[6] = v165;
        *((unsigned char *)v93 + 112) = v91;
        swift_storeEnumTagMultiPayload();
        sub_100004010(&qword_100386F08);
        sub_1000F86E0();
        sub_1000F89CC();
        uint64_t v96 = (uint64_t)v137;
        _ConditionalContent<>.init(storage:)();
        sub_10000D2A0(v96, v143, &qword_100386E88);
        swift_storeEnumTagMultiPayload();
        sub_1000F8664();
        uint64_t v37 = (uint64_t)v140;
        _ConditionalContent<>.init(storage:)();
        sub_10000950C(v96, &qword_100386E88);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_11;
      default:
        uint64_t v38 = Image.init(_internalSystemName:)();
        static Font.Weight.regular.getter();
        uint64_t v39 = type metadata accessor for Font.Design();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v18, 1, 1, v39);
        uint64_t v40 = static Font.system(size:weight:design:)();
        sub_10000950C((uint64_t)v18, &qword_10037F140);
        uint64_t KeyPath = swift_getKeyPath();
        *(void *)&long long v159 = v38;
        *((void *)&v159 + 1) = KeyPath;
        *(void *)&long long v160 = v40;
        static SymbolVariants.circle.getter();
        uint64_t v42 = sub_100004010(&qword_10037F1D8);
        unint64_t v43 = sub_10000C9A4();
        uint64_t v44 = v114;
        View.symbolVariant(_:)();
        uint64_t v45 = v119;
        uint64_t v46 = *(void (**)(char *, uint64_t))(v118 + 8);
        v46(v15, v119);
        swift_release();
        swift_release();
        swift_release();
        static SymbolVariants.fill.getter();
        *(void *)&long long v159 = v42;
        *((void *)&v159 + 1) = v43;
        swift_getOpaqueTypeConformance2();
        uint64_t v47 = v116;
        uint64_t v48 = v117;
        View.symbolVariant(_:)();
        v46(v15, v45);
        (*(void (**)(char *, uint64_t))(v115 + 8))(v44, v47);
        uint64_t v49 = static Color.white.getter();
        uint64_t v50 = static Color.red.getter();
        uint64_t v52 = v120;
        uint64_t v51 = v121;
        uint64_t v53 = (uint64_t)v124;
        (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v124, v48, v121);
        uint64_t v54 = (uint64_t *)(v53 + *(int *)(v122 + 36));
        *uint64_t v54 = v49;
        v54[1] = v50;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v51);
        LocalizedStringKey.init(stringLiteral:)();
        uint64_t v55 = Text.init(_:tableName:bundle:comment:)();
        uint64_t v57 = v56;
        LOBYTE(v45) = v58 & 1;
        sub_1000F88C8();
        uint64_t v59 = (uint64_t)v123;
        View.accessibility(label:)();
        sub_100033364(v55, v57, v45);
        swift_bridgeObjectRelease();
        sub_10000950C(v53, &qword_100386EA0);
        uint64_t v60 = v125;
        sub_10000D544(v59, v125, &qword_100386EA8);
        sub_10000D2A0(v60, v129, &qword_100386EA8);
        swift_storeEnumTagMultiPayload();
        sub_1000F8818(&qword_100386ED8, &qword_100386EA8, (void (*)(void))sub_1000F88C8);
        uint64_t v105 = (uint64_t)v128;
        _ConditionalContent<>.init(storage:)();
        uint64_t v107 = v143;
        uint64_t v106 = v144;
        uint64_t v109 = v136;
        uint64_t v108 = (uint64_t)v137;
        sub_10000950C(v60, &qword_100386EA8);
        sub_10000D2A0(v105, v133, &qword_100386EB0);
        swift_storeEnumTagMultiPayload();
        sub_1000F8780();
        sub_1000F8818(&qword_100386EF8, &qword_100385258, (void (*)(void))sub_10008486C);
        uint64_t v110 = (uint64_t)v134;
        _ConditionalContent<>.init(storage:)();
        sub_10000D2A0(v110, (uint64_t)v109, &qword_100386E80);
        swift_storeEnumTagMultiPayload();
        sub_100004010(&qword_100386F08);
        sub_1000F86E0();
        sub_1000F89CC();
        _ConditionalContent<>.init(storage:)();
        sub_10000950C(v110, &qword_100386E80);
        sub_10000D2A0(v108, v107, &qword_100386E88);
        swift_storeEnumTagMultiPayload();
        sub_1000F8664();
        char v111 = v140;
        _ConditionalContent<>.init(storage:)();
        uint64_t v112 = v108;
        uint64_t v37 = (uint64_t)v111;
        sub_10000950C(v112, &qword_100386E88);
        sub_10000950C(v105, &qword_100386EB0);
        goto LABEL_12;
    }
  }
  swift_storeEnumTagMultiPayload();
  sub_1000F8664();
  uint64_t v37 = (uint64_t)v140;
  _ConditionalContent<>.init(storage:)();
LABEL_11:
  uint64_t v106 = v144;
LABEL_12:
  sub_10000D544(v37, v106, &qword_100386EB8);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v167);
}

uint64_t sub_1000F8658@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F6F74(*(void *)v1, *(void *)(v1 + 8), *(void **)(v1 + 16), a1);
}

unint64_t sub_1000F8664()
{
  unint64_t result = qword_100386EC0;
  if (!qword_100386EC0)
  {
    sub_1000094C4(&qword_100386E88);
    sub_1000F86E0();
    sub_1000F89CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386EC0);
  }
  return result;
}

unint64_t sub_1000F86E0()
{
  unint64_t result = qword_100386EC8;
  if (!qword_100386EC8)
  {
    sub_1000094C4(&qword_100386E80);
    sub_1000F8780();
    sub_1000F8818(&qword_100386EF8, &qword_100385258, (void (*)(void))sub_10008486C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386EC8);
  }
  return result;
}

unint64_t sub_1000F8780()
{
  unint64_t result = qword_100386ED0;
  if (!qword_100386ED0)
  {
    sub_1000094C4(&qword_100386EB0);
    sub_1000F8818(&qword_100386ED8, &qword_100386EA8, (void (*)(void))sub_1000F88C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386ED0);
  }
  return result;
}

uint64_t sub_1000F8818(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    sub_1000F8A94(&qword_10037F200, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F88C8()
{
  unint64_t result = qword_100386EE0;
  if (!qword_100386EE0)
  {
    sub_1000094C4(&qword_100386EA0);
    sub_1000094C4(&qword_1003831D0);
    sub_1000094C4(&qword_10037F1D8);
    sub_10000C9A4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100009B18(&qword_100386EE8, &qword_100386EF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386EE0);
  }
  return result;
}

unint64_t sub_1000F89CC()
{
  unint64_t result = qword_100386F00;
  if (!qword_100386F00)
  {
    sub_1000094C4(&qword_100386F08);
    sub_1000F8A40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386F00);
  }
  return result;
}

unint64_t sub_1000F8A40()
{
  unint64_t result = qword_100386F10;
  if (!qword_100386F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386F10);
  }
  return result;
}

uint64_t sub_1000F8A94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F8AE8()
{
  unint64_t result = qword_100386F18;
  if (!qword_100386F18)
  {
    sub_1000094C4(&qword_100386EB8);
    sub_1000F8664();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100386F18);
  }
  return result;
}

void sub_1000F8B64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  [v2 lock];
  uint64_t v3 = *(void *)(v1 + 24);
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 24) = v3 + 1;
    [v2 unlock];
    if (qword_10037DDA0 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000FD84(v4, (uint64_t)qword_1003A99B8);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Keep alive counter: %{public}ld", v7, 0xCu);
    swift_slowDealloc();

    if (v3) {
      return;
    }
  }
  else
  {

    swift_release();
    if (v3) {
      return;
    }
  }
  id v8 = sub_1000F9D40(0xD000000000000011, 0x80000001002B9BA0, 0x76696C417065654BLL, 0xE900000000000065);
  uint64_t v9 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v8;
}

void sub_1000F8D1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  [v2 lock];
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 24) = v4;
    [v2 unlock];
    if (qword_10037DDA0 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000FD84(v5, (uint64_t)qword_1003A99B8);
  swift_retain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v8 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Keep alive counter: %{public}ld", v8, 0xCu);
    swift_slowDealloc();

    if (v4 > 0) {
      return;
    }
  }
  else
  {

    swift_release();
    if (v4 > 0) {
      return;
    }
  }
  sub_1000F8EA4();
}

uint64_t sub_1000F8EA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v0 + 32);
  if (v10)
  {
    uint64_t v42 = v7;
    uint64_t v11 = qword_10037DDA0;
    id v12 = v10;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000FD84(v13, (uint64_t)qword_1003A99B8);
    id v14 = v12;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      int v40 = v17;
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      aBlock[0] = v39;
      uint64_t v38 = v18;
      *(_DWORD *)uint64_t v18 = 136446210;
      id v19 = [v14 debugDescription:v18 + 4];
      os_log_t v37 = v15;
      uint64_t v20 = v9;
      uint64_t v21 = v1;
      id v22 = v19;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v5;
      uint64_t v24 = v6;
      uint64_t v25 = v2;
      uint64_t v26 = v3;
      uint64_t v27 = v23;
      unint64_t v29 = v28;

      uint64_t v1 = v21;
      uint64_t v9 = v20;
      uint64_t v30 = v27;
      uint64_t v3 = v26;
      uint64_t v2 = v25;
      uint64_t v6 = v24;
      uint64_t v5 = v41;
      uint64_t v43 = sub_1001B3178(v30, v29, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v31 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v40, "Releasing RBSAssertion: %{public}s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v7 = v42;
    [v14 invalidate];

    uint64_t v32 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = 0;
  }
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  uint64_t v33 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = (uint64_t)sub_1000F9314;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100207A1C;
  aBlock[3] = (uint64_t)&unk_100357260;
  uint64_t v34 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10007C914();
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_10004A6CC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1000F9314()
{
  id v0 = [self sharedApplication];
  [v0 terminateWithSuccess];
}

uint64_t sub_1000F9374()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeepAppAlive()
{
  return self;
}

id sub_1000F93D8()
{
  type metadata accessor for KeepAppAlive();
  uint64_t v0 = (void *)swift_allocObject();
  id result = [objc_allocWithZone((Class)NSLock) init];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = result;
  qword_100386F20 = (uint64_t)v0;
  return result;
}

uint64_t sub_1000F9434(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (qword_10037DDA0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000FD84(v8, (uint64_t)qword_1003A99B8);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain();
    sub_1001B3178(a3, a4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Acquiring BackgroundAssertion: '%{public}s'", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)(v5 + 16) = a3;
  *(void *)(v5 + 24) = a4;
  if (qword_10037DD68 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1000F8B64();
  swift_release();
  return v5;
}

uint64_t sub_1000F9644()
{
  uint64_t v1 = v0;
  if (qword_10037DDA0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A99B8);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v6 = *(void *)(v1 + 16);
    unint64_t v7 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Releasing BackgroundAssertion: '%{public}s'", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  if (qword_10037DD68 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1000F8D1C();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000F9848()
{
  sub_1000F9644();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BackgroundAssertion()
{
  return self;
}

uint64_t type metadata accessor for PreventSuspensionAssertion()
{
  return self;
}

uint64_t sub_1000F98C4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PreventSuspension()
{
  return self;
}

uint64_t sub_1000F9928()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = 0;
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9958);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    type metadata accessor for BackgroundActivityAgent();
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] init", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v1;
}

uint64_t sub_1000F9AF4()
{
  uint64_t v1 = v0;
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9958);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    type metadata accessor for BackgroundActivityAgent();
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  *(void *)(v1 + 16) = 0;
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000F9CD0()
{
  sub_1000F9AF4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BackgroundActivityAgent()
{
  return self;
}

uint64_t sub_1000F9D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F9D38()
{
  return swift_release();
}

id sub_1000F9D40(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_10037DDA0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000FD84(v7, (uint64_t)qword_1003A99B8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    id v45 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    swift_bridgeObjectRetain();
    sub_1001B3178(a1, a2, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_1001B3178(a3, a4, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Acquiring RBSAssertion: '%{public}s' for '%{public}s'", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = getpid();
  id v12 = [self targetWithPid:v11];
  id v13 = [self mainBundle];
  id v14 = [v13 bundleIdentifier];

  if (v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [self attributeWithDomain:v15 name:v16];

  sub_100004010(&qword_1003913B0);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1002B3AF0;
  *(void *)(v18 + 32) = v17;
  id v45 = (id)v18;
  specialized Array._endMutation()();
  id v19 = objc_allocWithZone((Class)RBSAssertion);
  swift_bridgeObjectRetain();
  id v20 = v12;
  id v21 = v17;
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10001E6FC(0, &qword_100387300);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [v19 initWithExplanation:v22 target:v20 attributes:isa];

  id v45 = 0;
  unsigned int v25 = [v24 acquireWithError:&v45];
  id v26 = v45;
  if (v25)
  {
    id v27 = v24;
    id v28 = v26;
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v44 = v21;
      os_log_t v31 = (uint8_t *)swift_slowAlloc();
      id v45 = (id)swift_slowAlloc();
      *(_DWORD *)os_log_t v31 = 136446210;
      id v32 = [v27 debugDescription];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      sub_1001B3178(v33, v35, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "RBSAssertion acquired: %{public}s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    id v36 = v45;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    os_log_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      id v45 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      swift_errorRetain();
      sub_100004010(&qword_10037FFB0);
      uint64_t v40 = String.init<A>(describing:)();
      sub_1001B3178(v40, v41, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Error acquiring RBSAssertion assertion: %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  return v27;
}

void sub_1000FA490()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0x80000001002C5A40;
    uint64_t v2 = 0xD000000000000012;
  }
  qword_100387308 = v2;
  unk_100387310 = v4;
}

uint64_t sub_1000FA534(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9940);
}

uint64_t sub_1000FA558(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9958);
}

uint64_t sub_1000FA570(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9970);
}

uint64_t sub_1000FA590(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9988);
}

uint64_t sub_1000FA5A4(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A99A0);
}

uint64_t sub_1000FA5C4(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A99B8);
}

uint64_t sub_1000FA5E8(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A99D0);
}

uint64_t sub_1000FA608(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A99E8);
}

uint64_t sub_1000FA620(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A00);
}

uint64_t sub_1000FA644(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A18);
}

uint64_t sub_1000FA670(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A30);
}

uint64_t *sub_1000FA690(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1000FA6F4(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A48);
}

uint64_t sub_1000FA710(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A60);
}

uint64_t sub_1000FA728(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A78);
}

uint64_t sub_1000FA748(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9A90);
}

uint64_t sub_1000FA76C(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9AA8);
}

uint64_t sub_1000FA78C(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9AC0);
}

uint64_t sub_1000FA7A8(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9AD8);
}

uint64_t sub_1000FA7D0(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9AF0);
}

uint64_t sub_1000FA7EC(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9B08);
}

uint64_t sub_1000FA818(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9B20);
}

uint64_t sub_1000FA838(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9B38);
}

uint64_t sub_1000FA85C(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9B50);
}

uint64_t sub_1000FA884(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9B68);
}

uint64_t sub_1000FA89C(uint64_t a1)
{
  return sub_1000FA8B0(a1, qword_1003A9B80);
}

uint64_t sub_1000FA8B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000FA690(v3, a2);
  sub_10000FD84(v3, (uint64_t)a2);
  if (qword_10037DD70 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

SOSBuddy::ConnectionAssistantEarth::LightAngle __swiftcall ConnectionAssistantEarth.LightAngle.init(angle:perpendicularAngle:)(Swift::Float angle, Swift::Float_optional *perpendicularAngle)
{
  result.perpendicularAngle.is_nil = (char)perpendicularAngle;
  result.angle = angle;
  return result;
}

void *ConnectionAssistantEarth.init(sun:highlight:atmosphere:at:)@<X0>(float a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, __int16 a4@<W3>, unint64_t a5@<X4>, __int16 a6@<W5>, void *a7@<X8>, float a8@<S0>, double a9@<D1>, double a10@<D2>)
{
  sub_1000FBD58(a1, a2 & 1, a3, a4 & 0x1FF, a5, a6 & 0x1FF, __src, a8, a9, a10);
  return memcpy(a7, __src, 0x203uLL);
}

void ConnectionAssistantEarth.point(for:camera:)(double a1, double a2)
{
  float v3 = a1;
  float v4 = -90.0 - a2;
  float v5 = (float)((float)(v4 * 3.1416) / 180.0) + v2[8].f32[0];
  __float2 v6 = __sincosf_stret((float)(v3 * -3.1416) / 180.0);
  __float2 v7 = __sincosf_stret(v5);
  float v8 = v2[8].f32[1];
  *(float32x2_t *)v9.f32 = vsub_f32(*v2, vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)), v6.__cosval), v8));
  v9.f32[2] = v2[1].f32[0] - (float)(v6.__sinval * v8);
  v9.i32[3] = 0;
  ConnectionAssistantCamera.projectToViewport(point:)(v9);
}

double ConnectionAssistantEarth.direction(for:)(double a1, double a2)
{
  float v3 = a1;
  float v4 = -90.0 - a2;
  float v5 = (float)((float)(v4 * 3.1416) / 180.0) + *(float *)(v2 + 64);
  float cosval = __sincosf_stret((float)(v3 * -3.1416) / 180.0).__cosval;
  __float2 v7 = __sincosf_stret(v5);
  *(float *)&double v8 = cosval * v7.__cosval;
  *((float *)&v8 + 1) = cosval * v7.__sinval;
  return v8;
}

double static ConnectionAssistantEarth.direction(for:)(double a1, double a2)
{
  float v2 = a1;
  float v3 = -90.0 - a2;
  float v4 = (float)(v3 * 3.1416) / 180.0;
  float cosval = __sincosf_stret((float)(v2 * -3.1416) / 180.0).__cosval;
  __float2 v6 = __sincosf_stret(v4);
  *(float *)&double v7 = cosval * v6.__cosval;
  *((float *)&v7 + 1) = cosval * v6.__sinval;
  return v7;
}

double static ConnectionAssistantEarth.coordinate(for:)(__n128 a1)
{
  unint64_t v3 = a1.n128_u64[0];
  float v1 = asinf(a1.n128_f32[2]);
  atan2f(*((float *)&v3 + 1), *(float *)&v3);
  return -(float)((float)(v1 / 3.1416) * 180.0);
}

uint64_t ConnectionAssistantEarth.project(camera:)@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  LODWORD(a3) = *(_DWORD *)(v3 + 68);
  float32x4_t v27 = *(float32x4_t *)v3;
  sub_10028A004(a1, v28, *(float32x4_t *)v3, a3);
  uint64_t result = sub_10000D544((uint64_t)v28, (uint64_t)v29, &qword_100387318);
  char v7 = v31;
  if (v31)
  {
    int v8 = 0;
    float32x4_t v9 = 0uLL;
    float32x4_t v10 = 0uLL;
    float32x4_t v11 = 0uLL;
    float32x4_t v12 = 0uLL;
    long long v13 = 0uLL;
    long long v14 = 0uLL;
  }
  else
  {
    long long v13 = v29[0];
    long long v14 = v29[1];
    int v8 = v30;
    float32x4_t v9 = vaddq_f32(a1[15], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1[12], v27.f32[0]), a1[13], *(float32x2_t *)v27.f32, 1), a1[14], v27, 2));
    v9.i32[3] = 0;
    float32x4_t v15 = a1[8];
    float32x4_t v16 = a1[9];
    float32x4_t v17 = a1[10];
    float32x4_t v18 = a1[11];
    float32x4_t v19 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v3 + 16))), v16, *(float32x2_t *)(v3 + 16), 1), v17, *(float32x4_t *)(v3 + 16), 2));
    int32x4_t v20 = (int32x4_t)vmulq_f32(v19, v19);
    v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
    float32x2_t v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
    float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
    v20.i32[0] = vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).u32[0];
    float32x4_t v23 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v3 + 32))), v16, *(float32x2_t *)(v3 + 32), 1), v17, *(float32x4_t *)(v3 + 32), 2));
    int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
    v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
    float32x4_t v10 = vmulq_n_f32(v19, *(float *)v20.i32);
    *(float32x2_t *)v20.i8 = vrsqrte_f32((float32x2_t)v24.u32[0]);
    *(float32x2_t *)v20.i8 = vmul_f32(*(float32x2_t *)v20.i8, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8)));
    float32x4_t v11 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.i8, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8))).f32[0]);
    float32x4_t v25 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v3 + 48))), v16, *(float32x2_t *)(v3 + 48), 1), v17, *(float32x4_t *)(v3 + 48), 2));
    int32x4_t v26 = (int32x4_t)vmulq_f32(v25, v25);
    v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
    *(float32x2_t *)v16.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)));
    float32x4_t v12 = vmulq_n_f32(v25, vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32))).f32[0]);
  }
  *(float32x4_t *)a2 = v9;
  *(float32x4_t *)(a2 + 16) = v10;
  *(float32x4_t *)(a2 + 32) = v11;
  *(float32x4_t *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v13;
  *(_OWORD *)(a2 + 80) = v14;
  *(_DWORD *)(a2 + 96) = v8;
  *(unsigned char *)(a2 + 100) = v7;
  return result;
}

double ConnectionAssistantEarth.model.getter()
{
  v1.i64[0] = 0;
  v1.i32[3] = 0;
  float v2 = v0[4].f32[0];
  float32x4_t v3 = (float32x4_t)v0[4].u32[1];
  v4.i32[0] = 0;
  v4.i32[3] = 0;
  if (v2 != 0.0)
  {
    *(uint64_t *)((char *)v4.i64 + 4) = v0[4].u32[1];
    float32x4_t v9 = v4;
    v1.i32[2] = v0[4].i32[1];
    float32x4_t v10 = v1;
    float32x4_t v8 = (float32x4_t)v1.u32[2];
    __sincosf_stret(v2 * 0.5);
    simd_float4x4.init(_:)();
    float32x4_t v3 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v5.f32[0]), v9, *(float32x2_t *)v5.f32, 1), v10, v5, 2), (float32x4_t)xmmword_1002B72C0, v5, 3);
  }
  float32x4_t v6 = *v0;
  v6.i32[3] = 1.0;
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1002B9C10, v3.f32[0]), (float32x4_t)xmmword_1002B72A0, *(float32x2_t *)v3.f32, 1), (float32x4_t)xmmword_1002B9C00, v3, 2), v6, v3, 3).u64[0];
  return result;
}

void *ConnectionAssistantEarth.init(date:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1000FBF1C(a1, v4);
  return memcpy(a2, v4, 0x203uLL);
}

double sub_1000FAF7C()
{
  double result = 0.0000305175853;
  static ConnectionAssistantEarth.sunPosition = xmmword_1002B9C20;
  return result;
}

long long *ConnectionAssistantEarth.sunPosition.unsafeMutableAddressor()
{
  if (qword_10037DE40 != -1) {
    swift_once();
  }
  return &static ConnectionAssistantEarth.sunPosition;
}

double static ConnectionAssistantEarth.sunPosition.getter()
{
  if (qword_10037DE40 != -1) {
    swift_once();
  }
  return *(double *)&static ConnectionAssistantEarth.sunPosition;
}

void *ConnectionAssistantEarth.sunDistance.unsafeMutableAddressor()
{
  return &static ConnectionAssistantEarth.sunDistance;
}

float static ConnectionAssistantEarth.sunDistance.getter()
{
  return 0.1859;
}

double ConnectionAssistantConeRenderer.Parameters.lightDirection.getter(double a1, double a2)
{
  return a2;
}

double ConnectionAssistantEarth.LightDirection.atmosphereLightDirection.getter(double a1, double a2, double a3)
{
  return a3;
}

BOOL sub_1000FB058(__n128 *a1, __n128 *a2)
{
  return _s8SOSBuddy24ConnectionAssistantEarthV14LightDirectionV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

__n128 ConnectionAssistantEarth.lightDirection.getter()
{
  return v0[1];
}

float ConnectionAssistantEarth.radius.getter()
{
  return *(float *)(v0 + 68);
}

float ConnectionAssistantEarth.maximumAtmosphereRadiusScale.getter()
{
  return *(float *)(v0 + 72);
}

void ConnectionAssistantEarth.maximumAtmosphereRadiusScale.setter(float a1)
{
  *(float *)(v1 + 72) = a1;
}

uint64_t (*ConnectionAssistantEarth.maximumAtmosphereRadiusScale.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantEarth.opacity.getter()
{
  return *(float *)(v0 + 76);
}

void ConnectionAssistantEarth.opacity.setter(float a1)
{
  *(float *)(v1 + 76) = a1;
}

uint64_t (*ConnectionAssistantEarth.opacity.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantEarth.dot.getter@<Q0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 144);
  char v3 = *(unsigned char *)(v1 + 148);
  long long v4 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 112);
  long long v6 = *(_OWORD *)(v1 + 128);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = v2;
  *(unsigned char *)(a1 + 68) = v3;
  return result;
}

uint64_t ConnectionAssistantEarth.dot.setter(uint64_t a1)
{
  return sub_10000D544(a1, v1 + 80, &qword_10037FA80);
}

__n128 ConnectionAssistantEarth.cone.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 160);
  long long v4 = *(_OWORD *)(v1 + 176);
  uint64_t v2 = v1 + 160;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  __n128 result = *(__n128 *)(v2 + 80);
  long long v7 = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(__n128 *)(a1 + 80) = result;
  char v8 = *(unsigned char *)(v2 + 112);
  char v9 = *(unsigned char *)(v2 + 113);
  *(_OWORD *)(a1 + 96) = v7;
  *(unsigned char *)(a1 + 112) = v8;
  *(unsigned char *)(a1 + 113) = v9;
  return result;
}

uint64_t ConnectionAssistantEarth.cone.setter(uint64_t a1)
{
  return sub_10000D544(a1, v1 + 160, &qword_100387320);
}

uint64_t (*ConnectionAssistantEarth.cone.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantEarth.arrow.getter@<Q0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 352);
  char v3 = *(unsigned char *)(v1 + 356);
  long long v4 = *(_OWORD *)(v1 + 304);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 320);
  long long v6 = *(_OWORD *)(v1 + 336);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = v2;
  *(unsigned char *)(a1 + 68) = v3;
  return result;
}

uint64_t ConnectionAssistantEarth.arrow.setter(uint64_t a1)
{
  return sub_10000D544(a1, v1 + 288, &qword_100387328);
}

uint64_t (*ConnectionAssistantEarth.arrow.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

uint64_t ConnectionAssistantEarth.satellite.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10000D544(v1 + 368, (uint64_t)v4, &qword_10037E5B8);
  return sub_10000D544((uint64_t)v4, a1, &qword_10037E5B8);
}

uint64_t ConnectionAssistantEarth.satellite.setter(uint64_t a1)
{
  return sub_10000D544(a1, v1 + 368, &qword_10037E5B8);
}

uint64_t (*ConnectionAssistantEarth.satellite.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantEarth.Projection.ellipse.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[4];
  unint64_t v3 = v1[5].n128_u64[0];
  unint64_t v4 = v1[5].n128_u64[1];
  unsigned __int32 v5 = v1[6].n128_u32[0];
  *a1 = result;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = v4;
  a1[2].n128_u32[0] = v5;
  return result;
}

void *ConnectionAssistantEarth.init(position:lightDirection:equatorRotation:)@<X0>(void *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float a6@<S4>)
{
  sub_1000043BC((uint64_t)v18);
  float32x2_t v8 = (float32x2_t)vdup_n_s32(0x447A0000u);
  *(float32x2_t *)&long long v9 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a2.f32, v8)), v8);
  *((float *)&v9 + 2) = roundf(vmuls_lane_f32(1000.0, a2, 2)) / 1000.0;
  HIDWORD(v9) = 0;
  *(float32x2_t *)&long long v10 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a3.f32, v8)), v8);
  *((float *)&v10 + 2) = roundf(vmuls_lane_f32(1000.0, a3, 2)) / 1000.0;
  HIDWORD(v10) = 0;
  *(float32x2_t *)&long long v11 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a4.f32, v8)), v8);
  *((float *)&v11 + 2) = roundf(vmuls_lane_f32(1000.0, a4, 2)) / 1000.0;
  HIDWORD(v11) = 0;
  *(float32x2_t *)&long long v12 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a5.f32, v8)), v8);
  *((float *)&v12 + 2) = roundf(vmuls_lane_f32(1000.0, a5, 2)) / 1000.0;
  HIDWORD(v12) = 0;
  __src[0] = v9;
  __src[1] = v10;
  __src[2] = v11;
  __src[3] = v12;
  *(float *)&__src[4] = a6;
  *(void *)((char *)&__src[4] + 4) = 0x3FE000003CB7CB7DLL;
  HIDWORD(__src[4]) = 1065353216;
  memset(&__src[5], 0, 68);
  BYTE4(__src[9]) = 1;
  memset(&__src[10], 0, 112);
  LOWORD(__src[17]) = 256;
  memset(&__src[18], 0, 68);
  BYTE4(__src[22]) = 1;
  sub_10000D544((uint64_t)v18, (uint64_t)&__src[23], &qword_10037E5B8);
  return memcpy(a1, __src, 0x203uLL);
}

void *ConnectionAssistantEarth.init(eclipticSunAngle:lightDirection:)@<X0>(void *a1@<X8>, float a2@<S0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>)
{
  sub_1000FBB90(v7, a2, a3, a4, a5);
  return memcpy(a1, v7, 0x203uLL);
}

unint64_t ConnectionAssistantEarth.LightAngle.perpendicularAngle.getter(unsigned int a1, char a2)
{
  return a1 | ((unint64_t)(a2 & 1) << 32);
}

double sub_1000FB488()
{
  id v0 = [objc_allocWithZone((Class)GEOAlmanac) init];
  double v6 = 0.0;
  double v7 = 0.0;
  uint64_t v5 = 0;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v0 calculateGeocentricDirectionForSunX:&v7 Y:&v6 Z:&v5 date:isa];

  *(float *)&unsigned int v2 = v7;
  *(float *)&unsigned int v3 = v6;
  return COERCE_DOUBLE(__PAIR64__(v3, v2));
}

uint64_t sub_1000FB558(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x203uLL);
  memcpy(__dst, a2, 0x203uLL);
  return _s8SOSBuddy24ConnectionAssistantEarthV23__derived_struct_equalsySbAC_ACtFZ_0(v4, __dst) & 1;
}

BOOL _s8SOSBuddy24ConnectionAssistantEarthV14LightDirectionV23__derived_struct_equalsySbAE_AEtFZ_0(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6 = 0;
  while (1)
  {
    __n128 v23 = a1;
    float v9 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    __n128 v24 = a4;
    float v10 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    BOOL v7 = v9 == v10;
    if (v6 == 2) {
      break;
    }
    while (1)
    {
      ++v6;
      if (v7) {
        break;
      }
      BOOL v7 = 0;
      BOOL result = 0;
      if (v6 == 2) {
        return result;
      }
    }
  }
  if (v9 != v10) {
    return 0;
  }
  uint64_t v11 = 0;
  while (1)
  {
    __n128 v21 = a2;
    float v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    __n128 v22 = a5;
    float v14 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    BOOL v12 = v13 == v14;
    if (v11 == 2) {
      break;
    }
    while (1)
    {
      ++v11;
      if (v12) {
        break;
      }
      BOOL v12 = 0;
      BOOL result = 0;
      if (v11 == 2) {
        return result;
      }
    }
  }
  if (v13 != v14) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    __n128 v19 = a3;
    float v17 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    __n128 v20 = a6;
    float v18 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    BOOL v16 = v17 == v18;
    if (v15 == 2) {
      break;
    }
    while (1)
    {
      ++v15;
      if (v16) {
        break;
      }
      if (v15 == 2) {
        return 0;
      }
      BOOL v16 = 0;
    }
  }
  return v17 == v18;
}

uint64_t _s8SOSBuddy24ConnectionAssistantEarthV23__derived_struct_equalsySbAC_ACtFZ_0(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = &a2[17].n128_u8[1];
  uint64_t v6 = &a1[17].n128_u8[1];
  __n128 v7 = *a1;
  __n128 v8 = *a2;
  while (1)
  {
    __n128 v65 = v7;
    float v11 = *(float *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    __n128 v66 = v8;
    float v12 = *(float *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    BOOL v9 = v11 == v12;
    if (v4 == 2) {
      break;
    }
    while (1)
    {
      ++v4;
      if (v9) {
        break;
      }
      BOOL v9 = 0;
      uint64_t result = 0;
      if (v4 == 2) {
        return result;
      }
    }
  }
  if (v11 != v12
    || !_s8SOSBuddy24ConnectionAssistantEarthV14LightDirectionV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3])|| a1[4].n128_f32[0] != a2[4].n128_f32[0]|| a1[4].n128_f32[1] != a2[4].n128_f32[1]|| a1[4].n128_f32[2] != a2[4].n128_f32[2]|| a1[4].n128_f32[3] != a2[4].n128_f32[3])
  {
    return 0;
  }
  if (a1[9].n128_u8[4])
  {
    if (!a2[9].n128_u8[4]) {
      return 0;
    }
  }
  else
  {
    if (a2[9].n128_u8[4]) {
      return 0;
    }
    int v13 = a1[9].n128_i32[0];
    uint64_t v14 = a2[5].n128_i64[0];
    uint64_t v15 = a2[5].n128_i64[1];
    uint64_t v16 = a2[6].n128_i64[0];
    uint64_t v17 = a2[7].n128_i64[0];
    uint64_t v18 = a2[7].n128_i64[1];
    uint64_t v19 = a2[8].n128_i64[0];
    uint64_t v20 = a2[8].n128_i64[1];
    int v21 = a2[9].n128_i32[0];
    uint64_t v22 = a1[8].n128_i64[0];
    uint64_t v23 = a1[8].n128_i64[1];
    __n128 v24 = a1[7];
    uint64_t v25 = a1[5].n128_i64[1];
    uint64_t v26 = a1[6].n128_i64[0];
    v107[0] = a1[5].n128_u64[0];
    v107[1] = v25;
    v107[2] = v26;
    __n128 v108 = v24;
    uint64_t v109 = v22;
    uint64_t v110 = v23;
    int v111 = v13;
    v112[0] = v14;
    v112[1] = v15;
    v112[2] = v16;
    v112[4] = v17;
    v112[5] = v18;
    v112[6] = v19;
    v112[7] = v20;
    int v113 = v21;
    if (!_s8SOSBuddy30ConnectionAssistantLocationDotV23__derived_struct_equalsySbAC_ACtFZ_0((float *)v107, (float *)v112))return 0; {
  }
    }
  if (*v6)
  {
    if (!*v5) {
      return 0;
    }
  }
  else
  {
    if (*v5) {
      return 0;
    }
    __n128 v27 = a1[15];
    __n128 v28 = a1[16];
    char v29 = a1[17].n128_i8[0];
    uint64_t v30 = a2[10].n128_i64[0];
    uint64_t v31 = a2[10].n128_i64[1];
    uint64_t v32 = a2[11].n128_i64[0];
    uint64_t v33 = a2[11].n128_i64[1];
    uint64_t v34 = a2[12].n128_i64[0];
    uint64_t v35 = a2[13].n128_i64[0];
    uint64_t v36 = a2[13].n128_i64[1];
    uint64_t v37 = a2[14].n128_i64[0];
    __n128 v38 = a2[15];
    __n128 v39 = a2[16];
    char v40 = a2[17].n128_i8[0];
    uint64_t v42 = a1[13].n128_i64[1];
    uint64_t v41 = a1[14].n128_i64[0];
    uint64_t v43 = a1[13].n128_i64[0];
    uint64_t v45 = a1[11].n128_i64[1];
    uint64_t v44 = a1[12].n128_i64[0];
    uint64_t v46 = a1[11].n128_i64[0];
    __n128 v89 = a1[10];
    uint64_t v91 = v45;
    uint64_t v90 = v46;
    int v92 = v44;
    uint64_t v94 = v42;
    uint64_t v93 = v43;
    int v95 = v41;
    __n128 v96 = v27;
    __n128 v97 = v28;
    char v98 = v29 & 1;
    v99[1] = v31;
    v99[0] = v30;
    v99[3] = v33;
    v99[2] = v32;
    int v100 = v34;
    uint64_t v102 = v36;
    uint64_t v101 = v35;
    int v103 = v37;
    __n128 v104 = v38;
    __n128 v105 = v39;
    char v106 = v40 & 1;
    if (!_s8SOSBuddy23ConnectionAssistantConeV23__derived_struct_equalsySbAC_ACtFZ_0((float *)&v89, (float *)v99)) {
      return 0;
    }
  }
  if (v6[83])
  {
    if (!v5[83]) {
      return 0;
    }
  }
  else
  {
    if (v5[83]) {
      return 0;
    }
    int v47 = a1[22].n128_i32[0];
    uint64_t v49 = a2[18].n128_i64[0];
    uint64_t v48 = a2[18].n128_i64[1];
    uint64_t v51 = a2[19].n128_i64[0];
    uint64_t v50 = a2[19].n128_i64[1];
    uint64_t v53 = a2[20].n128_i64[0];
    uint64_t v52 = a2[20].n128_i64[1];
    uint64_t v54 = a2[21].n128_i64[0];
    uint64_t v55 = a2[21].n128_i64[1];
    int v56 = a2[22].n128_i32[0];
    uint64_t v57 = a1[21].n128_i64[0];
    uint64_t v58 = a1[21].n128_i64[1];
    uint64_t v60 = a1[20].n128_i64[0];
    uint64_t v59 = a1[20].n128_i64[1];
    uint64_t v62 = a1[19].n128_i64[0];
    uint64_t v61 = a1[19].n128_i64[1];
    uint64_t v64 = a1[18].n128_i64[0];
    uint64_t v63 = a1[18].n128_i64[1];
    v79[0] = v64;
    v79[1] = v63;
    v79[2] = v62;
    v79[3] = v61;
    v79[4] = v60;
    int v80 = v59;
    uint64_t v82 = v58;
    uint64_t v81 = v57;
    int v83 = v47;
    v84[0] = v49;
    v84[1] = v48;
    v84[2] = v51;
    v84[3] = v50;
    v84[4] = v53;
    int v85 = v52;
    uint64_t v87 = v55;
    uint64_t v86 = v54;
    int v88 = v56;
    if (!_s8SOSBuddy24ConnectionAssistantArrowV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v79, (uint64_t)v84)) {
      return 0;
    }
  }
  sub_10000D544((uint64_t)&a1[23], (uint64_t)v72, &qword_10037E5B8);
  sub_10000D544((uint64_t)&a2[23], (uint64_t)v73, &qword_10037E5B8);
  sub_10000D544((uint64_t)v72, (uint64_t)v74, &qword_10037E5B8);
  if (sub_1000FC340((uint64_t)v74) != 1)
  {
    sub_10000D544((uint64_t)v73, (uint64_t)v71, &qword_10037E5B8);
    if (sub_1000FC340((uint64_t)v71) != 1)
    {
      sub_10000D544((uint64_t)v72, (uint64_t)v67, &qword_10037E5B8);
      v75[6] = v67[6];
      v75[7] = v67[7];
      v75[8] = v67[8];
      __int16 v76 = v68;
      v75[3] = v67[3];
      void v75[4] = v67[4];
      v75[5] = v67[5];
      v75[0] = v67[0];
      v75[1] = v67[1];
      v75[2] = v67[2];
      sub_10000D544((uint64_t)v73, (uint64_t)v69, &qword_10037E5B8);
      v77[6] = v69[6];
      v77[7] = v69[7];
      v77[8] = v69[8];
      __int16 v78 = v70;
      v77[2] = v69[2];
      v77[3] = v69[3];
      v77[4] = v69[4];
      v77[5] = v69[5];
      v77[0] = v69[0];
      v77[1] = v69[1];
      if (_s8SOSBuddy28ConnectionAssistantSatelliteV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v75, (uint64_t)v77)) {
        return 1;
      }
    }
    return 0;
  }
  sub_10000D544((uint64_t)v73, (uint64_t)v71, &qword_10037E5B8);
  uint64_t result = sub_1000FC340((uint64_t)v71);
  if (result != 1) {
    return 0;
  }
  return result;
}

void *sub_1000FBB90@<X0>(void *a1@<X8>, float a2@<S0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>)
{
  if (qword_10037DE40 != -1) {
    swift_once();
  }
  __float2 v7 = __sincosf_stret(a2);
  float v8 = *((float *)&static ConnectionAssistantEarth.sunPosition + 2) + 0.0;
  float32x2_t v9 = vadd_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)), (float32x2_t)vdup_n_s32(0x3E3E5BE6u)), *(float32x2_t *)&static ConnectionAssistantEarth.sunPosition);
  sub_1000043BC((uint64_t)v19);
  float32x2_t v10 = (float32x2_t)vdup_n_s32(0x447A0000u);
  *(float32x2_t *)&long long v11 = vdiv_f32(vrnda_f32(vmul_f32(v9, v10)), v10);
  *((float *)&v11 + 2) = roundf(v8 * 1000.0) / 1000.0;
  HIDWORD(v11) = 0;
  *(float32x2_t *)&long long v12 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a3.f32, v10)), v10);
  *((float *)&v12 + 2) = roundf(vmuls_lane_f32(1000.0, a3, 2)) / 1000.0;
  HIDWORD(v12) = 0;
  *(float32x2_t *)&long long v13 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a4.f32, v10)), v10);
  *((float *)&v13 + 2) = roundf(vmuls_lane_f32(1000.0, a4, 2)) / 1000.0;
  HIDWORD(v13) = 0;
  *(float32x2_t *)&long long v14 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a5.f32, v10)), v10);
  *((float *)&v14 + 2) = roundf(vmuls_lane_f32(1000.0, a5, 2)) / 1000.0;
  HIDWORD(v14) = 0;
  __src[0] = v11;
  __src[1] = v12;
  __src[2] = v13;
  __src[3] = v14;
  __src[4] = xmmword_1002B9C30;
  memset(&__src[5], 0, 68);
  BYTE4(__src[9]) = 1;
  memset(&__src[10], 0, 112);
  LOWORD(__src[17]) = 256;
  memset(&__src[18], 0, 68);
  BYTE4(__src[22]) = 1;
  sub_10000D544((uint64_t)v19, (uint64_t)&__src[23], &qword_10037E5B8);
  return memcpy(a1, __src, 0x203uLL);
}

void *sub_1000FBD58@<X0>(float a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, __int16 a4@<W3>, unint64_t a5@<X4>, __int16 a6@<W5>, void *a7@<X8>, float a8@<S0>, double a9@<D1>, double a10@<D2>)
{
  float v12 = a9;
  float v13 = (float)(v12 * -3.1416) / 180.0;
  if (a2) {
    float v14 = 0.0;
  }
  else {
    float v14 = v13 + a1;
  }
  unint64_t v15 = HIDWORD(a3);
  if ((a4 & 0x100) != 0) {
    float v16 = a8;
  }
  else {
    float v16 = *(float *)&a3;
  }
  if ((a4 & 0x100) != 0)
  {
    *(float *)&unint64_t v15 = a1;
    char v17 = a2;
  }
  else
  {
    char v17 = a4;
  }
  float v18 = v13 + *(float *)&v15;
  if (v17) {
    float v18 = 0.0;
  }
  unint64_t v19 = HIDWORD(a5);
  float v20 = *(float *)&a5;
  if ((a6 & 0x100) != 0)
  {
    float v20 = a8;
    *(float *)&unint64_t v19 = a1;
    char v21 = a2;
  }
  else
  {
    char v21 = a6;
  }
  float v22 = v13 + *(float *)&v19;
  if (v21) {
    float v22 = 0.0;
  }
  float v39 = v22;
  float v23 = -90.0 - a10;
  float v24 = (float)(v23 * 3.1416) / 180.0;
  float v25 = v24 + v20;
  __float2 v26 = __sincosf_stret(v18);
  __float2 v27 = __sincosf_stret(v24 + v16);
  float v28 = v24 + a8;
  __float2 v29 = __sincosf_stret(v28);
  __float2 v30 = __sincosf_stret(v14);
  v31.f32[0] = v30.__cosval * v29.__cosval;
  v31.f32[1] = v30.__cosval * v29.__sinval;
  v31.i64[1] = LODWORD(v30.__sinval);
  v32.f32[0] = v27.__cosval * v26.__cosval;
  v32.f32[1] = v27.__sinval * v26.__cosval;
  v32.i64[1] = LODWORD(v26.__sinval);
  float32x4_t v37 = v31;
  float32x4_t v38 = v32;
  __float2 v33 = __sincosf_stret(v39);
  __float2 v34 = __sincosf_stret(v25);
  v35.f32[0] = v34.__cosval * v33.__cosval;
  v35.f32[1] = v34.__sinval * v33.__cosval;
  v35.i64[1] = LODWORD(v33.__sinval);
  sub_1000FBB90(__src, v28, v37, v38, v35);
  return memcpy(a7, __src, 0x203uLL);
}

void sub_1000FBF1C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100004010(&qword_100380418);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  Class isa = 0;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v6, v7);
  }
  id v10 = [objc_allocWithZone((Class)GEOSolarEclipticCelestialBodyData) initWithDate:isa body:3];

  if (v10)
  {
    [v10 longitude];
    *(float *)&double v11 = v11;
    float v12 = (float)(*(float *)&v11 * 3.1416) / 180.0;
    *(double *)v13.i64 = sub_1000FB488();
    sub_1000FBB90(v14, v12, v13, v13, v13);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    memcpy(a2, v14, 0x203uLL);
  }
  else
  {
    __break(1u);
  }
}

void *initializeWithCopy for ConnectionAssistantEarth(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x203uLL);
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 515)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 514) = 0;
    *(_WORD *)(result + 512) = 0;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 515) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth()
{
  return &type metadata for ConnectionAssistantEarth;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth.LightDirection()
{
  return &type metadata for ConnectionAssistantEarth.LightDirection;
}

__n128 initializeWithCopy for ConnectionAssistantEarth.Projection(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth.Projection(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 100)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth.Projection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 100) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth.Projection()
{
  return &type metadata for ConnectionAssistantEarth.Projection;
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectionAssistantEarth.LightAngle(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth.LightAngle(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth.LightAngle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth.LightAngle()
{
  return &type metadata for ConnectionAssistantEarth.LightAngle;
}

uint64_t sub_1000FC340(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 146)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000FC35C(uint64_t a1, double a2, double a3)
{
  if (a2 == 0.0 && a3 == 0.0) {
    return 0x6F72657A2ELL;
  }
  v5._uint64_t countAndFlagsBits = 10366;
  v5._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  __exp10((double)a1);
  Double.write<A>(to:)();
  v6._uint64_t countAndFlagsBits = 8236;
  v6._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  Double.write<A>(to:)();
  v7._uint64_t countAndFlagsBits = 41;
  v7._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t sub_1000FC458(double a1)
{
  sub_100004010(&qword_100387450);
  uint64_t result = Binding.wrappedValue.getter();
  if (v8 != a1)
  {
    if (qword_10037DE10 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000FD84(v4, (uint64_t)qword_1003A9B08);
    sub_1000FE6C8(v1);
    Swift::String v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134349312;
      Binding.wrappedValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000FE758(v1);
      *(_WORD *)(v7 + 12) = 2050;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "WrappedUITextView: updateHeight from %{public}f to %{public}f", (uint8_t *)v7, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      sub_1000FE758(v1);
    }

    return Binding.wrappedValue.setter();
  }
  return result;
}

id sub_1000FC650()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)UITextView) init];
  [v2 setAlwaysBounceVertical:0];
  [v2 setAutocorrectionType:1];
  char v3 = self;
  id v4 = v2;
  id v5 = [v3 clearColor];
  [v4 setBackgroundColor:v5];

  [v4 setScrollEnabled:0];
  id v6 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleTitle3];
  id v7 = [self preferredFontDescriptorWithTextStyle:UIFontTextStyleTitle3];
  double v8 = self;
  [v7 pointSize];
  id v9 = [v8 systemFontOfSize:];
  id v10 = [v6 scaledFontForFont:v9];

  [v4 setFont:v10];
  [v4 setShowsHorizontalScrollIndicator:0];
  [v4 setShowsVerticalScrollIndicator:0];
  long long v19 = *v1;
  sub_100004010(&qword_100387430);
  Binding.wrappedValue.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setText:v11];

  id v12 = [v4 textContainer];
  [v12 setLineFragmentPadding:0.0];

  id v13 = [v4 textContainer];
  [v13 setWidthTracksTextView:1];

  id v14 = [v4 textContainer];
  [v14 setHeightTracksTextView:0];

  [v4 setTextContainerInset:UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right];
  LODWORD(v15) = 1132068864;
  [v4 setContentHuggingPriority:0 forAxis:v15];
  LODWORD(v16) = 1132068864;
  [v4 setContentCompressionResistancePriority:0 forAxis:v16];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100004010(&qword_100387438);
  UIViewRepresentableContext.coordinator.getter();
  [v4 setDelegate:(void)v19];

  id v17 = [v4 layoutManager];
  UIViewRepresentableContext.coordinator.getter();
  [v17 setDelegate:(void)v19];

  UIViewRepresentableContext.coordinator.getter();
  swift_unknownObjectWeakAssign();

  if (v1[4]) {
    [v4 becomeFirstResponder];
  }
  sub_1000FCA64();
  return v4;
}

uint64_t sub_1000FCA64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FDBC();
  id v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  long long v13 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v12 + 88) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v12 + 104) = v13;
  *(_OWORD *)(v12 + 120) = *(_OWORD *)(v1 + 96);
  long long v14 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)v1;
  *(_OWORD *)(v12 + 40) = v14;
  long long v15 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v1 + 32);
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 136) = *(void *)(v1 + 112);
  *(_OWORD *)(v12 + 72) = v15;
  aBlock[4] = sub_1000FE6A4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_1003575A0;
  double v16 = _Block_copy(aBlock);
  sub_1000FE6C8(v1);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10007C914();
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_10004A6CC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1000FCD40()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong bounds];
    [v1 sizeThatFits:v2, v3];
    sub_1000FC458(v4);
  }
}

uint64_t sub_1000FCDC0(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FDBC();
  long long v13 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v14 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v14 + 96) = v15;
  *(_OWORD *)(v14 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v14 + 128) = *(void *)(v2 + 112);
  long long v16 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v14 + 32) = v16;
  long long v17 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v14 + 64) = v17;
  *(double *)(v14 + 136) = a1;
  *(double *)(v14 + 144) = a2;
  aBlock[4] = sub_1000FF0D4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100207A1C;
  aBlock[3] = &unk_100357690;
  float v18 = _Block_copy(aBlock);
  sub_1000FE6C8(v2);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10007C914();
  sub_100004010((uint64_t *)&unk_10037FF80);
  sub_10004A6CC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

id sub_1000FD078()
{
  return sub_1000FC650();
}

void sub_1000FD0CC(void *a1)
{
  id v2 = [a1 selectedTextRange];
  sub_100004010(&qword_100387430);
  Binding.wrappedValue.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setText:v3];

  [a1 setSelectedTextRange:v2];
}

id sub_1000FD194@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = v1[6];
  char v9 = *((unsigned char *)v1 + 64);
  uint64_t v15 = v1[9];
  uint64_t v16 = v1[7];
  uint64_t v10 = v1[14];
  uint64_t v11 = (objc_class *)type metadata accessor for WrappedUITextViewCoordinator();
  long long v18 = *((_OWORD *)v1 + 5);
  long long v19 = *((_OWORD *)v1 + 6);
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  swift_unknownObjectWeakInit();
  long long v13 = &v12[OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView];
  *(void *)long long v13 = v2;
  *((void *)v13 + 1) = v3;
  *((void *)v13 + 2) = v5;
  *((void *)v13 + 3) = v4;
  *((void *)v13 + 4) = v7;
  *((void *)v13 + 5) = v6;
  *((void *)v13 + 6) = v8;
  *((void *)v13 + 7) = v16;
  v13[64] = v9;
  *((void *)v13 + 9) = v15;
  *((_OWORD *)v13 + 5) = v18;
  *((_OWORD *)v13 + 6) = v19;
  *((void *)v13 + 14) = v10;
  v20.receiver = v12;
  v20.super_class = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id result = [super init];
  *a1 = result;
  return result;
}

uint64_t sub_1000FD2E4()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_1000FD328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000FE7E8();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000FE7E8();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000FD3F0()
{
}

id sub_1000FD418(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  char v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [a1 text];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long aBlock = sub_1000FE84C();
  *((void *)&aBlock + 1) = v12;
  uint64_t v13 = String.init<A>(_:)();
  unint64_t v15 = v14;
  uint64_t v45 = v13;
  unint64_t v46 = v14;
  swift_bridgeObjectRetain();
  id v16 = [a1 text];
  if (!v16) {
    goto LABEL_7;
  }
  long long v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (v13 != v18 || v15 != v20)
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_8;
    }
LABEL_7:
    sub_10000FDBC();
    float v22 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v23 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v43 = sub_1000FE83C;
    uint64_t v44 = v23;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v41 = sub_100207A1C;
    uint64_t v42 = &unk_1003575F0;
    float v24 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(void *)&long long aBlock = _swiftEmptyArrayStorage;
    sub_10007C914();
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_10004A6CC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  if ((v15 & 0x1000000000000000) != 0)
  {
LABEL_29:
    Swift::Int v25 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v15 & 0x2000000000000000) != 0) {
      Swift::Int v25 = HIBYTE(v15) & 0xF;
    }
    else {
      Swift::Int v25 = v13 & 0xFFFFFFFFFFFFLL;
    }
  }
  unint64_t v26 = v2 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView;
  if (*(void *)(v2 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 56) >= v25)
  {
    uint64_t v4 = v45;
    unint64_t v30 = v46;
  }
  else
  {
    sub_10000FDBC();
    __float2 v27 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v28 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v43 = sub_1000FE844;
    uint64_t v44 = v28;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v41 = sub_100207A1C;
    uint64_t v42 = &unk_100357618;
    __float2 v29 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(void *)&long long aBlock = _swiftEmptyArrayStorage;
    unint64_t v2 = sub_10007C914();
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_10004A6CC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
    while (1)
    {
      uint64_t v4 = v45;
      unint64_t v30 = v46;
      uint64_t v31 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x1000000000000000) != 0) {
        Swift::Int v32 = String.UTF8View._foreignCount()();
      }
      else {
        Swift::Int v32 = (v46 & 0x2000000000000000) != 0 ? HIBYTE(v46) & 0xF : v45 & 0xFFFFFFFFFFFFLL;
      }
      if (*(void *)(v26 + 56) >= v32) {
        break;
      }
      if ((v30 & 0x2000000000000000) != 0)
      {
        if (!v31)
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
      }
      else if ((v4 & 0xFFFFFFFFFFFFLL) == 0)
      {
        goto LABEL_28;
      }
      String.index(before:)();
      String.remove(at:)();
      swift_bridgeObjectRelease();
    }
  }
  __float2 v33 = *(uint64_t (**)(uint64_t))(v26 + 16);
  __float2 v34 = *(void **)(v26 + 24);
  long long aBlock = *(_OWORD *)v26;
  uint64_t v41 = v33;
  uint64_t v42 = v34;
  uint64_t v38 = v4;
  unint64_t v39 = v30;
  sub_100004010(&qword_100387430);
  return (id)Binding.wrappedValue.setter();
}

uint64_t sub_1000FD9E8()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v1 = (void *)result;
    unint64_t v2 = *(void (**)(uint64_t))(result
                                        + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView
                                        + 88);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = swift_release();
    v2(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FDB04()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v1 = (void *)result;
    unint64_t v2 = *(void (**)(uint64_t))(result
                                        + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView
                                        + 72);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = swift_release();
    v2(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FDC88()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v1 = (void *)result;
    unint64_t v2 = *(void (**)(uint64_t))(result
                                        + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView
                                        + 104);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = swift_release();
    v2(v3);
    return swift_release();
  }
  return result;
}

id sub_1000FDE14(double a1, double a2)
{
  id result = [v2 layoutManager];
  if (result)
  {
    unint64_t v6 = result;
    if ([v2 widthTracksTextView])
    {
      [v6 ensureGlyphsForGlyphRange:0, [v6 numberOfGlyphs]];
      [v6 ensureLayoutForBoundingRect:v2 inTextContainer:0.0, 0.0, a1, a2];
      [v6 usedRectForTextContainer:v2];
      double v8 = v7;

      if (v8 <= a1) {
        return *(id *)&v8;
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

void sub_1000FDF10()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = (void *)Strong;
    unint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v2)
    {
      uint64_t v3 = v2;
      [v2 bounds];
      double v5 = v4;
      id v6 = [v3 textContainer];
      [v6 size];
      double v8 = v7;
      double v10 = v9;

      if (v8 != v5 || v10 != INFINITY)
      {
        id v12 = [v3 textContainer];
        [v12 setSize:v5, INFINITY];

        unint64_t v1 = v12;
      }
    }
    else
    {
      uint64_t v3 = v1;
    }
  }
}

id sub_1000FE0E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WrappedUITextViewCoordinator();
  return [super dealloc];
}

uint64_t type metadata accessor for WrappedUITextViewCoordinator()
{
  return self;
}

uint64_t destroy for WrappedUITextView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for WrappedUITextView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)(a1 + 112) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for WrappedUITextView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for WrappedUITextView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedUITextView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WrappedUITextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WrappedUITextView()
{
  return &type metadata for WrappedUITextView;
}

unint64_t sub_1000FE5A0()
{
  unint64_t result = qword_100387428;
  if (!qword_100387428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387428);
  }
  return result;
}

uint64_t sub_1000FE5F4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FE62C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 144, 7);
}

void sub_1000FE6A4()
{
}

uint64_t sub_1000FE6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FE6C0()
{
  return swift_release();
}

uint64_t sub_1000FE6C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000FE758(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000FE7E8()
{
  unint64_t result = qword_100387458;
  if (!qword_100387458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387458);
  }
  return result;
}

uint64_t sub_1000FE83C()
{
  return sub_1000FD9E8();
}

uint64_t sub_1000FE844()
{
  return sub_1000FDB04();
}

uint64_t sub_1000FE84C()
{
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    uint64_t object = v0.value._object;
    do
    {
      swift_bridgeObjectRetain();
      NSString v4 = String._bridgeToObjectiveC()();
      IsSingleEmojuint64_t i = CEMStringIsSingleEmoji();

      if (IsSingleEmoji || countAndFlagsBits == 10 && object == (void *)0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v6 & 1) == 0)
        {
          v7._uint64_t countAndFlagsBits = countAndFlagsBits;
          v7._uint64_t object = object;
          String.append(_:)(v7);
        }
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v3 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
      uint64_t object = v3.value._object;
    }
    while (v3.value._object);
  }
  swift_bridgeObjectRelease();
  return 0;
}

BOOL sub_1000FE978(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12) {
    return 1;
  }
  if (a1 == 10 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_10000FDBC();
    uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    __float2 v27 = sub_1000FF114;
    uint64_t v28 = v14;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    Swift::Int v25 = sub_100207A1C;
    unint64_t v26 = &unk_1003576B8;
    unint64_t v15 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    long long aBlock = _swiftEmptyArrayStorage;
    sub_10007C914();
    sub_100004010((uint64_t *)&unk_10037FF80);
    sub_10004A6CC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    long long aBlock = (void *)sub_1000FE84C();
    uint64_t v24 = v17;
    uint64_t v18 = String.init<A>(_:)();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0) {
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    return v21 != 0;
  }
}

void sub_1000FECB8(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a1)
    {
      id Strong = (id)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        id v14 = a1;
        [Strong bounds];
        double v17 = COERCE_DOUBLE(sub_1000FDE14(v15, v16));
        if (v19)
        {

          id v28 = Strong;
        }
        else
        {
          double v20 = v17;
          double v21 = v18;
          long long v22 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 80);
          v32[4] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 64);
          v32[5] = v22;
          v32[6] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 96);
          uint64_t v33 = *(void *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 112);
          long long v23 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 16);
          v32[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView);
          v32[1] = v23;
          long long v24 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 48);
          _OWORD v32[2] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 32);
          v32[3] = v24;
          sub_1000FE6C8((uint64_t)v32);
          sub_1000FCDC0(v20, v21);
          sub_1000FE758((uint64_t)v32);
          sub_10000FDBC();
          uint64_t v29 = static OS_dispatch_queue.main.getter();
          uint64_t v25 = swift_allocObject();
          swift_unknownObjectWeakInit();
          aBlock[4] = sub_1000FF05C;
          aBlock[5] = v25;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100207A1C;
          aBlock[3] = &unk_100357640;
          unint64_t v26 = _Block_copy(aBlock);
          swift_release();
          static DispatchQoS.unspecified.getter();
          aBlock[0] = _swiftEmptyArrayStorage;
          sub_10007C914();
          sub_100004010((uint64_t *)&unk_10037FF80);
          sub_10004A6CC();
          dispatch thunk of SetAlgebra.init<A>(_:)();
          __float2 v27 = (void *)v29;
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v26);

          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        }
      }
    }
  }
}

void sub_1000FF05C()
{
}

uint64_t sub_1000FF064()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1000FF0D4()
{
  double v1 = *(double *)(v0 + 144);
  double v2 = floor(v1);
  double v3 = ceil(v1);
  if (v1 >= 0.0) {
    double v4 = v3;
  }
  else {
    double v4 = v2;
  }
  return sub_1000FC458(v4);
}

uint64_t sub_1000FF114()
{
  return sub_1000FDC88();
}

uint64_t sub_1000FF148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004010(&qword_1003838E8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AppEvents();
  sub_1000FF3A0((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  *(void *)a2 = EnvironmentObject.init()();
  *(void *)(a2 + 8) = v7;
  type metadata accessor for AppRuntimeStateModel();
  sub_1000FF3A0(&qword_100380B58, (void (*)(uint64_t))type metadata accessor for AppRuntimeStateModel);
  *(void *)(a2 + 16) = EnvironmentObject.init()();
  *(void *)(a2 + 24) = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 48) = v9;
  *(void *)(a2 + 64) = *(void *)(a1 + 32);
  sub_1000FF3E8();
  id v10 = [self mainRunLoop];
  uint64_t v11 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = static NSTimer.publish(every:tolerance:on:in:options:)();

  sub_10000950C((uint64_t)v6, &qword_1003838E8);
  v16[0] = v12;
  type metadata accessor for NSTimer.TimerPublisher();
  State.init(wrappedValue:)();
  uint64_t v13 = *((void *)&v17[0] + 1);
  *(void *)(a2 + 72) = *(void *)&v17[0];
  *(void *)(a2 + 80) = v13;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  sub_1000FF428((uint64_t)v17, (uint64_t)v16);
  sub_100004010(&qword_1003874C0);
  State.init(wrappedValue:)();
  return sub_10000950C((uint64_t)v17, &qword_1003874C0);
}

uint64_t sub_1000FF3A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000FF3E8()
{
  unint64_t result = qword_1003838F0;
  if (!qword_1003838F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003838F0);
  }
  return result;
}

uint64_t sub_1000FF428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_1003874C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for QuestionnaireUserInactivityTrackerView(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(a1 + 48))
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  if (*(void *)(a1 + 112)) {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 88);
  }

  return swift_release();
}

uint64_t initializeWithCopy for QuestionnaireUserInactivityTrackerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = a2 + 48;
  uint64_t v6 = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
    *(void *)(a1 + 64) = *(void *)(v7 + 16);
  }
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  swift_retain();
  swift_retain();
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v11;
    *(void *)(a1 + 120) = v12;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8))(a1 + 88, a2 + 88, v11);
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QuestionnaireUserInactivityTrackerView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v5)
  {
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      swift_retain();
      swift_release();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10005F3C0(a1 + 48);
      uint64_t v8 = *(void *)(a2 + 64);
      *uint64_t v4 = *v7;
      *(void *)(a1 + 64) = v8;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v7;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *uint64_t v4 = v9;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (v10)
    {
      *(void *)(a1 + 112) = v10;
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, a2 + 88);
      goto LABEL_15;
    }
LABEL_14:
    long long v11 = *(_OWORD *)(a2 + 88);
    long long v12 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 88) = v11;
    *(_OWORD *)(a1 + 104) = v12;
    goto LABEL_15;
  }
  if (!v10)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 88);
    goto LABEL_14;
  }
  sub_1000D4DB8((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
LABEL_15:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for QuestionnaireUserInactivityTrackerView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  if (v7)
  {
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      swift_release();
      uint64_t v8 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10005F3C0(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
LABEL_6:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  if (*(void *)(a1 + 112)) {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 88);
  }
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireUserInactivityTrackerView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireUserInactivityTrackerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireUserInactivityTrackerView()
{
  return &type metadata for QuestionnaireUserInactivityTrackerView;
}

uint64_t sub_1000FFA00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000FFA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = static VerticalAlignment.center.getter();
  uint64_t v5 = v1[10];
  *(void *)&long long v31 = v1[9];
  *((void *)&v31 + 1) = v5;
  sub_100004010(&qword_1003874C8);
  State.wrappedValue.getter();
  uint64_t v6 = v40;
  sub_1000091F8((uint64_t)v1, (uint64_t)&v31);
  uint64_t v7 = swift_allocObject();
  long long v8 = v38;
  *(_OWORD *)(v7 + 112) = v37;
  *(_OWORD *)(v7 + 128) = v8;
  *(void *)(v7 + 144) = v39;
  long long v9 = v34;
  *(_OWORD *)(v7 + 48) = v33;
  *(_OWORD *)(v7 + 64) = v9;
  long long v10 = v36;
  *(_OWORD *)(v7 + 80) = v35;
  *(_OWORD *)(v7 + 96) = v10;
  long long v11 = v32;
  *(_OWORD *)(v7 + 16) = v31;
  *(_OWORD *)(v7 + 32) = v11;
  uint64_t v12 = *v1;
  if (*v1)
  {
    uint64_t v13 = v7;
    uint64_t v14 = *(void *)(v12 + 104);
    sub_1000091F8(v2, (uint64_t)&v31);
    uint64_t v15 = swift_allocObject();
    long long v16 = v38;
    *(_OWORD *)(v15 + 112) = v37;
    *(_OWORD *)(v15 + 128) = v16;
    *(void *)(v15 + 144) = v39;
    long long v17 = v34;
    *(_OWORD *)(v15 + 48) = v33;
    *(_OWORD *)(v15 + 64) = v17;
    long long v18 = v36;
    *(_OWORD *)(v15 + 80) = v35;
    *(_OWORD *)(v15 + 96) = v18;
    long long v19 = v32;
    *(_OWORD *)(v15 + 16) = v31;
    *(_OWORD *)(v15 + 32) = v19;
    sub_1000091F8(v2, (uint64_t)&v31);
    uint64_t v20 = swift_allocObject();
    long long v21 = v38;
    *(_OWORD *)(v20 + 112) = v37;
    *(_OWORD *)(v20 + 128) = v21;
    *(void *)(v20 + 144) = v39;
    long long v22 = v34;
    *(_OWORD *)(v20 + 48) = v33;
    *(_OWORD *)(v20 + 64) = v22;
    long long v23 = v36;
    *(_OWORD *)(v20 + 80) = v35;
    *(_OWORD *)(v20 + 96) = v23;
    long long v24 = v32;
    *(_OWORD *)(v20 + 16) = v31;
    *(_OWORD *)(v20 + 32) = v24;
    sub_1000091F8(v2, (uint64_t)&v31);
    uint64_t v25 = swift_allocObject();
    long long v26 = v38;
    *(_OWORD *)(v25 + 112) = v37;
    *(_OWORD *)(v25 + 128) = v26;
    *(void *)(v25 + 144) = v39;
    long long v27 = v34;
    *(_OWORD *)(v25 + 48) = v33;
    *(_OWORD *)(v25 + 64) = v27;
    long long v28 = v36;
    *(_OWORD *)(v25 + 80) = v35;
    *(_OWORD *)(v25 + 96) = v28;
    long long v29 = v32;
    *(_OWORD *)(v25 + 16) = v31;
    *(_OWORD *)(v25 + 32) = v29;
    LOBYTE(v31) = 0;
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = sub_100100878;
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = sub_100100884;
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = sub_100100890;
    *(void *)(a1 + 80) = v20;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = sub_10010093C;
    *(void *)(a1 + 128) = v25;
    return swift_retain();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_1000FF3A0((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FFC94(uint64_t a1, void *a2)
{
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000FD84(v3, (uint64_t)qword_1003A9B08);
  sub_1000091F8((uint64_t)a2, (uint64_t)v21);
  sub_1000091F8((uint64_t)a2, (uint64_t)v19);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446467;
    uint64_t v7 = sub_1000C8E54();
    sub_1001B3178(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009300((uint64_t)v21);
    *(_WORD *)(v6 + 12) = 2081;
    uint64_t v9 = v20;
    swift_retain();
    sub_10009049C(v9);
    uint64_t v10 = String.init<A>(describing:)();
    sub_1001B3178(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009300((uint64_t)v19);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] User inactivity timer fired for %{private}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100009300((uint64_t)v21);
    sub_100009300((uint64_t)v19);
  }

  sub_100100010();
  uint64_t result = sub_1001002C0();
  if (result)
  {
    uint64_t v13 = a2[2];
    if (!v13)
    {
      type metadata accessor for AppRuntimeStateModel();
      long long v16 = &qword_100380B58;
      long long v17 = type metadata accessor for AppRuntimeStateModel;
      goto LABEL_17;
    }
    uint64_t v14 = *(unsigned __int8 *)(v13 + 41);
    uint64_t v15 = 3;
    if (*(unsigned char *)(*(void *)(a2[4] + 264) + 32)) {
      uint64_t v15 = 8;
    }
    if (v15 == v14)
    {
      uint64_t result = sub_1000CCC10();
      if (result)
      {
        if (*a2)
        {
          swift_retain();
          sub_100004010(&qword_100393AA0);
          sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
          Subject<>.send()();
          return swift_release();
        }
        type metadata accessor for AppEvents();
        long long v16 = (unint64_t *)&qword_10037F000;
        long long v17 = type metadata accessor for AppEvents;
LABEL_17:
        sub_1000FF3A0(v16, (void (*)(uint64_t))v17);
        uint64_t result = EnvironmentObject.error()();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_100100010()
{
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000FD84(v1, (uint64_t)qword_1003A9B08);
  sub_1000091F8(v0, (uint64_t)v13);
  sub_1000091F8(v0, (uint64_t)v12);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446467;
    uint64_t v5 = sub_1000C8E54();
    sub_1001B3178(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009300((uint64_t)v13);
    *(_WORD *)(v4 + 12) = 2081;
    uint64_t v7 = v12[6];
    swift_retain();
    sub_10009049C(v7);
    uint64_t v8 = String.init<A>(describing:)();
    sub_1001B3178(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009300((uint64_t)v12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%{public}s] _cancelInactivityTimer for %{private}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100009300((uint64_t)v13);
    sub_100009300((uint64_t)v12);
  }

  sub_100004010(&qword_1003874D0);
  State.wrappedValue.getter();
  if (!v14) {
    return sub_10000950C((uint64_t)v13, &qword_1003874C0);
  }
  sub_1000090FC((uint64_t)v13, (uint64_t)v12);
  sub_10000950C((uint64_t)v13, &qword_1003874C0);
  sub_100008F88(v12, v12[3]);
  dispatch thunk of Cancellable.cancel()();
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v12);
}

uint64_t sub_1001002C0()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 144);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    if (v1 != *(unsigned __int8 *)(v5 + v4 + 31))
    {
      LOBYTE(v7) = 0;
      return v7 & 1;
    }
    if (v1 == 2)
    {
      uint64_t v6 = *(void *)(v0 + 48);
      if (!v6)
      {
        LOBYTE(v7) = *(void *)(v2 + 136) == 0;
        return v7 & 1;
      }
      uint64_t v7 = *(void *)(v2 + 136);
      swift_retain();
      if (!v7) {
        goto LABEL_11;
      }
      if (*(void *)(v6 + 16) != *(void *)(v7 + 16) || *(void *)(v6 + 24) != *(void *)(v7 + 24))
      {
        LOBYTE(v7) = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_11:
        swift_release();
        return v7 & 1;
      }
      swift_release();
    }
    LOBYTE(v7) = 1;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010039C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 32);
  sub_1000091F8(a2, (uint64_t)v6);
  if (v2 != v3) {
    return sub_100009300((uint64_t)v6);
  }
  char v5 = sub_1001002C0();
  uint64_t result = sub_100009300((uint64_t)v6);
  if (v5) {
    return sub_100100414();
  }
  return result;
}

uint64_t sub_100100414()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004010(&qword_1003838E8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DE10 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000FD84(v5, (uint64_t)qword_1003A9B08);
  sub_1000091F8(v0, (uint64_t)&v33);
  sub_1000091F8(v0, (uint64_t)v28);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    long long v21 = v4;
    uint64_t v27 = v9;
    *(_DWORD *)uint64_t v8 = 136446467;
    uint64_t v10 = sub_1000C8E54();
    uint64_t v22 = sub_1001B3178(v10, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009300((uint64_t)&v33);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v12 = v30;
    uint64_t v22 = v28[4];
    char v23 = v29;
    uint64_t v24 = v30;
    uint64_t v25 = v31;
    uint64_t v26 = v32;
    swift_retain();
    sub_10009049C(v12);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v22 = sub_1001B3178(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009300((uint64_t)v28);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] _resetInactivityTimer for %{private}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    uint64_t v4 = v21;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100009300((uint64_t)&v33);
    sub_100009300((uint64_t)v28);
  }

  sub_100004010(&qword_1003874D0);
  State.wrappedValue.getter();
  if (v35)
  {
    sub_1000090FC((uint64_t)&v33, (uint64_t)v28);
    sub_10000950C((uint64_t)&v33, &qword_1003874C0);
    sub_100008F88(v28, v28[3]);
    dispatch thunk of Cancellable.cancel()();
    uint64_t result = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v28);
  }
  else
  {
    uint64_t result = sub_10000950C((uint64_t)&v33, &qword_1003874C0);
  }
  if ((*(unsigned char *)(*(void *)(*(void *)(v0 + 32) + 264) + 80) & 1) == 0)
  {
    sub_1000FF3E8();
    id v16 = [self mainRunLoop];
    uint64_t v17 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
    uint64_t v18 = static NSTimer.publish(every:tolerance:on:in:options:)();

    sub_10000950C((uint64_t)v4, &qword_1003838E8);
    uint64_t v20 = *(void *)(v1 + 80);
    uint64_t v33 = *(void *)(v1 + 72);
    uint64_t v19 = v33;
    uint64_t v34 = v20;
    v28[0] = v18;
    sub_100004010(&qword_1003874C8);
    State.wrappedValue.setter();
    uint64_t v33 = v19;
    uint64_t v34 = v20;
    State.wrappedValue.getter();
    NSTimer.TimerPublisher.connect()();
    swift_release();
    sub_1000FF428((uint64_t)&v33, (uint64_t)v28);
    State.wrappedValue.setter();
    return sub_10000950C((uint64_t)&v33, &qword_1003874C0);
  }
  return result;
}

uint64_t sub_100100878(uint64_t a1)
{
  return sub_1000FFC94(a1, (void *)(v1 + 16));
}

uint64_t sub_100100884(uint64_t *a1)
{
  return sub_10010039C(a1, v1 + 16);
}

uint64_t sub_100100890()
{
  return sub_100100414();
}

uint64_t sub_1001008B8()
{
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 64))
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  if (*(void *)(v0 + 128)) {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 104);
  }
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_10010093C()
{
  return sub_100100010();
}

unint64_t sub_100100964()
{
  unint64_t result = qword_1003874D8;
  if (!qword_1003874D8)
  {
    sub_1000094C4(&qword_1003874E0);
    sub_1001009E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003874D8);
  }
  return result;
}

unint64_t sub_1001009E0()
{
  unint64_t result = qword_1003874E8;
  if (!qword_1003874E8)
  {
    sub_1000094C4(&qword_1003874F0);
    sub_100009B18(&qword_1003874F8, &qword_100387500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003874E8);
  }
  return result;
}

void *sub_100100A80()
{
  uint64_t v1 = v0;
  sub_100004010(&qword_100393AA0);
  swift_allocObject();
  v0[2] = PassthroughSubject.init()();
  swift_allocObject();
  v0[3] = PassthroughSubject.init()();
  sub_100004010(&qword_100387660);
  swift_allocObject();
  v0[4] = PassthroughSubject.init()();
  swift_allocObject();
  v0[5] = PassthroughSubject.init()();
  sub_100004010(&qword_100387668);
  swift_allocObject();
  v0[6] = PassthroughSubject.init()();
  swift_allocObject();
  v0[7] = PassthroughSubject.init()();
  swift_allocObject();
  v0[8] = PassthroughSubject.init()();
  swift_allocObject();
  v0[9] = PassthroughSubject.init()();
  swift_allocObject();
  v0[10] = PassthroughSubject.init()();
  sub_100004010(&qword_100387670);
  swift_allocObject();
  v0[11] = PassthroughSubject.init()();
  swift_allocObject();
  v0[12] = PassthroughSubject.init()();
  sub_100004010(&qword_100387678);
  swift_allocObject();
  v0[13] = PassthroughSubject.init()();
  sub_100004010(&qword_100387680);
  swift_allocObject();
  v0[14] = PassthroughSubject.init()();
  swift_allocObject();
  v0[15] = PassthroughSubject.init()();
  sub_100004010(&qword_100387688);
  swift_allocObject();
  v0[16] = PassthroughSubject.init()();
  sub_100004010(&qword_100387690);
  swift_allocObject();
  v0[17] = PassthroughSubject.init()();
  sub_100004010(&qword_100387698);
  swift_allocObject();
  v0[18] = PassthroughSubject.init()();
  swift_allocObject();
  v0[19] = PassthroughSubject.init()();
  swift_allocObject();
  v0[20] = PassthroughSubject.init()();
  sub_100004010(qword_1003807A0);
  swift_allocObject();
  v0[21] = PassthroughSubject.init()();
  swift_allocObject();
  v0[22] = PassthroughSubject.init()();
  sub_100004010(&qword_1003876A0);
  swift_allocObject();
  v0[23] = PassthroughSubject.init()();
  swift_allocObject();
  v0[24] = PassthroughSubject.init()();
  sub_100004010(&qword_1003876A8);
  swift_allocObject();
  v0[25] = PassthroughSubject.init()();
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9958);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] init", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v1;
}

uint64_t sub_100100F78()
{
  uint64_t v1 = v0;
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000FD84(v2, (uint64_t)qword_1003A9958);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_retain();
    uint64_t v6 = String.init<A>(describing:)();
    sub_1001B3178(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100101220()
{
  sub_100100F78();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppEvents()
{
  return self;
}

uint64_t destroy for AppEvents.AppPageEvent(uint64_t a1)
{
  swift_release();
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  uint64_t v4 = *(void *)(a2 + 24);
  swift_retain();
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
    *(void *)(a1 + 40) = *(void *)(v5 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v6)
    {
      *(void *)(a1 + 24) = v6;
      swift_retain();
      swift_release();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10005F3C0(a1 + 24);
      uint64_t v8 = *(void *)(a2 + 40);
      *uint64_t v4 = *v7;
      *(void *)(a1 + 40) = v8;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v7;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *uint64_t v4 = v9;
  }
  return a1;
}

uint64_t assignWithTake for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (!v5) {
    goto LABEL_5;
  }
  if (!v4)
  {
    sub_10005F3C0(a1 + 24);
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    return a1;
  }
  *(void *)(a1 + 24) = v4;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppEvents.AppPageEvent()
{
  return &type metadata for AppEvents.AppPageEvent;
}

void *sub_100101508(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for AppEvents.SelectRoadsideProviderRequestedParams(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AppEvents.SelectRoadsideProviderRequestedParams()
{
  return &type metadata for AppEvents.SelectRoadsideProviderRequestedParams;
}

void *sub_1001015D0()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1001015DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppEvents.AppPageEventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001016F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppEvents.AppPageEventType()
{
  return &type metadata for AppEvents.AppPageEventType;
}

unint64_t sub_100101734()
{
  unint64_t result = qword_1003876B0;
  if (!qword_1003876B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003876B0);
  }
  return result;
}

uint64_t ConnectionAssistantSatelliteRenderer.__allocating_init(device:buffers:renderPipelines:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  ConnectionAssistantSatelliteRenderer.init(device:buffers:renderPipelines:)(a1, a2, a3);
  return v6;
}

uint64_t ConnectionAssistantSatelliteRenderer.init(device:buffers:renderPipelines:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  swift_retain_n();
  swift_retain_n();
  uint64_t v8 = (void *)swift_unknownObjectRetain();
  uint64_t v9 = sub_1001FC634(v8, a2, a3);
  if (v4)
  {
    swift_release();
    swift_release();
  }
  else
  {
    *(void *)(v3 + 32) = v9;
    *(void *)(v3 + 40) = v10;
    *(void *)(v3 + 48) = v11;
    *(void *)(v3 + 56) = v12;
    id v13 = [(id)swift_unknownObjectRetain() newBufferWithLength:32 options:1];
    if (v13)
    {
      id v14 = v13;
      swift_unknownObjectRelease();
      *(void *)(v3 + 64) = v14;
      id v15 = [objc_allocWithZone((Class)MTKTextureLoader) initWithDevice:a1];
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      *(void *)(v3 + 112) = v15;
      return v3;
    }
    sub_100023B64();
    swift_allocError();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  if (!v4)
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  swift_unknownObjectRelease();
  type metadata accessor for ConnectionAssistantSatelliteRenderer();
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t ConnectionAssistantSatelliteRenderer.compute(dt:satellite:earth:camera:computeCommandEncoder:)(double a1, uint64_t a2, uint64_t a3, float32x4_t *a4, void *a5)
{
  ConnectionAssistantSatellite.cone(camera:earth:)(a4, a3, (uint64_t)v23);
  uint64_t result = sub_10010229C((uint64_t)v23, (uint64_t)v24);
  if ((v28 & 1) == 0)
  {
    uint64_t v9 = v24[0];
    uint64_t v8 = v24[1];
    float32x4_t v10 = vmulq_f32(v25, v25);
    LODWORD(v11) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).u32[0];
    float32x2_t v12 = vrsqrte_f32((float32x2_t)LODWORD(v11));
    float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)LODWORD(v11), vmul_f32(v12, v12)));
    float32x4_t v21 = vmulq_n_f32(v25, vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v11), vmul_f32(v13, v13))).f32[0]);
    float32x4_t v22 = v27;
    uint64_t v14 = COERCE_UNSIGNED_INT(atan2f(v26, sqrtf(v11))) | 0x3B03126F00000000;
    __asm { FMOV            V0.4S, #1.0 }
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    v29[0] = 100;
    _OWORD v29[2] = v9;
    uint64_t v29[3] = v8;
    float32x4_t v30 = v21;
    uint64_t v31 = v14;
    long long v32 = xmmword_1002BA060;
    char v33 = 0;
    float32x4_t v34 = vmlaq_f32(v22, v20, vsubq_f32(_Q0, v22));
    char v35 = 0;
    long long v36 = xmmword_1002BA070;
    return ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)((uint64_t)v29, a5, a1);
  }
  return result;
}

void ConnectionAssistantSatelliteRenderer.render(satellite:earth:camera:destination:renderCommandEncoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  ConnectionAssistantSatellite.cone(camera:earth:)((float32x4_t *)a3, a2, (uint64_t)v59);
  sub_10010229C((uint64_t)v59, (uint64_t)v60);
  __n128 v12 = *(__n128 *)a2;
  if ((v62 & 1) == 0)
  {
    v63[4] = v60[4];
    v63[5] = v60[5];
    v63[6] = v60[6];
    char v64 = v61;
    v63[0] = v60[0];
    v63[1] = v60[1];
    v63[2] = v60[2];
    v63[3] = v60[3];
    unint64_t v47 = v12.n128_u64[0];
    ConnectionAssistantConeRenderer.render(cone:parameters:camera:destination:renderCommandEncoder:)((uint64_t)v63, a3, a4, a5, *(void *)(v5 + 32), *(void *)(v5 + 40), *(void **)(v5 + 48), v12, *(float32x4_t *)(a2 + 32));
    v12.n128_u64[0] = v47;
  }
  *(float32x2_t *)v13.f32 = ConnectionAssistantSatellite.center(camera:earthCenter:)((float32x4_t *)a3, (float32x2_t)v12.n128_u64[0]);
  ConnectionAssistantCamera.projectUV(point:)(v13);
  if ((v15 & 1) == 0)
  {
    double v16 = v14;
    long long v48 = *(_OWORD *)(a1 + 16);
    int v17 = *(_DWORD *)(a1 + 32);
    uint64_t v18 = *(void **)(v5 + 64);
    uint64_t v19 = [(id)swift_unknownObjectRetain() contents];
    id v20 = v18;
    *(_OWORD *)uint64_t v19 = v48;
    v19[4] = v17;
    if (*(void *)(v6 + 80))
    {
      double v21 = *(double *)(a3 + 16);
      if (*(double *)(v6 + 72) == v21 && *(double *)(v6 + 104) == *(float *)(a1 + 8))
      {
        uint64_t v22 = *(void *)(v6 + 80);
        if (!v22) {
          return;
        }
        goto LABEL_11;
      }
    }
    else
    {
      double v21 = *(double *)(a3 + 16);
    }
    sub_100102304(*(void **)(v6 + 112), (uint64_t)v50, 64.0, v21, 32.0, 1.3, *(float *)(a1 + 8));
    uint64_t v23 = v50[1];
    long long v24 = v51;
    uint64_t v25 = v52;
    *(void *)(v6 + 72) = v50[0];
    *(void *)(v6 + 80) = v23;
    *(_OWORD *)(v6 + 88) = v24;
    *(void *)(v6 + 104) = v25;
    swift_unknownObjectRelease();
    uint64_t v22 = *(void *)(v6 + 80);
    if (!v22) {
      return;
    }
LABEL_11:
    id v49 = v20;
    uint64_t v26 = *(void *)(v6 + 88);
    uint64_t v45 = *(void *)(v6 + 96);
    swift_unknownObjectRetain();
    uint64_t v27 = sub_100285024(7);
    if (v27)
    {
      uint64_t v28 = v27;
      NSString v29 = String._bridgeToObjectiveC()();
      [a5 setLabel:v29];

      [a5 setRenderPipelineState:v28];
      id v30 = [a4 width];
      id v31 = [a4 height];
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      *(void *)&long long v55 = v30;
      *((void *)&v55 + 1) = v31;
      [a5 setScissorRect:&v53];
      [a5 setVertexBuffer:*(void *)(*(void *)(v6 + 16) + 24) offset:0 atIndex:0];
      *(double *)&long long v32 = ConnectionAssistantSatellite.model(projectedCenter:textureSize:camera:)(v26, v45, a3, v16);
      long long v44 = v33;
      long long v46 = v32;
      long long v42 = v38;
      long long v43 = v34;
      uint64_t v35 = *(void *)a3;
      uint64_t v36 = *(void *)(a3 + 8);
      float v37 = 1.0;
      LODWORD(v38) = 1.0;
      if (*(void *)a3)
      {
        LODWORD(v38) = 1.0;
        if (v36)
        {
          float v39 = (float)v35 / (float)v36;
          float v37 = fminf(v39, 1.0);
          *(float *)&long long v38 = fmaxf(v39, 1.0);
        }
      }
      *((float *)&v38 + 1) = 1.0 / v37;
      uint64_t v41 = v38;
      float v40 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(v35, v36, *(double *)(a3 + 16));
      uint64_t v53 = v41;
      *(float *)&uint64_t v54 = v40;
      long long v55 = v46;
      long long v56 = v44;
      long long v57 = v43;
      long long v58 = v42;
      [a5 setVertexBytes:&v53 length:80 atIndex:1];
      [a5 setFragmentBuffer:v49 offset:0 atIndex:0];
      [a5 setFragmentTexture:v22 atIndex:0];
      [a5 drawPrimitives:4 vertexStart:0 vertexCount:4];
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

void sub_100101EF8(void *a1, void *a2, CGFloat a3, CGFloat a4, long double a5, double a6)
{
  __n128 v12 = (CGContext *)[a1 CGContext];
  CGContextSetBlendMode(v12, kCGBlendModePlusLighter);

  [a2 size];
  double v14 = v13;
  [a2 size];
  double v16 = v15;
  [a2 size];
  double v18 = v17;
  double v20 = v19;
  double v21 = (CGContext *)[a1 CGContext];
  CGContextTranslateCTM(v21, -a3, -a4);

  uint64_t v22 = (CGContext *)[a1 CGContext];
  CGContextTranslateCTM(v22, a3 * 0.5, a4 * 0.5);

  uint64_t v23 = (CGContext *)[a1 CGContext];
  CGContextRotateCTM(v23, 0.785398163);

  double v24 = log2(a5) + -1.0;
  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v25 = (uint64_t)v24;
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  if (v25 < 0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  CGFloat offset = a4;
  double v42 = v18;
  color = GenericRGB;
  if (v25)
  {
    double v27 = v20;
    CGFloat v28 = a3;
    double v29 = v14 * -0.5;
    double v30 = v16 * -0.5;
    long double v31 = exp2((double)(v25 - 1));
    double v32 = a6;
    double v33 = v31;
    uint64_t v34 = 0;
    double v35 = 1.0 / (double)v25 * v32;
    do
    {
      uint64_t v36 = v34 + 1;
      CGFloat v37 = exp2((double)v34) / v33 * a5;
      long long v38 = (CGContext *)[a1 CGContext];
      CGContextSetBlendMode(v38, kCGBlendModePlusLighter);

      float v39 = (CGContext *)[a1 CGContext];
      v45.width = v28;
      v45.height = offset;
      CGContextSetShadowWithColor(v39, v45, v37, color);

      float v40 = (CGContext *)[a1 CGContext];
      CGContextSetAlpha(v40, v35);

      [a2 drawInRect:27 blendMode:v29 alpha:v30];
      uint64_t v34 = v36;
    }
    while (v25 != v36);
  }
}

uint64_t ConnectionAssistantSatelliteRenderer.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t ConnectionAssistantSatelliteRenderer.__deallocating_deinit()
{
  ConnectionAssistantSatelliteRenderer.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConnectionAssistantSatelliteRenderer()
{
  return self;
}

uint64_t sub_10010229C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100387320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100102304(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  id v14 = [objc_allocWithZone((Class)UIGraphicsImageRendererFormat) init];
  [v14 setScale:a4];
  [v14 setOpaque:1];
  id v15 = [self configurationWithPointSize:a3];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [self _systemImageNamed:v16];

  if (!v17
    || (id v18 = [v17 imageWithSymbolConfiguration:v15],
        v17,
        !v18))
  {
    sub_100102BCC();
    swift_allocError();
    unsigned char *v42 = 1;
    swift_willThrow();

    return;
  }
  uint64_t v45 = a2;
  id v46 = a1;
  uint64_t v50 = v15;
  [v18 size];
  long double v20 = v19;
  [v18 size];
  double v22 = a5 + a5 + ceil(hypot(v20, v21));
  id v23 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v14 format:v22];
  uint64_t v24 = swift_allocObject();
  *(double *)(v24 + 16) = v22;
  *(double *)(v24 + 24) = v22;
  *(void *)(v24 + 32) = v18;
  *(double *)(v24 + 40) = a5;
  *(double *)(v24 + 48) = a6;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_100102C58;
  *(void *)(v25 + 24) = v24;
  long long v55 = sub_100102C78;
  uint64_t v56 = v25;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  uint64_t v53 = sub_10009592C;
  uint64_t v54 = &unk_100357B08;
  uint64_t v26 = _Block_copy(&aBlock);
  id v48 = v18;
  swift_retain();
  swift_release();
  id v49 = v23;
  id v27 = [v23 imageWithActions:v26];
  _Block_release(v26);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v26)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  double v28 = a7 / a3 * v22;
  id v29 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:v14 format:v28];
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v27;
  *(double *)(v30 + 24) = v28;
  *(double *)(v30 + 32) = v28;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_100102CD0;
  *(void *)(v31 + 24) = v30;
  long long v55 = sub_100102D04;
  uint64_t v56 = v31;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  double v32 = v29;
  uint64_t v53 = sub_10009592C;
  uint64_t v54 = &unk_100357B80;
  double v33 = _Block_copy(&aBlock);
  id v47 = v27;
  swift_retain();
  swift_release();
  id v34 = [v32 imageWithActions:v33];
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v33) {
    goto LABEL_12;
  }
  id v35 = [v34 CGImage];
  if (v35)
  {
    uint64_t v36 = v35;
    long long aBlock = 0;
    id v37 = [v46 newTextureWithCGImage:v35 options:0 error:&aBlock];
    if (v37)
    {
      long long v38 = v37;
      float v39 = aBlock;
      id v40 = [v38 width];
      id v41 = [v38 height];
      swift_release();
      swift_release();

      *(double *)uint64_t v45 = a4;
      *(void *)(v45 + 8) = v38;
      *(void *)(v45 + 16) = v40;
      *(void *)(v45 + 24) = v41;
      *(double *)(v45 + 32) = a7;
    }
    else
    {
      long long v44 = aBlock;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      swift_release();
    }
  }
  else
  {
    sub_100102BCC();
    swift_allocError();
    *long long v43 = 2;
    swift_willThrow();
    swift_release();
    swift_release();
  }
}

unint64_t sub_100102964()
{
  unint64_t result = qword_1003876C0;
  if (!qword_1003876C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003876C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ConnectionAssistantSatelliteRenderer.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100102A84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantSatelliteRenderer.Error()
{
  return &type metadata for ConnectionAssistantSatelliteRenderer.Error;
}

uint64_t destroy for ConnectionAssistantSatelliteRenderer.SatelliteTexture()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ConnectionAssistantSatelliteRenderer.SatelliteTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for ConnectionAssistantSatelliteRenderer.SatelliteTexture(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ConnectionAssistantSatelliteRenderer.SatelliteTexture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ConnectionAssistantSatelliteRenderer.SatelliteTexture()
{
  return &type metadata for ConnectionAssistantSatelliteRenderer.SatelliteTexture;
}

unint64_t sub_100102BCC()
{
  unint64_t result = qword_1003877B8;
  if (!qword_1003877B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003877B8);
  }
  return result;
}

uint64_t sub_100102C20()
{
  return _swift_deallocObject(v0, 56, 7);
}

void sub_100102C58(void *a1)
{
  sub_100101EF8(a1, *(void **)(v1 + 32), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(long double *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t sub_100102C68()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100102C78(uint64_t a1)
{
  return sub_100239A6C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100102C80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100102C90()
{
  return swift_release();
}

uint64_t sub_100102C98()
{
  return _swift_deallocObject(v0, 40, 7);
}

id sub_100102CD0()
{
  return [*(id *)(v0 + 16) drawInRect:0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32)];
}

uint64_t sub_100102CEC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100102D08(uint64_t a1, double a2, double a3, double a4, double a5)
{
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = 0.0;
  v15.size.height = 0.0;
  if (CGRectEqualToRect(*(CGRect *)&a2, v15)) {
    return 0x6F72657A2ELL;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = sub_1000FC35C(a1, a2, a3);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x203A657A6973202CLL;
  v12._uint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = sub_1000FC35C(a1, a4, a5);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41;
  v14._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0x6E696769726F287ELL;
}

void *initializeWithCopy for StewieUnavailableView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for StewieUnavailableView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  return a1;
}

void *assignWithTake for StewieUnavailableView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_release();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_release();
  a1[7] = a2[7];
  return a1;
}

ValueMetadata *type metadata accessor for StewieUnavailableView()
{
  return &type metadata for StewieUnavailableView;
}

uint64_t sub_100102FCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100102FE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v63 = type metadata accessor for SOSConnectionEndedView();
  __chkstk_darwin(v63);
  uint64_t v3 = (void *)((char *)v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_100004010(&qword_100380780);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConnectionClosed(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v61 = (uint64_t)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100004010(&qword_1003877C0);
  __chkstk_darwin(v10);
  char v64 = (void *)((char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = sub_100004010(&qword_1003877C8);
  __chkstk_darwin(v62);
  Swift::String v13 = (void *)((char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100004010(&qword_1003877D0);
  __chkstk_darwin(v14);
  NSString v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100004010(&qword_1003877D8);
  __chkstk_darwin(v17 - 8);
  double v19 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v1[4];
  if (!v20)
  {
    type metadata accessor for TryOutModel();
    long long v58 = &qword_1003827A8;
    uint64_t v59 = (void (*)(uint64_t))type metadata accessor for TryOutModel;
LABEL_16:
    sub_10010CC2C(v58, v59);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  int v21 = *(__int16 *)(v20 + 56);
  uint64_t v65 = v14;
  if (v21 < -512)
  {
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t v22 = EnvironmentObject.init()();
    uint64_t v24 = v23;
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t v25 = EnvironmentObject.init()();
    uint64_t v27 = v26;
    __int16 v68 = _swiftEmptyArrayStorage;
    sub_100004010(&qword_100380040);
    State.init(wrappedValue:)();
    uint64_t v28 = v70;
    uint64_t v29 = v71;
    *Swift::String v13 = v22;
    v13[1] = v24;
    void v13[2] = v25;
    v13[3] = v27;
    v13[4] = v28;
    v13[5] = v29;
    swift_storeEnumTagMultiPayload();
    sub_100103BDC();
    sub_10010CC2C(&qword_1003877F8, (void (*)(uint64_t))type metadata accessor for SOSConnectionEndedView);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    sub_10000D2A0((uint64_t)v16, (uint64_t)v64, &qword_1003877D0);
    swift_storeEnumTagMultiPayload();
    sub_100103B30();
    sub_100103C30();
    _ConditionalContent<>.init(storage:)();
    sub_10000950C((uint64_t)v16, &qword_1003877D0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_11:
    uint64_t v43 = sub_100004010(&qword_1003877E0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v19, 0, 1, v43);
    return sub_10000D544((uint64_t)v19, v66, &qword_1003877D8);
  }
  v60[1] = v10;
  if (!*v1)
  {
    type metadata accessor for ConnectionClosedModel(0);
    long long v58 = &qword_100385270;
    uint64_t v59 = (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel;
    goto LABEL_16;
  }
  uint64_t v30 = *v1 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess();
  sub_10000D2A0(v30, (uint64_t)v6, &qword_100380780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    uint64_t v35 = v61;
    sub_10010BFA0((uint64_t)v6, v61, type metadata accessor for ConnectionClosed);
    uint64_t v36 = v63;
    sub_100103C84(v35, (uint64_t)v3 + *(int *)(v63 + 32), type metadata accessor for ConnectionClosed);
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    *uint64_t v3 = EnvironmentObject.init()();
    v3[1] = v37;
    type metadata accessor for AppRuntimeStateModel();
    sub_10010CC2C(&qword_100380B58, (void (*)(uint64_t))type metadata accessor for AppRuntimeStateModel);
    v3[2] = EnvironmentObject.init()();
    v3[3] = v38;
    type metadata accessor for RoadsideAssistanceModel();
    sub_10010CC2C(&qword_100380D48, (void (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
    v3[4] = EnvironmentObject.init()();
    v3[5] = v39;
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    v3[6] = EnvironmentObject.init()();
    v3[7] = v40;
    id v41 = (uint64_t *)((char *)v3 + *(int *)(v36 + 36));
    uint64_t v67 = _swiftEmptyArrayStorage;
    sub_100004010(&qword_100380040);
    State.init(wrappedValue:)();
    uint64_t v42 = v69;
    *id v41 = v68;
    v41[1] = v42;
    sub_100103C84((uint64_t)v3, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
    swift_storeEnumTagMultiPayload();
    sub_100103BDC();
    sub_10010CC2C(&qword_1003877F8, (void (*)(uint64_t))type metadata accessor for SOSConnectionEndedView);
    _ConditionalContent<>.init(storage:)();
    sub_10000D2A0((uint64_t)v16, (uint64_t)v64, &qword_1003877D0);
    swift_storeEnumTagMultiPayload();
    sub_100103B30();
    sub_100103C30();
    _ConditionalContent<>.init(storage:)();
    sub_10000950C((uint64_t)v16, &qword_1003877D0);
    sub_100103CEC((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
    sub_100103CEC(v35, type metadata accessor for ConnectionClosed);
    goto LABEL_11;
  }
  sub_10000950C((uint64_t)v6, &qword_100380780);
  uint64_t v31 = v1[2];
  if (!v31)
  {
    type metadata accessor for StewieModel();
    long long v58 = &qword_100380DA0;
    uint64_t v59 = (void (*)(uint64_t))type metadata accessor for StewieModel;
    goto LABEL_16;
  }
  if (*(void *)(v31 + 64) && (int v32 = *(unsigned __int8 *)(v31 + 56), v32 != 5))
  {
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t v44 = EnvironmentObject.init()();
    uint64_t v46 = v45;
    type metadata accessor for AppRuntimeStateModel();
    sub_10010CC2C(&qword_100380B58, (void (*)(uint64_t))type metadata accessor for AppRuntimeStateModel);
    uint64_t v47 = EnvironmentObject.init()();
    uint64_t v49 = v48;
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t v50 = EnvironmentObject.init()();
    uint64_t v52 = v51;
    uint64_t v67 = _swiftEmptyArrayStorage;
    sub_100004010(&qword_100380040);
    State.init(wrappedValue:)();
    uint64_t v53 = v68;
    uint64_t v54 = v69;
    long long v55 = v64;
    *char v64 = v44;
    v55[1] = v46;
    v55[2] = v47;
    v55[3] = v49;
    v55[4] = v50;
    v55[5] = v52;
    *((unsigned char *)v55 + 48) = v32;
    v55[7] = (uint64_t)v53;
    v55[8] = v54;
    swift_storeEnumTagMultiPayload();
    sub_100103B30();
    sub_100103C30();
    uint64_t v56 = v66;
    _ConditionalContent<>.init(storage:)();
    uint64_t v57 = sub_100004010(&qword_1003877E0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 0, 1, v57);
  }
  else
  {
    uint64_t v33 = sub_100004010(&qword_1003877E0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v66, 1, 1, v33);
  }
}

uint64_t type metadata accessor for SOSConnectionEndedView()
{
  uint64_t result = qword_100387860;
  if (!qword_100387860) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100103B30()
{
  unint64_t result = qword_1003877E8;
  if (!qword_1003877E8)
  {
    sub_1000094C4(&qword_1003877D0);
    sub_100103BDC();
    sub_10010CC2C(&qword_1003877F8, (void (*)(uint64_t))type metadata accessor for SOSConnectionEndedView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003877E8);
  }
  return result;
}

unint64_t sub_100103BDC()
{
  unint64_t result = qword_1003877F0;
  if (!qword_1003877F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003877F0);
  }
  return result;
}

unint64_t sub_100103C30()
{
  unint64_t result = qword_100387800;
  if (!qword_100387800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387800);
  }
  return result;
}

uint64_t sub_100103C84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100103CEC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for StewieStatusNotAvailableView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for StewieStatusNotAvailableView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StewieStatusNotAvailableView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for StewieStatusNotAvailableView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for StewieStatusNotAvailableView()
{
  return &type metadata for StewieStatusNotAvailableView;
}

void *sub_100103F78(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    uint64_t v9 = a2[6];
    a1[5] = a2[5];
    a1[6] = v9;
    a1[7] = a2[7];
    uint64_t v10 = *(int *)(a3 + 32);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v13 = type metadata accessor for ConnectionClosed(0);
    uint64_t v14 = *(int *)(v13 + 20);
    uint64_t v27 = v11;
    __dst = &v11[v14];
    uint64_t v26 = v13;
    uint64_t v15 = &v12[v14];
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v18(v15, 1, v16))
    {
      uint64_t v19 = sub_100004010(&qword_100380418);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    *(void *)&v27[*(int *)(v26 + 24)] = *(void *)&v12[*(int *)(v26 + 24)];
    uint64_t v20 = *(int *)(a3 + 36);
    int v21 = (void *)((char *)v6 + v20);
    uint64_t v22 = (void *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *int v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v6;
}

uint64_t sub_10010419C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ConnectionClosed(0) + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_1001042B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  uint64_t v12 = type metadata accessor for ConnectionClosed(0);
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v26 = v10;
  __dst = &v10[v13];
  uint64_t v25 = v12;
  uint64_t v14 = &v11[v13];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v17(v14, 1, v15))
  {
    uint64_t v18 = sub_100004010(&qword_100380418);
    memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  *(void *)&v26[*(int *)(v25 + 24)] = *(void *)&v11[*(int *)(v25 + 24)];
  uint64_t v19 = *(int *)(a3 + 36);
  uint64_t v20 = (void *)((char *)a1 + v19);
  int v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_100104490(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  uint64_t v23 = a3;
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  uint64_t v22 = type metadata accessor for ConnectionClosed(0);
  uint64_t v9 = *(int *)(v22 + 20);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100004010(&qword_100380418);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(void *)&v7[*(int *)(v22 + 24)] = *(void *)&v8[*(int *)(v22 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(v23 + 36);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_10010471C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  uint64_t v11 = type metadata accessor for ConnectionClosed(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100004010(&qword_100380418);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

void *sub_100104888(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_release();
  uint64_t v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_release();
  a1[7] = a2[7];
  uint64_t v26 = a3;
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  uint64_t v25 = type metadata accessor for ConnectionClosed(0);
  uint64_t v12 = *(int *)(v25 + 20);
  uint64_t v13 = &v10[v12];
  uint64_t v14 = &v11[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_100004010(&qword_100380418);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(void *)&v10[*(int *)(v25 + 24)] = *(void *)&v11[*(int *)(v25 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v21 = *(int *)(v26 + 36);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (void *)((char *)a2 + v21);
  *(void *)((char *)a1 + v21) = *v23;
  swift_bridgeObjectRelease();
  *((void *)v22 + 1) = v23[1];
  swift_release();
  return a1;
}

uint64_t sub_100104AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100104AD8);
}

uint64_t sub_100104AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConnectionClosed(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100104B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100104BB0);
}

uint64_t sub_100104BB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ConnectionClosed(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 32);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100104C70()
{
  uint64_t result = type metadata accessor for ConnectionClosed(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for TryOutEndedView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for TryOutEndedView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for TryOutEndedView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TryOutEndedView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TryOutEndedView()
{
  return &type metadata for TryOutEndedView;
}

unint64_t sub_100104EDC()
{
  unint64_t result = qword_1003878A8;
  if (!qword_1003878A8)
  {
    sub_1000094C4(&qword_1003877D8);
    sub_100104F50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003878A8);
  }
  return result;
}

unint64_t sub_100104F50()
{
  unint64_t result = qword_1003878B0;
  if (!qword_1003878B0)
  {
    sub_1000094C4(&qword_1003877E0);
    sub_100103B30();
    sub_100103C30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003878B0);
  }
  return result;
}

uint64_t sub_100104FCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100104FE8@<X0>(uint64_t a1@<X8>)
{
  v13[3] = a1;
  uint64_t v2 = *(void **)(v1 + 48);
  if (v2)
  {
    uint64_t v3 = v2[9];
    uint64_t v4 = v2[10];
    sub_100008F88(v2 + 6, v3);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v19, v3, v4);
    type metadata accessor for SOSConnectionEndedView();
    sub_100004010(&qword_1003878B8);
    uint64_t v5 = State.projectedValue.getter();
    void v13[2] = v13;
    uint64_t v17 = v14;
    long long v18 = v15;
    __chkstk_darwin(v5);
    v13[1] = sub_100004010(&qword_100380040);
    sub_100004010(&qword_1003878F8);
    sub_100009B18(&qword_1003878C8, &qword_100380040);
    sub_100009B18(&qword_100381CF8, &qword_100380040);
    sub_100009B18(&qword_1003878D0, &qword_100380040);
    uint64_t v6 = sub_1000094C4(&qword_100387900);
    uint64_t v7 = sub_1000094C4(&qword_100387908);
    uint64_t v8 = sub_1000094C4(&qword_100387910);
    uint64_t v9 = sub_100009B18(&qword_100387918, &qword_100387910);
    uint64_t v14 = v8;
    *(void *)&long long v15 = v9;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v11 = sub_100009B18(&qword_100387920, &qword_100387908);
    uint64_t v14 = v6;
    *(void *)&long long v15 = v7;
    *((void *)&v15 + 1) = OpaqueTypeConformance2;
    uint64_t v16 = v11;
    swift_getOpaqueTypeConformance2();
    NavigationStack.init<>(path:root:)();
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v19);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100105300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v33 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v29 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8);
  uint64_t v10 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v29 - v11;
  uint64_t v34 = sub_100004010(&qword_100387900);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v31 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000090FC(a1, (uint64_t)&v38);
  uint64_t v30 = a2;
  sub_100103C84(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = swift_allocObject();
  sub_100009164(&v38, v15 + 16);
  sub_10010BFA0((uint64_t)v12, v15 + ((v14 + 56) & ~v14), (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
  sub_100103C84(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
  sub_1000090FC(a1, (uint64_t)&v47);
  uint64_t v16 = (v14 + 16) & ~v14;
  uint64_t v17 = swift_allocObject();
  sub_10010BFA0((uint64_t)v10, v17 + v16, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
  sub_100009164(&v47, v17 + ((v8 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  type metadata accessor for UIMetrics();
  sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v18 = EnvironmentObject.init()();
  uint64_t v20 = v19;
  type metadata accessor for CGSize(0);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  State.init(wrappedValue:)();
  *(void *)&long long v38 = v18;
  *((void *)&v38 + 1) = v20;
  uint64_t v39 = sub_10010C008;
  uint64_t v40 = v15;
  id v41 = sub_10010C234;
  uint64_t v42 = v17;
  long long v43 = v47;
  uint64_t v44 = v48;
  uint64_t v21 = v32;
  uint64_t v22 = v29;
  uint64_t v23 = v33;
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v29, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v33);
  uint64_t v24 = sub_100004010(&qword_100387910);
  uint64_t v25 = sub_100009B18(&qword_100387918, &qword_100387910);
  uint64_t v26 = v31;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v37 = v30;
  sub_100004010(&qword_100387908);
  *(void *)&long long v38 = v24;
  *((void *)&v38 + 1) = v25;
  swift_getOpaqueTypeConformance2();
  sub_100009B18(&qword_100387920, &qword_100387908);
  uint64_t v27 = v34;
  View.toolbar<A>(content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v26, v27);
}

__n128 sub_100105824@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  sub_100105900((uint64_t)a1);
  v12[1136] = 0;
  memcpy(&v12[7], __src, 0x468uLL);
  uint64_t v5 = (__n128 **)sub_100008F88(a1, a1[3]);
  __n128 v10 = (*v5)[3];
  unint64_t v6 = (*v5)[4].n128_u64[0];
  unint64_t v7 = (*v5)[4].n128_u64[1];
  char v8 = static Edge.Set.all.getter();
  char v13 = 0;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  memcpy((void *)(a2 + 17), v12, 0x46FuLL);
  *(unsigned char *)(a2 + 1152) = v8;
  __n128 result = v10;
  *(__n128 *)(a2 + 1160) = v10;
  *(void *)(a2 + 1176) = v6;
  *(void *)(a2 + 1184) = v7;
  *(unsigned char *)(a2 + 1192) = v13;
  return result;
}

uint64_t sub_100105900(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  long long v162 = v5;
  uint64_t v6 = type metadata accessor for Font.Leading();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ConnectionClosedModel(0);
  sub_10010CC2C(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
  uint64_t v180 = EnvironmentObject.init()();
  uint64_t v161 = v10;
  uint64_t v11 = type metadata accessor for ConnectivityModel();
  v149[2] = sub_10010CC2C(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
  v149[3] = v11;
  uint64_t v182 = EnvironmentObject.init()();
  uint64_t v160 = v12;
  type metadata accessor for GuidanceModel(0);
  sub_10010CC2C(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
  uint64_t v181 = EnvironmentObject.init()();
  uint64_t v159 = v13;
  type metadata accessor for OrientationModel();
  sub_10010CC2C(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
  uint64_t v179 = EnvironmentObject.init()();
  uint64_t v158 = v14;
  type metadata accessor for StewieModel();
  sub_10010CC2C(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v178 = EnvironmentObject.init()();
  uint64_t v157 = v15;
  uint64_t v16 = type metadata accessor for UIMetrics();
  v149[0] = sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  v149[1] = v16;
  uint64_t v177 = EnvironmentObject.init()();
  uint64_t v156 = v17;
  v18.super.Class isa = (Class)[self mainBundle];
  v282._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
  v282._uint64_t object = (void *)0x80000001002CEAB0;
  v19._uint64_t object = (void *)0x80000001002CEA90;
  v19._uint64_t countAndFlagsBits = 0xD000000000000010;
  v20._uint64_t countAndFlagsBits = 0;
  v20._uint64_t object = (void *)0xE000000000000000;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, v18, v20, v282);

  v189[0] = v21;
  unint64_t v163 = sub_100033310();
  uint64_t v176 = Text.init<A>(_:)();
  uint64_t v172 = v23;
  uint64_t v173 = v22;
  LOBYTE(v18.super.isa) = v24;
  uint64_t v25 = sub_100008F88(v4, v4[3]);
  uint64_t v26 = *v25;
  uint64_t v27 = *(void *)(*v25 + 184);
  uint64_t v170 = *(void *)(*v25 + 192);
  uint64_t v171 = v27;
  uint64_t v28 = *(void *)(v26 + 200);
  uint64_t v168 = *(void *)(v26 + 208);
  uint64_t v169 = v28;
  int v166 = static Edge.Set.all.getter();
  int v167 = static Edge.Set.bottom.getter();
  uint64_t v29 = v4[3];
  long long v164 = v4;
  sub_100008F88(v4, v29);
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  unsigned __int8 v281 = (uint64_t)v18.super.isa & 1;
  unsigned __int8 v278 = 0;
  unsigned __int8 v275 = 0;
  static Font.title3.getter();
  Font.bold()();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Font.Leading.tight(_:), v6);
  uint64_t v165 = Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v183 = v3;
  uint64_t v38 = *(void *)(v3 + 48);
  if (!v38) {
    goto LABEL_36;
  }
  LODWORD(v152) = v281;
  int v153 = v278;
  LODWORD(v154) = v275;
  uint64_t v39 = *(void *)(v38 + 72);
  uint64_t v40 = *(void *)(v38 + 80);
  long long v175 = (void *)(v38 + 48);
  sub_100008F88((void *)(v38 + 48), v39);
  *((void *)&v151 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v39, v40);
  *(void *)&long long v151 = swift_getKeyPath();
  id v41 = *(id *)(v38 + 112);
  char v42 = static UIContentSizeCategory.>= infix(_:_:)();

  BOOL v150 = (v42 & 1) == 0;
  uint64_t v43 = swift_getKeyPath();
  id v44 = *(id *)(v38 + 112);
  char v45 = static UIContentSizeCategory.>= infix(_:_:)();

  BOOL v46 = (v45 & 1) == 0;
  uint64_t v47 = swift_getKeyPath();
  uint64_t v174 = v38;
  id v48 = *(id *)(v38 + 112);
  static Alignment.center.getter();
  *(void *)&long long v184 = UIContentSizeCategoryAccessibilityExtraLarge;
  if (static UIContentSizeCategory.>= infix(_:_:)())
  {
    static Alignment.center.getter();
    if (static Alignment.== infix(_:_:)()) {
      static Alignment.leading.getter();
    }
  }

  *(_DWORD *)((char *)&v238 + 1) = *(_DWORD *)v280;
  DWORD1(v238) = *(_DWORD *)&v280[3];
  *(_DWORD *)((char *)&v239 + 1) = *(_DWORD *)v279;
  DWORD1(v239) = *(_DWORD *)&v279[3];
  *(_DWORD *)((char *)&v241 + 9) = *(_DWORD *)v277;
  HIDWORD(v241) = *(_DWORD *)&v277[3];
  DWORD1(v242) = *(_DWORD *)&v276[3];
  *(_DWORD *)((char *)&v242 + 1) = *(_DWORD *)v276;
  v236[312] = v42 & 1;
  *(void *)&long long v237 = v176;
  *((void *)&v237 + 1) = v173;
  LOBYTE(v238) = v152;
  *((void *)&v238 + 1) = v172;
  LOBYTE(v239) = v166;
  *((void *)&v239 + 1) = v171;
  *(void *)&long long v240 = v170;
  *((void *)&v240 + 1) = v169;
  *(void *)&long long v241 = v168;
  BYTE8(v241) = v153;
  LOBYTE(v242) = v167;
  *((void *)&v242 + 1) = v31;
  *(void *)&long long v243 = v33;
  *((void *)&v243 + 1) = v35;
  *(void *)&long long v244 = v37;
  BYTE8(v244) = v154;
  *(void *)&long long v245 = KeyPath;
  *((void *)&v245 + 1) = v165;
  long long v246 = v151;
  *(void *)&long long v247 = v43;
  *((void *)&v247 + 1) = v150;
  LOBYTE(v248) = v42 & 1;
  *((void *)&v248 + 1) = v47;
  BOOL v249 = v46;
  BOOL v274 = v46;
  long long v264 = v239;
  long long v265 = v240;
  long long v262 = v237;
  long long v263 = v238;
  long long v270 = v245;
  long long v271 = v151;
  long long v268 = v243;
  long long v269 = v244;
  long long v266 = v241;
  long long v267 = v242;
  long long v272 = v247;
  long long v273 = v248;
  sub_100166530(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v236, 0.0, 1, 0.0, 1);
  sub_10005BEB0((uint64_t)&v237);
  uint64_t v49 = v174;
  id v50 = *(id *)(v174 + 112);
  LODWORD(KeyPath) = static UIContentSizeCategory.>= infix(_:_:)();

  uint64_t v176 = swift_getKeyPath();
  uint64_t v51 = *(void *)(v49 + 80);
  uint64_t v52 = v175;
  sub_100008F88(v175, *(void *)(v49 + 72));
  uint64_t v53 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v54 = *(uint64_t (**)(void))(v51 + 120);
  uint64_t v165 = v183 + *(int *)(v53 + 32);
  *(void *)&v189[0] = v54();
  *((void *)&v189[0] + 1) = v55;
  uint64_t v56 = Text.init<A>(_:)();
  uint64_t v58 = v57;
  char v60 = v59 & 1;
  uint64_t v61 = *(void *)(v49 + 72);
  uint64_t v62 = *(void *)(v49 + 80);
  sub_100008F88(v52, v61);
  (*(void (**)(uint64_t, uint64_t))(v62 + 56))(v61, v62);
  uint64_t v63 = Text.font(_:)();
  uint64_t v65 = v64;
  uint64_t v171 = v66;
  LOBYTE(v52) = v67 & 1;
  sub_100033364(v56, v58, v60);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v68 = *(void *)(v49 + 72);
  uint64_t v69 = *(void *)(v49 + 80);
  sub_100008F88(v175, v68);
  (*(void (**)(uint64_t, uint64_t))(v69 + 64))(v68, v69);
  long long v175 = (void *)Text.foregroundColor(_:)();
  uint64_t v173 = v70;
  LODWORD(v172) = v71;
  uint64_t v73 = v72;
  sub_100033364(v63, v65, (char)v52);
  swift_release();
  swift_bridgeObjectRelease();
  id v74 = *(id *)(v49 + 112);
  char v75 = static UIContentSizeCategory.>= infix(_:_:)();

  uint64_t v76 = swift_getKeyPath();
  uint64_t v77 = *(void *)(v183 + 48);
  if (!v77) {
    goto LABEL_36;
  }
  uint64_t v78 = v76;
  BOOL v79 = (v75 & 1) == 0;
  id v80 = *(id *)(v77 + 112);
  static Alignment.center.getter();
  if (static UIContentSizeCategory.>= infix(_:_:)())
  {
    static Alignment.center.getter();
    char v81 = static Alignment.== infix(_:_:)();
    uint64_t v82 = v175;
    if (v81) {
      static Alignment.leading.getter();
    }
  }
  else
  {

    uint64_t v82 = v175;
  }
  v256 = v82;
  uint64_t v83 = v173;
  uint64_t v257 = v173;
  char v84 = v172 & 1;
  char v258 = v172 & 1;
  uint64_t v259 = v73;
  uint64_t v260 = v78;
  BOOL v261 = v79;
  sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v235, 0.0, 1, 0.0, 1);
  sub_100033364((uint64_t)v82, v83, v84);
  swift_release();
  swift_bridgeObjectRelease();
  long long v231 = v235[6];
  long long v232 = v235[7];
  long long v233 = v235[8];
  long long v234 = v235[9];
  long long v227 = v235[2];
  long long v228 = v235[3];
  long long v229 = v235[4];
  long long v230 = v235[5];
  long long v225 = v235[0];
  long long v226 = v235[1];
  id v85 = *(id *)(v77 + 112);
  LODWORD(v73) = static UIContentSizeCategory.>= infix(_:_:)();

  uint64_t v174 = swift_getKeyPath();
  uint64_t v86 = sub_100008F88(v164, v164[3]);
  uint64_t v87 = *v86;
  uint64_t v88 = *(void *)(*v86 + 184);
  uint64_t v172 = *(void *)(*v86 + 192);
  uint64_t v173 = v88;
  uint64_t v89 = *(void *)(v87 + 200);
  uint64_t v170 = *(void *)(v87 + 208);
  uint64_t v171 = v89;
  int v166 = static Edge.Set.all.getter();
  unsigned __int8 v217 = 0;
  LODWORD(v169) = static Edge.Set.top.getter();
  int v167 = v217;
  unsigned __int8 v218 = 1;
  LODWORD(v175) = static Edge.Set.bottom.getter();
  LODWORD(v168) = v218;
  unsigned __int8 v219 = 1;
  uint64_t v90 = *(void *)(v183 + 48);
  if (!v90) {
    goto LABEL_36;
  }
  uint64_t v91 = *(void *)(v90 + 72);
  uint64_t v92 = *(void *)(v90 + 80);
  sub_100008F88((void *)(v90 + 48), v91);
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 128))(v165, v91, v92);
  uint64_t v95 = HIBYTE(v94) & 0xF;
  if ((v94 & 0x2000000000000000) == 0) {
    uint64_t v95 = v93 & 0xFFFFFFFFFFFFLL;
  }
  if (!v95)
  {
    swift_bridgeObjectRelease();
    sub_10010CC74(v189);
    sub_10000D544((uint64_t)v189, (uint64_t)v216, &qword_1003879C8);
    goto LABEL_26;
  }
  LODWORD(v154) = v73;
  *(void *)&v189[0] = v93;
  *((void *)&v189[0] + 1) = v94;
  uint64_t v96 = Text.init<A>(_:)();
  uint64_t v98 = v97;
  char v100 = v99 & 1;
  uint64_t v101 = *(void *)(v90 + 72);
  uint64_t v102 = *(void *)(v90 + 80);
  sub_100008F88((void *)(v90 + 48), v101);
  (*(void (**)(uint64_t, uint64_t))(v102 + 48))(v101, v102);
  *((void *)&v151 + 1) = Text.font(_:)();
  uint64_t v152 = v103;
  uint64_t v105 = v104;
  LOBYTE(v101) = v106 & 1;
  sub_100033364(v96, v98, v100);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v107 = *(void *)(v90 + 72);
  uint64_t v108 = *(void *)(v90 + 80);
  sub_100008F88((void *)(v90 + 48), v107);
  (*(void (**)(uint64_t, uint64_t))(v108 + 64))(v107, v108);
  uint64_t v109 = *((void *)&v151 + 1);
  uint64_t v110 = Text.foregroundColor(_:)();
  uint64_t v112 = v111;
  int v153 = v113;
  unint64_t v163 = v114;
  uint64_t v115 = v109;
  uint64_t v116 = v183;
  sub_100033364(v115, v105, v101);
  swift_release();
  swift_bridgeObjectRelease();
  id v117 = *(id *)(v90 + 112);
  char v118 = static UIContentSizeCategory.>= infix(_:_:)();

  uint64_t v119 = swift_getKeyPath();
  uint64_t v120 = *(void *)(v116 + 48);
  if (!v120)
  {
LABEL_36:
    while (1)
    {
      EnvironmentObject.error()();
      __break(1u);
    }
  }
  uint64_t v121 = v119;
  BOOL v122 = (v118 & 1) == 0;
  id v123 = *(id *)(v120 + 112);
  static Alignment.center.getter();
  char v124 = static UIContentSizeCategory.>= infix(_:_:)();
  LODWORD(v183) = v122;
  if (v124)
  {
    static Alignment.center.getter();
    char v125 = static Alignment.== infix(_:_:)();
    char v126 = v153;
    uint64_t v127 = v121;
    if (v125) {
      static Alignment.leading.getter();
    }
  }
  else
  {
    uint64_t v127 = v121;

    char v126 = v153;
  }
  uint64_t v250 = v110;
  uint64_t v251 = v112;
  char v252 = v126 & 1;
  unint64_t v253 = v163;
  uint64_t v254 = v127;
  char v255 = v183;
  sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v213, 0.0, 1, 0.0, 1);
  sub_100033364(v110, v112, v126 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  id v128 = *(id *)(v120 + 112);
  char v129 = static UIContentSizeCategory.>= infix(_:_:)();

  if (v129) {
    double v130 = 1.0;
  }
  else {
    double v130 = 0.5;
  }
  uint64_t v131 = swift_getKeyPath();
  uint64_t v132 = sub_100008F88(v164, v164[3]);
  uint64_t v133 = *v132;
  long long v184 = *(_OWORD *)(*v132 + 184);
  uint64_t v134 = *(void *)(v133 + 200);
  uint64_t v73 = *(void *)(v133 + 208);
  char v135 = static Edge.Set.all.getter();
  v190[0] = 0;
  char v136 = static Edge.Set.top.getter();
  char v137 = v190[0];
  LOBYTE(v191[0]) = 1;
  char v138 = static Edge.Set.bottom.getter();
  LOBYTE(v186[0]) = 1;
  v189[6] = *(_OWORD *)&v213[96];
  v189[7] = *(_OWORD *)&v213[112];
  v189[8] = *(_OWORD *)&v213[128];
  v189[9] = *(_OWORD *)&v213[144];
  v189[2] = *(_OWORD *)&v213[32];
  v189[3] = *(_OWORD *)&v213[48];
  v189[4] = *(_OWORD *)&v213[64];
  v189[5] = *(_OWORD *)&v213[80];
  v189[0] = *(_OWORD *)v213;
  v189[1] = *(_OWORD *)&v213[16];
  *(void *)&v189[10] = v131;
  *((double *)&v189[10] + 1) = v130;
  LOBYTE(v189[11]) = v135;
  *(_OWORD *)((char *)&v189[11] + 8) = v184;
  *((void *)&v189[12] + 1) = v134;
  *(void *)&v189[13] = v73;
  BYTE8(v189[13]) = v137;
  LOBYTE(v189[14]) = v136;
  *(_OWORD *)((char *)&v189[14] + 8) = 0u;
  *(_OWORD *)((char *)&v189[15] + 8) = 0u;
  BYTE8(v189[16]) = v191[0];
  LOBYTE(v189[17]) = v138;
  *(_OWORD *)((char *)&v189[17] + 8) = 0u;
  *(_OWORD *)((char *)&v189[18] + 8) = 0u;
  BYTE8(v189[19]) = 1;
  ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v189);
  sub_10000D544((uint64_t)v189, (uint64_t)v216, &qword_1003879C8);
  LOBYTE(v73) = v154;
LABEL_26:
  uint64_t v139 = type metadata accessor for ConnectionClosed(0);
  if (sub_100078E0C(4, *(void *)(v165 + *(int *)(v139 + 24))))
  {
    type metadata accessor for ConnectionModel(0);
    sub_10010CC2C(&qword_10037F100, (void (*)(uint64_t))type metadata accessor for ConnectionModel);
    uint64_t v183 = EnvironmentObject.init()();
    *(void *)&long long v184 = v140;
    uint64_t v141 = EnvironmentObject.init()();
    long long v164 = v142;
    uint64_t v165 = v141;
    unint64_t v163 = EnvironmentObject.init()();
    uint64_t v154 = v143;
  }
  else
  {
    long long v164 = 0;
    uint64_t v165 = 0;
    unint64_t v163 = 0;
    uint64_t v154 = 0;
    uint64_t v183 = 1;
    *(void *)&long long v184 = 0;
  }
  if (v73) {
    double v144 = 1.0;
  }
  else {
    double v144 = 0.5;
  }
  if (KeyPath) {
    double v145 = 1.0;
  }
  else {
    double v145 = 0.5;
  }
  unsigned __int8 v146 = v219;
  LODWORD(KeyPath) = v219;
  sub_10000D544((uint64_t)v216, (uint64_t)v185, &qword_1003879C8);
  memcpy(v186, v236, 0x138uLL);
  v186[39] = v176;
  *(double *)&v186[40] = v145;
  v187[6] = v231;
  v187[7] = v232;
  v187[8] = v233;
  v187[9] = v234;
  v187[2] = v227;
  v187[3] = v228;
  v187[4] = v229;
  v187[5] = v230;
  v187[0] = v225;
  v187[1] = v226;
  *(void *)&v187[10] = v174;
  *((double *)&v187[10] + 1) = v144;
  LOBYTE(v187[11]) = v166;
  *(_DWORD *)((char *)&v187[11] + 1) = *(_DWORD *)v224;
  DWORD1(v187[11]) = *(_DWORD *)&v224[3];
  *((void *)&v187[11] + 1) = v173;
  *(void *)&v187[12] = v172;
  *((void *)&v187[12] + 1) = v171;
  *(void *)&v187[13] = v170;
  BYTE8(v187[13]) = v167;
  *(_DWORD *)((char *)&v187[13] + 9) = *(_DWORD *)v223;
  HIDWORD(v187[13]) = *(_DWORD *)&v223[3];
  LOBYTE(v187[14]) = v169;
  DWORD1(v187[14]) = *(_DWORD *)&v222[3];
  *(_DWORD *)((char *)&v187[14] + 1) = *(_DWORD *)v222;
  *(_OWORD *)((char *)&v187[14] + 8) = 0u;
  *(_OWORD *)((char *)&v187[15] + 8) = 0u;
  BYTE8(v187[16]) = v168;
  *(_DWORD *)((char *)&v187[16] + 9) = *(_DWORD *)v221;
  HIDWORD(v187[16]) = *(_DWORD *)&v221[3];
  LOBYTE(v187[17]) = (_BYTE)v175;
  *(_DWORD *)((char *)&v187[17] + 1) = *(_DWORD *)v220;
  DWORD1(v187[17]) = *(_DWORD *)&v220[3];
  *(_OWORD *)((char *)&v187[17] + 8) = 0u;
  *(_OWORD *)((char *)&v187[18] + 8) = 0u;
  BYTE8(v187[19]) = v146;
  sub_10000D544((uint64_t)v185, (uint64_t)v188, &qword_1003879C8);
  *(void *)&v189[0] = v180;
  *((void *)&v189[0] + 1) = v161;
  *(void *)&v189[1] = v182;
  *((void *)&v189[1] + 1) = v160;
  *(void *)&v189[2] = v181;
  *((void *)&v189[2] + 1) = v159;
  *(void *)&v189[3] = v179;
  *((void *)&v189[3] + 1) = v158;
  *(void *)&v189[4] = v178;
  *((void *)&v189[4] + 1) = v157;
  *(void *)&v189[5] = v177;
  *((void *)&v189[5] + 1) = v156;
  LOBYTE(v189[6]) = 0;
  *((void *)&v189[6] + 1) = 0;
  memcpy(&v189[7], v186, 0x148uLL);
  memcpy((char *)&v189[27] + 8, v187, 0x139uLL);
  sub_10000D544((uint64_t)v188, (uint64_t)&v189[47] + 8, &qword_1003879C8);
  uint64_t v147 = v183;
  *((void *)&v189[67] + 1) = v183;
  *(void *)&v189[68] = v184;
  *((void *)&v189[68] + 1) = v165;
  *(void *)&v189[69] = v164;
  *((void *)&v189[69] + 1) = v163;
  *(void *)&v189[70] = v154;
  memcpy(v162, v189, 0x468uLL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10010CA40((uint64_t)v186);
  sub_1000439C8((uint64_t)v187);
  sub_10010CB90((uint64_t)v188, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000336C0);
  sub_10010CAEC(v147);
  sub_10010CB40(v147);
  sub_10000D544((uint64_t)v185, (uint64_t)v190, &qword_1003879C8);
  sub_10010CB90((uint64_t)v190, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100033998);
  v191[6] = v231;
  v191[7] = v232;
  v191[8] = v233;
  v191[9] = v234;
  v191[2] = v227;
  v191[3] = v228;
  v191[4] = v229;
  v191[5] = v230;
  v191[0] = v225;
  v191[1] = v226;
  uint64_t v192 = v174;
  double v193 = v144;
  char v194 = v166;
  *(_DWORD *)long long v195 = *(_DWORD *)v224;
  *(_DWORD *)&v195[3] = *(_DWORD *)&v224[3];
  uint64_t v196 = v173;
  uint64_t v197 = v172;
  uint64_t v198 = v171;
  uint64_t v199 = v170;
  char v200 = v167;
  *(_DWORD *)long long v201 = *(_DWORD *)v223;
  *(_DWORD *)&v201[3] = *(_DWORD *)&v223[3];
  char v202 = v169;
  *(_DWORD *)&v203[3] = *(_DWORD *)&v222[3];
  *(_DWORD *)__int16 v203 = *(_DWORD *)v222;
  long long v204 = 0u;
  long long v205 = 0u;
  char v206 = v168;
  *(_DWORD *)v207 = *(_DWORD *)v221;
  *(_DWORD *)&v207[3] = *(_DWORD *)&v221[3];
  char v208 = (char)v175;
  *(_DWORD *)v209 = *(_DWORD *)v220;
  *(_DWORD *)&v209[3] = *(_DWORD *)&v220[3];
  long long v210 = 0u;
  long long v211 = 0u;
  char v212 = KeyPath;
  sub_100043A24((uint64_t)v191);
  memcpy(v213, v236, sizeof(v213));
  uint64_t v214 = v176;
  double v215 = v145;
  sub_10005C75C((uint64_t)v213);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

double sub_100106E10@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = static HorizontalAlignment.center.getter();
  sub_100106EE4(a1, a2, (uint64_t)&v13);
  sub_10000D544((uint64_t)&v13, (uint64_t)&v12, &qword_100387958);
  long long v13 = (unint64_t)v6;
  LOBYTE(v14[0]) = 0;
  sub_10000D544((uint64_t)&v12, (uint64_t)v14 + 8, &qword_100387958);
  long long v7 = v14[6];
  *(_OWORD *)(a3 + 96) = v14[5];
  *(_OWORD *)(a3 + 112) = v7;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)v15;
  *(_DWORD *)(a3 + 143) = *(_DWORD *)&v15[15];
  long long v8 = v14[2];
  *(_OWORD *)(a3 + 32) = v14[1];
  *(_OWORD *)(a3 + 48) = v8;
  long long v9 = v14[4];
  *(_OWORD *)(a3 + 64) = v14[3];
  *(_OWORD *)(a3 + 80) = v9;
  double result = *(double *)&v13;
  long long v11 = v14[0];
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_100106EE4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = a1 + *(int *)(__chkstk_darwin(v5 - 8) + 40);
  uint64_t v9 = *(void *)(v8 + *(int *)(type metadata accessor for ConnectionClosed(0) + 24));
  if (sub_100078E0C(0, v9))
  {
    sub_100103C84(a1, (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
    unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = swift_allocObject();
    sub_10010BFA0((uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t v12 = EnvironmentObject.init()();
    uint64_t v14 = v13;
    LOBYTE(v10) = static Edge.Set.top.getter();
    uint64_t v15 = sub_100008F88(a2, a2[3]);
    uint64_t v16 = *v15;
    long long v47 = *(_OWORD *)(*v15 + 48);
    uint64_t v17 = *(void *)(v16 + 64);
    uint64_t v18 = *(void *)(v16 + 72);
    char v19 = static Edge.Set.all.getter();
    char v59 = 1;
    char v56 = 0;
    uint64_t v61 = v12;
    uint64_t v62 = v14;
    uint64_t v63 = sub_10010C8B0;
    uint64_t v64 = v11;
    char v65 = v10;
    *(_DWORD *)uint64_t v66 = *(_DWORD *)v60;
    *(_DWORD *)&v66[3] = *(_DWORD *)&v60[3];
    long long v67 = 0u;
    long long v68 = 0u;
    char v69 = 1;
    *(_DWORD *)&v70[3] = *(_DWORD *)&v58[3];
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v58;
    char v71 = v19;
    *(_DWORD *)&v72[3] = *(_DWORD *)&v57[3];
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v57;
    long long v73 = v47;
    uint64_t v74 = v17;
    uint64_t v75 = v18;
    char v76 = 0;
    sub_10010C910((uint64_t)&v61);
    sub_10000D544((uint64_t)&v61, (uint64_t)&v88, &qword_1003879C0);
    swift_retain();
    swift_retain();
    sub_100004010(&qword_100387988);
    sub_10010CD90(&qword_100387980, &qword_100387988, (void (*)(void))sub_10010C408);
    _ConditionalContent<>.init(storage:)();
    v79[2] = v53;
    v80[0] = v54;
    v80[1] = v55[0];
    *(_OWORD *)((char *)&v80[1] + 10) = *(_OWORD *)((char *)v55 + 10);
    long long v77 = v49;
    long long v78 = v50;
    v79[0] = v51;
    v79[1] = v52;
    sub_10010C704((uint64_t)&v77);
    sub_10000D544((uint64_t)&v77, (uint64_t)&v81, &qword_100387960);
    sub_100004010(&qword_100387968);
    sub_100004010(&qword_100387970);
    sub_10010C368();
    sub_10010CD90(&qword_1003879A0, &qword_100387970, (void (*)(void))sub_10010C438);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    long long v85 = v92;
    long long v86 = v93;
    v87[0] = v94[0];
    *(_OWORD *)((char *)v87 + 11) = *(_OWORD *)((char *)v94 + 11);
    long long v81 = v88;
    long long v82 = v89;
    long long v20 = v90;
    long long v21 = v91;
LABEL_11:
    long long v83 = v20;
    long long v84 = v21;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(&v81);
    goto LABEL_12;
  }
  if ((sub_100078E0C(1, v9) & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)(a1 + 32);
  if (v22)
  {
    if ((*(unsigned char *)(v22 + 184) & 1) == 0)
    {
      uint64_t v35 = *(void *)(v22 + 176);
      sub_100103C84(a1, (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
      unint64_t v36 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v37 = swift_allocObject();
      sub_10010BFA0((uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v37 + v36, (uint64_t (*)(void))type metadata accessor for SOSConnectionEndedView);
      *(void *)(v37 + ((v7 + v36 + 7) & 0xFFFFFFFFFFFFFFF8)) = v35;
      type metadata accessor for UIMetrics();
      sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
      uint64_t v38 = EnvironmentObject.init()();
      uint64_t v40 = v39;
      LOBYTE(v36) = static Edge.Set.top.getter();
      id v41 = sub_100008F88(a2, a2[3]);
      uint64_t v42 = *v41;
      long long v47 = *(_OWORD *)(*v41 + 48);
      uint64_t v43 = *(void *)(v42 + 64);
      uint64_t v44 = *(void *)(v42 + 72);
      char v45 = static Edge.Set.all.getter();
      char v59 = 1;
      char v56 = 0;
      uint64_t v61 = v38;
      uint64_t v62 = v40;
      uint64_t v63 = sub_10010C66C;
      uint64_t v64 = v37;
      char v65 = v36;
      *(_DWORD *)uint64_t v66 = *(_DWORD *)v60;
      *(_DWORD *)&v66[3] = *(_DWORD *)&v60[3];
      long long v67 = 0u;
      long long v68 = 0u;
      char v69 = 1;
      *(_DWORD *)&v70[3] = *(_DWORD *)&v58[3];
      *(_DWORD *)uint64_t v70 = *(_DWORD *)v58;
      char v71 = v45;
      *(_DWORD *)&v72[3] = *(_DWORD *)&v57[3];
      *(_DWORD *)uint64_t v72 = *(_DWORD *)v57;
      long long v73 = v47;
      uint64_t v74 = v43;
      uint64_t v75 = v44;
      char v76 = 0;
      sub_10010C6F8((uint64_t)&v61);
      sub_10000D544((uint64_t)&v61, (uint64_t)&v88, &qword_1003879C0);
      swift_retain();
      swift_retain();
      sub_100004010(&qword_100387988);
      sub_10010CD90(&qword_100387980, &qword_100387988, (void (*)(void))sub_10010C408);
      _ConditionalContent<>.init(storage:)();
      v79[2] = v53;
      v80[0] = v54;
      v80[1] = v55[0];
      *(_OWORD *)((char *)&v80[1] + 10) = *(_OWORD *)((char *)v55 + 10);
      long long v77 = v49;
      long long v78 = v50;
      v79[0] = v51;
      v79[1] = v52;
      sub_10010C704((uint64_t)&v77);
      sub_10000D544((uint64_t)&v77, (uint64_t)&v81, &qword_100387960);
      sub_100004010(&qword_100387968);
      sub_100004010(&qword_100387970);
      sub_10010C368();
      sub_10010CD90(&qword_1003879A0, &qword_100387970, (void (*)(void))sub_10010C438);
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_release();
LABEL_10:
      long long v85 = v92;
      long long v86 = v93;
      v87[0] = v94[0];
      *(_OWORD *)((char *)v87 + 11) = *(_OWORD *)((char *)v94 + 11);
      long long v81 = v88;
      long long v82 = v89;
      long long v20 = v90;
      long long v21 = v91;
      goto LABEL_11;
    }
LABEL_6:
    if ((sub_100078E0C(4, v9) & 1) == 0)
    {
      sub_10010C334((uint64_t)&v81);
LABEL_12:
      sub_10000D544((uint64_t)&v81, (uint64_t)&v88, &qword_100387958);
      return sub_10000D544((uint64_t)&v88, v48, &qword_100387958);
    }
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t v23 = EnvironmentObject.init()();
    uint64_t v25 = v24;
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t v26 = EnvironmentObject.init()();
    uint64_t v28 = v27;
    char v29 = static Edge.Set.top.getter();
    uint64_t v30 = sub_100008F88(a2, a2[3]);
    uint64_t v31 = *v30;
    long long v47 = *(_OWORD *)(*v30 + 48);
    uint64_t v32 = *(void *)(v31 + 64);
    uint64_t v33 = *(void *)(v31 + 72);
    char v34 = static Edge.Set.all.getter();
    LOBYTE(v61) = 1;
    LOBYTE(v49) = 0;
    *(void *)&long long v77 = v23;
    *((void *)&v77 + 1) = v25;
    *(void *)&long long v78 = v26;
    *((void *)&v78 + 1) = v28;
    LOBYTE(v79[0]) = v29;
    *(_OWORD *)((char *)v79 + 8) = 0u;
    *(_OWORD *)((char *)&v79[1] + 8) = 0u;
    BYTE8(v79[2]) = 1;
    LOBYTE(v80[0]) = v34;
    *(_OWORD *)((char *)v80 + 8) = v47;
    *((void *)&v80[1] + 1) = v32;
    *(void *)&v80[2] = v33;
    BYTE8(v80[2]) = 0;
    sub_10010C35C((uint64_t)&v77);
    sub_10000D544((uint64_t)&v77, (uint64_t)&v81, &qword_100387960);
    sub_100004010(&qword_100387968);
    sub_100004010(&qword_100387970);
    sub_10010C368();
    sub_10010CD90(&qword_1003879A0, &qword_100387970, (void (*)(void))sub_10010C438);
    _ConditionalContent<>.init(storage:)();
    goto LABEL_10;
  }
  type metadata accessor for RoadsideAssistanceModel();
  sub_10010CC2C(&qword_100380D48, (void (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_100107810(void *a1)
{
  if (*a1)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    swift_retain();
    sub_100004010(&qword_100393AA0);
    sub_100009B18((unint64_t *)&qword_10037FD40, &qword_100393AA0);
    Subject<>.send()();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100107918(void *a1)
{
  if (*a1)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    swift_retain();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001079EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v35 = sub_100004010(&qword_100387928);
  __chkstk_darwin(v35);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100004010(&qword_100387930);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100387938);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = type metadata accessor for ToolbarItemPlacement();
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  __chkstk_darwin(v14);
  uint64_t v15 = sub_100004010(&qword_1003818D8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  char v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  long long v21 = (char *)&v31 - v20;
  static ToolbarItemPlacement.principal.getter();
  uint64_t v37 = a1;
  ToolbarItem<>.init(placement:content:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v19, v15);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22)
  {
    if (*(unsigned char *)(v22 + 40))
    {
      static ToolbarItemPlacement.navigationBarTrailing.getter();
      sub_10010C2E0();
      uint64_t v23 = v32;
      ToolbarItem<>.init(placement:content:)();
      uint64_t v24 = sub_100009B18(&qword_100387948, &qword_100387930);
      uint64_t v25 = v34;
      static ToolbarContentBuilder.buildBlock<A>(_:)();
      uint64_t v26 = sub_100004010(&qword_100387940);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 0, 1, v26);
      uint64_t v38 = v25;
      uint64_t v39 = v24;
      swift_getOpaqueTypeConformance2();
      static ToolbarContentBuilder.buildIf<A>(_:)();
      sub_10000950C((uint64_t)v10, &qword_100387938);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v25);
    }
    else
    {
      uint64_t v27 = sub_100004010(&qword_100387940);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v10, 1, 1, v27);
      uint64_t v28 = sub_100009B18(&qword_100387948, &qword_100387930);
      uint64_t v38 = v34;
      uint64_t v39 = v28;
      swift_getOpaqueTypeConformance2();
      static ToolbarContentBuilder.buildIf<A>(_:)();
      sub_10000950C((uint64_t)v10, &qword_100387938);
    }
    uint64_t v29 = (uint64_t)&v4[*(int *)(v35 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v4, v21, v15);
    sub_10000D2A0((uint64_t)v12, v29, &qword_100387938);
    TupleToolbarContent.init(_:)();
    sub_10000950C((uint64_t)v12, &qword_100387938);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  else
  {
    type metadata accessor for AppRuntimeStateModel();
    sub_10010CC2C(&qword_100380B58, (void (*)(uint64_t))type metadata accessor for AppRuntimeStateModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100107FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[10];
    sub_100008F88(v4 + 6, v5);
    uint64_t v7 = a1 + *(int *)(type metadata accessor for SOSConnectionEndedView() + 32);
    uint64_t v8 = type metadata accessor for ConnectionClosed(0);
    (*(void (**)(void, uint64_t, uint64_t))(v6 + 152))(*(void *)(v7 + *(int *)(v8 + 24)), v5, v6);
    sub_100033310();
    uint64_t v9 = Text.init<A>(_:)();
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    static Font.headline.getter();
    uint64_t v14 = Text.font(_:)();
    uint64_t v16 = v15;
    char v18 = v17;
    uint64_t v20 = v19;
    swift_release();
    sub_100033364(v9, v11, v13);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v16;
    *(unsigned char *)(a2 + 16) = v18 & 1;
    *(void *)(a2 + 24) = v20;
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100108134@<X0>(uint64_t a1@<X8>)
{
  v17[3] = a1;
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v2[9];
    uint64_t v4 = v2[10];
    sub_100008F88(v2 + 6, v3);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v23, v3, v4);
    uint64_t v5 = v2[9];
    uint64_t v6 = v2[10];
    sub_100008F88(v2 + 6, v5);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v22, v5, v6);
    sub_100004010(&qword_1003878B8);
    uint64_t v7 = State.projectedValue.getter();
    _OWORD v17[2] = v17;
    v21[0] = v18;
    *(_OWORD *)&v21[1] = v19;
    __chkstk_darwin(v7);
    v17[1] = sub_100004010(&qword_100380040);
    sub_100004010(&qword_1003878C0);
    sub_100009B18(&qword_1003878C8, &qword_100380040);
    sub_100009B18(&qword_100381CF8, &qword_100380040);
    sub_100009B18(&qword_1003878D0, &qword_100380040);
    uint64_t v8 = sub_1000094C4(&qword_1003878D8);
    uint64_t v9 = sub_1000094C4(&qword_1003818F0);
    uint64_t v10 = sub_1000094C4(&qword_1003878E0);
    uint64_t v11 = sub_100009B18(&qword_1003878E8, &qword_1003878E0);
    uint64_t v18 = v10;
    *(void *)&long long v19 = v11;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v13 = sub_1000094C4(&qword_1003818D8);
    uint64_t v14 = sub_100009B18(&qword_1003818E8, &qword_1003818D8);
    uint64_t v18 = v13;
    *(void *)&long long v19 = v14;
    uint64_t v15 = swift_getOpaqueTypeConformance2();
    uint64_t v18 = v8;
    *(void *)&long long v19 = v9;
    *((void *)&v19 + 1) = OpaqueTypeConformance2;
    uint64_t v20 = v15;
    swift_getOpaqueTypeConformance2();
    NavigationStack.init<>(path:root:)();
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v22);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v23);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001084B8@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v7 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_1003878D8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = *a1;
  long long v43 = a1[1];
  v44[0] = v15;
  long long v40 = a1[2];
  uint64_t v42 = v40;
  sub_10000D544((uint64_t)&v40 + 8, (uint64_t)v41, &qword_1003878F0);
  sub_1000090FC(a2, (uint64_t)&v29);
  uint64_t v16 = (_OWORD *)swift_allocObject();
  long long v17 = a1[1];
  v16[1] = *a1;
  _OWORD v16[2] = v17;
  v16[3] = a1[2];
  sub_100009164(&v29, (uint64_t)(v16 + 4));
  sub_1000090FC(a3, (uint64_t)&v29);
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = a1[1];
  v18[1] = *a1;
  void v18[2] = v19;
  _OWORD v18[3] = a1[2];
  sub_100009164(&v29, (uint64_t)(v18 + 4));
  sub_10004ED30((uint64_t)v44);
  sub_10004ED30((uint64_t)&v43);
  sub_10003E68C((uint64_t)&v42);
  sub_10004ED30((uint64_t)v41);
  sub_10004ED30((uint64_t)v44);
  sub_10004ED30((uint64_t)&v43);
  sub_10003E68C((uint64_t)&v42);
  sub_10004ED30((uint64_t)v41);
  type metadata accessor for UIMetrics();
  sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v20 = EnvironmentObject.init()();
  uint64_t v22 = v21;
  type metadata accessor for CGSize(0);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  State.init(wrappedValue:)();
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v22;
  uint64_t v30 = sub_10010BBA8;
  uint64_t v31 = v16;
  uint64_t v32 = sub_10010BC10;
  uint64_t v33 = v18;
  long long v34 = v38;
  uint64_t v35 = v39;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v7);
  uint64_t v23 = sub_100004010(&qword_1003878E0);
  uint64_t v24 = sub_100009B18(&qword_1003878E8, &qword_1003878E0);
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004010(&qword_1003818F0);
  *(void *)&long long v29 = v23;
  *((void *)&v29 + 1) = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = sub_1000094C4(&qword_1003818D8);
  uint64_t v26 = sub_100009B18(&qword_1003818E8, &qword_1003818D8);
  *(void *)&long long v29 = v25;
  *((void *)&v29 + 1) = v26;
  swift_getOpaqueTypeConformance2();
  View.toolbar<A>(content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100108978@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = static HorizontalAlignment.center.getter();
  sub_100108AD8(a1, a2, __src);
  v14[552] = 0;
  memcpy(&v14[7], __src, 0x221uLL);
  uint64_t v7 = sub_100008F88(a2, a2[3]);
  uint64_t v8 = *(void *)(*v7 + 48);
  uint64_t v9 = *(void *)(*v7 + 56);
  uint64_t v10 = *(void *)(*v7 + 64);
  uint64_t v11 = *(void *)(*v7 + 72);
  LOBYTE(a2) = static Edge.Set.all.getter();
  v14[560] = 0;
  v15[0] = v6;
  v15[1] = 0;
  LOBYTE(v15[2]) = 0;
  memcpy((char *)&v15[2] + 1, v14, 0x228uLL);
  LOBYTE(v15[72]) = (_BYTE)a2;
  v15[73] = v8;
  v15[74] = v9;
  v15[75] = v10;
  v15[76] = v11;
  LOBYTE(v15[77]) = 0;
  v16[624] = 1;
  memcpy(&v16[7], v15, 0x269uLL);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  memcpy((void *)(a3 + 9), v16, 0x270uLL);
  v17[0] = v6;
  v17[1] = 0;
  char v18 = 0;
  memcpy(v19, v14, 0x228uLL);
  v19[559] = (_BYTE)a2;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  char v24 = 0;
  sub_10010BC84((uint64_t)v15);
  return sub_10010BD04((uint64_t)v17);
}

uint64_t sub_100108AD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v66 = a2;
  long long v67 = a3;
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(_:bundle:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  uint64_t v8 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v9 = *(void **)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = v9[9];
    uint64_t v11 = v9[10];
    uint64_t v12 = v9 + 6;
    char v65 = v9 + 6;
    uint64_t v13 = v9;
    sub_100008F88(v9 + 6, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v11 + 24))(v84, v10, v11);
    uint64_t v14 = *((void *)&v84[1] + 1);
    uint64_t v15 = *(void *)&v84[2];
    sub_100008F88(v84, *((uint64_t *)&v84[1] + 1));
    double v16 = (*(double (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    uint64_t v17 = static Alignment.center.getter();
    sub_10016671C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v130, 0.0, 1, v16, 0, v17, v18, v8, 0, 1);
    swift_release();
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v84);
    int v70 = static Edge.Set.top.getter();
    unsigned __int8 v125 = 1;
    int v71 = static Edge.Set.bottom.getter();
    int v69 = v125;
    unsigned __int8 v126 = 1;
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v21 = v20;
    char v23 = v22 & 1;
    long long v68 = v13;
    uint64_t v24 = v13[9];
    uint64_t v25 = v13[10];
    sub_100008F88(v12, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
    uint64_t v26 = Text.font(_:)();
    uint64_t v28 = v27;
    LOBYTE(v12) = v29 & 1;
    sub_100033364(v19, v21, v23);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v30 = v68;
    uint64_t v31 = v68[9];
    uint64_t v32 = v68[10];
    sub_100008F88(v65, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 64))(v31, v32);
    uint64_t v64 = Text.foregroundColor(_:)();
    char v65 = v33;
    uint64_t v35 = v34;
    int v63 = v36;
    sub_100033364(v26, v28, (char)v12);
    swift_release();
    swift_bridgeObjectRelease();
    id v37 = (id)v30[14];
    char v38 = static UIContentSizeCategory.>= infix(_:_:)();

    uint64_t KeyPath = swift_getKeyPath();
    id v40 = (id)v30[14];
    static Alignment.center.getter();
    char v41 = static UIContentSizeCategory.>= infix(_:_:)();
    UIContentSizeCategory v62 = UIContentSizeCategoryAccessibilityExtraLarge;
    if (v41 & 1) != 0 && (static Alignment.center.getter(), (static Alignment.== infix(_:_:)()))
    {
      uint64_t v42 = v35;
      static Alignment.leading.getter();
    }
    else
    {
      uint64_t v42 = v35;
    }

    char v43 = v63 & 1;
    uint64_t v44 = v64;
    uint64_t v139 = v64;
    uint64_t v140 = v42;
    char v141 = v63 & 1;
    char v45 = v66;
    uint64_t v142 = v65;
    uint64_t v143 = KeyPath;
    BOOL v144 = (v38 & 1) == 0;
    sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v115, 0.0, 1, 0.0, 1);
    sub_100033364(v44, v42, v43);
    swift_release();
    swift_bridgeObjectRelease();
    id v46 = (id)v68[14];
    char v47 = static UIContentSizeCategory.>= infix(_:_:)();

    if (v47) {
      double v48 = 1.0;
    }
    else {
      double v48 = 0.5;
    }
    long long v49 = (void *)swift_getKeyPath();
    char v65 = v49;
    long long v50 = sub_100008F88(v45, v45[3]);
    uint64_t v51 = *v50;
    uint64_t v53 = *(void *)(*v50 + 192);
    uint64_t v64 = *(void *)(*v50 + 184);
    uint64_t v52 = v64;
    uint64_t v54 = *(void *)(v51 + 200);
    uint64_t v55 = *(void *)(v51 + 208);
    char v56 = static Edge.Set.all.getter();
    unsigned __int8 v72 = 0;
    int v57 = static Edge.Set.top.getter();
    char v58 = v57;
    LODWORD(v66) = v57;
    LODWORD(v62) = v72;
    unsigned __int8 v73 = 1;
    char v59 = static Edge.Set.bottom.getter();
    int v63 = v73;
    char v74 = 1;
    LODWORD(v68) = v126;
    v75[7] = v137;
    *(void *)&long long v76 = v138;
    v75[2] = v132;
    v75[3] = v133;
    v75[5] = v135;
    v75[6] = v136;
    void v75[4] = v134;
    v75[0] = v130;
    v75[1] = v131;
    BYTE8(v76) = v70;
    *(_DWORD *)((char *)&v76 + 9) = *(_DWORD *)v129;
    HIDWORD(v76) = *(_DWORD *)&v129[3];
    long long v77 = 0u;
    long long v78 = 0u;
    LOBYTE(v79) = v69;
    *(_DWORD *)((char *)&v79 + 1) = *(_DWORD *)v128;
    DWORD1(v79) = *(_DWORD *)&v128[3];
    BYTE8(v79) = v71;
    *(_DWORD *)((char *)&v79 + 9) = *(_DWORD *)v127;
    HIDWORD(v79) = *(_DWORD *)&v127[3];
    long long v80 = 0u;
    long long v81 = 0u;
    unsigned __int8 v82 = v126;
    v83[6] = v121;
    v83[7] = v122;
    v83[8] = v123;
    v83[9] = v124;
    v83[2] = v117;
    _OWORD v83[3] = v118;
    v83[4] = v119;
    v83[5] = v120;
    v83[0] = v115;
    v83[1] = v116;
    *(void *)&v83[10] = v49;
    *((double *)&v83[10] + 1) = v48;
    LOBYTE(v83[11]) = v56;
    *((void *)&v83[11] + 1) = v52;
    *(void *)&v83[12] = v53;
    *((void *)&v83[12] + 1) = v54;
    *(void *)&v83[13] = v55;
    LOBYTE(v52) = (_BYTE)v62;
    BYTE8(v83[13]) = (_BYTE)v62;
    LOBYTE(v83[14]) = v58;
    *(_OWORD *)((char *)&v83[14] + 8) = 0u;
    *(_OWORD *)((char *)&v83[15] + 8) = 0u;
    BYTE8(v83[16]) = v73;
    LOBYTE(v83[17]) = v59;
    char v60 = v59;
    *(_OWORD *)((char *)&v83[17] + 8) = 0u;
    *(_OWORD *)((char *)&v83[18] + 8) = 0u;
    BYTE8(v83[19]) = 1;
    v84[0] = v130;
    v84[1] = v131;
    v84[4] = v134;
    void v84[5] = v135;
    v84[2] = v132;
    v84[3] = v133;
    v84[8] = v76;
    memset(&v84[9], 0, 32);
    v84[6] = v136;
    v84[7] = v137;
    LOBYTE(v84[14]) = v126;
    memset(&v84[12], 0, 32);
    v84[11] = v79;
    memcpy((char *)&v84[14] + 8, v83, 0x139uLL);
    memcpy(v67, v84, 0x221uLL);
    v85[6] = v121;
    v85[7] = v122;
    v85[8] = v123;
    v85[9] = v124;
    v85[2] = v117;
    v85[3] = v118;
    v85[4] = v119;
    v85[5] = v120;
    v85[0] = v115;
    v85[1] = v116;
    long long v86 = v65;
    double v87 = v48;
    char v88 = v56;
    uint64_t v89 = v64;
    uint64_t v90 = v53;
    uint64_t v91 = v54;
    uint64_t v92 = v55;
    char v93 = v52;
    char v94 = (char)v66;
    long long v95 = 0u;
    long long v96 = 0u;
    char v97 = v63;
    char v98 = v60;
    long long v99 = 0u;
    long long v100 = 0u;
    char v101 = 1;
    sub_10004ED30((uint64_t)v75);
    sub_1000439C8((uint64_t)v83);
    sub_100043A24((uint64_t)v85);
    v102[6] = v136;
    v102[7] = v137;
    uint64_t v103 = v138;
    v102[2] = v132;
    v102[3] = v133;
    v102[4] = v134;
    v102[5] = v135;
    v102[0] = v130;
    v102[1] = v131;
    char v104 = v70;
    *(_DWORD *)uint64_t v105 = *(_DWORD *)v129;
    *(_DWORD *)&v105[3] = *(_DWORD *)&v129[3];
    long long v106 = 0u;
    long long v107 = 0u;
    char v108 = v69;
    *(_DWORD *)uint64_t v109 = *(_DWORD *)v128;
    *(_DWORD *)&v109[3] = *(_DWORD *)&v128[3];
    char v110 = v71;
    *(_DWORD *)uint64_t v111 = *(_DWORD *)v127;
    *(_DWORD *)&v111[3] = *(_DWORD *)&v127[3];
    long long v112 = 0u;
    long long v113 = 0u;
    char v114 = (char)v68;
    return sub_10004F584((uint64_t)v102);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001093B8@<X0>(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = [self mainBundle];
  v47._uint64_t object = (void *)0x80000001002CE9D0;
  v7._uint64_t countAndFlagsBits = 0x6553206F74206F47;
  v7._uint64_t object = (void *)0xEE0073676E697474;
  v8._uint64_t countAndFlagsBits = 0;
  v8._uint64_t object = (void *)0xE000000000000000;
  v47._uint64_t countAndFlagsBits = 0xD000000000000064;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v47);

  long long v10 = *a1;
  long long v41 = a1[1];
  long long v42 = v10;
  long long v38 = a1[2];
  uint64_t v40 = v38;
  sub_10000D544((uint64_t)&v38 + 8, (uint64_t)v39, &qword_1003878F0);
  uint64_t v11 = (_OWORD *)swift_allocObject();
  long long v12 = a1[1];
  v11[1] = *a1;
  v11[2] = v12;
  v11[3] = a1[2];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = swift_getKeyPath();
  char v46 = 1;
  sub_10004ED30((uint64_t)&v42);
  sub_10004ED30((uint64_t)&v41);
  sub_10003E68C((uint64_t)&v40);
  sub_10004ED30((uint64_t)v39);
  State.init(wrappedValue:)();
  char v46 = 0;
  State.init(wrappedValue:)();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  sub_100008F88(a2, v13);
  double v15 = (*(double (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  char v33 = static Edge.Set.all.getter();
  char v45 = 0;
  char v44 = 0;
  char v43 = 0;
  char v32 = static Edge.Set.top.getter();
  char v22 = v45;
  LOBYTE(v13) = v44;
  LOBYTE(v14) = v43;
  char v46 = 1;
  char v23 = static Edge.Set.bottom.getter();
  uint64_t v24 = a2[3];
  uint64_t v25 = a2[4];
  sub_100008F88(a2, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 112))(v24, v25);
  uint64_t result = EdgeInsets.init(_all:)();
  char v27 = v46;
  *(void *)a3 = KeyPath;
  *(unsigned char *)(a3 + 8) = v22;
  *(void *)(a3 + 16) = v34;
  *(unsigned char *)(a3 + 24) = v13;
  *(Swift::String *)(a3 + 32) = v9;
  *(void *)(a3 + 48) = sub_10010BC6C;
  *(void *)(a3 + 56) = v11;
  *(unsigned char *)(a3 + 64) = v36;
  *(void *)(a3 + 72) = v37;
  *(unsigned char *)(a3 + 80) = v36;
  *(void *)(a3 + 88) = v37;
  *(unsigned char *)(a3 + 96) = v33;
  *(double *)(a3 + 104) = v15;
  *(void *)(a3 + 112) = v17;
  *(void *)(a3 + 120) = v19;
  *(void *)(a3 + 128) = v21;
  *(unsigned char *)(a3 + 136) = v14;
  *(unsigned char *)(a3 + 144) = v32;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(unsigned char *)(a3 + 184) = v27;
  *(unsigned char *)(a3 + 192) = v23;
  *(void *)(a3 + 200) = v28;
  *(void *)(a3 + 208) = v29;
  *(void *)(a3 + 216) = v30;
  *(void *)(a3 + 224) = v31;
  *(unsigned char *)(a3 + 232) = 0;
  return result;
}

uint64_t sub_1001096CC(void *a1)
{
  if (*a1)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  else
  {
    type metadata accessor for AppEvents();
    sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100109774()
{
  uint64_t v0 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_100004010(&qword_1003818D8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter();
  ToolbarItem<>.init(placement:content:)();
  sub_100009B18(&qword_1003818E8, &qword_1003818D8);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1001098F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10010B974(0xD000000000000012, (void *)0x80000001002CB6B0, 0xD00000000000004ELL, (void *)0x80000001002CB6D0, a1);
}

uint64_t sub_100109930@<X0>(uint64_t a1@<X8>)
{
  return sub_100108134(a1);
}

uint64_t sub_10010996C@<X0>(uint64_t a1@<X8>)
{
  v13[3] = a1;
  uint64_t v2 = *(void **)(v1 + 32);
  if (v2)
  {
    uint64_t v3 = v2[9];
    uint64_t v4 = v2[10];
    sub_100008F88(v2 + 6, v3);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v18, v3, v4);
    sub_100004010(&qword_1003878B8);
    uint64_t v5 = State.projectedValue.getter();
    void v13[2] = v13;
    v17[0] = v14;
    *(_OWORD *)&v17[1] = v15;
    __chkstk_darwin(v5);
    v13[1] = sub_100004010(&qword_100380040);
    sub_100004010(&qword_1003879D0);
    sub_100009B18(&qword_1003878C8, &qword_100380040);
    sub_100009B18(&qword_100381CF8, &qword_100380040);
    sub_100009B18(&qword_1003878D0, &qword_100380040);
    uint64_t v6 = sub_1000094C4(&qword_1003879D8);
    uint64_t v7 = sub_1000094C4(&qword_100387908);
    uint64_t v8 = sub_1000094C4(&qword_1003879E0);
    uint64_t v9 = sub_100009B18(&qword_1003879E8, &qword_1003879E0);
    uint64_t v14 = v8;
    *(void *)&long long v15 = v9;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v11 = sub_100009B18(&qword_100387920, &qword_100387908);
    uint64_t v14 = v6;
    *(void *)&long long v15 = v7;
    *((void *)&v15 + 1) = OpaqueTypeConformance2;
    uint64_t v16 = v11;
    swift_getOpaqueTypeConformance2();
    NavigationStack.init<>(path:root:)();
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v18);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100109C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v22[1] = a3;
  uint64_t v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_1003879D8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000090FC(a2, (uint64_t)&v23);
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v13 + 64) = v14;
  *(void *)(v13 + 80) = *(void *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v13 + 32) = v15;
  sub_100009164(&v23, v13 + 88);
  sub_10010CD20(a1);
  type metadata accessor for UIMetrics();
  sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v16 = EnvironmentObject.init()();
  uint64_t v18 = v17;
  type metadata accessor for CGSize(0);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  State.init(wrappedValue:)();
  *(void *)&long long v23 = v16;
  *((void *)&v23 + 1) = v18;
  uint64_t v24 = sub_10010CD14;
  uint64_t v25 = v13;
  uint64_t v26 = sub_10010B3CC;
  uint64_t v27 = 0;
  long long v28 = v32;
  uint64_t v29 = v33;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v5);
  uint64_t v19 = sub_100004010(&qword_1003879E0);
  uint64_t v20 = sub_100009B18(&qword_1003879E8, &qword_1003879E0);
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v22[4] = a1;
  sub_100004010(&qword_100387908);
  *(void *)&long long v23 = v19;
  *((void *)&v23 + 1) = v20;
  swift_getOpaqueTypeConformance2();
  sub_100009B18(&qword_100387920, &qword_100387908);
  View.toolbar<A>(content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10010A024@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004010(&qword_1003879F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  uint64_t v9 = sub_100004010(&qword_1003879F8);
  sub_10010A144(a1, a2, (uint64_t *)&v8[*(int *)(v9 + 44)]);
  uint64_t v10 = sub_100008F88(a2, a2[3]);
  uint64_t v11 = *v10;
  long long v16 = *(_OWORD *)(*v10 + 48);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = *(void *)(v11 + 72);
  LOBYTE(a2) = static Edge.Set.all.getter();
  sub_10000D2A0((uint64_t)v8, a3, &qword_1003879F0);
  uint64_t v14 = a3 + *(int *)(sub_100004010(&qword_100387A00) + 36);
  *(unsigned char *)uint64_t v14 = (_BYTE)a2;
  *(_OWORD *)(v14 + 8) = v16;
  *(void *)(v14 + 24) = v12;
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = 0;
  return sub_10000950C((uint64_t)v8, &qword_1003879F0);
}

uint64_t sub_10010A144@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v197 = a2;
  uint64_t v198 = a3;
  uint64_t v4 = sub_100004010(&qword_100382050);
  __chkstk_darwin(v4 - 8);
  long long v175 = &v151[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v174 = sub_100004010(&qword_100387A08);
  __chkstk_darwin(v174);
  uint64_t v178 = &v151[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v177 = sub_100004010(&qword_100387A10);
  __chkstk_darwin(v177);
  uint64_t v182 = &v151[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v181 = sub_100004010(&qword_100387A18);
  __chkstk_darwin(v181);
  long long v186 = &v151[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100004010(&qword_100387A20);
  __chkstk_darwin(v9 - 8);
  long long v189 = &v151[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v187 = sub_100004010(&qword_100387A28);
  __chkstk_darwin(v187);
  double v193 = &v151[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v188 = sub_100004010(&qword_100387A30);
  __chkstk_darwin(v188);
  char v194 = &v151[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v191 = sub_100004010(&qword_100387A38);
  __chkstk_darwin(v191);
  long long v195 = &v151[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v192 = sub_100004010(&qword_100387A40);
  uint64_t v14 = __chkstk_darwin(v192);
  __int16 v203 = &v151[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v14);
  long long v190 = &v151[-v17];
  __chkstk_darwin(v16);
  uint64_t v196 = &v151[-v18];
  uint64_t v19 = type metadata accessor for AccessibilityTraits();
  uint64_t v160 = *(void *)(v19 - 8);
  *(void *)&long long v161 = v19;
  __chkstk_darwin(v19);
  uint64_t v159 = &v151[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = sub_100004010(&qword_100385968);
  __chkstk_darwin(v21 - 8);
  int v166 = &v151[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v162 = sub_100004010(&qword_100387A48);
  __chkstk_darwin(v162);
  int v167 = &v151[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v164 = sub_100004010(&qword_100387A50);
  __chkstk_darwin(v164);
  uint64_t v168 = &v151[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v165 = sub_100004010(&qword_100387A58);
  uint64_t v25 = __chkstk_darwin(v165);
  char v202 = &v151[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v163 = &v151[-v28];
  __chkstk_darwin(v27);
  long long v204 = &v151[-v29];
  type metadata accessor for ConnectionClosedModel(0);
  sub_10010CC2C(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
  uint64_t v201 = EnvironmentObject.init()();
  uint64_t v179 = v30;
  type metadata accessor for ConnectivityModel();
  sub_10010CC2C(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
  uint64_t v200 = EnvironmentObject.init()();
  uint64_t v176 = v31;
  type metadata accessor for GuidanceModel(0);
  sub_10010CC2C(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
  uint64_t v185 = EnvironmentObject.init()();
  uint64_t v173 = v32;
  type metadata accessor for OrientationModel();
  sub_10010CC2C(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
  uint64_t v184 = EnvironmentObject.init()();
  uint64_t v172 = v33;
  type metadata accessor for StewieModel();
  sub_10010CC2C(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v183 = EnvironmentObject.init()();
  uint64_t v171 = v34;
  type metadata accessor for UIMetrics();
  sub_10010CC2C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v180 = EnvironmentObject.init()();
  uint64_t v170 = v35;
  uint64_t v36 = *(void *)(a1 + 32);
  if (v36)
  {
    uint64_t v37 = *(void *)(v36 + 72);
    uint64_t v38 = *(void *)(v36 + 80);
    sub_100008F88((void *)(v36 + 48), v37);
    uint64_t v39 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 144))(v39, v37, v38);
    uint64_t v156 = v41;
    uint64_t v157 = v40;
    uint64_t v42 = *(void *)(v36 + 72);
    uint64_t v43 = *(void *)(v36 + 80);
    sub_100008F88((void *)(v36 + 48), v42);
    *(void *)&v216[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 136))(v39, v42, v43);
    *((void *)&v216[0] + 1) = v44;
    unint64_t v155 = sub_100033310();
    uint64_t v45 = Text.init<A>(_:)();
    uint64_t v47 = v46;
    char v49 = v48 & 1;
    uint64_t v50 = *(void *)(v36 + 72);
    uint64_t v51 = *(void *)(v36 + 80);
    sub_100008F88((void *)(v36 + 48), v50);
    (*(void (**)(uint64_t, uint64_t))(v51 + 56))(v50, v51);
    uint64_t v52 = Text.font(_:)();
    uint64_t v169 = v53;
    *(void *)&long long v199 = v54;
    LOBYTE(v50) = v55 & 1;
    sub_100033364(v45, v47, v49);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v56 = *(void *)(v36 + 72);
    uint64_t v57 = *(void *)(v36 + 80);
    uint64_t v158 = (void *)(v36 + 48);
    sub_100008F88((void *)(v36 + 48), v56);
    (*(void (**)(uint64_t, uint64_t))(v57 + 64))(v56, v57);
    uint64_t v58 = v169;
    uint64_t v59 = Text.foregroundColor(_:)();
    uint64_t v153 = v60;
    uint64_t v154 = v59;
    int v152 = v61;
    uint64_t v63 = v62;
    sub_100033364(v52, v58, v50);
    swift_release();
    swift_bridgeObjectRelease();
    id v64 = *(id *)(v36 + 112);
    LOBYTE(v57) = static UIContentSizeCategory.>= infix(_:_:)();

    BOOL v65 = (v57 & 1) == 0;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v169 = v36;
    id v67 = *(id *)(v36 + 112);
    static Alignment.center.getter();
    *(void *)&long long v199 = UIContentSizeCategoryAccessibilityExtraLarge;
    if (static UIContentSizeCategory.>= infix(_:_:)())
    {
      static Alignment.center.getter();
      if (static Alignment.== infix(_:_:)()) {
        static Alignment.leading.getter();
      }
    }

    uint64_t v69 = v153;
    uint64_t v68 = v154;
    uint64_t v218 = v154;
    uint64_t v219 = v153;
    char v70 = v152 & 1;
    char v220 = v152 & 1;
    uint64_t v221 = v63;
    uint64_t v222 = KeyPath;
    BOOL v223 = v65;
    sub_100165BAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v217, 0.0, 1, 0.0, 1);
    sub_100033364(v68, v69, v70);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v71 = v169;
    id v72 = *(id *)(v169 + 112);
    char v73 = static UIContentSizeCategory.>= infix(_:_:)();

    if (v73) {
      double v74 = 1.0;
    }
    else {
      double v74 = 0.5;
    }
    uint64_t v75 = swift_getKeyPath();
    long long v211 = v217[6];
    long long v212 = v217[7];
    long long v213 = v217[8];
    long long v214 = v217[9];
    long long v207 = v217[2];
    long long v208 = v217[3];
    long long v209 = v217[4];
    long long v210 = v217[5];
    long long v205 = v217[0];
    long long v206 = v217[1];
    *(void *)&long long v215 = v75;
    *((double *)&v215 + 1) = v74;
    long long v76 = v159;
    static AccessibilityTraits.isHeader.getter();
    sub_100004010(&qword_100385988);
    sub_1000C57C0();
    uint64_t v77 = (uint64_t)v166;
    View.accessibility(addTraits:)();
    (*(void (**)(unsigned char *, void))(v160 + 8))(v76, v161);
    v216[8] = v213;
    v216[9] = v214;
    v216[10] = v215;
    v216[4] = v209;
    v216[5] = v210;
    v216[6] = v211;
    v216[7] = v212;
    v216[0] = v205;
    v216[1] = v206;
    v216[2] = v207;
    v216[3] = v208;
    sub_100043A24((uint64_t)v216);
    long long v78 = v197;
    long long v79 = sub_100008F88(v197, v197[3]);
    uint64_t v80 = *v79;
    long long v161 = *(_OWORD *)(*v79 + 184);
    uint64_t v81 = *(void *)(v80 + 200);
    uint64_t v82 = *(void *)(v80 + 208);
    char v83 = static Edge.Set.all.getter();
    long long v84 = v167;
    sub_10000D2A0(v77, (uint64_t)v167, &qword_100385968);
    long long v85 = &v84[*(int *)(v162 + 36)];
    *long long v85 = v83;
    *(_OWORD *)(v85 + 8) = v161;
    *((void *)v85 + 3) = v81;
    *((void *)v85 + 4) = v82;
    v85[40] = 0;
    sub_10000950C(v77, &qword_100385968);
    char v86 = static Edge.Set.top.getter();
    double v87 = v168;
    sub_10000D2A0((uint64_t)v84, (uint64_t)v168, &qword_100387A48);
    char v88 = &v87[*(int *)(v164 + 36)];
    *char v88 = v86;
    *(_OWORD *)(v88 + 8) = 0u;
    *(_OWORD *)(v88 + 24) = 0u;
    v88[40] = 1;
    sub_10000950C((uint64_t)v84, &qword_100387A48);
    char v89 = static Edge.Set.bottom.getter();
    uint64_t v90 = v163;
    sub_10000D2A0((uint64_t)v87, (uint64_t)v163, &qword_100387A50);
    uint64_t v91 = &v90[*(int *)(v165 + 36)];
    *uint64_t v91 = v89;
    *(_OWORD *)(v91 + 8) = 0u;
    *(_OWORD *)(v91 + 24) = 0u;
    v91[40] = 1;
    sub_10000950C((uint64_t)v87, &qword_100387A50);
    sub_10000D544((uint64_t)v90, (uint64_t)v204, &qword_100387A58);
    *(void *)&long long v205 = v157;
    *((void *)&v205 + 1) = v156;
    swift_bridgeObjectRetain();
    uint64_t v92 = Text.init<A>(_:)();
    uint64_t v94 = v93;
    *(void *)&long long v205 = v92;
    *((void *)&v205 + 1) = v93;
    LOBYTE(v84) = v95 & 1;
    LOBYTE(v206) = v95 & 1;
    *((void *)&v206 + 1) = v96;
    swift_bridgeObjectRelease();
    uint64_t v97 = (uint64_t)v175;
    View.accessibility(hidden:)();
    sub_100033364(v92, v94, (char)v84);
    swift_bridgeObjectRelease();
    uint64_t v98 = *(void *)(v71 + 72);
    uint64_t v99 = *(void *)(v71 + 80);
    long long v100 = v158;
    sub_100008F88(v158, v98);
    uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 48))(v98, v99);
    uint64_t v102 = swift_getKeyPath();
    uint64_t v103 = v178;
    sub_10000D2A0(v97, (uint64_t)v178, &qword_100382050);
    char v104 = (uint64_t *)&v103[*(int *)(v174 + 36)];
    *char v104 = v102;
    v104[1] = v101;
    sub_10000950C(v97, &qword_100382050);
    uint64_t v105 = *(void *)(v71 + 72);
    uint64_t v106 = *(void *)(v71 + 80);
    sub_100008F88(v100, v105);
    uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 64))(v105, v106);
    uint64_t v108 = swift_getKeyPath();
    uint64_t v109 = v182;
    sub_10000D2A0((uint64_t)v103, (uint64_t)v182, &qword_100387A08);
    char v110 = (uint64_t *)&v109[*(int *)(v177 + 36)];
    *char v110 = v108;
    v110[1] = v107;
    sub_10000950C((uint64_t)v103, &qword_100387A08);
    id v111 = *(id *)(v71 + 112);
    LOBYTE(v108) = static UIContentSizeCategory.>= infix(_:_:)();

    uint64_t v112 = swift_getKeyPath();
    long long v113 = v186;
    sub_10000D2A0((uint64_t)v109, (uint64_t)v186, &qword_100387A10);
    char v114 = &v113[*(int *)(v181 + 36)];
    *(void *)char v114 = v112;
    v114[8] = (v108 & 1) == 0;
    sub_10000950C((uint64_t)v109, &qword_100387A10);
    id v115 = *(id *)(v71 + 112);
    uint64_t v116 = static Alignment.center.getter();
    uint64_t v118 = v117;
    if (static UIContentSizeCategory.>= infix(_:_:)())
    {
      static Alignment.center.getter();
      if (static Alignment.== infix(_:_:)())
      {
        uint64_t v116 = static Alignment.leading.getter();
        uint64_t v118 = v119;
      }
    }

    long long v120 = v189;
    sub_100166F10(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v189, 0.0, 1, 0.0, 1, v116, v118);
    sub_10000950C((uint64_t)v113, &qword_100387A18);
    id v121 = *(id *)(v71 + 112);
    char v122 = static UIContentSizeCategory.>= infix(_:_:)();

    if (v122) {
      double v123 = 1.0;
    }
    else {
      double v123 = 0.5;
    }
    uint64_t v124 = swift_getKeyPath();
    unsigned __int8 v125 = v193;
    sub_10000D2A0((uint64_t)v120, (uint64_t)v193, &qword_100387A20);
    unsigned __int8 v126 = (double *)&v125[*(int *)(v187 + 36)];
    *(void *)unsigned __int8 v126 = v124;
    v126[1] = v123;
    sub_10000950C((uint64_t)v120, &qword_100387A20);
    uint64_t v127 = sub_100008F88(v78, v78[3]);
    uint64_t v128 = *v127;
    long long v199 = *(_OWORD *)(*v127 + 184);
    uint64_t v129 = *(void *)(v128 + 200);
    uint64_t v130 = *(void *)(v128 + 208);
    LOBYTE(v124) = static Edge.Set.all.getter();
    long long v131 = v194;
    sub_10000D2A0((uint64_t)v125, (uint64_t)v194, &qword_100387A28);
    long long v132 = &v131[*(int *)(v188 + 36)];
    *long long v132 = v124;
    *(_OWORD *)(v132 + 8) = v199;
    *((void *)v132 + 3) = v129;
    *((void *)v132 + 4) = v130;
    v132[40] = 0;
    sub_10000950C((uint64_t)v125, &qword_100387A28);
    LOBYTE(v124) = static Edge.Set.top.getter();
    long long v133 = v195;
    sub_10000D2A0((uint64_t)v131, (uint64_t)v195, &qword_100387A30);
    long long v134 = &v133[*(int *)(v191 + 36)];
    *long long v134 = v124;
    *(_OWORD *)(v134 + 8) = 0u;
    *(_OWORD *)(v134 + 24) = 0u;
    v134[40] = 1;
    sub_10000950C((uint64_t)v131, &qword_100387A30);
    LOBYTE(v124) = static Edge.Set.bottom.getter();
    long long v135 = v190;
    sub_10000D2A0((uint64_t)v133, (uint64_t)v190, &qword_100387A38);
    long long v136 = &v135[*(int *)(v192 + 36)];
    unsigned char *v136 = v124;
    *(_OWORD *)(v136 + 8) = 0u;
    *(_OWORD *)(v136 + 24) = 0u;
    v136[40] = 1;
    sub_10000950C((uint64_t)v133, &qword_100387A38);
    long long v137 = v196;
    sub_10000D544((uint64_t)v135, (uint64_t)v196, &qword_100387A40);
    uint64_t v138 = v202;
    sub_10000D2A0((uint64_t)v204, (uint64_t)v202, &qword_100387A58);
    sub_10000D2A0((uint64_t)v137, (uint64_t)v203, &qword_100387A40);
    uint64_t v139 = v198;
    uint64_t v140 = v179;
    uint64_t v141 = v180;
    *uint64_t v198 = v201;
    v139[1] = v140;
    uint64_t v142 = v176;
    v139[2] = v200;
    v139[3] = v142;
    uint64_t v143 = v184;
    uint64_t v144 = v173;
    v139[4] = v185;
    v139[5] = v144;
    uint64_t v145 = v172;
    v139[6] = v143;
    v139[7] = v145;
    uint64_t v146 = v171;
    v139[8] = v183;
    v139[9] = v146;
    uint64_t v147 = v170;
    v139[10] = v141;
    v139[11] = v147;
    *((unsigned char *)v139 + 96) = 0;
    v139[13] = 0;
    uint64_t v148 = sub_100004010(&qword_100387A60);
    sub_10000D2A0((uint64_t)v138, (uint64_t)v139 + *(int *)(v148 + 48), &qword_100387A58);
    uint64_t v149 = v203;
    sub_10000D2A0((uint64_t)v203, (uint64_t)v139 + *(int *)(v148 + 64), &qword_100387A40);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    sub_10000950C((uint64_t)v137, &qword_100387A40);
    sub_10000950C((uint64_t)v204, &qword_100387A58);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10000950C((uint64_t)v149, &qword_100387A40);
    sub_10000950C((uint64_t)v202, &qword_100387A58);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10010B3CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static HorizontalAlignment.center.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_10010B3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v28 = sub_100004010(&qword_100387928);
  __chkstk_darwin(v28);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100004010(&qword_100387930);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004010(&qword_100387938);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = sub_100004010(&qword_1003818D8);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter();
  ToolbarItem<>.init(placement:content:)();
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    if (*(unsigned char *)(v19 + 40))
    {
      static ToolbarItemPlacement.navigationBarTrailing.getter();
      sub_10010C2E0();
      ToolbarItem<>.init(placement:content:)();
      uint64_t v20 = sub_100009B18(&qword_100387948, &qword_100387930);
      static ToolbarContentBuilder.buildBlock<A>(_:)();
      uint64_t v21 = sub_100004010(&qword_100387940);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v11, 0, 1, v21);
      uint64_t v30 = v5;
      uint64_t v31 = v20;
      swift_getOpaqueTypeConformance2();
      static ToolbarContentBuilder.buildIf<A>(_:)();
      sub_10000950C((uint64_t)v11, &qword_100387938);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
    }
    else
    {
      uint64_t v22 = sub_100004010(&qword_100387940);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 1, 1, v22);
      uint64_t v23 = sub_100009B18(&qword_100387948, &qword_100387930);
      uint64_t v30 = v5;
      uint64_t v31 = v23;
      swift_getOpaqueTypeConformance2();
      static ToolbarContentBuilder.buildIf<A>(_:)();
      sub_10000950C((uint64_t)v11, &qword_100387938);
    }
    uint64_t v24 = (uint64_t)&v4[*(int *)(v28 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v4, v18, v15);
    sub_10000D2A0((uint64_t)v13, v24, &qword_100387938);
    TupleToolbarContent.init(_:)();
    sub_10000950C((uint64_t)v13, &qword_100387938);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    type metadata accessor for AppRuntimeStateModel();
    sub_10010CC2C(&qword_100380B58, (void (*)(uint64_t))type metadata accessor for AppRuntimeStateModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10010B93C@<X0>(uint64_t a1@<X8>)
{
  return sub_10010B974(0xD000000000000014, (void *)0x80000001002C75B0, 0xD00000000000008ALL, (void *)0x80000001002C75D0, a1);
}

uint64_t sub_10010B974@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v10 = [self mainBundle];
  v25._uint64_t object = a4;
  v11._uint64_t countAndFlagsBits = a1;
  v11._uint64_t object = a2;
  v12._uint64_t countAndFlagsBits = 0;
  v12._uint64_t object = (void *)0xE000000000000000;
  v25._uint64_t countAndFlagsBits = a3;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v25);

  sub_100033310();
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  LOBYTE(a1) = v16 & 1;
  static Font.headline.getter();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  sub_100033364(v13, v15, a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a5 = v17;
  *(void *)(a5 + 8) = v19;
  *(unsigned char *)(a5 + 16) = v21 & 1;
  *(void *)(a5 + 24) = v23;
  return result;
}

uint64_t sub_10010BAAC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_10010CC2C((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t result = EnvironmentObject.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10010BB1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10010996C(a1);
}

uint64_t sub_10010BB60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010BB7C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010BB98@<X0>(uint64_t a1@<X8>)
{
  return sub_1001084B8(*(long long **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10010BBA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100108978(v1 + 16, (void *)(v1 + 64), a1);
}

uint64_t sub_10010BBB8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 64);

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10010BC10@<X0>(uint64_t a1@<X8>)
{
  return sub_1001093B8((long long *)(v1 + 16), (void *)(v1 + 64), a1);
}

uint64_t sub_10010BC1C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10010BC6C()
{
  return sub_1001096CC((void *)(v0 + 16));
}

uint64_t sub_10010BC84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  uint64_t v3 = *(void *)(a1 + 264);
  char v4 = *(unsigned char *)(a1 + 272);
  swift_retain();
  sub_100033724(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10010BD04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  uint64_t v3 = *(void *)(a1 + 264);
  char v4 = *(unsigned char *)(a1 + 272);
  swift_release();
  sub_100033364(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010BD84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10010BDB0()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10010BDEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100105300(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10010BDF4()
{
  uint64_t v1 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v9 = *(void *)(*(void *)(v1 - 8) + 64);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3 + *(int *)(v1 + 32);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ConnectionClosed(0) + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v3 + v9, v2 | 7);
}

uint64_t sub_10010BFA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_10010C008@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for SOSConnectionEndedView();

  *(void *)&double result = sub_100105824((void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_10010C07C()
{
  uint64_t v1 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3 + *(int *)(v1 + 32);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ConnectionClosed(0) + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  unint64_t v8 = (v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + v8);

  return _swift_deallocObject(v0, v8 + 40, v2 | 7);
}

double sub_10010C234@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SOSConnectionEndedView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100106E10(v1 + v4, v5, a1);
}

uint64_t sub_10010C2D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001079EC(*(void *)(v1 + 16), a1);
}

uint64_t sub_10010C2D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100107FA0(*(void *)(v1 + 16), a1);
}

unint64_t sub_10010C2E0()
{
  unint64_t result = qword_100387950;
  if (!qword_100387950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387950);
  }
  return result;
}

double sub_10010C334(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 122) = -1;
  *(_WORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_10010C35C(uint64_t result)
{
  *(unsigned char *)(result + 122) = 1;
  return result;
}

unint64_t sub_10010C368()
{
  unint64_t result = qword_100387978;
  if (!qword_100387978)
  {
    sub_1000094C4(&qword_100387968);
    sub_10010CD90(&qword_100387980, &qword_100387988, (void (*)(void))sub_10010C408);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387978);
  }
  return result;
}

uint64_t sub_10010C408()
{
  return sub_10010CD90(&qword_100387990, &qword_100387998, (void (*)(void))sub_1000E8798);
}

uint64_t sub_10010C438()
{
  return sub_10010CD90(&qword_1003879A8, &qword_1003879B0, (void (*)(void))sub_10010C468);
}

unint64_t sub_10010C468()
{
  unint64_t result = qword_1003879B8;
  if (!qword_1003879B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003879B8);
  }
  return result;
}

uint64_t sub_10010C4BC()
{
  uint64_t v1 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v9 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3 + *(int *)(v1 + 32);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ConnectionClosed(0) + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v9 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10010C66C()
{
  uint64_t v1 = *(void *)(type metadata accessor for SOSConnectionEndedView() - 8);
  uint64_t v2 = (void *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_100107918(v2);
}

uint64_t sub_10010C6F8(uint64_t result)
{
  *(unsigned char *)(result + 121) = 1;
  return result;
}

uint64_t sub_10010C704(uint64_t result)
{
  *(unsigned char *)(result + 122) = 0;
  return result;
}

uint64_t sub_10010C70C()
{
  uint64_t v1 = type metadata accessor for SOSConnectionEndedView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v9 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3 + *(int *)(v1 + 32);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ConnectionClosed(0) + 20);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v3 + v9, v2 | 7);
}

uint64_t sub_10010C8B0()
{
  uint64_t v1 = *(void *)(type metadata accessor for SOSConnectionEndedView() - 8);
  uint64_t v2 = (void *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_100107810(v2);
}

uint64_t sub_10010C910(uint64_t result)
{
  *(unsigned char *)(result + 121) = 0;
  return result;
}

uint64_t sub_10010C920@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10010C94C()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10010C978@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10010C9AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10010C9E0()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_10010CA10()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_10010CA40(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010CAEC(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10010CB40(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10010CB90(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v8 = *(unsigned char *)(a1 + 312);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    *(void *)(a1 + 304),
    v8);
  return a1;
}

uint64_t sub_10010CC2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_10010CC74(_OWORD *a1)
{
  double result = 0.0;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *(_OWORD *)((char *)a1 + 297) = 0u;
  return result;
}

uint64_t sub_10010CCAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100109C74(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10010CCB4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 88);

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10010CD14@<X0>(uint64_t a1@<X8>)
{
  return sub_10010A024(v1 + 16, (void *)(v1 + 88), a1);
}

uint64_t sub_10010CD20(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010CD88@<X0>(uint64_t a1@<X8>)
{
  return sub_10010B3F8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10010CD90(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010CE0C()
{
  return sub_100009B18(&qword_100387A68, &qword_100387A70);
}

uint64_t sub_10010CE48()
{
  return sub_100009B18(&qword_100387A78, &qword_100387A80);
}

uint64_t sub_10010CE84()
{
  return sub_100009B18(&qword_100387A88, &qword_100387A90);
}

ValueMetadata *type metadata accessor for ExplorerTryOutConnectionToolbarView()
{
  return &type metadata for ExplorerTryOutConnectionToolbarView;
}

uint64_t sub_10010CED0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010CEEC()
{
  uint64_t result = sub_1000AB188();
  qword_1003A9BB0 = result;
  return result;
}

uint64_t sub_10010CF10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v29 = sub_100004010(&qword_10037F010);
  __chkstk_darwin(v29);
  long long v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100004010(&qword_100387A98);
  uint64_t v7 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = static VerticalAlignment.center.getter();
  uint64_t v28 = a2;
  sub_10010D38C(a1, (uint64_t)v42);
  v43[336] = 0;
  memcpy(&v43[7], v42, 0x149uLL);
  char v11 = static Edge.Set.horizontal.getter();
  v43[344] = 1;
  uint64_t v35 = v10;
  uint64_t v36 = 0;
  char v37 = 0;
  memcpy(v38, v43, 0x150uLL);
  v38[343] = v11;
  long long v39 = 0u;
  long long v40 = 0u;
  char v41 = 1;
  static Alignment.center.getter();
  sub_100166F6C(0.0, 1, 0.0, 1, INFINITY, 0, 56.0, 0, (uint64_t)v44, 0.0, 1, 0.0, 1);
  sub_10010DB04((uint64_t)v42);
  char v12 = static Edge.Set.top.getter();
  if (a1)
  {
    char v13 = v12;
    uint64_t v14 = qword_10037DCE8;
    swift_retain();
    if (v14 != -1) {
      swift_once();
    }
    swift_release();
    EdgeInsets.init(_all:)();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    char v33 = 0;
    if (qword_10037DE48 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_1003A9BB0;
    swift_retain();
    char v24 = static Edge.Set.all.getter();
    memcpy(v32, v44, 0x208uLL);
    LOBYTE(v32[65]) = v13;
    v32[66] = v16;
    v32[67] = v18;
    v32[68] = v20;
    v32[69] = v22;
    LOBYTE(v32[70]) = v33;
    v32[71] = v23;
    LOBYTE(v32[72]) = v24;
    uint64_t v25 = enum case for DynamicTypeSize.xLarge(_:);
    uint64_t v26 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v6, v25, v26);
    sub_10010DF68(&qword_10037F020, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      sub_100004010(&qword_100387AA0);
      sub_10010DBF0();
      sub_100009B18(&qword_10037F030, &qword_10037F010);
      View.dynamicTypeSize<A>(_:)();
      sub_10010DE08((uint64_t)v6);
      memcpy(v34, v32, 0x241uLL);
      sub_10010DE68((uint64_t)v34);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v31, v9, v30);
    }
    __break(1u);
  }
  type metadata accessor for UIMetrics();
  sub_10010DF68((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10010D38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.leading.getter();
  sub_10010D6E8(a1, (uint64_t)v34);
  *(_OWORD *)&v36[87] = v34[5];
  *(_OWORD *)&v36[103] = v34[6];
  *(_OWORD *)&v36[119] = v35[0];
  *(_OWORD *)&v36[129] = *(_OWORD *)((char *)v35 + 10);
  *(_OWORD *)&v36[23] = v34[1];
  *(_OWORD *)&v36[39] = v34[2];
  *(_OWORD *)&v36[55] = v34[3];
  *(_OWORD *)&v36[71] = v34[4];
  char v37 = 0;
  *(_OWORD *)&v36[7] = v34[0];
  char v33 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  char v38 = 0;
  if (qword_10037DE48 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_1003A9BB0;
  type metadata accessor for AppEvents();
  sub_10010DF68((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  swift_retain();
  uint64_t v13 = EnvironmentObject.init()();
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  type metadata accessor for TryOutModel();
  sub_10010DF68(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
  uint64_t v15 = EnvironmentObject.init()();
  uint64_t v17 = v16;
  LOBYTE(v39) = 0;
  State.init(wrappedValue:)();
  char v18 = v46;
  uint64_t v19 = v47;
  char v20 = static Edge.Set.leading.getter();
  long long v39 = (unint64_t)v4;
  v40[0] = 0;
  *(_OWORD *)&v40[97] = *(_OWORD *)&v36[96];
  *(_OWORD *)&v40[113] = *(_OWORD *)&v36[112];
  *(_OWORD *)&v40[129] = *(_OWORD *)&v36[128];
  v40[145] = v36[144];
  *(_OWORD *)&v40[33] = *(_OWORD *)&v36[32];
  *(_OWORD *)&v40[49] = *(_OWORD *)&v36[48];
  *(_OWORD *)&v40[65] = *(_OWORD *)&v36[64];
  *(_OWORD *)&v40[81] = *(_OWORD *)&v36[80];
  *(_OWORD *)&v40[1] = *(_OWORD *)v36;
  *(_OWORD *)&v40[17] = *(_OWORD *)&v36[16];
  uint64_t v21 = v4;
  char v22 = v38;
  v40[152] = v33;
  *(void *)&long long v41 = v6;
  *((void *)&v41 + 1) = v8;
  *(void *)&long long v42 = v10;
  *((void *)&v42 + 1) = v12;
  char v43 = v38;
  *(unsigned char *)(a2 + 208) = v38;
  long long v23 = *(_OWORD *)&v40[96];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v40[80];
  *(_OWORD *)(a2 + 112) = v23;
  long long v24 = *(_OWORD *)&v40[128];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&v40[112];
  *(_OWORD *)(a2 + 144) = v24;
  long long v25 = *(_OWORD *)&v40[32];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v40[16];
  *(_OWORD *)(a2 + 48) = v25;
  long long v26 = *(_OWORD *)&v40[64];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v40[48];
  *(_OWORD *)(a2 + 80) = v26;
  long long v27 = *(_OWORD *)v40;
  *(_OWORD *)a2 = v39;
  *(_OWORD *)(a2 + 16) = v27;
  long long v28 = v41;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)&v40[144];
  *(_OWORD *)(a2 + 176) = v28;
  *(_OWORD *)(a2 + 192) = v42;
  char v45 = 1;
  char v44 = 1;
  *(void *)(a2 + 216) = 0;
  *(unsigned char *)(a2 + 224) = 1;
  *(void *)(a2 + 232) = v31;
  *(void *)(a2 + 240) = v30;
  *(void *)(a2 + 248) = v15;
  *(void *)(a2 + 256) = v17;
  *(void *)(a2 + 264) = v32;
  *(unsigned char *)(a2 + 272) = v18;
  *(void *)(a2 + 280) = v19;
  *(unsigned char *)(a2 + 288) = v20;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(unsigned char *)(a2 + 328) = 1;
  sub_10010DFB0((uint64_t)&v39);
  long long v55 = *(_OWORD *)&v36[96];
  long long v56 = *(_OWORD *)&v36[112];
  long long v57 = *(_OWORD *)&v36[128];
  long long v51 = *(_OWORD *)&v36[32];
  long long v52 = *(_OWORD *)&v36[48];
  long long v53 = *(_OWORD *)&v36[64];
  long long v54 = *(_OWORD *)&v36[80];
  long long v49 = *(_OWORD *)v36;
  uint64_t v46 = v21;
  uint64_t v47 = 0;
  char v48 = 0;
  char v58 = v36[144];
  long long v50 = *(_OWORD *)&v36[16];
  char v59 = v33;
  uint64_t v60 = v6;
  uint64_t v61 = v8;
  uint64_t v62 = v10;
  uint64_t v63 = v12;
  char v64 = v22;
  return sub_10010E05C((uint64_t)&v46);
}

uint64_t sub_10010D6E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [self mainBundle];
  v45._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
  v45._uint64_t object = (void *)0x80000001002C8F00;
  v5._uint64_t object = (void *)0x80000001002C8EE0;
  v5._uint64_t countAndFlagsBits = 0xD000000000000019;
  v6._uint64_t countAndFlagsBits = 0;
  v6._uint64_t object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v45);

  sub_100033310();
  uint64_t v7 = Text.init<A>(_:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  static Font.headline.getter();
  uint64_t v43 = Text.font(_:)();
  uint64_t v44 = v12;
  uint64_t v41 = v13;
  char v15 = v14;
  swift_release();
  sub_100033364(v7, v9, v11);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  if (a1)
  {
    char v40 = v15 & 1;
    id v16 = *(id *)(a1 + 112);
    char v17 = static UIContentSizeCategory.>= infix(_:_:)();

    double v18 = 0.5;
    if (v17) {
      double v19 = 1.0;
    }
    else {
      double v19 = 0.5;
    }
    uint64_t v20 = swift_getKeyPath();
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v23 = v22;
    uint64_t v24 = a1;
    char v26 = v25 & 1;
    static Font.caption.getter();
    uint64_t v38 = Text.font(_:)();
    uint64_t v39 = v27;
    uint64_t v29 = v28;
    char v31 = v30;
    swift_release();
    char v32 = v31 & 1;
    sub_100033364(v21, v23, v26);
    swift_bridgeObjectRelease();
    uint64_t v33 = swift_getKeyPath();
    id v34 = *(id *)(v24 + 112);
    char v35 = static UIContentSizeCategory.>= infix(_:_:)();

    if (v35) {
      double v18 = 1.0;
    }
    uint64_t v36 = swift_getKeyPath();
    *(void *)a2 = v43;
    *(void *)(a2 + 8) = v41;
    *(unsigned char *)(a2 + 16) = v40;
    *(void *)(a2 + 24) = v44;
    *(void *)(a2 + 32) = KeyPath;
    *(unsigned char *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = v20;
    *(double *)(a2 + 56) = v19;
    *(_WORD *)(a2 + 64) = 256;
    *(void *)(a2 + 72) = v38;
    *(void *)(a2 + 80) = v29;
    *(unsigned char *)(a2 + 88) = v32;
    *(void *)(a2 + 96) = v39;
    *(void *)(a2 + 104) = v33;
    *(unsigned char *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = v36;
    *(double *)(a2 + 128) = v18;
    *(_WORD *)(a2 + 136) = 256;
    sub_100033724(v43, v41, v40);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_100033724(v38, v29, v32);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_100033364(v38, v29, v32);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_100033364(v43, v41, v40);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010DF68((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10010DAFC@<X0>(uint64_t a1@<X8>)
{
  return sub_10010CF10(*v1, v1[1], a1);
}

uint64_t sub_10010DB04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_100033364(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100033364(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_10010DBF0()
{
  unint64_t result = qword_100387AA8;
  if (!qword_100387AA8)
  {
    sub_1000094C4(&qword_100387AA0);
    sub_10010DCEC(&qword_100387AB0, &qword_100387AB8, (void (*)(void))sub_10010DCBC);
    sub_100009B18(&qword_100387AF0, &qword_100387AF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387AA8);
  }
  return result;
}

uint64_t sub_10010DCBC()
{
  return sub_10010DCEC(&qword_100387AC0, &qword_100387AC8, (void (*)(void))sub_10010DD68);
}

uint64_t sub_10010DCEC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010DD68()
{
  unint64_t result = qword_100387AD0;
  if (!qword_100387AD0)
  {
    sub_1000094C4(&qword_100387AD8);
    sub_100009B18(&qword_100387AE0, &qword_100387AE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387AD0);
  }
  return result;
}

uint64_t sub_10010DE08(uint64_t a1)
{
  uint64_t v2 = sub_100004010(&qword_10037F010);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010DE68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  char v4 = *(unsigned char *)(a1 + 136);
  sub_100033364(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100033364(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_10010DF68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010DFB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_100033724(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100033724(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10010E05C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_100033364(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100033364(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010E118()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for FullScreenGuidanceFindMyView()
{
  return &type metadata for FullScreenGuidanceFindMyView;
}

uint64_t sub_10010E1CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010E1E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for StackNavigationViewStyle();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  __chkstk_darwin(v3);
  Swift::String v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004010(&qword_100387B00);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_100387B08);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  char v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v12 = a1 + 6;
    uint64_t v14 = a1[9];
    uint64_t v13 = a1[10];
    sub_100008F88(v12, v14);
    char v15 = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 32))(v37, v14, v13);
    v25[1] = v25;
    __chkstk_darwin(v15);
    v25[-2] = v37;
    sub_100004010(&qword_100387B10);
    uint64_t v16 = sub_1000094C4(&qword_100387B18);
    uint64_t v17 = sub_1000094C4(&qword_1003851F8);
    uint64_t v18 = sub_1000094C4(&qword_100387B20);
    uint64_t v19 = sub_100009B18(&qword_100387B28, &qword_100387B20);
    uint64_t v33 = v18;
    uint64_t v34 = v19;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v21 = sub_100009B18(&qword_100385210, &qword_1003851F8);
    uint64_t v33 = v16;
    uint64_t v34 = v17;
    uint64_t v35 = OpaqueTypeConformance2;
    uint64_t v36 = v21;
    swift_getOpaqueTypeConformance2();
    NavigationView.init(content:)();
    StackNavigationViewStyle.init()();
    sub_100009B18(&qword_100387B30, &qword_100387B00);
    sub_10010F700(&qword_100385220, (void (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle);
    uint64_t v22 = v29;
    uint64_t v23 = v31;
    View.navigationViewStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v23);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v22);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v32, v11, v27);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v37);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_10010F700((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10010E658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100387B18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000090FC(a1, (uint64_t)&v20);
  uint64_t v11 = swift_allocObject();
  sub_100009164(&v20, v11 + 16);
  sub_1000090FC(a1, (uint64_t)v31);
  uint64_t v12 = swift_allocObject();
  sub_100009164(v31, v12 + 16);
  type metadata accessor for UIMetrics();
  sub_10010F700((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v13 = EnvironmentObject.init()();
  uint64_t v15 = v14;
  type metadata accessor for CGSize(0);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  State.init(wrappedValue:)();
  *(void *)&long long v20 = v13;
  *((void *)&v20 + 1) = v15;
  uint64_t v21 = sub_10010F6F0;
  uint64_t v22 = v11;
  uint64_t v23 = sub_10010F6F8;
  uint64_t v24 = v12;
  long long v25 = v29;
  uint64_t v26 = v30;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  uint64_t v16 = sub_100004010(&qword_100387B20);
  uint64_t v17 = sub_100009B18(&qword_100387B28, &qword_100387B20);
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004010(&qword_1003851F8);
  *(void *)&long long v20 = v16;
  *((void *)&v20 + 1) = v17;
  swift_getOpaqueTypeConformance2();
  sub_100009B18(&qword_100385210, &qword_1003851F8);
  View.toolbar<A>(content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

__n128 sub_10010EA10@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  sub_10010EBE8((uint64_t)v18);
  *(_OWORD *)&v19[183] = v18[11];
  *(_OWORD *)&v19[199] = v18[12];
  *(_OWORD *)&v19[215] = v18[13];
  *(_OWORD *)&v19[231] = v18[14];
  *(_OWORD *)&v19[119] = v18[7];
  *(_OWORD *)&v19[135] = v18[8];
  *(_OWORD *)&v19[151] = v18[9];
  *(_OWORD *)&v19[167] = v18[10];
  *(_OWORD *)&v19[55] = v18[3];
  *(_OWORD *)&v19[71] = v18[4];
  *(_OWORD *)&v19[87] = v18[5];
  *(_OWORD *)&v19[103] = v18[6];
  *(_OWORD *)&v19[7] = v18[0];
  *(_OWORD *)&v19[23] = v18[1];
  char v20 = 0;
  *(_OWORD *)&v19[39] = v18[2];
  uint64_t v5 = (__n128 **)sub_100008F88(a1, a1[3]);
  __n128 v17 = (*v5)[3];
  unint64_t v6 = (*v5)[4].n128_u64[0];
  unint64_t v7 = (*v5)[4].n128_u64[1];
  char v8 = static Edge.Set.all.getter();
  long long v9 = *(_OWORD *)&v19[208];
  *(_OWORD *)(a2 + 209) = *(_OWORD *)&v19[192];
  *(_OWORD *)(a2 + 225) = v9;
  *(_OWORD *)(a2 + 241) = *(_OWORD *)&v19[224];
  long long v10 = *(_OWORD *)&v19[144];
  *(_OWORD *)(a2 + 145) = *(_OWORD *)&v19[128];
  *(_OWORD *)(a2 + 161) = v10;
  long long v11 = *(_OWORD *)&v19[176];
  *(_OWORD *)(a2 + 177) = *(_OWORD *)&v19[160];
  *(_OWORD *)(a2 + 193) = v11;
  long long v12 = *(_OWORD *)&v19[80];
  *(_OWORD *)(a2 + 81) = *(_OWORD *)&v19[64];
  *(_OWORD *)(a2 + 97) = v12;
  long long v13 = *(_OWORD *)&v19[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v19[96];
  *(_OWORD *)(a2 + 129) = v13;
  long long v14 = *(_OWORD *)&v19[16];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)v19;
  *(_OWORD *)(a2 + 33) = v14;
  long long v15 = *(_OWORD *)&v19[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v19[32];
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 256) = *(void *)&v19[239];
  *(_OWORD *)(a2 + 65) = v15;
  *(unsigned char *)(a2 + 264) = v8;
  __n128 result = v17;
  *(__n128 *)(a2 + 272) = v17;
  *(void *)(a2 + 288) = v6;
  *(void *)(a2 + 296) = v7;
  *(unsigned char *)(a2 + 304) = 0;
  return result;
}

uint64_t sub_10010EBE8@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ConnectionClosedModel(0);
  sub_10010F700(&qword_100385270, (void (*)(uint64_t))type metadata accessor for ConnectionClosedModel);
  uint64_t v42 = EnvironmentObject.init()();
  uint64_t v43 = v2;
  type metadata accessor for ConnectivityModel();
  sub_10010F700(&qword_10037F0F0, (void (*)(uint64_t))type metadata accessor for ConnectivityModel);
  uint64_t v40 = EnvironmentObject.init()();
  uint64_t v41 = v3;
  type metadata accessor for GuidanceModel(0);
  sub_10010F700(&qword_10037F0F8, (void (*)(uint64_t))type metadata accessor for GuidanceModel);
  uint64_t v39 = EnvironmentObject.init()();
  uint64_t v5 = v4;
  type metadata accessor for OrientationModel();
  sub_10010F700(&qword_100385278, (void (*)(uint64_t))type metadata accessor for OrientationModel);
  uint64_t v37 = EnvironmentObject.init()();
  uint64_t v38 = v6;
  type metadata accessor for StewieModel();
  sub_10010F700(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v35 = EnvironmentObject.init()();
  uint64_t v36 = v7;
  type metadata accessor for UIMetrics();
  sub_10010F700((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v8 = EnvironmentObject.init()();
  uint64_t v34 = v9;
  uint64_t v32 = EnvironmentObject.init()();
  uint64_t v33 = v10;
  uint64_t v30 = EnvironmentObject.init()();
  uint64_t v31 = v11;
  type metadata accessor for GuidanceMessagesModel();
  sub_10010F700(&qword_100381CB8, (void (*)(uint64_t))type metadata accessor for GuidanceMessagesModel);
  uint64_t v12 = EnvironmentObject.init()();
  uint64_t v28 = v13;
  uint64_t v29 = v12;
  uint64_t v14 = EnvironmentObject.init()();
  uint64_t v26 = v15;
  uint64_t v27 = v14;
  type metadata accessor for ConnectionModel(0);
  sub_10010F700(&qword_10037F100, (void (*)(uint64_t))type metadata accessor for ConnectionModel);
  uint64_t v16 = EnvironmentObject.init()();
  uint64_t v24 = v17;
  uint64_t v25 = v16;
  uint64_t v18 = EnvironmentObject.init()();
  uint64_t v20 = v19;
  uint64_t v21 = EnvironmentObject.init()();
  *(void *)a1 = v42;
  *(void *)(a1 + 8) = v43;
  *(void *)(a1 + 16) = v40;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) = v39;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v37;
  *(void *)(a1 + 56) = v38;
  *(void *)(a1 + 64) = v35;
  *(void *)(a1 + 72) = v36;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v34;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  *(void *)(a1 + 128) = v30;
  *(void *)(a1 + 136) = v31;
  *(void *)(a1 + 144) = 32;
  *(void *)(a1 + 152) = 0xE100000000000000;
  *(void *)(a1 + 160) = v29;
  *(void *)(a1 + 168) = v28;
  *(void *)(a1 + 176) = v27;
  *(void *)(a1 + 184) = v26;
  *(void *)(a1 + 192) = v25;
  *(void *)(a1 + 200) = v24;
  *(void *)(a1 + 208) = v18;
  *(void *)(a1 + 216) = v20;
  *(void *)(a1 + 224) = v21;
  *(void *)(a1 + 232) = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

__n128 sub_10010EFC4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  type metadata accessor for AppEvents();
  sub_10010F700((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v7 = v6;
  type metadata accessor for UIMetrics();
  sub_10010F700((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v8 = EnvironmentObject.init()();
  uint64_t v10 = v9;
  char v11 = static Edge.Set.top.getter();
  uint64_t v12 = (__n128 **)sub_100008F88(a1, a1[3]);
  __n128 v17 = (*v12)[3];
  unint64_t v13 = (*v12)[4].n128_u64[0];
  unint64_t v14 = (*v12)[4].n128_u64[1];
  char v15 = static Edge.Set.all.getter();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 56) = v11;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(unsigned char *)(a2 + 96) = 1;
  *(unsigned char *)(a2 + 104) = v15;
  __n128 result = v17;
  *(__n128 *)(a2 + 112) = v17;
  *(void *)(a2 + 128) = v13;
  *(void *)(a2 + 136) = v14;
  *(unsigned char *)(a2 + 144) = 0;
  return result;
}

uint64_t sub_10010F12C()
{
  uint64_t v0 = sub_100004010(&qword_100385228);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100004010(&qword_100385230);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = sub_100004010(&qword_1003818D8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter();
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  sub_1000ACC84();
  ToolbarItem<>.init(placement:content:)();
  uint64_t v12 = &v2[*(int *)(v0 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v2, v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v12, v6, v3);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10010F3FC@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self mainBundle];
  v18._uint64_t object = (void *)0x80000001002CEB50;
  v3._uint64_t countAndFlagsBits = 0x794D20646E6946;
  v3._uint64_t object = (void *)0xE700000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  v4._uint64_t object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0xD000000000000021;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v18);

  sub_100033310();
  uint64_t v5 = Text.init<A>(_:)();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  static Font.headline.getter();
  uint64_t v10 = Text.font(_:)();
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v16 = v15;
  swift_release();
  sub_100033364(v5, v7, v9);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v14 & 1;
  *(void *)(a1 + 24) = v16;
  return result;
}

uint64_t sub_10010F544@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AppEvents();
  sub_10010F700((unint64_t *)&qword_10037F000, (void (*)(uint64_t))type metadata accessor for AppEvents);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  type metadata accessor for StewieModel();
  sub_10010F700(&qword_100380DA0, (void (*)(uint64_t))type metadata accessor for StewieModel);
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v7 = v6;
  type metadata accessor for UIMetrics();
  sub_10010F700((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v8 = EnvironmentObject.init()();
  uint64_t v10 = v9;
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  return result;
}

uint64_t sub_10010F6A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10010E1E8(*v1, a1);
}

uint64_t sub_10010F6B0@<X0>(uint64_t a1@<X8>)
{
  return sub_10010E658(*(void *)(v1 + 16), a1);
}

uint64_t sub_10010F6B8()
{
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

double sub_10010F6F0@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10010EA10((void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

double sub_10010F6F8@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10010EFC4((void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_10010F700(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010F748()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for TryOutIntroTopGraphicsView(uint64_t a1)
{
  swift_release();
  sub_10004C738(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TryOutIntroTopGraphicsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  swift_retain();
  sub_10004C6D4(v5, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TryOutIntroTopGraphicsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  sub_10004C6D4(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  sub_10004C738(v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TryOutIntroTopGraphicsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10004C738(v5, v6);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutIntroTopGraphicsView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutIntroTopGraphicsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutIntroTopGraphicsView()
{
  return &type metadata for TryOutIntroTopGraphicsView;
}

uint64_t sub_10010FAB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010FAD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004010(&qword_100387B38);
  __chkstk_darwin(v4 - 8);
  char v6 = (uint64_t *)((char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100004010(&qword_100387B40);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)v2)
  {
    uint64_t v10 = self;
    swift_retain();
    id v11 = [v10 mainScreen];
    id v12 = [v11 fixedCoordinateSpace];

    [v12 bounds];
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    swift_unknownObjectRelease();
    v32.origin.x = v14;
    v32.origin.y = v16;
    v32.size.width = v18;
    v32.size.height = v20;
    CGRectGetHeight(v32);
    swift_release();
    uint64_t v21 = *(void *)(v2 + 16);
    LOBYTE(v11) = *(unsigned char *)(v2 + 24);
    sub_10004C6D4(v21, (char)v11);
    LOBYTE(v12) = sub_10004EE90(v21, (char)v11);
    sub_10004C738(v21, (char)v11);
    if (v12) {
      sub_100084940();
    }
    *char v6 = static Alignment.center.getter();
    v6[1] = v22;
    uint64_t v23 = sub_100004010(&qword_100387B48);
    sub_10010FE60((void *)v2, (uint64_t)v6 + *(int *)(v23 + 44));
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    sub_10000D2A0((uint64_t)v6, (uint64_t)v9, &qword_100387B38);
    uint64_t v24 = &v9[*(int *)(v7 + 36)];
    long long v25 = v31[5];
    *((_OWORD *)v24 + 4) = v31[4];
    *((_OWORD *)v24 + 5) = v25;
    *((_OWORD *)v24 + 6) = v31[6];
    long long v26 = v31[1];
    *(_OWORD *)uint64_t v24 = v31[0];
    *((_OWORD *)v24 + 1) = v26;
    long long v27 = v31[3];
    *((_OWORD *)v24 + 2) = v31[2];
    *((_OWORD *)v24 + 3) = v27;
    sub_10000950C((uint64_t)v6, &qword_100387B38);
    char v28 = static Edge.Set.bottom.getter();
    sub_10000D2A0((uint64_t)v9, a1, &qword_100387B40);
    uint64_t v29 = a1 + *(int *)(sub_100004010(&qword_100387B50) + 36);
    *(unsigned char *)uint64_t v29 = v28;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(unsigned char *)(v29 + 40) = 1;
    return sub_10000950C((uint64_t)v9, &qword_100387B40);
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_100092DDC();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10010FE60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = type metadata accessor for Image.ResizingMode();
  uint64_t v4 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  char v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100387B58);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v39 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v36 - v11;
  __chkstk_darwin(v10);
  double v13 = (char *)&v36 - v12;
  sub_100004010(&qword_1003860D0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002B31C0;
  double v15 = self;
  id v16 = [v15 systemFillColor];
  id v17 = [v16 colorWithAlphaComponent:0.0];

  *(void *)(v14 + 32) = Color.init(uiColor:)();
  id v18 = [v15 systemFillColor];
  *(void *)(v14 + 40) = Color.init(uiColor:)();
  uint64_t v40 = v14;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  if (*a1)
  {
    uint64_t v20 = v51;
    uint64_t v19 = v52;
    long long v36 = v50;
    uint64_t v21 = v49;
    uint64_t v22 = a1[4];
    uint64_t v23 = a1[5];
    uint64_t v24 = a1[6];
    uint64_t v25 = a1[7];
    swift_retain();
    sub_100084A78(v22, v23, v24, v25);
    swift_release();
    uint64_t v26 = v37;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v37);
    uint64_t v27 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v26);
    LOBYTE(v26) = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v40 = v27;
    uint64_t v41 = 0;
    __int16 v42 = 1;
    char v43 = v26;
    uint64_t v44 = v28;
    uint64_t v45 = v29;
    uint64_t v46 = v30;
    uint64_t v47 = v31;
    char v48 = 0;
    sub_100004010(&qword_100387B60);
    sub_100110374(&qword_100387B68, &qword_100387B60, (void (*)(void))sub_10003F5C0);
    uint64_t v32 = (uint64_t)v38;
    View.accessibility(hidden:)();
    swift_release();
    sub_1001102C8(v32, (uint64_t)v13);
    uint64_t v33 = v39;
    sub_10000D2A0((uint64_t)v13, v39, &qword_100387B58);
    *(void *)a2 = v21;
    *(_OWORD *)(a2 + 8) = v36;
    *(void *)(a2 + 24) = v20;
    *(void *)(a2 + 32) = v19;
    *(_WORD *)(a2 + 40) = 256;
    uint64_t v34 = sub_100004010(&qword_100387B70);
    sub_10000D2A0(v33, a2 + *(int *)(v34 + 48), &qword_100387B58);
    swift_bridgeObjectRetain();
    sub_10000950C((uint64_t)v13, &qword_100387B58);
    sub_10000950C(v33, &qword_100387B58);
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for UIMetrics();
    sub_100092DDC();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011028C@<X0>(uint64_t a1@<X8>)
{
  return sub_10010FAD0(a1);
}

uint64_t sub_1001102C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100387B58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100110330()
{
  return sub_100110374(&qword_100387B78, &qword_100387B50, (void (*)(void))sub_1001103F0);
}

uint64_t sub_100110374(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001103F0()
{
  return sub_100110374(&qword_100387B80, &qword_100387B40, (void (*)(void))sub_100110420);
}

unint64_t sub_100110420()
{
  unint64_t result = qword_100387B88;
  if (!qword_100387B88)
  {
    sub_1000094C4(&qword_100387B38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100387B88);
  }
  return result;
}

uint64_t sub_10011047C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1001B1B40(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[4 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[4 * v8] && (unint64_t)v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 32 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001105C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1001B1A30(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10011071C(uint64_t a1)
{
  size_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    size_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1001B1EAC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  size_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (char *)v3 + v9 + 32;
  if (a1 + 32 < (unint64_t)&v10[v8] && (unint64_t)v10 < a1 + 32 + v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  size_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100110868(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_100125A00(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100110A34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_1001B2824(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(sub_100004010(&qword_100380418) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100110BDC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001BF6A4(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10001E6FC(0, &qword_100388330);
        swift_dynamicCast();
        unint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001BF6A4(0, v3[2] + 1, 1);
          unint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_1001BF6A4(v6 > 1, v7 + 1, 1);
          unint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_10004A864(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_10001E6FC(0, &qword_100388330);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        unint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001BF6A4(0, v3[2] + 1, 1);
          unint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_1001BF6A4(v10 > 1, v11 + 1, 1);
          unint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_10004A864(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_100110E40(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v9 = _swiftEmptyArrayStorage;
    sub_1001BF6A4(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_100004010(&qword_100384248);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001BF6A4(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001BF6A4(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_10004A864(&v8, &v2[4 * v6 + 4]);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_100110F6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100004010(&qword_100380418);
  uint64_t v6 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  long long v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    BOOL v20 = _swiftEmptyArrayStorage;
    sub_1001BF764(0, v9, 0);
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v17 = *(void *)(v11 + 56);
    id v18 = v12;
    do
    {
      v18(v5, v13, v2);
      swift_dynamicCast();
      unint64_t v10 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001BF764(0, v10[2] + 1, 1);
        unint64_t v10 = v20;
      }
      unint64_t v15 = v10[2];
      unint64_t v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001BF764(v14 > 1, v15 + 1, 1);
        unint64_t v10 = v20;
      }
      _OWORD v10[2] = v15 + 1;
      sub_10000D544((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, &qword_100380418);
      v13 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

unint64_t sub_1001111C8()
{
  return 0x302010002020100uLL >> (8
                                * *(unsigned char *)(v0 + *(int *)(type metadata accessor for TransmissionProgress(0) + 32)));
}

Swift::Int sub_10011120C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004010(&qword_100380418);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  int64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  Hasher.init(_seed:)();
  sub_10000D2A0(v1, (uint64_t)v11, &qword_100380418);
  unint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v12(v11, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    Hasher._combine(_:)(1u);
    sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v13 = type metadata accessor for ServiceOutages.Outage(0);
  sub_10000D2A0(v1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_100380418);
  if (v12(v9, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    Hasher._combine(_:)(1u);
    sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_1001114FC()
{
  if ((static Angle.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static Angle.== infix(_:_:)();
}

BOOL sub_100111550(void *a1, void *a2)
{
  return *a1 == *a2
      && (static Angle.== infix(_:_:)() & 1) != 0
      && (static Angle.== infix(_:_:)() & 1) != 0
      && (static Angle.== infix(_:_:)() & 1) != 0
      && (static Angle.== infix(_:_:)() & 1) != 0;
}

uint64_t sub_1001115E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1;
    }
  }
  else if (v3 != 3 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100111614(unsigned char *a1, unsigned char *a2)
{
  if (*a1)
  {
    if (*a2) {
      return 1;
    }
  }
  else if ((*a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

void sub_100111644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_100380418);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v16 - v13;
  sub_10000D2A0(v4, (uint64_t)&v16 - v13, &qword_100380418);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v15(v14, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
    Hasher._combine(_:)(1u);
    sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_10000D2A0(v4 + *(int *)(a2 + 20), (uint64_t)v12, &qword_100380418);
  if (v15(v12, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    Hasher._combine(_:)(1u);
    sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

Swift::Int sub_100111920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100004010(&qword_100380418);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v17 - v13;
  Hasher.init(_seed:)();
  sub_10000D2A0(v4, (uint64_t)v14, &qword_100380418);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v15(v14, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
    Hasher._combine(_:)(1u);
    sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_10000D2A0(v4 + *(int *)(a2 + 20), (uint64_t)v12, &qword_100380418);
  if (v15(v12, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    Hasher._combine(_:)(1u);
    sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return Hasher._finalize()();
}

uint64_t sub_100111C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100112308(a1, a2, a3, a4, sub_100231FBC);
}

Swift::Int sub_100111C2C(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  sub_100125618((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100111D0C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date();
  sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v5 = *(void *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain();
  sub_100125618(a1, v5);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100111DE0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain();
  sub_100125618((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100111EBC()
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static Date.== infix(_:_:)();
}

Swift::Int sub_100111F24()
{
  return Hasher._finalize()();
}

uint64_t sub_100111FD4()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100112074()
{
  return Hasher._finalize()();
}

uint64_t sub_100112120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  char v10 = sub_10028AA74(*(unsigned char *)a1, *(unsigned char *)a2);
  uint64_t result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && ((v3 ^ v7) & 1) == 0)
  {
    if (v5)
    {
      if (v9) {
        return 1;
      }
    }
    else
    {
      if (v4 == v8) {
        char v12 = v9;
      }
      else {
        char v12 = 1;
      }
      if ((v12 & 1) == 0) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1001121BC(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return sub_100125DE4((uint64_t)&v5, (uint64_t)&v7);
}

void sub_100112208(void *a1@<X8>)
{
  *a1 = &off_10034B7C0;
}

uint64_t sub_100112218(uint64_t *a1, uint64_t *a2)
{
  return sub_100125D40(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_100112230(void *a1, void *a2)
{
  return *a1 == *a2 && (static Angle.== infix(_:_:)() & 1) != 0 && (static Angle.== infix(_:_:)() & 1) != 0;
}

uint64_t sub_100112288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);

  return sub_100232404(v7, v8);
}

uint64_t sub_1001122F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100112308(a1, a2, a3, a4, sub_10023215C);
}

uint64_t sub_100112308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if ((static Date.== infix(_:_:)() & 1) == 0 || (static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(a2 + v8);

  return a5(v9, v10);
}

id sub_10011239C()
{
  uint64_t v1 = OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_connectionDidChange;
  sub_100004010(&qword_1003881C0);
  swift_allocObject();
  long long v2 = v0;
  *(void *)&v0[v1] = PassthroughSubject.init()();
  uint64_t v3 = OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_carrierNameDidChange;
  sub_100004010(&qword_1003881C8);
  swift_allocObject();
  *(void *)&v2[v3] = PassthroughSubject.init()();
  *(void *)&v2[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent] = 0;
  uint64_t v4 = &v2[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  long long v5 = &v2[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded];
  uint64_t v6 = type metadata accessor for ConnectionAssistantState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);

  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for TargetConnectionSource(0);
  [super init];
  uint64_t v8 = qword_10037DD80;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000FD84(v10, (uint64_t)qword_1003A9958);
  id v11 = v9;
  char v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)unint64_t v14 = 136446210;
    id v15 = v11;
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    sub_1001B3178(v17, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "init: %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return v11;
}

id sub_1001126A0()
{
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000FD84(v1, (uint64_t)qword_1003A9958);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    long long v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)long long v5 = 136446210;
    id v6 = v2;
    id v7 = [v6 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    sub_1001B3178(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v11 = (objc_class *)type metadata accessor for TargetConnectionSource(0);
  v14.receiver = v2;
  v14.super_class = v11;
  return [super dealloc];
}

uint64_t sub_100112928()
{
  return type metadata accessor for TargetConnectionSource(0);
}

uint64_t type metadata accessor for TargetConnectionSource(uint64_t a1)
{
  return sub_1000497F4(a1, (uint64_t *)&unk_100387BE0);
}

void sub_100112950()
{
  sub_1001154C4(319, &qword_100387BF0, (void (*)(uint64_t))type metadata accessor for ConnectionAssistantState);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100112A20()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *long long v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_10037DDA8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000FD84(v7, (uint64_t)qword_1003A99D0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "start", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v12 = (uint8_t *)swift_allocObject();
  swift_unknownObjectWeakInit();
  id v13 = objc_allocWithZone((Class)type metadata accessor for CoreTelephonyCAAgent());
  objc_super v14 = sub_100019CB8((uint64_t)sub_1001287E0, v11, (uint8_t *)sub_1001287E8, v12);
  id v15 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent);
  *(void *)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent) = v14;
}

void sub_100112C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, double a6, double a7)
{
  uint64_t v76 = a2;
  uint64_t v77 = a4;
  uint64_t v79 = a3;
  uint64_t v75 = a1;
  uint64_t v10 = type metadata accessor for ConnectionAssistantState(0);
  uint64_t v80 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v66 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100004010(&qword_1003881B0);
  __chkstk_darwin(v68);
  uint64_t v70 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for TargetConnection(0);
  uint64_t v13 = __chkstk_darwin(v74);
  long long v78 = (uint64_t *)((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v65 - v16;
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v65 - v18;
  uint64_t v20 = sub_100004010(&qword_1003881A8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v73 = (uint64_t)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v67 = (uint64_t)&v65 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v69 = (uint64_t)&v65 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v65 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v65 - v30;
  uint64_t v32 = type metadata accessor for DispatchPredicate();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (uint64_t *)((char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  uint64_t *v35 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v33 + 104))(v35, enum case for DispatchPredicate.onQueue(_:), v32);
  char v36 = _dispatchPreconditionTest(_:)();
  uint64_t v38 = *(void (**)(uint64_t *, uint64_t))(v33 + 8);
  uint64_t v37 = (char *)(v33 + 8);
  v38(v35, v32);
  if ((v36 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  a5 = (unsigned char *)Strong;
  uint64_t v40 = Strong + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded;
  swift_beginAccess();
  uint64_t v71 = v40;
  sub_10000D2A0(v40, (uint64_t)v31, &qword_1003881A8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v80 + 48);
  uint64_t v72 = v10;
  LODWORD(v40) = v41(v31, 1);
  sub_10000950C((uint64_t)v31, &qword_1003881A8);
  uint64_t v43 = v76;
  uint64_t v42 = v77;
  sub_1001136D4(v40 == 1, v76, v79, v77, (uint64_t)v19, a6, a7);
  BOOL v44 = v40 == 1;
  uint64_t v35 = v78;
  if (v44 || v43) {
    goto LABEL_7;
  }
  uint64_t v45 = v79;
  if (v79)
  {
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v45;
    *(void *)(v46 + 24) = v42;
    sub_10001EA7C(v45);
    sub_10005BEA0((uint64_t)sub_100034078);
LABEL_7:
    sub_1001286D8((uint64_t)v19, (uint64_t)v17, type metadata accessor for TargetConnection);
    sub_10011AAAC((uint64_t)v17, type metadata accessor for TargetConnection);
    goto LABEL_8;
  }
  sub_10001EA7C(0);
  sub_10005BEA0(0);
  sub_1001286D8((uint64_t)v19, (uint64_t)v17, type metadata accessor for TargetConnection);
  sub_1001286D8((uint64_t)v17, (uint64_t)v29, type metadata accessor for ConnectionAssistantState);
  uint64_t v54 = v72;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v29, 0, 1, v72);
  uint64_t v55 = v69;
  sub_10000D2A0(v71, v69, &qword_1003881A8);
  uint64_t v56 = v70;
  uint64_t v57 = v70 + *(int *)(v68 + 48);
  sub_10000D2A0((uint64_t)v29, v70, &qword_1003881A8);
  uint64_t v79 = v57;
  uint64_t v58 = v57;
  uint64_t v59 = v54;
  sub_10000D2A0(v55, v58, &qword_1003881A8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41)(v56, 1, v54) != 1)
  {
    uint64_t v62 = v67;
    sub_10000D2A0(v56, v67, &qword_1003881A8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41)(v79, 1, v59) != 1)
    {
      uint64_t v63 = v66;
      sub_1001285C4(v79, v66, type metadata accessor for ConnectionAssistantState);
      BOOL v64 = sub_1001262AC(v62, v63);
      sub_10011AAAC(v63, type metadata accessor for ConnectionAssistantState);
      sub_10000950C(v69, &qword_1003881A8);
      sub_10000950C((uint64_t)v29, &qword_1003881A8);
      sub_10011AAAC((uint64_t)v17, type metadata accessor for TargetConnection);
      sub_10011AAAC(v62, type metadata accessor for ConnectionAssistantState);
      sub_10000950C(v56, &qword_1003881A8);
      uint64_t v35 = v78;
      if (v64) {
        goto LABEL_19;
      }
LABEL_8:
      uint64_t v37 = &a5[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded];
      uint64_t v17 = (char *)v74;
      if ((a5[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded + 8] & 1) != 0
        || (uint64_t v10 = *(void *)v37, *(void *)&v19[*(int *)(v74 + 20)] >= *(void *)v37))
      {
LABEL_18:
        *(void *)uint64_t v37 = *(void *)&v19[*((int *)v17 + 5)];
        v37[8] = 0;
        uint64_t v60 = v73;
        sub_1001286D8((uint64_t)v19, v73, type metadata accessor for ConnectionAssistantState);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v60, 0, 1, v72);
        uint64_t v61 = v71;
        swift_beginAccess();
        sub_100128740(v60, v61);
        swift_endAccess();
        PassthroughSubject.send(_:)();
        goto LABEL_19;
      }
      if (qword_10037DDA8 == -1)
      {
LABEL_11:
        uint64_t v47 = type metadata accessor for Logger();
        sub_10000FD84(v47, (uint64_t)qword_1003A99D0);
        sub_1001286D8((uint64_t)v19, (uint64_t)v35, type metadata accessor for TargetConnection);
        char v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          long long v50 = (_DWORD *)swift_slowAlloc();
          uint64_t v51 = (uint64_t)v35;
          uint64_t v52 = v50;
          *long long v50 = 134218240;
          uint64_t v53 = *(void *)(v51 + *((int *)v17 + 5));
          sub_10011AAAC(v51, type metadata accessor for TargetConnection);
          uint64_t v81 = v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *((_WORD *)v52 + 6) = 2048;
          uint64_t v81 = v10;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Received CA state version %llu is less than the last processed one: %llu", (uint8_t *)v52, 0x16u);
          swift_slowDealloc();
        }
        else
        {
          sub_10011AAAC((uint64_t)v35, type metadata accessor for TargetConnection);
        }

        goto LABEL_18;
      }
LABEL_27:
      swift_once();
      goto LABEL_11;
    }
    sub_10000950C(v69, &qword_1003881A8);
    sub_10000950C((uint64_t)v29, &qword_1003881A8);
    sub_10011AAAC((uint64_t)v17, type metadata accessor for TargetConnection);
    sub_10011AAAC(v62, type metadata accessor for ConnectionAssistantState);
LABEL_23:
    sub_10000950C(v56, &qword_1003881B0);
    uint64_t v35 = v78;
    goto LABEL_8;
  }
  sub_10000950C(v55, &qword_1003881A8);
  uint64_t v56 = v70;
  sub_10000950C((uint64_t)v29, &qword_1003881A8);
  sub_10011AAAC((uint64_t)v17, type metadata accessor for TargetConnection);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41)(v79, 1, v54) != 1) {
    goto LABEL_23;
  }
  sub_10000950C(v56, &qword_1003881A8);
LABEL_19:
  sub_10011AAAC((uint64_t)v19, type metadata accessor for TargetConnection);
}

id sub_1001136D4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v8 = v7;
  uint64_t v16 = sub_100004010(&qword_100380780);
  __chkstk_darwin(v16 - 8);
  long long v151 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100004010((uint64_t *)&unk_100383910);
  __chkstk_darwin(v18 - 8);
  BOOL v150 = (BOOL *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100004010(&qword_100387FA8);
  __chkstk_darwin(v20 - 8);
  uint64_t v149 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100004010(&qword_100387FA0);
  __chkstk_darwin(v22 - 8);
  uint64_t v148 = (uint64_t)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for ConnectionAssistantState(0);
  uint64_t v24 = __chkstk_darwin(v130);
  uint64_t v26 = (char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v112 - v27;
  id v29 = [v7 currentTarget];
  id v129 = v29;
  if (v29)
  {
    uint64_t v30 = v29;
    sub_100120D74((uint64_t)v152, a6, a7);
    uint64_t v147 = v152[0];
    uint64_t v146 = v152[1];
    uint64_t v145 = v152[2];
    uint64_t v144 = v152[3];
    uint64_t v143 = v152[4];
  }
  else
  {
    uint64_t v147 = 0;
    uint64_t v146 = 0;
    uint64_t v145 = 0;
    uint64_t v144 = 0;
    uint64_t v143 = 0;
  }
  id v31 = [v7 targetVisibility];
  if (v31)
  {
    uint64_t v32 = v31;
    unint64_t v33 = (unint64_t)[v31 aggregateVisibility];

    if (v33 > 3) {
      unsigned int v34 = 3;
    }
    else {
      unsigned int v34 = 0x2010003u >> (8 * v33);
    }
  }
  else
  {
    unsigned int v34 = 4;
  }
  unsigned int v142 = v34;
  id v35 = [v8 locationState];
  char v36 = v35;
  if (v35)
  {
    id v37 = [v35 locationAcquisitionStatus];

    BOOL v141 = v37 != (id)1;
  }
  else
  {
    BOOL v141 = 0;
  }
  id v38 = [v8 serviceIntervals];
  if (v38)
  {
    uint64_t v39 = v38;
    sub_100120F74(v148);
  }
  else
  {
    uint64_t v40 = type metadata accessor for ServiceOutages(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v148, 1, 1, v40);
  }
  id v41 = [v8 silenceInterval];
  if (v41)
  {
    uint64_t v42 = v41;
    sub_100121754(v149);
  }
  else
  {
    uint64_t v43 = type metadata accessor for SilencePeriod(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v149, 1, 1, v43);
  }
  id v44 = [v8 connectionState];
  uint64_t v136 = a2;
  uint64_t v135 = a4;
  uint64_t v134 = a3;
  uint64_t v133 = a5;
  int v132 = a1;
  long long v131 = v26;
  uint64_t v128 = v36;
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = v150;
    sub_100121B58(v150);

    uint64_t v47 = type metadata accessor for LinkState(0);
    (*(void (**)(BOOL *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
  }
  else
  {
    uint64_t v48 = type metadata accessor for LinkState(0);
    (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v150, 1, 1, v48);
  }
  id v49 = [v8 conversationState];
  if (v49)
  {
    long long v50 = v49;
    unsigned __int8 v51 = sub_100122318((uint64_t)[v49 requestReason]);
    if (v51 == 4) {
      unsigned __int8 v52 = 1;
    }
    else {
      unsigned __int8 v52 = v51;
    }
    id v53 = [v50 conversationId];
    id v140 = [v53 int64ValueSafe];

    unsigned int v54 = [v50 committed];
    if ([v50 fromService])
    {
      id v127 = [v50 fromService];
      int v126 = 0;
    }
    else
    {
      id v127 = 0;
      int v126 = 1;
    }

    uint64_t v139 = v54;
    uint64_t v55 = v52;
    uint64_t v56 = &v165;
  }
  else
  {
    uint64_t v138 = 0;
    id v140 = 0;
    id v127 = 0;
    int v126 = 0;
    uint64_t v55 = 2;
    uint64_t v56 = &v166;
  }
  *(v56 - 32) = v55;
  id v57 = [v8 roadsideConversationState];
  if (!v57) {
    goto LABEL_35;
  }
  uint64_t v58 = v57;
  id v59 = [v57 conversationId];
  id v137 = [v59 int64ValueSafe];

  LODWORD(v60) = [v58 committed];
  id v61 = [v58 providerId];

  if (!v61)
  {
    unint64_t v64 = 0;
LABEL_37:
    if ([v58 fromService])
    {
      id v125 = [v58 fromService];
      int v124 = 0;
    }
    else
    {
      id v125 = 0;
      int v124 = 1;
    }
    BOOL v123 = v61 == 0;

    uint64_t v60 = v60;
    goto LABEL_41;
  }
  id result = [v58 providerId];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v63 = result;
  unint64_t v64 = (unint64_t)[result int64ValueSafe];

  if ((v64 & 0x8000000000000000) == 0) {
    goto LABEL_37;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_35:
  id v137 = 0;
  unint64_t v64 = 0;
  BOOL v123 = 0;
  id v125 = 0;
  int v124 = 0;
  uint64_t v60 = 2;
LABEL_41:
  id v65 = [v8 iso3166Alpha3CountryCode];
  if (v65)
  {
    uint64_t v66 = v65;
    uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v121 = v67;
  }
  else
  {
    uint64_t v122 = 0;
    uint64_t v121 = 0;
  }
  id v68 = [v8 servicePartners];
  if (v68)
  {
    uint64_t v69 = v68;
    uint64_t v119 = sub_100121D24();
    uint64_t v120 = v70;
  }
  else
  {
    uint64_t v120 = 0;
    uint64_t v119 = 1;
  }
  id v71 = [v8 connectionClosedState];
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = v151;
    sub_100121E8C(v151);

    uint64_t v74 = type metadata accessor for ConnectionClosed(0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v73, 0, 1, v74);
  }
  else
  {
    uint64_t v75 = type metadata accessor for ConnectionClosed(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v151, 1, 1, v75);
  }
  id v76 = [v8 stewieState];
  if (v76)
  {
    sub_10001F4F8([v8 internetInterface] == (id)2, (char)[v8 isEmergencyVoiceCallCapable], (uint64_t)v153);
    uint64_t v112 = v8;
    uint64_t v77 = v153[0];
    uint64_t v78 = v154;
    uint64_t v79 = v60;
    unint64_t v80 = v64;
    uint64_t v81 = v155;
    uint64_t v82 = v156;
    uint64_t v83 = v157;
    uint64_t v84 = v158;
    uint64_t v118 = v159;
    uint64_t v117 = v160;
    uint64_t v116 = v161;
    uint64_t v115 = v163;
    uint64_t v114 = v164;
    uint64_t v113 = v162;

    id v76 = (id)(v81 | (v82 << 8));
    unint64_t v64 = v80;
    uint64_t v60 = v79;
    uint64_t v85 = v77;
    uint64_t v8 = v112;
  }
  else
  {
    uint64_t v85 = 0;
    uint64_t v78 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v118 = 0;
    uint64_t v117 = 0;
    uint64_t v116 = 0;
    uint64_t v113 = 0;
    uint64_t v115 = 0;
    uint64_t v114 = 0;
  }
  BOOL v86 = v128 == 0;
  BOOL v87 = v129 == 0;
  uint64_t v88 = v146;
  *(void *)uint64_t v28 = v147;
  *((void *)v28 + 1) = v88;
  uint64_t v89 = v144;
  *((void *)v28 + 2) = v145;
  *((void *)v28 + 3) = v89;
  *((void *)v28 + 4) = v143;
  v28[40] = v87;
  v28[41] = v142;
  v28[42] = v141;
  v28[43] = v86;
  uint64_t v90 = (int *)v130;
  sub_10000D544(v148, (uint64_t)&v28[*(int *)(v130 + 28)], &qword_100387FA0);
  sub_10000D544((uint64_t)v149, (uint64_t)&v28[v90[8]], &qword_100387FA8);
  sub_10000D544((uint64_t)v150, (uint64_t)&v28[v90[9]], (uint64_t *)&unk_100383910);
  uint64_t v91 = &v28[v90[10]];
  id v92 = v140;
  *(void *)uint64_t v91 = v138;
  *((void *)v91 + 1) = v92;
  id v93 = v127;
  *((void *)v91 + 2) = v139;
  *((void *)v91 + 3) = v93;
  v91[32] = v126;
  uint64_t v94 = &v28[v90[11]];
  *(void *)uint64_t v94 = v137;
  *((void *)v94 + 1) = v60;
  BOOL v95 = v123;
  *((void *)v94 + 2) = v64;
  *((void *)v94 + 3) = v95;
  *((void *)v94 + 4) = v125;
  v94[40] = v124;
  uint64_t v96 = (uint64_t *)&v28[v90[12]];
  uint64_t v97 = v121;
  *uint64_t v96 = v122;
  v96[1] = v97;
  uint64_t v98 = (uint64_t *)&v28[v90[13]];
  uint64_t v99 = v120;
  *uint64_t v98 = v119;
  v98[1] = v99;
  sub_10000D544((uint64_t)v151, (uint64_t)&v28[v90[14]], &qword_100380780);
  long long v100 = &v28[v90[15]];
  *(void *)long long v100 = v85;
  *((void *)v100 + 1) = v78;
  *((void *)v100 + 2) = v76;
  *((void *)v100 + 3) = v83;
  uint64_t v101 = v118;
  *((void *)v100 + 4) = v84;
  *((void *)v100 + 5) = v101;
  uint64_t v102 = v116;
  *((void *)v100 + 6) = v117;
  *((void *)v100 + 7) = v102;
  uint64_t v103 = v115;
  *((void *)v100 + 8) = v113;
  *((void *)v100 + 9) = v103;
  *((void *)v100 + 10) = v114;
  uint64_t v104 = (uint64_t)v131;
  sub_1001286D8((uint64_t)v28, (uint64_t)v131, type metadata accessor for ConnectionAssistantState);
  id v105 = [v8 version];
  sub_10011AAAC((uint64_t)v28, type metadata accessor for ConnectionAssistantState);
  uint64_t v106 = v104;
  uint64_t v107 = v133;
  sub_1001285C4(v106, v133, type metadata accessor for ConnectionAssistantState);
  uint64_t v108 = (int *)type metadata accessor for TargetConnection(0);
  *(void *)(v107 + v108[5]) = v105;
  *(unsigned char *)(v107 + v108[6]) = v132 & 1;
  uint64_t v109 = (uint64_t *)(v107 + v108[7]);
  uint64_t v110 = v134;
  uint64_t v111 = v135;
  *uint64_t v109 = v134;
  v109[1] = v111;
  *(void *)(v107 + v108[8]) = v136;
  sub_10001EA7C(v110);
  return (id)swift_retain();
}

uint64_t sub_1001143B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *uint64_t v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v8 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    swift_beginAccess();
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v10 = (void *)result;
      swift_retain();

      v11[1] = a1;
      v11[2] = a2;
      PassthroughSubject.send(_:)();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100114548(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10037DDA8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000FD84(v6, (uint64_t)qword_1003A99D0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "fetchConnectionAssistantState", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(void **)(v3 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent);
  if (v10)
  {
    type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject();
    id v11 = v10;
    uint64_t v12 = sub_1000F9434(0xD000000000000011, 0x80000001002C6000, 0xD000000000000021, 0x80000001002CEC80);
    sub_10001B0A0(v12, a1, a2);

    swift_release();
  }
}

uint64_t sub_1001146DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004010(&qword_1003881A8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E6FC(0, (unint64_t *)&qword_100387440);
  *os_log_type_t v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (qword_10037DDA8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000FD84(v10, (uint64_t)qword_1003A99D0);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "stop", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent);
  *(void *)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent) = 0;

  uint64_t v15 = v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = type metadata accessor for ConnectionAssistantState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
  uint64_t v17 = v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded;
  swift_beginAccess();
  sub_100128740((uint64_t)v4, v17);
  return swift_endAccess();
}

uint64_t type metadata accessor for ConnectionAssistantState(uint64_t a1)
{
  return sub_1000497F4(a1, (uint64_t *)&unk_1003880A8);
}

uint64_t sub_1001149D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001149EC);
}

uint64_t sub_1001149F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100114A04);
}

uint64_t type metadata accessor for TargetTracks(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100387C50);
}

uint64_t *sub_100114A2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    os_log_type_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100004010(&qword_100380418);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100114BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }

  return swift_bridgeObjectRelease();
}

unsigned char *sub_100114C8C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  os_log_type_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100004010(&qword_100380418);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_100114DC0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  os_log_type_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004010(&qword_100380418);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *sub_100114F64(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  os_log_type_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100004010(&qword_100380418);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100115094(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  os_log_type_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004010(&qword_100380418);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100115230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115244);
}

uint64_t sub_100115244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004010(&qword_100380418);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10011530C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100115320);
}

uint64_t sub_100115320(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100004010(&qword_100380418);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ConnectionClosed(uint64_t a1)
{
  return sub_1000497F4(a1, (uint64_t *)&unk_100387CE8);
}

void sub_100115404()
{
  sub_1001154C4(319, (unint64_t *)&unk_100387CF8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1001154C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

__n128 initializeWithCopy for RoadsideAssistanceConversationState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RoadsideAssistanceConversationState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RoadsideAssistanceConversationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceConversationState()
{
  return &type metadata for RoadsideAssistanceConversationState;
}

uint64_t getEnumTagSinglePayload for EmergencyConversationState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyConversationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyConversationState()
{
  return &type metadata for EmergencyConversationState;
}

uint64_t destroy for PartnerModel.Partners()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8SOSBuddy12PartnerModelC8PartnersVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ServicePartners(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for PartnerModel.Partners(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ServicePartners()
{
  return &type metadata for ServicePartners;
}

ValueMetadata *type metadata accessor for ServicePartners.Footnote()
{
  return &type metadata for ServicePartners.Footnote;
}

uint64_t *sub_1001157C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t sub_1001158B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t sub_100115950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1001159E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100115A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100115B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100115BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115BC4);
}

uint64_t sub_100115BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100115C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100115C44);
}

uint64_t sub_100115C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SilencePeriod(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100387D88);
}

uint64_t sub_100115CD4()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100115D60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100115E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100115EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100115FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100116054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1001160F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001161A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001161B8);
}

uint64_t sub_1001161BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10011627C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100116290);
}

uint64_t sub_100116294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ServiceOutages(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100387E18);
}

uint64_t sub_100116370()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationState()
{
  return &type metadata for LocationState;
}

void *sub_10011641C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100004010(&qword_100380418);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(void *)uint64_t v18 = *(void *)v19;
    uint64_t v18[8] = v19[8];
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return v4;
}

uint64_t sub_1001165D0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_1001166A0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100004010(&qword_100380418);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  _OWORD v16[8] = v17[8];
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

void *sub_100116804(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004010(&qword_100380418);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  _OWORD v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_1001169D8(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100004010(&qword_100380418);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

void *sub_100116B2C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100004010(&qword_100380418);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v18[8] = v19[8];
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_100116CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100116D00);
}

uint64_t sub_100116D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100004010(&qword_100380418);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100116DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100116DD4);
}

uint64_t sub_100116DD4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100004010(&qword_100380418);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for TransmissionProgress(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100387EB0);
}

void sub_100116EA0()
{
  sub_1001154C4(319, (unint64_t *)&unk_100387CF8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_100116F74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = (uint64_t *)((char *)a1 + v5);
    uint64_t v7 = (uint64_t *)((char *)a2 + v5);
    uint64_t v8 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v9 = *((void *)v8 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = sub_100004010(&qword_10037F158);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = v7[1];
      *uint64_t v6 = *v7;
      v6[1] = v12;
      uint64_t v13 = v8[5];
      __dst = (char *)v6 + v13;
      uint64_t v23 = (char *)v7 + v13;
      uint64_t v14 = type metadata accessor for Date();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      if (v16(v23, 1, v14))
      {
        uint64_t v17 = sub_100004010(&qword_100380418);
        memcpy(__dst, v23, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v23, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      uint64_t v18 = v8[6];
      uint64_t v19 = (char *)v6 + v18;
      uint64_t v20 = (char *)v7 + v18;
      *(void *)uint64_t v19 = *(void *)v20;
      unsigned char v19[8] = v20[8];
      *(void *)((char *)v6 + v8[7]) = *(void *)((char *)v7 + v8[7]);
      *((unsigned char *)v6 + v8[8]) = *((unsigned char *)v7 + v8[8]);
      (*(void (**)(void *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_1001171F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for TransmissionProgress(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v2 + *(int *)(v3 + 20);
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v5, v6);
    }
  }
  return result;
}

_DWORD *sub_10011730C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (void *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100004010(&qword_10037F158);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v10;
    uint64_t v11 = v7[5];
    uint64_t v20 = (char *)v6 + v11;
    __dst = (char *)v5 + v11;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v20, 1, v12))
    {
      uint64_t v15 = sub_100004010(&qword_100380418);
      memcpy(__dst, v20, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v20, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v16 = v7[6];
    uint64_t v17 = (char *)v5 + v16;
    uint64_t v18 = (char *)v6 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
    *((unsigned char *)v5 + v7[8]) = *((unsigned char *)v6 + v7[8]);
    (*(void (**)(void *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *sub_100117540(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10011AAAC((uint64_t)v5, type metadata accessor for TransmissionProgress);
      goto LABEL_7;
    }
    *uint64_t v5 = *v6;
    v5[1] = v6[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = v7[5];
    uint64_t v19 = (char *)v5 + v18;
    uint64_t v20 = (char *)v6 + v18;
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
    id v37 = v19;
    LODWORD(v19) = v23(v19, 1, v21);
    int v24 = v23(v20, 1, v21);
    if (v19)
    {
      if (!v24)
      {
        (*(void (**)(void *, char *, uint64_t))(v22 + 16))(v37, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v37, 0, 1, v21);
        goto LABEL_18;
      }
      size_t v25 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v26 = v37;
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(void *, char *, uint64_t))(v22 + 24))(v37, v20, v21);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v22 + 8))(v37, v21);
      size_t v25 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v26 = v37;
    }
    memcpy(v26, v20, v25);
LABEL_18:
    uint64_t v31 = v7[6];
    uint64_t v32 = (char *)v5 + v31;
    unint64_t v33 = (char *)v6 + v31;
    uint64_t v34 = *(void *)v33;
    v32[8] = v33[8];
    *(void *)uint64_t v32 = v34;
    *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
    *((unsigned char *)v5 + v7[8]) = *((unsigned char *)v6 + v7[8]);
    return a1;
  }
  if (v11)
  {
LABEL_7:
    uint64_t v17 = sub_100004010(&qword_10037F158);
    memcpy(v5, v6, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v12 = v7[5];
  char v36 = (char *)v6 + v12;
  __dst = (char *)v5 + v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  if (v15(v36, 1, v13))
  {
    uint64_t v16 = sub_100004010(&qword_100380418);
    memcpy(__dst, v36, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v27 = v7[6];
  uint64_t v28 = (char *)v5 + v27;
  id v29 = (char *)v6 + v27;
  uint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
  *((unsigned char *)v5 + v7[8]) = *((unsigned char *)v6 + v7[8]);
  (*(void (**)(void *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

_DWORD *sub_100117990(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (_OWORD *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100004010(&qword_10037F158);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *uint64_t v5 = *v6;
    uint64_t v10 = v7[5];
    int v11 = (char *)v5 + v10;
    uint64_t v12 = (char *)v6 + v10;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_100004010(&qword_100380418);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v16 = v7[6];
    uint64_t v17 = (char *)v5 + v16;
    uint64_t v18 = (char *)v6 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
    *((unsigned char *)v5 + v7[8]) = *((unsigned char *)v6 + v7[8]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100117BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10011AAAC((uint64_t)v5, type metadata accessor for TransmissionProgress);
      goto LABEL_7;
    }
    uint64_t v19 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v19;
    swift_bridgeObjectRelease();
    uint64_t v20 = v7[5];
    uint64_t v21 = (char *)v5 + v20;
    uint64_t v22 = (char *)v6 + v20;
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    size_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
    char v36 = v21;
    LODWORD(v21) = v25(v21, 1, v23);
    int v26 = v25(v22, 1, v23);
    if (v21)
    {
      if (!v26)
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 32))(v36, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v36, 0, 1, v23);
        goto LABEL_18;
      }
      size_t v27 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v28 = v36;
    }
    else
    {
      if (!v26)
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 40))(v36, v22, v23);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v24 + 8))(v36, v23);
      size_t v27 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v28 = v36;
    }
    memcpy(v28, v22, v27);
LABEL_18:
    uint64_t v32 = v7[6];
    unint64_t v33 = (char *)v5 + v32;
    uint64_t v34 = (char *)v6 + v32;
    *(void *)unint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
    *((unsigned char *)v5 + v7[8]) = *((unsigned char *)v6 + v7[8]);
    return a1;
  }
  if (v11)
  {
LABEL_7:
    uint64_t v18 = sub_100004010(&qword_10037F158);
    memcpy(v5, v6, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
  uint64_t v12 = v7[5];
  uint64_t v13 = (char *)v5 + v12;
  uint64_t v14 = (char *)v6 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100004010(&qword_100380418);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v29 = v7[6];
  uint64_t v30 = (char *)v5 + v29;
  uint64_t v31 = (char *)v6 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
  *((unsigned char *)v5 + v7[8]) = *((unsigned char *)v6 + v7[8]);
  (*(void (**)(void *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_100117FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100117FD8);
}

uint64_t sub_100117FD8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_100004010(&qword_10037F158);
    int v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 32)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10011808C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001180A0);
}

unsigned char *sub_1001180A0(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_100004010(&qword_10037F158);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 32)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LinkState(uint64_t a1)
{
  return sub_1000497F4(a1, (uint64_t *)&unk_100387F50);
}

void sub_100118168()
{
  sub_1001154C4(319, (unint64_t *)&qword_100387F60, (void (*)(uint64_t))type metadata accessor for TransmissionProgress);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_100118230(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
    *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
    uint64_t v7 = (int *)type metadata accessor for ConnectionAssistantState(0);
    uint64_t v8 = v7[7];
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for ServiceOutages(0);
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100004010(&qword_100387FA0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      v16(v9, v10, v15);
      v16(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v15);
      *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
      uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v17(v9, 0, 1, v11);
    }
    uint64_t v18 = v7[8];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for SilencePeriod(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_100004010(&qword_100387FA8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = type metadata accessor for Date();
      size_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      v25(v19, v20, v24);
      v25(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v26 = v7[9];
    size_t v27 = (_DWORD *)((char *)v4 + v26);
    uint64_t v28 = (_DWORD *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for LinkState(0);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_100004010((uint64_t *)&unk_100383910);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      *size_t v27 = *v28;
      uint64_t v32 = *(int *)(v29 + 32);
      unint64_t v33 = (void *)((char *)v27 + v32);
      uint64_t v34 = (void *)((char *)v28 + v32);
      id v35 = (int *)type metadata accessor for TransmissionProgress(0);
      uint64_t v36 = *((void *)v35 - 1);
      if ((*(unsigned int (**)(void *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = sub_100004010(&qword_10037F158);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        uint64_t v38 = v34[1];
        *unint64_t v33 = *v34;
        v33[1] = v38;
        uint64_t v39 = v35[5];
        uint64_t v89 = v33;
        __dst = (char *)v33 + v39;
        __src = (char *)v34 + v39;
        uint64_t v40 = type metadata accessor for Date();
        uint64_t v88 = *(void *)(v40 - 8);
        uint64_t v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
        swift_bridgeObjectRetain();
        if (v91(__src, 1, v40))
        {
          uint64_t v41 = sub_100004010(&qword_100380418);
          memcpy(__dst, __src, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dst, __src, v40);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v40);
        }
        uint64_t v42 = v35[6];
        uint64_t v43 = (char *)v89 + v42;
        id v44 = (char *)v34 + v42;
        *(void *)uint64_t v43 = *(void *)v44;
        v43[8] = v44[8];
        *(void *)((char *)v89 + v35[7]) = *(void *)((char *)v34 + v35[7]);
        *((unsigned char *)v89 + v35[8]) = *((unsigned char *)v34 + v35[8]);
        (*(void (**)(void))(v36 + 56))();
      }
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v45 = v7[10];
    uint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = (uint64_t)a2 + v45;
    long long v48 = *(_OWORD *)(v47 + 16);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v48;
    v46[32] = *(unsigned char *)(v47 + 32);
    uint64_t v49 = v7[11];
    long long v50 = (_OWORD *)((char *)v4 + v49);
    unsigned __int8 v51 = (_OWORD *)((char *)a2 + v49);
    *(_OWORD *)((char *)v50 + 25) = *(_OWORD *)((char *)v51 + 25);
    long long v52 = v51[1];
    *long long v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = v7[12];
    unsigned int v54 = (void *)((char *)v4 + v53);
    uint64_t v55 = (uint64_t *)((char *)a2 + v53);
    uint64_t v56 = v55[1];
    *unsigned int v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = v7[13];
    uint64_t v58 = (char *)v4 + v57;
    uint64_t v59 = (uint64_t)a2 + v57;
    uint64_t v60 = *(uint64_t *)((char *)a2 + v57);
    swift_bridgeObjectRetain();
    if (v60 == 1)
    {
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    }
    else
    {
      uint64_t v61 = *(void *)(v59 + 8);
      *(void *)uint64_t v58 = v60;
      *((void *)v58 + 1) = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v62 = v7[14];
    uint64_t v63 = (char *)v4 + v62;
    unint64_t v64 = (char *)a2 + v62;
    uint64_t v65 = type metadata accessor for ConnectionClosed(0);
    uint64_t v66 = *(void *)(v65 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
    {
      uint64_t v67 = sub_100004010(&qword_100380780);
      memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      *uint64_t v63 = *v64;
      uint64_t v68 = *(int *)(v65 + 20);
      __srca = &v63[v68];
      uint64_t v69 = &v64[v68];
      uint64_t v70 = type metadata accessor for Date();
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = sub_100004010(&qword_100380418);
        memcpy(__srca, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 16))(__srca, v69, v70);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(__srca, 0, 1, v70);
      }
      *(void *)&v63[*(int *)(v65 + 24)] = *(void *)&v64[*(int *)(v65 + 24)];
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v66 + 56);
      swift_bridgeObjectRetain();
      v73(v63, 0, 1, v65);
    }
    uint64_t v74 = v7[15];
    uint64_t v75 = (char *)v4 + v74;
    id v76 = (char *)a2 + v74;
    uint64_t v77 = *((void *)v76 + 1);
    if (v77)
    {
      *uint64_t v75 = *v76;
      *((void *)v75 + 1) = v77;
      *((_WORD *)v75 + 8) = *((_WORD *)v76 + 8);
      uint64_t v78 = *((void *)v76 + 4);
      *((void *)v75 + 3) = *((void *)v76 + 3);
      *((void *)v75 + 4) = v78;
      uint64_t v79 = *((void *)v76 + 6);
      *((void *)v75 + 5) = *((void *)v76 + 5);
      *((void *)v75 + 6) = v79;
      *((void *)v75 + 7) = *((void *)v76 + 7);
      v75[64] = v76[64];
      v75[65] = v76[65];
      *(_OWORD *)(v75 + 72) = *(_OWORD *)(v76 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v80 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v80;
      *((_OWORD *)v75 + 4) = *((_OWORD *)v76 + 4);
      *((void *)v75 + 10) = *((void *)v76 + 10);
      long long v81 = *((_OWORD *)v76 + 1);
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v81;
    }
    uint64_t v82 = a3[6];
    *(void *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *((unsigned char *)v4 + v82) = *((unsigned char *)a2 + v82);
    uint64_t v83 = a3[7];
    uint64_t v84 = (void *)((char *)v4 + v83);
    uint64_t v85 = (uint64_t *)((char *)a2 + v83);
    if (*v85)
    {
      uint64_t v86 = v85[1];
      *uint64_t v84 = *v85;
      v84[1] = v86;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
    }
    *(void *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_100118B5C(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (int *)type metadata accessor for ConnectionAssistantState(0);
  uint64_t v5 = a1 + v4[7];
  uint64_t v6 = type metadata accessor for ServiceOutages(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v5, v7);
    v8(v5 + *(int *)(v6 + 20), v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + v4[8];
  uint64_t v10 = type metadata accessor for SilencePeriod(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    v12(v9 + *(int *)(v10 + 20), v11);
  }
  uint64_t v13 = a1 + v4[9];
  uint64_t v14 = type metadata accessor for LinkState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = v13 + *(int *)(v14 + 32);
    uint64_t v16 = type metadata accessor for TransmissionProgress(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = v15 + *(int *)(v16 + 20);
      uint64_t v18 = type metadata accessor for Date();
      uint64_t v19 = *(void *)(v18 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      }
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + v4[13]) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = a1 + v4[14];
  uint64_t v21 = type metadata accessor for ConnectionClosed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
  {
    uint64_t v22 = v20 + *(int *)(v21 + 20);
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + v4[15] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + *(int *)(a2 + 28))) {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100118F90(uint64_t a1, uint64_t a2, int *a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  uint64_t v6 = (int *)type metadata accessor for ConnectionAssistantState(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ServiceOutages(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100004010(&qword_100387FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
    uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v15(v8, 0, 1, v10);
  }
  uint64_t v16 = v6[8];
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  uint64_t v19 = type metadata accessor for SilencePeriod(0);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_100004010(&qword_100387FA8);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    v23(v17, v18, v22);
    v23(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v24 = v6[9];
  size_t v25 = (_DWORD *)(a1 + v24);
  uint64_t v26 = (_DWORD *)(a2 + v24);
  uint64_t v27 = type metadata accessor for LinkState(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100004010((uint64_t *)&unk_100383910);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    *size_t v25 = *v26;
    uint64_t v30 = *(int *)(v27 + 32);
    uint64_t v31 = (void *)((char *)v25 + v30);
    uint64_t v32 = (void *)((char *)v26 + v30);
    unint64_t v33 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v34 = *((void *)v33 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_100004010(&qword_10037F158);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      uint64_t v36 = v32[1];
      uint64_t v88 = v31;
      void *v31 = *v32;
      v31[1] = v36;
      uint64_t v37 = v33[5];
      __dst = (char *)v31 + v37;
      __src = (char *)v32 + v37;
      uint64_t v38 = type metadata accessor for Date();
      uint64_t v86 = *(void *)(v38 - 8);
      BOOL v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
      swift_bridgeObjectRetain();
      if (v87(__src, 1, v38))
      {
        uint64_t v39 = sub_100004010(&qword_100380418);
        memcpy(__dst, __src, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))(__dst, __src, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v38);
      }
      uint64_t v40 = v33[6];
      uint64_t v41 = (char *)v88 + v40;
      uint64_t v42 = (char *)v32 + v40;
      *(void *)uint64_t v41 = *(void *)v42;
      unsigned char v41[8] = v42[8];
      *(void *)((char *)v88 + v33[7]) = *(void *)((char *)v32 + v33[7]);
      *((unsigned char *)v88 + v33[8]) = *((unsigned char *)v32 + v33[8]);
      (*(void (**)(void))(v34 + 56))();
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v43 = v6[10];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  long long v46 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v46;
  *(unsigned char *)(v44 + 32) = *(unsigned char *)(v45 + 32);
  uint64_t v47 = v6[11];
  long long v48 = (_OWORD *)(a1 + v47);
  uint64_t v49 = (_OWORD *)(a2 + v47);
  *(_OWORD *)((char *)v48 + 25) = *(_OWORD *)((char *)v49 + 25);
  long long v50 = v49[1];
  *long long v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = v6[12];
  long long v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  uint64_t v54 = v53[1];
  *long long v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = v6[13];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  uint64_t v58 = *(void *)(a2 + v55);
  swift_bridgeObjectRetain();
  if (v58 == 1)
  {
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  }
  else
  {
    uint64_t v59 = *(void *)(v57 + 8);
    *(void *)uint64_t v56 = v58;
    *(void *)(v56 + 8) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v60 = v6[14];
  uint64_t v61 = (unsigned char *)(a1 + v60);
  uint64_t v62 = (unsigned char *)(a2 + v60);
  uint64_t v63 = type metadata accessor for ConnectionClosed(0);
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    uint64_t v65 = sub_100004010(&qword_100380780);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    *uint64_t v61 = *v62;
    uint64_t v66 = *(int *)(v63 + 20);
    __srca = &v61[v66];
    uint64_t v67 = &v62[v66];
    uint64_t v68 = type metadata accessor for Date();
    uint64_t v69 = *(void *)(v68 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
    {
      uint64_t v70 = sub_100004010(&qword_100380418);
      memcpy(__srca, v67, *(void *)(*(void *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 16))(__srca, v67, v68);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v69 + 56))(__srca, 0, 1, v68);
    }
    *(void *)&v61[*(int *)(v63 + 24)] = *(void *)&v62[*(int *)(v63 + 24)];
    uint64_t v71 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56);
    swift_bridgeObjectRetain();
    v71(v61, 0, 1, v63);
  }
  uint64_t v72 = v6[15];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  uint64_t v75 = *(void *)(v74 + 8);
  if (v75)
  {
    *(unsigned char *)uint64_t v73 = *(unsigned char *)v74;
    *(void *)(v73 + 8) = v75;
    *(_WORD *)(v73 + 16) = *(_WORD *)(v74 + 16);
    uint64_t v76 = *(void *)(v74 + 32);
    *(void *)(v73 + 24) = *(void *)(v74 + 24);
    *(void *)(v73 + 32) = v76;
    uint64_t v77 = *(void *)(v74 + 48);
    *(void *)(v73 + 40) = *(void *)(v74 + 40);
    *(void *)(v73 + 48) = v77;
    *(void *)(v73 + 56) = *(void *)(v74 + 56);
    *(unsigned char *)(v73 + 64) = *(unsigned char *)(v74 + 64);
    *(unsigned char *)(v73 + 65) = *(unsigned char *)(v74 + 65);
    *(_OWORD *)(v73 + 72) = *(_OWORD *)(v74 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v78 = *(_OWORD *)(v74 + 48);
    *(_OWORD *)(v73 + 32) = *(_OWORD *)(v74 + 32);
    *(_OWORD *)(v73 + 48) = v78;
    *(_OWORD *)(v73 + 64) = *(_OWORD *)(v74 + 64);
    *(void *)(v73 + 80) = *(void *)(v74 + 80);
    long long v79 = *(_OWORD *)(v74 + 16);
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    *(_OWORD *)(v73 + 16) = v79;
  }
  uint64_t v80 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v80) = *(unsigned char *)(a2 + v80);
  uint64_t v81 = a3[7];
  uint64_t v82 = (void *)(a1 + v81);
  uint64_t v83 = (void *)(a2 + v81);
  if (*v83)
  {
    uint64_t v84 = v83[1];
    *uint64_t v82 = *v83;
    v82[1] = v84;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  return a1;
}

uint64_t sub_10011986C(uint64_t a1, long long *a2, int *a3)
{
  long long v5 = *a2;
  long long v6 = a2[1];
  *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
  uint64_t v7 = (int *)type metadata accessor for ConnectionAssistantState(0);
  uint64_t v8 = v7[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for ServiceOutages(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v9, v10, v16);
      v17(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v16);
      *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
      uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v18(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_10011AAAC((uint64_t)v9, type metadata accessor for ServiceOutages);
LABEL_6:
    uint64_t v19 = sub_100004010(&qword_100387FA0);
    memcpy(v9, v10, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24);
  v49(v9, v10, v48);
  v49(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v48);
  *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v20 = v7[8];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for SilencePeriod(0);
  uint64_t v24 = *(void *)(v23 - 8);
  size_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      uint64_t v28 = type metadata accessor for Date();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v21, v22, v28);
      v29(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    sub_10011AAAC((uint64_t)v21, type metadata accessor for SilencePeriod);
LABEL_12:
    uint64_t v30 = sub_100004010(&qword_100387FA8);
    memcpy(v21, v22, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 24);
  v51(v21, v22, v50);
  v51(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v50);
LABEL_13:
  uint64_t v31 = v7[9];
  uint64_t v32 = (unsigned char *)(a1 + v31);
  unint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for LinkState(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_10011AAAC((uint64_t)v32, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *uint64_t v32 = *v33;
    v32[1] = v33[1];
    _OWORD v32[2] = v33[2];
    v32[3] = v33[3];
    uint64_t v52 = *(int *)(v34 + 32);
    uint64_t v53 = &v32[v52];
    uint64_t v54 = &v33[v52];
    uint64_t v55 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v56 = *((void *)v55 - 1);
    uint64_t v57 = *(uint64_t (**)(void *, uint64_t, int *))(v56 + 48);
    int v58 = v57(v53, 1, v55);
    int v59 = v57(v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        *uint64_t v53 = *v54;
        v53[1] = v54[1];
        uint64_t v60 = v55[5];
        __src = (char *)v54 + v60;
        __dst = (char *)v53 + v60;
        uint64_t v61 = type metadata accessor for Date();
        uint64_t v148 = *(void *)(v61 - 8);
        long long v151 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48);
        swift_bridgeObjectRetain();
        if (v151(__src, 1, v61))
        {
          uint64_t v62 = sub_100004010(&qword_100380418);
          memcpy(__dst, __src, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v148 + 16))(__dst, __src, v61);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(__dst, 0, 1, v61);
        }
        uint64_t v138 = v55[6];
        uint64_t v139 = (char *)v53 + v138;
        id v140 = (char *)v54 + v138;
        uint64_t v141 = *(void *)v140;
        v139[8] = v140[8];
        *(void *)uint64_t v139 = v141;
        *(void *)((char *)v53 + v55[7]) = *(void *)((char *)v54 + v55[7]);
        *((unsigned char *)v53 + v55[8]) = *((unsigned char *)v54 + v55[8]);
        (*(void (**)(void *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v59)
    {
      sub_10011AAAC((uint64_t)v53, type metadata accessor for TransmissionProgress);
LABEL_31:
      size_t v45 = *(void *)(*(void *)(sub_100004010(&qword_10037F158) - 8) + 64);
      long long v46 = v53;
      uint64_t v47 = v54;
      goto LABEL_20;
    }
    *uint64_t v53 = *v54;
    v53[1] = v54[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v110 = v55[5];
    uint64_t v111 = (char *)v53 + v110;
    __dstd = (char *)v54 + v110;
    uint64_t v112 = type metadata accessor for Date();
    uint64_t v154 = *(void **)(v112 - 8);
    __srca = v111;
    uint64_t v113 = (uint64_t (*)(char *, uint64_t, uint64_t))v154[6];
    LODWORD(v111) = v113(v111, 1, v112);
    int v114 = v113(__dstd, 1, v112);
    if (v111)
    {
      if (!v114)
      {
        ((void (*)(void *, char *, uint64_t))v154[2])(__srca, __dstd, v112);
        ((void (*)(void *, void, uint64_t, uint64_t))v154[7])(__srca, 0, 1, v112);
        goto LABEL_85;
      }
      size_t v115 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v116 = __srca;
    }
    else
    {
      if (!v114)
      {
        ((void (*)(void *, char *, uint64_t))v154[3])(__srca, __dstd, v112);
        goto LABEL_85;
      }
      ((void (*)(void *, uint64_t))v154[1])(__srca, v112);
      size_t v115 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v116 = __srca;
    }
    memcpy(v116, __dstd, v115);
LABEL_85:
    uint64_t v142 = v55[6];
    uint64_t v143 = (char *)v53 + v142;
    uint64_t v144 = (char *)v54 + v142;
    uint64_t v145 = *(void *)v144;
    v143[8] = v144[8];
    *(void *)uint64_t v143 = v145;
    *(void *)((char *)v53 + v55[7]) = *(void *)((char *)v54 + v55[7]);
    *((unsigned char *)v53 + v55[8]) = *((unsigned char *)v54 + v55[8]);
    goto LABEL_35;
  }
  if (v38)
  {
LABEL_19:
    size_t v45 = *(void *)(*(void *)(sub_100004010((uint64_t *)&unk_100383910) - 8) + 64);
    long long v46 = v32;
    uint64_t v47 = v33;
LABEL_20:
    memcpy(v46, v47, v45);
    goto LABEL_35;
  }
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  _OWORD v32[2] = v33[2];
  v32[3] = v33[3];
  uint64_t v39 = *(int *)(v34 + 32);
  uint64_t v40 = &v32[v39];
  uint64_t v41 = &v33[v39];
  uint64_t v42 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v43 = *((void *)v42 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    uint64_t v44 = sub_100004010(&qword_10037F158);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    *uint64_t v40 = *v41;
    uint64_t v149 = v40;
    v40[1] = v41[1];
    uint64_t v63 = v42[5];
    int v152 = (char *)v40 + v63;
    __dsta = (char *)v41 + v63;
    uint64_t v64 = type metadata accessor for Date();
    uint64_t v146 = *(void *)(v64 - 8);
    uint64_t v147 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48);
    swift_bridgeObjectRetain();
    if (v147(__dsta, 1, v64))
    {
      uint64_t v65 = sub_100004010(&qword_100380418);
      memcpy(v152, __dsta, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v152, __dsta, v64);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v152, 0, 1, v64);
    }
    uint64_t v66 = v42[6];
    uint64_t v67 = (char *)v149 + v66;
    uint64_t v68 = (char *)v41 + v66;
    uint64_t v69 = *(void *)v68;
    v67[8] = v68[8];
    *(void *)uint64_t v67 = v69;
    *(void *)((char *)v149 + v42[7]) = *(void *)((char *)v41 + v42[7]);
    *((unsigned char *)v149 + v42[8]) = *((unsigned char *)v41 + v42[8]);
    (*(void (**)(void))(v43 + 56))();
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_35:
  uint64_t v70 = v7[10];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = (long long *)((char *)a2 + v70);
  long long v73 = *v72;
  long long v74 = v72[1];
  *(unsigned char *)(v71 + 32) = *((unsigned char *)v72 + 32);
  *(_OWORD *)uint64_t v71 = v73;
  *(_OWORD *)(v71 + 16) = v74;
  uint64_t v75 = v7[11];
  uint64_t v76 = (_OWORD *)(a1 + v75);
  uint64_t v77 = (long long *)((char *)a2 + v75);
  long long v78 = *v77;
  long long v79 = v77[1];
  *(_OWORD *)((char *)v76 + 25) = *(long long *)((char *)v77 + 25);
  *uint64_t v76 = v78;
  v76[1] = v79;
  uint64_t v80 = v7[12];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)((char *)a2 + v80);
  *uint64_t v81 = *v82;
  v81[1] = v82[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = v7[13];
  uint64_t v84 = (void *)(a1 + v83);
  uint64_t v85 = (uint64_t)a2 + v83;
  uint64_t v86 = *(void *)((char *)a2 + v83);
  if (*(void *)(a1 + v83) == 1)
  {
    if (v86 != 1)
    {
      *uint64_t v84 = v86;
      v84[1] = *(void *)(v85 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  if (v86 == 1)
  {
    sub_10011AB0C(a1 + v83);
LABEL_40:
    *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
    goto LABEL_42;
  }
  *uint64_t v84 = v86;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v84[1] = *(void *)(v85 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_42:
  uint64_t v87 = v7[14];
  uint64_t v88 = (unsigned char *)(a1 + v87);
  uint64_t v89 = (char *)a2 + v87;
  uint64_t v90 = type metadata accessor for ConnectionClosed(0);
  uint64_t v91 = *(void *)(v90 - 8);
  id v92 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
  int v93 = v92(v88, 1, v90);
  int v94 = v92(v89, 1, v90);
  if (!v93)
  {
    if (v94)
    {
      sub_10011AAAC((uint64_t)v88, type metadata accessor for ConnectionClosed);
      goto LABEL_48;
    }
    uint64_t v153 = v7;
    *uint64_t v88 = *v89;
    uint64_t v101 = *(int *)(v90 + 20);
    uint64_t v102 = &v88[v101];
    uint64_t v103 = &v89[v101];
    uint64_t v104 = type metadata accessor for Date();
    uint64_t v150 = *(void *)(v104 - 8);
    id v105 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v150 + 48);
    __dstc = v102;
    LODWORD(v102) = v105(v102, 1, v104);
    int v106 = v105(v103, 1, v104);
    if (v102)
    {
      if (!v106)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v150 + 16))(__dstc, v103, v104);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v150 + 56))(__dstc, 0, 1, v104);
        goto LABEL_62;
      }
      size_t v107 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v108 = __dstc;
    }
    else
    {
      if (!v106)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v150 + 24))(__dstc, v103, v104);
        goto LABEL_62;
      }
      (*(void (**)(void *, uint64_t))(v150 + 8))(__dstc, v104);
      size_t v107 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v108 = __dstc;
    }
    memcpy(v108, v103, v107);
LABEL_62:
    uint64_t v7 = v153;
    *(void *)&v88[*(int *)(v90 + 24)] = *(void *)&v89[*(int *)(v90 + 24)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  if (v94)
  {
LABEL_48:
    uint64_t v100 = sub_100004010(&qword_100380780);
    memcpy(v88, v89, *(void *)(*(void *)(v100 - 8) + 64));
    goto LABEL_63;
  }
  *uint64_t v88 = *v89;
  uint64_t v95 = *(int *)(v90 + 20);
  __dstb = &v88[v95];
  uint64_t v96 = &v89[v95];
  uint64_t v97 = type metadata accessor for Date();
  uint64_t v98 = *(void *)(v97 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
  {
    uint64_t v99 = sub_100004010(&qword_100380418);
    memcpy(__dstb, v96, *(void *)(*(void *)(v99 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v98 + 16))(__dstb, v96, v97);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v98 + 56))(__dstb, 0, 1, v97);
  }
  *(void *)&v88[*(int *)(v90 + 24)] = *(void *)&v89[*(int *)(v90 + 24)];
  uint64_t v109 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56);
  swift_bridgeObjectRetain();
  v109(v88, 0, 1, v90);
LABEL_63:
  uint64_t v117 = v7[15];
  uint64_t v118 = a1 + v117;
  uint64_t v119 = (uint64_t)a2 + v117;
  uint64_t v120 = *(void *)(a1 + v117 + 8);
  uint64_t v121 = *(void *)((char *)a2 + v117 + 8);
  if (v120)
  {
    if (v121)
    {
      *(unsigned char *)uint64_t v118 = *(unsigned char *)v119;
      *(void *)(v118 + 8) = *(void *)(v119 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v118 + 16) = *(unsigned char *)(v119 + 16);
      *(unsigned char *)(v118 + 17) = *(unsigned char *)(v119 + 17);
      *(void *)(v118 + 24) = *(void *)(v119 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 32) = *(void *)(v119 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 40) = *(void *)(v119 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 48) = *(void *)(v119 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 56) = *(void *)(v119 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v118 + 64) = *(unsigned char *)(v119 + 64);
      *(unsigned char *)(v118 + 65) = *(unsigned char *)(v119 + 65);
      *(void *)(v118 + 72) = *(void *)(v119 + 72);
      *(void *)(v118 + 80) = *(void *)(v119 + 80);
    }
    else
    {
      sub_10011AB40(v118);
      long long v122 = *(_OWORD *)(v119 + 16);
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
      *(_OWORD *)(v118 + 16) = v122;
      long long v124 = *(_OWORD *)(v119 + 48);
      long long v123 = *(_OWORD *)(v119 + 64);
      long long v125 = *(_OWORD *)(v119 + 32);
      *(void *)(v118 + 80) = *(void *)(v119 + 80);
      *(_OWORD *)(v118 + 48) = v124;
      *(_OWORD *)(v118 + 64) = v123;
      *(_OWORD *)(v118 + 32) = v125;
    }
  }
  else if (v121)
  {
    *(unsigned char *)uint64_t v118 = *(unsigned char *)v119;
    *(void *)(v118 + 8) = *(void *)(v119 + 8);
    *(unsigned char *)(v118 + 16) = *(unsigned char *)(v119 + 16);
    *(unsigned char *)(v118 + 17) = *(unsigned char *)(v119 + 17);
    *(void *)(v118 + 24) = *(void *)(v119 + 24);
    *(void *)(v118 + 32) = *(void *)(v119 + 32);
    *(void *)(v118 + 40) = *(void *)(v119 + 40);
    *(void *)(v118 + 48) = *(void *)(v119 + 48);
    *(void *)(v118 + 56) = *(void *)(v119 + 56);
    *(unsigned char *)(v118 + 64) = *(unsigned char *)(v119 + 64);
    *(unsigned char *)(v118 + 65) = *(unsigned char *)(v119 + 65);
    *(_OWORD *)(v118 + 72) = *(_OWORD *)(v119 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v126 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
    *(_OWORD *)(v118 + 16) = v126;
    long long v127 = *(_OWORD *)(v119 + 32);
    long long v128 = *(_OWORD *)(v119 + 48);
    long long v129 = *(_OWORD *)(v119 + 64);
    *(void *)(v118 + 80) = *(void *)(v119 + 80);
    *(_OWORD *)(v118 + 48) = v128;
    *(_OWORD *)(v118 + 64) = v129;
    *(_OWORD *)(v118 + 32) = v127;
  }
  *(void *)(a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v130 = a3[7];
  long long v131 = (void *)(a1 + v130);
  uint64_t v132 = (uint64_t)a2 + v130;
  uint64_t v133 = *(void *)(a1 + v130);
  uint64_t v134 = *(void *)((char *)a2 + v130);
  if (!v133)
  {
    if (v134)
    {
      uint64_t v136 = *(void *)(v132 + 8);
      void *v131 = v134;
      v131[1] = v136;
      swift_retain();
      goto LABEL_77;
    }
LABEL_76:
    *(_OWORD *)long long v131 = *(_OWORD *)v132;
    goto LABEL_77;
  }
  if (!v134)
  {
    swift_release();
    goto LABEL_76;
  }
  uint64_t v135 = *(void *)(v132 + 8);
  void *v131 = v134;
  v131[1] = v135;
  swift_retain();
  swift_release();
LABEL_77:
  *(void *)(a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10011AAAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10011AB0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011AB40(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011AB94(uint64_t a1, uint64_t a2, int *a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  long long v6 = (int *)type metadata accessor for ConnectionAssistantState(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ServiceOutages(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100004010(&qword_100387FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    int v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = v6[8];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for SilencePeriod(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100004010(&qword_100387FA8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v22(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v23 = v6[9];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  size_t v25 = (_DWORD *)(a2 + v23);
  uint64_t v26 = type metadata accessor for LinkState(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_100004010((uint64_t *)&unk_100383910);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *v25;
    uint64_t v29 = *(int *)(v26 + 32);
    uint64_t v30 = (_OWORD *)((char *)v24 + v29);
    uint64_t v31 = (_OWORD *)((char *)v25 + v29);
    uint64_t v32 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v33 = *((void *)v32 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_100004010(&qword_10037F158);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v76 = v33;
      *uint64_t v30 = *v31;
      uint64_t v35 = v32[5];
      __dst = (char *)v30 + v35;
      uint64_t v36 = (char *)v31 + v35;
      uint64_t v37 = type metadata accessor for Date();
      uint64_t v75 = *(void *)(v37 - 8);
      uint64_t v77 = v36;
      int v38 = v36;
      uint64_t v39 = v37;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v38, 1, v37))
      {
        uint64_t v40 = sub_100004010(&qword_100380418);
        memcpy(__dst, v77, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v75 + 32))(__dst, v77, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(__dst, 0, 1, v39);
      }
      uint64_t v41 = v32[6];
      uint64_t v42 = (char *)v30 + v41;
      uint64_t v43 = (char *)v31 + v41;
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      *(void *)((char *)v30 + v32[7]) = *(void *)((char *)v31 + v32[7]);
      *((unsigned char *)v30 + v32[8]) = *((unsigned char *)v31 + v32[8]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v76 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v44 = v6[10];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  long long v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(unsigned char *)(v45 + 32) = *(unsigned char *)(v46 + 32);
  uint64_t v48 = v6[11];
  uint64_t v49 = (_OWORD *)(a1 + v48);
  uint64_t v50 = (_OWORD *)(a2 + v48);
  *(_OWORD *)((char *)v49 + 25) = *(_OWORD *)((char *)v50 + 25);
  long long v51 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v51;
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  uint64_t v52 = v6[14];
  uint64_t v53 = (unsigned char *)(a1 + v52);
  uint64_t v54 = (unsigned char *)(a2 + v52);
  uint64_t v55 = type metadata accessor for ConnectionClosed(0);
  uint64_t v56 = *(void *)(v55 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    uint64_t v57 = sub_100004010(&qword_100380780);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    *uint64_t v53 = *v54;
    uint64_t v58 = *(int *)(v55 + 20);
    __dsta = &v53[v58];
    int v59 = &v54[v58];
    uint64_t v60 = type metadata accessor for Date();
    uint64_t v61 = *(void *)(v60 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      uint64_t v62 = sub_100004010(&qword_100380418);
      memcpy(__dsta, v59, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v61 + 32))(__dsta, v59, v60);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(__dsta, 0, 1, v60);
    }
    *(void *)&v53[*(int *)(v55 + 24)] = *(void *)&v54[*(int *)(v55 + 24)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  uint64_t v63 = v6[15];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  long long v66 = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_OWORD *)(v64 + 48) = v66;
  *(_OWORD *)(v64 + 64) = *(_OWORD *)(v65 + 64);
  *(void *)(v64 + 80) = *(void *)(v65 + 80);
  long long v67 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v67;
  uint64_t v68 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v68) = *(unsigned char *)(a2 + v68);
  uint64_t v69 = a3[7];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (uint64_t *)(a2 + v69);
  uint64_t v72 = *v71;
  if (*v71)
  {
    uint64_t v73 = v71[1];
    *uint64_t v70 = v72;
    v70[1] = v73;
  }
  else
  {
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
  }
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10011B37C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  long long v6 = (int *)type metadata accessor for ConnectionAssistantState(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ServiceOutages(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(v8, v9, v15);
      v16(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v15);
      *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_10011AAAC((uint64_t)v8, type metadata accessor for ServiceOutages);
LABEL_6:
    uint64_t v17 = sub_100004010(&qword_100387FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v46 = type metadata accessor for Date();
  long long v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 40);
  v47(v8, v9, v46);
  v47(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v46);
  *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v18 = v6[8];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for SilencePeriod(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      uint64_t v26 = type metadata accessor for Date();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
      v27(v19, v20, v26);
      v27(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    sub_10011AAAC((uint64_t)v19, type metadata accessor for SilencePeriod);
LABEL_12:
    uint64_t v28 = sub_100004010(&qword_100387FA8);
    memcpy(v19, v20, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40);
  v49(v19, v20, v48);
  v49(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v48);
LABEL_13:
  uint64_t v29 = v6[9];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = type metadata accessor for LinkState(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34((uint64_t)v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      sub_10011AAAC(v30, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *(unsigned char *)uint64_t v30 = *v31;
    *(unsigned char *)(v30 + 1) = v31[1];
    *(_WORD *)(v30 + 2) = *((_WORD *)v31 + 1);
    uint64_t v50 = *(int *)(v32 + 32);
    uint64_t v51 = v30 + v50;
    uint64_t v52 = &v31[v50];
    uint64_t v53 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v54 = *((void *)v53 - 1);
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v54 + 48);
    int v56 = v55(v51, 1, v53);
    int v57 = v55((uint64_t)v52, 1, v53);
    if (v56)
    {
      if (!v57)
      {
        *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
        uint64_t v58 = v53[5];
        __dst = (void *)(v51 + v58);
        int v59 = &v52[v58];
        uint64_t v60 = type metadata accessor for Date();
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          uint64_t v62 = sub_100004010(&qword_100380418);
          memcpy(__dst, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v61 + 32))(__dst, v59, v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v60);
        }
        uint64_t v134 = v53[6];
        uint64_t v135 = v51 + v134;
        uint64_t v136 = &v52[v134];
        *(void *)uint64_t v135 = *(void *)v136;
        *(unsigned char *)(v135 + 8) = v136[8];
        *(void *)(v51 + v53[7]) = *(void *)&v52[v53[7]];
        *(unsigned char *)(v51 + v53[8]) = v52[v53[8]];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v57)
    {
      sub_10011AAAC(v51, type metadata accessor for TransmissionProgress);
LABEL_31:
      size_t v43 = *(void *)(*(void *)(sub_100004010(&qword_10037F158) - 8) + 64);
      uint64_t v44 = (void *)v51;
      uint64_t v45 = v52;
      goto LABEL_20;
    }
    uint64_t v111 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *(void *)(v51 + 8) = v111;
    swift_bridgeObjectRelease();
    uint64_t v112 = v53[5];
    uint64_t v113 = (void *)(v51 + v112);
    __dstd = &v52[v112];
    uint64_t v114 = type metadata accessor for Date();
    uint64_t v144 = *(void *)(v114 - 8);
    __srca = v113;
    size_t v115 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v144 + 48);
    LODWORD(v113) = v115(v113, 1, v114);
    int v116 = v115(__dstd, 1, v114);
    if (v113)
    {
      if (!v116)
      {
        (*(void (**)(void *, char *, uint64_t))(v144 + 32))(__srca, __dstd, v114);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v144 + 56))(__srca, 0, 1, v114);
        goto LABEL_81;
      }
      size_t v117 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v118 = __srca;
    }
    else
    {
      if (!v116)
      {
        (*(void (**)(void *, char *, uint64_t))(v144 + 40))(__srca, __dstd, v114);
        goto LABEL_81;
      }
      (*(void (**)(void *, uint64_t))(v144 + 8))(__srca, v114);
      size_t v117 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v118 = __srca;
    }
    memcpy(v118, __dstd, v117);
LABEL_81:
    uint64_t v137 = v53[6];
    uint64_t v138 = v51 + v137;
    uint64_t v139 = &v52[v137];
    *(void *)uint64_t v138 = *(void *)v139;
    *(unsigned char *)(v138 + 8) = v139[8];
    *(void *)(v51 + v53[7]) = *(void *)&v52[v53[7]];
    *(unsigned char *)(v51 + v53[8]) = v52[v53[8]];
    goto LABEL_35;
  }
  if (v36)
  {
LABEL_19:
    size_t v43 = *(void *)(*(void *)(sub_100004010((uint64_t *)&unk_100383910) - 8) + 64);
    uint64_t v44 = (void *)v30;
    uint64_t v45 = v31;
LABEL_20:
    memcpy(v44, v45, v43);
    goto LABEL_35;
  }
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v37 = *(int *)(v32 + 32);
  int v38 = (_OWORD *)(v30 + v37);
  uint64_t v39 = &v31[v37];
  uint64_t v40 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = sub_100004010(&qword_10037F158);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v142 = v41;
    *int v38 = *(_OWORD *)v39;
    uint64_t v63 = v40[5];
    __dsta = (char *)v38 + v63;
    uint64_t v64 = &v39[v63];
    uint64_t v65 = type metadata accessor for Date();
    uint64_t v140 = *(void *)(v65 - 8);
    __src = v64;
    long long v66 = v64;
    uint64_t v67 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v66, 1, v65))
    {
      uint64_t v68 = sub_100004010(&qword_100380418);
      memcpy(__dsta, __src, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v140 + 32))(__dsta, __src, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(__dsta, 0, 1, v67);
    }
    uint64_t v69 = v40[6];
    uint64_t v70 = (char *)v38 + v69;
    uint64_t v71 = &v39[v69];
    *(void *)uint64_t v70 = *(void *)v71;
    v70[8] = v71[8];
    *(void *)((char *)v38 + v40[7]) = *(void *)&v39[v40[7]];
    *((unsigned char *)v38 + v40[8]) = v39[v40[8]];
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v142 + 56))(v38, 0, 1, v40);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_35:
  uint64_t v72 = v6[10];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  long long v75 = *(_OWORD *)(v74 + 16);
  *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
  *(_OWORD *)(v73 + 16) = v75;
  *(unsigned char *)(v73 + 32) = *(unsigned char *)(v74 + 32);
  uint64_t v76 = v6[11];
  uint64_t v77 = (_OWORD *)(a1 + v76);
  long long v78 = (_OWORD *)(a2 + v76);
  *(_OWORD *)((char *)v77 + 25) = *(_OWORD *)((char *)v78 + 25);
  long long v79 = v78[1];
  *uint64_t v77 = *v78;
  v77[1] = v79;
  uint64_t v80 = v6[12];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (uint64_t *)(a2 + v80);
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *uint64_t v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = v6[13];
  uint64_t v86 = a1 + v85;
  uint64_t v87 = a2 + v85;
  if (*(void *)(a1 + v85) == 1)
  {
LABEL_38:
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
    goto LABEL_40;
  }
  if (*(void *)v87 == 1)
  {
    sub_10011AB0C(v86);
    goto LABEL_38;
  }
  *(void *)uint64_t v86 = *(void *)v87;
  swift_bridgeObjectRelease();
  *(void *)(v86 + 8) = *(void *)(v87 + 8);
  swift_bridgeObjectRelease();
LABEL_40:
  uint64_t v88 = v6[14];
  uint64_t v89 = (unsigned char *)(a1 + v88);
  uint64_t v90 = (unsigned char *)(a2 + v88);
  uint64_t v91 = type metadata accessor for ConnectionClosed(0);
  uint64_t v92 = *(void *)(v91 - 8);
  int v93 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (v95)
    {
      sub_10011AAAC((uint64_t)v89, type metadata accessor for ConnectionClosed);
      goto LABEL_46;
    }
    uint64_t v143 = v6;
    *uint64_t v89 = *v90;
    uint64_t v103 = *(int *)(v91 + 20);
    uint64_t v104 = &v89[v103];
    id v105 = &v90[v103];
    uint64_t v106 = type metadata accessor for Date();
    uint64_t v141 = *(void *)(v106 - 8);
    size_t v107 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v141 + 48);
    __dstc = v104;
    LODWORD(v104) = v107(v104, 1, v106);
    int v108 = v107(v105, 1, v106);
    if (v104)
    {
      if (!v108)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v141 + 32))(__dstc, v105, v106);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v141 + 56))(__dstc, 0, 1, v106);
        goto LABEL_60;
      }
      size_t v109 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v110 = __dstc;
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v141 + 40))(__dstc, v105, v106);
        goto LABEL_60;
      }
      (*(void (**)(void *, uint64_t))(v141 + 8))(__dstc, v106);
      size_t v109 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v110 = __dstc;
    }
    memcpy(v110, v105, v109);
LABEL_60:
    uint64_t v102 = a3;
    long long v6 = v143;
    *(void *)&v89[*(int *)(v91 + 24)] = *(void *)&v90[*(int *)(v91 + 24)];
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  if (v95)
  {
LABEL_46:
    uint64_t v101 = sub_100004010(&qword_100380780);
    memcpy(v89, v90, *(void *)(*(void *)(v101 - 8) + 64));
    uint64_t v102 = a3;
    goto LABEL_61;
  }
  *uint64_t v89 = *v90;
  uint64_t v96 = *(int *)(v91 + 20);
  __dstb = &v89[v96];
  uint64_t v97 = &v90[v96];
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v98 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
  {
    uint64_t v100 = sub_100004010(&qword_100380418);
    memcpy(__dstb, v97, *(void *)(*(void *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v99 + 32))(__dstb, v97, v98);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v99 + 56))(__dstb, 0, 1, v98);
  }
  uint64_t v102 = a3;
  *(void *)&v89[*(int *)(v91 + 24)] = *(void *)&v90[*(int *)(v91 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_61:
  uint64_t v119 = v6[15];
  uint64_t v120 = a1 + v119;
  uint64_t v121 = a2 + v119;
  if (*(void *)(a1 + v119 + 8))
  {
    uint64_t v122 = *(void *)(v121 + 8);
    if (v122)
    {
      *(unsigned char *)uint64_t v120 = *(unsigned char *)v121;
      *(void *)(v120 + 8) = v122;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v120 + 16) = *(unsigned char *)(v121 + 16);
      *(unsigned char *)(v120 + 17) = *(unsigned char *)(v121 + 17);
      *(void *)(v120 + 24) = *(void *)(v121 + 24);
      swift_bridgeObjectRelease();
      *(void *)(v120 + 32) = *(void *)(v121 + 32);
      swift_bridgeObjectRelease();
      *(void *)(v120 + 40) = *(void *)(v121 + 40);
      swift_bridgeObjectRelease();
      *(void *)(v120 + 48) = *(void *)(v121 + 48);
      swift_bridgeObjectRelease();
      *(void *)(v120 + 56) = *(void *)(v121 + 56);
      swift_bridgeObjectRelease();
      *(_WORD *)(v120 + 64) = *(_WORD *)(v121 + 64);
      *(_OWORD *)(v120 + 72) = *(_OWORD *)(v121 + 72);
      goto LABEL_66;
    }
    sub_10011AB40(v120);
  }
  long long v123 = *(_OWORD *)(v121 + 48);
  *(_OWORD *)(v120 + 32) = *(_OWORD *)(v121 + 32);
  *(_OWORD *)(v120 + 48) = v123;
  *(_OWORD *)(v120 + 64) = *(_OWORD *)(v121 + 64);
  *(void *)(v120 + 80) = *(void *)(v121 + 80);
  long long v124 = *(_OWORD *)(v121 + 16);
  *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
  *(_OWORD *)(v120 + 16) = v124;
LABEL_66:
  uint64_t v125 = v102[6];
  *(void *)(a1 + v102[5]) = *(void *)(a2 + v102[5]);
  *(unsigned char *)(a1 + v125) = *(unsigned char *)(a2 + v125);
  uint64_t v126 = v102[7];
  long long v127 = (void *)(a1 + v126);
  uint64_t v128 = a2 + v126;
  uint64_t v129 = *(void *)(a1 + v126);
  uint64_t v130 = *(void *)(a2 + v126);
  if (!v129)
  {
    if (v130)
    {
      uint64_t v132 = *(void *)(v128 + 8);
      *long long v127 = v130;
      v127[1] = v132;
      goto LABEL_73;
    }
LABEL_72:
    *(_OWORD *)long long v127 = *(_OWORD *)v128;
    goto LABEL_73;
  }
  if (!v130)
  {
    swift_release();
    goto LABEL_72;
  }
  uint64_t v131 = *(void *)(v128 + 8);
  *long long v127 = v130;
  v127[1] = v131;
  swift_release();
LABEL_73:
  *(void *)(a1 + v102[8]) = *(void *)(a2 + v102[8]);
  swift_release();
  return a1;
}

uint64_t sub_10011C3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011C3F8);
}

uint64_t sub_10011C3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConnectionAssistantState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10011C4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011C4D8);
}

uint64_t sub_10011C4D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ConnectionAssistantState(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for TargetConnection(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100388008);
}

uint64_t sub_10011C5B4()
{
  uint64_t result = type metadata accessor for ConnectionAssistantState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10011C66C(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
    uint64_t v8 = a3[7];
    uint64_t v9 = (char *)(a1 + v8);
    unint64_t v10 = (char *)a2 + v8;
    *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
    uint64_t v11 = type metadata accessor for ServiceOutages(0);
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100004010(&qword_100387FA0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      v16(v9, v10, v15);
      v16(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v15);
      *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
      uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v17(v9, 0, 1, v11);
    }
    uint64_t v18 = a3[8];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for SilencePeriod(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_100004010(&qword_100387FA8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = type metadata accessor for Date();
      int v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      v25(v19, v20, v24);
      v25(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v26 = a3[9];
    uint64_t v27 = (_DWORD *)((char *)v4 + v26);
    uint64_t v28 = (_DWORD *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for LinkState(0);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_100004010((uint64_t *)&unk_100383910);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      *uint64_t v27 = *v28;
      uint64_t v32 = *(int *)(v29 + 32);
      uint64_t v33 = (void *)((char *)v27 + v32);
      uint64_t v34 = (void *)((char *)v28 + v32);
      int v35 = (int *)type metadata accessor for TransmissionProgress(0);
      uint64_t v36 = *((void *)v35 - 1);
      if ((*(unsigned int (**)(void *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = sub_100004010(&qword_10037F158);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        uint64_t v38 = v34[1];
        *uint64_t v33 = *v34;
        v33[1] = v38;
        uint64_t v39 = v35[5];
        uint64_t v84 = v33;
        __dst = (char *)v33 + v39;
        __src = (char *)v34 + v39;
        uint64_t v40 = type metadata accessor for Date();
        uint64_t v83 = *(void *)(v40 - 8);
        uint64_t v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
        swift_bridgeObjectRetain();
        if (v86(__src, 1, v40))
        {
          uint64_t v41 = sub_100004010(&qword_100380418);
          memcpy(__dst, __src, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v83 + 16))(__dst, __src, v40);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(__dst, 0, 1, v40);
        }
        uint64_t v42 = v35[6];
        size_t v43 = (char *)v84 + v42;
        uint64_t v44 = (char *)v34 + v42;
        *(void *)size_t v43 = *(void *)v44;
        v43[8] = v44[8];
        *(void *)((char *)v84 + v35[7]) = *(void *)((char *)v34 + v35[7]);
        *((unsigned char *)v84 + v35[8]) = *((unsigned char *)v34 + v35[8]);
        (*(void (**)(void))(v36 + 56))();
      }
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v45 = a3[10];
    uint64_t v46 = a3[11];
    long long v47 = (char *)v4 + v45;
    uint64_t v48 = (uint64_t)a2 + v45;
    long long v49 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)long long v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v49;
    v47[32] = *(unsigned char *)(v48 + 32);
    uint64_t v50 = (_OWORD *)((char *)v4 + v46);
    uint64_t v51 = (_OWORD *)((char *)a2 + v46);
    *(_OWORD *)((char *)v50 + 25) = *(_OWORD *)((char *)v51 + 25);
    long long v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = a3[12];
    uint64_t v54 = a3[13];
    uint64_t v55 = (void *)((char *)v4 + v53);
    int v56 = (uint64_t *)((char *)a2 + v53);
    uint64_t v57 = v56[1];
    *uint64_t v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = (char *)v4 + v54;
    uint64_t v59 = (uint64_t)a2 + v54;
    uint64_t v60 = *(uint64_t *)((char *)a2 + v54);
    swift_bridgeObjectRetain();
    if (v60 == 1)
    {
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    }
    else
    {
      uint64_t v61 = *(void *)(v59 + 8);
      *(void *)uint64_t v58 = v60;
      *((void *)v58 + 1) = v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v62 = a3[14];
    uint64_t v63 = (char *)v4 + v62;
    uint64_t v64 = (char *)a2 + v62;
    uint64_t v65 = type metadata accessor for ConnectionClosed(0);
    uint64_t v66 = *(void *)(v65 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
    {
      uint64_t v67 = sub_100004010(&qword_100380780);
      memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      *uint64_t v63 = *v64;
      uint64_t v68 = *(int *)(v65 + 20);
      __srca = &v63[v68];
      uint64_t v69 = &v64[v68];
      uint64_t v70 = type metadata accessor for Date();
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = sub_100004010(&qword_100380418);
        memcpy(__srca, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 16))(__srca, v69, v70);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(__srca, 0, 1, v70);
      }
      *(void *)&v63[*(int *)(v65 + 24)] = *(void *)&v64[*(int *)(v65 + 24)];
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v66 + 56);
      swift_bridgeObjectRetain();
      v73(v63, 0, 1, v65);
    }
    uint64_t v74 = a3[15];
    long long v75 = (char *)v4 + v74;
    uint64_t v76 = (char *)a2 + v74;
    uint64_t v77 = *((void *)v76 + 1);
    if (v77)
    {
      *long long v75 = *v76;
      *((void *)v75 + 1) = v77;
      *((_WORD *)v75 + 8) = *((_WORD *)v76 + 8);
      uint64_t v78 = *((void *)v76 + 4);
      *((void *)v75 + 3) = *((void *)v76 + 3);
      *((void *)v75 + 4) = v78;
      uint64_t v79 = *((void *)v76 + 6);
      *((void *)v75 + 5) = *((void *)v76 + 5);
      *((void *)v75 + 6) = v79;
      *((void *)v75 + 7) = *((void *)v76 + 7);
      v75[64] = v76[64];
      v75[65] = v76[65];
      *(_OWORD *)(v75 + 72) = *(_OWORD *)(v76 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v80 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v80;
      *((_OWORD *)v75 + 4) = *((_OWORD *)v76 + 4);
      *((void *)v75 + 10) = *((void *)v76 + 10);
      long long v81 = *((_OWORD *)v76 + 1);
      *(_OWORD *)long long v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v81;
    }
  }
  return v4;
}

uint64_t sub_10011CF34(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for ServiceOutages(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for Date();
    long long v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(v4 + *(int *)(v5 + 20), v6);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for SilencePeriod(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v8, v10);
    v11(v8 + *(int *)(v9 + 20), v10);
  }
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = type metadata accessor for LinkState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 32);
    uint64_t v15 = type metadata accessor for TransmissionProgress(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = v14 + *(int *)(v15 + 20);
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[13]) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = a1 + a2[14];
  uint64_t v20 = type metadata accessor for ConnectionClosed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
  {
    uint64_t v21 = v19 + *(int *)(v20 + 20);
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + a2[15] + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10011D350(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ServiceOutages(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100004010(&qword_100387FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
    uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v15(v8, 0, 1, v10);
  }
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  uint64_t v19 = type metadata accessor for SilencePeriod(0);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_100004010(&qword_100387FA8);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    v23(v17, v18, v22);
    v23(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v24 = a3[9];
  int v25 = (_DWORD *)(a1 + v24);
  uint64_t v26 = (_DWORD *)(a2 + v24);
  uint64_t v27 = type metadata accessor for LinkState(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100004010((uint64_t *)&unk_100383910);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    *int v25 = *v26;
    uint64_t v30 = *(int *)(v27 + 32);
    uint64_t v31 = (void *)((char *)v25 + v30);
    uint64_t v32 = (void *)((char *)v26 + v30);
    uint64_t v33 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v34 = *((void *)v33 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_100004010(&qword_10037F158);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      uint64_t v36 = v32[1];
      uint64_t v83 = v31;
      void *v31 = *v32;
      v31[1] = v36;
      uint64_t v37 = v33[5];
      __dst = (char *)v31 + v37;
      __src = (char *)v32 + v37;
      uint64_t v38 = type metadata accessor for Date();
      uint64_t v81 = *(void *)(v38 - 8);
      uint64_t v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
      swift_bridgeObjectRetain();
      if (v82(__src, 1, v38))
      {
        uint64_t v39 = sub_100004010(&qword_100380418);
        memcpy(__dst, __src, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dst, __src, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(__dst, 0, 1, v38);
      }
      uint64_t v40 = v33[6];
      uint64_t v41 = (char *)v83 + v40;
      uint64_t v42 = (char *)v32 + v40;
      *(void *)uint64_t v41 = *(void *)v42;
      unsigned char v41[8] = v42[8];
      *(void *)((char *)v83 + v33[7]) = *(void *)((char *)v32 + v33[7]);
      *((unsigned char *)v83 + v33[8]) = *((unsigned char *)v32 + v33[8]);
      (*(void (**)(void))(v34 + 56))();
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v43 = a3[10];
  uint64_t v44 = a3[11];
  uint64_t v45 = a1 + v43;
  uint64_t v46 = a2 + v43;
  long long v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(unsigned char *)(v45 + 32) = *(unsigned char *)(v46 + 32);
  uint64_t v48 = (_OWORD *)(a1 + v44);
  long long v49 = (_OWORD *)(a2 + v44);
  *(_OWORD *)((char *)v48 + 25) = *(_OWORD *)((char *)v49 + 25);
  long long v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = a3[12];
  uint64_t v52 = a3[13];
  uint64_t v53 = (void *)(a1 + v51);
  uint64_t v54 = (void *)(a2 + v51);
  uint64_t v55 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v55;
  uint64_t v56 = a1 + v52;
  uint64_t v57 = a2 + v52;
  uint64_t v58 = *(void *)(a2 + v52);
  swift_bridgeObjectRetain();
  if (v58 == 1)
  {
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  }
  else
  {
    uint64_t v59 = *(void *)(v57 + 8);
    *(void *)uint64_t v56 = v58;
    *(void *)(v56 + 8) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v60 = a3[14];
  uint64_t v61 = (unsigned char *)(a1 + v60);
  uint64_t v62 = (unsigned char *)(a2 + v60);
  uint64_t v63 = type metadata accessor for ConnectionClosed(0);
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    uint64_t v65 = sub_100004010(&qword_100380780);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    *uint64_t v61 = *v62;
    uint64_t v66 = *(int *)(v63 + 20);
    __srca = &v61[v66];
    uint64_t v67 = &v62[v66];
    uint64_t v68 = type metadata accessor for Date();
    uint64_t v69 = *(void *)(v68 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
    {
      uint64_t v70 = sub_100004010(&qword_100380418);
      memcpy(__srca, v67, *(void *)(*(void *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 16))(__srca, v67, v68);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v69 + 56))(__srca, 0, 1, v68);
    }
    *(void *)&v61[*(int *)(v63 + 24)] = *(void *)&v62[*(int *)(v63 + 24)];
    uint64_t v71 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56);
    swift_bridgeObjectRetain();
    v71(v61, 0, 1, v63);
  }
  uint64_t v72 = a3[15];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  uint64_t v75 = *(void *)(v74 + 8);
  if (v75)
  {
    *(unsigned char *)uint64_t v73 = *(unsigned char *)v74;
    *(void *)(v73 + 8) = v75;
    *(_WORD *)(v73 + 16) = *(_WORD *)(v74 + 16);
    uint64_t v76 = *(void *)(v74 + 32);
    *(void *)(v73 + 24) = *(void *)(v74 + 24);
    *(void *)(v73 + 32) = v76;
    uint64_t v77 = *(void *)(v74 + 48);
    *(void *)(v73 + 40) = *(void *)(v74 + 40);
    *(void *)(v73 + 48) = v77;
    *(void *)(v73 + 56) = *(void *)(v74 + 56);
    *(unsigned char *)(v73 + 64) = *(unsigned char *)(v74 + 64);
    *(unsigned char *)(v73 + 65) = *(unsigned char *)(v74 + 65);
    *(_OWORD *)(v73 + 72) = *(_OWORD *)(v74 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v78 = *(_OWORD *)(v74 + 48);
    *(_OWORD *)(v73 + 32) = *(_OWORD *)(v74 + 32);
    *(_OWORD *)(v73 + 48) = v78;
    *(_OWORD *)(v73 + 64) = *(_OWORD *)(v74 + 64);
    *(void *)(v73 + 80) = *(void *)(v74 + 80);
    long long v79 = *(_OWORD *)(v74 + 16);
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    *(_OWORD *)(v73 + 16) = v79;
  }
  return a1;
}

uint64_t sub_10011DBC4(uint64_t a1, long long *a2, int *a3)
{
  uint64_t v3 = a3;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for ServiceOutages(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v9, v10, v16);
      v17(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v16);
      *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
      uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v18(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_10011AAAC((uint64_t)v9, type metadata accessor for ServiceOutages);
LABEL_6:
    uint64_t v19 = sub_100004010(&qword_100387FA0);
    memcpy(v9, v10, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v48 = type metadata accessor for Date();
  long long v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24);
  v49(v9, v10, v48);
  v49(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v48);
  *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v20 = v3[8];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for SilencePeriod(0);
  uint64_t v24 = *(void *)(v23 - 8);
  int v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      uint64_t v28 = type metadata accessor for Date();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v21, v22, v28);
      v29(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    sub_10011AAAC((uint64_t)v21, type metadata accessor for SilencePeriod);
LABEL_12:
    uint64_t v30 = sub_100004010(&qword_100387FA8);
    memcpy(v21, v22, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 24);
  v51(v21, v22, v50);
  v51(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v50);
LABEL_13:
  uint64_t v31 = v3[9];
  uint64_t v32 = (unsigned char *)(a1 + v31);
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for LinkState(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_10011AAAC((uint64_t)v32, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *uint64_t v32 = *v33;
    v32[1] = v33[1];
    _OWORD v32[2] = v33[2];
    v32[3] = v33[3];
    uint64_t v52 = *(int *)(v34 + 32);
    uint64_t v53 = &v32[v52];
    uint64_t v54 = &v33[v52];
    uint64_t v55 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v56 = *((void *)v55 - 1);
    uint64_t v57 = *(uint64_t (**)(void *, uint64_t, int *))(v56 + 48);
    int v58 = v57(v53, 1, v55);
    int v59 = v57(v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        *uint64_t v53 = *v54;
        v53[1] = v54[1];
        uint64_t v60 = v55[5];
        __src = (char *)v54 + v60;
        __dst = (char *)v53 + v60;
        uint64_t v61 = type metadata accessor for Date();
        uint64_t v141 = *(void *)(v61 - 8);
        uint64_t v144 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48);
        swift_bridgeObjectRetain();
        if (v144(__src, 1, v61))
        {
          uint64_t v62 = sub_100004010(&qword_100380418);
          memcpy(__dst, __src, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v141 + 16))(__dst, __src, v61);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(__dst, 0, 1, v61);
        }
        uint64_t v131 = v55[6];
        uint64_t v132 = (char *)v53 + v131;
        uint64_t v133 = (char *)v54 + v131;
        uint64_t v134 = *(void *)v133;
        void v132[8] = v133[8];
        *(void *)uint64_t v132 = v134;
        *(void *)((char *)v53 + v55[7]) = *(void *)((char *)v54 + v55[7]);
        *((unsigned char *)v53 + v55[8]) = *((unsigned char *)v54 + v55[8]);
        (*(void (**)(void *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v59)
    {
      sub_10011AAAC((uint64_t)v53, type metadata accessor for TransmissionProgress);
LABEL_31:
      size_t v45 = *(void *)(*(void *)(sub_100004010(&qword_10037F158) - 8) + 64);
      uint64_t v46 = v53;
      long long v47 = v54;
      goto LABEL_20;
    }
    *uint64_t v53 = *v54;
    v53[1] = v54[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v110 = v55[5];
    uint64_t v111 = (char *)v53 + v110;
    __dstd = (char *)v54 + v110;
    uint64_t v112 = type metadata accessor for Date();
    uint64_t v147 = *(void **)(v112 - 8);
    __srca = v111;
    uint64_t v113 = (uint64_t (*)(char *, uint64_t, uint64_t))v147[6];
    LODWORD(v111) = v113(v111, 1, v112);
    int v114 = v113(__dstd, 1, v112);
    if (v111)
    {
      if (!v114)
      {
        ((void (*)(void *, char *, uint64_t))v147[2])(__srca, __dstd, v112);
        ((void (*)(void *, void, uint64_t, uint64_t))v147[7])(__srca, 0, 1, v112);
        goto LABEL_78;
      }
      size_t v115 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      int v116 = __srca;
    }
    else
    {
      if (!v114)
      {
        ((void (*)(void *, char *, uint64_t))v147[3])(__srca, __dstd, v112);
        goto LABEL_78;
      }
      ((void (*)(void *, uint64_t))v147[1])(__srca, v112);
      size_t v115 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      int v116 = __srca;
    }
    memcpy(v116, __dstd, v115);
LABEL_78:
    uint64_t v135 = v55[6];
    uint64_t v136 = (char *)v53 + v135;
    uint64_t v137 = (char *)v54 + v135;
    uint64_t v138 = *(void *)v137;
    v136[8] = v137[8];
    *(void *)uint64_t v136 = v138;
    *(void *)((char *)v53 + v55[7]) = *(void *)((char *)v54 + v55[7]);
    *((unsigned char *)v53 + v55[8]) = *((unsigned char *)v54 + v55[8]);
    goto LABEL_35;
  }
  if (v38)
  {
LABEL_19:
    size_t v45 = *(void *)(*(void *)(sub_100004010((uint64_t *)&unk_100383910) - 8) + 64);
    uint64_t v46 = v32;
    long long v47 = v33;
LABEL_20:
    memcpy(v46, v47, v45);
    goto LABEL_35;
  }
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  _OWORD v32[2] = v33[2];
  v32[3] = v33[3];
  uint64_t v39 = *(int *)(v34 + 32);
  uint64_t v40 = &v32[v39];
  uint64_t v41 = &v33[v39];
  uint64_t v42 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v43 = *((void *)v42 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    uint64_t v44 = sub_100004010(&qword_10037F158);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    *uint64_t v40 = *v41;
    uint64_t v142 = v40;
    v40[1] = v41[1];
    uint64_t v63 = v42[5];
    uint64_t v145 = (char *)v40 + v63;
    __dsta = (char *)v41 + v63;
    uint64_t v64 = type metadata accessor for Date();
    uint64_t v139 = *(void *)(v64 - 8);
    uint64_t v140 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48);
    swift_bridgeObjectRetain();
    if (v140(__dsta, 1, v64))
    {
      uint64_t v65 = sub_100004010(&qword_100380418);
      memcpy(v145, __dsta, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v145, __dsta, v64);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v139 + 56))(v145, 0, 1, v64);
    }
    uint64_t v66 = v42[6];
    uint64_t v67 = (char *)v142 + v66;
    uint64_t v68 = (char *)v41 + v66;
    uint64_t v69 = *(void *)v68;
    v67[8] = v68[8];
    *(void *)uint64_t v67 = v69;
    *(void *)((char *)v142 + v42[7]) = *(void *)((char *)v41 + v42[7]);
    *((unsigned char *)v142 + v42[8]) = *((unsigned char *)v41 + v42[8]);
    (*(void (**)(void))(v43 + 56))();
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_35:
  uint64_t v70 = v3[10];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = (long long *)((char *)a2 + v70);
  long long v73 = *v72;
  long long v74 = v72[1];
  *(unsigned char *)(v71 + 32) = *((unsigned char *)v72 + 32);
  *(_OWORD *)uint64_t v71 = v73;
  *(_OWORD *)(v71 + 16) = v74;
  uint64_t v75 = v3[11];
  uint64_t v76 = (_OWORD *)(a1 + v75);
  uint64_t v77 = (long long *)((char *)a2 + v75);
  long long v78 = *v77;
  long long v79 = v77[1];
  *(_OWORD *)((char *)v76 + 25) = *(long long *)((char *)v77 + 25);
  *uint64_t v76 = v78;
  v76[1] = v79;
  uint64_t v80 = v3[12];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)((char *)a2 + v80);
  *uint64_t v81 = *v82;
  v81[1] = v82[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = v3[13];
  uint64_t v84 = (void *)(a1 + v83);
  uint64_t v85 = (uint64_t)a2 + v83;
  uint64_t v86 = *(void *)((char *)a2 + v83);
  if (*(void *)(a1 + v83) == 1)
  {
    if (v86 != 1)
    {
      *uint64_t v84 = v86;
      v84[1] = *(void *)(v85 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  if (v86 == 1)
  {
    sub_10011AB0C(a1 + v83);
LABEL_40:
    *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
    goto LABEL_42;
  }
  *uint64_t v84 = v86;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v84[1] = *(void *)(v85 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_42:
  uint64_t v87 = v3[14];
  uint64_t v88 = (unsigned char *)(a1 + v87);
  uint64_t v89 = (char *)a2 + v87;
  uint64_t v90 = type metadata accessor for ConnectionClosed(0);
  uint64_t v91 = *(void *)(v90 - 8);
  uint64_t v92 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
  int v93 = v92(v88, 1, v90);
  int v94 = v92(v89, 1, v90);
  if (!v93)
  {
    if (v94)
    {
      sub_10011AAAC((uint64_t)v88, type metadata accessor for ConnectionClosed);
      goto LABEL_48;
    }
    uint64_t v146 = v3;
    *uint64_t v88 = *v89;
    uint64_t v101 = *(int *)(v90 + 20);
    uint64_t v102 = &v88[v101];
    uint64_t v103 = &v89[v101];
    uint64_t v104 = type metadata accessor for Date();
    uint64_t v143 = *(void *)(v104 - 8);
    id v105 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v143 + 48);
    __dstc = v102;
    LODWORD(v102) = v105(v102, 1, v104);
    int v106 = v105(v103, 1, v104);
    if (v102)
    {
      if (!v106)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v143 + 16))(__dstc, v103, v104);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v143 + 56))(__dstc, 0, 1, v104);
        goto LABEL_62;
      }
      size_t v107 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      int v108 = __dstc;
    }
    else
    {
      if (!v106)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v143 + 24))(__dstc, v103, v104);
        goto LABEL_62;
      }
      (*(void (**)(void *, uint64_t))(v143 + 8))(__dstc, v104);
      size_t v107 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      int v108 = __dstc;
    }
    memcpy(v108, v103, v107);
LABEL_62:
    uint64_t v3 = v146;
    *(void *)&v88[*(int *)(v90 + 24)] = *(void *)&v89[*(int *)(v90 + 24)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  if (v94)
  {
LABEL_48:
    uint64_t v100 = sub_100004010(&qword_100380780);
    memcpy(v88, v89, *(void *)(*(void *)(v100 - 8) + 64));
    goto LABEL_63;
  }
  *uint64_t v88 = *v89;
  uint64_t v95 = *(int *)(v90 + 20);
  __dstb = &v88[v95];
  uint64_t v96 = &v89[v95];
  uint64_t v97 = type metadata accessor for Date();
  uint64_t v98 = *(void *)(v97 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
  {
    uint64_t v99 = sub_100004010(&qword_100380418);
    memcpy(__dstb, v96, *(void *)(*(void *)(v99 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v98 + 16))(__dstb, v96, v97);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v98 + 56))(__dstb, 0, 1, v97);
  }
  *(void *)&v88[*(int *)(v90 + 24)] = *(void *)&v89[*(int *)(v90 + 24)];
  size_t v109 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56);
  swift_bridgeObjectRetain();
  v109(v88, 0, 1, v90);
LABEL_63:
  uint64_t v117 = v3[15];
  uint64_t v118 = a1 + v117;
  uint64_t v119 = (uint64_t)a2 + v117;
  uint64_t v120 = *(void *)(a1 + v117 + 8);
  uint64_t v121 = *(void *)(v119 + 8);
  if (v120)
  {
    if (v121)
    {
      *(unsigned char *)uint64_t v118 = *(unsigned char *)v119;
      *(void *)(v118 + 8) = *(void *)(v119 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v118 + 16) = *(unsigned char *)(v119 + 16);
      *(unsigned char *)(v118 + 17) = *(unsigned char *)(v119 + 17);
      *(void *)(v118 + 24) = *(void *)(v119 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 32) = *(void *)(v119 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 40) = *(void *)(v119 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 48) = *(void *)(v119 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v118 + 56) = *(void *)(v119 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v118 + 64) = *(unsigned char *)(v119 + 64);
      *(unsigned char *)(v118 + 65) = *(unsigned char *)(v119 + 65);
      *(void *)(v118 + 72) = *(void *)(v119 + 72);
      *(void *)(v118 + 80) = *(void *)(v119 + 80);
    }
    else
    {
      sub_10011AB40(v118);
      long long v122 = *(_OWORD *)(v119 + 16);
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
      *(_OWORD *)(v118 + 16) = v122;
      long long v124 = *(_OWORD *)(v119 + 48);
      long long v123 = *(_OWORD *)(v119 + 64);
      long long v125 = *(_OWORD *)(v119 + 32);
      *(void *)(v118 + 80) = *(void *)(v119 + 80);
      *(_OWORD *)(v118 + 48) = v124;
      *(_OWORD *)(v118 + 64) = v123;
      *(_OWORD *)(v118 + 32) = v125;
    }
  }
  else if (v121)
  {
    *(unsigned char *)uint64_t v118 = *(unsigned char *)v119;
    *(void *)(v118 + 8) = *(void *)(v119 + 8);
    *(unsigned char *)(v118 + 16) = *(unsigned char *)(v119 + 16);
    *(unsigned char *)(v118 + 17) = *(unsigned char *)(v119 + 17);
    *(void *)(v118 + 24) = *(void *)(v119 + 24);
    *(void *)(v118 + 32) = *(void *)(v119 + 32);
    *(void *)(v118 + 40) = *(void *)(v119 + 40);
    *(void *)(v118 + 48) = *(void *)(v119 + 48);
    *(void *)(v118 + 56) = *(void *)(v119 + 56);
    *(unsigned char *)(v118 + 64) = *(unsigned char *)(v119 + 64);
    *(unsigned char *)(v118 + 65) = *(unsigned char *)(v119 + 65);
    *(_OWORD *)(v118 + 72) = *(_OWORD *)(v119 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v126 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
    *(_OWORD *)(v118 + 16) = v126;
    long long v127 = *(_OWORD *)(v119 + 32);
    long long v128 = *(_OWORD *)(v119 + 48);
    long long v129 = *(_OWORD *)(v119 + 64);
    *(void *)(v118 + 80) = *(void *)(v119 + 80);
    *(_OWORD *)(v118 + 48) = v128;
    *(_OWORD *)(v118 + 64) = v129;
    *(_OWORD *)(v118 + 32) = v127;
  }
  return a1;
}

uint64_t sub_10011ED60(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ServiceOutages(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100004010(&qword_100387FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    int v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for SilencePeriod(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100004010(&qword_100387FA8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v22(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v23 = a3[9];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  int v25 = (_DWORD *)(a2 + v23);
  uint64_t v26 = type metadata accessor for LinkState(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_100004010((uint64_t *)&unk_100383910);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *v25;
    uint64_t v29 = *(int *)(v26 + 32);
    uint64_t v30 = (_OWORD *)((char *)v24 + v29);
    uint64_t v31 = (_OWORD *)((char *)v25 + v29);
    uint64_t v32 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v33 = *((void *)v32 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_100004010(&qword_10037F158);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v71 = v33;
      *uint64_t v30 = *v31;
      uint64_t v35 = v32[5];
      __dst = (char *)v30 + v35;
      uint64_t v36 = (char *)v31 + v35;
      uint64_t v37 = type metadata accessor for Date();
      uint64_t v70 = *(void *)(v37 - 8);
      uint64_t v72 = v36;
      int v38 = v36;
      uint64_t v39 = v37;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v38, 1, v37))
      {
        uint64_t v40 = sub_100004010(&qword_100380418);
        memcpy(__dst, v72, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v70 + 32))(__dst, v72, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v39);
      }
      uint64_t v41 = v32[6];
      uint64_t v42 = (char *)v30 + v41;
      uint64_t v43 = (char *)v31 + v41;
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      *(void *)((char *)v30 + v32[7]) = *(void *)((char *)v31 + v32[7]);
      *((unsigned char *)v30 + v32[8]) = *((unsigned char *)v31 + v32[8]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v71 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v44 = a3[10];
  uint64_t v45 = a3[11];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(unsigned char *)(v46 + 32) = *(unsigned char *)(v47 + 32);
  long long v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  long long v49 = (_OWORD *)(a1 + v45);
  uint64_t v50 = (_OWORD *)(a2 + v45);
  *(_OWORD *)((char *)v49 + 25) = *(_OWORD *)((char *)v50 + 25);
  long long v51 = v50[1];
  *long long v49 = *v50;
  v49[1] = v51;
  uint64_t v52 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  uint64_t v53 = a3[14];
  uint64_t v54 = (unsigned char *)(a1 + v53);
  uint64_t v55 = (unsigned char *)(a2 + v53);
  *(_OWORD *)(a1 + v52) = *(_OWORD *)(a2 + v52);
  uint64_t v56 = type metadata accessor for ConnectionClosed(0);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    uint64_t v58 = sub_100004010(&qword_100380780);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    *uint64_t v54 = *v55;
    uint64_t v59 = *(int *)(v56 + 20);
    __dsta = &v54[v59];
    uint64_t v60 = &v55[v59];
    uint64_t v61 = type metadata accessor for Date();
    uint64_t v62 = *(void *)(v61 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      uint64_t v63 = sub_100004010(&qword_100380418);
      memcpy(__dsta, v60, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 32))(__dsta, v60, v61);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v62 + 56))(__dsta, 0, 1, v61);
    }
    *(void *)&v54[*(int *)(v56 + 24)] = *(void *)&v55[*(int *)(v56 + 24)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  uint64_t v64 = a3[15];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = a2 + v64;
  long long v67 = *(_OWORD *)(v66 + 48);
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(_OWORD *)(v65 + 48) = v67;
  *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
  *(void *)(v65 + 80) = *(void *)(v66 + 80);
  long long v68 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v68;
  return a1;
}

uint64_t sub_10011F4E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ServiceOutages(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(v8, v9, v15);
      v16(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v15);
      *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_10011AAAC((uint64_t)v8, type metadata accessor for ServiceOutages);
LABEL_6:
    uint64_t v17 = sub_100004010(&qword_100387FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 40);
  v47(v8, v9, v46);
  v47(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v46);
  *(void *)&v8[*(int *)(v10 + 24)] = *(void *)&v9[*(int *)(v10 + 24)];
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v18 = v3[8];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for SilencePeriod(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      uint64_t v26 = type metadata accessor for Date();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
      v27(v19, v20, v26);
      v27(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    sub_10011AAAC((uint64_t)v19, type metadata accessor for SilencePeriod);
LABEL_12:
    uint64_t v28 = sub_100004010(&qword_100387FA8);
    memcpy(v19, v20, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v48 = type metadata accessor for Date();
  long long v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 40);
  v49(v19, v20, v48);
  v49(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v48);
LABEL_13:
  uint64_t v29 = v3[9];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = type metadata accessor for LinkState(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34((uint64_t)v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      sub_10011AAAC(v30, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *(unsigned char *)uint64_t v30 = *v31;
    *(unsigned char *)(v30 + 1) = v31[1];
    *(_WORD *)(v30 + 2) = *((_WORD *)v31 + 1);
    uint64_t v50 = *(int *)(v32 + 32);
    uint64_t v51 = v30 + v50;
    uint64_t v52 = &v31[v50];
    uint64_t v53 = (int *)type metadata accessor for TransmissionProgress(0);
    uint64_t v54 = *((void *)v53 - 1);
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v54 + 48);
    int v56 = v55(v51, 1, v53);
    int v57 = v55((uint64_t)v52, 1, v53);
    if (v56)
    {
      if (!v57)
      {
        *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
        uint64_t v58 = v53[5];
        __dst = (void *)(v51 + v58);
        uint64_t v59 = &v52[v58];
        uint64_t v60 = type metadata accessor for Date();
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          uint64_t v62 = sub_100004010(&qword_100380418);
          memcpy(__dst, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v61 + 32))(__dst, v59, v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v60);
        }
        uint64_t v125 = v53[6];
        uint64_t v126 = v51 + v125;
        long long v127 = &v52[v125];
        *(void *)uint64_t v126 = *(void *)v127;
        *(unsigned char *)(v126 + 8) = v127[8];
        *(void *)(v51 + v53[7]) = *(void *)&v52[v53[7]];
        *(unsigned char *)(v51 + v53[8]) = v52[v53[8]];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v57)
    {
      sub_10011AAAC(v51, type metadata accessor for TransmissionProgress);
LABEL_31:
      size_t v43 = *(void *)(*(void *)(sub_100004010(&qword_10037F158) - 8) + 64);
      uint64_t v44 = (void *)v51;
      uint64_t v45 = v52;
      goto LABEL_20;
    }
    uint64_t v110 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *(void *)(v51 + 8) = v110;
    swift_bridgeObjectRelease();
    uint64_t v111 = v53[5];
    uint64_t v112 = (void *)(v51 + v111);
    __dstd = &v52[v111];
    uint64_t v113 = type metadata accessor for Date();
    uint64_t v135 = *(void *)(v113 - 8);
    __srca = v112;
    int v114 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v135 + 48);
    LODWORD(v112) = v114(v112, 1, v113);
    int v115 = v114(__dstd, 1, v113);
    if (v112)
    {
      if (!v115)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 32))(__srca, __dstd, v113);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v135 + 56))(__srca, 0, 1, v113);
        goto LABEL_74;
      }
      size_t v116 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v117 = __srca;
    }
    else
    {
      if (!v115)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 40))(__srca, __dstd, v113);
        goto LABEL_74;
      }
      (*(void (**)(void *, uint64_t))(v135 + 8))(__srca, v113);
      size_t v116 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      uint64_t v117 = __srca;
    }
    memcpy(v117, __dstd, v116);
LABEL_74:
    uint64_t v128 = v53[6];
    uint64_t v129 = v51 + v128;
    uint64_t v130 = &v52[v128];
    *(void *)uint64_t v129 = *(void *)v130;
    *(unsigned char *)(v129 + 8) = v130[8];
    *(void *)(v51 + v53[7]) = *(void *)&v52[v53[7]];
    *(unsigned char *)(v51 + v53[8]) = v52[v53[8]];
    goto LABEL_35;
  }
  if (v36)
  {
LABEL_19:
    size_t v43 = *(void *)(*(void *)(sub_100004010((uint64_t *)&unk_100383910) - 8) + 64);
    uint64_t v44 = (void *)v30;
    uint64_t v45 = v31;
LABEL_20:
    memcpy(v44, v45, v43);
    goto LABEL_35;
  }
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v37 = *(int *)(v32 + 32);
  int v38 = (_OWORD *)(v30 + v37);
  uint64_t v39 = &v31[v37];
  uint64_t v40 = (int *)type metadata accessor for TransmissionProgress(0);
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = sub_100004010(&qword_10037F158);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v133 = v41;
    *int v38 = *(_OWORD *)v39;
    uint64_t v63 = v40[5];
    __dsta = (char *)v38 + v63;
    uint64_t v64 = &v39[v63];
    uint64_t v65 = type metadata accessor for Date();
    uint64_t v131 = *(void *)(v65 - 8);
    __src = v64;
    uint64_t v66 = v64;
    uint64_t v67 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v66, 1, v65))
    {
      uint64_t v68 = sub_100004010(&qword_100380418);
      memcpy(__dsta, __src, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v131 + 32))(__dsta, __src, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(__dsta, 0, 1, v67);
    }
    uint64_t v69 = v40[6];
    uint64_t v70 = (char *)v38 + v69;
    uint64_t v71 = &v39[v69];
    *(void *)uint64_t v70 = *(void *)v71;
    v70[8] = v71[8];
    *(void *)((char *)v38 + v40[7]) = *(void *)&v39[v40[7]];
    *((unsigned char *)v38 + v40[8]) = v39[v40[8]];
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v133 + 56))(v38, 0, 1, v40);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_35:
  uint64_t v72 = v3[10];
  uint64_t v73 = v3[11];
  uint64_t v74 = a1 + v72;
  uint64_t v75 = a2 + v72;
  long long v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(unsigned char *)(v74 + 32) = *(unsigned char *)(v75 + 32);
  uint64_t v77 = (_OWORD *)(a1 + v73);
  long long v78 = (_OWORD *)(a2 + v73);
  *(_OWORD *)((char *)v77 + 25) = *(_OWORD *)((char *)v78 + 25);
  long long v79 = v78[1];
  *uint64_t v77 = *v78;
  v77[1] = v79;
  uint64_t v80 = v3[12];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (uint64_t *)(a2 + v80);
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *uint64_t v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = v3[13];
  uint64_t v86 = a1 + v85;
  uint64_t v87 = a2 + v85;
  if (*(void *)(a1 + v85) == 1)
  {
LABEL_38:
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
    goto LABEL_40;
  }
  if (*(void *)v87 == 1)
  {
    sub_10011AB0C(v86);
    goto LABEL_38;
  }
  *(void *)uint64_t v86 = *(void *)v87;
  swift_bridgeObjectRelease();
  *(void *)(v86 + 8) = *(void *)(v87 + 8);
  swift_bridgeObjectRelease();
LABEL_40:
  uint64_t v88 = v3[14];
  uint64_t v89 = (unsigned char *)(a1 + v88);
  uint64_t v90 = (unsigned char *)(a2 + v88);
  uint64_t v91 = type metadata accessor for ConnectionClosed(0);
  uint64_t v92 = *(void *)(v91 - 8);
  int v93 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (v95)
    {
      sub_10011AAAC((uint64_t)v89, type metadata accessor for ConnectionClosed);
      goto LABEL_46;
    }
    uint64_t v134 = v3;
    *uint64_t v89 = *v90;
    uint64_t v102 = *(int *)(v91 + 20);
    uint64_t v103 = &v89[v102];
    uint64_t v104 = &v90[v102];
    uint64_t v105 = type metadata accessor for Date();
    uint64_t v132 = *(void *)(v105 - 8);
    int v106 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v132 + 48);
    __dstc = v103;
    LODWORD(v103) = v106(v103, 1, v105);
    int v107 = v106(v104, 1, v105);
    if (v103)
    {
      if (!v107)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v132 + 32))(__dstc, v104, v105);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(__dstc, 0, 1, v105);
        goto LABEL_60;
      }
      size_t v108 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      size_t v109 = __dstc;
    }
    else
    {
      if (!v107)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v132 + 40))(__dstc, v104, v105);
        goto LABEL_60;
      }
      (*(void (**)(void *, uint64_t))(v132 + 8))(__dstc, v105);
      size_t v108 = *(void *)(*(void *)(sub_100004010(&qword_100380418) - 8) + 64);
      size_t v109 = __dstc;
    }
    memcpy(v109, v104, v108);
LABEL_60:
    uint64_t v3 = v134;
    *(void *)&v89[*(int *)(v91 + 24)] = *(void *)&v90[*(int *)(v91 + 24)];
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  if (v95)
  {
LABEL_46:
    uint64_t v101 = sub_100004010(&qword_100380780);
    memcpy(v89, v90, *(void *)(*(void *)(v101 - 8) + 64));
    goto LABEL_61;
  }
  *uint64_t v89 = *v90;
  uint64_t v96 = *(int *)(v91 + 20);
  __dstb = &v89[v96];
  uint64_t v97 = &v90[v96];
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v98 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
  {
    uint64_t v100 = sub_100004010(&qword_100380418);
    memcpy(__dstb, v97, *(void *)(*(void *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v99 + 32))(__dstb, v97, v98);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v99 + 56))(__dstb, 0, 1, v98);
  }
  *(void *)&v89[*(int *)(v91 + 24)] = *(void *)&v90[*(int *)(v91 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_61:
  uint64_t v118 = v3[15];
  uint64_t v119 = a1 + v118;
  uint64_t v120 = a2 + v118;
  if (!*(void *)(a1 + v118 + 8))
  {
LABEL_65:
    long long v122 = *(_OWORD *)(v120 + 48);
    *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
    *(_OWORD *)(v119 + 48) = v122;
    *(_OWORD *)(v119 + 64) = *(_OWORD *)(v120 + 64);
    *(void *)(v119 + 80) = *(void *)(v120 + 80);
    long long v123 = *(_OWORD *)(v120 + 16);
    *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
    *(_OWORD *)(v119 + 16) = v123;
    return a1;
  }
  uint64_t v121 = *(void *)(v120 + 8);
  if (!v121)
  {
    sub_10011AB40(v119);
    goto LABEL_65;
  }
  *(unsigned char *)uint64_t v119 = *(unsigned char *)v120;
  *(void *)(v119 + 8) = v121;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v119 + 16) = *(unsigned char *)(v120 + 16);
  *(unsigned char *)(v119 + 17) = *(unsigned char *)(v120 + 17);
  *(void *)(v119 + 24) = *(void *)(v120 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v119 + 32) = *(void *)(v120 + 32);
  swift_bridgeObjectRelease();
  *(void *)(v119 + 40) = *(void *)(v120 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v119 + 48) = *(void *)(v120 + 48);
  swift_bridgeObjectRelease();
  *(void *)(v119 + 56) = *(void *)(v120 + 56);
  swift_bridgeObjectRelease();
  *(_WORD *)(v119 + 64) = *(_WORD *)(v120 + 64);
  *(_OWORD *)(v119 + 72) = *(_OWORD *)(v120 + 72);
  return a1;
}

uint64_t sub_1001204B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001204C4);
}

uint64_t sub_1001204C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100004010(&qword_100387FA0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[7];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100004010(&qword_100387FA8);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_7;
  }
  uint64_t v11 = sub_100004010((uint64_t *)&unk_100383910);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[9];
    goto LABEL_7;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[12] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v16 = sub_100004010(&qword_100380780);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[14];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_1001206AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001206C0);
}

uint64_t sub_1001206C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100004010(&qword_100387FA0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(a1 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_100004010(&qword_100387FA8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t result = sub_100004010((uint64_t *)&unk_100383910);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[12] + 8) = a2;
  }
  else
  {
    uint64_t v15 = sub_100004010(&qword_100380780);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[14];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_10012089C()
{
  sub_1001154C4(319, &qword_1003880B8, (void (*)(uint64_t))type metadata accessor for ServiceOutages);
  if (v0 <= 0x3F)
  {
    sub_1001154C4(319, &qword_1003880C0, (void (*)(uint64_t))type metadata accessor for SilencePeriod);
    if (v1 <= 0x3F)
    {
      sub_1001154C4(319, &qword_1003880C8, (void (*)(uint64_t))type metadata accessor for LinkState);
      if (v2 <= 0x3F)
      {
        sub_1001154C4(319, (unint64_t *)&unk_1003880D0, (void (*)(uint64_t))type metadata accessor for ConnectionClosed);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for TargetVisibility(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  if (*a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 4;
  if (*a1 < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for TargetVisibility()
{
  return &type metadata for TargetVisibility;
}

ValueMetadata *type metadata accessor for TargetVisibility.Degree()
{
  return &type metadata for TargetVisibility.Degree;
}

uint64_t getEnumTagSinglePayload for Target(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Target(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Target()
{
  return &type metadata for Target;
}

unint64_t sub_100120BC8()
{
  unint64_t result = qword_100388128;
  if (!qword_100388128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388128);
  }
  return result;
}

uint64_t sub_100120C1C()
{
  return sub_100120CAC(&qword_100388130, (void (*)(uint64_t))type metadata accessor for ServiceOutages);
}

uint64_t sub_100120C64()
{
  return sub_100120CAC(&qword_100388138, (void (*)(uint64_t))type metadata accessor for SilencePeriod);
}

uint64_t sub_100120CAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100120CF4()
{
  return sub_1000A350C(&qword_100388140, &qword_100388148);
}

unint64_t sub_100120D20()
{
  unint64_t result = qword_100388150;
  if (!qword_100388150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388150);
  }
  return result;
}

double sub_100120D74@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  int v4 = v3;
  id v8 = [v3 x];
  [v8 doubleValueSafe];
  double v10 = v9;

  double v11 = round(v10);
  id v12 = [v4 y];
  [v12 doubleValueSafe];
  double v14 = v13;

  double v15 = round(v14);
  if (qword_10037DC88 != -1) {
    swift_once();
  }
  double v16 = v15 * 0.0174532925;
  BOOL v17 = *(double *)&qword_1003A9810 == a2 && *(double *)algn_1003A9818 == a3;
  double v18 = v11 * 0.0174532925;
  if (!v17)
  {
    double v18 = (v11 + a2) * 0.0174532925;
    if (v18 < 0.0 || v18 >= 6.28318531) {
      double v18 = v18 - floor(v18 / 6.28318531) * 6.28318531;
    }
    double v19 = (v15 + a3) * 0.0174532925;
    Angle.animatableData.getter();
    Angle.animatableData.setter();
    if (v19 < 1.57079633)
    {
      Angle.animatableData.getter();
      Angle.animatableData.setter();
      double v19 = 1.57079633;
    }
    if (v19 <= 1.57079633) {
      double v16 = v19;
    }
    else {
      double v16 = 1.57079633;
    }
  }
  id v20 = [v4 targetId:v15 * 0.0174532925];
  id v21 = [v20 int64ValueSafe];

  *(void *)a1 = v21;
  double result = v23;
  *(double *)(a1 + 8) = v11 * 0.0174532925;
  *(double *)(a1 + 16) = v23;
  *(double *)(a1 + 24) = v18;
  *(double *)(a1 + 32) = v16;
  return result;
}

uint64_t sub_100120F74@<X0>(uint64_t a1@<X8>)
{
  int v2 = v1;
  uint64_t v65 = a1;
  uint64_t v70 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v70 - 8);
  uint64_t v4 = __chkstk_darwin(v70);
  uint64_t v63 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v58 - v7;
  __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v58 - v8;
  uint64_t v9 = type metadata accessor for ServiceOutages.Outage(0);
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  __chkstk_darwin(v9);
  double v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100004010(&qword_100380418);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v61 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v59 = (char *)&v58 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v20 = (char *)&v58 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v68 = sub_100004010(&qword_1003881B8);
  uint64_t v23 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  uint64_t v73 = *(void *)(v13 + 72);
  uint64_t v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 | 7);
  uint64_t v25 = swift_allocObject();
  long long v66 = xmmword_1002B3350;
  *(_OWORD *)(v25 + 16) = xmmword_1002B3350;
  uint64_t v64 = v3;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v26(v25 + v24, 1, 1, v70);
  id v27 = [v2 changesAt];
  uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = sub_100110F6C(v28);
  swift_bridgeObjectRelease();
  uint64_t v74 = v25;
  sub_100110A34((uint64_t)v29);
  uint64_t v30 = v74;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = v66;
  uint64_t v67 = v26;
  uint64_t v68 = v3 + 56;
  v26(v31 + v24, 1, 1, v70);
  uint64_t v74 = v30;
  sub_100110A34(v31);
  uint64_t v32 = v74;
  unsigned __int8 v33 = [v69 atStart];
  uint64_t v34 = *(void *)(v32 + 16);
  if (!v34) {
    __break(1u);
  }
  uint64_t v35 = v34 - 1;
  if (v34 == 1)
  {
    swift_bridgeObjectRelease();
    int v38 = _swiftEmptyArrayStorage;
  }
  else
  {
    unsigned __int8 v36 = v33;
    *(void *)&long long v66 = v32;
    uint64_t v37 = v32 + v24;
    int v38 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000D2A0(v37, (uint64_t)v22, &qword_100380418);
      v37 += v73;
      sub_10000D2A0(v37, (uint64_t)v20, &qword_100380418);
      if ((v36 & 1) == 0)
      {
        sub_10000D2A0((uint64_t)v22, (uint64_t)v11, &qword_100380418);
        sub_10000D2A0((uint64_t)v20, (uint64_t)&v11[*(int *)(v72 + 20)], &qword_100380418);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v38 = (void *)sub_1001B2570(0, v38[2] + 1, 1, (unint64_t)v38);
        }
        unint64_t v40 = v38[2];
        unint64_t v39 = v38[3];
        if (v40 >= v39 >> 1) {
          int v38 = (void *)sub_1001B2570(v39 > 1, v40 + 1, 1, (unint64_t)v38);
        }
        long long v38[2] = v40 + 1;
        sub_1001285C4((uint64_t)v11, (uint64_t)v38+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v40, type metadata accessor for ServiceOutages.Outage);
      }
      sub_10000950C((uint64_t)v20, &qword_100380418);
      sub_10000950C((uint64_t)v22, &qword_100380418);
      v36 ^= 1u;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  uint64_t v42 = v64;
  uint64_t v41 = v65;
  uint64_t v43 = v70;
  uint64_t v45 = v62;
  uint64_t v44 = v63;
  uint64_t v46 = (uint64_t)v61;
  if (!v38[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v51 = type metadata accessor for ServiceOutages(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v41, 1, 1, v51);
  }
  id v47 = [v69 startsAt];
  if (v47)
  {
    uint64_t v48 = v47;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    long long v49 = *(void (**)(void))(v42 + 32);
    uint64_t v50 = (uint64_t)v59;
    v49();
    v67(v50, 0, 1, v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v50, 1, v43) != 1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v49)(v45, v50, v43);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v50 = (uint64_t)v59;
    v67((uint64_t)v59, 1, 1, v43);
  }
  Date.init()();
  sub_10000950C(v50, &qword_100380418);
LABEL_20:
  id v53 = [v69 endsAt];
  if (!v53)
  {
    v67(v46, 1, 1, v43);
    goto LABEL_24;
  }
  uint64_t v54 = v53;
  uint64_t v55 = v60;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  int v56 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
  v56(v46, v55, v43);
  v67(v46, 0, 1, v43);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v46, 1, v43) == 1)
  {
LABEL_24:
    Date.init()();
    sub_10000950C(v46, &qword_100380418);
    int v56 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
    goto LABEL_25;
  }
  v56((uint64_t)v44, (char *)v46, v43);
LABEL_25:
  v56(v41, v45, v43);
  uint64_t v57 = type metadata accessor for ServiceOutages(0);
  v56(v41 + *(int *)(v57 + 20), v44, v43);
  *(void *)(v41 + *(int *)(v57 + 24)) = v38;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v41, 0, 1, v57);
}

uint64_t sub_100121754@<X0>(char *a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = sub_100004010(&qword_100380418);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v33 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v33 - v18;
  id v20 = [v2 startsAt];
  if (v20)
  {
    uint64_t v21 = v20;
    id v38 = v2;
    unint64_t v39 = v19;
    unsigned __int8 v36 = v14;
    unint64_t v40 = a1;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v37(v9, v17, v10);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v22(v9, 0, 1, v10);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v23(v9, 1, v10) == 1)
    {
      uint64_t v7 = v9;
    }
    else
    {
      uint64_t v34 = v23;
      uint64_t v35 = v22;
      uint64_t v24 = v9;
      uint64_t v25 = v37;
      v37(v39, v24, v10);
      id v26 = [v38 endsAt];
      if (v26)
      {
        id v27 = v26;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v25(v7, v17, v10);
        v35(v7, 0, 1, v10);
        if (v34(v7, 1, v10) != 1)
        {
          uint64_t v28 = v36;
          v25(v36, v7, v10);
          uint64_t v29 = v40;
          v25(v40, v39, v10);
          uint64_t v30 = type metadata accessor for SilencePeriod(0);
          v25(&v29[*(int *)(v30 + 20)], v28, v10);
          return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 0, 1, v30);
        }
      }
      else
      {
        v35(v7, 1, 1, v10);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v39, v10);
    }
    a1 = v40;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    uint64_t v7 = v9;
  }
  sub_10000950C((uint64_t)v7, &qword_100380418);
  uint64_t v32 = type metadata accessor for SilencePeriod(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a1, 1, 1, v32);
}

uint64_t sub_100121B58@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = sub_100004010(&qword_10037F158);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = [v1 connectionStatus];
  unint64_t v7 = (unint64_t)[v1 syncStatus];
  unint64_t v8 = (unint64_t)[v1 registrationStatus];
  id v9 = [v1 congestionStatus];
  id v10 = [v1 currentTransmissionProgress];
  if (v10)
  {
    uint64_t v11 = v10;
    sub_100122008(v5);
  }
  else
  {
    uint64_t v12 = type metadata accessor for TransmissionProgress(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
  }
  unint64_t v13 = 0x302010004uLL >> (8 * v9);
  if ((unint64_t)v9 >= 5) {
    LOBYTE(v13) = 4;
  }
  unsigned int v14 = 0x10002u >> (8 * v8);
  if (v8 >= 3) {
    LOBYTE(v14) = 2;
  }
  unsigned int v15 = 0x10002u >> (8 * v7);
  if (v7 >= 3) {
    LOBYTE(v15) = 2;
  }
  *a1 = v6 == (id)3;
  a1[1] = v15;
  a1[2] = v14;
  a1[3] = v13;
  uint64_t v16 = type metadata accessor for LinkState(0);
  return sub_10000D544((uint64_t)v5, (uint64_t)&a1[*(int *)(v16 + 32)], &qword_10037F158);
}

uint64_t sub_100121D24()
{
  if (![v0 footnotesToShowMask])
  {
    id v6 = [v0 partners];
    if (v6)
    {
      sub_10001E6FC(0, (unint64_t *)&qword_100393B80);
      sub_100004010(&qword_100380040);
      sub_10012894C();
      uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      return v5;
    }
    return 0;
  }
  id v1 = v0;
  int v2 = sub_100128828((uint64_t)&off_10034B7E8, v1);

  sub_1000D78AC((uint64_t)v2);
  swift_bridgeObjectRelease();
  id v3 = [v1 partners];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10001E6FC(0, (unint64_t *)&qword_100393B80);
  sub_100004010(&qword_100380040);
  sub_10012894C();
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_100121E8C@<X0>(unsigned char *a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = sub_100004010(&qword_100380418);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_1001225B4((uint64_t)[v2 reason]);
  id v8 = [v2 closedAt];
  if (v8)
  {
    id v9 = v8;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  }
  uint64_t v12 = sub_10018F938((char)[v2 wasActiveServices]);
  *a1 = v7;
  uint64_t v13 = type metadata accessor for ConnectionClosed(0);
  uint64_t result = sub_10000D544((uint64_t)v6, (uint64_t)&a1[*(int *)(v13 + 20)], &qword_100380418);
  *(void *)&a1[*(int *)(v13 + 24)] = v12;
  return result;
}

id sub_100122008@<X0>(uint64_t *a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = sub_100004010(&qword_100380418);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = (char *)[v2 payloadType];
  char v8 = (_BYTE)v7 - 1;
  if ((unint64_t)(v7 - 1) > 6)
  {
    uint64_t v14 = type metadata accessor for TransmissionProgress(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    return (id)v15(a1, 1, 1, v14);
  }
  else
  {
    id v9 = [v2 messageId];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = 0;
    }
    id v17 = [v2 startedAt];
    if (v17)
    {
      uint64_t v18 = v17;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 0, 1, v19);
    }
    else
    {
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v6, 1, 1, v20);
    }
    id v21 = [v2 estimatedDurationSeconds];

    if (v21)
    {
      id result = [v2 estimatedDurationSeconds];
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v22 = result;
      id v23 = [result int64ValueSafe];
    }
    else
    {
      id v23 = 0;
    }
    id v24 = [v2 progressPercents];
    if (v24)
    {
      uint64_t v25 = v24;
      id v26 = [v24 int64ValueSafe];
    }
    else
    {
      id v26 = 0;
    }
    *a1 = v11;
    a1[1] = v13;
    id v27 = (int *)type metadata accessor for TransmissionProgress(0);
    sub_10000D544((uint64_t)v6, (uint64_t)a1 + v27[5], &qword_100380418);
    uint64_t v28 = (char *)a1 + v27[6];
    *(void *)uint64_t v28 = v23;
    v28[8] = v21 == 0;
    *(uint64_t *)((char *)a1 + v27[7]) = (uint64_t)v26;
    *((unsigned char *)a1 + v27[8]) = v8;
    return (id)(*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v27 - 1) + 56))(a1, 0, 1, v27);
  }
}

uint64_t sub_100122318(uint64_t a1)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0;
      break;
    case 2:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 3;
      break;
    case 5:
      if (qword_10037DDA8 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10000FD84(v9, (uint64_t)qword_1003A99D0);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v4, v10)) {
        goto LABEL_15;
      }
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v10, "CTCAStewieEmergencyRequestReasonTryOut should never reach SOSBuddy", v11, 2u);
      goto LABEL_14;
    default:
      if (qword_10037DDA8 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10000FD84(v3, (uint64_t)qword_1003A99D0);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        id v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        *(_DWORD *)id v6 = 136446210;
        type metadata accessor for CTCAStewieEmergencyRequestReason(0);
        uint64_t v7 = String.init<A>(describing:)();
        sub_1001B3178(v7, v8, &v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unhandled CTCAStewieEmergencyRequestReason value: %{public}s", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_14:
        swift_slowDealloc();
      }
LABEL_15:

      uint64_t result = 4;
      break;
  }
  return result;
}

uint64_t sub_1001225B4(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xC) {
    return 12;
  }
  else {
    return byte_1002BB03A[a1 - 1];
  }
}

void sub_1001225D8(uint64_t a1@<X8>)
{
  uint64_t v25 = _swiftEmptyArrayStorage;
  id v3 = [v1 targets];
  sub_10001E6FC(0, &qword_1003881A0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    sub_100122888(&v25);
    id v21 = [v1 at];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = v25;
    *(void *)(a1 + *(int *)(type metadata accessor for TargetTracks.TimePoint(0) + 20)) = v22;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_15;
  }
LABEL_3:
  if (v5 >= 1)
  {
    id v23 = v1;
    uint64_t v24 = a1;
    uint64_t v6 = 0;
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v4 + 8 * v6 + 32);
      }
      uint64_t v9 = v8;
      id v10 = [v8 x:v23, v24];
      [v10 doubleValueSafe];
      double v12 = v11;

      id v13 = [v9 y];
      [v13 doubleValueSafe];
      double v15 = v14;

      id v16 = [v9 targetId];
      id v17 = [v16 int64ValueSafe];

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_1001B2AA0(0, v7[2] + 1, 1, v7);
      }
      unint64_t v19 = v7[2];
      unint64_t v18 = v7[3];
      if (v19 >= v18 >> 1) {
        uint64_t v7 = sub_1001B2AA0((void *)(v18 > 1), v19 + 1, 1, v7);
      }
      ++v6;
      void v7[2] = v19 + 1;
      uint64_t v20 = (double *)&v7[3 * v19];
      *((void *)v20 + 4) = v17;
      v20[5] = v12 * 0.0174532925;
      v20[6] = v15 * 0.0174532925;
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
    uint64_t v25 = v7;
    id v1 = v23;
    a1 = v24;
    goto LABEL_16;
  }
  __break(1u);
}

Swift::Int sub_100122888(void **a1)
{
  int v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v2 = sub_1001D58E0(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_100123830(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1001228F8(unint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for TargetTracks.TimePoint(0) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_1001D58F4(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100123F48(v6);
  *a1 = v3;
  return result;
}

void sub_1001229A4(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for TargetTracks.TimePoint(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100380418);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v47 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  double v11 = (char *)&v45 - v10;
  uint64_t v12 = type metadata accessor for Date();
  id v13 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v50 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v45 - v17;
  __chkstk_darwin(v16);
  uint64_t v48 = v2;
  long long v49 = (char *)&v45 - v19;
  id v20 = [v2 startsAt];
  if (!v20)
  {
    uint64_t v24 = v13;
    id v23 = v13[7];
    uint64_t v25 = v12;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v23)(v11, 1, 1, v12);
    goto LABEL_5;
  }
  id v21 = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = v13[4];
  v22((uint64_t)v11, (uint64_t)v18, v12);
  id v23 = v13[7];
  ((void (*)(char *, void, uint64_t, uint64_t))v23)(v11, 0, 1, v12);
  uint64_t v24 = v13;
  if (v13[6]((uint64_t)v11, 1, v12) == 1)
  {
    uint64_t v25 = v12;
LABEL_5:
    id v26 = v48;
    Date.init()();
    sub_10000950C((uint64_t)v11, &qword_100380418);
    uint64_t v12 = v25;
    goto LABEL_7;
  }
  v22((uint64_t)v49, (uint64_t)v11, v12);
  id v26 = v48;
LABEL_7:
  id v27 = [v26 endsAt];
  uint64_t v28 = v24;
  if (v27)
  {
    uint64_t v29 = v27;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = v24[4];
    uint64_t v31 = (uint64_t)v47;
    v30((uint64_t)v47, (uint64_t)v18, v12);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v23)(v31, 0, 1, v12);
    if (v28[6](v31, 1, v12) != 1)
    {
      v30((uint64_t)v50, v31, v12);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v31 = (uint64_t)v47;
    ((void (*)(unsigned int (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))v23)(v47, 1, 1, v12);
  }
  Date.init()();
  sub_10000950C(v31, &qword_100380418);
LABEL_12:
  uint64_t v51 = _swiftEmptyArrayStorage;
  id v32 = [v26 readings];
  sub_10001E6FC(0, &qword_100388190);
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v33 >> 62))
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v34) {
      goto LABEL_14;
    }
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    sub_1001228F8((unint64_t *)&v51);
    uint64_t v41 = v51;
    uint64_t v42 = v28[4];
    uint64_t v43 = v46;
    v42(v46, (uint64_t)v49, v12);
    uint64_t v44 = type metadata accessor for TargetTracks(0);
    v42(v43 + *(int *)(v44 + 20), (uint64_t)v50, v12);
    *(void *)(v43 + *(int *)(v44 + 24)) = v41;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v34) {
    goto LABEL_26;
  }
LABEL_14:
  if (v34 >= 1)
  {
    id v47 = v28;
    uint64_t v48 = (void *)v12;
    uint64_t v35 = 0;
    unsigned __int8 v36 = _swiftEmptyArrayStorage;
    do
    {
      if ((v33 & 0xC000000000000001) != 0) {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v37 = *(id *)(v33 + 8 * v35 + 32);
      }
      id v38 = v37;
      sub_1001225D8((uint64_t)v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned __int8 v36 = (void *)sub_1001B2BC8(0, v36[2] + 1, 1, (unint64_t)v36);
      }
      unint64_t v40 = v36[2];
      unint64_t v39 = v36[3];
      if (v40 >= v39 >> 1) {
        unsigned __int8 v36 = (void *)sub_1001B2BC8(v39 > 1, v40 + 1, 1, (unint64_t)v36);
      }
      ++v35;
      v36[2] = v40 + 1;
      sub_1001285C4((uint64_t)v6, (uint64_t)v36+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v40, type metadata accessor for TargetTracks.TimePoint);
    }
    while (v34 != v35);
    swift_bridgeObjectRelease();
    uint64_t v51 = v36;
    uint64_t v28 = v47;
    uint64_t v12 = (uint64_t)v48;
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t sub_100122F88(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_23:
    uint64_t v15 = 8 * v11;
    uint64_t v16 = *(void **)(*(void *)(v3 + 56) + v15);
    id v17 = *(id *)(*(void *)(v3 + 48) + v15);
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_1001BEACC((uint64_t)v17);
    char v20 = v19;

    if ((v20 & 1) == 0) {
      goto LABEL_48;
    }
    id v21 = *(void **)(*(void *)(a2 + 56) + 8 * v18);
    uint64_t v22 = v21[2];
    if (v22 != v16[2]) {
      goto LABEL_48;
    }
    if (v22) {
      BOOL v23 = v21 == v16;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23)
    {
      BOOL v24 = v21[4] == v16[4] && v21[5] == v16[5];
      if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_48;
      }
      if (v22 != 1)
      {
        BOOL v25 = v21[6] == v16[6] && v21[7] == v16[7];
        if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v26 = v22 - 2;
        if (v26)
        {
          uint64_t v27 = 0;
          while (1)
          {
            BOOL v28 = v21[v27 + 8] == v16[v27 + 8] && v21[v27 + 9] == v16[v27 + 9];
            if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              break;
            }
            v27 += 2;
            if (!--v26) {
              goto LABEL_6;
            }
          }
LABEL_48:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
LABEL_6:
    Swift::Int result = swift_bridgeObjectRelease();
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1001231DC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    int v15 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v11);
    Swift::Int result = sub_1001BEB10(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(unsigned __int8 *)(*(void *)(a2 + 56) + result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_10012335C(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_25:
    Swift::UInt v15 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
    char v16 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    Swift::Int result = sub_1001BEB14(v15);
    if ((v19 & 1) == 0) {
      return 0;
    }
    char v20 = (unint64_t *)(*(void *)(a2 + 56) + 16 * result);
    unint64_t v21 = v20[1];
    if (v21)
    {
      if (!v17) {
        return 0;
      }
      Swift::Int result = *v20;
      if (*v20 != v18 || v21 != v17)
      {
        Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
  }
  int64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v12 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v4 = v12 + 2;
  if (v12 + 2 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v4 = v12 + 3;
  if (v12 + 3 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_24:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_25;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100123510(uint64_t result, uint64_t a2, __n128 a3)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v4 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v5 = 0;
  uint64_t v39 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v40 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    while (1)
    {
LABEL_7:
      if (!v8)
      {
        int64_t v10 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
        }
        else
        {
          if (v10 >= v40) {
            return 1;
          }
          unint64_t v11 = *(void *)(v39 + 8 * v10);
          int64_t v12 = v5 + 1;
          if (v11) {
            goto LABEL_24;
          }
          int64_t v12 = v5 + 2;
          if (v5 + 2 >= v40) {
            return 1;
          }
          unint64_t v11 = *(void *)(v39 + 8 * v12);
          if (v11) {
            goto LABEL_24;
          }
          int64_t v12 = v5 + 3;
          if (v5 + 3 >= v40) {
            return 1;
          }
          unint64_t v11 = *(void *)(v39 + 8 * v12);
          if (v11) {
            goto LABEL_24;
          }
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v40) {
            return 1;
          }
          unint64_t v11 = *(void *)(v39 + 8 * v12);
          if (v11) {
            goto LABEL_24;
          }
          uint64_t v13 = v5 + 5;
          if (v5 + 5 >= v40) {
            return 1;
          }
          unint64_t v11 = *(void *)(v39 + 8 * v13);
          if (v11)
          {
            int64_t v12 = v5 + 5;
LABEL_24:
            uint64_t v41 = (v11 - 1) & v11;
            int64_t v42 = v12;
            unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
            goto LABEL_25;
          }
          while (1)
          {
            int64_t v12 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              break;
            }
            if (v12 >= v40) {
              return 1;
            }
            unint64_t v11 = *(void *)(v39 + 8 * v12);
            ++v13;
            if (v11) {
              goto LABEL_24;
            }
          }
        }
        __break(1u);
        return result;
      }
      uint64_t v41 = (v8 - 1) & v8;
      int64_t v42 = v5;
      unint64_t v9 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_25:
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v9);
      uint64_t v15 = *(void *)(v4 + 56) + 40 * v9;
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = *(void *)(v15 + 8);
      uint64_t v18 = *(void *)(v15 + 16);
      int v19 = *(unsigned __int8 *)(v15 + 24);
      int v20 = *(unsigned __int8 *)(v15 + 25);
      unint64_t v21 = *(void **)(v15 + 32);
      uint64_t v22 = sub_1001C92C8(v14, a3);
      if ((v23 & 1) == 0) {
        return 0;
      }
      uint64_t v24 = *(void *)(a2 + 56) + 40 * v22;
      if (*(void *)v24 != v16) {
        return 0;
      }
      uint64_t v25 = v4;
      int v26 = *(unsigned __int8 *)(v24 + 24);
      int v27 = *(unsigned __int8 *)(v24 + 25);
      BOOL v28 = *(void **)(v24 + 32);
      if (*(void *)(v24 + 8) == v17 && *(void *)(v24 + 16) == v18)
      {
        Swift::Int result = 0;
        if (v19 != v26) {
          return result;
        }
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        Swift::Int result = 0;
        if (v30 & 1) == 0 || ((v19 ^ v26)) {
          return result;
        }
      }
      if ((v20 ^ v27)) {
        return result;
      }
      if (v28) {
        break;
      }
      uint64_t v4 = v25;
      unint64_t v8 = v41;
      int64_t v5 = v42;
      if (v21) {
        return 0;
      }
    }
    unint64_t v8 = v41;
    int64_t v5 = v42;
    if (!v21) {
      return 0;
    }
    uint64_t v31 = v28[2];
    if (v31 != v21[2]) {
      return 0;
    }
    uint64_t v4 = v25;
    if (v31) {
      BOOL v32 = v28 == v21;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32)
    {
      Swift::Int result = v28[4];
      if (result != v21[4] || v28[5] != v21[5])
      {
        Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          return 0;
        }
      }
      if (v31 != 1)
      {
        Swift::Int result = v28[6];
        if (result != v21[6] || v28[7] != v21[7])
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            return 0;
          }
        }
        uint64_t v35 = v31 - 2;
        if (v35) {
          break;
        }
      }
    }
  }
  unsigned __int8 v36 = v21 + 9;
  id v37 = v28 + 9;
  while (1)
  {
    Swift::Int result = *(v37 - 1);
    if (result != *(v36 - 1) || *v37 != *v36)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    v36 += 2;
    v37 += 2;
    if (!--v35) {
      goto LABEL_7;
    }
  }
}

Swift::Int sub_100123830(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v87 = 0;
      uint64_t v88 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v90 = *(void *)(v88 + 24 * i);
        uint64_t v91 = v87;
        do
        {
          uint64_t v92 = v88 + v91;
          if (*(void *)(v88 + v91) < v90) {
            break;
          }
          if (!v88) {
            goto LABEL_140;
          }
          uint64_t v93 = v88 + v91;
          long long v94 = *(_OWORD *)(v88 + v91 + 32);
          *(_OWORD *)(v88 + v91 + 24) = *(_OWORD *)v92;
          *(void *)(v88 + v91 + 40) = *(void *)(v92 + 16);
          *(void *)uint64_t v93 = v90;
          *(_OWORD *)(v93 + 8) = v94;
          v91 -= 24;
        }
        while (v91 != -24);
        v87 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v104 = a1;
  if (v3 < 2)
  {
    unint64_t v9 = &_swiftEmptyArrayStorage;
    __dst = (char *)(&_swiftEmptyArrayStorage + 4);
    if (v3 != 1)
    {
      unint64_t v13 = *(&_swiftEmptyArrayStorage + 2);
      int64_t v12 = (char *)&_swiftEmptyArrayStorage;
LABEL_102:
      int v95 = v12;
      int v106 = v9;
      if (v13 >= 2)
      {
        uint64_t v96 = *v104;
        do
        {
          unint64_t v97 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v96) {
            goto LABEL_144;
          }
          uint64_t v98 = v95;
          uint64_t v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v13 + 24];
          sub_100124DC0((char *)(v96 + 24 * v99), (char *)(v96 + 24 * *(void *)&v95[16 * v13 + 16]), v96 + 24 * v100, __dst);
          if (v1) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v98 = sub_1001D6E20((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_133;
          }
          uint64_t v101 = &v98[16 * v97 + 32];
          *(void *)uint64_t v101 = v99;
          *((void *)v101 + 1) = v100;
          unint64_t v102 = *((void *)v98 + 2);
          if (v13 > v102) {
            goto LABEL_134;
          }
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          int v95 = v98;
          *((void *)v98 + 2) = v102 - 1;
          unint64_t v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v106[2] = 0;
      return swift_bridgeObjectRelease();
    }
    int v106 = &_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    int v106 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v105 = *a1 + 48;
  uint64_t v103 = *a1 - 24;
  int64_t v12 = (char *)&_swiftEmptyArrayStorage;
  Swift::Int v107 = v6;
  Swift::Int v108 = v3;
  uint64_t v109 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 24 * v10);
      uint64_t v16 = *(void *)(v11 + 24 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v105 + 24 * v14);
        uint64_t v18 = v15;
        while (1)
        {
          uint64_t v20 = *v17;
          v17 += 3;
          uint64_t v19 = v20;
          if (v16 >= v15 == v18 < v20) {
            break;
          }
          ++v10;
          uint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v16 >= v15)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 24 * v10;
          uint64_t v22 = 24 * v14;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = v11 + v21;
              uint64_t v27 = *(void *)(v11 + v22);
              long long v28 = *(_OWORD *)(v11 + v22 + 8);
              long long v29 = *(_OWORD *)(v11 + v21 - 24);
              *(void *)(v25 + 16) = *(void *)(v11 + v21 - 8);
              *(_OWORD *)uint64_t v25 = v29;
              *(void *)(v26 - 24) = v27;
              *(_OWORD *)(v26 - 16) = v28;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v30 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v30 >= v3) {
      Swift::Int v30 = v3;
    }
    if (v30 < v14) {
      break;
    }
    if (v10 != v30)
    {
      uint64_t v31 = v103 + 24 * v10;
      do
      {
        uint64_t v32 = *(void *)(v11 + 24 * v10);
        Swift::Int v33 = v14;
        uint64_t v34 = v31;
        do
        {
          if (*(void *)v34 < v32) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          long long v35 = *(_OWORD *)(v34 + 32);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)v34;
          *(void *)(v34 + 40) = *(void *)(v34 + 16);
          *(void *)uint64_t v34 = v32;
          *(_OWORD *)(v34 + 8) = v35;
          v34 -= 24;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 24;
      }
      while (v10 != v30);
      Swift::Int v10 = v30;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v12 = sub_1001D6A48(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v37 = *((void *)v12 + 2);
    unint64_t v36 = *((void *)v12 + 3);
    unint64_t v13 = v37 + 1;
    uint64_t v11 = v109;
    if (v37 >= v36 >> 1)
    {
      uint64_t v86 = sub_1001D6A48((char *)(v36 > 1), v37 + 1, 1, v12);
      uint64_t v11 = v109;
      int64_t v12 = v86;
    }
    *((void *)v12 + 2) = v13;
    id v38 = v12 + 32;
    uint64_t v39 = &v12[16 * v37 + 32];
    *(void *)uint64_t v39 = v14;
    *((void *)v39 + 1) = v10;
    if (v37)
    {
      while (1)
      {
        unint64_t v40 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v45 = &v38[16 * v13];
          uint64_t v46 = *((void *)v45 - 8);
          uint64_t v47 = *((void *)v45 - 7);
          BOOL v51 = __OFSUB__(v47, v46);
          uint64_t v48 = v47 - v46;
          if (v51) {
            goto LABEL_119;
          }
          uint64_t v50 = *((void *)v45 - 6);
          uint64_t v49 = *((void *)v45 - 5);
          BOOL v51 = __OFSUB__(v49, v50);
          uint64_t v43 = v49 - v50;
          char v44 = v51;
          if (v51) {
            goto LABEL_120;
          }
          unint64_t v52 = v13 - 2;
          id v53 = &v38[16 * v13 - 32];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          BOOL v51 = __OFSUB__(v54, v55);
          uint64_t v56 = v54 - v55;
          if (v51) {
            goto LABEL_122;
          }
          BOOL v51 = __OFADD__(v43, v56);
          uint64_t v57 = v43 + v56;
          if (v51) {
            goto LABEL_125;
          }
          if (v57 >= v48)
          {
            uint64_t v75 = &v38[16 * v40];
            uint64_t v77 = *(void *)v75;
            uint64_t v76 = *((void *)v75 + 1);
            BOOL v51 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v51) {
              goto LABEL_129;
            }
            BOOL v68 = v43 < v78;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v69 = *((void *)v12 + 4);
            uint64_t v70 = *((void *)v12 + 5);
            BOOL v51 = __OFSUB__(v70, v69);
            uint64_t v62 = v70 - v69;
            char v63 = v51;
            goto LABEL_77;
          }
          uint64_t v42 = *((void *)v12 + 4);
          uint64_t v41 = *((void *)v12 + 5);
          BOOL v51 = __OFSUB__(v41, v42);
          uint64_t v43 = v41 - v42;
          char v44 = v51;
        }
        if (v44) {
          goto LABEL_121;
        }
        unint64_t v52 = v13 - 2;
        uint64_t v58 = &v38[16 * v13 - 32];
        uint64_t v60 = *(void *)v58;
        uint64_t v59 = *((void *)v58 + 1);
        BOOL v61 = __OFSUB__(v59, v60);
        uint64_t v62 = v59 - v60;
        char v63 = v61;
        if (v61) {
          goto LABEL_124;
        }
        uint64_t v64 = &v38[16 * v40];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v51 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v51) {
          goto LABEL_127;
        }
        if (__OFADD__(v62, v67)) {
          goto LABEL_128;
        }
        if (v62 + v67 >= v43)
        {
          BOOL v68 = v43 < v67;
LABEL_83:
          if (v68) {
            unint64_t v40 = v52;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v63) {
          goto LABEL_123;
        }
        uint64_t v71 = &v38[16 * v40];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        BOOL v51 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v51) {
          goto LABEL_126;
        }
        if (v74 < v62) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v80 = v12;
        uint64_t v81 = &v38[16 * v79];
        uint64_t v82 = *(void *)v81;
        uint64_t v83 = &v38[16 * v40];
        uint64_t v84 = *((void *)v83 + 1);
        sub_100124DC0((char *)(v11 + 24 * *(void *)v81), (char *)(v11 + 24 * *(void *)v83), v11 + 24 * v84, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v84 < v82) {
          goto LABEL_116;
        }
        if (v40 > *((void *)v80 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v81 = v82;
        *(void *)&v38[16 * v79 + 8] = v84;
        unint64_t v85 = *((void *)v80 + 2);
        if (v40 >= v85) {
          goto LABEL_118;
        }
        int64_t v12 = v80;
        unint64_t v13 = v85 - 1;
        memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
        *((void *)v80 + 2) = v85 - 1;
        uint64_t v11 = v109;
        if (v85 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v107;
    Swift::Int v3 = v108;
    if (v10 >= v108)
    {
      unint64_t v9 = v106;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100123F48(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TargetTracks.TimePoint(0);
  uint64_t v131 = *(void *)(v4 - 8);
  uint64_t v132 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v128 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v139 = (uint64_t)&v123 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v123 - v10;
  __chkstk_darwin(v9);
  uint64_t v135 = (uint64_t)&v123 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_139;
    }
    if (v12) {
      return sub_100124AB0(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_147;
  }
  Swift::Int v125 = result;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v130 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    long long v124 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_105:
      if (v20 >= 2)
      {
        uint64_t v115 = *a1;
        do
        {
          unint64_t v116 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_134;
          }
          if (!v115) {
            goto LABEL_146;
          }
          uint64_t v117 = v18;
          uint64_t v118 = v18 + 32;
          uint64_t v119 = *(void *)&v18[16 * v116 + 32];
          uint64_t v120 = *(void *)&v18[16 * v20 + 24];
          sub_100125078(v115 + *(void *)(v131 + 72) * v119, v115 + *(void *)(v131 + 72) * *(void *)&v118[16 * v20 - 16], v115 + *(void *)(v131 + 72) * v120, v130);
          if (v2) {
            break;
          }
          if (v120 < v119) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v117 = sub_1001D6E20((uint64_t)v117);
          }
          if (v116 >= *((void *)v117 + 2)) {
            goto LABEL_136;
          }
          uint64_t v121 = &v117[16 * v116 + 32];
          *(void *)uint64_t v121 = v119;
          *((void *)v121 + 1) = v120;
          unint64_t v122 = *((void *)v117 + 2);
          if (v20 > v122) {
            goto LABEL_137;
          }
          uint64_t v18 = v117;
          memmove(&v117[16 * v20 + 16], &v117[16 * v20 + 32], 16 * (v122 - v20));
          *((void *)v117 + 2) = v122 - 1;
          unint64_t v20 = v122 - 1;
        }
        while (v122 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v124[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v131 + 80);
    long long v124 = (void *)v16;
    unint64_t v130 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v138 = a1;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    Swift::Int v129 = v19;
    if (v19 + 1 >= v12)
    {
      Swift::Int v33 = v19 + 1;
    }
    else
    {
      uint64_t v23 = *a1;
      uint64_t v24 = *(void *)(v131 + 72);
      uint64_t v25 = *a1 + v24 * v22;
      Swift::Int v140 = v12;
      uint64_t v26 = v135;
      sub_1001286D8(v25, v135, type metadata accessor for TargetTracks.TimePoint);
      uint64_t v27 = v23 + v24 * v21;
      uint64_t v28 = v136;
      uint64_t v29 = v24;
      sub_1001286D8(v27, v136, type metadata accessor for TargetTracks.TimePoint);
      type metadata accessor for Date();
      uint64_t v134 = sub_100120CAC((unint64_t *)&qword_100388198, (void (*)(uint64_t))&type metadata accessor for Date);
      LODWORD(v137) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v30 = v28;
      Swift::Int v21 = v129;
      sub_10011AAAC(v30, type metadata accessor for TargetTracks.TimePoint);
      uint64_t v31 = v26;
      Swift::Int v12 = v140;
      sub_10011AAAC(v31, type metadata accessor for TargetTracks.TimePoint);
      uint64_t v32 = v23;
      Swift::Int v33 = v21 + 2;
      uint64_t v133 = v32;
      uint64_t v141 = v24;
      if (v21 + 2 >= v12)
      {
        a1 = v138;
        if (v137) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v123 = v2;
        uint64_t v126 = v18;
        uint64_t v34 = v24 * v22;
        uint64_t v35 = v32;
        uint64_t v36 = v24 * v33;
        while (1)
        {
          Swift::Int v37 = v33;
          uint64_t v38 = v135;
          sub_1001286D8(v35 + v36, v135, type metadata accessor for TargetTracks.TimePoint);
          uint64_t v39 = v136;
          sub_1001286D8(v35 + v34, v136, type metadata accessor for TargetTracks.TimePoint);
          int v40 = dispatch thunk of static Comparable.< infix(_:_:)();
          sub_10011AAAC(v39, type metadata accessor for TargetTracks.TimePoint);
          sub_10011AAAC(v38, type metadata accessor for TargetTracks.TimePoint);
          if ((v137 ^ v40)) {
            break;
          }
          ++v33;
          uint64_t v29 = v141;
          v35 += v141;
          Swift::Int v12 = v140;
          if (v140 == v37 + 1)
          {
            Swift::Int v33 = v140;
            a1 = v138;
            uint64_t v18 = v126;
            uint64_t v2 = v123;
            Swift::Int v21 = v129;
            if ((v137 & 1) == 0) {
              goto LABEL_26;
            }
            goto LABEL_39;
          }
        }
        a1 = v138;
        uint64_t v18 = v126;
        uint64_t v2 = v123;
        Swift::Int v21 = v129;
        Swift::Int v12 = v140;
        uint64_t v29 = v141;
        if (v137) {
          goto LABEL_39;
        }
      }
LABEL_26:
      if (v33 < v21) {
        goto LABEL_140;
      }
      if (v21 < v33)
      {
        uint64_t v126 = v18;
        uint64_t v41 = 0;
        uint64_t v42 = v29 * (v33 - 1);
        Swift::Int v43 = v21;
        Swift::Int v44 = v33 * v29;
        Swift::Int v45 = v43;
        uint64_t v46 = v43 * v29;
        do
        {
          if (v45 != v33 + v41 - 1)
          {
            uint64_t v49 = v133;
            if (!v133) {
              goto LABEL_145;
            }
            unint64_t v50 = v133 + v46;
            Swift::Int v137 = v133 + v42;
            sub_1001285C4(v133 + v46, v128, type metadata accessor for TargetTracks.TimePoint);
            if (v46 < v42 || v50 >= v49 + v44)
            {
              uint64_t v47 = v137;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v48 = v47;
              uint64_t v29 = v141;
            }
            else
            {
              uint64_t v29 = v141;
              uint64_t v48 = v137;
              if (v46 != v42)
              {
                uint64_t v51 = v137;
                swift_arrayInitWithTakeBackToFront();
                uint64_t v48 = v51;
              }
            }
            sub_1001285C4(v128, v48, type metadata accessor for TargetTracks.TimePoint);
          }
          ++v45;
          --v41;
          v42 -= v29;
          v44 -= v29;
          v46 += v29;
        }
        while (v45 < v33 + v41);
        a1 = v138;
        uint64_t v18 = v126;
        Swift::Int v21 = v129;
        Swift::Int v12 = v140;
      }
    }
LABEL_39:
    if (v33 >= v12) {
      goto LABEL_57;
    }
    if (__OFSUB__(v33, v21)) {
      goto LABEL_138;
    }
    if (v33 - v21 >= v125) {
      goto LABEL_57;
    }
    if (__OFADD__(v21, v125)) {
      goto LABEL_141;
    }
    Swift::Int v52 = v21 + v125 >= v12 ? v12 : v21 + v125;
    if (v52 < v21) {
      break;
    }
    if (v33 != v52)
    {
      uint64_t v126 = v18;
      uint64_t v123 = v2;
      type metadata accessor for Date();
      uint64_t v53 = *(void *)(v131 + 72);
      uint64_t v141 = v53 * (v33 - 1);
      uint64_t v133 = v53;
      uint64_t v54 = v33 * v53;
      Swift::Int v127 = v52;
      do
      {
        uint64_t v56 = 0;
        Swift::Int v137 = v33;
        uint64_t v134 = v54;
        while (1)
        {
          Swift::Int v140 = v21;
          uint64_t v57 = a1;
          uint64_t v58 = *a1;
          uint64_t v59 = v54 + v56 + v58;
          uint64_t v60 = v135;
          sub_1001286D8(v59, v135, type metadata accessor for TargetTracks.TimePoint);
          uint64_t v61 = v136;
          sub_1001286D8(v141 + v56 + v58, v136, type metadata accessor for TargetTracks.TimePoint);
          sub_100120CAC((unint64_t *)&qword_100388198, (void (*)(uint64_t))&type metadata accessor for Date);
          char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
          sub_10011AAAC(v61, type metadata accessor for TargetTracks.TimePoint);
          sub_10011AAAC(v60, type metadata accessor for TargetTracks.TimePoint);
          if (v62) {
            break;
          }
          uint64_t v63 = *v57;
          if (!*v57) {
            goto LABEL_143;
          }
          uint64_t v54 = v134;
          uint64_t v64 = v63 + v141 + v56;
          sub_1001285C4(v63 + v134 + v56, v139, type metadata accessor for TargetTracks.TimePoint);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001285C4(v139, v64, type metadata accessor for TargetTracks.TimePoint);
          v56 -= v133;
          Swift::Int v21 = v140 + 1;
          Swift::Int v55 = v137;
          a1 = v138;
          if (v137 == v140 + 1) {
            goto LABEL_50;
          }
        }
        Swift::Int v55 = v137;
        a1 = v57;
        uint64_t v54 = v134;
LABEL_50:
        Swift::Int v33 = v55 + 1;
        v141 += v133;
        v54 += v133;
        Swift::Int v21 = v129;
      }
      while (v33 != v127);
      Swift::Int v33 = v127;
      uint64_t v2 = v123;
      uint64_t v18 = v126;
    }
LABEL_57:
    if (v33 < v21) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v18 = sub_1001D6A48(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v66 = *((void *)v18 + 2);
    unint64_t v65 = *((void *)v18 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v18 = sub_1001D6A48((char *)(v65 > 1), v66 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    uint64_t v67 = v18 + 32;
    BOOL v68 = &v18[16 * v66 + 32];
    *(void *)BOOL v68 = v21;
    *((void *)v68 + 1) = v33;
    Swift::Int v137 = v33;
    if (v66)
    {
      while (1)
      {
        unint64_t v69 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v74 = &v67[16 * v20];
          uint64_t v75 = *((void *)v74 - 8);
          uint64_t v76 = *((void *)v74 - 7);
          BOOL v80 = __OFSUB__(v76, v75);
          uint64_t v77 = v76 - v75;
          if (v80) {
            goto LABEL_122;
          }
          uint64_t v79 = *((void *)v74 - 6);
          uint64_t v78 = *((void *)v74 - 5);
          BOOL v80 = __OFSUB__(v78, v79);
          uint64_t v72 = v78 - v79;
          char v73 = v80;
          if (v80) {
            goto LABEL_123;
          }
          unint64_t v81 = v20 - 2;
          uint64_t v82 = &v67[16 * v20 - 32];
          uint64_t v84 = *(void *)v82;
          uint64_t v83 = *((void *)v82 + 1);
          BOOL v80 = __OFSUB__(v83, v84);
          uint64_t v85 = v83 - v84;
          if (v80) {
            goto LABEL_125;
          }
          BOOL v80 = __OFADD__(v72, v85);
          uint64_t v86 = v72 + v85;
          if (v80) {
            goto LABEL_128;
          }
          if (v86 >= v77)
          {
            uint64_t v104 = &v67[16 * v69];
            uint64_t v106 = *(void *)v104;
            uint64_t v105 = *((void *)v104 + 1);
            BOOL v80 = __OFSUB__(v105, v106);
            uint64_t v107 = v105 - v106;
            if (v80) {
              goto LABEL_132;
            }
            BOOL v97 = v72 < v107;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v98 = *((void *)v18 + 4);
            uint64_t v99 = *((void *)v18 + 5);
            BOOL v80 = __OFSUB__(v99, v98);
            uint64_t v91 = v99 - v98;
            char v92 = v80;
            goto LABEL_88;
          }
          uint64_t v71 = *((void *)v18 + 4);
          uint64_t v70 = *((void *)v18 + 5);
          BOOL v80 = __OFSUB__(v70, v71);
          uint64_t v72 = v70 - v71;
          char v73 = v80;
        }
        if (v73) {
          goto LABEL_124;
        }
        unint64_t v81 = v20 - 2;
        uint64_t v87 = &v67[16 * v20 - 32];
        uint64_t v89 = *(void *)v87;
        uint64_t v88 = *((void *)v87 + 1);
        BOOL v90 = __OFSUB__(v88, v89);
        uint64_t v91 = v88 - v89;
        char v92 = v90;
        if (v90) {
          goto LABEL_127;
        }
        uint64_t v93 = &v67[16 * v69];
        uint64_t v95 = *(void *)v93;
        uint64_t v94 = *((void *)v93 + 1);
        BOOL v80 = __OFSUB__(v94, v95);
        uint64_t v96 = v94 - v95;
        if (v80) {
          goto LABEL_130;
        }
        if (__OFADD__(v91, v96)) {
          goto LABEL_131;
        }
        if (v91 + v96 >= v72)
        {
          BOOL v97 = v72 < v96;
LABEL_94:
          if (v97) {
            unint64_t v69 = v81;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v92) {
          goto LABEL_126;
        }
        uint64_t v100 = &v67[16 * v69];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v80 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v80) {
          goto LABEL_129;
        }
        if (v103 < v91) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v108 = v69 - 1;
        if (v69 - 1 >= v20)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v138) {
          goto LABEL_144;
        }
        uint64_t v109 = v18;
        uint64_t v110 = &v67[16 * v108];
        uint64_t v111 = *(void *)v110;
        uint64_t v112 = &v67[16 * v69];
        uint64_t v113 = *((void *)v112 + 1);
        sub_100125078(*v138 + *(void *)(v131 + 72) * *(void *)v110, *v138 + *(void *)(v131 + 72) * *(void *)v112, *v138 + *(void *)(v131 + 72) * v113, v130);
        if (v2) {
          goto LABEL_116;
        }
        if (v113 < v111) {
          goto LABEL_119;
        }
        if (v69 > *((void *)v109 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v110 = v111;
        *(void *)&v67[16 * v108 + 8] = v113;
        unint64_t v114 = *((void *)v109 + 2);
        if (v69 >= v114) {
          goto LABEL_121;
        }
        uint64_t v18 = v109;
        unint64_t v20 = v114 - 1;
        memmove(&v67[16 * v69], v112 + 16, 16 * (v114 - 1 - v69));
        *((void *)v109 + 2) = v114 - 1;
        if (v114 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    Swift::Int v19 = v137;
    a1 = v138;
    Swift::Int v12 = v138[1];
    if (v137 >= v12) {
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100124AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v29 = a1;
  uint64_t v30 = type metadata accessor for TargetTracks.TimePoint(0);
  uint64_t v7 = *(void *)(v30 - 8);
  uint64_t v8 = __chkstk_darwin(v30);
  uint64_t v36 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v32 = (uint64_t)&v27 - v11;
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v31 = (uint64_t)&v27 - v13;
  uint64_t v35 = a3;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    type metadata accessor for Date();
    uint64_t v14 = *(void *)(v7 + 72);
    uint64_t v38 = v14 * (v35 - 1);
    uint64_t v33 = v14;
    uint64_t v15 = v14 * v35;
    Swift::Int v37 = a4;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v29;
    uint64_t v34 = v15;
    while (1)
    {
      uint64_t v18 = *v37;
      uint64_t v19 = v15 + v16 + *v37;
      uint64_t v20 = v31;
      sub_1001286D8(v19, v31, type metadata accessor for TargetTracks.TimePoint);
      uint64_t v21 = v32;
      sub_1001286D8(v38 + v16 + v18, v32, type metadata accessor for TargetTracks.TimePoint);
      sub_100120CAC((unint64_t *)&qword_100388198, (void (*)(uint64_t))&type metadata accessor for Date);
      char v22 = dispatch thunk of static Comparable.< infix(_:_:)();
      sub_10011AAAC(v21, type metadata accessor for TargetTracks.TimePoint);
      uint64_t v23 = v20;
      uint64_t v15 = v34;
      uint64_t v24 = v37;
      uint64_t result = sub_10011AAAC(v23, type metadata accessor for TargetTracks.TimePoint);
      if (v22)
      {
LABEL_4:
        v38 += v33;
        v15 += v33;
        if (++v35 == v28) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v25 = *v24;
      if (!*v24) {
        break;
      }
      uint64_t v26 = v25 + v38 + v16;
      sub_1001285C4(v25 + v15 + v16, v36, type metadata accessor for TargetTracks.TimePoint);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001285C4(v36, v26, type metadata accessor for TargetTracks.TimePoint);
      v16 -= v33;
      if (v35 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100124DC0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v26 = __src;
  uint64_t v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v16 = &v4[24 * v11];
      uint64_t v24 = v16;
      uint64_t v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v17 = a3 - 24;
        uint64_t v18 = v6;
        while (1)
        {
          uint64_t v19 = (char *)(v17 + 24);
          uint64_t v20 = *((void *)v18 - 3);
          v18 -= 24;
          if (v20 >= *((void *)v16 - 3))
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              long long v22 = *(_OWORD *)v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v17 = v22;
            }
            uint64_t v26 = v18;
            if (v18 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v24 = v16 - 24;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              long long v21 = *(_OWORD *)(v16 - 24);
              *(void *)(v17 + 16) = *((void *)v16 - 1);
              *(_OWORD *)unint64_t v17 = v21;
            }
            uint64_t v18 = v6;
            v16 -= 24;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          v17 -= 24;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    Swift::Int v12 = &v4[24 * v9];
    uint64_t v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(void *)v4 >= *(void *)v6)
        {
          uint64_t v14 = v6 + 24;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            long long v15 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }
        }
        else
        {
          if (v7 != v4)
          {
            long long v13 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v13;
          }
          v4 += 24;
          uint64_t v25 = v4;
          uint64_t v14 = v6;
        }
        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      uint64_t v26 = v7;
    }
LABEL_38:
    sub_1001D6B44((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100125078(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for TargetTracks.TimePoint(0);
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v45 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v25 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      unint64_t v43 = a1;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v27 = type metadata accessor for Date();
        unint64_t v41 = a4;
        uint64_t v42 = v27;
        uint64_t v28 = -v13;
        do
        {
          unint64_t v29 = a3 + v28;
          sub_1001286D8(v25 + v28, (uint64_t)v11, type metadata accessor for TargetTracks.TimePoint);
          unint64_t v30 = a2 + v28;
          unint64_t v31 = a3;
          uint64_t v32 = (uint64_t)v11;
          uint64_t v33 = v45;
          sub_1001286D8(a2 + v28, v45, type metadata accessor for TargetTracks.TimePoint);
          sub_100120CAC((unint64_t *)&qword_100388198, (void (*)(uint64_t))&type metadata accessor for Date);
          char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v35 = v33;
          uint64_t v11 = (char *)v32;
          sub_10011AAAC(v35, type metadata accessor for TargetTracks.TimePoint);
          sub_10011AAAC(v32, type metadata accessor for TargetTracks.TimePoint);
          if (v34)
          {
            unint64_t v36 = v46;
            v46 += v28;
            if (v31 < v36 || v29 >= v36)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v31 != v36)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v30 = a2;
            unint64_t v38 = v41;
          }
          else
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v38 = v41;
            }
            else
            {
              BOOL v37 = v31 == a2;
              unint64_t v38 = v41;
              if (!v37) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v48 += v28;
          }
          unint64_t v25 = v46;
          if (v46 <= v38) {
            break;
          }
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v43);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v43 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      type metadata accessor for Date();
      do
      {
        sub_1001286D8(a2, (uint64_t)v11, type metadata accessor for TargetTracks.TimePoint);
        uint64_t v20 = v45;
        sub_1001286D8(a4, v45, type metadata accessor for TargetTracks.TimePoint);
        sub_100120CAC((unint64_t *)&qword_100388198, (void (*)(uint64_t))&type metadata accessor for Date);
        char v21 = dispatch thunk of static Comparable.< infix(_:_:)();
        sub_10011AAAC(v20, type metadata accessor for TargetTracks.TimePoint);
        sub_10011AAAC((uint64_t)v11, type metadata accessor for TargetTracks.TimePoint);
        unint64_t v22 = v48;
        if (v21)
        {
          unint64_t v23 = v47 + v13;
          if (v48 < v47 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v47 = v23;
          unint64_t v24 = a2;
        }
        else
        {
          unint64_t v24 = a2 + v13;
          if (v48 < a2 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 == a2)
          {
            unint64_t v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_60:
    sub_1001D6C14(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100125618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100004010(&qword_100380418);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v25 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v26 = type metadata accessor for ServiceOutages.Outage(0);
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  int64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v15 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v15);
  if (v15)
  {
    uint64_t v16 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v17 = *(void *)(v12 + 72);
    uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    unint64_t v23 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v24 = v17;
    unint64_t v22 = (void (**)(char *, uint64_t))(v4 + 8);
    do
    {
      sub_1001286D8(v16, (uint64_t)v14, type metadata accessor for ServiceOutages.Outage);
      sub_10000D2A0((uint64_t)v14, (uint64_t)v11, &qword_100380418);
      uint64_t v19 = *v18;
      if ((*v18)(v11, 1, v3) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        (*v23)(v6, v11, v3);
        Hasher._combine(_:)(1u);
        sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
        dispatch thunk of Hashable.hash(into:)();
        (*v22)(v6, v3);
      }
      uint64_t v20 = v25;
      sub_10000D2A0((uint64_t)&v14[*(int *)(v26 + 20)], v25, &qword_100380418);
      if (v19((char *)v20, 1, v3) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        (*v23)(v6, (char *)v20, v3);
        Hasher._combine(_:)(1u);
        sub_100120CAC(&qword_100388160, (void (*)(uint64_t))&type metadata accessor for Date);
        dispatch thunk of Hashable.hash(into:)();
        (*v22)(v6, v3);
      }
      sub_10011AAAC((uint64_t)v14, type metadata accessor for ServiceOutages.Outage);
      v16 += v24;
      --v15;
    }
    while (v15);
  }
}

uint64_t sub_100125A00(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000A350C(&qword_1003881D8, &qword_1003881D0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100004010(&qword_1003881D0);
          uint64_t v12 = sub_100125C10(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for TryOutTranscriptItem(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_100125C10(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100125CC0(v6, a2, a3);
  return sub_100125C78;
}

void sub_100125C78(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100125CC0(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for SessionTrailingView;
  }
  __break(1u);
  return result;
}

uint64_t sub_100125D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (!a3) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_bridgeObjectRetain();
    char v8 = sub_100122F88(v7, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else if (a3)
  {
    return 0;
  }
  if (a2)
  {
    if (a4 && (sub_10020D384(a2, a4) & 1) != 0) {
      return 1;
    }
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

BOOL sub_100125DE4(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  char v3 = *(unsigned char *)(a2 + 40);
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      char v3 = 1;
    }
    return (v3 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 40) & 1) != 0;
}

BOOL sub_100125E60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for TransmissionProgress(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100004010(&qword_100388168);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_10037F158);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v36 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v36 - v18;
  if (*a1 != *a2) {
    return 0;
  }
  int v20 = a1[1];
  int v21 = a2[1];
  if (v20 == 2)
  {
    if (v21 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    BOOL v23 = (v20 & 1) == 0;
    if (v21 == 2 || ((v23 ^ v21) & 1) == 0) {
      return result;
    }
  }
  int v24 = a1[2];
  int v25 = a2[2];
  if (v24 == 2)
  {
    if (v25 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    BOOL v26 = (v24 & 1) == 0;
    if (v25 == 2 || ((v26 ^ v25) & 1) == 0) {
      return result;
    }
  }
  int v27 = a1[3];
  int v28 = a2[3];
  if (v27 == 4)
  {
    if (v28 != 4) {
      return 0;
    }
LABEL_17:
    uint64_t v29 = type metadata accessor for LinkState(0);
    uint64_t v37 = v5;
    uint64_t v30 = v29;
    sub_10000D2A0((uint64_t)&a1[*(int *)(v29 + 32)], (uint64_t)v19, &qword_10037F158);
    uint64_t v31 = *(int *)(v30 + 32);
    uint64_t v32 = v37;
    sub_10000D2A0((uint64_t)&a2[v31], (uint64_t)v17, &qword_10037F158);
    uint64_t v33 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10000D2A0((uint64_t)v19, (uint64_t)v10, &qword_10037F158);
    sub_10000D2A0((uint64_t)v17, v33, &qword_10037F158);
    char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
    if (v34((uint64_t)v10, 1, v4) == 1)
    {
      sub_10000950C((uint64_t)v17, &qword_10037F158);
      sub_10000950C((uint64_t)v19, &qword_10037F158);
      if (v34(v33, 1, v4) == 1)
      {
        sub_10000950C((uint64_t)v10, &qword_10037F158);
        return 1;
      }
    }
    else
    {
      sub_10000D2A0((uint64_t)v10, (uint64_t)v14, &qword_10037F158);
      if (v34(v33, 1, v4) != 1)
      {
        sub_1001285C4(v33, (uint64_t)v7, type metadata accessor for TransmissionProgress);
        char v35 = sub_100127A64(v14, v7);
        sub_10011AAAC((uint64_t)v7, type metadata accessor for TransmissionProgress);
        sub_10000950C((uint64_t)v17, &qword_10037F158);
        sub_10000950C((uint64_t)v19, &qword_10037F158);
        sub_10011AAAC((uint64_t)v14, type metadata accessor for TransmissionProgress);
        sub_10000950C((uint64_t)v10, &qword_10037F158);
        return (v35 & 1) != 0;
      }
      sub_10000950C((uint64_t)v17, &qword_10037F158);
      sub_10000950C((uint64_t)v19, &qword_10037F158);
      sub_10011AAAC((uint64_t)v14, type metadata accessor for TransmissionProgress);
    }
    sub_10000950C((uint64_t)v10, &qword_100388168);
    return 0;
  }
  BOOL result = 0;
  if (v28 != 4 && v27 == v28) {
    goto LABEL_17;
  }
  return result;
}

BOOL sub_1001262AC(uint64_t a1, uint64_t a2)
{
  uint64_t v170 = type metadata accessor for ConnectionClosed(0);
  uint64_t v167 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v164 = (unsigned __int8 *)&v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = sub_100004010(&qword_100388170);
  __chkstk_darwin(v166);
  uint64_t v171 = (uint64_t)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100004010(&qword_100380780);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v165 = (unsigned __int8 *)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v168 = (uint64_t)&v161 - v10;
  __chkstk_darwin(v9);
  uint64_t v169 = (uint64_t)&v161 - v11;
  uint64_t v175 = type metadata accessor for LinkState(0);
  uint64_t v179 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v172 = (unsigned __int8 *)&v161 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_100004010(&qword_100388178);
  __chkstk_darwin(v174);
  uint64_t v180 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100004010((uint64_t *)&unk_100383910);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v187 = (unsigned __int8 *)&v161 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v176 = (uint64_t)&v161 - v18;
  __chkstk_darwin(v17);
  uint64_t v177 = (uint64_t)&v161 - v19;
  uint64_t v183 = type metadata accessor for SilencePeriod(0);
  uint64_t v186 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v173 = (uint64_t)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = sub_100004010(&qword_100388180);
  __chkstk_darwin(v181);
  uint64_t v182 = (uint64_t)&v161 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100004010(&qword_100387FA8);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v178 = (uint64_t)&v161 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v184 = (uint64_t)&v161 - v26;
  __chkstk_darwin(v25);
  uint64_t v185 = (uint64_t)&v161 - v27;
  uint64_t v28 = type metadata accessor for ServiceOutages(0);
  uint64_t v188 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v161 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100004010(&qword_100388188);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v161 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100004010(&qword_100387FA0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v37 = (char *)&v161 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v161 - v39;
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v161 - v41;
  char v43 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v43 = 1;
    }
    if (v43) {
      return 0;
    }
    uint64_t v163 = a1;
    if ((static Angle.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
    if ((static Angle.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
    if ((static Angle.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
    char v64 = static Angle.== infix(_:_:)();
    a1 = v163;
    if ((v64 & 1) == 0) {
      return 0;
    }
  }
  int v44 = *(unsigned __int8 *)(a1 + 41);
  int v45 = *(unsigned __int8 *)(a2 + 41);
  if (v44 == 4)
  {
    if (v45 != 4) {
      return 0;
    }
  }
  else
  {
    if (v45 == 4) {
      return 0;
    }
    if (v44 == 3)
    {
      if (v45 != 3) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      if (v45 == 3 || v44 != v45) {
        return result;
      }
    }
  }
  char v46 = *(unsigned char *)(a2 + 43);
  if (*(unsigned char *)(a1 + 43)) {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 43)) {
    return 0;
  }
  char v46 = *(unsigned char *)(a2 + 42);
  if (*(unsigned char *)(a1 + 42))
  {
LABEL_6:
    if ((v46 & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 42))
  {
    return 0;
  }
  uint64_t v162 = a2;
  uint64_t v47 = type metadata accessor for ConnectionAssistantState(0);
  uint64_t v48 = *(int *)(v47 + 28);
  uint64_t v163 = a1;
  sub_10000D2A0(a1 + v48, (uint64_t)v42, &qword_100387FA0);
  uint64_t v161 = (int *)v47;
  sub_10000D2A0(v162 + *(int *)(v47 + 28), (uint64_t)v40, &qword_100387FA0);
  uint64_t v49 = (uint64_t)&v33[*(int *)(v31 + 48)];
  sub_10000D2A0((uint64_t)v42, (uint64_t)v33, &qword_100387FA0);
  sub_10000D2A0((uint64_t)v40, v49, &qword_100387FA0);
  unint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
  if (v50((uint64_t)v33, 1, v28) == 1)
  {
    sub_10000950C((uint64_t)v40, &qword_100387FA0);
    sub_10000950C((uint64_t)v42, &qword_100387FA0);
    int v51 = v50(v49, 1, v28);
    uint64_t v53 = v186;
    Swift::Int v52 = v187;
    if (v51 == 1)
    {
      sub_10000950C((uint64_t)v33, &qword_100387FA0);
      goto LABEL_10;
    }
LABEL_34:
    uint64_t v67 = &qword_100388188;
    uint64_t v68 = (uint64_t)v33;
    goto LABEL_52;
  }
  sub_10000D2A0((uint64_t)v33, (uint64_t)v37, &qword_100387FA0);
  uint64_t v188 = v49;
  int v66 = v50(v49, 1, v28);
  uint64_t v53 = v186;
  Swift::Int v52 = v187;
  if (v66 == 1)
  {
    sub_10000950C((uint64_t)v40, &qword_100387FA0);
    sub_10000950C((uint64_t)v42, &qword_100387FA0);
    sub_10011AAAC((uint64_t)v37, type metadata accessor for ServiceOutages);
    goto LABEL_34;
  }
  sub_1001285C4(v188, (uint64_t)v30, type metadata accessor for ServiceOutages);
  if ((static Date.== infix(_:_:)() & 1) == 0 || (static Date.== infix(_:_:)() & 1) == 0)
  {
    sub_10011AAAC((uint64_t)v30, type metadata accessor for ServiceOutages);
    sub_10000950C((uint64_t)v40, &qword_100387FA0);
    sub_10000950C((uint64_t)v42, &qword_100387FA0);
    sub_10011AAAC((uint64_t)v37, type metadata accessor for ServiceOutages);
    uint64_t v68 = (uint64_t)v33;
    uint64_t v67 = &qword_100387FA0;
    goto LABEL_52;
  }
  char v69 = sub_100231FBC(*(void *)&v37[*(int *)(v28 + 24)], *(void *)&v30[*(int *)(v28 + 24)]);
  sub_10011AAAC((uint64_t)v30, type metadata accessor for ServiceOutages);
  sub_10000950C((uint64_t)v40, &qword_100387FA0);
  sub_10000950C((uint64_t)v42, &qword_100387FA0);
  sub_10011AAAC((uint64_t)v37, type metadata accessor for ServiceOutages);
  sub_10000950C((uint64_t)v33, &qword_100387FA0);
  if ((v69 & 1) == 0) {
    return 0;
  }
LABEL_10:
  uint64_t v54 = v161;
  uint64_t v55 = v185;
  sub_10000D2A0(v163 + v161[8], v185, &qword_100387FA8);
  uint64_t v56 = v184;
  sub_10000D2A0(v162 + v54[8], v184, &qword_100387FA8);
  uint64_t v57 = v182;
  uint64_t v58 = v182 + *(int *)(v181 + 48);
  sub_10000D2A0(v55, v182, &qword_100387FA8);
  sub_10000D2A0(v56, v58, &qword_100387FA8);
  uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  uint64_t v60 = v183;
  if (v59(v57, 1, v183) == 1)
  {
    sub_10000950C(v56, &qword_100387FA8);
    sub_10000950C(v55, &qword_100387FA8);
    int v61 = v59(v58, 1, v60);
    uint64_t v63 = v179;
    uint64_t v62 = (uint64_t)v180;
    if (v61 == 1)
    {
      sub_10000950C(v57, &qword_100387FA8);
      goto LABEL_45;
    }
LABEL_42:
    uint64_t v67 = &qword_100388180;
    uint64_t v68 = v57;
    goto LABEL_52;
  }
  uint64_t v70 = v178;
  sub_10000D2A0(v57, v178, &qword_100387FA8);
  int v71 = v59(v58, 1, v60);
  uint64_t v63 = v179;
  uint64_t v62 = (uint64_t)v180;
  if (v71 == 1)
  {
    sub_10000950C(v184, &qword_100387FA8);
    sub_10000950C(v185, &qword_100387FA8);
    sub_10011AAAC(v70, type metadata accessor for SilencePeriod);
    goto LABEL_42;
  }
  uint64_t v72 = v173;
  sub_1001285C4(v58, v173, type metadata accessor for SilencePeriod);
  if ((static Date.== infix(_:_:)() & 1) == 0)
  {
    sub_10011AAAC(v72, type metadata accessor for SilencePeriod);
    sub_10000950C(v184, &qword_100387FA8);
    sub_10000950C(v185, &qword_100387FA8);
    sub_10011AAAC(v70, type metadata accessor for SilencePeriod);
    uint64_t v68 = v57;
    uint64_t v67 = &qword_100387FA8;
    goto LABEL_52;
  }
  char v73 = static Date.== infix(_:_:)();
  sub_10011AAAC(v72, type metadata accessor for SilencePeriod);
  sub_10000950C(v184, &qword_100387FA8);
  sub_10000950C(v185, &qword_100387FA8);
  sub_10011AAAC(v70, type metadata accessor for SilencePeriod);
  sub_10000950C(v57, &qword_100387FA8);
  if ((v73 & 1) == 0) {
    return 0;
  }
LABEL_45:
  uint64_t v74 = v161;
  uint64_t v75 = v163;
  uint64_t v76 = v177;
  sub_10000D2A0(v163 + v161[9], v177, (uint64_t *)&unk_100383910);
  uint64_t v77 = v176;
  sub_10000D2A0(v162 + v74[9], v176, (uint64_t *)&unk_100383910);
  uint64_t v78 = v62 + *(int *)(v174 + 48);
  sub_10000D2A0(v76, v62, (uint64_t *)&unk_100383910);
  sub_10000D2A0(v77, v78, (uint64_t *)&unk_100383910);
  uint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  uint64_t v80 = v175;
  if (v79(v62, 1, v175) == 1)
  {
    sub_10000950C(v77, (uint64_t *)&unk_100383910);
    sub_10000950C(v76, (uint64_t *)&unk_100383910);
    if (v79(v78, 1, v80) == 1)
    {
      sub_10000950C(v62, (uint64_t *)&unk_100383910);
      goto LABEL_56;
    }
LABEL_50:
    uint64_t v67 = &qword_100388178;
    uint64_t v68 = v62;
    goto LABEL_52;
  }
  sub_10000D2A0(v62, (uint64_t)v52, (uint64_t *)&unk_100383910);
  if (v79(v78, 1, v80) == 1)
  {
    sub_10000950C(v176, (uint64_t *)&unk_100383910);
    sub_10000950C(v177, (uint64_t *)&unk_100383910);
    sub_10011AAAC((uint64_t)v52, type metadata accessor for LinkState);
    goto LABEL_50;
  }
  unint64_t v81 = v172;
  sub_1001285C4(v78, (uint64_t)v172, type metadata accessor for LinkState);
  BOOL v82 = sub_100125E60(v52, v81);
  sub_10011AAAC((uint64_t)v81, type metadata accessor for LinkState);
  sub_10000950C(v176, (uint64_t *)&unk_100383910);
  sub_10000950C(v177, (uint64_t *)&unk_100383910);
  sub_10011AAAC((uint64_t)v52, type metadata accessor for LinkState);
  sub_10000950C(v62, (uint64_t *)&unk_100383910);
  if (!v82) {
    return 0;
  }
LABEL_56:
  uint64_t v83 = v162;
  uint64_t v84 = v161[10];
  uint64_t v85 = v75 + v84;
  uint64_t v86 = *(unsigned __int8 *)(v75 + v84 + 16);
  uint64_t v87 = v162 + v84;
  uint64_t v88 = *(unsigned __int8 *)(v87 + 16);
  if (v86 == 2)
  {
    if (v88 != 2) {
      return 0;
    }
  }
  else
  {
    if (v88 == 2) {
      return 0;
    }
    uint64_t v94 = *(void *)(v85 + 8);
    uint64_t v95 = *(void *)(v85 + 24);
    char v96 = *(unsigned char *)(v85 + 32);
    uint64_t v97 = *(void *)(v87 + 8);
    uint64_t v98 = *(void *)(v87 + 24);
    BOOL v99 = (v86 & 1) == 0;
    char v100 = *(unsigned char *)(v87 + 32);
    char v101 = sub_10028AA74(*(void *)v85, *(void *)v87);
    BOOL result = 0;
    if ((v101 & 1) == 0) {
      return result;
    }
    uint64_t v83 = v162;
    if (v94 != v97) {
      return result;
    }
    uint64_t v75 = v163;
    if (((v99 ^ v88) & 1) == 0) {
      return result;
    }
    if (v96)
    {
      if ((v100 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      if ((v100 & 1) != 0 || v95 != v98) {
        return result;
      }
    }
  }
  uint64_t v89 = v161[11];
  BOOL v90 = (uint64_t *)(v75 + v89);
  uint64_t v91 = *(unsigned __int8 *)(v75 + v89 + 8);
  char v92 = (uint64_t *)(v83 + v89);
  uint64_t v93 = *(unsigned __int8 *)(v83 + v89 + 8);
  if (v91 == 2)
  {
    if (v93 != 2) {
      return 0;
    }
  }
  else
  {
    if (v93 == 2) {
      return 0;
    }
    uint64_t v102 = *v90;
    uint64_t v103 = v90[2];
    uint64_t v104 = v90[3];
    uint64_t v105 = v90[4];
    char v106 = *((unsigned char *)v90 + 40);
    uint64_t v107 = *v92;
    uint64_t v109 = v92[2];
    uint64_t v108 = v92[3];
    uint64_t v110 = v92[4];
    char v111 = *((unsigned char *)v92 + 40);
    uint64_t v222 = v102;
    char v223 = v91 & 1;
    uint64_t v224 = v103;
    char v225 = v104 & 1;
    uint64_t v226 = v105;
    char v227 = v106 & 1;
    uint64_t v228 = v107;
    char v229 = v93 & 1;
    uint64_t v230 = v109;
    char v231 = v108 & 1;
    uint64_t v232 = v110;
    char v233 = v111 & 1;
    BOOL v112 = sub_100125DE4((uint64_t)&v222, (uint64_t)&v228);
    uint64_t v83 = v162;
    if (!v112) {
      return 0;
    }
  }
  uint64_t v113 = v161[12];
  unint64_t v114 = (void *)(v75 + v113);
  uint64_t v115 = *(void *)(v75 + v113 + 8);
  unint64_t v116 = (void *)(v83 + v113);
  uint64_t v117 = v116[1];
  if (!v115)
  {
    if (v117) {
      return 0;
    }
LABEL_80:
    uint64_t v120 = v161[13];
    uint64_t v121 = v75 + v120;
    uint64_t v122 = *(void *)(v75 + v120);
    uint64_t v123 = (uint64_t *)(v83 + v120);
    uint64_t v124 = *v123;
    if (v122 == 1)
    {
      if (v124 != 1) {
        return 0;
      }
    }
    else
    {
      if (v124 == 1) {
        return 0;
      }
      uint64_t v125 = *(void *)(v121 + 8);
      uint64_t v126 = v123[1];
      sub_10012862C(v122);
      sub_10012862C(v122);
      sub_10012862C(v124);
      char v127 = sub_100125D40(v122, v125, v124, v126);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100128674(v122);
      if ((v127 & 1) == 0) {
        return 0;
      }
    }
    uint64_t v128 = v161;
    uint64_t v129 = v169;
    sub_10000D2A0(v163 + v161[14], v169, &qword_100380780);
    uint64_t v130 = v168;
    sub_10000D2A0(v162 + v128[14], v168, &qword_100380780);
    uint64_t v131 = v171;
    uint64_t v132 = v171 + *(int *)(v166 + 48);
    sub_10000D2A0(v129, v171, &qword_100380780);
    sub_10000D2A0(v130, v132, &qword_100380780);
    uint64_t v133 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48);
    if (v133(v131, 1, v170) == 1)
    {
      sub_10000950C(v168, &qword_100380780);
      sub_10000950C(v169, &qword_100380780);
      if (v133(v132, 1, v170) == 1)
      {
        sub_10000950C(v171, &qword_100380780);
LABEL_92:
        uint64_t v137 = v161[15];
        uint64_t v138 = *(void *)(v163 + v137);
        uint64_t v139 = *(void *)(v163 + v137 + 8);
        uint64_t v141 = *(void *)(v163 + v137 + 16);
        Swift::Int v140 = *(unsigned __int8 **)(v163 + v137 + 24);
        uint64_t v142 = *(void *)(v163 + v137 + 32);
        uint64_t v143 = *(void *)(v163 + v137 + 40);
        uint64_t v145 = *(void *)(v163 + v137 + 48);
        uint64_t v144 = *(void *)(v163 + v137 + 56);
        uint64_t v147 = *(void *)(v163 + v137 + 64);
        uint64_t v146 = *(void *)(v163 + v137 + 72);
        uint64_t v148 = *(void *)(v163 + v137 + 80);
        uint64_t v149 = v162 + v137;
        uint64_t v150 = *(void *)(v162 + v137);
        uint64_t v151 = *(void *)(v162 + v137 + 8);
        uint64_t v152 = *(void *)(v162 + v137 + 16);
        uint64_t v153 = *(unsigned __int8 **)(v162 + v137 + 24);
        uint64_t v154 = *(void *)(v162 + v137 + 32);
        uint64_t v155 = *(void *)(v162 + v137 + 40);
        uint64_t v156 = *(void *)(v162 + v137 + 48);
        uint64_t v157 = *(void *)(v162 + v137 + 56);
        uint64_t v158 = *(void *)(v162 + v137 + 64);
        uint64_t v159 = *(void *)(v149 + 72);
        uint64_t v160 = *(void *)(v149 + 80);
        if (v139)
        {
          if (v151)
          {
            v211[0] = v138;
            uint64_t v212 = v139;
            __int16 v213 = v141 & 0xFF01;
            long long v214 = v140;
            uint64_t v215 = v142;
            uint64_t v216 = v143;
            uint64_t v217 = v145;
            uint64_t v218 = v144;
            __int16 v219 = v147;
            uint64_t v220 = v146;
            uint64_t v221 = v148;
            LOBYTE(v189) = v150;
            uint64_t v190 = v151;
            LOWORD(v191) = v152 & 0xFF01;
            uint64_t v192 = v153;
            uint64_t v193 = v154;
            uint64_t v194 = v155;
            uint64_t v195 = v156;
            uint64_t v196 = v157;
            LOWORD(v197) = v158;
            uint64_t v198 = v159;
            uint64_t v199 = v160;
            return sub_1000205F0((uint64_t)v211, (uint64_t)&v189);
          }
        }
        else if (!v151)
        {
          return 1;
        }
        uint64_t v189 = v138;
        uint64_t v190 = v139;
        uint64_t v191 = v141;
        uint64_t v192 = v140;
        uint64_t v187 = v140;
        uint64_t v188 = v142;
        uint64_t v193 = v142;
        uint64_t v194 = v143;
        uint64_t v195 = v145;
        uint64_t v196 = v144;
        uint64_t v197 = v147;
        uint64_t v198 = v146;
        uint64_t v199 = v148;
        uint64_t v200 = v150;
        uint64_t v201 = v151;
        uint64_t v202 = v152;
        __int16 v203 = v153;
        uint64_t v204 = v154;
        uint64_t v205 = v155;
        uint64_t v206 = v156;
        uint64_t v207 = v157;
        uint64_t v208 = v158;
        uint64_t v209 = v159;
        uint64_t v210 = v160;
        sub_100094728(v150, v151);
        sub_100094728(v138, v139);
        sub_100094668(&v189);
        return 0;
      }
    }
    else
    {
      sub_10000D2A0(v171, (uint64_t)v165, &qword_100380780);
      if (v133(v132, 1, v170) != 1)
      {
        uint64_t v134 = v164;
        sub_1001285C4(v132, (uint64_t)v164, type metadata accessor for ConnectionClosed);
        uint64_t v135 = v165;
        char v136 = sub_100127630(v165, v134);
        sub_10011AAAC((uint64_t)v134, type metadata accessor for ConnectionClosed);
        sub_10000950C(v168, &qword_100380780);
        sub_10000950C(v169, &qword_100380780);
        sub_10011AAAC((uint64_t)v135, type metadata accessor for ConnectionClosed);
        sub_10000950C(v171, &qword_100380780);
        if ((v136 & 1) == 0) {
          return 0;
        }
        goto LABEL_92;
      }
      sub_10000950C(v168, &qword_100380780);
      sub_10000950C(v169, &qword_100380780);
      sub_10011AAAC((uint64_t)v165, type metadata accessor for ConnectionClosed);
    }
    uint64_t v67 = &qword_100388170;
    uint64_t v68 = v171;
LABEL_52:
    sub_10000950C(v68, v67);
    return 0;
  }
  if (!v117) {
    return 0;
  }
  if (*v114 == *v116 && v115 == v117) {
    goto LABEL_80;
  }
  char v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v83 = v162;
  char v119 = v118;
  BOOL result = 0;
  if (v119) {
    goto LABEL_80;
  }
  return result;
}

uint64_t sub_100127630(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004010(&qword_100388158);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_100380418);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v35 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  int v20 = *a1;
  int v21 = *a2;
  if (v20 == 12)
  {
    if (v21 != 12) {
      goto LABEL_14;
    }
LABEL_6:
    uint64_t v35 = v7;
    uint64_t v23 = v5;
    uint64_t v24 = type metadata accessor for ConnectionClosed(0);
    uint64_t v25 = *(int *)(v24 + 20);
    uint64_t v37 = a1;
    sub_10000D2A0((uint64_t)&a1[v25], (uint64_t)v19, &qword_100380418);
    uint64_t v36 = v24;
    uint64_t v26 = *(int *)(v24 + 20);
    uint64_t v27 = v23;
    uint64_t v38 = a2;
    sub_10000D2A0((uint64_t)&a2[v26], (uint64_t)v17, &qword_100380418);
    uint64_t v28 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10000D2A0((uint64_t)v19, (uint64_t)v10, &qword_100380418);
    sub_10000D2A0((uint64_t)v17, v28, &qword_100380418);
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v29((uint64_t)v10, 1, v4) == 1)
    {
      sub_10000950C((uint64_t)v17, &qword_100380418);
      sub_10000950C((uint64_t)v19, &qword_100380418);
      if (v29(v28, 1, v4) == 1)
      {
        sub_10000950C((uint64_t)v10, &qword_100380418);
LABEL_13:
        char v22 = sub_10020D19C(*(void *)&v37[*(int *)(v36 + 24)], *(void *)&v38[*(int *)(v36 + 24)]);
        return v22 & 1;
      }
    }
    else
    {
      sub_10000D2A0((uint64_t)v10, (uint64_t)v14, &qword_100380418);
      if (v29(v28, 1, v4) != 1)
      {
        uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
        uint64_t v31 = v35;
        v30(v35, v28, v4);
        sub_100120CAC(&qword_100386BF0, (void (*)(uint64_t))&type metadata accessor for Date);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *(void (**)(char *, uint64_t))(v27 + 8);
        v33(v31, v4);
        sub_10000950C((uint64_t)v17, &qword_100380418);
        sub_10000950C((uint64_t)v19, &qword_100380418);
        v33(v14, v4);
        sub_10000950C((uint64_t)v10, &qword_100380418);
        if (v32) {
          goto LABEL_13;
        }
LABEL_14:
        char v22 = 0;
        return v22 & 1;
      }
      sub_10000950C((uint64_t)v17, &qword_100380418);
      sub_10000950C((uint64_t)v19, &qword_100380418);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v4);
    }
    sub_10000950C((uint64_t)v10, &qword_100388158);
    goto LABEL_14;
  }
  char v22 = 0;
  if (v21 != 12 && v20 == v21) {
    goto LABEL_6;
  }
  return v22 & 1;
}

uint64_t sub_100127A64(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100004010(&qword_100388158);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100004010(&qword_100380418);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v40 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = a1[1];
  uint64_t v21 = a2[1];
  if (!v20)
  {
    if (v21) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v21) {
    return 0;
  }
  if (*a1 == *a2 && v20 == v21 || (char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v22 & 1) != 0))
  {
LABEL_8:
    uint64_t v40 = v7;
    uint64_t v24 = type metadata accessor for TransmissionProgress(0);
    uint64_t v25 = *(int *)(v24 + 20);
    uint64_t v42 = a1;
    sub_10000D2A0((uint64_t)a1 + v25, (uint64_t)v19, &qword_100380418);
    uint64_t v41 = (int *)v24;
    uint64_t v26 = *(int *)(v24 + 20);
    char v43 = a2;
    sub_10000D2A0((uint64_t)a2 + v26, (uint64_t)v17, &qword_100380418);
    uint64_t v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10000D2A0((uint64_t)v19, (uint64_t)v10, &qword_100380418);
    sub_10000D2A0((uint64_t)v17, v27, &qword_100380418);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v28((uint64_t)v10, 1, v4) == 1)
    {
      sub_10000950C((uint64_t)v17, &qword_100380418);
      sub_10000950C((uint64_t)v19, &qword_100380418);
      if (v28(v27, 1, v4) == 1)
      {
        sub_10000950C((uint64_t)v10, &qword_100380418);
LABEL_15:
        uint64_t v32 = v41[6];
        uint64_t v33 = (void *)((char *)v42 + v32);
        char v34 = *((unsigned char *)v42 + v32 + 8);
        uint64_t v35 = (void *)((char *)v43 + v32);
        int v36 = *((unsigned __int8 *)v43 + v32 + 8);
        if (v34)
        {
          if (!v36) {
            return 0;
          }
        }
        else
        {
          if (*v33 != *v35) {
            LOBYTE(v36) = 1;
          }
          if (v36) {
            return 0;
          }
        }
        if (*(void *)((char *)v42 + v41[7]) == *(void *)((char *)v43 + v41[7]))
        {
          uint64_t v37 = v41[8];
          int v38 = *((unsigned __int8 *)v42 + v37);
          int v39 = *((unsigned __int8 *)v43 + v37);
          if (v38 == 7)
          {
            if (v39 != 7) {
              return 0;
            }
          }
          else if (v39 == 7 || v38 != v39)
          {
            return 0;
          }
          return 1;
        }
        return 0;
      }
    }
    else
    {
      sub_10000D2A0((uint64_t)v10, (uint64_t)v14, &qword_100380418);
      if (v28(v27, 1, v4) != 1)
      {
        uint64_t v29 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v40, v27, v4);
        sub_100120CAC(&qword_100386BF0, (void (*)(uint64_t))&type metadata accessor for Date);
        char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
        v31(v29, v4);
        sub_10000950C((uint64_t)v17, &qword_100380418);
        sub_10000950C((uint64_t)v19, &qword_100380418);
        v31(v14, v4);
        sub_10000950C((uint64_t)v10, &qword_100380418);
        if ((v30 & 1) == 0) {
          return 0;
        }
        goto LABEL_15;
      }
      sub_10000950C((uint64_t)v17, &qword_100380418);
      sub_10000950C((uint64_t)v19, &qword_100380418);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    }
    sub_10000950C((uint64_t)v10, &qword_100388158);
    return 0;
  }
  return result;
}

BOOL sub_100127F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v46 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100004010(&qword_100388158);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v53 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v11 = &v44[-v10];
  uint64_t v12 = sub_100004010(&qword_100380418);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v47 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  int v51 = &v44[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::Int v52 = &v44[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = &v44[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = &v44[-v23];
  __chkstk_darwin(v22);
  uint64_t v26 = &v44[-v25];
  uint64_t v49 = a1;
  sub_10000D2A0(a1, (uint64_t)&v44[-v25], &qword_100380418);
  uint64_t v50 = a2;
  sub_10000D2A0(a2, (uint64_t)v24, &qword_100380418);
  uint64_t v48 = v7;
  uint64_t v27 = (uint64_t)&v11[*(int *)(v7 + 48)];
  sub_10000D2A0((uint64_t)v26, (uint64_t)v11, &qword_100380418);
  sub_10000D2A0((uint64_t)v24, v27, &qword_100380418);
  uint64_t v54 = v5;
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v28((uint64_t)v11, 1, v4) != 1)
  {
    sub_10000D2A0((uint64_t)v11, (uint64_t)v21, &qword_100380418);
    if (v28(v27, 1, v4) != 1)
    {
      uint64_t v30 = v54;
      uint64_t v31 = v46;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v54 + 32))(v46, v27, v4);
      sub_100120CAC(&qword_100386BF0, (void (*)(uint64_t))&type metadata accessor for Date);
      int v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v30 + 8);
      v32(v31, v4);
      sub_10000950C((uint64_t)v24, &qword_100380418);
      sub_10000950C((uint64_t)v26, &qword_100380418);
      v32(v21, v4);
      sub_10000950C((uint64_t)v11, &qword_100380418);
      if ((v45 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
    sub_10000950C((uint64_t)v24, &qword_100380418);
    sub_10000950C((uint64_t)v26, &qword_100380418);
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v21, v4);
LABEL_6:
    uint64_t v29 = (uint64_t)v11;
LABEL_14:
    sub_10000950C(v29, &qword_100388158);
    return 0;
  }
  sub_10000950C((uint64_t)v24, &qword_100380418);
  sub_10000950C((uint64_t)v26, &qword_100380418);
  if (v28(v27, 1, v4) != 1) {
    goto LABEL_6;
  }
  sub_10000950C((uint64_t)v11, &qword_100380418);
LABEL_8:
  uint64_t v33 = type metadata accessor for ServiceOutages.Outage(0);
  char v34 = v52;
  sub_10000D2A0(v49 + *(int *)(v33 + 20), (uint64_t)v52, &qword_100380418);
  uint64_t v35 = v51;
  sub_10000D2A0(v50 + *(int *)(v33 + 20), (uint64_t)v51, &qword_100380418);
  int v36 = v53;
  uint64_t v37 = (uint64_t)&v53[*(int *)(v48 + 48)];
  sub_10000D2A0((uint64_t)v34, (uint64_t)v53, &qword_100380418);
  sub_10000D2A0((uint64_t)v35, v37, &qword_100380418);
  if (v28((uint64_t)v36, 1, v4) == 1)
  {
    sub_10000950C((uint64_t)v35, &qword_100380418);
    sub_10000950C((uint64_t)v34, &qword_100380418);
    if (v28(v37, 1, v4) == 1)
    {
      sub_10000950C((uint64_t)v36, &qword_100380418);
      return 1;
    }
    goto LABEL_13;
  }
  sub_10000D2A0((uint64_t)v36, (uint64_t)v47, &qword_100380418);
  if (v28(v37, 1, v4) == 1)
  {
    sub_10000950C((uint64_t)v35, &qword_100380418);
    sub_10000950C((uint64_t)v34, &qword_100380418);
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v47, v4);
LABEL_13:
    uint64_t v29 = (uint64_t)v36;
    goto LABEL_14;
  }
  uint64_t v39 = v54;
  uint64_t v40 = v46;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v54 + 32))(v46, v37, v4);
  sub_100120CAC(&qword_100386BF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v41 = v47;
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v43 = *(void (**)(unsigned char *, uint64_t))(v39 + 8);
  v43(v40, v4);
  sub_10000950C((uint64_t)v35, &qword_100380418);
  sub_10000950C((uint64_t)v34, &qword_100380418);
  v43(v41, v4);
  sub_10000950C((uint64_t)v36, &qword_100380418);
  return (v42 & 1) != 0;
}

uint64_t type metadata accessor for ServiceOutages.Outage(uint64_t a1)
{
  return sub_1000497F4(a1, qword_1003882C8);
}

uint64_t sub_1001285C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012862C(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100128674(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for TargetTracks.TimePoint(uint64_t a1)
{
  return sub_1000497F4(a1, qword_100388238);
}

uint64_t sub_1001286D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100128740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_1003881A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001287A8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001287E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  sub_100112C9C(a1, a2, a3, a4, v6, a5, a6);
}

uint64_t sub_1001287E8(uint64_t a1, uint64_t a2)
{
  return sub_1001143B8(a1, a2);
}

uint64_t sub_1001287F0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_100128828(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = *(char *)(a1 + v5 + 32);
    if ((qword_1002BB048[v7] & (unint64_t)[a2 footnotesToShowMask]) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_1001B2A94(0, v6[2] + 1, 1, v6);
      }
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1) {
        uint64_t v6 = sub_1001B2A94((void *)(v8 > 1), v9 + 1, 1, v6);
      }
      uint64_t v6[2] = v9 + 1;
      *((unsigned char *)v6 + v9 + 32) = v7;
    }
    ++v5;
  }
  while (v2 != v5);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_10012894C()
{
  unint64_t result = qword_100382438;
  if (!qword_100382438)
  {
    sub_10001E6FC(255, (unint64_t *)&qword_100393B80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100382438);
  }
  return result;
}

unsigned char *_s8SOSBuddy16TargetVisibilityV6DegreeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100128A80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransmissionProgress.PayloadClass()
{
  return &type metadata for TransmissionProgress.PayloadClass;
}

ValueMetadata *type metadata accessor for TargetTracks.Target()
{
  return &type metadata for TargetTracks.Target;
}

uint64_t *sub_100128AC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100128B98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100128C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100128C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100128D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100128D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100128E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100128E2C);
}

uint64_t sub_100128E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100128EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100128F00);
}

uint64_t sub_100128F00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100128FBC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionClosed.ExitReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConnectionClosed.ExitReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001291B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionClosed.ExitReason()
{
  return &type metadata for ConnectionClosed.ExitReason;
}

uint64_t *sub_1001291E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = sub_100004010(&qword_100380418);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      uint64_t v15 = sub_100004010(&qword_100380418);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1001293F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_100129524(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100004010(&qword_100380418);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_100004010(&qword_100380418);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_1001296E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100004010(&qword_100380418);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_100004010(&qword_100380418);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *sub_100129960(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100004010(&qword_100380418);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_100004010(&qword_100380418);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_100129B20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100004010(&qword_100380418);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_100004010(&qword_100380418);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t sub_100129D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129DB0);
}

uint64_t sub_100129DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100380418);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100129E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129E34);
}

uint64_t sub_100129E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004010(&qword_100380418);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_100129EA8()
{
  sub_1001154C4(319, (unint64_t *)&unk_100387CF8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for LocationState.LocationAcquisitionStatus(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100129FECLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationState.LocationAcquisitionStatus()
{
  return &type metadata for LocationState.LocationAcquisitionStatus;
}

unsigned char *storeEnumTagSinglePayload for TransmissionProgress.PayloadType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012A0F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransmissionProgress.PayloadType()
{
  return &type metadata for TransmissionProgress.PayloadType;
}

unsigned char *_s8SOSBuddy16TargetVisibilityVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012A1F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkState.Congestion()
{
  return &type metadata for LinkState.Congestion;
}

ValueMetadata *type metadata accessor for TargetPosition()
{
  return &type metadata for TargetPosition;
}

unint64_t sub_10012A240()
{
  unint64_t result = qword_100388300;
  if (!qword_100388300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388300);
  }
  return result;
}

unint64_t sub_10012A298()
{
  unint64_t result = qword_100388308;
  if (!qword_100388308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388308);
  }
  return result;
}

unint64_t sub_10012A2F0()
{
  unint64_t result = qword_100388310;
  if (!qword_100388310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388310);
  }
  return result;
}

uint64_t sub_10012A344()
{
  return sub_100120CAC(&qword_100388318, (void (*)(uint64_t))type metadata accessor for ServiceOutages.Outage);
}

unint64_t sub_10012A390()
{
  unint64_t result = qword_100388320;
  if (!qword_100388320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388320);
  }
  return result;
}

unint64_t sub_10012A3E8()
{
  unint64_t result = qword_100388328;
  if (!qword_100388328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388328);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerTryOutView()
{
  return &type metadata for ExplorerTryOutView;
}

uint64_t sub_10012A44C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10012A468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 56) < 0x4000u)
    {
      swift_getKeyPath();
      swift_getKeyPath();
    }
    sub_100004010(&qword_100388338);
    sub_10012A5D4(&qword_100388340, &qword_100388338, (void (*)(void))sub_10012A5AC);
    uint64_t result = _ConditionalContent<>.init(storage:)();
    *(_OWORD *)a2 = v4;
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v6;
    *(unsigned char *)(a2 + 33) = v7;
  }
  else
  {
    type metadata accessor for TryOutModel();
    sub_10012B27C(&qword_1003827A8, (void (*)(uint64_t))type metadata accessor for TryOutModel);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10012A5A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10012A468(*v1, a1);
}

uint64_t sub_10012A5AC()
{
  return sub_10012A5D4(&qword_100388348, &qword_100388350, (void (*)(void))sub_10012A678);
}

uint64_t sub_10012A5D4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094C4(a2);
    a3();
    sub_100009B18(&qword_100385190, &qword_100385188);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10012A678()
{
  unint64_t result = qword_100388358;
  if (!qword_100388358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388358);
  }
  return result;
}

double sub_10012A6CC@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    swift_getKeyPath();
    sub_100004010(&qword_100380040);
    State.init(wrappedValue:)();
  }
  sub_10012ADF0();
  sub_10012AE44();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = v7;
  return result;
}

double sub_10012A7C4@<D0>(uint64_t a1@<X8>)
{
  return sub_10012A6CC(*v1, a1);
}

uint64_t sub_10012A7CC@<X0>(void *a1@<X8>)
{
  sub_100004010(&qword_100380040);
  uint64_t result = State.init(wrappedValue:)();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

__n128 sub_10012A824@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  sub_100004010(&qword_1003878B8);
  State.projectedValue.getter();
  type metadata accessor for UIMetrics();
  sub_10012B27C((unint64_t *)&qword_10037EFF0, (void (*)(uint64_t))type metadata accessor for UIMetrics);
  uint64_t v4 = EnvironmentObject.init()();
  unint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  sub_10004C6D4(v7, v8);
  char v9 = sub_10004EE90(v7, v8);
  sub_10004C738(v7, v8);
  if (v9) {
    unsigned __int8 v10 = static Edge.Set.top.getter();
  }
  else {
    unsigned __int8 v10 = Edge.Set.init(rawValue:)();
  }
  unsigned __int8 v11 = *(unsigned char *)a1;
  a2->n128_u64[0] = v4;
  a2->n128_u64[1] = v6;
  a2[1].n128_u8[0] = v11;
  a2[1].n128_u64[1] = v13;
  __n128 result = v14;
  a2[2] = v14;
  a2[3].n128_u8[0] = v10;
  return result;
}

uint64_t sub_10012A934()
{
  return NavigationStack.init<>(path:root:)();
}

uint64_t sub_10012AAA0@<X0>(unsigned char *a1@<X8>)
{
  sub_10012ABD8();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10012AAF0@<X0>(unsigned char *a1@<X8>)
{
  sub_10012ABD8();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10012AB40()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_10012AB8C()
{
  return EnvironmentValues.subscript.setter();
}

unint64_t sub_10012ABD8()
{
  unint64_t result = qword_100388360;
  if (!qword_100388360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388360);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for _ExplorerTryOutAppView(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012ACF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerTryOutAppView()
{
  return &type metadata for _ExplorerTryOutAppView;
}

unint64_t sub_10012AD34()
{
  unint64_t result = qword_100388368;
  if (!qword_100388368)
  {
    sub_1000094C4(&qword_100388370);
    sub_10012A5D4(&qword_100388340, &qword_100388338, (void (*)(void))sub_10012A5AC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388368);
  }
  return result;
}

uint64_t sub_10012ADD4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10012ADF0()
{
  unint64_t result = qword_100388378;
  if (!qword_100388378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388378);
  }
  return result;
}

unint64_t sub_10012AE44()
{
  unint64_t result = qword_100388380;
  if (!qword_100388380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388380);
  }
  return result;
}

uint64_t destroy for _ExplorerTryOutModernAppView(uint64_t a1)
{
  sub_10004C738(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for _ExplorerTryOutModernAppView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10004C6D4(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ExplorerTryOutModernAppView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10004C6D4(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10004C738(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ExplorerTryOutModernAppView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10004C738(v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ExplorerTryOutModernAppView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ExplorerTryOutModernAppView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerTryOutModernAppView()
{
  return &type metadata for _ExplorerTryOutModernAppView;
}

ValueMetadata *type metadata accessor for _ExplorerTryOutLegacyAppView()
{
  return &type metadata for _ExplorerTryOutLegacyAppView;
}

unint64_t sub_10012B0F0()
{
  unint64_t result = qword_100388388;
  if (!qword_100388388)
  {
    sub_1000094C4(&qword_100388390);
    sub_10012ADF0();
    sub_10012AE44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388388);
  }
  return result;
}

uint64_t sub_10012B16C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10012B188()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10012B1A4@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10012A824(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_10012B1AC()
{
  unint64_t result = qword_1003883A0;
  if (!qword_1003883A0)
  {
    sub_1000094C4(&qword_100388398);
    sub_10012B228();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003883A0);
  }
  return result;
}

unint64_t sub_10012B228()
{
  unint64_t result = qword_1003883A8;
  if (!qword_1003883A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003883A8);
  }
  return result;
}

uint64_t sub_10012B27C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10012B2D4()
{
  unint64_t result = qword_1003883B0;
  if (!qword_1003883B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003883B0);
  }
  return result;
}

uint64_t sub_10012B328()
{
  return sub_100009B18(&qword_1003883B8, &qword_1003883C0);
}

uint64_t sub_10012B364()
{
  return sub_10012B370("[%{public}s] init");
}

uint64_t sub_10012B370(const char *a1)
{
  uint64_t v3 = v1;
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000FD84(v4, (uint64_t)qword_1003A9958);
  swift_retain_n();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    char v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)char v7 = 136446210;
    type metadata accessor for SettingsAgent();
    swift_retain();
    uint64_t v8 = String.init<A>(describing:)();
    sub_1001B3178(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a1, v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v3;
}

uint64_t sub_10012B538()
{
  sub_10012B370("[%{public}s] deinit");

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SettingsAgent()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SettingsAgent.SettingsDestination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012B664);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SettingsAgent.SettingsDestination()
{
  return &type metadata for SettingsAgent.SettingsDestination;
}

unint64_t sub_10012B6A0()
{
  unint64_t result = qword_100388478;
  if (!qword_100388478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100388478);
  }
  return result;
}

void sub_10012B6F4()
{
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000FD84(v0, (uint64_t)qword_1003A9958);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  osos_log_type_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446466;
    swift_bridgeObjectRetain();
    sub_100004010(&qword_100383AE8);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1001B3178(v3, v4, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2082;
    swift_errorRetain();
    sub_100004010(&qword_100385630);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1001B3178(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Opening Settings result: %{public}s, %{public}s", (uint8_t *)v2, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_10012B970(char a1)
{
  uint64_t v2 = sub_100004010(&qword_100380420);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10037DD80 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000FD84(v9, (uint64_t)qword_1003A9958);
  unsigned __int8 v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v30 = v5;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v29 = v6;
    aBlock[0] = v14;
    uint64_t v28 = v8;
    *(_DWORD *)unint64_t v13 = 136315138;
    LOBYTE(v31) = a1;
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v31 = sub_1001B3178(v15, v16, aBlock);
    uint64_t v8 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Opening Settings for %s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v29;
    swift_slowDealloc();
    uint64_t v5 = v30;
    swift_slowDealloc();
  }

  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10004C504((uint64_t)v4);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to form Settings URL", v19, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    id v20 = [objc_allocWithZone((Class)_LSOpenConfiguration) init];
    [v20 setSensitive:1];
    id v21 = [self defaultWorkspace];
    if (v21)
    {
      uint64_t v23 = v21;
      URL._bridgeToObjectiveC()(v22);
      uint64_t v25 = v24;
      aBlock[4] = (uint64_t)sub_10012B6F4;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100174C8C;
      aBlock[3] = (uint64_t)&unk_100358A98;
      uint64_t v26 = _Block_copy(aBlock);
      id v27 = v20;
      [v23 openURL:v25 configuration:v27 completionHandler:v26];
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10012BE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10012BE34()
{
  return swift_release();
}

uint64_t sub_10012BE3C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = v2 >> 62;
  uint64_t result = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if ((v1 ^ (unint64_t)(v1 << 32)) >> 32) {
        goto LABEL_12;
      }
      return 0;
    case 2uLL:
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v7 = *(void *)(v1 + 24);
      if (v6 == v7) {
        return 0;
      }
      if (v3 != 2) {
        goto LABEL_12;
      }
      uint64_t v5 = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        goto LABEL_14;
      }
      __break(1u);
LABEL_12:
      LODWORD(v5) = HIDWORD(v1) - v1;
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_21;
      }
      uint64_t v5 = (int)v5;
      goto LABEL_14;
    case 3uLL:
      return result;
    default:
      if ((v2 & 0xFF000000000000) == 0) {
        return 0;
      }
      uint64_t v5 = BYTE6(v2);
LABEL_14:
      BOOL v8 = __OFSUB__(v5, 1);
      uint64_t v9 = v5 - 1;
      if (v8)
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10012BF74);
      }
      if ((unint64_t)(v9 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_20;
      }
      uint64_t v10 = 8 * v9;
      if (v10 < 0) {
        goto LABEL_22;
      }
      return v10 + *(unsigned __int8 *)(v0 + 32);
  }
}

uint64_t sub_10012BF84(uint64_t result, unsigned __int8 a2)
{
  if (a2)
  {
    int v4 = 8 - a2;
    if ((v4 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      JUMPOUT(0x10012C1A0);
    }
    if ((v4 & 0xF8) != 0) {
      int v5 = 0;
    }
    else {
      int v5 = result << (v4 & 7);
    }
    if ((*(unsigned __int8 *)(v2 + 32) | 8) == 8)
    {
      *(unsigned char *)(v2 + 32) = a2;
      swift_beginAccess();
      sub_10012C1B0(v5);
    }
    else
    {
      swift_beginAccess();
      uint64_t v6 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      switch(v7 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(v6), v6)) {
            goto LABEL_15;
          }
          goto LABEL_25;
        case 2uLL:
          uint64_t v9 = *(void *)(v6 + 16);
          uint64_t v8 = *(void *)(v6 + 24);
          BOOL v10 = __OFSUB__(v8, v9);
          uint64_t v11 = v8 - v9;
          if (v10) {
            goto LABEL_26;
          }
          if (__OFSUB__(v11, 1)) {
            goto LABEL_27;
          }
LABEL_15:
          sub_10000F1F0(*(void *)(v2 + 16), *(void *)(v2 + 24));
          Data.subscript.getter();
          sub_10000F294(v6, v7);
          swift_beginAccess();
          Data._Representation.subscript.setter();
          uint64_t result = swift_endAccess();
          unsigned __int8 v12 = *(unsigned char *)(v2 + 32) + a2;
          if (((*(unsigned __int8 *)(v2 + 32) + (unsigned __int16)a2) & 0x100) != 0) {
            goto LABEL_23;
          }
          *(unsigned char *)(v2 + 32) = v12;
          if (v12 < 9u) {
            return result;
          }
          unsigned __int8 v13 = v12 - 8;
          *(unsigned char *)(v2 + 32) = v13;
          int v14 = a2 - v13;
          if ((v14 & 0xFFFFFF00) != 0) {
            goto LABEL_24;
          }
          if ((v14 & 0xF8) != 0) {
            char v15 = 0;
          }
          else {
            char v15 = v5 << (v14 & 7);
          }
          swift_beginAccess();
          sub_10012C1B0(v15);
          break;
        default:
          goto LABEL_15;
      }
    }
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10012C1B0(char a1)
{
  uint64_t v4 = sub_100004010(&qword_1003885A0);
  unint64_t v5 = sub_10012C5F4();
  LOBYTE(v3[0]) = a1;
  sub_100008F88(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((uint64_t)v3);
}

uint64_t sub_10012C2AC(uint64_t a1)
{
  unint64_t v2 = sub_10012BE3C();
  unint64_t v3 = v2;
  do
  {
    sub_10012BF84(v3 & 0x7F | ((v3 > 0x7F) << 7), 8u);
    BOOL v4 = v3 > 0x7F;
    v3 >>= 7;
  }
  while (v4);
  uint64_t result = swift_beginAccess();
  if (v2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 24);
    if (v2 <= 8)
    {
LABEL_25:
      sub_10000F1F0(v6, v7);
LABEL_26:
      unsigned __int8 v18 = Data.subscript.getter();
      sub_10012BF84(v18 >> (-(char)v2 & 7), v2);
      return sub_10000F294(v6, v7);
    }
    else
    {
      unint64_t v8 = v7 >> 62;
      uint64_t result = sub_10000F1F0(v6, v7);
      if (v7 >> 62 != 3)
      {
        uint64_t v9 = 0;
        unint64_t v10 = ((v2 - 9) >> 3) + 1;
        while (1)
        {
          if (v8)
          {
            if (v8 == 1)
            {
              if (v9 < (int)v6 || v9 >= v6 >> 32)
              {
                __break(1u);
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
LABEL_31:
                __break(1u);
LABEL_32:
                __break(1u);
LABEL_33:
                __break(1u);
LABEL_34:
                __break(1u);
              }
              uint64_t v12 = __DataStorage._bytes.getter();
              if (!v12) {
                goto LABEL_33;
              }
              uint64_t v13 = v12;
              uint64_t v14 = __DataStorage._offset.getter();
              uint64_t v15 = v9 - v14;
              if (__OFSUB__(v9, v14)) {
                goto LABEL_31;
              }
            }
            else
            {
              if (v9 < *(void *)(v6 + 16)) {
                goto LABEL_30;
              }
              if (v9 >= *(void *)(v6 + 24)) {
                goto LABEL_32;
              }
              uint64_t v16 = __DataStorage._bytes.getter();
              if (!v16) {
                goto LABEL_34;
              }
              uint64_t v13 = v16;
              uint64_t v17 = __DataStorage._offset.getter();
              uint64_t v15 = v9 - v17;
              if (__OFSUB__(v9, v17))
              {
                __break(1u);
                goto LABEL_25;
              }
            }
            uint64_t v11 = *(unsigned __int8 *)(v13 + v15);
          }
          else
          {
            if (v9 >= (unint64_t)BYTE6(v7)) {
              goto LABEL_29;
            }
            uint64_t v19 = v6;
            __int16 v20 = v7;
            char v21 = BYTE2(v7);
            char v22 = BYTE3(v7);
            char v23 = BYTE4(v7);
            char v24 = BYTE5(v7);
            uint64_t v11 = *((unsigned __int8 *)&v19 + v9);
          }
          sub_10012BF84(v11, 8u);
          ++v9;
          LOBYTE(v2) = v2 - 8;
          if (v10 == v9) {
            goto LABEL_26;
          }
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10012C598()
{
  sub_10000F294(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BitCollector()
{
  return self;
}

unint64_t sub_10012C5F4()
{
  unint64_t result = qword_1003885A8;
  if (!qword_1003885A8)
  {
    sub_1000094C4(&qword_1003885A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003885A8);
  }
  return result;
}

uint64_t sub_10012C650(uint64_t a1)
{
  return sub_10012C6F0(a1, (uint64_t (*)(void))sub_100130ECC, (uint64_t (*)(void))sub_1001312C4);
}

uint64_t sub_10012C67C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_10012C6C4(uint64_t a1)
{
  return sub_10012C6F0(a1, (uint64_t (*)(void))sub_100131214, (uint64_t (*)(void))sub_100131318);
}

uint64_t sub_10012C6F0(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t result = a2();
  if (v7) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v6)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v8 = a3();
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_10012C77C(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 32);
    swift_retain();
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(v5 + 16) == v6 && *(void *)(v5 + 24) == v7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_release();
  if (v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v4 == 1) {
    goto LABEL_11;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = 1;
    while (1)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v11 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      if (*(void *)(result + 16) == v6 && *(void *)(result + 24) == v7)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return 1;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_unknownObjectRelease();
      if (v13) {
        goto LABEL_9;
      }
      ++v10;
      if (v11 == v4) {
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v14 = 5;
    while (1)
    {
      uint64_t v15 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      uint64_t v16 = *(void *)(a2 + 8 * v14);
      if (*(void *)(v16 + 16) == v6 && *(void *)(v16 + 24) == v7) {
        goto LABEL_9;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_9;
      }
      ++v14;
      if (v15 == v4) {
        goto LABEL_11;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012C964(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  char v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012CA2C()
{
  uint64_t v2 = v1;
  uint64_t v125 = _swiftEmptySetSingleton;
  uint64_t v124 = _swiftEmptySetSingleton;
  unint64_t v3 = *(void *)(v0 + 96);
  unint64_t v118 = v3 >> 62;
  if (v3 >> 62)
  {
LABEL_177:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v120 = v3;
    if (!v4) {
      goto LABEL_118;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v120 = v3;
    if (!v4) {
      goto LABEL_118;
    }
  }
  unint64_t v5 = 0;
  unint64_t v6 = v3 & 0xC000000000000001;
  unint64_t v115 = v3 + 32;
  uint64_t v116 = v3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v113 = v4;
  unint64_t v114 = v3 & 0xC000000000000001;
  while (2)
  {
    if (v6)
    {
      uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v8 = __OFADD__(v5, 1);
      unint64_t v9 = v5 + 1;
      if (v8) {
        goto LABEL_179;
      }
    }
    else
    {
      if (v5 >= *(void *)(v116 + 16))
      {
        __break(1u);
        goto LABEL_183;
      }
      uint64_t v7 = *(void **)(v115 + 8 * v5);
      swift_retain();
      BOOL v8 = __OFADD__(v5, 1);
      unint64_t v9 = v5 + 1;
      if (v8)
      {
LABEL_179:
        __break(1u);
        goto LABEL_180;
      }
    }
    unint64_t v117 = v9;
    uint64_t v11 = v7[2];
    unint64_t v10 = v7[3];
    swift_bridgeObjectRetain();
    sub_1001314C4(v11, v10);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_140;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = (uint64_t)v125;
    uint64_t v13 = v7[2];
    uint64_t v14 = v7[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v15 = sub_100078F90(v13, v14, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_149;
    }
    uint64_t v16 = (uint64_t)v124;
    uint64_t v17 = v7[2];
    uint64_t v18 = v7[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v19 = sub_100078F90(v17, v18, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19)
    {
LABEL_149:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v92 = v7[2];
      uint64_t v93 = v7[3];
      sub_1000A1FAC();
      swift_allocError();
      *(void *)uint64_t v94 = v92;
      *(void *)(v94 + 8) = v93;
      *(void *)(v94 + 16) = 0;
      *(void *)(v94 + 24) = 0;
      *(unsigned char *)(v94 + 32) = 1;
      goto LABEL_150;
    }
    Swift::Int v20 = v7[2];
    Swift::Int v21 = v7[3];
    swift_bridgeObjectRetain();
    sub_10012EC04(&v123, v20, v21);
    swift_bridgeObjectRelease();
    unint64_t v22 = v7[5];
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      char v119 = v7;
      if (v23)
      {
LABEL_15:
        uint64_t v121 = (uint64_t)v125;
        uint64_t v24 = 4;
        do
        {
          uint64_t v25 = v24 - 4;
          if ((v22 & 0xC000000000000001) != 0)
          {
            uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v27 = v24 - 3;
            if (__OFADD__(v25, 1)) {
              goto LABEL_165;
            }
          }
          else
          {
            uint64_t v26 = *(void *)(v22 + 8 * v24);
            swift_retain();
            uint64_t v27 = v24 - 3;
            if (__OFADD__(v25, 1))
            {
LABEL_165:
              __break(1u);
              goto LABEL_166;
            }
          }
          uint64_t v29 = *(void *)(v26 + 16);
          unint64_t v28 = *(void *)(v26 + 24);
          swift_bridgeObjectRetain();
          sub_1001314C4(v29, v28);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void *)(v26 + 16);
          uint64_t v30 = *(void *)(v26 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v32 = sub_100078F90(v31, v30, v121);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v32) {
            goto LABEL_141;
          }
          uint64_t v33 = v23;
          uint64_t v34 = (uint64_t)v124;
          uint64_t v36 = *(void *)(v26 + 16);
          uint64_t v35 = *(void *)(v26 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v37 = sub_100078F90(v36, v35, v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v37)
          {
LABEL_141:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v84 = *(void *)(v26 + 16);
            uint64_t v83 = *(void *)(v26 + 24);
            sub_1000A1FAC();
            swift_allocError();
            *(void *)uint64_t v85 = v84;
            *(void *)(v85 + 8) = v83;
            *(void *)(v85 + 16) = 0;
            *(void *)(v85 + 24) = 0;
            *(unsigned char *)(v85 + 32) = 1;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_release();
            return swift_release();
          }
          Swift::Int v39 = *(void *)(v26 + 16);
          Swift::Int v38 = *(void *)(v26 + 24);
          swift_bridgeObjectRetain();
          sub_10012EC04(&v123, v39, v38);
          swift_release();
          swift_bridgeObjectRelease();
          ++v24;
          uint64_t v23 = v33;
          BOOL v40 = v27 == v33;
          uint64_t v2 = 0;
        }
        while (!v40);
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      char v119 = v7;
      if (v23) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v3 = v120;
    switch(*((unsigned char *)v119 + 32))
    {
      case 1:
        unint64_t v47 = v119[5];
        if (v47 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v63 <= 0) {
            goto LABEL_153;
          }
        }
        else if (*(uint64_t *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
        {
          goto LABEL_153;
        }
        unint64_t v48 = v119[5];
        if (v48 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v67 < 64)
          {
LABEL_45:
            unint64_t v0 = v119[5];
            if (v0 >> 62)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v49) {
                goto LABEL_112;
              }
            }
            else
            {
              uint64_t v49 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (!v49) {
                goto LABEL_112;
              }
            }
            uint64_t v50 = 4;
            while (1)
            {
              unint64_t v3 = v50 - 4;
              if ((v0 & 0xC000000000000001) != 0)
              {
                uint64_t v45 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                uint64_t v51 = v50 - 3;
                if (__OFADD__(v3, 1)) {
                  goto LABEL_174;
                }
              }
              else
              {
                uint64_t v45 = *(void *)(v0 + 8 * v50);
                swift_retain();
                uint64_t v51 = v50 - 3;
                if (__OFADD__(v3, 1)) {
                  goto LABEL_174;
                }
              }
              if (*(unsigned char *)(v45 + 40) == 1) {
                break;
              }
              swift_release();
              ++v50;
              if (v51 == v49) {
                goto LABEL_55;
              }
            }
LABEL_145:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v87 = v119[2];
            uint64_t v86 = v119[3];
            sub_1000A1FAC();
            swift_allocError();
            *(void *)uint64_t v88 = v87;
            *(void *)(v88 + 8) = v86;
            *(void *)(v88 + 16) = v45;
            *(void *)(v88 + 24) = 0;
            *(unsigned char *)(v88 + 32) = 10;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_willThrow();
LABEL_147:
            swift_release();
            return swift_release();
          }
        }
        else if (*(uint64_t *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) < 64)
        {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v104 = v119[2];
        uint64_t v105 = v119[3];
        unint64_t v106 = v119[5];
        if (v106 >> 62)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v101 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        sub_1000A1FAC();
        swift_allocError();
        *(void *)uint64_t v102 = v104;
        *(void *)(v102 + 8) = v105;
        uint64_t v103 = 63;
        goto LABEL_164;
      case 2:
        unint64_t v52 = v119[5];
        if (v52 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v64 <= 0) {
            goto LABEL_153;
          }
        }
        else if (*(uint64_t *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
        {
          goto LABEL_153;
        }
        unint64_t v53 = v119[5];
        if (!(v53 >> 62))
        {
          if (*(uint64_t *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 17) {
            goto LABEL_161;
          }
          goto LABEL_60;
        }
        swift_bridgeObjectRetain();
        uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v68 >= 17)
        {
LABEL_161:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v107 = v119[2];
          uint64_t v108 = v119[3];
          unint64_t v109 = v119[5];
          if (v109 >> 62)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v101 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          sub_1000A1FAC();
          swift_allocError();
          *(void *)uint64_t v102 = v107;
          *(void *)(v102 + 8) = v108;
          uint64_t v103 = 16;
          goto LABEL_164;
        }
LABEL_60:
        unint64_t v0 = v119[5];
        if (v0 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v54)
          {
LABEL_115:
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_116;
          }
        }
        else
        {
          uint64_t v54 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v54) {
            goto LABEL_115;
          }
        }
        uint64_t v55 = 0;
        uint64_t v56 = 4;
        do
        {
          uint64_t v57 = v56 - 4;
          if ((v0 & 0xC000000000000001) != 0)
          {
            uint64_t v58 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v8 = __OFADD__(v57, 1);
            unint64_t v3 = v56 - 3;
            if (v8) {
              goto LABEL_175;
            }
          }
          else
          {
            uint64_t v58 = *(void *)(v0 + 8 * v56);
            swift_retain();
            BOOL v8 = __OFADD__(v57, 1);
            unint64_t v3 = v56 - 3;
            if (v8) {
              goto LABEL_175;
            }
          }
          if ((*(unsigned char *)(v58 + 40) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v90 = v119[2];
            uint64_t v89 = v119[3];
            sub_1000A1FAC();
            swift_allocError();
            *(void *)uint64_t v91 = v90;
            *(void *)(v91 + 8) = v89;
            *(void *)(v91 + 16) = v58;
            *(void *)(v91 + 24) = 0;
            *(unsigned char *)(v91 + 32) = 10;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_willThrow();
            goto LABEL_147;
          }
          uint64_t v59 = *(void *)(v58 + 48);
          swift_release();
          BOOL v8 = __OFADD__(v55, v59);
          v55 += v59;
          if (v8) {
            goto LABEL_176;
          }
          ++v56;
        }
        while (v3 != v54);
        swift_bridgeObjectRelease();
        if (v55 > 100) {
          goto LABEL_172;
        }
LABEL_72:
        swift_release();
        unint64_t v3 = v120;
LABEL_116:
        unint64_t v5 = v117;
LABEL_117:
        unint64_t v6 = v114;
        if (v5 != v113) {
          continue;
        }
LABEL_118:
        swift_bridgeObjectRelease();
        if (!v118)
        {
          uint64_t v69 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v69) {
            goto LABEL_120;
          }
LABEL_128:
          swift_bridgeObjectRelease();
          if (v118)
          {
            swift_bridgeObjectRetain();
            uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
            if (v55)
            {
LABEL_130:
              uint64_t v75 = (uint64_t)v125;
              uint64_t v76 = (uint64_t)v124;
              unint64_t v122 = v3 & 0xC000000000000001;
              uint64_t v77 = 4;
              while (1)
              {
                uint64_t v78 = v77 - 4;
                if (v122)
                {
                  uint64_t v79 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  uint64_t v80 = v77 - 3;
                  if (__OFADD__(v78, 1)) {
                    goto LABEL_171;
                  }
                }
                else
                {
                  uint64_t v79 = *(void *)(v3 + 8 * v77);
                  swift_retain();
                  uint64_t v80 = v77 - 3;
                  if (__OFADD__(v78, 1)) {
                    goto LABEL_171;
                  }
                }
                uint64_t v81 = *(void *)(v79 + 48);
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_10012E574(v79, v81, v75, v76);
                if (v2) {
                  break;
                }
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                ++v77;
                unint64_t v3 = v120;
                if (v80 == v55) {
                  goto LABEL_138;
                }
              }
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease_n();
              return swift_bridgeObjectRelease_n();
            }
          }
          else
          {
            uint64_t v55 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v55) {
              goto LABEL_130;
            }
          }
LABEL_138:
          swift_bridgeObjectRelease();
LABEL_140:
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
LABEL_180:
        swift_bridgeObjectRetain();
        uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
        if (!v69) {
          goto LABEL_128;
        }
LABEL_120:
        uint64_t v70 = (uint64_t)v124;
        uint64_t v55 = v3 & 0xC000000000000001;
        uint64_t v71 = 4;
        while (2)
        {
          uint64_t v72 = v71 - 4;
          if (v55)
          {
            uint64_t v73 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v8 = __OFADD__(v72, 1);
            uint64_t v74 = v71 - 3;
            if (v8) {
              break;
            }
            goto LABEL_126;
          }
          uint64_t v73 = *(void *)(v3 + 8 * v71);
          swift_retain();
          BOOL v8 = __OFADD__(v72, 1);
          uint64_t v74 = v71 - 3;
          if (!v8)
          {
LABEL_126:
            swift_bridgeObjectRetain();
            sub_1001317B4(v73, v70);
            if (v2)
            {
              swift_release();
              swift_bridgeObjectRelease_n();
              goto LABEL_140;
            }
            sub_100131E28(v73, v70);
            uint64_t v2 = 0;
            swift_release();
            swift_bridgeObjectRelease();
            ++v71;
            if (v74 == v69) {
              goto LABEL_128;
            }
            continue;
          }
          break;
        }
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v111 = v119[2];
        uint64_t v110 = v119[3];
        sub_1000A1FAC();
        swift_allocError();
        *(void *)uint64_t v112 = v111;
        *(void *)(v112 + 8) = v110;
        *(void *)(v112 + 16) = v55;
        *(void *)(v112 + 24) = 100;
        *(unsigned char *)(v112 + 32) = 4;
        swift_bridgeObjectRetain();
        swift_willThrow();
        return swift_release();
      case 3:
        unint64_t v0 = v119[5];
        if (v0 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          unint64_t v5 = v117;
          if (!v65)
          {
LABEL_75:
            if (*((unsigned char *)v119 + 64))
            {
              if (*((unsigned char *)v119 + 64) != 7)
              {
                swift_release();
                goto LABEL_117;
              }
LABEL_166:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000A1FAC();
              swift_allocError();
              uint64_t v99 = 2;
              goto LABEL_169;
            }
            if (v118)
            {
              swift_bridgeObjectRetain_n();
              unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v0 = *(void *)(v116 + 16);
              swift_bridgeObjectRetain();
            }
            if (!v0)
            {
              swift_bridgeObjectRelease();
LABEL_168:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000A1FAC();
              swift_allocError();
              uint64_t v99 = 4;
              goto LABEL_169;
            }
            unint64_t v60 = v0 - 1;
            if (!__OFSUB__(v0, 1))
            {
              if (v114)
              {
                unint64_t v0 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_88:
                swift_bridgeObjectRelease();
                if (*(void *)(v0 + 16) == v119[2] && *(void *)(v0 + 24) == v119[3])
                {
                  swift_release();
                  swift_release();
                  goto LABEL_116;
                }
                char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_release();
                if ((v61 & 1) == 0) {
                  goto LABEL_168;
                }
LABEL_113:
                swift_release();
                goto LABEL_116;
              }
              if ((v60 & 0x8000000000000000) == 0)
              {
                if (v60 < *(void *)(v116 + 16))
                {
                  unint64_t v0 = *(void *)(v115 + 8 * v60);
                  swift_retain();
                  goto LABEL_88;
                }
                goto LABEL_185;
              }
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
              goto LABEL_186;
            }
LABEL_183:
            __break(1u);
            goto LABEL_184;
          }
        }
        else
        {
          unint64_t v5 = v117;
          if (!*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_75;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000A1FAC();
        swift_allocError();
        uint64_t v99 = 1;
LABEL_169:
        *(void *)uint64_t v98 = v99;
        *(void *)(v98 + 8) = 0;
        *(void *)(v98 + 16) = 0;
        *(void *)(v98 + 24) = 0;
        *(unsigned char *)(v98 + 32) = 17;
        goto LABEL_151;
      default:
        unint64_t v41 = v119[5];
        if (v41 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v62 > 0)
          {
LABEL_28:
            unint64_t v42 = v119[5];
            if (v42 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v66 < 128)
              {
LABEL_30:
                unint64_t v0 = v119[5];
                if (v0 >> 62)
                {
                  swift_bridgeObjectRetain_n();
                  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (v43) {
                    goto LABEL_32;
                  }
                }
                else
                {
                  uint64_t v43 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  swift_bridgeObjectRetain();
                  if (v43)
                  {
LABEL_32:
                    uint64_t v44 = 4;
                    while (1)
                    {
                      unint64_t v3 = v44 - 4;
                      if ((v0 & 0xC000000000000001) != 0)
                      {
                        uint64_t v45 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                        uint64_t v46 = v44 - 3;
                        if (__OFADD__(v3, 1)) {
                          goto LABEL_173;
                        }
                      }
                      else
                      {
                        uint64_t v45 = *(void *)(v0 + 8 * v44);
                        swift_retain();
                        uint64_t v46 = v44 - 3;
                        if (__OFADD__(v3, 1))
                        {
LABEL_173:
                          __break(1u);
LABEL_174:
                          __break(1u);
LABEL_175:
                          __break(1u);
LABEL_176:
                          __break(1u);
                          goto LABEL_177;
                        }
                      }
                      if (*(unsigned char *)(v45 + 40) == 1) {
                        goto LABEL_145;
                      }
                      swift_release();
                      ++v44;
                      if (v46 == v43)
                      {
LABEL_55:
                        swift_bridgeObjectRelease();
                        goto LABEL_72;
                      }
                    }
                  }
                }
LABEL_112:
                swift_bridgeObjectRelease();
                goto LABEL_113;
              }
            }
            else if (*(uint64_t *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) < 128)
            {
              goto LABEL_30;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v5 = v119[2];
            unint64_t v0 = v119[3];
            unint64_t v100 = v119[5];
            if (!(v100 >> 62))
            {
              uint64_t v101 = *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
LABEL_157:
              sub_1000A1FAC();
              swift_allocError();
              *(void *)uint64_t v102 = v5;
              *(void *)(v102 + 8) = v0;
              uint64_t v103 = 127;
LABEL_164:
              *(void *)(v102 + 16) = v101;
              *(void *)(v102 + 24) = v103;
              *(unsigned char *)(v102 + 32) = 3;
              swift_willThrow();
              return swift_release();
            }
LABEL_186:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_157;
          }
        }
        else if (*(uint64_t *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) > 0)
        {
          goto LABEL_28;
        }
LABEL_153:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v96 = v119[2];
        uint64_t v95 = v119[3];
        sub_1000A1FAC();
        swift_allocError();
        *(void *)uint64_t v97 = v96;
        *(void *)(v97 + 8) = v95;
        *(void *)(v97 + 16) = 0;
        *(void *)(v97 + 24) = 0;
        *(unsigned char *)(v97 + 32) = 2;
LABEL_150:
        swift_bridgeObjectRetain();
LABEL_151:
        swift_willThrow();
        return swift_release();
    }
  }
}