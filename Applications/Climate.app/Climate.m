uint64_t sub_100004580()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin);
  v2 = [v1 compressorOn];
  v3 = [v1 compressorOnRestricted];
  v4 = [v1 compressorOnInvalid];
  v5 = [v1 compressorOnDisabled];
  if (v2)
  {
    if (v3)
    {
      v6 = 5;
      if (v4) {
        v6 = 13;
      }
      if ((v5 & 1) == 0) {
        return v6;
      }
      return v6 | 0x10;
    }
    v6 = 9;
    if (!v4) {
      v6 = 1;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else if (v3)
  {
    v6 = 4;
    if (v4) {
      v6 = 12;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else
  {
    v6 = 8;
    if (!v4) {
      v6 = 0;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  return v6;
}

char *sub_10000465C(void *a1, char a2)
{
  *(void *)&v2[OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin] = a1;
  v66.receiver = v2;
  v66.super_class = (Class)type metadata accessor for ClimateCabinServiceButton();
  id v5 = a1;
  v6 = [super init];
  [v5 registerObserver:v6];

  v7 = &v6[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  swift_beginAccess();
  uint64_t v9 = *(void *)v7;
  uint64_t v8 = *((void *)v7 + 1);
  *(_OWORD *)v7 = xmmword_1000B19F0;
  v10 = v6;
  if (!v8
    || (v9 == 4403009 ? (BOOL v11 = v8 == 0xE300000000000000) : (BOOL v11 = 0),
        !v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  if (a2 != 1)
  {
    uint64_t v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v5;
    v14 = (uint64_t *)&v10[OBJC_IVAR____TtC7Climate13ClimateButton_action];
    swift_beginAccess();
    uint64_t v15 = *v14;
    uint64_t *v14 = (uint64_t)sub_100005688;
    v14[1] = v13;
    id v16 = v5;
    sub_100005690(v15);
  }
  id v17 = [v10 titleLabel];
  if (v17)
  {
    v18 = v17;
    if (qword_1000E46F8 != -1) {
      swift_once();
    }
    [v18 setFont:qword_1000EA820];
  }
  int v19 = v10[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v10[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v19 != 1)
  {
    v20 = *(void **)&v10[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    v21 = v10;
    [v20 removeFromSuperview];
    sub_100088B54();
  }
  uint64_t v22 = qword_1000E46D0;
  v23 = v10;
  if (v22 != -1) {
    swift_once();
  }
  v61 = v5;
  v24 = (void *)qword_1000EA770;
  v25 = *(void **)algn_1000EA778;
  uint64_t v26 = qword_1000EA780;
  id v27 = [self systemBlueColor];
  if (!v27) {
    id v27 = v25;
  }
  v28 = (void **)&v23[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  v29 = *(void **)&v23[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  uint64_t v62 = *(void *)&v23[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
  v64 = *(void **)&v23[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
  *v28 = v24;
  v28[1] = v27;
  v28[2] = (void *)v26;
  id v30 = v24;
  swift_bridgeObjectRetain_n();
  id v60 = v30;
  v31 = *v28;
  v32 = v28[1];
  uint64_t v33 = (uint64_t)v28[2];
  sub_1000056A0();
  id v34 = v31;
  id v35 = v32;
  swift_bridgeObjectRetain();
  id v36 = v27;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_25;
  }
  sub_10007C1D0(v33, v62);
  char v38 = v37;
  swift_bridgeObjectRelease();

  if ((v38 & 1) == 0) {
LABEL_25:
  }
    (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *(void *)v23) + 0x228))(v39, v40);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = qword_1000E46C8;
  v42 = v23;
  if (v41 != -1) {
    swift_once();
  }
  v43 = (void *)qword_1000EA758;
  v44 = (void *)qword_1000EA760;
  uint64_t v45 = qword_1000EA768;
  v46 = &v42[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
  v47 = *(void **)&v42[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
  v65 = *(void **)&v42[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
  uint64_t v48 = *(void *)&v42[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
  *(void *)v46 = qword_1000EA758;
  *((void *)v46 + 1) = v44;
  *((void *)v46 + 2) = v45;
  id v49 = v43;
  id v50 = v44;
  swift_bridgeObjectRetain_n();
  id v63 = v49;
  id v51 = v50;
  v52 = (void *)*((void *)v46 + 1);
  uint64_t v53 = *((void *)v46 + 2);
  id v54 = *(id *)v46;
  id v55 = v52;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v53, v48);
    char v57 = v56;
    swift_bridgeObjectRelease();

    if (v57) {
      goto LABEL_34;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))((swift_isaMask & *(void *)v42) + 0x228))();
LABEL_34:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58 = v42;
  sub_10009F8A4();
  [v58 setEnabled:(unint64_t)sub_100004580() < 8];
  sub_10008896C();
  sub_100088B54();

  return v58;
}

void sub_100004C68(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    [a3 setCompressorOn:[a3 compressorOn] ^ 1];
    sub_10009F8A4();
    [v5 setEnabled:(unint64_t)sub_100004580() < 8];
    sub_10008896C();
    sub_100088B54();
  }
}

id sub_100004D98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCompressorButton();
  return [super dealloc];
}

uint64_t variable initialization expression of ClimateStepper.accessibilityIdentifierModifier()
{
  return 0;
}

uint64_t variable initialization expression of Weak.object()
{
  return 0;
}

uint64_t variable initialization expression of ClimateStepper.disableSelectedBackgroundMaterial()
{
  return 0;
}

double variable initialization expression of ClimateButton.spaceBetweenSymbolAndTitle()
{
  return 3.0;
}

uint64_t variable initialization expression of ClimateButton.accessibilityLabelShouldIncludeStates()
{
  return 1;
}

void *variable initialization expression of ClimateStepper.activeConstraints()
{
  return &_swiftEmptyArrayStorage;
}

id sub_100004E08()
{
  v0 = self;
  id v1 = [v0 clearColor];
  id v2 = [v0 systemWhiteColor];
  return v1;
}

double variable initialization expression of ClimateStepper.primaryButtonHeight()
{
  return 32.0;
}

double variable initialization expression of ClimateStepper.primaryButtonWidth()
{
  return 62.0;
}

uint64_t type metadata accessor for ClimateCompressorButton()
{
  return self;
}

void type metadata accessor for UIRectEdge(uint64_t a1)
{
}

void type metadata accessor for Axis(uint64_t a1)
{
}

__n128 sub_100004EDC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100004EF0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100004F10(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void *sub_100004F5C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100004F6C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100004F78()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100004FC4()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10000501C()
{
  return Hasher._finalize()();
}

BOOL sub_100005084(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100005098(uint64_t a1, uint64_t a2)
{
  return sub_1000051A4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000050BC(uint64_t a1, uint64_t a2)
{
  return sub_1000051A4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000050DC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100005130()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000051A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000051E8(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100005260(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000052E0@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100005324()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100005394(uint64_t a1)
{
  uint64_t v2 = sub_100005894((unint64_t *)&qword_1000E4820, type metadata accessor for Key);
  uint64_t v3 = sub_100005894(&qword_1000E4828, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005454()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000054E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000550C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100005554(uint64_t a1)
{
  uint64_t v2 = sub_100005894((unint64_t *)&qword_1000E4830, type metadata accessor for LaunchOptionsKey);
  uint64_t v3 = sub_100005894(&qword_1000E4838, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005610()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100005648()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100005688(uint64_t a1)
{
  sub_100004C68(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100005690(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t sub_1000056A0()
{
  unint64_t result = qword_1000E4A20;
  if (!qword_1000E4A20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E4A20);
  }
  return result;
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ClimateProgressViewColorConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for ClimateProgressViewColorConfig(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100005734(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005754(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void sub_1000057BC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100005804()
{
  return sub_100005894(&qword_1000E47E0, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_10000584C()
{
  return sub_100005894(&qword_1000E47E8, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100005894(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000058DC()
{
  return sub_100005894(&qword_1000E47F0, type metadata accessor for Key);
}

uint64_t sub_100005924()
{
  return sub_100005894(&qword_1000E47F8, type metadata accessor for Key);
}

uint64_t sub_10000596C()
{
  return sub_100005894((unint64_t *)&unk_1000E4800, type metadata accessor for Key);
}

uint64_t sub_1000059B4()
{
  return sub_100005894((unint64_t *)&qword_1000E5610, type metadata accessor for CFString);
}

uint64_t sub_1000059FC()
{
  return sub_100005894(&qword_1000E4810, type metadata accessor for CFString);
}

uint64_t sub_100005A44()
{
  return sub_100005894(&qword_1000E4818, type metadata accessor for LaunchOptionsKey);
}

char *sub_100005AA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CAUPhysicalControlBarsButton();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for CAUPhysicalControlBarsButton.temperature(_:))
  {
    v14 = *(void **)(v2 + *(int *)(type metadata accessor for ClimateZone() + 28));
    id v15 = objc_allocWithZone((Class)type metadata accessor for ClimateTemperatureIndicator());
    sub_100090A44(v14, 1, 0x4040800000000000, 0, 5);
    id v17 = v16;
    [v16 setUserInteractionEnabled:0];
    return v17;
  }
  if (v13 != enum case for CAUPhysicalControlBarsButton.fan(_:))
  {
    if (v13 == enum case for CAUPhysicalControlBarsButton.seatFan(_:))
    {
      int v19 = *(void **)(v2 + *(int *)(type metadata accessor for ClimateZone() + 44));
      if (v19)
      {
        id v20 = objc_allocWithZone((Class)type metadata accessor for ClimateSeatFanServiceButton());
        id v21 = v19;
        uint64_t v22 = sub_10004BD94(v21);
        v23 = sub_100005FD8(v22, sub_10004C7BC, &OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView);
LABEL_12:
        id v17 = v23;

        return v17;
      }
      return 0;
    }
    if (v13 == enum case for CAUPhysicalControlBarsButton.seatHeatingCooling(_:))
    {
      v24 = *(void **)(v2 + *(int *)(type metadata accessor for ClimateZone() + 40));
      if (v24)
      {
        id v25 = objc_allocWithZone((Class)type metadata accessor for ClimateSeatHeatingCoolingServiceButton());
        id v21 = v24;
        uint64_t v22 = sub_100058C74(v21);
        v23 = sub_100005FD8(v22, sub_100059440, &OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView);
        goto LABEL_12;
      }
      return 0;
    }
    if (v13 != enum case for CAUPhysicalControlBarsButton.deepLink(_:))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
    id v26 = objc_allocWithZone((Class)type metadata accessor for ClimateDeepLinkButton());
    id v27 = sub_100057DA0((uint64_t)v7);
    v28 = v27;
    int v29 = v27[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v27[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if (v29 != 1)
    {
      [*(id *)&v27[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView] removeFromSuperview];
      sub_100088B54();
    }
    id v30 = self;
    id v17 = v28;
    id v31 = [v30 clearColor];
    id v32 = [v30 labelColor];
    uint64_t v33 = &v17[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v34 = *(void **)&v17[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v35 = *(void **)&v17[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
    uint64_t v36 = *(void *)&v17[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
    *(void *)uint64_t v33 = v31;
    *((void *)v33 + 1) = v32;
    *((void *)v33 + 2) = &_swiftEmptyDictionarySingleton;
    sub_1000056A0();
    id v37 = v31;
    id v38 = v32;
    swift_bridgeObjectRetain();
    id v39 = v37;
    id v40 = v38;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v36);
      char v42 = v41;
      swift_bridgeObjectRelease();

      if (v42) {
        goto LABEL_24;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_100088B54();
LABEL_24:

    swift_bridgeObjectRelease();
    id v43 = [v17 layer];
    [v43 setHitTestsAsOpaque:1];

    return v17;
  }
  id v17 = *(char **)(v2 + *(int *)(type metadata accessor for ClimateZone() + 32));
  if (v17)
  {
    id v18 = objc_allocWithZone((Class)type metadata accessor for ClimateFanIndicator());
    return sub_10006265C(v17);
  }
  return v17;
}

char *sub_100005FD8(char *a1, void (*a2)(void), void *a3)
{
  [a1 setUserInteractionEnabled:0];
  uint64_t v5 = &a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
  uint64_t v6 = *(void **)&a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
  v7 = *(void **)&a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
  uint64_t v9 = self;
  id v10 = v6;
  id v11 = v7;
  swift_bridgeObjectRetain();
  id v12 = [v9 labelColor];
  v47 = a3;
  if (v12)
  {
    id v13 = v12;

    id v11 = v13;
  }
  v14 = *(void **)v5;
  id v15 = (void *)*((void *)v5 + 1);
  uint64_t v16 = *((void *)v5 + 2);
  *(void *)uint64_t v5 = v10;
  *((void *)v5 + 1) = v11;
  *((void *)v5 + 2) = v8;
  id v17 = v10;
  swift_bridgeObjectRetain_n();
  sub_1000056A0();
  id v18 = v17;
  id v19 = v11;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }
  sub_10007C1D0(v8, v16);
  char v21 = v20;
  swift_bridgeObjectRelease();

  if ((v21 & 1) == 0) {
LABEL_8:
  }
    a2();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = &a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  v23 = *(void **)&a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
  uint64_t v24 = *(void *)&a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
  id v25 = *(id *)&a1[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  id v26 = v23;
  swift_bridgeObjectRetain();
  id v27 = [v9 clearColor];
  if (v27)
  {
    id v28 = v27;

    id v25 = v28;
  }
  int v29 = *(void **)v22;
  id v30 = (void *)*((void *)v22 + 1);
  uint64_t v31 = *((void *)v22 + 2);
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v26;
  *((void *)v22 + 2) = v24;
  id v32 = v26;
  swift_bridgeObjectRetain_n();
  id v33 = v25;
  id v34 = v32;
  id v35 = v33;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_16;
  }
  sub_10007C1D0(v24, v31);
  char v37 = v36;
  swift_bridgeObjectRelease();

  if ((v37 & 1) == 0) {
LABEL_16:
  }
    a2();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v38 = a1[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  a1[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if ((v38 & 1) == 0)
  {
    [*(id *)&a1[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView] removeFromSuperview];
    sub_100088B54();
    id v39 = *(void **)&a1[*v47];
    id v40 = &a1[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v41 = *(id *)&a1[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
    id v42 = [v41 colorWithAlphaComponent:0.25];
    id v43 = (void *)*((void *)v40 + 1);
    v44 = *(void (**)(id, id, void *, void *))((swift_isaMask & *v39) + 0xD0);
    id v45 = v43;
    v44(v41, v42, v43, &_swiftEmptyDictionarySingleton);
  }
  return a1;
}

void sub_1000063CC()
{
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for ClimateRoleViewController();
  [super viewDidLoad];
  id v1 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setText:v2];

  id v3 = [v0 view];
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v4 = v3;
  [v3 addSubview:v1];

  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000B1F40;
  id v6 = [v1 centerXAnchor];
  id v7 = [v0 view];
  if (!v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = v7;
  id v9 = [v7 centerXAnchor];

  id v10 = [v6 constraintEqualToAnchor:v9];
  *(void *)(v5 + 32) = v10;
  id v11 = [v1 centerYAnchor];
  id v12 = [v0 view];
  if (v12)
  {
    id v13 = v12;
    v14 = self;
    id v15 = [v13 centerYAnchor];

    id v16 = [v11 constraintEqualToAnchor:v15];
    *(void *)(v5 + 40) = v16;
    specialized Array._endMutation()();
    sub_100006774();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v14 activateConstraints:isa];

    return;
  }
LABEL_7:
  __break(1u);
}

id sub_1000066C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateRoleViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateRoleViewController()
{
  return self;
}

uint64_t sub_100006730(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100006774()
{
  unint64_t result = qword_1000E4CF0;
  if (!qword_1000E4CF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E4CF0);
  }
  return result;
}

uint64_t sub_1000067B4()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateDefrostServiceButton_defrost);
  unsigned int v2 = [v1 level];
  unsigned int v3 = [v1 levelInvalid];
  uint64_t v4 = 9;
  if (!v3) {
    uint64_t v4 = 1;
  }
  uint64_t v5 = 8;
  if (!v3) {
    uint64_t v5 = 0;
  }
  if (v2) {
    return v4;
  }
  else {
    return v5;
  }
}

unint64_t sub_10000681C()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v7 = (char *)&v12 - v6;
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateDefrostServiceButton_defrost);
  sub_100007310(0, &qword_1000E5540);
  CAFPositionedRequired.layoutKey.getter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for CAUVehicleLayoutKey.windshield_rear(_:), v1);
  sub_10000734C();
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v4, v1);
  v10(v7, v1);
  if (v9) {
    return 0xD00000000000001ELL;
  }
  if ([v8 hasBlownAir]) {
    return 0xD00000000000001FLL;
  }
  return 0xD000000000000017;
}

char *sub_1000069F4(void *a1, unsigned __int8 a2)
{
  *(void *)&v2[OBJC_IVAR____TtC7Climate27ClimateDefrostServiceButton_defrost] = a1;
  v69.receiver = v2;
  v69.super_class = (Class)type metadata accessor for ClimateDefrostServiceButton();
  id v5 = a1;
  [super init];
  [v5 registerObserver:v6];
  id v7 = (char *)v6;
  unint64_t v8 = sub_10000681C();
  unint64_t v10 = v9;
  id v11 = (unint64_t *)&v7[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  unint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  *id v11 = v8;
  v11[1] = v10;
  if (v10)
  {
    if (v13)
    {
      BOOL v14 = v8 == v12 && v13 == v10;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
  if (v13)
  {
LABEL_10:
    ClimateButton.updateClimateConfiguration()();
LABEL_11:

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

LABEL_12:
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v5;
  id v17 = (uint64_t *)&v7[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v18 = *v17;
  *id v17 = (uint64_t)sub_100007294;
  v17[1] = v16;
  id v19 = v5;
  sub_100005690(v18);
  if ((a2 | 2) == 3)
  {
    id v20 = [v7 titleLabel];
    if (v20)
    {
      char v21 = v20;
      if (qword_1000E46F8 != -1) {
        swift_once();
      }
      [v21 setFont:qword_1000EA820];
    }
    id v64 = v19;
    int v22 = v7[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v7[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if (v22 != 1)
    {
      v23 = *(void **)&v7[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
      uint64_t v24 = v7;
      [v23 removeFromSuperview];
      sub_100088B54();
    }
    uint64_t v25 = qword_1000E46D0;
    id v26 = v7;
    if (v25 != -1) {
      swift_once();
    }
    id v27 = (void *)qword_1000EA770;
    id v28 = *(void **)algn_1000EA778;
    uint64_t v29 = qword_1000EA780;
    id v30 = (void **)&v26[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v31 = *(void **)&v26[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v65 = *(void *)&v26[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
    v67 = *(void **)&v26[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
    *id v30 = (void *)qword_1000EA770;
    v30[1] = v28;
    v30[2] = (void *)v29;
    id v32 = v27;
    id v33 = v28;
    swift_bridgeObjectRetain_n();
    id v63 = v32;
    id v34 = v33;
    id v35 = *v30;
    char v36 = v30[1];
    uint64_t v37 = (uint64_t)v30[2];
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v38 = v35;
    id v39 = v36;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v37, v65);
      char v41 = v40;
      swift_bridgeObjectRelease();

      if (v41)
      {
LABEL_27:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = qword_1000E46C8;
        id v43 = v26;
        if (v42 != -1) {
          swift_once();
        }
        v44 = (void *)qword_1000EA758;
        id v45 = (void *)qword_1000EA760;
        uint64_t v46 = qword_1000EA768;
        v47 = (void **)&v43[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        uint64_t v48 = *(void **)&v43[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        v68 = *(void **)&v43[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
        uint64_t v49 = *(void *)&v43[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
        void *v47 = (void *)qword_1000EA758;
        v47[1] = v45;
        v47[2] = (void *)v46;
        id v50 = v44;
        id v51 = v45;
        swift_bridgeObjectRetain_n();
        id v66 = v50;
        id v52 = v51;
        uint64_t v53 = *v47;
        id v54 = v47[1];
        uint64_t v55 = (uint64_t)v47[2];
        id v56 = v53;
        id v57 = v54;
        swift_bridgeObjectRetain();
        if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
        {
          sub_10007C1D0(v55, v49);
          char v59 = v58;
          swift_bridgeObjectRelease();

          if (v59) {
            goto LABEL_35;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(void))((swift_isaMask & *(void *)v43) + 0x228))();
LABEL_35:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v19 = v64;
        goto LABEL_36;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void))((swift_isaMask & *(void *)v26) + 0x228))();
    goto LABEL_27;
  }
LABEL_36:
  id v60 = v7;
  sub_10009F8A4();
  v61 = *(void **)&v60[OBJC_IVAR____TtC7Climate27ClimateDefrostServiceButton_defrost];
  [v61 level];
  [v60 setEnabled:[v61 levelInvalid] ^ 1];
  sub_10008896C();
  sub_100088B54();

  return v60;
}

void sub_100007010(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (char *)Strong;
    [a3 setLevel:[a3 level] == 0];
    sub_10009F8A4();
    id v6 = *(void **)&v5[OBJC_IVAR____TtC7Climate27ClimateDefrostServiceButton_defrost];
    [v6 level];
    [v5 setEnabled:[v6 levelInvalid] ^ 1];
    sub_10008896C();
    sub_100088B54();
  }
}

void sub_100007138()
{
}

id sub_100007148()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateDefrostServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateDefrostServiceButton()
{
  return self;
}

uint64_t sub_10000721C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100007254()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100007294(uint64_t a1)
{
  sub_100007010(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_10000729C()
{
  sub_10009F8A4();
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateDefrostServiceButton_defrost];
  [v1 level];
  [v0 setEnabled:[v1 levelInvalid] ^ 1];
  sub_10008896C();

  return sub_100088B54();
}

uint64_t sub_100007310(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10000734C()
{
  unint64_t result = qword_1000E4A30;
  if (!qword_1000E4A30)
  {
    type metadata accessor for CAUVehicleLayoutKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4A30);
  }
  return result;
}

void **sub_1000073A4(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    id v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CAUVehicleLayout();
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    unint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (void **)((char *)v7 + v14);
    uint64_t v16 = (char *)a2 + v14;
    id v17 = *(void **)v16;
    uint64_t v18 = *((void *)v16 + 1);
    *uint64_t v15 = *(void *)v16;
    v15[1] = v18;
    id v19 = v17;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1000074B4(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for CAUVehicleLayout();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void **sub_10000754C(void **a1, void **a2, uint64_t a3)
{
  id v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CAUVehicleLayout();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void **)v15;
  uint64_t v17 = *((void *)v15 + 1);
  void *v14 = *(void *)v15;
  v14[1] = v17;
  id v18 = v16;
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_100007610(void **a1, void **a2, uint64_t a3)
{
  id v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for CAUVehicleLayout();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void **)((char *)a2 + v13);
  uint64_t v17 = *(void **)v14;
  *(void *)uint64_t v14 = v16;
  id v18 = v16;

  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1000076E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CAUVehicleLayout();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **sub_100007778(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CAUVehicleLayout();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (void **)((char *)a2 + v11);
  uint64_t v14 = *(void **)((char *)a1 + v11);
  *(void **)((char *)a1 + v11) = *v13;

  *((void *)v12 + 1) = v13[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100007838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000784C);
}

uint64_t sub_10000784C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CAUVehicleLayout();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000078FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100007910);
}

void *sub_100007910(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CAUVehicleLayout();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ClimateAssets()
{
  uint64_t result = qword_1000E4AF8;
  if (!qword_1000E4AF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100007A04()
{
  uint64_t result = type metadata accessor for CAUVehicleLayout();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100007AA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CAUResource();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CAUVehicleLayout();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter();
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    uint64_t v29 = a2;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for CAUResource.vehicleLayout(_:), v4);
    sub_100008128();
    dispatch thunk of CAUAssetLibrary.asset<A>(for:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    id v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v19(v14, v11, v8);
    id v20 = v16;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100008180(v20, a1);
    uint64_t v23 = v22;
    uint64_t v24 = type metadata accessor for ClimateAssets();
    uint64_t v25 = v29;
    v19((char *)v29 + *(int *)(v24 + 20), v14, v8);
    void *v25 = v20;
    id v26 = (void *)((char *)v25 + *(int *)(v24 + 24));
    *id v26 = v21;
    v26[1] = v23;
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v25, 0, 1, v24);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v17 = type metadata accessor for ClimateAssets();
    id v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    return v18(a2, 1, 1, v17);
  }
}

unint64_t sub_100008128()
{
  unint64_t result = qword_1000E4B38;
  if (!qword_1000E4B38)
  {
    type metadata accessor for CAUVehicleLayout();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4B38);
  }
  return result;
}

uint64_t sub_100008180(void *a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v74 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v67 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v70 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAUResource();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v13 = *(void (**)(char *, void, uint64_t, __n128))(v6 + 104);
  v13((char *)&v54 - v11, enum case for CAUResource.cabin(_:), v5, v10);
  uint64_t v14 = CAUAssetLibrary.asset(for:)();
  uint64_t v15 = v2;
  if (v2)
  {

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    return (uint64_t)v12;
  }
  uint64_t v16 = (void *)v14;
  id v63 = (void (*)(char *, void, uint64_t))v13;
  uint64_t v64 = v6 + 104;
  uint64_t v65 = v8;
  uint64_t v66 = v5;
  uint64_t v17 = v67;
  id v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v18 = v6 + 8;
  uint64_t v62 = v19;
  v19(v12, v5);
  uint64_t v55 = v16;
  id v20 = (void *)sub_100033360((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = *(void *)(v56 + 16);
  if (!v21)
  {
LABEL_20:
    uint64_t v12 = v55;

    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  uint64_t v22 = v18;
  uint64_t v23 = v17 + 16;
  objc_super v69 = *(void (**)(char *))(v17 + 16);
  uint64_t v24 = v56 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v68 = *(void *)(v23 + 56);
  unsigned int v61 = enum case for CAUAsset.Seat.State.selected(_:);
  unsigned int v60 = enum case for CAUResource.seat(_:);
  uint64_t v67 = v23;
  char v58 = (void (**)(uint64_t, uint64_t))(v23 - 8);
  swift_bridgeObjectRetain();
  uint64_t v25 = v70;
  uint64_t v26 = v74;
  uint64_t v27 = v66;
  id v57 = a1;
  uint64_t v59 = v22;
  while (1)
  {
    uint64_t v74 = (uint64_t)v20;
    uint64_t v72 = v21;
    uint64_t v29 = v69;
    ((void (*)(uint64_t, uint64_t, uint64_t))v69)(v25, v24, v26);
    uint64_t v30 = sub_100006730(&qword_1000E4B40);
    uint64_t v12 = v65;
    uint64_t v31 = v24;
    id v32 = &v65[*(int *)(v30 + 48)];
    uint64_t v73 = v31;
    v29(v65);
    uint64_t v33 = type metadata accessor for CAUAsset.Seat.State();
    (*(void (**)(char *, void, uint64_t))(*(void *)(v33 - 8) + 104))(v32, v61, v33);
    v63(v12, v60, v27);
    uint64_t v34 = CAUAssetLibrary.asset(for:)();
    uint64_t v35 = v27;
    if (v15)
    {
      v62(v12, v27);
      (*v58)(v25, v26);

      id v52 = v55;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
    uint64_t v36 = v34;
    uint64_t v37 = v26;
    uint64_t v71 = 0;
    v62(v12, v35);
    uint64_t v38 = v74;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v75 = (void *)v38;
    unint64_t v41 = sub_10007C5C4(v25);
    uint64_t v42 = *(void *)(v38 + 16);
    BOOL v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    char v45 = v40;
    if (*(void *)(v38 + 24) >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1000408D8();
      }
    }
    else
    {
      sub_10003B524(v44, isUniquelyReferenced_nonNull_native);
      unint64_t v46 = sub_10007C5C4(v70);
      if ((v45 & 1) != (v47 & 1)) {
        goto LABEL_24;
      }
      unint64_t v41 = v46;
    }
    uint64_t v26 = v37;
    id v20 = v75;
    uint64_t v48 = v73;
    if (v45)
    {
      uint64_t v28 = v75[7];

      *(void *)(v28 + 8 * v41) = v36;
      uint64_t v25 = v70;
    }
    else
    {
      v75[(v41 >> 6) + 8] |= 1 << v41;
      uint64_t v25 = v70;
      ((void (*)(unint64_t, uint64_t, uint64_t))v69)(v20[6] + v41 * v68, v70, v26);
      *(void *)(v20[7] + 8 * v41) = v36;
      uint64_t v49 = v20[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_23;
      }
      v20[2] = v51;
    }
    swift_bridgeObjectRelease();
    (*v58)(v25, v26);
    uint64_t v24 = v48 + v68;
    uint64_t v15 = v71;
    uint64_t v21 = v72 - 1;
    a1 = v57;
    uint64_t v27 = v66;
    if (v72 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000086E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a3 + 16))
  {
    unint64_t v10 = sub_10007C5C4(a1);
    if (v11) {
      return *(void *)(*(void *)(a3 + 56) + 8 * v10);
    }
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1000EA798;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = a2;
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v16 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v21 = sub_10000A56C(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing selected zone asset for %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    a2 = v20;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return a2;
}

void *initializeBufferWithCopyOfBuffer for ClimateAssetImages(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ClimateAssetImages(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ClimateAssetImages(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ClimateAssetImages(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

id *assignWithTake for ClimateAssetImages(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClimateAssetImages(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClimateAssetImages(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateAssetImages()
{
  return &type metadata for ClimateAssetImages;
}

void sub_100008B04()
{
  unint64_t v1 = self;
  id v2 = v0;
  id v3 = [v1 sharedApplication];
  id v4 = [v3 delegate];

  if (v4)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v5 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    uint64_t v6 = v5[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    id v7 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneTargetTemperatureStepper());
    uint64_t v8 = sub_10002766C(v2, v6, 2);
    [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v9 = qword_1000E46B8;
    unint64_t v10 = v8;
    if (v9 != -1) {
      swift_once();
    }
    char v11 = (void *)qword_1000EA728;
    uint64_t v12 = (void *)qword_1000EA730;
    uint64_t v13 = qword_1000EA738;
    uint64_t v14 = (void **)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
    uint64_t v15 = *(void **)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
    uint64_t v16 = *(void **)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8];
    uint64_t v42 = *(void *)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16];
    uint8_t *v14 = (void *)qword_1000EA728;
    v14[1] = v12;
    v14[2] = (void *)v13;
    id v17 = v11;
    id v18 = v12;
    swift_bridgeObjectRetain_n();
    id v40 = v17;
    id v38 = v18;
    uint64_t v19 = *v14;
    uint64_t v20 = v14[1];
    uint64_t v21 = (uint64_t)v14[2];
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v22 = v19;
    id v23 = v20;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v21, v42);
      char v25 = v24;
      swift_bridgeObjectRelease();

      if (v25)
      {

LABEL_22:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        sub_100006730(&qword_1000E4B50);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_1000B2000;
        *(void *)(v37 + 32) = v10;
        *(void *)(v37 + 40) = &off_1000CBD68;
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (v10[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial] != 1)
    {
      [self clearColor:v38, v40];
LABEL_21:
      [v10 setBackgroundColor:v36];

      goto LABEL_22;
    }
    uint64_t v26 = *v14;
    uint64_t v27 = v14[1];
    uint64_t v28 = (uint64_t)v14[2];
    uint64_t v29 = (id *)&v10[OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature];
    swift_beginAccess();
    id v30 = *v29;
    id v31 = v26;
    id v32 = v27;
    swift_bridgeObjectRetain();
    LODWORD(v26) = [v30 targetTemperatureRestricted:v38, v40];
    unsigned int v33 = [*v29 targetTemperatureInvalid];
    unsigned int v34 = [*v29 targetTemperatureDisabled];
    if (v26)
    {
      char v35 = 4;
      if (v33) {
        char v35 = 12;
      }
      if ((v34 & 1) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      char v35 = 8;
      if (!v33) {
        char v35 = 0;
      }
      if (!v34) {
        goto LABEL_20;
      }
    }
    v35 |= 0x10u;
LABEL_20:
    id v36 = sub_10006511C(v35, v31, v28);
    swift_bridgeObjectRelease();

    goto LABEL_21;
  }
  __break(1u);
}

void sub_100008EDC()
{
}

void sub_100008F00(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self sharedApplication];
  id v10 = [v9 delegate];

  if (v10)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v11 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();

    swift_release();
    swift_release();
    uint64_t v12 = type metadata accessor for ClimateSystemManager();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v8, 1, v12) == 1)
    {
      sub_10000A404((uint64_t)v8, &qword_1000E5AC0);
      uint64_t v13 = type metadata accessor for ClimateZone();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
    }
    else
    {
      sub_100007310(0, &qword_1000E4B48);
      CAFPositionedRequired.layoutKey.getter();
      uint64_t v14 = *(void *)&v8[*(int *)(v12 + 36)];
      if (*(void *)(v14 + 16) && (unint64_t v15 = sub_10007C5C4((uint64_t)v5), (v16 & 1) != 0))
      {
        unint64_t v17 = v15;
        uint64_t v18 = *(void *)(v14 + 56);
        uint64_t v19 = type metadata accessor for ClimateZone();
        uint64_t v20 = *(void *)(v19 - 8);
        sub_10000ABC4(v18 + *(void *)(v20 + 72) * v17, a1);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
      }
      else
      {
        uint64_t v21 = type metadata accessor for ClimateZone();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a1, 1, 1, v21);
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_10000A460((uint64_t)v8);
    }
  }
  else
  {
    __break(1u);
  }
}

void CAFTemperature.zoneSynced.getter()
{
  uint64_t v0 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v0 - 8);
  unsigned int v34 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v33 - v10;
  id v35 = self;
  id v12 = [v35 sharedApplication];
  id v13 = [v12 delegate];

  if (!v13)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v14 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v15 = [*(id *)&v14[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] currentSession];
  if (v15)
  {
    char v16 = v15;
    unint64_t v17 = v9;
    id v18 = [v15 configuration];

    LOBYTE(v16) = [v18 rightHandDrive];
    id v9 = v17;
    if (v16)
    {
      uint64_t v19 = (unsigned int *)&enum case for CAUVehicleLayoutKey.seat_front_right(_:);
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint64_t v19 = (unsigned int *)&enum case for CAUVehicleLayoutKey.seat_front_left(_:);
LABEL_7:
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v11, *v19, v5);
  sub_100007310(0, &qword_1000E4B48);
  CAFPositioned.layoutKey.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    uint64_t v20 = (uint64_t *)&unk_1000E7C60;
LABEL_9:
    sub_10000A404((uint64_t)v4, v20);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
  sub_10000734C();
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v9, v5);
LABEL_12:
    v21(v11, v5);
    return;
  }
  uint64_t v22 = v9;
  id v23 = [v35 sharedApplication];
  id v24 = [v23 delegate];

  if (!v24) {
    goto LABEL_20;
  }
  swift_dynamicCastClassUnconditional();
  id v25 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v4 = v34;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v26 = type metadata accessor for ClimateSystemManager();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v4, 1, v26) == 1)
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    v27(v9, v5);
    v27(v11, v5);
    uint64_t v20 = &qword_1000E5AC0;
    goto LABEL_9;
  }
  id v28 = *((id *)v4 + 1);
  sub_10000A460((uint64_t)v4);
  id v29 = [v28 zonesSynceds];

  if (!v29)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v22, v5);
    goto LABEL_12;
  }
  sub_100007310(0, (unint64_t *)&qword_1000E5430);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v31);
  *(&v33 - 2) = (uint64_t)v22;
  sub_10000A1C8((uint64_t (*)(id *))sub_10000A4BC, (uint64_t)(&v33 - 4), v30);
  swift_bridgeObjectRelease();
  id v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32(v22, v5);
  v32(v11, v5);
}

void CAFTemperature.adjustTargetTemperatureIfNeeded(visibleTemperature:)(uint64_t a1)
{
  uint64_t v75 = a1;
  uint64_t v1 = type metadata accessor for CAFRange.StepDirection();
  uint64_t v72 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v73 = (char *)v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100006730(&qword_1000E5040);
  uint64_t v74 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  objc_super v69 = (char *)v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)v64 - v6;
  __chkstk_darwin(v7);
  uint64_t v71 = (char *)v64 - v8;
  __chkstk_darwin(v9);
  id v11 = (char *)v64 - v10;
  uint64_t v12 = type metadata accessor for Locale();
  __chkstk_darwin(v12 - 8);
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  uint64_t v13 = sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  static Locale.current.getter();
  uint64_t v14 = NSDimension.init(forLocale:)();
  id v15 = [self fahrenheit];
  char v16 = static NSObject.== infix(_:_:)();

  if (v16)
  {
    id v17 = [v76 targetTemperature];
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A524((unint64_t *)&unk_1000E55E0);
    LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = v74 + 8;
    uint64_t v19 = *(void (**)(char *, uint64_t))(v74 + 8);
    v19(v11, v3);
    if ((v17 & 1) == 0)
    {
      id v20 = v76;
      id v21 = [v76 targetTemperature];
      static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

      id v22 = [v20 targetTemperatureRange];
      uint64_t v23 = Measurement<>.readableString(in:)();
      uint64_t v25 = v24;

      v19(v11, v3);
      if (v25)
      {
        v64[1] = v13;
        uint64_t v65 = v19;
        uint64_t v67 = v18;
        uint64_t v68 = v3;
        uint64_t v66 = v1;
        id v26 = v76;
        id v27 = [v76 targetTemperatureRange];
        uint64_t v28 = Measurement<>.readableString(in:)();
        uint64_t v30 = v29;

        if (!v30)
        {
          swift_bridgeObjectRelease();
          return;
        }
        if (v23 == v28 && v25 == v30)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v31 = v66;
          id v32 = v65;
          uint64_t v33 = v68;
          p_type = (char **)(&stru_1000D5FF0 + 16);
        }
        else
        {
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v31 = v66;
          id v32 = v65;
          uint64_t v33 = v68;
          p_type = &stru_1000D5FF0.type;
          if ((v35 & 1) == 0) {
            return;
          }
        }
        id v36 = v32;
        id v37 = [v26 p_type[466]];
        static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10000A524((unint64_t *)&qword_1000E7790);
        char v38 = dispatch thunk of static Comparable.< infix(_:_:)();
        v36(v11, v33);
        id v39 = (unsigned int *)&enum case for CAFRange.StepDirection.up(_:);
        if ((v38 & 1) == 0) {
          id v39 = (unsigned int *)&enum case for CAFRange.StepDirection.down(_:);
        }
        (*(void (**)(char *, void, uint64_t))(v72 + 104))(v73, *v39, v31);
        id v40 = [v26 p_type[466]];
        static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v41 = (void *)Measurement.unit.getter();
        v36(v11, v33);
        id v42 = [v26 targetTemperatureRange];
        id v43 = [v42 step];

        [v43 doubleValue];
        id v76 = v41;
        Measurement.init(value:unit:)();
        id v44 = [v26 p_type[466]];
        static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

        char v45 = v70;
        Measurement<>.localeStep(_:by:)();
        v36(v11, v33);
        uint64_t v46 = v33;
        if (qword_1000E46D8 != -1) {
          swift_once();
        }
        char v47 = qword_1000EA798;
        uint64_t v48 = v69;
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v69, v45, v33);
        id v49 = v26;
        os_log_type_t v50 = static os_log_type_t.default.getter();
        int v51 = v50;
        if (os_log_type_enabled(v47, v50))
        {
          uint64_t v52 = swift_slowAlloc();
          LODWORD(v75) = v51;
          uint64_t v53 = v52;
          uint64_t v74 = swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136446722;
          id v54 = [v49 targetTemperature:v53 + 4];
          static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

          sub_10000A524((unint64_t *)&unk_1000E7780);
          uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v57 = v56;
          char v58 = v11;
          uint64_t v59 = v65;
          v65(v58, v68);
          uint64_t v77 = sub_10000A56C(v55, v57, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v53 + 12) = 2082;
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v77 = sub_10000A56C(v60, v61, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v59(v48, v68);
          *(_WORD *)(v53 + 22) = 2112;
          uint64_t v77 = (uint64_t)v49;
          id v62 = v49;
          char v45 = v70;
          uint64_t v46 = v68;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)uint64_t v74 = v49;

          _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v75, "Temperature adjusted from: %{public}s to :%{public}s for service: %@", (uint8_t *)v53, 0x20u);
          sub_100006730(&qword_1000E4F30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v59 = v65;
          v65(v48, v46);
        }
        NSMeasurement v79 = Measurement._bridgeToObjectiveC()();
        Class isa = v79.super.isa;
        [v49 setTargetTemperature:[v79 super.isa] _doubleValue:v79._doubleValue];

        v59(v45, v46);
        v59(v71, v46);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v66);
      }
    }
  }
}

void *sub_10000A1C8(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10000A2F0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10000A370(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000ACD8(a1, (uint64_t)v4);
  return sub_1000352F8((uint64_t)v4);
}

uint64_t sub_10000A404(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006730(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A460(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClimateSystemManager();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000A4BC()
{
  return sub_10007F94C() & 1;
}

uint64_t sub_10000A4DC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000A524(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A4DC(&qword_1000E5040);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A56C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000A640(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000AC78((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000AC78((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000AC28((uint64_t)v12);
  return v7;
}

uint64_t sub_10000A640(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10000A7FC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10000A7FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10000A894(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10000AA74(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000AA74(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10000A894(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10000AA0C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10000AA0C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100006730(&qword_1000E4B58);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10000AA74(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006730(&qword_1000E4B58);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000ABC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000AC28(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000AC78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000ACD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E5AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10000AD40(uint64_t a1)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E5450);
  __chkstk_darwin(v3 - 8);
  size_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730(&qword_1000E4B98);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006730((uint64_t *)&unk_1000E5460);
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v36 = v9;
  __chkstk_darwin(v9);
  size_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006730(&qword_1000E4BA0);
  uint64_t v37 = *(void *)(v12 - 8);
  uint64_t v38 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006730(&qword_1000E4BA8);
  uint64_t v39 = *(void *)(v15 - 8);
  uint64_t v40 = v15;
  __chkstk_darwin(v15);
  id v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v19 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v19 = &_swiftEmptySetSingleton;
  }
  *(void *)&v18[OBJC_IVAR____TtC7Climate40ClimatePhysicalControlBarsViewController_cancellables] = v19;
  *(void *)&v18[OBJC_IVAR____TtC7Climate40ClimatePhysicalControlBarsViewController_physicalControls] = a1;

  id v20 = (objc_class *)type metadata accessor for ClimatePhysicalControlBarsViewController();
  v42.receiver = v18;
  v42.super_class = v20;
  id v21 = [super initWithNibName:0 bundle:0];
  uint64_t v22 = qword_1000E46D8;
  id v23 = v21;
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1000EA798;
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Physical control bars created", v26, 2u);
    swift_slowDealloc();
  }
  id v27 = [self sharedApplication];
  id v28 = [v27 delegate];

  if (v28)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v29 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_beginAccess();
    sub_100006730(&qword_1000E4BB0);
    Published.projectedValue.getter();
    swift_endAccess();

    id v41 = [self mainRunLoop];
    uint64_t v30 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v5, 1, 1, v30);
    sub_100007310(0, (unint64_t *)&unk_1000E5470);
    sub_10000D02C(&qword_1000E4BB8, &qword_1000E4B98);
    sub_10000CF84();
    Publisher.receive<A>(on:options:)();
    sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
    type metadata accessor for ClimateSystemManager();
    sub_10000D02C(&qword_1000E4BC0, (uint64_t *)&unk_1000E5460);
    uint64_t v31 = v36;
    Publisher.compactMap<A>(_:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v31);
    sub_10000D02C(&qword_1000E4BC8, &qword_1000E4BA0);
    uint64_t v32 = v38;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v32);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C(&qword_1000E4BD0, &qword_1000E4BA8);
    uint64_t v33 = v40;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v33);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10000B46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000D070(a1, a2, &qword_1000E5AC0);
}

uint64_t sub_10000B490(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClimateSystemManager();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730((uint64_t *)&unk_1000E5530);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  int64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  sub_10000D070(a1 + *(int *)(v2 + 28), (uint64_t)&v16 - v9, (uint64_t *)&unk_1000E5530);
  uint64_t v11 = type metadata accessor for ClimateZone();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  int v13 = v12(v10, 1, v11);
  sub_10000A404((uint64_t)v10, (uint64_t *)&unk_1000E5530);
  sub_10000D138(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  if (v13 == 1)
  {
    sub_10000D070((uint64_t)&v4[*(int *)(v2 + 32)], (uint64_t)v8, (uint64_t *)&unk_1000E5530);
    sub_10000D204((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    BOOL v14 = v12(v8, 1, v11) != 1;
    sub_10000A404((uint64_t)v8, (uint64_t *)&unk_1000E5530);
  }
  else
  {
    sub_10000D204((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    return 1;
  }
  return v14;
}

void sub_10000B6A4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10000C204(a1);
    id v4 = [self sharedApplication];
    id v5 = [v4 delegate];

    if (v5)
    {
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      uint64_t v6 = (char *)sub_10008EAA4();
      swift_unknownObjectRelease();
      uint64_t v7 = *(id *)&v6[OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager];

      v7[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_overlayViewControllerDidLoad] = 1;
      sub_100094488();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10000B874(void *a1)
{
  id v2 = v1;
  id v4 = (void *)type metadata accessor for CAUEdge();
  uint64_t v5 = *(v4 - 1);
  __chkstk_darwin(v4);
  p_type = (char **)((char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [self sharedApplication];
  id v9 = [v8 delegate];

  if (!v9) {
    goto LABEL_53;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v10 = sub_10008EAA4();
  swift_unknownObjectRelease();
  double v11 = sub_10003496C();

  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1000EA798;
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    BOOL v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)BOOL v14 = 134349056;
    double v62 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Applying constraints to physical control bar items with screen scale: %{public}f", v14, 0xCu);
    swift_slowDealloc();
  }
  double v15 = (double)(int)CAUPhysicalControlBarsButtonLayoutInfo.startingPoint.getter() / v11;
  double v16 = (double)(int)CAUPhysicalControlBarsButtonLayoutInfo.length.getter() / v11;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000B1F40;
  id v18 = [a1 widthAnchor];
  uint64_t v19 = v18;
  if (v16 <= 45.0) {
    double v20 = v16;
  }
  else {
    double v20 = 45.0;
  }
  id v21 = [v18 constraintEqualToConstant:v20];

  *(void *)(v17 + 32) = v21;
  id v22 = [a1 heightAnchor];
  id v23 = [v22 constraintEqualToConstant:45.0];

  *(void *)(v17 + 40) = v23;
  double v62 = *(double *)&v17;
  specialized Array._endMutation()();
  CAUPhysicalControlBarsButtonLayoutInfo.edge.getter();
  LODWORD(v24) = (*(uint64_t (**)(char **, void *))(v5 + 88))(p_type, v4);
  if (v24 == enum case for CAUEdge.top(_:))
  {
    id v25 = [a1 leftAnchor];
    id v26 = [v2 view];
    if (!v26)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    id v27 = v26;
    id v28 = [v26 leftAnchor];

    id v4 = [v25 constraintEqualToAnchor:v28 constant:v15];
    p_type = &stru_1000D5FF0.type;
    id v29 = [a1 topAnchor];
    id v30 = [v2 view];
    if (!v30)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v31 = v30;
    id v32 = [v30 topAnchor];

    id v2 = [v29 constraintEqualToAnchor:v32];
    if (*(void *)&v62 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v24 = (uint64_t)a1 + 2;
      if (!__OFADD__(a1, 2)) {
        goto LABEL_35;
      }
    }
    else
    {
      a1 = *(void **)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v24 = (uint64_t)a1 + 2;
      if (!__OFADD__(a1, 2)) {
        goto LABEL_35;
      }
    }
    __break(1u);
  }
  if (v24 == enum case for CAUEdge.left(_:))
  {
    id v33 = [a1 topAnchor];
    id v34 = [v2 view];
    if (!v34)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v35 = v34;
    id v36 = [v34 topAnchor];

    id v4 = [v33 constraintEqualToAnchor:v36 constant:v15];
    p_type = &stru_1000D5FF0.type;
    id v37 = [a1 leftAnchor];
    id v38 = [v2 view];
    if (!v38)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v39 = v38;
    id v40 = [v38 leftAnchor];

    id v2 = [v37 constraintEqualToAnchor:v40];
    if (*(void *)&v62 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v24 = (uint64_t)a1 + 2;
      if (!__OFADD__(a1, 2)) {
        goto LABEL_35;
      }
    }
    else
    {
      a1 = *(void **)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v24 = (uint64_t)a1 + 2;
      if (!__OFADD__(a1, 2)) {
        goto LABEL_35;
      }
    }
    __break(1u);
  }
  if (v24 == enum case for CAUEdge.bottom(_:))
  {
    id v41 = [a1 leftAnchor];
    id v42 = [v2 view];
    if (!v42)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    id v43 = v42;
    id v44 = [v42 leftAnchor];

    id v4 = [v41 constraintEqualToAnchor:v44 constant:v15];
    p_type = &stru_1000D5FF0.type;
    id v45 = [a1 bottomAnchor];
    id v46 = [v2 view];
    if (!v46)
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    char v47 = v46;
    id v48 = [v46 bottomAnchor];

    id v2 = [v45 constraintEqualToAnchor:v48];
    if (*(void *)&v62 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v24 = (uint64_t)a1 + 2;
      if (!__OFADD__(a1, 2)) {
        goto LABEL_35;
      }
    }
    else
    {
      a1 = *(void **)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v24 = (uint64_t)a1 + 2;
      if (!__OFADD__(a1, 2)) {
        goto LABEL_35;
      }
    }
    __break(1u);
  }
  if (v24 != enum case for CAUEdge.right(_:))
  {
    (*(void (**)(char **, void *))(v5 + 8))(p_type, v4);
    return;
  }
  id v49 = [a1 topAnchor];
  id v50 = [v2 view];
  if (!v50) {
    goto LABEL_60;
  }
  int v51 = v50;
  id v52 = [v50 topAnchor];

  id v4 = [v49 constraintEqualToAnchor:v52 constant:v15];
  id v53 = [a1 rightAnchor];
  id v54 = [v2 view];
  if (!v54)
  {
LABEL_61:
    __break(1u);
    return;
  }
  uint64_t v55 = v54;
  id v56 = [v54 rightAnchor];

  id v2 = [v53 constraintEqualToAnchor:v56];
  if (*(void *)&v62 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v24 = v60 + 2;
    if (!__OFADD__(v60, 2)) {
      goto LABEL_35;
    }
    goto LABEL_52;
  }
  uint64_t v57 = *(void *)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v24 = v57 + 2;
  if (__OFADD__(v57, 2))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
LABEL_35:
  sub_10009CCD4(v24);
  specialized Array._endMutation()();
  char v58 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v59 = v2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v62 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

id sub_10000C204(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ClimateZone();
  uint64_t v89 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v88 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v93 = (uint64_t)&v72 - v6;
  uint64_t v86 = type metadata accessor for CAUPhysicalControlBarsButtonLayoutInfo();
  uint64_t v7 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  v105 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CAUPhysicalControlBarsButton();
  uint64_t v97 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v106 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006730(&qword_1000E4BD8);
  __chkstk_darwin(v11 - 8);
  os_log_type_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  double v16 = (char *)&v72 - v15;
  uint64_t v84 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v77 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v94 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006730(&qword_1000E4BE0);
  __chkstk_darwin(v18 - 8);
  v85 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  uint64_t v81 = (uint64_t)&v72 - v22;
  v91 = v1;
  id result = [v1 view];
  if (!result) {
    goto LABEL_73;
  }
  uint64_t v24 = result;
  id v25 = [result subviews];

  sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62) {
    goto LABEL_71;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  id result = (id)swift_bridgeObjectRelease();
  if (v27) {
    return result;
  }
  uint64_t v28 = *(void *)&v91[OBJC_IVAR____TtC7Climate40ClimatePhysicalControlBarsViewController_physicalControls];
  uint64_t v29 = *(void *)(v28 + 64);
  uint64_t v73 = v28 + 64;
  uint64_t v30 = 1 << *(unsigned char *)(v28 + 32);
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & v29;
  uint64_t v75 = v77 + 16;
  v80 = (void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32);
  uint64_t v96 = v97 + 16;
  uint64_t v95 = v7 + 16;
  v102 = (void (**)(uint64_t, char *, uint64_t))(v97 + 32);
  v101 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  v99 = (void (**)(uint64_t, uint64_t))(v97 + 8);
  v100 = (void (**)(char *, uint64_t))(v7 + 8);
  NSMeasurement v79 = (uint64_t (**)(uint64_t, uint64_t))(v77 + 8);
  int64_t v74 = (unint64_t)(v30 + 63) >> 6;
  int64_t v72 = v74 - 1;
  uint64_t v76 = v28;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v82 = 0;
  uint64_t v33 = v86;
  uint64_t v90 = v7;
  uint64_t v104 = v9;
LABEL_10:
  uint64_t v34 = (uint64_t)v85;
  if (!v32)
  {
    int64_t v39 = v82 + 1;
    if (__OFADD__(v82, 1))
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v39 >= v74)
    {
LABEL_30:
      uint64_t v42 = sub_100006730(&qword_1000E4BE8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v34, 1, 1, v42);
      uint64_t v83 = 0;
      goto LABEL_31;
    }
    unint64_t v40 = *(void *)(v73 + 8 * v39);
    if (v40) {
      goto LABEL_16;
    }
    int64_t v41 = v82 + 2;
    ++v82;
    if (v39 + 1 >= v74) {
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v73 + 8 * v41);
    if (v40) {
      goto LABEL_19;
    }
    int64_t v82 = v39 + 1;
    if (v39 + 2 >= v74) {
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v73 + 8 * (v39 + 2));
    if (v40)
    {
      v39 += 2;
      goto LABEL_16;
    }
    int64_t v41 = v39 + 3;
    int64_t v82 = v39 + 2;
    if (v39 + 3 >= v74) {
      goto LABEL_30;
    }
    unint64_t v40 = *(void *)(v73 + 8 * v41);
    if (v40)
    {
LABEL_19:
      int64_t v39 = v41;
LABEL_16:
      uint64_t v83 = (v40 - 1) & v40;
      unint64_t v35 = __clz(__rbit64(v40)) + (v39 << 6);
      int64_t v82 = v39;
      goto LABEL_12;
    }
    while (1)
    {
      int64_t v39 = v41 + 1;
      if (__OFADD__(v41, 1)) {
        break;
      }
      if (v39 >= v74)
      {
        int64_t v82 = v72;
        goto LABEL_30;
      }
      unint64_t v40 = *(void *)(v73 + 8 * v39);
      ++v41;
      if (v40) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
    return result;
  }
  uint64_t v83 = (v32 - 1) & v32;
  unint64_t v35 = __clz(__rbit64(v32)) | (v82 << 6);
LABEL_12:
  uint64_t v36 = v76;
  (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v85, *(void *)(v76 + 48) + *(void *)(v77 + 72) * v35, v84);
  uint64_t v37 = *(void *)(v36 + 56);
  uint64_t v38 = sub_100006730(&qword_1000E4BE8);
  *(void *)&v85[*(int *)(v38 + 48)] = *(void *)(v37 + 8 * v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v85, 0, 1, v38);
  uint64_t v34 = (uint64_t)v85;
  swift_bridgeObjectRetain();
  uint64_t v7 = v90;
LABEL_31:
  uint64_t v43 = v81;
  sub_10000D0D4(v34, v81, &qword_1000E4BE0);
  uint64_t v44 = sub_100006730(&qword_1000E4BE8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44) != 1)
  {
    uint64_t v45 = *(void *)(v43 + *(int *)(v44 + 48));
    (*v80)(v94, v43, v84);
    int64_t v103 = 0;
    uint64_t v46 = *(void *)(v45 + 64);
    uint64_t v87 = v45 + 64;
    uint64_t v98 = v45;
    uint64_t v47 = 1 << *(unsigned char *)(v45 + 32);
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    else {
      uint64_t v48 = -1;
    }
    unint64_t v49 = v48 & v46;
    int64_t v92 = (unint64_t)(v47 + 63) >> 6;
    int64_t v78 = v92 - 1;
    while (!v49)
    {
      int64_t v58 = v103 + 1;
      if (__OFADD__(v103, 1))
      {
        __break(1u);
        goto LABEL_69;
      }
      if (v58 < v92)
      {
        unint64_t v59 = *(void *)(v87 + 8 * v58);
        if (v59) {
          goto LABEL_45;
        }
        int64_t v60 = v103 + 2;
        ++v103;
        if (v58 + 1 < v92)
        {
          unint64_t v59 = *(void *)(v87 + 8 * v60);
          if (v59) {
            goto LABEL_48;
          }
          int64_t v103 = v58 + 1;
          if (v58 + 2 < v92)
          {
            unint64_t v59 = *(void *)(v87 + 8 * (v58 + 2));
            if (v59)
            {
              v58 += 2;
              goto LABEL_45;
            }
            int64_t v60 = v58 + 3;
            int64_t v103 = v58 + 2;
            if (v58 + 3 < v92)
            {
              unint64_t v59 = *(void *)(v87 + 8 * v60);
              if (!v59)
              {
                while (1)
                {
                  int64_t v58 = v60 + 1;
                  if (__OFADD__(v60, 1)) {
                    break;
                  }
                  if (v58 >= v92)
                  {
                    int64_t v103 = v78;
                    goto LABEL_59;
                  }
                  unint64_t v59 = *(void *)(v87 + 8 * v58);
                  ++v60;
                  if (v59) {
                    goto LABEL_45;
                  }
                }
LABEL_70:
                __break(1u);
LABEL_71:
                swift_bridgeObjectRetain();
                uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                goto LABEL_4;
              }
LABEL_48:
              int64_t v58 = v60;
LABEL_45:
              unint64_t v49 = (v59 - 1) & v59;
              unint64_t v54 = __clz(__rbit64(v59)) + (v58 << 6);
              int64_t v103 = v58;
LABEL_41:
              uint64_t v55 = v98;
              (*(void (**)(char *, unint64_t, uint64_t))(v97 + 16))(v13, *(void *)(v98 + 48) + *(void *)(v97 + 72) * v54, v9);
              unint64_t v56 = *(void *)(v55 + 56) + *(void *)(v7 + 72) * v54;
              uint64_t v57 = sub_100006730((uint64_t *)&unk_1000E4BF0);
              (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(&v13[*(int *)(v57 + 48)], v56, v33);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v13, 0, 1, v57);
              goto LABEL_60;
            }
          }
        }
      }
LABEL_59:
      uint64_t v61 = sub_100006730((uint64_t *)&unk_1000E4BF0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v13, 1, 1, v61);
      unint64_t v49 = 0;
LABEL_60:
      sub_10000D0D4((uint64_t)v13, (uint64_t)v16, &qword_1000E4BD8);
      uint64_t v62 = sub_100006730((uint64_t *)&unk_1000E4BF0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v16, 1, v62) == 1)
      {
        swift_release();
        id result = (id)(*v79)(v94, v84);
        uint64_t v9 = v104;
        unint64_t v32 = v83;
        goto LABEL_10;
      }
      id v63 = &v16[*(int *)(v62 + 48)];
      uint64_t v9 = v104;
      (*v102)(v106, v16, v104);
      (*v101)(v105, v63, v33);
      uint64_t v64 = *(void *)(a1 + *(int *)(type metadata accessor for ClimateSystemManager() + 36));
      if (*(void *)(v64 + 16))
      {
        unint64_t v65 = sub_10007C5C4(v94);
        if (v66)
        {
          uint64_t v67 = v88;
          sub_10000D138(*(void *)(v64 + 56) + *(void *)(v89 + 72) * v65, v88, (uint64_t (*)(void))type metadata accessor for ClimateZone);
          sub_10000D1A0(v67, v93);
          uint64_t v68 = sub_100005AA4(v106);
          if (v68)
          {
            objc_super v69 = v68;
            uint64_t v70 = a1;
            [v68 setTranslatesAutoresizingMaskIntoConstraints:0];
            id v71 = [v91 view];
            if (!v71)
            {
              __break(1u);
              return (id)swift_release();
            }
            id v50 = v71;
            [v71 addSubview:v69];

            sub_10000B874(v69);
            int v51 = self;
            sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v51 activateConstraints:isa];

            a1 = v70;
            uint64_t v33 = v86;
          }
          sub_10000D204(v93, (uint64_t (*)(void))type metadata accessor for ClimateZone);
          uint64_t v7 = v90;
          uint64_t v9 = v104;
        }
      }
      (*v100)(v105, v33);
      (*v99)(v106, v9);
    }
    unint64_t v53 = __clz(__rbit64(v49));
    v49 &= v49 - 1;
    unint64_t v54 = v53 | (v103 << 6);
    goto LABEL_41;
  }
  return (id)swift_release();
}

id sub_10000CEE0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimatePhysicalControlBarsViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimatePhysicalControlBarsViewController()
{
  return self;
}

unint64_t sub_10000CF84()
{
  unint64_t result = qword_1000E5480;
  if (!qword_1000E5480)
  {
    sub_100007310(255, (unint64_t *)&unk_1000E5470);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5480);
  }
  return result;
}

uint64_t sub_10000CFEC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10000D024(uint64_t a1)
{
}

uint64_t sub_10000D02C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A4DC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000D070(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006730(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000D0D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006730(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000D138(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000D1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D204(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000D264()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn);
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature);
  unsigned int v3 = [v2 targetTemperatureRestricted];
  unsigned int v4 = [v2 targetTemperatureInvalid];
  unsigned __int8 v5 = [v2 targetTemperatureDisabled];
  if (v1 == 1)
  {
    if (v3)
    {
      uint64_t v6 = 5;
      if (v4) {
        uint64_t v6 = 13;
      }
      if ((v5 & 1) == 0) {
        return v6;
      }
      return v6 | 0x10;
    }
    uint64_t v6 = 9;
    if (!v4) {
      uint64_t v6 = 1;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else if (v3)
  {
    uint64_t v6 = 4;
    if (v4) {
      uint64_t v6 = 12;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else
  {
    uint64_t v6 = 8;
    if (!v4) {
      uint64_t v6 = 0;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  return v6;
}

void sub_10000D418(char a1)
{
  objc_super v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn;
  if (v2[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn] != v3)
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v9 = qword_1000EA798;
    uint64_t v22 = v2;
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v24 = v21;
      *(_DWORD *)uint64_t v11 = 136446466;
      os_log_t v20 = v9;
      sub_100007310(0, &qword_1000E4B48);
      CAFPositionedRequired.layoutKey.getter();
      uint64_t v12 = CAUVehicleLayoutKey.rawValue.getter();
      unint64_t v14 = v13;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v23 = sub_10000A56C(v12, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      int v15 = v2[v8];
      *(_WORD *)(v11 + 12) = 2080;
      if (v15) {
        uint64_t v16 = 7562585;
      }
      else {
        uint64_t v16 = 28494;
      }
      if (v15) {
        unint64_t v17 = 0xE300000000000000;
      }
      else {
        unint64_t v17 = 0xE200000000000000;
      }
      uint64_t v23 = sub_10000A56C(v16, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v10, "%{public}s selected as active zone: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v18 = v22;
    }
  }
}

uint64_t sub_10000D744()
{
  int v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

void sub_10000D7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  if (!a2)
  {
    if (!v7)
    {
      uint64_t v9 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView)
                    + OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  if (!v7 || (v6 == a1 ? (BOOL v8 = v7 == a2) : (BOOL v8 = 0), !v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)) {
LABEL_10:
  }
    ClimateButton.updateClimateConfiguration()();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView)
                + OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel);
  if (!v5[1])
  {
LABEL_14:
    id v10 = v9;
    NSString v11 = 0;
    goto LABEL_15;
  }
  id v10 = v9;
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_15:
  [v10 setText:v11];
}

void (*sub_10000D8D8(void *a1))(void *a1, char a2)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = ClimateButton.title.modify(v3);
  return sub_10000D934;
}

void sub_10000D934(void *a1, char a2)
{
  int v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[4];
    uint64_t v5 = *(void **)(*(void *)(v4 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView)
                  + OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel);
    uint64_t v6 = v4 + OBJC_IVAR____TtC7Climate13ClimateButton_title;
    swift_beginAccess();
    if (*(void *)(v6 + 8))
    {
      id v7 = v5;
      swift_bridgeObjectRetain();
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v9 = v5;
      NSString v8 = 0;
    }
    [v5 setText:v8];
  }

  free(v3);
}

void *sub_10000DA28(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_unselectedBackgroundView;
  uint64_t v4 = self;
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 materialViewWithRecipe:21];
  v5[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature] = a1;
  id v6 = objc_allocWithZone((Class)type metadata accessor for ClimateTargetTemperatureZoneSelectionButton.LabelsView());
  id v7 = a1;
  id v8 = [v6 init];
  *(void *)&v5[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView] = v8;

  v83.receiver = v5;
  v83.super_class = (Class)type metadata accessor for ClimateTargetTemperatureZoneSelectionButton();
  id v9 = [super init];
  [v7 registerObserver:v9];
  uint64_t v81 = v7;
  id v10 = [v7 car];
  if (v10)
  {
    NSString v11 = v10;
    id v12 = [v10 dimensionManager];

    [v12 registerObserver:v9];
  }
  unint64_t v13 = self;
  id v14 = [v13 systemWhiteColor];
  id v15 = [v13 systemBlackColor];
  sub_100006730((uint64_t *)&unk_1000E4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B20E0;
  *(void *)(inited + 32) = 16;
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = &_swiftEmptyDictionarySingleton;
  *(void *)(inited + 64) = 8;
  *(void *)(inited + 72) = v14;
  *(void *)(inited + 80) = v15;
  *(void *)(inited + 88) = &_swiftEmptyDictionarySingleton;
  id v17 = v14;
  id v18 = v15;
  unint64_t v19 = sub_100043070(inited);
  swift_setDeallocating();
  id v20 = v17;
  id v21 = v18;
  uint64_t v22 = v9;
  id v23 = v20;
  id v24 = v21;
  sub_100006730((uint64_t *)&unk_1000E77A0);
  swift_arrayDestroy();
  id v25 = (void *)((char *)v22 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor);
  unint64_t v26 = *(void **)((char *)v22 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor);
  uint64_t v27 = *(void **)((char *)v22 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8);
  uint64_t v28 = *(void *)((char *)v22 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16);
  void *v25 = v23;
  v25[1] = v24;
  v25[2] = v19;
  id v29 = v23;
  id v30 = v24;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v31 = v29;
  id v32 = v30;
  uint64_t v33 = v31;
  id v34 = v32;
  swift_bridgeObjectRetain_n();
  int64_t v82 = v34;
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v19, v28);
    char v36 = v35;
    swift_bridgeObjectRelease();

    if (v36) {
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))((swift_isaMask & *v22) + 0x228))();
LABEL_9:

  v80 = v33;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  id v37 = [v13 clearColor];
  id v38 = [v13 systemWhiteColor];
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_1000B20E0;
  *(void *)(v39 + 32) = 16;
  *(void *)(v39 + 40) = v37;
  *(void *)(v39 + 48) = v38;
  *(void *)(v39 + 56) = &_swiftEmptyDictionarySingleton;
  *(void *)(v39 + 64) = 8;
  *(void *)(v39 + 72) = v37;
  *(void *)(v39 + 80) = v38;
  *(void *)(v39 + 88) = &_swiftEmptyDictionarySingleton;
  id v40 = v37;
  id v41 = v38;
  unint64_t v42 = sub_100043070(v39);
  swift_setDeallocating();
  id v43 = v40;
  id v44 = v41;
  uint64_t v45 = v22;
  id v46 = v43;
  id v47 = v44;
  swift_arrayDestroy();
  uint64_t v48 = (void *)((char *)v45 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  unint64_t v49 = *(void **)((char *)v45 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  id v50 = *(void **)((char *)v45 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
  uint64_t v51 = *(void *)((char *)v45 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16);
  *uint64_t v48 = v46;
  v48[1] = v47;
  v48[2] = v42;
  id v52 = v46;
  id v53 = v47;
  id v54 = v52;
  id v55 = v53;
  swift_bridgeObjectRetain_n();
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_14;
  }
  sub_10007C1D0(v42, v51);
  char v57 = v56;
  swift_bridgeObjectRelease();

  if ((v57 & 1) == 0) {
LABEL_14:
  }
    (*(void (**)(void))((swift_isaMask & *v45) + 0x228))();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v58 = *(void **)((char *)v45
                 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_unselectedBackgroundView);
  if (v58)
  {
    id v59 = v58;
    [v59 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v45 insertSubview:v59 atIndex:0];
    int64_t v60 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_1000B20F0;
    id v62 = [v59 leadingAnchor];
    id v63 = [v45 leadingAnchor];
    id v64 = [v62 constraintEqualToAnchor:v63];

    *(void *)(v61 + 32) = v64;
    id v65 = [v59 trailingAnchor];
    id v66 = [v45 trailingAnchor];
    id v67 = [v65 constraintEqualToAnchor:v66];

    *(void *)(v61 + 40) = v67;
    id v68 = [v59 topAnchor];
    id v69 = [v45 topAnchor];
    id v70 = [v68 constraintEqualToAnchor:v69];

    *(void *)(v61 + 48) = v70;
    id v71 = [v59 bottomAnchor];
    id v72 = [v45 bottomAnchor];
    id v73 = [v71 constraintEqualToAnchor:v72];

    *(void *)(v61 + 56) = v73;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v60 activateConstraints:isa];
  }
  sub_10000E320();
  uint64_t v75 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn;
  char v76 = *((unsigned char *)v45 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn);
  uint64_t v77 = *(void **)((char *)v45 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature);
  [v77 targetTemperatureRestricted];
  [v77 targetTemperatureInvalid];
  [v77 targetTemperatureDisabled];
  char v78 = *((unsigned char *)v45 + v75);
  *((unsigned char *)v45 + v75) = v76;
  sub_10000D418(v78);
  sub_10000E930();

  return v45;
}

void sub_10000E320()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView;
  [v0 addSubview:*(void *)&v0[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView]];
  uint64_t v3 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000B2100;
  id v5 = [*(id *)&v1[v2] leadingAnchor];
  id v6 = [v1 leadingAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v4 + 32) = v7;
  id v8 = [*(id *)&v1[v2] trailingAnchor];
  id v9 = [v1 trailingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v4 + 40) = v10;
  id v11 = [*(id *)&v1[v2] widthAnchor];
  id v12 = [v1 widthAnchor];
  id v13 = [v11 constraintLessThanOrEqualToAnchor:v12];

  *(void *)(v4 + 48) = v13;
  id v14 = [*(id *)&v1[v2] centerXAnchor];
  id v15 = [v1 centerXAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v4 + 56) = v16;
  id v17 = [*(id *)&v1[v2] centerYAnchor];
  id v18 = [v1 centerYAnchor];
  id v19 = [v17 constraintEqualToAnchor:v18];

  *(void *)(v4 + 64) = v19;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 activateConstraints:isa];

  id v21 = [v1 titleLabel];
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = objc_retain(*(id *)(*(void *)&v1[v2]
                            + OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel));
    [v23 setLineBreakMode:[v22 lineBreakMode]];

    id v24 = objc_retain(*(id *)(*(void *)&v1[v2]
                            + OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel));
    [v24 setTextAlignment:[v22 textAlignment]];
  }
}

uint64_t sub_10000E6C4()
{
  return CAFPositionedRequired.layoutKey.getter();
}

void sub_10000E710()
{
  sub_100088B54();
  uint64_t v1 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  [v0 setBackgroundColor:*(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig]];
  id v2 = [v0 imageView];
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 setTintColor:*((void *)v1 + 1)];
  }
  uint64_t v4 = (void *)*((void *)v1 + 1);
  uint64_t v5 = *((void *)v1 + 2);
  int v6 = v0[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn];
  id v7 = *(void **)&v0[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature];
  id v8 = *(id *)v1;
  id v9 = v4;
  swift_bridgeObjectRetain();
  unsigned __int8 v10 = [v7 targetTemperatureRestricted];
  unsigned int v11 = [v7 targetTemperatureInvalid];
  unsigned int v12 = [v7 targetTemperatureDisabled];
  if (v6 == 1)
  {
    BOOL v13 = v11 == 0;
    if ((v10 & 1) == 0)
    {
      char v14 = 9;
      if (!v11) {
        char v14 = 1;
      }
      if (v12) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
    char v14 = 5;
    char v15 = 13;
  }
  else
  {
    BOOL v13 = v11 == 0;
    if ((v10 & 1) == 0)
    {
      char v14 = 8;
      if (!v11) {
        char v14 = 0;
      }
      if (v12) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
    char v14 = 4;
    char v15 = 12;
  }
  if (!v13) {
    char v14 = v15;
  }
  if (v12) {
LABEL_11:
  }
    v14 |= 0x10u;
LABEL_12:
  id v21 = sub_1000651BC(v14, v9, v5);
  swift_bridgeObjectRelease();

  uint64_t v16 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView;
  id v17 = *(void **)(*(void *)&v0[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView]
                 + OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel);
  id v18 = self;
  id v19 = v17;
  id v20 = [v18 clearColor];
  [v19 setBackgroundColor:v20];

  [*(id *)(*(void *)&v0[v16]+ OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel) setTextColor:v21];
}

void sub_10000E930()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  uint64_t v45 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (void **)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_attributedTitle];
  swift_beginAccess();
  unsigned __int8 v10 = *v9;
  *id v9 = 0;

  ClimateButton.updateClimateConfiguration()();
  int v11 = v1[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn];
  unsigned int v12 = *(void **)&v1[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature];
  unsigned __int8 v13 = [v12 targetTemperatureRestricted];
  unsigned int v14 = [v12 targetTemperatureInvalid];
  unsigned int v15 = [v12 targetTemperatureDisabled];
  if (v11 == 1)
  {
    BOOL v16 = v14 == 0;
    if ((v13 & 1) == 0)
    {
      if (v14) {
        char v19 = 9;
      }
      else {
        char v19 = 1;
      }
      if (v15) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    char v17 = 5;
    char v18 = 13;
  }
  else
  {
    BOOL v16 = v14 == 0;
    if ((v13 & 1) == 0)
    {
      if (v14) {
        char v19 = 8;
      }
      else {
        char v19 = 0;
      }
      if (v15) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    char v17 = 4;
    char v18 = 12;
  }
  if (v16) {
    char v19 = v17;
  }
  else {
    char v19 = v18;
  }
  if (v15) {
LABEL_10:
  }
    v19 |= 0x10u;
LABEL_11:
  uint64_t v20 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView;
  [*(id *)&v1[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView] setHidden:(v19 & 0x18) != 0];
  if ((v19 & 0x18) != 0)
  {
    sub_100007310(0, &qword_1000E4B48);
    CAFPositionedRequired.layoutKey.getter();
    sub_100023490();
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    BOOL v23 = (v22 & 1) == 0;
    if (v22) {
      unint64_t v24 = 0xD000000000000018;
    }
    else {
      unint64_t v24 = 0xD000000000000017;
    }
    if (v23) {
      unint64_t v25 = 0x80000001000B5870;
    }
    else {
      unint64_t v25 = 0x80000001000B5890;
    }
    unint64_t v26 = (unint64_t *)&v1[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
    swift_beginAccess();
    unint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    *unint64_t v26 = v24;
    v26[1] = v25;
    if (!v28 || (v24 != v27 || v25 != v28) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      ClimateButton.updateClimateConfiguration()();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v29 = &v1[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
    swift_beginAccess();
    uint64_t v30 = *(void *)v29;
    uint64_t v31 = *((void *)v29 + 1);
    *(void *)id v29 = 0;
    *((void *)v29 + 1) = 0;
    if (v31)
    {
      ClimateButton.updateClimateConfiguration()();
      swift_bridgeObjectRelease();
    }
    id v32 = [v12 targetTemperature:v30];
    sub_100007310(0, (unint64_t *)&qword_1000E4D10);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    id v33 = [v12 targetTemperatureRange];
    Measurement<>.readableString(in:)();
    uint64_t v35 = v34;

    (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v2);
    if (v35)
    {
      char v36 = *(char **)&v1[v20];
      id v37 = *(void **)&v36[OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel];
      id v38 = v36;
      id v39 = v37;
      NSString v40 = String._bridgeToObjectiveC()();
      [v39 setText:v40];
      swift_bridgeObjectRelease();
    }
  }
  id v41 = *(void **)&v1[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_unselectedBackgroundView];
  if (v41)
  {
    uint64_t v42 = v19 & 1;
    double v43 = 0.0;
    if ((v19 & 1) == 0) {
      double v43 = 1.0;
    }
    [v41 setAlpha:v43];
  }
  else
  {
    uint64_t v42 = v19 & 1;
  }
  [v1 setUserInteractionEnabled:v42 == 0];
  sub_10009F8A4();
  [v12 targetTemperatureRestricted];
  [v1 setEnabled:(([v12 targetTemperatureDisabled] | [v12 targetTemperatureInvalid]) ^ 1)];
  sub_10000EE64();
  sub_10000E710();
}

uint64_t sub_10000EE64()
{
  uint64_t v55 = sub_100006730(&qword_1000E5040);
  uint64_t v1 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v3 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v55 - v5;
  *(void *)&double v8 = __chkstk_darwin(v7).n128_u64[0];
  unsigned __int8 v10 = (char *)&v55 - v9;
  int v11 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn);
  unsigned int v12 = *(void **)(v0 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature);
  unsigned __int8 v13 = [v12 targetTemperatureRestricted];
  unsigned int v14 = [v12 targetTemperatureInvalid];
  unsigned int v15 = [v12 targetTemperatureDisabled];
  if (v11 == 1)
  {
    if (v13)
    {
      char v16 = 5;
      if (v14) {
        char v16 = 13;
      }
      if ((v15 & 1) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      char v16 = 9;
      if (!v14) {
        char v16 = 1;
      }
      if (!v15) {
        goto LABEL_21;
      }
    }
  }
  else if (v13)
  {
    char v16 = 4;
    if (v14) {
      char v16 = 12;
    }
    if ((v15 & 1) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    char v16 = 8;
    if (!v14) {
      char v16 = 0;
    }
    if ((v15 & 1) == 0) {
      goto LABEL_20;
    }
  }
  char v17 = v16;
  v16 |= 0x10u;
  if ((v17 & 1) == 0)
  {
LABEL_20:
    char v18 = &OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor;
    goto LABEL_22;
  }
LABEL_21:
  char v18 = &OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor;
LABEL_22:
  char v19 = *(void **)(v0 + *v18);
  if (v16) {
    uint64_t v20 = &OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor;
  }
  else {
    uint64_t v20 = &OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor;
  }
  uint64_t v21 = *v20;
  uint64_t v56 = v0;
  char v22 = *(void **)(v0 + v21 + 8);
  id v23 = v19;
  id v24 = v22;
  id v25 = [v12 currentTemperature];
  if (v25)
  {
    unint64_t v26 = v25;
    sub_100007310(0, (unint64_t *)&qword_1000E4D10);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = v55;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v10, v6, v55);
    id v28 = [v12 targetTemperature];
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000FF7C();
    LOBYTE(v28) = dispatch thunk of static Comparable.< infix(_:_:)();
    id v29 = *(void (**)(char *, uint64_t))(v1 + 8);
    v29(v3, v27);
    if (v28)
    {
      uint64_t v30 = &selRef_systemBlueColor;
    }
    else
    {
      id v31 = [v12 targetTemperature];
      static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v31) = static Measurement.< infix<A, B>(_:_:)();
      v29(v3, v27);
      if ((v31 & 1) == 0)
      {
LABEL_31:
        v29(v10, v27);
        goto LABEL_32;
      }
      uint64_t v30 = &selRef_systemRedColor;
    }
    id v32 = [self *v30];

    id v24 = v32;
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v33 = v56;
  sub_100006730((uint64_t *)&unk_1000E4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B20E0;
  *(void *)(inited + 32) = 16;
  *(void *)(inited + 40) = v23;
  *(void *)(inited + 48) = v24;
  *(void *)(inited + 56) = &_swiftEmptyDictionarySingleton;
  *(void *)(inited + 64) = 8;
  *(void *)(inited + 72) = v23;
  *(void *)(inited + 80) = v24;
  *(void *)(inited + 88) = &_swiftEmptyDictionarySingleton;
  id v35 = v23;
  id v36 = v24;
  id v37 = v35;
  id v38 = v36;
  unint64_t v39 = sub_100043070(inited);
  swift_setDeallocating();
  id v40 = v37;
  id v41 = v38;
  id v42 = v40;
  id v43 = v41;
  sub_100006730((uint64_t *)&unk_1000E77A0);
  swift_arrayDestroy();
  uint64_t v44 = (void *)(v33 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v45 = *(void **)(v33 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  id v46 = *(void **)(v33 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v47 = *(void *)(v33 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  void *v44 = v42;
  v44[1] = v43;
  v44[2] = v39;
  id v48 = v42;
  id v49 = v43;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v50 = v48;
  id v51 = v49;
  swift_bridgeObjectRetain_n();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v39, v47);
    char v53 = v52;
    swift_bridgeObjectRelease();

    if (v53) {
      goto LABEL_38;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_10000E710();
LABEL_38:

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10000F3B4()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_unselectedBackgroundView));

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_labelsView);
}

id sub_10000F404()
{
  return sub_10000FEB0(type metadata accessor for ClimateTargetTemperatureZoneSelectionButton);
}

uint64_t type metadata accessor for ClimateTargetTemperatureZoneSelectionButton()
{
  return self;
}

uint64_t sub_10000F49C@<X0>(uint64_t a1@<X8>)
{
  sub_100007310(0, &qword_1000E4B48);
  CAFPositionedRequired.layoutKey.getter();
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

char *sub_10000F950()
{
  uint64_t v1 = OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel;
  id v2 = objc_allocWithZone((Class)UILabel);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 init];

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for ClimateTargetTemperatureZoneSelectionButton.LabelsView();
  uint64_t v4 = (char *)[super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setClipsToBounds:1];
  uint64_t v5 = OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel;
  [*(id *)&v4[OBJC_IVAR____TtCC7Climate43ClimateTargetTemperatureZoneSelectionButton10LabelsView_temperatureLabel] setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v6 = qword_1000E4640;
  id v7 = *(id *)&v4[v5];
  if (v6 != -1) {
    swift_once();
  }
  [v7 setFont:qword_1000EA600];

  [v4 addSubview:*(void *)&v4[v5]];
  double v8 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000B2110;
  id v10 = [*(id *)&v4[v5] centerXAnchor];
  id v11 = [v4 centerXAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v9 + 32) = v12;
  id v13 = [*(id *)&v4[v5] centerYAnchor];
  id v14 = [v4 centerYAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v9 + 40) = v15;
  id v16 = [*(id *)&v4[v5] heightAnchor];
  id v17 = [v4 heightAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17];

  *(void *)(v9 + 48) = v18;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 activateConstraints:isa];

  return v4;
}

id sub_10000FE1C()
{
  id result = [self monospacedDigitSystemFontOfSize:24.0 weight:UIFontWeightSemibold];
  qword_1000EA600 = (uint64_t)result;
  return result;
}

id sub_10000FE98()
{
  return sub_10000FEB0(type metadata accessor for ClimateTargetTemperatureZoneSelectionButton.LabelsView);
}

id sub_10000FEB0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateTargetTemperatureZoneSelectionButton.LabelsView()
{
  return self;
}

uint64_t sub_10000FF1C(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E4D00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000FF7C()
{
  unint64_t result = qword_1000E7790;
  if (!qword_1000E7790)
  {
    sub_10000A4DC(&qword_1000E5040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E7790);
  }
  return result;
}

double sub_10000FFD8()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ClimateControlsLockButton());
  objc_super v3 = sub_10008C9A0(v1);
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730(&qword_1000E4B50);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1000B2000;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = &off_1000CC4A8;
  return result;
}

BOOL sub_100010054(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10001006C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000100B4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000100E0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *sub_100010124(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v4 = &v3[OBJC_IVAR____TtC7Climate28ClimateLoadingViewController_type];
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + 1) = a2;
  v4[16] = a3;
  BOOL v5 = a3 >= 2u && __PAIR128__(a2, a1) < 2;
  v3[OBJC_IVAR____TtC7Climate28ClimateLoadingViewController_displayMode] = v5;
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for ClimateLoadingViewController();
  uint64_t v6 = [super initWithNibName:0 bundle:0];
  id v7 = v6;
  if (v6[OBJC_IVAR____TtC7Climate28ClimateLoadingViewController_displayMode]) {
    return v7;
  }
  double v8 = v6;
  double result = [v8 view];
  if (result)
  {
    id v10 = result;
    sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
    id v11 = (void *)static UIColor.cafui_tableBackground.getter();
    [v10 setBackgroundColor:v11];

    return v7;
  }
  __break(1u);
  return result;
}

id sub_1000102C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateLoadingViewController();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateLoadingViewController()
{
  return self;
}

void sub_100010334()
{
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for ClimateLoadingViewController();
  [super viewDidLoad];
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate28ClimateLoadingViewController_displayMode) & 1) == 0)
  {
    id v1 = [objc_allocWithZone((Class)UIActivityIndicatorView) initWithActivityIndicatorStyle:101];
    [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v2 = [v0 view];
    if (v2)
    {
      objc_super v3 = v2;
      [v2 addSubview:v1];

      id v4 = [self labelColor];
      [v1 setColor:v4];

      [v1 startAnimating];
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1000B1F40;
      id v6 = [v1 centerXAnchor];
      id v7 = [v0 view];
      if (v7)
      {
        double v8 = v7;
        id v9 = [v7 centerXAnchor];

        id v10 = [v6 constraintEqualToAnchor:v9];
        *(void *)(v5 + 32) = v10;
        id v11 = [v1 centerYAnchor];
        id v12 = [v0 view];
        if (v12)
        {
          id v13 = v12;
          id v14 = self;
          id v15 = [v13 centerYAnchor];

          id v16 = [v11 constraintEqualToAnchor:v15];
          *(void *)(v5 + 40) = v16;
          specialized Array._endMutation()();
          sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v14 activateConstraints:isa];

          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for ClimateLayoutMode(unsigned char *result, unsigned char *a2)
{
  *double result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ClimateLoadingViewController.DisplayMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClimateLoadingViewController.DisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100010798);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1000107C0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000107CC(unsigned char *result, char a2)
{
  *double result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ClimateLoadingViewController.DisplayMode()
{
  return &type metadata for ClimateLoadingViewController.DisplayMode;
}

unint64_t sub_1000107EC()
{
  unint64_t result = qword_1000E4D50;
  if (!qword_1000E4D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4D50);
  }
  return result;
}

uint64_t sub_100010840(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_100010854()
{
  id v1 = *v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ClimateSteeringWheelButton());
  int v3 = sub_10004D940(v1);
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730(&qword_1000E4B50);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1000B2000;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = &off_1000CB6A8;
  return result;
}

void sub_1000108D0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  unsigned int v6 = (objc_class *)type metadata accessor for ClimateGridSource();
  BOOL v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems] = _swiftEmptyArrayStorage;
  int v8 = &v7[OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsCache];
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((void *)v8 + 6) = 0;
  *(void *)&v7[OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting] = 0;
  *(void *)&v7[OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsObserver] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v43.receiver = v7;
  v43.super_class = v6;
  [super init];
  id v10 = *(void **)&v2[OBJC_IVAR____TtC7Climate11ClimateGrid_source];
  *(void *)&v2[OBJC_IVAR____TtC7Climate11ClimateGrid_source] = v9;
  id v11 = v9;

  sub_10001181C(a1, a2);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v13 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  aBlock[4] = sub_10001530C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100014CF4;
  aBlock[3] = &unk_1000CA9D8;
  id v14 = _Block_copy(aBlock);
  swift_retain();
  id v15 = [v13 initWithSectionProvider:v14];
  _Block_release(v14);
  swift_release();
  swift_release();
  id v16 = [objc_allocWithZone((Class)UICollectionView) initWithFrame:v15 collectionViewLayout:0.0, 0.0, 0.0, 0.0];
  [v16 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v16 setDataSource:v11];
  [v16 setDelegate:v11];
  type metadata accessor for ClimateSlotCell();
  if (qword_1000E4648 != -1) {
    swift_once();
  }
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v18 = String._bridgeToObjectiveC()();
  [v16 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v18];

  type metadata accessor for CAFUIProminentSettingCell();
  uint64_t v19 = swift_getObjCClassFromMetadata();
  static CAFUICellProtocol.reuseIdentifier.getter();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 registerClass:v19 forCellWithReuseIdentifier:v20];

  objc_super v21 = self;
  id v22 = v16;
  id v23 = [v21 clearColor];
  [v22 setBackgroundColor:v23];

  [v22 setShowsVerticalScrollIndicator:0];
  [v22 setBounces:0];
  [v22 setPagingEnabled:1];
  id v24 = v22;
  sub_100014DC8();
  [v24 setSemanticContentAttribute:v25];

  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 addSubview:v24];
  unint64_t v26 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1000B20F0;
  id v28 = [v24 topAnchor];
  id v29 = [v3 topAnchor];
  id v30 = [v28 constraintEqualToAnchor:v29];

  *(void *)(v27 + 32) = v30;
  id v31 = [v24 leftAnchor];
  id v32 = [v3 leftAnchor];
  id v33 = [v31 constraintEqualToAnchor:v32];

  *(void *)(v27 + 40) = v33;
  id v34 = [v24 rightAnchor];
  id v35 = [v3 rightAnchor];
  id v36 = [v34 constraintEqualToAnchor:v35];

  *(void *)(v27 + 48) = v36;
  id v37 = [v24 bottomAnchor];
  id v38 = [v3 bottomAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38];

  *(void *)(v27 + 56) = v39;
  aBlock[0] = v27;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v26 activateConstraints:isa];

  id v41 = *(void **)&v3[OBJC_IVAR____TtC7Climate11ClimateGrid_grid];
  *(void *)&v3[OBJC_IVAR____TtC7Climate11ClimateGrid_grid] = v24;
}

void sub_100010F14(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    unsigned int v6 = *(void **)&Strong[OBJC_IVAR____TtC7Climate11ClimateGrid_source];
    if (v6)
    {
      id v7 = v6;
      objc_msgSend(objc_msgSend(a2, "container"), "contentSize");
      double v9 = v8;
      swift_unknownObjectRelease();
      if (a1)
      {
        if (a1 == 1)
        {
          id v10 = [self sharedApplication];
          id v11 = [v10 delegate];

          if (v11)
          {
            type metadata accessor for ClimateAppDelegate();
            swift_dynamicCastClassUnconditional();
            uint64_t v12 = (unsigned __int8 *)sub_10008EAA4();
            swift_unknownObjectRelease();
            int v13 = v12[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

            double v14 = 230.0;
            if (v13) {
              double v14 = 188.0;
            }
            double v15 = (v9 - v14) * 0.5;
            id v16 = self;
            id v17 = [v16 fractionalWidthDimension:1.0];
            id v18 = [v16 fractionalHeightDimension:1.0];
            uint64_t v19 = self;
            id v20 = [v19 sizeWithWidthDimension:v17 heightDimension:v18];

            id v21 = [self itemWithLayoutSize:v20];
            id v22 = [v16 fractionalWidthDimension:1.0];
            id v23 = [v16 estimatedDimension:52.0];
            id v24 = [v19 sizeWithWidthDimension:v22 heightDimension:v23];

            id v25 = [self horizontalGroupWithLayoutSize:v24 repeatingSubitem:v21 count:1];
            id v26 = [self fixedSpacing:8.0];
            [v25 setInterItemSpacing:v26];

            id v27 = [self sectionWithGroup:v25];
            [v27 setInterGroupSpacing:8.0];
            [v27 setContentInsets:0.0, v15, 20.0, v15];
          }
          else
          {
            __break(1u);
          }
        }
        else
        {
        }
      }
      else
      {
        type metadata accessor for ClimateGridLayoutManager();
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 56) = 0;
        *(void *)(v28 + 32) = 0;
        *(void *)(v28 + 40) = 0;
        *(void *)(v28 + 16) = v7;
        *(void *)(v28 + 24) = _swiftEmptyArrayStorage;
        *(double *)(v28 + 48) = v9;
        id v29 = v7;
        sub_100072BF4();
        id v30 = self;
        id v31 = [v30 absoluteDimension:*(double *)(v28 + 40)];
        id v32 = [v30 absoluteDimension:*(double *)(v28 + 32)];
        id v33 = [self sizeWithWidthDimension:v31 heightDimension:v32];
        id v34 = self;
        aBlock[4] = sub_10001532C;
        aBlock[5] = v28;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100011634;
        aBlock[3] = &unk_1000CAA00;
        id v35 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        id v36 = [v34 customGroupWithLayoutSize:v33 itemProvider:v35];
        _Block_release(v35);
        objc_msgSend(objc_msgSend(self, "sectionWithGroup:", v36), "setContentInsets:", 0.0, (v9 - *(double *)(v28 + 40)) * 0.5, 8.0, (v9 - *(double *)(v28 + 40)) * 0.5);

        swift_release();
      }
    }
    else
    {
    }
  }
}

void *sub_10001148C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(a2 + 24);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  double result = self;
  if (v4 >= 1)
  {
    unsigned int v6 = result;
    uint64_t v7 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v3 + 8 * v7 + 32);
      }
      double v9 = v8;
      [v8 frame];
      id v10 = [v6 customItemWithFrame:];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v7;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    while (v4 != v7);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

Class sub_100011634(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  sub_100007310(0, &qword_1000E4F48);
  v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v3.super.isa;
}

id sub_1000117B8()
{
  return sub_10001495C(type metadata accessor for ClimateGrid);
}

void sub_10001181C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = [objc_allocWithZone((Class)type metadata accessor for CAFUIAutomakerSettingObserver()) init];
  unsigned int v6 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v5) + 0x60);
  uint64_t v7 = swift_unknownObjectRetain();
  v6(v7, &off_1000CA978);
  id v8 = *(void **)(v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsObserver);
  *(void *)(v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsObserver) = v5;
  id v20 = v5;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CAFUISettingsCache.init(settings:sections:)();
  long long v18 = v22;
  long long v19 = v21;
  long long v17 = v23;
  unint64_t v9 = CAFUISettingsCache.rootSettings(in:visibleOnly:)();
  unint64_t v10 = v9;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_10;
    }
  }
  if (v11 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v11; ++i)
  {
    if ((v10 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v10 + 8 * i + 32);
    }
    double v14 = v13;
    [v13 registerObserver:v20, v17, v18, v19];
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  *(void *)(v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems) = CAFUISettingsCache.rootSettings(in:visibleOnly:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsCache;
  uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsCache);
  *(_OWORD *)uint64_t v15 = v19;
  *(_OWORD *)(v15 + 16) = v18;
  *(_OWORD *)(v15 + 32) = v17;
  *(void *)(v15 + 48) = v24;
  sub_100015120(v16);
}

uint64_t sub_100011B78(void *a1, uint64_t a2)
{
  if (IndexPath.section.getter() != 1)
  {
    if (qword_1000E4648 != -1) {
      swift_once();
    }
    NSString v21 = String._bridgeToObjectiveC()();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    unint64_t v6 = (unint64_t)[a1 dequeueReusableCellWithReuseIdentifier:v21 forIndexPath:isa];

    type metadata accessor for ClimateSlotCell();
    uint64_t v23 = swift_dynamicCastClass();
    if (v23)
    {
      uint64_t v16 = (void *)v23;
      id v20 = (id)sub_100011F54(a2);
      sub_100014544(v20);
LABEL_21:

      return (uint64_t)v16;
    }
    goto LABEL_33;
  }
  unint64_t v5 = IndexPath.item.getter();
  unint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems);
  if ((v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    swift_getObjectType();
    uint64_t v25 = swift_conformsToProtocol2();
    if (v25) {
      uint64_t v9 = v25;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v25) {
      id v10 = v11;
    }
    else {
      id v10 = 0;
    }
    if (!v10)
    {
      swift_unknownObjectRelease();
      goto LABEL_35;
    }
    goto LABEL_13;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v5 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_32:
    __break(1u);
LABEL_33:

    goto LABEL_35;
  }
  uint64_t v7 = *(void **)(v6 + 8 * v5 + 32);
  swift_getObjectType();
  uint64_t v8 = swift_conformsToProtocol2();
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    id v10 = v7;
  }
  else {
    id v10 = 0;
  }
  if (!v10) {
    goto LABEL_35;
  }
  id v11 = v7;
LABEL_13:
  type metadata accessor for CAFUIProminentSettingCell();
  static CAFUICellProtocol.reuseIdentifier.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v13 = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = [a1 dequeueReusableCellWithReuseIdentifier:v12 forIndexPath:v13];

  uint64_t v15 = (void *)swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = v15;
    long long v17 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v15) + 0xE0))();

    if (!v17)
    {
      id v18 = [self materialViewWithRecipe:4];
      (*(void (**)(id))((swift_isaMask & *v16) + 0xE8))(v18);
    }
    long long v19 = *(void (**)(id, uint64_t))((swift_isaMask & *v16) + 0xA0);
    id v20 = v11;
    v19(v10, v9);
    goto LABEL_21;
  }

LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100011F54(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v39 - v9;
  if (IndexPath.section.getter())
  {
    os_log_type_t v11 = static os_log_type_t.default.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    NSString v12 = static OS_os_log.default.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)id v14 = 136446210;
      sub_100014D70();
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_10000A56C(v15, v16, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Requested climate slot for an invalid section - %{public}s.", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    return 0;
  }
  uint64_t result = IndexPath.item.getter();
  uint64_t v18 = OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems;
  uint64_t v19 = *(void *)(*(void *)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
  uint64_t v20 = OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems;
  uint64_t v21 = *(void *)(*(void *)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16);
  BOOL v22 = __OFADD__(v19, v21);
  uint64_t v23 = v19 + v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (result >= v23)
  {
    os_log_type_t v28 = static os_log_type_t.default.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1, v4);
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    id v29 = static OS_os_log.default.getter();
    os_log_type_t v30 = v28;
    if (os_log_type_enabled(v29, v28))
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)id v31 = 136446210;
      sub_100014D70();
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_10000A56C(v32, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Requested climate slot for an invalid item - %{public}s.", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    return 0;
  }
  uint64_t v24 = IndexPath.item.getter();
  uint64_t v25 = *(void *)(*(void *)(v2 + v18) + 16);
  uint64_t result = IndexPath.item.getter();
  uint64_t v26 = *(void *)(v2 + v18);
  if (v24 < v25)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if ((unint64_t)result < *(void *)(v26 + 16))
      {
        uint64_t v27 = v26 + 16 * result;
LABEL_17:
        long long v39 = *(_OWORD *)(v27 + 32);
        id v37 = (id)v39;
        return v39;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v34 = *(void *)(v26 + 16);
  BOOL v22 = __OFSUB__(result, v34);
  unint64_t v35 = result - v34;
  if (v22)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v35 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v36 = *(void *)(v2 + v20);
  if (v35 < *(void *)(v36 + 16))
  {
    uint64_t v27 = v36 + 16 * v35;
    goto LABEL_17;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_1000124FC(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006730(&qword_1000E4F28);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong
    || (NSString v12 = (void *)Strong,
        os_log_type_t v13 = *(void **)(Strong + OBJC_IVAR____TtC7Climate11ClimateGrid_grid),
        id v67 = v13,
        v12,
        !v13))
  {
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    uint64_t v70 = static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
LABEL_20:
    id v31 = (id)v70;
LABEL_21:

    return;
  }
  id v66 = v10;
  uint64_t v14 = OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems;
  unint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems);
  swift_bridgeObjectRetain();
  int v16 = sub_100053D9C((uint64_t)a1, v15);
  swift_bridgeObjectRelease();
  int v17 = CAFAutomakerSetting.isHidden.getter();
  uint64_t v69 = v2;
  uint64_t v70 = v14;
  if ((v16 ^ v17))
  {
    uint64_t v64 = v8;
    uint64_t v65 = v7;
    uint64_t v18 = *(void *)(v2 + v14);
    id v68 = a1;
    if (!((unint64_t)v18 >> 62))
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19) {
        goto LABEL_6;
      }
LABEL_65:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v6, 1, 1, v65);
LABEL_66:
      sub_100015274((uint64_t)v6);
      os_log_type_t v58 = static os_log_type_t.default.getter();
      sub_100007310(0, (unint64_t *)&qword_1000E4F00);
      id v59 = v68;
      int64_t v60 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v60, v58))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        id v62 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 138543362;
        id v71 = v59;
        id v63 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v62 = v59;

        _os_log_impl((void *)&_mh_execute_header, v60, v58, "Unable to match item to an index path: %{public}@", v61, 0xCu);
        sub_100006730(&qword_1000E4F30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return;
    }
LABEL_55:
    if (v18 < 0) {
      uint64_t v33 = v18;
    }
    else {
      uint64_t v33 = v18 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v19 & 0x8000000000000000) == 0) {
      goto LABEL_64;
    }
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v32 = (void *)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsCache);
  uint64_t v33 = *(void *)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsCache);
  if (!v33)
  {
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    uint64_t v70 = static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    goto LABEL_20;
  }
  uint64_t v18 = v32[1];
  uint64_t v6 = (char *)v32[2];
  uint64_t v34 = (char *)v32[3];
  uint64_t v19 = v32[4];
  uint64_t v35 = v32[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v66 = v34;
  swift_bridgeObjectRetain();
  uint64_t v65 = v19;
  swift_bridgeObjectRetain();
  uint64_t v64 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (CAFAutomakerSetting.isHidden.getter())
  {
    uint64_t v36 = OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting;
    id v37 = *(char **)(v2 + OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting);
    if (v37)
    {
      if (v37 == a1)
      {
        id v38 = (void *)swift_unknownObjectWeakLoadStrong();
        if (v38)
        {
          long long v39 = v38;

          uint64_t v19 = (uint64_t)v6;
          uint64_t v40 = *(void **)(v2 + v36);
          *(void *)(v2 + v36) = 0;

          uint64_t v6 = (char *)v19;
        }
      }
    }
  }
  id v71 = (char *)_swiftEmptyArrayStorage;
  if (!((unint64_t)v18 >> 62))
  {
    uint64_t v41 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v41)
    {
LABEL_61:
      swift_bridgeObjectRelease();
      uint64_t v45 = (char *)_swiftEmptyArrayStorage;
LABEL_62:
      sub_100015120(v33);
      *(void *)(v2 + v70) = v45;
      swift_bridgeObjectRelease();
      [v67 reloadData];
      id v31 = v67;
      goto LABEL_21;
    }
    goto LABEL_32;
  }
LABEL_60:
  swift_bridgeObjectRetain();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  if (!v41) {
    goto LABEL_61;
  }
LABEL_32:
  id v68 = v6;
  if (v41 >= 1)
  {
    for (uint64_t i = 0; i != v41; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v43 = *(id *)(v18 + 8 * i + 32);
      }
      uint64_t v44 = v43;
      if objc_msgSend(v43, "category", v64) != 2 || (CAFAutomakerSetting.isHidden.getter())
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = v71;
    uint64_t v2 = v69;
    goto LABEL_62;
  }
  __break(1u);
LABEL_64:
  uint64_t v2 = v69;
  uint64_t v14 = v70;
  if (!v19) {
    goto LABEL_65;
  }
LABEL_6:
  unint64_t v20 = 0;
  while (1)
  {
    if (v19 == v20)
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v18 = *(void *)(v2 + v14);
    if ((v18 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v20 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_54;
      }
      id v21 = *(id *)(v18 + 8 * v20 + 32);
    }
    id v22 = [v21 identifier:v64];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    id v26 = [v68 identifier];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v28;

    if (v23 == v27 && v25 == v18) {
      break;
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_45;
    }
    ++v20;

    uint64_t v2 = v69;
    uint64_t v14 = v70;
    if (v19 == v20) {
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_45:
  IndexPath.init(item:section:)();

  uint64_t v47 = v64;
  uint64_t v46 = v65;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v6, 0, 1, v65);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v6, 1, v46) == 1) {
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v66, v6, v46);
  id v48 = v68;
  if ([v68 hasDisabled])
  {
    if ([v48 disabled])
    {
      uint64_t v49 = OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting;
      id v50 = *(char **)(v69 + OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting);
      if (v50)
      {
        if (v50 == v48)
        {
          id v51 = (void *)swift_unknownObjectWeakLoadStrong();
          if (v51)
          {
            char v52 = v51;

            char v53 = *(void **)(v69 + v49);
            *(void *)(v69 + v49) = 0;
          }
        }
      }
    }
  }
  sub_100006730(&qword_1000E4F38);
  unint64_t v54 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1000B2000;
  uint64_t v56 = v66;
  (*(void (**)(unint64_t, char *, uint64_t))(v47 + 16))(v55 + v54, v66, v46);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v67 reloadItemsAtIndexPaths:isa];

  (*(void (**)(char *, uint64_t))(v47 + 8))(v56, v46);
}

id sub_100012E4C()
{
  return sub_10001495C(type metadata accessor for ClimateGridSource);
}

void sub_100012F24(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v127 = (void *)type metadata accessor for IndexPath();
  uint64_t v6 = *(v127 - 1);
  __chkstk_darwin(v127);
  uint64_t v8 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v11 = (char *)&v114 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v114 - v13;
  __chkstk_darwin(v15);
  int v17 = (char *)&v114 - v16;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  [a1 deselectItemAtIndexPath:isa animated:0];

  v128 = v3;
  uint64_t v19 = (uint64_t *)&v3[OBJC_IVAR____TtC7Climate17ClimateGridSource_settingsCache];
  uint64_t v20 = *v19;
  if (!*v19) {
    return;
  }
  id v125 = a1;
  v126 = v8;
  v123 = v17;
  id v124 = v11;
  v122 = v14;
  uint64_t v21 = v19[1];
  id v22 = (id)v19[2];
  uint64_t v24 = v19[3];
  uint64_t v23 = v19[4];
  id v26 = (void *)v19[5];
  uint64_t v25 = v19[6];
  uint64_t v132 = v20;
  uint64_t v133 = v21;
  id v134 = v22;
  uint64_t v135 = v24;
  uint64_t v136 = v23;
  v137 = v26;
  uint64_t v138 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (IndexPath.section.getter() != 1)
  {
    sub_100015120(v20);
    return;
  }
  uint64_t v115 = v20;
  uint64_t v116 = v21;
  id v117 = v22;
  uint64_t v118 = v24;
  uint64_t v119 = v23;
  v120 = v26;
  uint64_t v121 = v25;
  uint64_t v114 = v6;
  unint64_t v27 = IndexPath.item.getter();
  uint64_t v28 = *(void *)&v128[OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems];
  uint64_t v29 = a2;
  if ((v28 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    swift_getObjectType();
    uint64_t v106 = swift_conformsToProtocol2();
    if (v106) {
      uint64_t v23 = v106;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v106) {
      v107 = v34;
    }
    else {
      v107 = 0;
    }
    if (v107) {
      goto LABEL_13;
    }
    id v30 = v126;
LABEL_68:
    sub_100015120(v115);
    os_log_type_t v108 = static os_log_type_t.default.getter();
    uint64_t v57 = v114;
    os_log_type_t v58 = v127;
    (*(void (**)(id, uint64_t, void *))(v114 + 16))(v30, v29, v127);
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    v109 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v109, v108))
    {
      uint64_t v110 = swift_slowAlloc();
      v128 = v34;
      v111 = (uint8_t *)v110;
      uint64_t v129 = swift_slowAlloc();
      *(_DWORD *)v111 = 136446210;
      sub_100014D70();
      uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v131 = sub_10000A56C(v112, v113, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(id, void *))(v57 + 8))(v30, v58);
      _os_log_impl((void *)&_mh_execute_header, v109, v108, "Setting is expected to be a CAFListContentRepresentable - %{public}s.", v111, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_71;
  }
  id v30 = v126;
  if ((v27 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_74;
  }
  if (v27 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  id v31 = *(void **)(v28 + 8 * v27 + 32);
  swift_getObjectType();
  uint64_t v32 = swift_conformsToProtocol2();
  if (v32) {
    uint64_t v23 = v32;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v32) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = v31;
  if (!v33) {
    goto LABEL_68;
  }
LABEL_13:
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 16);
  v126 = v34;
  if (v36(ObjectType, v23))
  {
    Class v37 = IndexPath._bridgeToObjectiveC()().super.isa;
    id v38 = [v125 cellForItemAtIndexPath:v37];

    if (v38)
    {
      type metadata accessor for CAFUIProminentSettingCell();
      uint64_t v39 = swift_dynamicCastClass();

      if (v39)
      {
        id v40 = [v125 window];
        uint64_t v41 = v114;
        if (v40)
        {
          id v22 = v40;
          id v42 = [v40 rootViewController];
          if (v42)
          {
            id v43 = v42;
            id v30 = (id)ObjectType;
            self;
            uint64_t v44 = swift_dynamicCastObjCClass();
            uint64_t v45 = v123;
            if (v44)
            {
              id v26 = (void *)v44;
              swift_unknownObjectWeakAssign();
              unint64_t v46 = CAFUISettingsCache.visibleChildren(of:)();
              id v124 = v43;
              if (!(v46 >> 62))
              {
                uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
                goto LABEL_21;
              }
LABEL_75:
              uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
LABEL_21:
              swift_bridgeObjectRelease();
              uint64_t v48 = (*(uint64_t (**)(void, BOOL, id, uint64_t))(v23 + 72))(0, v47 != 0, v30, v23);
              id v51 = (void *)v48;
              uint64_t v52 = v49;
              unsigned __int8 v53 = v50;
              if (!(_BYTE)v50)
              {
                sub_10001524C((id)v48, v49, 0);
                sub_100015120(v115);
                int64_t v92 = v51;
                uint64_t v93 = v128;
                goto LABEL_51;
              }
              v127 = v26;
              if (v50 != 1)
              {
                if (v50 != 3) {
                  goto LABEL_53;
                }
                if (!(v48 | v49))
                {

                  sub_100015120(v115);
LABEL_55:
                  v102 = v126;
                  goto LABEL_56;
                }
                if (v48 ^ 1 | v49)
                {
LABEL_53:

                  sub_100015120(v115);
                  int64_t v103 = v51;
                  uint64_t v104 = v52;
                  unsigned __int8 v105 = v53;
LABEL_54:
                  sub_1000151AC(v103, v104, v105);
                  goto LABEL_55;
                }
LABEL_79:
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                return;
              }
              LODWORD(v123) = v50;
              uint64_t v76 = v49;
              id v125 = v22;
              uint64_t v77 = self;
              id v78 = v51;
              id v79 = [v77 sharedApplication];
              id v80 = [v79 delegate];

              if (v80)
              {
                type metadata accessor for ClimateAppDelegate();
                swift_dynamicCastClassUnconditional();
                uint64_t v81 = (char *)sub_10008EAA4();
                swift_unknownObjectRelease();
                id v82 = *(id *)&v81[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus];

                id v83 = [v82 currentSession];
                if (!v83)
                {

                  sub_1000151AC(v51, v76, 1u);
                  sub_100015120(v115);
                  int64_t v103 = v51;
                  uint64_t v104 = v76;
                  unsigned __int8 v105 = 1;
                  goto LABEL_54;
                }
                id v84 = v78;
                CAFUISettingsCache.sections(for:)();
                sub_1000151AC(v51, v76, 1u);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v85 = [v77 sharedApplication];
                id v86 = [v85 delegate];

                if (v86)
                {
                  swift_dynamicCastClassUnconditional();
                  id v87 = sub_10008EAA4();
                  swift_unknownObjectRelease();
                  swift_retain();

                  id v88 = [v77 sharedApplication];
                  id v89 = [v88 delegate];

                  if (v89)
                  {
                    swift_dynamicCastClassUnconditional();
                    id v90 = sub_10008EAA4();
                    swift_unknownObjectRelease();
                    swift_retain();

                    id v91 = objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
                    int64_t v92 = (void *)CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)();
                    uint64_t v52 = v76;
                    sub_1000151AC(v51, v76, 1u);
                    sub_100015120(v115);
                    id v26 = v127;
                    uint64_t v93 = v128;
                    id v22 = v125;
                    unsigned __int8 v53 = v123;
LABEL_51:
                    id v94 = objc_allocWithZone((Class)UIBarButtonItem);
                    id v95 = v92;
                    id v96 = [v94 initWithBarButtonSystemItem:0 target:0 action:0];
                    sub_100007310(0, &qword_1000E4F20);
                    *(void *)(swift_allocObject() + 16) = v26;
                    v127 = v124;
                    uint64_t v97 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
                    [v96 setPrimaryAction:v97];

                    id v98 = [v95 navigationItem];
                    [v98 setLeftBarButtonItem:v96];

                    id v99 = [v95 navigationItem];
                    [v99 setHidesBackButton:1];

                    v100 = *(void **)&v93[OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting];
                    v101 = v126;
                    *(void *)&v93[OBJC_IVAR____TtC7Climate17ClimateGridSource_presentedSetting] = v126;
                    v128 = v101;

                    [v26 setNavigationBarHidden:0];
                    [v26 pushViewController:v95 animated:1];

                    sub_1000151AC(v51, v52, v53);
                    v102 = v128;
LABEL_56:

                    return;
                  }
LABEL_78:
                  __break(1u);
                  goto LABEL_79;
                }
              }
              else
              {
                __break(1u);
              }
              __break(1u);
              goto LABEL_78;
            }
            sub_100015120(v115);
          }
          else
          {
            sub_100015120(v115);
            uint64_t v45 = v123;
          }
          os_log_type_t v69 = static os_log_type_t.default.getter();
          uint64_t v70 = v127;
          (*(void (**)(char *, uint64_t, void *))(v41 + 16))(v45, v29, v127);
          sub_100007310(0, (unint64_t *)&qword_1000E4F00);
          id v71 = static OS_os_log.default.getter();
          os_log_type_t v72 = v69;
          if (!os_log_type_enabled(v71, v69))
          {

            (*(void (**)(char *, void *))(v41 + 8))(v45, v70);
            return;
          }
          id v73 = (uint8_t *)swift_slowAlloc();
          uint64_t v129 = swift_slowAlloc();
          *(_DWORD *)id v73 = 136446210;
          id v125 = v22;
          sub_100014D70();
          uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v131 = sub_10000A56C(v74, v75, &v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void *))(v41 + 8))(v45, v70);
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "App window does not have a root navigation controller - %{public}s.", v73, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_35:
          return;
        }
        sub_100015120(v115);
        os_log_type_t v63 = static os_log_type_t.default.getter();
        uint64_t v64 = v122;
        uint64_t v65 = v127;
        (*(void (**)(char *, uint64_t, void *))(v41 + 16))(v122, v29, v127);
        sub_100007310(0, (unint64_t *)&qword_1000E4F00);
        id v59 = static OS_os_log.default.getter();
        if (!os_log_type_enabled(v59, v63))
        {

          (*(void (**)(char *, void *))(v41 + 8))(v64, v65);
          return;
        }
        id v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v129 = swift_slowAlloc();
        *(_DWORD *)id v66 = 136446210;
        sub_100014D70();
        uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v131 = sub_10000A56C(v67, v68, &v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void *))(v41 + 8))(v64, v65);
        _os_log_impl((void *)&_mh_execute_header, v59, v63, "CollectionView window DNE - %{public}s.", v66, 0xCu);
        swift_arrayDestroy();
LABEL_34:
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_35;
      }
    }
    sub_100015120(v115);
    os_log_type_t v56 = static os_log_type_t.default.getter();
    uint64_t v57 = v114;
    id v30 = v124;
    os_log_type_t v58 = v127;
    (*(void (**)(id, uint64_t, void *))(v114 + 16))(v124, v29, v127);
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    id v59 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v59, v56))
    {
      int64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      *(_DWORD *)int64_t v60 = 136446210;
      sub_100014D70();
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v131 = sub_10000A56C(v61, v62, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(id, void *))(v57 + 8))(v30, v58);
      _os_log_impl((void *)&_mh_execute_header, v59, v56, "The cell is not of the expected type - %{public}s.", v60, 0xCu);
      swift_arrayDestroy();
      goto LABEL_34;
    }

LABEL_71:
    (*(void (**)(id, void *))(v57 + 8))(v30, v58);
    return;
  }
  sub_100015120(v115);
  uint64_t v129 = 0;
  unint64_t v130 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  uint64_t v129 = 0x206D657449;
  unint64_t v130 = 0xE500000000000000;
  v54._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(ObjectType, v23);
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._object = (void *)0x80000001000B5AD0;
  v55._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v55);
  static CAFUILogger.default(_:function:file:line:)();

  swift_bridgeObjectRelease();
}

uint64_t sub_100014418()
{
  type metadata accessor for ClimateSlotCell();
  sub_100006730(&qword_1000E4F40);
  uint64_t result = String.init<A>(describing:)();
  qword_1000EA608 = result;
  unk_1000EA610 = v1;
  return result;
}

void sub_100014544(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = [v1 contentView];
    [v3 addSubview:v2];

    uint64_t v4 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1000B20F0;
    id v6 = [v2 topAnchor];
    id v7 = [v1 contentView];
    id v8 = [v7 topAnchor];

    id v9 = [v6 constraintEqualToAnchor:v8];
    *(void *)(v5 + 32) = v9;
    id v10 = [v2 bottomAnchor];
    id v11 = [v1 contentView];
    id v12 = [v11 bottomAnchor];

    id v13 = [v10 constraintEqualToAnchor:v12];
    *(void *)(v5 + 40) = v13;
    id v14 = [v2 leftAnchor];
    id v15 = [v1 contentView];
    id v16 = [v15 leftAnchor];

    id v17 = [v14 constraintEqualToAnchor:v16];
    *(void *)(v5 + 48) = v17;
    id v18 = [v2 rightAnchor];
    id v19 = [v1 contentView];
    id v20 = [v19 rightAnchor];

    id v21 = [v18 constraintEqualToAnchor:v20];
    *(void *)(v5 + 56) = v21;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 activateConstraints:isa];
  }
}

id sub_100014944()
{
  return sub_10001495C(type metadata accessor for ClimateSlotCell);
}

id sub_10001495C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t ClimateGridError.errorDescription.getter(uint64_t a1, void *a2)
{
  id v4 = [self mainBundle];
  v9._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v9)._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_100014A50()
{
  unint64_t result = qword_1000E4D60;
  if (!qword_1000E4D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4D60);
  }
  return result;
}

uint64_t sub_100014AA4()
{
  uint64_t v1 = *v0;
  id v2 = (void *)v0[1];
  id v3 = [self mainBundle];
  v8._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v2;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v8)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t type metadata accessor for ClimateGrid()
{
  return self;
}

uint64_t type metadata accessor for ClimateGridSource()
{
  return self;
}

uint64_t type metadata accessor for ClimateSlotCell()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for ClimateGridError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ClimateGridError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ClimateGridError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ClimateGridError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClimateGridError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClimateGridError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateGridError()
{
  return &type metadata for ClimateGridError;
}

id sub_100014CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  Swift::String v6 = (void *)v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();

  return v6;
}

unint64_t sub_100014D70()
{
  unint64_t result = qword_1000E4F08;
  if (!qword_1000E4F08)
  {
    type metadata accessor for IndexPath();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4F08);
  }
  return result;
}

void sub_100014DC8()
{
  id v0 = [self sharedApplication];
  id v1 = [v0 delegate];

  if (v1)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    unint64_t v2 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    id v3 = [*(id *)&v2[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] currentSession];
    if (v3)
    {
      Swift::String v4 = v3;
      id v5 = [v3 configuration];

      [v5 rightHandDrive];
    }
    else
    {
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100014EE0(uint64_t a1)
{
  if (a1 != 1)
  {
    if (!a1)
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
      uint64_t v5 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16);
      uint64_t result = v4 + v5;
      if (!__OFADD__(v4, v5)) {
        return result;
      }
      __break(1u);
    }
    _StringGuts.grow(_:)(53);
    v7._object = (void *)0x80000001000B5CD0;
    v7._uint64_t countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7Climate17ClimateGridSource_viewableSettingItems);
  if (!(v2 >> 62)) {
    return *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_100015044(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Climate15ClimateSlotCell_isHeightCalculated;
  if ((*((unsigned char *)v1 + OBJC_IVAR____TtC7Climate15ClimateSlotCell_isHeightCalculated) & 1) == 0)
  {
    [v1 setNeedsLayout];
    [v1 layoutIfNeeded];
    id v4 = [v1 contentView];
    [a1 size];
    [v4 systemLayoutSizeFittingSize:];

    [a1 frame];
    [a1 setFrame:];
    *((unsigned char *)v1 + v3) = 1;
  }
  return a1;
}

uint64_t sub_100015120(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000151AC(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (a3 <= 1u)
  {
  }
}

uint64_t sub_1000151D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10001520C()
{
  id v1 = [*(id *)(v0 + 16) popViewControllerAnimated:1];
}

id sub_10001524C(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2) {
    return (id)swift_bridgeObjectRetain();
  }
  if (a3 <= 1u) {
    return result;
  }
  return result;
}

uint64_t sub_100015274(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E4F28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000152D4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10001530C(uint64_t a1, void *a2)
{
}

uint64_t sub_100015314(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100015324()
{
  return swift_release();
}

void *sub_10001532C(uint64_t a1)
{
  return sub_10001148C(a1, v1);
}

uint64_t ClimateZoneServiceStepper.presentationStates.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  unsigned __int8 v2 = [*v1 targetTemperatureRestricted];
  unsigned int v3 = [*v1 targetTemperatureInvalid];
  unsigned __int8 v4 = [*v1 targetTemperatureDisabled];
  if (v2)
  {
    uint64_t v5 = 4;
    if (v3) {
      uint64_t v5 = 12;
    }
    if ((v4 & 1) == 0) {
      return v5;
    }
    return v5 | 0x10;
  }
  uint64_t v5 = 8;
  if (!v3) {
    uint64_t v5 = 0;
  }
  if (v4) {
    return v5 | 0x10;
  }
  return v5;
}

float ClimateZoneServiceStepper.characteristicValue.getter()
{
  uint64_t v1 = sub_100006730(&qword_1000E5040);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned __int8 v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (id *)(v0 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  id v6 = [*v5 targetTemperature];
  sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

  Measurement.value.getter();
  double v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

id ClimateZoneServiceStepper.temperature.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void ClimateZoneServiceStepper.temperature.setter(void *a1)
{
  sub_100015C78(a1);
}

void (*ClimateZoneServiceStepper.temperature.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  id v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return sub_1000156F4;
}

void sub_1000156F4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  uint64_t v3 = *v4;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  id v7 = *(void **)(v5 + v6);
  if (a2)
  {
    id v8 = v3;
    [v7 unregisterObserver:v5];
    Swift::String v9 = *(void **)(v5 + v6);
    *(void *)(v5 + v6) = v8;
    id v10 = v8;

    [*(id *)(v5 + v6) registerObserver:v5];
    id v11 = *v4;
  }
  else
  {
    [*(id *)(v5 + v6) unregisterObserver:v5];
    id v12 = *(void **)(v5 + v6);
    *(void *)(v5 + v6) = v3;
    id v11 = v3;

    [*(id *)(v5 + v6) registerObserver:v5];
  }

  free(v2);
}

char *ClimateZoneServiceStepper.__allocating_init(_:primaryButton:axis:)(void *a1, void *a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature] = a1;
  id v8 = a1;
  id v9 = a2;
  id v10 = ClimateStepper.init(primaryButton:axis:range:)(v9, a3, [v8 targetTemperatureRange]);
  [v8 registerObserver:v10];

  return v10;
}

char *ClimateZoneServiceStepper.init(_:primaryButton:axis:)(void *a1, void *a2, uint64_t a3)
{
  *(void *)(v3 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature) = a1;
  id v6 = a1;
  id v7 = a2;
  id v8 = ClimateStepper.init(primaryButton:axis:range:)(v7, a3, [v6 targetTemperatureRange]);
  [v6 registerObserver:v8];

  return v8;
}

void ClimateZoneServiceStepper.init(primaryButton:axis:range:)()
{
}

void sub_100015988()
{
}

id ClimateZoneServiceStepper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZoneServiceStepper();
  return [super dealloc];
}

void sub_100015BE8()
{
  uint64_t v1 = (void **)(*v0 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  objc_super v2 = *v1;
  sub_100007310(0, &qword_1000E4B48);
  id v3 = v2;
  CAFPositioned.layoutKey.getter();
}

id sub_100015C78(void *a1)
{
  id v3 = (id *)(v1 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  [*v3 unregisterObserver:v1];
  id v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  return [*v3 registerObserver:v1];
}

uint64_t type metadata accessor for ClimateZoneServiceStepper()
{
  return self;
}

void sub_100015D28()
{
  [v0 dismissIfModal];
  uint64_t v1 = self;
  id v2 = [v1 sharedApplication];
  id v3 = [v2 delegate];

  if (!v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v4 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if (v10[0] != 1) {
    return;
  }
  id v5 = [v1 sharedApplication];
  id v6 = [v5 delegate];

  if (!v6)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_dynamicCastClassUnconditional();
  id v7 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  id v9 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  if (*v8) {
    *v8 &= ~1uLL;
  }
  v9(v10, 0);

  swift_release();
  swift_release();
}

void sub_100015F24(id a1, SEL a2)
{
  id v2 = a1;
  sub_100015D28();
}

void *sub_100015F7C(char a1, uint64_t a2, char a3)
{
  *(void *)&v3[OBJC_IVAR____TtC7Climate16ClimateIndicator_circularBackgroundView] = 0;
  id v7 = &v3[OBJC_IVAR____TtC7Climate16ClimateIndicator_circleDiameter];
  *(void *)id v7 = 0;
  v7[8] = 1;
  v3[OBJC_IVAR____TtC7Climate16ClimateIndicator_isAutoMode] = 0;
  v3[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn] = 0;
  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for ClimateIndicator();
  id v8 = (unsigned __int8 *)objc_msgSendSuper2(&v21, "init");
  id v9 = v8;
  int v10 = v8[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v8[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v10 == 1)
  {
    id v11 = v8;
  }
  else
  {
    id v12 = *(void **)&v8[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    id v13 = v8;
    id v14 = [v12 removeFromSuperview];
    (*(void (**)(id))((swift_isaMask & *(void *)v13) + 0x230))(v14);
  }
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v15 = [v9 layer];
  [v15 setHitTestsAsOpaque:1];

  id v16 = [v9 layer];
  [v16 setCornerRadius:0.0];

  id v17 = [v9 titleLabel];
  [v17 setAdjustsFontSizeToFitWidth:1];

  id v18 = [v9 titleLabel];
  if (v18)
  {
    id v19 = v18;
    [v18 setNumberOfLines:1];
  }
  if (a1) {
    sub_100016234(a2, a3 & 1);
  }

  return v9;
}

void sub_100016234(uint64_t a1, char a2)
{
  id v3 = v2;
  id v6 = [objc_allocWithZone((Class)UIView) init];
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v7 = [v6 layer];
  [v6 bounds];
  [v7 setCornerRadius:CGRectGetWidth(v39) * 0.5];

  id v8 = [self labelColor];
  id v9 = [v8 colorWithAlphaComponent:0.15];

  [v6 setBackgroundColor:v9];
  id v10 = [v6 layer];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = objc_allocWithZone((Class)CAFilter);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithType:v12];

  [v10 setCompositingFilter:v13];
  [v6 setUserInteractionEnabled:0];
  [v3 insertSubview:v6 atIndex:0];
  if (a2)
  {
    id v15 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1000B20F0;
    id v26 = [v6 leadingAnchor];
    id v27 = [v3 leadingAnchor];
    id v28 = [v26 constraintEqualToAnchor:v27];

    *(void *)(v16 + 32) = v28;
    id v29 = [v6 trailingAnchor];
    id v30 = [v3 trailingAnchor];
    id v31 = [v29 constraintEqualToAnchor:v30];

    *(void *)(v16 + 40) = v31;
    id v32 = [v6 bottomAnchor];
    id v33 = [v3 bottomAnchor];
    id v34 = [v32 constraintEqualToAnchor:v33];

    *(void *)(v16 + 48) = v34;
    id v24 = [v6 topAnchor];
    id v25 = [v3 topAnchor];
  }
  else
  {
    double v14 = *(double *)&a1;
    id v15 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1000B20F0;
    id v17 = [v6 widthAnchor];
    id v18 = [v17 constraintEqualToConstant:v14];

    *(void *)(v16 + 32) = v18;
    id v19 = [v6 heightAnchor];
    id v20 = [v19 constraintEqualToConstant:v14];

    *(void *)(v16 + 40) = v20;
    id v21 = [v6 centerYAnchor];
    id v22 = [v3 centerYAnchor];
    id v23 = [v21 constraintEqualToAnchor:v22];

    *(void *)(v16 + 48) = v23;
    id v24 = [v6 centerXAnchor];
    id v25 = [v3 centerXAnchor];
  }
  id v35 = [v24 constraintEqualToAnchor:v25];

  *(void *)(v16 + 56) = v35;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 activateConstraints:isa];

  Class v37 = *(void **)&v3[OBJC_IVAR____TtC7Climate16ClimateIndicator_circularBackgroundView];
  *(void *)&v3[OBJC_IVAR____TtC7Climate16ClimateIndicator_circularBackgroundView] = v6;
}

void sub_100016798()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ClimateIndicator();
  [super layoutSubviews];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate16ClimateIndicator_circularBackgroundView];
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 layer];
    [v2 bounds];
    [v3 setCornerRadius:CGRectGetWidth(v5) * 0.5];
  }
}

void sub_100016880()
{
}

id sub_100016890()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateIndicator();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateIndicator()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ClimateIndicator.Style(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClimateIndicator.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100016A54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *sub_100016A7C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClimateIndicator.Style()
{
  return &type metadata for ClimateIndicator.Style;
}

unint64_t sub_100016A98()
{
  unint64_t result = qword_1000E5090;
  if (!qword_1000E5090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5090);
  }
  return result;
}

BOOL sub_100016AEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100016B00@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for CAUVehicleLayoutKey();
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v10 = v13;
    uint64_t v11 = a1;
    uint64_t v12 = 1;
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v6 = *(id *)(v3 + 32);
  }
  BOOL v7 = v6;
  swift_bridgeObjectRelease();
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();

  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  uint64_t v10 = v8;
  uint64_t v11 = a1;
  uint64_t v12 = 0;
LABEL_9:

  return v9(v11, v12, 1, v10);
}

id sub_100016C6C()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___stackView;
  int v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___stackView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___stackView);
  }
  else
  {
    sub_100016CD0(v0);
    uint64_t v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    int v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void sub_100016CD0(uint64_t a1)
{
  if (*(void *)(a1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons) >> 62)
  {
    sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
  }
  id v2 = objc_allocWithZone((Class)UIStackView);
  sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithArrangedSubviews:isa];

  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_axis);
  [v4 setAxis:v5];
  [v4 setDistribution:1];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v6 = [self sharedApplication];
  id v7 = [v6 delegate];

  if (v5 == 1)
  {
    if (v7) {
      goto LABEL_7;
    }
    __break(1u);
  }
  if (!v7)
  {
    __break(1u);
    return;
  }
LABEL_7:
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v8 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v9 = v8[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  double v10 = 8.0;
  if (v9) {
    double v10 = 10.0;
  }
  [v4 setSpacing:v10];
}

void sub_100016EF0(unint64_t a1, uint64_t a2, int a3)
{
  id v4 = v3;
  LODWORD(v155) = a3;
  uint64_t v150 = a2;
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v143 - v10;
  __chkstk_darwin(v12);
  double v14 = (char *)&v143 - v13;
  unint64_t v15 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v152 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v17 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_type] = 0;
  v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_isAnimatingFromDisabled] = 0;
  *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___autoModeCenterYConstraint] = 0;
  *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___stackView] = 0;
  id v18 = _swiftEmptyArrayStorage;
  unint64_t v159 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v147 = (uint64_t)v11;
  if (a1 >> 62)
  {
    os_log_type_t v69 = v4;
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v20 = v4;
    swift_bridgeObjectRetain();
  }
  unint64_t v21 = a1;
  unint64_t v151 = v15;
  uint64_t v156 = a1;
  v146 = v8;
  v148 = v4;
  if (!v19)
  {
    swift_bridgeObjectRelease();
    a1 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  if (v19 < 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v22 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
    {
      p_type = 0;
      do
      {
        id v24 = objc_retain(*(id *)(specialized _ArrayBuffer._getElementSlowPath(_:)()
                                + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent));
        swift_unknownObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v15 = *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v15 >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        p_type = (char **)((char *)p_type + 1);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        unint64_t v21 = v156;
      }
      while ((char **)v19 != p_type);
    }
    else
    {
      unint64_t v15 = 0;
      do
      {
        p_type = (char **)objc_retain(*(id *)(*(void *)(v21 + 8 * v15 + 32)
                                            + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent));
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v15;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        unint64_t v21 = v156;
      }
      while (v19 != v15);
    }
    a1 = v159;
    swift_bridgeObjectRelease();
    if (!v22)
    {
      if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_73;
      }
      id v25 = *(id *)(v21 + 32);
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRetain();
  id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  swift_bridgeObjectRelease();
LABEL_19:
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();

  sub_100023490();
  unint64_t v15 = v151;
  (*(void (**)(char *, unint64_t))(v152 + 8))(v17, v151);
  id v4 = v148;
LABEL_20:
  v144 = (id *)a1;
  uint64_t v149 = sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  uint64_t v26 = static CAFVent.groupedSymbolName(vents:useRightFacingSeat:)();
  p_type = v27;
  if (v19)
  {
    if ((v156 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    if (*(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v28 = *(id *)(v156 + 32);
LABEL_24:
      CAFPositionedRequired.layoutKey.getter();

      a1 = *(void *)(v152 + 56);
      ((void (*)(char *, void, uint64_t, unint64_t))a1)(v14, 0, 1, v15);
      goto LABEL_26;
    }
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  a1 = *(void *)(v152 + 56);
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))a1)(v14, 1, 1, v15);
LABEL_26:
  id v29 = objc_allocWithZone((Class)type metadata accessor for ClimateGroupedVentsAutoModeButton());
  id v30 = sub_10008D5A8(v26, (uint64_t)p_type, (uint64_t)v14);
  uint64_t v31 = OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton;
  *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton] = v30;
  unint64_t v159 = (unint64_t)_swiftEmptyArrayStorage;
  v143 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))a1;
  v145 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v31;
  if (!v19) {
    goto LABEL_39;
  }
  if (v19 < 1)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v154 = v156 & 0xC000000000000001;
  id v32 = self;
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  long long v153 = xmmword_1000B1F40;
  do
  {
    if (v154) {
      id v34 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v34 = (char *)*(id *)(v156 + 8 * v33 + 32);
    }
    id v35 = v34;
    int v36 = v155;
    char v37 = v34[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_style];
    id v38 = *(id *)&v34[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent];
    if (v36 == 2)
    {
      sub_100075058(1);
      double v40 = v39;
      double v42 = v41;
    }
    else
    {
      double v40 = 44.0;
      double v42 = 44.0;
    }
    id v43 = objc_allocWithZone((Class)type metadata accessor for ClimateGroupedVentsButton.VentButtonWithoutAutomode());
    id v44 = v38;
    uint64_t v45 = sub_100066760(v44, v37);
    [v45 setTranslatesAutoresizingMaskIntoConstraints:0 v143];
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v153;
    id v47 = [v45 widthAnchor];
    id v48 = [v47 constraintEqualToConstant:v40];

    *(void *)(v46 + 32) = v48;
    id v49 = [v45 heightAnchor];

    id v50 = [v49 constraintEqualToConstant:v42];
    *(void *)(v46 + 40) = v50;
    uint64_t v158 = v46;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v32 activateConstraints:isa];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v33;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while (v19 != v33);
  swift_bridgeObjectRelease();
  id v18 = (void *)v159;
  unint64_t v15 = v151;
  id v4 = v148;
LABEL_39:
  swift_bridgeObjectRelease();
  *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons] = v18;
  uint64_t v52 = v150;
  *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_axis] = v150;
  v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_style] = (_BYTE)v155;
  unsigned __int8 v53 = &selRef_widthAnchor;
  if (v52) {
    unsigned __int8 v53 = &selRef_heightAnchor;
  }
  id v54 = [*(id *)((char *)v145 + (void)v4) *v53 v143];
  id v55 = [v54 constraintEqualToConstant:0.0];

  *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeAnimatedConstraint] = v55;
  os_log_type_t v56 = (objc_class *)type metadata accessor for ClimateGroupedVentsButton();
  v157.receiver = v4;
  v157.super_class = v56;
  id v57 = [super init];
  id v18 = self;
  a1 = (unint64_t)v57;
  p_type = &stru_1000D5FF0.type;
  id v58 = [v18 sharedApplication];
  id v59 = [v58 delegate];

  if (!v59) {
    goto LABEL_79;
  }
  uint64_t v156 = type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  int64_t v60 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  double v14 = (char *)*(id *)&v60[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  uint64_t v61 = OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons;
  unint64_t v62 = *(void *)(a1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons);
  if (v62 >> 62)
  {
    id v70 = (id)a1;
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v154 = v61;
    if (v71)
    {
LABEL_44:
      if ((v62 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
        id v65 = *(id *)(v62 + 32);
        goto LABEL_47;
      }
LABEL_75:
      id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_47:
      id v66 = v65;
      swift_bridgeObjectRelease();
      uint64_t v67 = v147;
      CAFPositionedRequired.layoutKey.getter();

      uint64_t v68 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v64 = (id)a1;
    swift_bridgeObjectRetain();
    unint64_t v154 = v61;
    if (v63) {
      goto LABEL_44;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = 1;
  uint64_t v67 = v147;
LABEL_51:
  v145 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v152 + 56);
  v143(v67, v68, 1, v15);
  sub_10001B3E0(a1, v144, v67, (uint64_t)v14);
  swift_bridgeObjectRelease();

  sub_10000A404(v67, (uint64_t *)&unk_1000E7C60);
  uint64_t v72 = OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton;
  id v73 = (char *)*(id *)(a1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton);
  id v74 = [v18 p_type[459]];
  id v75 = [v74 delegate];

  if (!v75)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    return;
  }
  uint64_t v152 = v72;
  *(void *)&long long v153 = v18;
  swift_dynamicCastClassUnconditional();
  uint64_t v76 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v77 = *(id *)&v76[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  *(void *)&v73[OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_delegate + 8] = &off_1000CB3A0;
  swift_unknownObjectWeakAssign();

  [(id)a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  char v78 = *(unsigned char *)(a1 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial);
  *(unsigned char *)(a1 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial) = 1;
  if ((v78 & 1) == 0)
  {
    id v79 = *(void **)(a1 + OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView);
    id v80 = (id)a1;
    id v81 = [v79 removeFromSuperview];
    (*(void (**)(id))((swift_isaMask & *v80) + 0x230))(v81);
  }
  id v82 = (char *)(id)a1;
  id v83 = sub_100016C6C();
  [v82 addSubview:v83];

  id v155 = self;
  uint64_t v147 = sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1000B20F0;
  id v85 = sub_100016C6C();
  id v86 = [v85 leadingAnchor];

  id v87 = [v82 leadingAnchor];
  id v88 = [v86 constraintEqualToAnchor:v87];

  *(void *)(v84 + 32) = v88;
  id v89 = sub_100016C6C();
  id v90 = [v89 trailingAnchor];

  id v91 = [v82 trailingAnchor];
  id v92 = [v90 constraintEqualToAnchor:v91];

  *(void *)(v84 + 40) = v92;
  id v93 = sub_100016C6C();
  id v94 = [v93 topAnchor];

  id v95 = [v82 topAnchor];
  id v96 = [v94 constraintEqualToAnchor:v95];

  *(void *)(v84 + 48) = v96;
  id v97 = sub_100016C6C();
  id v98 = [v97 bottomAnchor];

  id v99 = [v82 bottomAnchor];
  id v100 = [v98 constraintEqualToAnchor:v99];

  *(void *)(v84 + 56) = v100;
  unint64_t v159 = v84;
  specialized Array._endMutation()();
  uint64_t v101 = sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class v102 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v155 activateConstraints:v102];

  uint64_t v103 = v152;
  uint64_t v104 = *(void **)(a1 + v152);
  [v82 addSubview:v104];
  [v104 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_1000B1F40;
  id v106 = [v104 centerXAnchor];
  id v107 = [v82 centerXAnchor];
  id v108 = [v106 constraintEqualToAnchor:v107];

  *(void *)(v105 + 32) = v108;
  id v109 = [*(id *)(a1 + v103) centerYAnchor];
  id v110 = [v82 centerYAnchor];
  id v111 = [v109 constraintEqualToAnchor:v110];

  *(void *)(v105 + 40) = v111;
  uint64_t v112 = v103;
  unint64_t v159 = v105;
  specialized Array._endMutation()();
  v148 = (unsigned char *)v101;
  Class v113 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v114 = v155;
  [v155 activateConstraints:v113];

  uint64_t v115 = swift_allocObject();
  *(_OWORD *)(v115 + 16) = xmmword_1000B2110;
  uint64_t v116 = *(void **)&v82[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeAnimatedConstraint];
  *(void *)(v115 + 32) = v116;
  id v117 = *(void **)(a1 + v112);
  id v118 = v116;
  if (v150)
  {
    id v119 = [v117 leadingAnchor];
    id v120 = [v82 leadingAnchor];
    id v121 = [v119 constraintEqualToAnchor:v120];

    *(void *)(v115 + 40) = v121;
    id v122 = [*(id *)(a1 + v112) trailingAnchor];
    id v123 = [v82 trailingAnchor];
  }
  else
  {
    id v124 = [v117 topAnchor];
    id v125 = [v82 topAnchor];
    id v126 = [v124 constraintEqualToAnchor:v125];

    *(void *)(v115 + 40) = v126;
    id v122 = [*(id *)(a1 + v112) bottomAnchor];
    id v123 = [v82 bottomAnchor];
  }
  id v127 = [v122 constraintEqualToAnchor:v123];

  *(void *)(v115 + 48) = v127;
  unint64_t v159 = v115;
  specialized Array._endMutation()();
  Class v128 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v114 activateConstraints:v128];

  id v129 = [(id)v153 sharedApplication];
  id v130 = [v129 delegate];

  uint64_t v131 = (uint64_t)v146;
  unint64_t v132 = v151;
  if (!v130) {
    goto LABEL_81;
  }
  swift_dynamicCastClassUnconditional();
  uint64_t v133 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v134 = *(id *)&v133[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  unint64_t v135 = *(void *)(a1 + v154);
  if (!(v135 >> 62))
  {
    uint64_t v136 = *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v136) {
      goto LABEL_60;
    }
LABEL_65:
    swift_bridgeObjectRelease();
    uint64_t v139 = 1;
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_65;
  }
LABEL_60:
  if ((v135 & 0xC000000000000001) != 0)
  {
    id v137 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_63;
  }
  if (!*(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_78;
  }
  id v137 = *(id *)(v135 + 32);
LABEL_63:
  uint64_t v138 = v137;
  swift_bridgeObjectRelease();
  CAFPositionedRequired.layoutKey.getter();

  uint64_t v139 = 0;
LABEL_66:
  char v140 = 1;
  (*v145)(v131, v139, 1, v132);
  char v141 = sub_10002C104(v131);

  sub_10000A404(v131, (uint64_t *)&unk_1000E7C60);
  if (v141 != 1) {
    char v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  [v82 updateAutoModeLabelWithIsVisible:v140 & 1 isAnimated:0 animationDelay:0.0];
  sub_100018BF4();
  id v142 = [self defaultCenter];
  [v142 addObserver:v82 selector:"appMovedToForeground" name:UISceneWillEnterForegroundNotification object:0];
}

void sub_1000182F8()
{
  uint64_t v1 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v4 = qword_1000EA798;
  uint64_t v5 = v0;
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v4, v6))
  {

LABEL_20:
    sub_100018BF4();
    return;
  }
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  uint64_t v23 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136315138;
  id v8 = [self sharedApplication];
  id v9 = [v8 delegate];

  if (!v9) {
    goto LABEL_23;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v10 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v11 = *(id *)&v10[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  unint64_t v12 = *(void *)&v5[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons];
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_7;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v3, 1, 1, v17);
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v13) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v12 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v12 + 32);
LABEL_10:
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
    CAFPositionedRequired.layoutKey.getter();

    uint64_t v16 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v3, 0, 1, v16);
LABEL_14:
    unsigned __int8 v18 = sub_10002C104((uint64_t)v3);

    sub_10000A404((uint64_t)v3, (uint64_t *)&unk_1000E7C60);
    int v19 = v18;
    if (v18)
    {
      unint64_t v20 = 0xE800000000000000;
      if (v19 == 1) {
        uint64_t v21 = 0x65646F4D6F747561;
      }
      else {
        uint64_t v21 = 0x64656C6261736964;
      }
    }
    else
    {
      unint64_t v20 = 0xE300000000000000;
      uint64_t v21 = 6710895;
    }
    uint64_t v22 = sub_10000A56C(v21, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "ClimateGroupedVentButton foregrounded with state: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_20;
  }
  __break(1u);
LABEL_23:

  __break(1u);
}

void sub_100018740(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (objc_class *)type metadata accessor for ClimateGroupedVentsButton();
  v26.receiver = v4;
  v26.super_class = v13;
  [super drawRect:a1, a2, a3, a4];
  id v14 = [self sharedApplication];
  id v15 = [v14 delegate];

  if (!v15) {
    goto LABEL_16;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v16 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v17 = *(id *)&v16[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  unint64_t v18 = *(void *)&v5[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons];
  if (!(v18 >> 62))
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v23 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 1, 1, v23);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  id v20 = *(id *)(v18 + 32);
LABEL_7:
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();

  uint64_t v22 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 0, 1, v22);
LABEL_10:
  char v24 = sub_10002C104((uint64_t)v12);

  sub_10000A404((uint64_t)v12, (uint64_t *)&unk_1000E7C60);
  if (v24 == 1) {
    char v25 = 1;
  }
  else {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  sub_100019278(v25 & 1);
}

void sub_100018BF4()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self sharedApplication];
  id v7 = [v6 delegate];

  if (!v7) {
    goto LABEL_55;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v8 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v9 = *(id *)&v8[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  unint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons);
  unint64_t v11 = v10 >> 62;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    id v13 = *(id *)(v10 + 32);
  }
  id v14 = v13;
  swift_bridgeObjectRelease();
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();

  uint64_t v15 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 0, 1, v15);
LABEL_10:
  char v17 = sub_10002C104((uint64_t)v5);

  sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E7C60);
  p_type = &stru_1000D5FF0.type;
  if (v17)
  {
    if (v17 == 1)
    {
      if (qword_1000E46D8 == -1)
      {
LABEL_13:
        unint64_t v18 = qword_1000EA798;
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "GroupedVents show AutoButton", v20, 2u);
          swift_slowDealloc();
        }
        id v21 = sub_100016C6C();
        [v21 p_type[499]:0.0];
        double v22 = 1.0;
        goto LABEL_49;
      }
LABEL_52:
      swift_once();
      goto LABEL_13;
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v27 = qword_1000EA798;
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v29 = 67109120;
      v39[3] = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "GroupedVents show stack, disabled: %{BOOL}d", v29, 8u);
      swift_slowDealloc();
    }
    if (!v11)
    {
      uint64_t v30 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v30) {
        goto LABEL_48;
      }
      goto LABEL_40;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    if (v30)
    {
LABEL_40:
      if (v30 >= 1)
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if ((v10 & 0xC000000000000001) != 0) {
            id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v36 = *(id *)(v10 + 8 * i + 32);
          }
          char v37 = v36;
          char v38 = *((unsigned char *)v36 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState);
          *((unsigned char *)v36 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState) = 1;
          if ((v38 & 1) == 0) {
            sub_100066D70();
          }
        }
        goto LABEL_48;
      }
      goto LABEL_54;
    }
LABEL_48:
    swift_bridgeObjectRelease_n();
    id v21 = sub_100016C6C();
    [v21 setAlpha:1.0];
    double v22 = 0.0;
LABEL_49:

    [*(id *)(v2 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton) p_type[499] v22];
    return;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1000EA798;
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    char v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v25 = 67109120;
    v39[2] = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "GroupedVents show stack, disabled: %{BOOL}d", v25, 8u);
    swift_slowDealloc();
  }
  if (v11)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    if (!v26) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v26) {
      goto LABEL_48;
    }
  }
  if (v26 >= 1)
  {
    for (uint64_t j = 0; j != v26; ++j)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v32 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = (unsigned __int8 *)*(id *)(v10 + 8 * j + 32);
      }
      uint64_t v33 = v32;
      int v34 = v32[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState];
      v32[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState] = 0;
      if (v34 == 1) {
        sub_100066D70();
      }
    }
    goto LABEL_48;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

id sub_100019278(char a1)
{
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_axis];
  if (a1)
  {
    [v1 frame];
    if (v2) {
      double Height = CGRectGetHeight(*(CGRect *)&v3);
    }
    else {
      double Height = CGRectGetWidth(*(CGRect *)&v3);
    }
  }
  else
  {
    int v8 = v1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_style];
    if (v2)
    {
      if (v8 == 2)
      {
        sub_100075058(1);
        double Height = v9;
        goto LABEL_11;
      }
    }
    else if (v8 == 2)
    {
      sub_100075058(1);
      double Height = v10;
      goto LABEL_11;
    }
    double Height = 44.0;
  }
LABEL_11:
  unint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeAnimatedConstraint];
  id result = [v11 constant];
  if (Height != v13)
  {
    [v11 setConstant:Height];
    return [v1 layoutIfNeeded];
  }
  return result;
}

id sub_10001939C(char a1, uint64_t (*a2)(id), uint64_t a3)
{
  uint64_t v4 = v3;
  [v4 updateAutoModeLabelWithIsVisible:0 isAnimated:a1 & 1 animationDelay:0.0];
  if (a1)
  {
    uint64_t v8 = swift_allocObject();
    *(unsigned char *)(v8 + 16) = 0;
    uint64_t v9 = swift_allocObject();
    *(unsigned char *)(v9 + 16) = 0;
    double v10 = (void *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = a2;
    v10[5] = a3;
    id v34 = self;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v4;
    double v39 = sub_10001C660;
    uint64_t v40 = v11;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    char v37 = sub_10005FC84;
    char v38 = &unk_1000CADF8;
    uint64_t v12 = _Block_copy(&aBlock);
    uint64_t v13 = a3;
    swift_retain();
    swift_retain();
    sub_10001C6B0((uint64_t)a2);
    id v14 = v4;
    swift_release();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10001C804;
    *(void *)(v15 + 24) = v10;
    double v39 = sub_10001C5DC;
    uint64_t v40 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    char v37 = sub_10005FCC8;
    char v38 = &unk_1000CAE48;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v34 _animateUsingSpringWithDuration:0 delay:v12 options:v16 mass:0.6 stiffness:0.0 damping:1.0 initialVelocity:295.0 animations:34.0 completion:0.0];
    _Block_release(v16);
    _Block_release(v12);
    swift_release();
    char v17 = (void *)swift_allocObject();
    v17[2] = v9;
    v17[3] = v8;
    v17[4] = a2;
    v17[5] = v13;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v14;
    double v39 = sub_10001C738;
    uint64_t v40 = v18;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    char v37 = sub_10005FC84;
    char v38 = &unk_1000CAEC0;
    os_log_type_t v19 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    sub_10001C6B0((uint64_t)a2);
    id v20 = v14;
    swift_release();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_10001C718;
    *(void *)(v21 + 24) = v17;
    double v39 = sub_10001C5DC;
    uint64_t v40 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    char v37 = sub_10005FCC8;
    char v38 = &unk_1000CAF10;
    double v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v34 _animateUsingSpringWithDuration:0 delay:v19 options:v22 mass:0.4 stiffness:0.2 damping:1.0 initialVelocity:706.0 animations:53.0 completion:0.0];
    _Block_release(v22);
    _Block_release(v19);
    swift_release();
    swift_release();
    return (id)swift_release();
  }
  sub_100019278(0);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  os_log_type_t v24 = qword_1000EA798;
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 67109120;
    LODWORD(aBlock) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "GroupedVents show stack, disabled: %{BOOL}d", v26, 8u);
    swift_slowDealloc();
  }
  unint64_t v27 = *(void *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons];
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain_n();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v28 = (uint64_t)result;
    if (!result) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain_n();
    if (!v28) {
      goto LABEL_18;
    }
  }
  if (v28 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v28; ++i)
  {
    if ((v27 & 0xC000000000000001) != 0) {
      uint64_t v30 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v30 = (unsigned __int8 *)*(id *)(v27 + 8 * i + 32);
    }
    uint64_t v31 = v30;
    int v32 = v30[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState];
    v30[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState] = 0;
    if (v32 == 1) {
      sub_100066D70();
    }
  }
LABEL_18:
  swift_bridgeObjectRelease_n();
  id v33 = sub_100016C6C();
  [v33 setAlpha:1.0];

  id result = [*(id *)&v4[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton] setAlpha:0.0];
  if (a2) {
    return (id)a2(result);
  }
  return result;
}

uint64_t sub_1000199CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a2 + 16) == 1 && a3 != 0) {
    return a3(result);
  }
  return result;
}

void sub_100019A5C()
{
  swift_bridgeObjectRelease();

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___autoModeCenterYConstraint));
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton____lazy_storage___stackView);
}

id sub_100019ACC(uint64_t a1)
{
  return sub_10001B384(a1, type metadata accessor for ClimateGroupedVentsButton);
}

uint64_t type metadata accessor for ClimateGroupedVentsButton()
{
  return self;
}

uint64_t sub_100019B84()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_type);
}

void sub_100019B94()
{
  [v0 _removeAllAnimations:1];
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000EA798;
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "GroupedVents AutoMode UI", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = qword_1000EA798;
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "GroupedVents show AutoButton", v6, 2u);
    swift_slowDealloc();
  }
  id v7 = sub_100016C6C();
  [v7 setAlpha:0.0];

  [*(id *)&v0[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton] setAlpha:1.0];
  [v0 updateAutoModeLabelWithIsVisible:1 isAnimated:1 animationDelay:0.0];
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v18 = sub_10001C640;
  uint64_t v19 = v9;
  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005FC84;
  char v17 = &unk_1000CAD08;
  double v10 = _Block_copy(&v14);
  uint64_t v11 = v0;
  swift_release();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  uint64_t v18 = sub_10001C5DC;
  uint64_t v19 = v12;
  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005FCC8;
  char v17 = &unk_1000CAD58;
  uint64_t v13 = _Block_copy(&v14);
  swift_release();
  [v8 _animateUsingSpringWithDuration:0 delay:v10 options:v13 mass:0.28 stiffness:0.0 damping:2.0 initialVelocity:1974.0 animations:123.0 completion:0.0];
  _Block_release(v13);
  _Block_release(v10);
}

uint64_t sub_100019EE0()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = qword_1000E46D8;
  uint64_t v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1000EA798;
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "GroupedVents Disabled UI", v6, 2u);
    swift_slowDealloc();
  }
  unint64_t v7 = *(void *)&v3[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons];
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (!result) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v8) {
      goto LABEL_16;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v7 + 8 * i + 32);
    }
    uint64_t v12 = v11;
    char v13 = *((unsigned char *)v11 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState);
    *((unsigned char *)v11 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState) = 1;
    if ((v13 & 1) == 0) {
      sub_100066D70();
    }
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10001C600;
  *(void *)(v14 + 24) = v1;
  swift_retain();
  sub_10001939C(1, (uint64_t (*)(id))sub_10001C60C, v14);
  swift_release();

  return swift_release();
}

void sub_10001A11C(char *a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v51 - v6;
  __chkstk_darwin(v8);
  double v10 = (char *)&v51 - v9;
  id v52 = self;
  id v11 = [v52 sharedApplication];
  id v12 = [v11 delegate];

  if (!v12)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v13 = type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v14 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v15 = *(id *)&v14[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  unint64_t v16 = *(void *)&a1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons];
  unint64_t v17 = v16 >> 62;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v26 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 1, 1, v26);
    goto LABEL_10;
  }
  uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v51 = v13;
  if ((v16 & 0xC000000000000001) != 0)
  {
    unint64_t v19 = v16 >> 62;
    id v20 = v7;
    uint64_t v21 = v4;
    double v22 = a1;
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_36;
    }
    unint64_t v19 = v16 >> 62;
    id v20 = v7;
    uint64_t v21 = v4;
    double v22 = a1;
    id v23 = *(id *)(v16 + 32);
  }
  os_log_type_t v24 = v23;
  swift_bridgeObjectRelease();
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();

  uint64_t v25 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v10, 0, 1, v25);
  a1 = v22;
  uint64_t v4 = v21;
  unint64_t v7 = v20;
  unint64_t v17 = v19;
LABEL_10:
  char v27 = sub_10002C104((uint64_t)v10);

  sub_10000A404((uint64_t)v10, (uint64_t *)&unk_1000E7C60);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v28)
  {
LABEL_14:
    id v29 = [v52 sharedApplication:v51];
    id v30 = [v29 delegate];

    if (v30)
    {
      swift_dynamicCastClassUnconditional();
      uint64_t v31 = (char *)sub_10008EAA4();
      swift_unknownObjectRelease();
      uint64_t v4 = (char *)*(id *)&v31[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

      if (v17)
      {
        swift_bridgeObjectRetain();
        if (_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_17:
          if ((v16 & 0xC000000000000001) == 0)
          {
            if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v33 = *(id *)(v16 + 32);
LABEL_20:
              id v34 = v33;
              swift_bridgeObjectRelease();
              sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
              CAFPositionedRequired.layoutKey.getter();

              uint64_t v35 = type metadata accessor for CAUVehicleLayoutKey();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v7, 0, 1, v35);
LABEL_30:
              sub_10002B5E0((uint64_t)v7);

              sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E7C60);
              id v44 = self;
              uint64_t v45 = swift_allocObject();
              *(void *)(v45 + 16) = a1;
              id v57 = (uint64_t (*)(uint64_t))sub_10001C850;
              uint64_t v58 = v45;
              aBlock = _NSConcreteStackBlock;
              uint64_t v54 = 1107296256;
              id v55 = sub_10005FC84;
              os_log_type_t v56 = &unk_1000CAC68;
              uint64_t v46 = _Block_copy(&aBlock);
              id v47 = a1;
              swift_release();
              uint64_t v48 = swift_allocObject();
              *(void *)(v48 + 16) = 0;
              *(void *)(v48 + 24) = 0;
              id v57 = sub_10001C5DC;
              uint64_t v58 = v48;
              aBlock = _NSConcreteStackBlock;
              uint64_t v54 = 1107296256;
              id v55 = sub_10005FCC8;
              os_log_type_t v56 = &unk_1000CACB8;
              id v49 = _Block_copy(&aBlock);
              swift_release();
              [v44 _animateUsingSpringWithDuration:0 delay:v46 options:v49 mass:0.45 stiffness:0.2 damping:1.0 initialVelocity:426.0 animations:41.0 completion:0.0];
              _Block_release(v49);
              _Block_release(v46);
              return;
            }
            __break(1u);
            goto LABEL_38;
          }
LABEL_36:
          id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v32 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v32) {
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v7, 1, 1, v43);
      goto LABEL_30;
    }
    goto LABEL_41;
  }
  id v36 = [v52 sharedApplication];
  id v37 = [v36 delegate];

  if (v37)
  {
    swift_dynamicCastClassUnconditional();
    char v38 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    unint64_t v7 = (char *)*(id *)&v38[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

    if (v17)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v39 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v39)
      {
LABEL_24:
        if ((v16 & 0xC000000000000001) != 0)
        {
LABEL_38:
          id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_27;
        }
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v40 = *(id *)(v16 + 32);
LABEL_27:
          double v41 = v40;
          swift_bridgeObjectRelease();
          sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
          CAFPositionedRequired.layoutKey.getter();

          uint64_t v42 = type metadata accessor for CAUVehicleLayoutKey();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v4, 0, 1, v42);
LABEL_33:
          sub_10002AFE4((uint64_t)v4);

          sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E7C60);
          return;
        }
        __break(1u);
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v50 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v4, 1, 1, v50);
    goto LABEL_33;
  }
LABEL_42:
  __break(1u);
}

void sub_10001A9E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = sub_100016C6C();
  id v6 = [v5 layer];

  id v7 = [v6 animationKeys];
  if (v7)
  {
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = *(void *)(v8 + 16);
    swift_bridgeObjectRelease();
    if (v9)
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      double v10 = qword_1000EA798;
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "GroupedVents skipping call for OFF animation, an animation is already in progress.", v12, 2u);
        swift_slowDealloc();
      }
      return;
    }
  }
  id v13 = [self sharedApplication];
  id v14 = [v13 delegate];

  if (!v14)
  {
LABEL_26:
    __break(1u);
    return;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v15 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  id v16 = *(id *)&v15[OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler];

  unint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons];
  if (!(v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_12;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v22 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_17;
  }
LABEL_12:
  if ((v17 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_26;
  }
  id v19 = *(id *)(v17 + 32);
LABEL_15:
  id v20 = v19;
  swift_bridgeObjectRelease();
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();

  uint64_t v21 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v4, 0, 1, v21);
LABEL_18:
  sub_10002B5E0((uint64_t)v4);

  sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E7C60);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v23 = qword_1000EA798;
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "GroupedVents Stack UI", v25, 2u);
    swift_slowDealloc();
  }
  uint64_t v26 = self;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v1;
  id v36 = sub_10001C5B8;
  uint64_t v37 = v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  id v34 = sub_10005FC84;
  uint64_t v35 = &unk_1000CAB00;
  char v28 = _Block_copy(&aBlock);
  id v29 = v1;
  swift_release();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  *(void *)(v30 + 24) = 0;
  id v36 = sub_10001C5DC;
  uint64_t v37 = v30;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  id v34 = sub_10005FCC8;
  uint64_t v35 = &unk_1000CAB50;
  uint64_t v31 = _Block_copy(&aBlock);
  swift_release();
  [v26 _animateUsingSpringWithDuration:0 delay:v28 options:v31 mass:0.45 stiffness:0.0 damping:1.0 initialVelocity:426.0 animations:41.0 completion:0.0];
  _Block_release(v31);
  _Block_release(v28);
}

id sub_10001AFD8(char *a1)
{
  uint64_t v2 = *(void *)&a1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_axis];
  [a1 frame];
  if (v2) {
    double Height = CGRectGetHeight(*(CGRect *)&v3);
  }
  else {
    double Height = CGRectGetWidth(*(CGRect *)&v3);
  }
  double v8 = Height;
  uint64_t v9 = *(void **)&a1[OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeAnimatedConstraint];
  id result = [v9 constant];
  if (v8 != v11)
  {
    [v9 setConstant:v8];
    return [a1 layoutIfNeeded];
  }
  return result;
}

void sub_10001B090(void *a1)
{
  uint64_t v2 = self;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10001C5E0;
  *(void *)(v4 + 24) = v3;
  v7[4] = sub_10001C5F8;
  v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100093D88;
  v7[3] = &unk_1000CABC8;
  id v5 = _Block_copy(v7);
  a1;
  swift_retain();
  swift_release();
  [(id)v2 performWithoutAnimation:v5];
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    id v6 = sub_100016C6C();
    [v6 setAlpha:1.0];
    swift_release();
  }
}

uint64_t sub_10001B218(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = (unsigned __int8 *)*(id *)(v1 + 8 * i + 32);
      }
      id v6 = v5;
      int v7 = v5[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState];
      v5[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState] = 0;
      if (v7 == 1) {
        sub_100066D70();
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_10001B314()
{
  char v0 = sub_10006656C();
  uint64_t result = v0 & 8;
  if (v0)
  {
    if ((v0 & 4) != 0)
    {
      result |= 5uLL;
      if ((v0 & 0x10) == 0) {
        return result;
      }
      return result | 0x10;
    }
    result |= 1uLL;
    if ((v0 & 0x10) != 0) {
      return result | 0x10;
    }
  }
  else
  {
    if ((v0 & 4) != 0) {
      result |= 4uLL;
    }
    if ((v0 & 0x10) != 0) {
      return result | 0x10;
    }
  }
  return result;
}

id sub_10001B368()
{
  return sub_10001B384(0, type metadata accessor for ClimateGroupedVentsButton.VentButtonWithoutAutomode);
}

id sub_10001B384(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateGroupedVentsButton.VentButtonWithoutAutomode()
{
  return self;
}

void sub_10001B3E0(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  Class v113 = a2;
  uint64_t v114 = a4;
  uint64_t v109 = a1;
  uint64_t v112 = type metadata accessor for UUID();
  uint64_t v108 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  id v111 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v6 - 8);
  double v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v9 - 8);
  double v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ClimateSystemManager();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CAUVehicleLayoutKey();
  __chkstk_darwin(v19);
  uint64_t v106 = (uint64_t)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  id v23 = (char *)&v101 - v22;
  __chkstk_darwin(v24);
  id v107 = (char *)&v101 - v25;
  __chkstk_darwin(v26);
  char v28 = (char *)&v101 - v27;
  uint64_t v29 = a3;
  uint64_t v31 = v30;
  sub_10001C4AC(v29, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v18, 1, v19) == 1)
  {
    sub_10000A404((uint64_t)v18, (uint64_t *)&unk_1000E7C60);
    return;
  }
  uint64_t v103 = v23;
  uint64_t v105 = v31;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v18, v19);
  id v32 = [self sharedApplication];
  id v33 = [v32 delegate];

  if (!v33) {
    goto LABEL_56;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v34 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v28, v19);
    sub_10000A404((uint64_t)v11, &qword_1000E5AC0);
    return;
  }
  sub_10001C51C((uint64_t)v11, (uint64_t)v15);
  uint64_t v35 = v114;
  sub_10001C148(v109, (uint64_t)v28, v114);
  uint64_t v36 = v35 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsForLayoutKey;
  swift_beginAccess();
  uint64_t v37 = *(void *)(*(void *)v36 + 16);
  uint64_t v104 = v19;
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_10007C5C4((uint64_t)v28);
    char v39 = v38;
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_33;
    }
  }
  uint64_t v40 = *(void *)&v15[*(int *)(v12 + 36)];
  if (*(void *)(v40 + 16))
  {
    uint64_t v101 = (void *)v36;
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_10007C5C4((uint64_t)v28);
    if (v42)
    {
      unint64_t v43 = v41;
      uint64_t v44 = *(void *)(v40 + 56);
      uint64_t v45 = type metadata accessor for ClimateZone();
      uint64_t v46 = v28;
      uint64_t v47 = *(void *)(v45 - 8);
      uint64_t v48 = v44 + *(void *)(v47 + 72) * v43;
      uint64_t v19 = v104;
      sub_10000ABC4(v48, (uint64_t)v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v8, 0, 1, v45);
      char v28 = v46;
    }
    else
    {
      uint64_t v45 = type metadata accessor for ClimateZone();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v8, 1, 1, v45);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for ClimateZone();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v8, 1, v45) == 1) {
      goto LABEL_14;
    }
    unint64_t v50 = *(void *)&v8[*(int *)(v45 + 36)];
    swift_bridgeObjectRetain();
    sub_10000D204((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    (*(void (**)(uint64_t, char *, uint64_t))(v105 + 16))(v106, v28, v19);
    uint64_t v109 = v50;
    if (v50 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      if (v51) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v51 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v51)
      {
LABEL_17:
        if (v51 >= 1)
        {
          uint64_t v52 = 0;
          unint64_t v53 = v109 & 0xC000000000000001;
          uint64_t v54 = _swiftEmptyArrayStorage;
          do
          {
            if (v53) {
              id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v55 = *(id *)(v109 + 8 * v52 + 32);
            }
            os_log_type_t v56 = v55;
            swift_unknownObjectWeakInit();
            uint64_t v57 = swift_unknownObjectWeakAssign();
            sub_10000D0D4(v57, (uint64_t)v117, &qword_1000E7AD0);
            char v118 = 0;

            if (v118)
            {
              sub_10000A404((uint64_t)v117, (uint64_t *)&unk_1000E5130);
            }
            else
            {
              sub_10000D0D4((uint64_t)v117, (uint64_t)v116, &qword_1000E7AD0);
              sub_10000D0D4((uint64_t)v116, (uint64_t)v117, &qword_1000E7AD0);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v54 = sub_1000A2B40(0, v54[2] + 1, 1, (unint64_t)v54);
              }
              unint64_t v59 = v54[2];
              unint64_t v58 = v54[3];
              if (v59 >= v58 >> 1) {
                uint64_t v54 = sub_1000A2B40((void *)(v58 > 1), v59 + 1, 1, (unint64_t)v54);
              }
              v54[2] = v59 + 1;
              sub_10000D0D4((uint64_t)v117, (uint64_t)&v54[v59 + 4], &qword_1000E7AD0);
              uint64_t v19 = v104;
            }
            ++v52;
          }
          while (v51 != v52);
          goto LABEL_32;
        }
        __break(1u);
LABEL_56:
        __break(1u);
        return;
      }
    }
    uint64_t v54 = _swiftEmptyArrayStorage;
LABEL_32:
    swift_bridgeObjectRelease_n();
    int64_t v60 = v101;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v116[0] = *v60;
    *int64_t v60 = 0x8000000000000000;
    uint64_t v62 = (uint64_t)v54;
    uint64_t v63 = v106;
    sub_10003F694(v62, v106, isUniquelyReferenced_nonNull_native);
    *int64_t v60 = v116[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v63, v19);
    swift_endAccess();
    goto LABEL_33;
  }
  uint64_t v49 = type metadata accessor for ClimateZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v8, 1, 1, v49);
LABEL_14:
  sub_10000A404((uint64_t)v8, (uint64_t *)&unk_1000E5530);
LABEL_33:
  unint64_t v64 = (unint64_t)v113;
  Class v102 = v15;
  id v110 = v28;
  if ((unint64_t)v113 >> 62) {
    goto LABEL_46;
  }
  uint64_t v65 = *(void *)(((unint64_t)v113 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v65; uint64_t v65 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v66 = v64 & 0xC000000000000001;
    uint64_t v109 = v108 + 8;
    uint64_t v67 = 4;
    p_type = &stru_1000D5FF0.type;
    os_log_type_t v69 = &selRef_startAnimating;
    uint64_t v70 = v114;
    uint64_t v71 = 0;
    if ((v64 & 0xC000000000000001) != 0)
    {
LABEL_36:
      uint64_t v72 = (id *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v72 = (id *)*(id *)(v64 + 8 * v67);
LABEL_38:
      unint64_t v64 = (unint64_t)v72;
      uint64_t v73 = v71 + 1;
      if (__OFADD__(v71, 1)) {
        break;
      }
      [v72 p_type[428] v70];
      if ([(id)v64 v69[68]])
      {
        id v74 = [(id)v64 uniqueIdentifier];
        uint64_t v75 = v65;
        uint64_t v76 = v69;
        id v77 = p_type;
        uint64_t v78 = (uint64_t)v111;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10002BD54(v78, (uint64_t)v110);
        uint64_t v79 = v78;
        p_type = v77;
        os_log_type_t v69 = v76;
        uint64_t v65 = v75;
        (*(void (**)(uint64_t, uint64_t))v109)(v79, v112);

        unint64_t v64 = (unint64_t)v113;
        if (v73 == v75) {
          goto LABEL_47;
        }
      }
      else
      {

        unint64_t v64 = (unint64_t)v113;
        if (v73 == v65) {
          goto LABEL_47;
        }
      }
      uint64_t v71 = ++v67 - 4;
      if (v66) {
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_46:
    swift_bridgeObjectRetain();
  }
LABEL_47:
  swift_bridgeObjectRelease();
  id v80 = (uint64_t *)(v114 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey);
  swift_beginAccess();
  uint64_t v81 = (uint64_t)v110;
  if (*(void *)(*v80 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10007C5C4(v81);
    char v83 = v82;
    swift_bridgeObjectRelease();
    if (v83)
    {
      sub_10000D204((uint64_t)v102, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v81, v104);
      return;
    }
  }
  uint64_t v84 = (uint64_t *)(v114 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsInAutomodeForLayoutKey);
  swift_beginAccess();
  uint64_t v85 = *v84;
  uint64_t v86 = (uint64_t)v102;
  if (*(void *)(v85 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v87 = sub_10007C5C4(v81);
    if (v88)
    {
      uint64_t v89 = *(void *)(*(void *)(v85 + 56) + 8 * v87);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v90 = v105;
      uint64_t v91 = (uint64_t)v103;
      uint64_t v92 = v104;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v103, v81, v104);
      uint64_t v93 = *(void *)(v89 + 16);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      char v94 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v115 = *v80;
      uint64_t *v80 = 0x8000000000000000;
      sub_10003F4F8(v93 != 0, v91, v94);
      uint64_t *v80 = v115;
      swift_bridgeObjectRelease();
      id v95 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v95(v91, v92);
      swift_endAccess();
      sub_10000D204(v86, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      v95(v81, v92);
      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v96 = v105;
  uint64_t v97 = (uint64_t)v107;
  uint64_t v98 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v107, v81, v104);
  swift_beginAccess();
  char v99 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v115 = *v80;
  uint64_t *v80 = 0x8000000000000000;
  sub_10003F4F8(0, v97, v99);
  uint64_t *v80 = v115;
  swift_bridgeObjectRelease();
  id v100 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
  v100(v97, v98);
  swift_endAccess();
  sub_10000D204(v86, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  v100(v81, v98);
}

uint64_t sub_10001C148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  double v11 = &v28[-v10];
  uint64_t v12 = a3 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_observersForLayoutKey;
  swift_beginAccess();
  if (*(void *)(*(void *)v12 + 16)
    && (swift_bridgeObjectRetain(), sub_10007C5C4(a2), char v14 = v13, swift_bridgeObjectRelease(), (v14 & 1) != 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  }
  else
  {
    id v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v15(v11, a2, v5);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29[0] = *(void *)v12;
    *(void *)uint64_t v12 = 0x8000000000000000;
    sub_10003F4EC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v12 = v29[0];
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    swift_endAccess();
    v15(v8, a2, v5);
  }
  uint64_t v17 = sub_10002BC9C();
  uint64_t v19 = sub_100034374(v29);
  if (*v18)
  {
    uint64_t v20 = (void **)v18;
    swift_unknownObjectWeakInit();
    uint64_t v21 = swift_unknownObjectWeakAssign();
    sub_10000D0D4(v21, (uint64_t)v28, (uint64_t *)&unk_1000E5780);
    uint64_t v22 = *v20;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    void *v20 = v22;
    if ((v23 & 1) == 0)
    {
      uint64_t v22 = sub_1000A29E8(0, v22[2] + 1, 1, (unint64_t)v22);
      void *v20 = v22;
    }
    unint64_t v25 = v22[2];
    unint64_t v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      uint64_t v22 = sub_1000A29E8((void *)(v24 > 1), v25 + 1, 1, (unint64_t)v22);
      void *v20 = v22;
    }
    v22[2] = v25 + 1;
    sub_10000D0D4((uint64_t)v28, (uint64_t)&v22[v25 + 4], (uint64_t *)&unk_1000E5780);
    ((void (*)(void *, void))v19)(v29, 0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return ((uint64_t (*)(unsigned char *, void))v17)(v30, 0);
  }
  else
  {
    ((void (*)(void *, void))v19)(v29, 0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return ((uint64_t (*)(unsigned char *, void))v17)(v30, 0);
  }
}

uint64_t sub_10001C4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E7C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateSystemManager();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C580()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10001C5B8()
{
  sub_10001B090(*(void **)(v0 + 16));
}

uint64_t sub_10001C5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001C5D0()
{
  return swift_release();
}

uint64_t sub_10001C5E0()
{
  return sub_10001B218(*(void *)(v0 + 16));
}

uint64_t sub_10001C5E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001C5F8()
{
  return sub_100030EC4(*(uint64_t (**)(void))(v0 + 16));
}

void sub_10001C600()
{
  sub_10001A11C(*(char **)(v0 + 16));
}

uint64_t sub_10001C60C()
{
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

id sub_10001C640()
{
  return sub_10001AFD8(*(char **)(v0 + 16));
}

uint64_t sub_10001C64C()
{
  return _swift_deallocObject(v0, 17, 7);
}

id sub_10001C660()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100019278(0);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_autoModeButton);

  return [v2 setAlpha:0.0];
}

uint64_t sub_10001C6B0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001C6C8()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001C718()
{
  return sub_1000199CC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

void sub_10001C738()
{
  id v0 = sub_100016C6C();
  [v0 setAlpha:1.0];
}

uint64_t sub_10001C790()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001C7D0(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 16);
    if (v2) {
      return v2();
    }
  }
  return result;
}

uint64_t sub_10001C874()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate31ClimateZonesSyncedServiceButton_zonesSynced);
  unsigned int v2 = [v1 on];
  unsigned int v3 = [v1 onRestricted];
  unsigned int v4 = [v1 onInvalid];
  unsigned __int8 v5 = [v1 onDisabled];
  if (v2)
  {
    if (v3)
    {
      uint64_t v6 = 5;
      if (v4) {
        uint64_t v6 = 13;
      }
      if ((v5 & 1) == 0) {
        return v6;
      }
      return v6 | 0x10;
    }
    uint64_t v6 = 9;
    if (!v4) {
      uint64_t v6 = 1;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else if (v3)
  {
    uint64_t v6 = 4;
    if (v4) {
      uint64_t v6 = 12;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else
  {
    uint64_t v6 = 8;
    if (!v4) {
      uint64_t v6 = 0;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  return v6;
}

char *sub_10001C94C(void *a1, unsigned __int8 a2)
{
  *(void *)&v2[OBJC_IVAR____TtC7Climate31ClimateZonesSyncedServiceButton_zonesSynced] = a1;
  v70.receiver = v2;
  v70.super_class = (Class)type metadata accessor for ClimateZonesSyncedServiceButton();
  id v5 = a1;
  uint64_t v6 = (char *)[super init];
  [v5 registerObserver:v6];
  uint64_t v7 = &v6[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle];
  swift_beginAccess();
  char v8 = *v7;
  char *v7 = 1;
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v6;
    ClimateButton.updateClimateConfiguration()();
  }
  uint64_t v10 = &v6[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *((void *)v10 + 1);
  *(_OWORD *)uint64_t v10 = xmmword_1000B25E0;
  char v13 = v6;
  if (!v12
    || (v11 == 1129208147 ? (BOOL v14 = v12 == 0xE400000000000000) : (BOOL v14 = 0),
        !v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  int v15 = a2;
  if (a2 == 1) {
    goto LABEL_12;
  }
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v5;
  uint64_t v18 = (uint64_t *)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t *v18 = (uint64_t)sub_10001D218;
  v18[1] = v17;
  id v20 = v5;
  sub_100005690(v19);
  if (v15 == 3)
  {
LABEL_12:
    id v21 = [v13 titleLabel];
    if (v21)
    {
      uint64_t v22 = v21;
      if (qword_1000E46F8 != -1) {
        swift_once();
      }
      [v22 setFont:qword_1000EA820];
    }
    int v23 = v13[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v13[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if (v23 != 1)
    {
      unint64_t v24 = *(void **)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
      unint64_t v25 = v13;
      [v24 removeFromSuperview];
      sub_100088B54();
    }
    uint64_t v26 = qword_1000E46D0;
    uint64_t v27 = v13;
    if (v26 != -1) {
      swift_once();
    }
    id v65 = v5;
    char v28 = (void *)qword_1000EA770;
    uint64_t v29 = *(void **)algn_1000EA778;
    uint64_t v30 = qword_1000EA780;
    id v31 = [self systemGreenColor];
    if (!v31) {
      id v31 = v29;
    }
    id v32 = (void **)&v27[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    id v33 = *(void **)&v27[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v66 = *(void *)&v27[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
    uint64_t v68 = *(void **)&v27[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
    unsigned __int8 *v32 = v28;
    v32[1] = v31;
    v32[2] = (void *)v30;
    id v34 = v28;
    swift_bridgeObjectRetain_n();
    id v64 = v34;
    uint64_t v35 = *v32;
    uint64_t v36 = v32[1];
    uint64_t v37 = (uint64_t)v32[2];
    sub_1000056A0();
    id v38 = v35;
    id v39 = v36;
    swift_bridgeObjectRetain();
    id v40 = v31;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v37, v66);
      char v42 = v41;
      swift_bridgeObjectRelease();

      if (v42)
      {
LABEL_28:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = qword_1000E46C8;
        uint64_t v45 = v27;
        if (v44 != -1) {
          swift_once();
        }
        uint64_t v46 = (void *)qword_1000EA758;
        uint64_t v47 = (void *)qword_1000EA760;
        uint64_t v48 = qword_1000EA768;
        uint64_t v49 = (void **)&v45[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        unint64_t v50 = *(void **)&v45[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        os_log_type_t v69 = *(void **)&v45[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
        uint64_t v51 = *(void *)&v45[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
        *uint64_t v49 = (void *)qword_1000EA758;
        v49[1] = v47;
        v49[2] = (void *)v48;
        id v52 = v46;
        id v53 = v47;
        swift_bridgeObjectRetain_n();
        id v67 = v52;
        id v54 = v53;
        id v55 = *v49;
        os_log_type_t v56 = v49[1];
        uint64_t v57 = (uint64_t)v49[2];
        id v58 = v55;
        id v59 = v56;
        swift_bridgeObjectRetain();
        if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
        {
          sub_10007C1D0(v57, v51);
          char v61 = v60;
          swift_bridgeObjectRelease();

          if (v61) {
            goto LABEL_36;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(void))((swift_isaMask & *(void *)v45) + 0x228))();
LABEL_36:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v5 = v65;
        goto LABEL_37;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v27) + 0x228))(v43);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v62 = v13;
  sub_10009F8A4();
  [v62 setEnabled:(unint64_t)sub_10001C874() < 8];
  sub_10008896C();
  sub_100088B54();

  return v62;
}

void sub_10001CF94(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    [a3 setOn:[a3 on] ^ 1];
    sub_10009F8A4();
    [v5 setEnabled:(unint64_t)sub_10001C874() < 8];
    sub_10008896C();
    sub_100088B54();
  }
}

void sub_10001D090()
{
}

id sub_10001D0A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZonesSyncedServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateZonesSyncedServiceButton()
{
  return self;
}

uint64_t sub_10001D1A0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001D1D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10001D218(uint64_t a1)
{
  sub_10001CF94(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t (*sub_10001D220())()
{
  return j__swift_endAccess;
}

BOOL sub_10001D278(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10001D294(a1, a2, a3);
}

BOOL sub_10001D294(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006730(&qword_1000E52A8);
  uint64_t v11 = v10 - 8;
  __n128 v12 = __chkstk_darwin(v10);
  BOOL v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v14, a1, v6, v12);
  sub_10001D4A4(a2, (uint64_t)&v14[*(int *)(v11 + 56)]);
  id v15 = [a3 trackerUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10001D50C();
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10001D564((uint64_t)v14);
  return (v15 & 1) == 0;
}

uint64_t sub_10001D448()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClimateContinuousStepperTracker()
{
  return self;
}

uint64_t sub_10001D4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E5DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001D50C()
{
  unint64_t result = qword_1000E70C0;
  if (!qword_1000E70C0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E70C0);
  }
  return result;
}

uint64_t sub_10001D564(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E52A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10001D5C4()
{
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = [v1 sharedApplication];
  id v4 = [v3 delegate];

  if (v4)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v5 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    uint64_t v6 = v5[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    id v7 = objc_allocWithZone((Class)type metadata accessor for ClimateFanContinuousStepper());
    uint64_t v8 = sub_1000A0038(v2, v6, 2);
    [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v9 = qword_1000E46B8;
    uint64_t v10 = v8;
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v11 = (void *)qword_1000EA728;
    __n128 v12 = (void *)qword_1000EA730;
    uint64_t v13 = qword_1000EA738;
    BOOL v14 = &v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
    id v15 = *(void **)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
    uint64_t v35 = *(void **)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8];
    uint64_t v16 = *(void *)&v10[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16];
    *(void *)BOOL v14 = qword_1000EA728;
    *((void *)v14 + 1) = v12;
    *((void *)v14 + 2) = v13;
    id v17 = v11;
    id v18 = v12;
    swift_bridgeObjectRetain_n();
    id v19 = v17;
    id v34 = v18;
    id v20 = *(id *)v14;
    id v21 = (void *)*((void *)v14 + 1);
    uint64_t v22 = *((void *)v14 + 2);
    sub_1000056A0();
    id v23 = v20;
    id v24 = v21;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v22, v16);
      char v26 = v25;
      swift_bridgeObjectRelease();

      if (v26)
      {
LABEL_13:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100006730(&qword_1000E4B50);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_1000B2000;
        *(void *)(v33 + 32) = v10;
        *(void *)(v33 + 40) = &off_1000CC650;
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (v10[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial] == 1)
    {
      uint64_t v27 = (void *)*((void *)v14 + 1);
      uint64_t v28 = *((void *)v14 + 2);
      id v29 = *(id *)v14;
      id v30 = v27;
      swift_bridgeObjectRetain();
      char v31 = sub_10009FB80();
      id v32 = sub_10006511C(v31, v29, v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v32 = [self clearColor];
    }
    [v10 setBackgroundColor:v32];

    sub_1000A1184();
    goto LABEL_13;
  }
  __break(1u);
}

void sub_10001D914()
{
}

char *sub_10001D938(void *a1, double a2)
{
  swift_unknownObjectWeakInit();
  *(void *)&v2[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView] = 0;
  *(void *)&v2[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView] = 0;
  *(void *)&v2[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover] = 0;
  *(void *)&v2[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover] = 0;
  id v5 = v2;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v6 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v6 = &_swiftEmptySetSingleton;
  }
  *(void *)&v5[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_cancellables] = v6;
  *(void *)&v5[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_activeConstraints] = _swiftEmptyArrayStorage;
  *(double *)&v5[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_height] = a2;
  swift_unknownObjectWeakAssign();
  if (a1)
  {
    self;
    id v7 = (void *)swift_dynamicCastObjCClass();
    if (v7) {
      id v8 = a1;
    }
  }
  else
  {
    id v7 = 0;
  }
  type metadata accessor for ClimatePopoverManager();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  *(void *)&v5[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_popoverManager] = v9;
  v18.receiver = v5;
  v18.super_class = (Class)type metadata accessor for ClimateOverlayViewController();
  uint64_t v10 = (char *)[super initWithNibName:0 bundle:0];
  if (a1)
  {
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1000B2670;
    id v12 = objc_allocWithZone((Class)CRSUIClimatePopoverBSActionsHandler);
    id v13 = a1;
    BOOL v14 = v10;
    *(void *)(v11 + 32) = [v12 initWithDelegate:v14];
    specialized Array._endMutation()();
    sub_100006730(&qword_1000E53E8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v16 = v14;
    [v13 _registerSceneActionsHandlerArray:isa forKey:v16];
  }
  *(void *)(*(void *)&v10[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_popoverManager] + 64) = &off_1000CAF98;
  swift_unknownObjectWeakAssign();
  return v10;
}

void sub_10001DC04()
{
  uint64_t v1 = sub_100006730(&qword_1000E5440);
  uint64_t v37 = *(void *)(v1 - 8);
  uint64_t v38 = v1;
  __chkstk_darwin(v1);
  uint64_t v36 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100006730(&qword_1000E5448);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  __chkstk_darwin(v3);
  id v39 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730((uint64_t *)&unk_1000E5450);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006730(&qword_1000E4B98);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006730((uint64_t *)&unk_1000E5460);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (objc_class *)type metadata accessor for ClimateOverlayViewController();
  v45.receiver = v0;
  v45.super_class = v16;
  [super viewDidLoad];
  uint64_t v43 = v0;
  sub_10001E390();
  id v42 = self;
  id v17 = [v42 sharedApplication];
  id v18 = [v17 delegate];

  if (v18)
  {
    uint64_t v35 = type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v19 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_beginAccess();
    sub_100006730(&qword_1000E4BB0);
    Published.projectedValue.getter();
    swift_endAccess();

    id v34 = self;
    id v44 = [v34 mainRunLoop];
    uint64_t v20 = type metadata accessor for NSRunLoop.SchedulerOptions();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    uint64_t v31 = v21 + 56;
    id v32 = v22;
    v22(v7, 1, 1, v20);
    uint64_t v23 = sub_100007310(0, (unint64_t *)&unk_1000E5470);
    sub_10000D02C(&qword_1000E4BB8, &qword_1000E4B98);
    sub_10000CF84();
    uint64_t v33 = v23;
    Publisher.receive<A>(on:options:)();
    sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C(&qword_1000E4BC0, (uint64_t *)&unk_1000E5460);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    id v24 = [v42 sharedApplication];
    id v25 = [v24 delegate];

    if (v25)
    {
      swift_dynamicCastClassUnconditional();
      id v26 = sub_10008EAA4();
      swift_unknownObjectRelease();
      swift_beginAccess();
      sub_100006730((uint64_t *)&unk_1000E5490);
      uint64_t v27 = v36;
      Published.projectedValue.getter();
      swift_endAccess();

      id v44 = [v34 mainRunLoop];
      v32(v7, 1, 1, v20);
      sub_10000D02C((unint64_t *)&unk_1000E77B0, &qword_1000E5440);
      uint64_t v28 = v38;
      id v29 = v39;
      Publisher.receive<A>(on:options:)();
      sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E5450);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v28);
      swift_allocObject();
      swift_unknownObjectWeakInit();
      sub_10000D02C(&qword_1000E54A0, &qword_1000E5448);
      uint64_t v30 = v41;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v30);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10001E390()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_activeConstraints];
  swift_beginAccess();
  if (*(void *)v2 >> 62)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3)
  {
    uint64_t v4 = self;
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 deactivateConstraints:isa];

    *(void *)uint64_t v2 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  id v7 = *(void **)&v1[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView];
  v74[0] = *(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView];
  uint64_t v6 = (void *)v74[0];
  v74[1] = 2;
  v74[2] = v7;
  v74[3] = 8;
  uint64_t v73 = OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_height;
  id v8 = v7;
  id v9 = v6;
  char v10 = 0;
  uint64_t v11 = 0;
  p_type = (char **)(&stru_1000D5FF0 + 16);
  uint64_t v13 = (char **)(&stru_1000D5FF0 + 16);
  while (1)
  {
    char v15 = v10;
    uint64_t v16 = (void **)&v74[2 * v11];
    id v17 = *v16;
    if (!*v16) {
      goto LABEL_8;
    }
    id v18 = v16[1];
    id v19 = self;
    id v20 = v17;
    id v21 = [v19 sharedApplication];
    id v22 = [v21 delegate];

    if (!v22) {
      break;
    }
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    uint64_t v23 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    int v24 = v23[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    if (v24 == 1)
    {
      if (v18 == (void *)2)
      {
        id v25 = [v20 p_type[484]];
        id v26 = [v1 v13[449]];
        if (!v26) {
          goto LABEL_58;
        }
        uint64_t v27 = v26;
        id v28 = [v26 p_type[484]];

        id v29 = [v25 constraintEqualToAnchor:v28 constant:0.0 v73];
      }
      else
      {
        id v25 = [v20 rightAnchor];
        id v35 = [v1 v13[449]];
        if (!v35) {
          goto LABEL_60;
        }
        uint64_t v36 = v35;
        id v28 = [v35 rightAnchor];

        id v29 = [v25 constraintEqualToAnchor:v28 constant:-0.0 v73];
      }
      id v37 = v29;

      id v38 = [v20 topAnchor];
      id v39 = [v1 v13[449]];
      if (!v39) {
        goto LABEL_56;
      }
      uint64_t v40 = v39;
      id v41 = [v39 topAnchor];

      id v42 = [v38 constraintEqualToAnchor:v41 constant:27.0];
      id v43 = v37;
      id v44 = [v20 widthAnchor];
      id v45 = [v44 constraintEqualToConstant:45.0];

      id v46 = [v20 heightAnchor];
      id v47 = [v46 constraintEqualToConstant:33.0];

      swift_beginAccess();
      if (*(void *)v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v49 = v69 + 4;
        if (__OFADD__(v69, 4))
        {
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v48 = *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v49 = v48 + 4;
        if (__OFADD__(v48, 4)) {
          goto LABEL_52;
        }
      }
      sub_10009CCD4(v49);
      specialized Array._endMutation()();
      id v50 = v42;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v51 = v43;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v52 = v45;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v53 = v47;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      id v14 = v51;
    }
    else
    {
      if (v18 == (void *)2)
      {
        id v30 = [v20 p_type[484]];
        id v31 = [v1 v13[449]];
        if (!v31) {
          goto LABEL_59;
        }
        id v32 = v31;
        id v33 = [v31 p_type[484]];

        id v34 = [v30 constraintEqualToAnchor:v33 constant:0.0 v73];
      }
      else
      {
        id v30 = [v20 rightAnchor];
        id v54 = [v1 v13[449]];
        if (!v54) {
          goto LABEL_61;
        }
        id v55 = v54;
        id v33 = [v54 rightAnchor];

        id v34 = [v30 constraintEqualToAnchor:v33 constant:-0.0];
      }
      id v56 = v34;

      id v57 = v56;
      id v58 = [v20 bottomAnchor];
      id v59 = [v1 v13[449]];
      if (!v59) {
        goto LABEL_57;
      }
      char v60 = v59;
      id v61 = [v59 bottomAnchor];

      id v62 = [v58 constraintEqualToAnchor:v61];
      id v63 = [v20 heightAnchor];
      id v64 = [v63 constraintEqualToConstant:*(double *)&v1[v73]];

      id v65 = [v20 widthAnchor];
      sub_100021970();
      id v66 = [v65 constraintEqualToConstant:];

      swift_beginAccess();
      if (*(void *)v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v68 = v70 + 4;
        if (__OFADD__(v70, 4)) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v67 = *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v68 = v67 + 4;
        if (__OFADD__(v67, 4)) {
          goto LABEL_53;
        }
      }
      sub_10009CCD4(v68);
      specialized Array._endMutation()();
      id v50 = v57;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v14 = v62;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v51 = v64;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v52 = v66;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      id v53 = v50;
    }

    p_type = &stru_1000D5FF0.type;
    uint64_t v13 = &stru_1000D5FF0.type;
LABEL_8:
    char v10 = 1;
    uint64_t v11 = 1;
    if (v15)
    {
      sub_100006730(&qword_1000E5438);
      swift_arrayDestroy();
      uint64_t v71 = self;
      sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
      swift_bridgeObjectRetain();
      Class v72 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v71 activateConstraints:v72];

      return;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

void sub_10001EDF8(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ClimateSystemManager();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_4;
  }
  char v10 = (void *)Strong;
  sub_10000D070(a1, (uint64_t)v4, &qword_1000E5AC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    sub_100023344((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v14 = qword_1000EA798;
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Climate overlay received climateSystem update", v16, 2u);
      swift_slowDealloc();
    }
    sub_10001F97C((uint64_t)v8);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    id v21 = (void *)swift_unknownObjectWeakLoadStrong();
    id v22 = v21;
    if (v21)
    {
      id v23 = [v21 _FBSScene];

      uint64_t v24 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v25 = (void *)swift_allocObject();
      v25[2] = v24;
      v25[3] = 0;
      v25[4] = v18;
      v25[5] = 0;
      v25[6] = v20;
      uint64_t v26 = swift_allocObject();
      uint64_t v27 = sub_1000233E4;
      *(void *)(v26 + 16) = sub_1000233E4;
      *(void *)(v26 + 24) = v25;
      aBlock[4] = sub_10002348C;
      aBlock[5] = v26;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001F3F4;
      aBlock[3] = &unk_1000CB1B8;
      id v28 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v23 updateClientSettingsWithBlock:v28];

      _Block_release(v28);
      LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v23 & 1) == 0) {
        goto LABEL_16;
      }
      __break(1u);
    }
    uint64_t v27 = 0;
LABEL_16:
    id v29 = [self sharedApplication];
    id v30 = [v29 delegate];

    if (v30)
    {
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      id v31 = (char *)sub_10008EAA4();
      swift_unknownObjectRelease();
      id v32 = *(id *)&v31[OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager];

      v32[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_overlayViewControllerDidLoad] = 1;
      sub_100094488();

      sub_100023404((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      sub_100005690((uint64_t)v27);
    }
    else
    {
      __break(1u);
    }
    return;
  }

  sub_10000A404((uint64_t)v4, &qword_1000E5AC0);
LABEL_4:
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1000EA798;
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Can't update temperature steppers, climate system is nil.", v13, 2u);
    swift_slowDealloc();
  }
}

void sub_10001F348(double a1, double a2, double a3, double a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v9 = (void *)Strong;
    self;
    char v10 = (void *)swift_dynamicCastObjCClass();
    if (v10) {
      [v10 setStepperInsets:a1, a2, a3, a4];
    }
  }
}

void sub_10001F3F4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

void sub_10001F440(unint64_t *a1)
{
  unint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (char *)Strong;
    uint64_t v4 = *(void **)(Strong + OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView);
    if (!v4) {
      goto LABEL_20;
    }
    type metadata accessor for ClimateCompactStatusBarView();
    uint64_t v5 = swift_dynamicCastClass();
    if (!v5) {
      goto LABEL_20;
    }
    uint64_t v6 = *(void **)&v3[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView];
    if (!v6) {
      goto LABEL_20;
    }
    uint64_t v7 = (void *)v5;
    uint64_t v8 = swift_dynamicCastClass();
    if (!v8) {
      goto LABEL_20;
    }
    id v9 = (void *)v8;
    uint64_t v10 = qword_1000E46D8;
    id v11 = v4;
    os_log_type_t v12 = v6;
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_1000EA798;
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v20 = v12;
      id v15 = v11;
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 67109632;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 8) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 14) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Status bar stepper state updated. isInteractive: %{BOOL}d, isVisible: %{BOOL}d, autoDeepLink: %{BOOL}d", (uint8_t *)v16, 0x14u);
      id v11 = v15;
      os_log_type_t v12 = v20;
      swift_slowDealloc();
    }
    if ((v1 & 2) == 0) {
      sub_10001F6E0();
    }
    [v9 setUserInteractionEnabled:(v1 >> 1) & 1];
    [v7 setUserInteractionEnabled:(v1 >> 1) & 1];
    [v9 alpha];
    double v18 = v17;
    [v7 alpha];
    if (v1)
    {
      if (v18 > 0.5 && v19 > 0.5) {
        goto LABEL_19;
      }
    }
    else if (v18 <= 0.5 && v19 <= 0.5)
    {
      goto LABEL_19;
    }
    sub_100053F9C((v1 & 1) == 0);
    sub_100053F9C((v1 & 1) == 0);
LABEL_19:

    id v3 = v12;
LABEL_20:
  }
}

void sub_10001F6E0()
{
  uint64_t v1 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v1 - 8);
  id v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v6 = &v21[-v5];
  uint64_t v7 = *(void **)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView];
  if (v7)
  {
    uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover];
    if (v8)
    {
      uint64_t v9 = (uint64_t)v7 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
      swift_beginAccess();
      sub_10000ABC4(v9, (uint64_t)v6);
      id v10 = v8;
      id v11 = v7;
      id v12 = [v0 view];
      if (!v12)
      {
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v13 = v12;
      sub_100063644((uint64_t)v8, (uint64_t)v6, v12, (void **)2, 1);

      sub_100023404((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    }
  }
  os_log_type_t v14 = *(void **)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView];
  if (v14)
  {
    id v15 = *(void **)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover];
    if (v15)
    {
      uint64_t v16 = (uint64_t)v14 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
      swift_beginAccess();
      sub_10000ABC4(v16, (uint64_t)v3);
      id v17 = v15;
      id v18 = v14;
      id v19 = [v0 view];
      if (v19)
      {
        uint64_t v20 = v19;
        sub_100063644((uint64_t)v15, (uint64_t)v3, v19, (void **)8, 1);

        sub_100023404((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ClimateZone);
        return;
      }
LABEL_11:
      __break(1u);
    }
  }
}

double sub_10001F97C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v4 - 8);
  uint64_t v62 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v61 = (uint64_t)&v56 - v7;
  __chkstk_darwin(v8);
  uint64_t v70 = (uint64_t)&v56 - v9;
  __chkstk_darwin(v10);
  id v12 = (char *)&v56 - v11;
  __chkstk_darwin(v13);
  id v15 = (char *)&v56 - v14;
  __chkstk_darwin(v16);
  id v18 = (char *)&v56 - v17;
  sub_100046B8C();
  int v20 = v19;
  id v21 = (int *)type metadata accessor for ClimateSystemManager();
  sub_10000D070(a1 + v21[7], (uint64_t)v18, (uint64_t *)&unk_1000E5530);
  uint64_t v22 = 0;
  id v23 = 0;
  id v24 = 0;
  int v68 = v20;
  if ((v20 & 1) == 0)
  {
    id v25 = *(void **)(a1 + 8);
    id v24 = [v25 cabin];
    id v23 = [v25 recirculation];
    uint64_t v22 = (uint64_t)[v25 zonesSynceds];
    if (v22)
    {
      sub_100007310(0, (unint64_t *)&qword_1000E5430);
      unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v22) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v22 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v22)
        {
LABEL_5:
          if ((v26 & 0xC000000000000001) != 0)
          {
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_44;
            }
            id v27 = *(id *)(v26 + 32);
          }
          uint64_t v22 = (uint64_t)v27;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  id v67 = (id)v22;
  LOBYTE(v22) = sub_1000202C4((uint64_t)v18, 2, v24, v23, (void *)v22);
  sub_10000D070(a1 + v21[8], (uint64_t)v15, (uint64_t *)&unk_1000E5530);
  if (v68)
  {
    id v28 = *(void **)(a1 + 8);
    id v21 = (int *)[v28 cabin];
    id v69 = [v28 recirculation];
    id v29 = [v28 zonesSynceds];
    if (v29)
    {
      id v30 = v29;
      sub_100007310(0, (unint64_t *)&qword_1000E5430);
      unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v31 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v37)
        {
LABEL_14:
          id v57 = v12;
          if ((v31 & 0xC000000000000001) == 0)
          {
            if (!*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              __break(1u);
            }
            id v32 = *(id *)(v31 + 32);
            goto LABEL_17;
          }
LABEL_44:
          id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
          id v33 = v32;
          uint64_t v34 = v70;
          swift_bridgeObjectRelease();
          id v35 = v69;
          uint64_t v36 = v33;
          id v12 = v57;
          goto LABEL_24;
        }
      }
      else if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v36 = 0;
    id v35 = v69;
    uint64_t v34 = v70;
  }
  else
  {
    uint64_t v36 = 0;
    id v35 = 0;
    id v21 = 0;
    uint64_t v34 = v70;
  }
LABEL_24:
  id v66 = v21;
  id v69 = v35;
  id v63 = v36;
  unsigned __int8 v71 = (sub_1000202C4((uint64_t)v15, 8, v21, v35, v36) | v22) & 1;
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v38 = qword_1000EA798;
  sub_10000D070((uint64_t)v18, (uint64_t)v12, (uint64_t *)&unk_1000E5530);
  sub_10000D070((uint64_t)v15, v34, (uint64_t *)&unk_1000E5530);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  id v64 = v23;
  id v65 = v24;
  if (v40)
  {
    uint64_t v59 = v2;
    char v60 = v18;
    id v58 = v15;
    uint64_t v41 = swift_slowAlloc();
    id v42 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 138544130;
    uint64_t v43 = v61;
    sub_10000D070((uint64_t)v12, v61, (uint64_t *)&unk_1000E5530);
    uint64_t v44 = type metadata accessor for ClimateZone();
    id v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48);
    if (v45(v43, 1, v44) == 1)
    {
      sub_10000A404(v43, (uint64_t *)&unk_1000E5530);
      id v72 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v46 = 0;
    }
    else
    {
      id v47 = *(id *)(v43 + *(int *)(v44 + 28));
      uint64_t v48 = v43;
      id v46 = v47;
      sub_100023404(v48, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      id v72 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    void *v42 = v46;
    sub_10000A404((uint64_t)v12, (uint64_t *)&unk_1000E5530);
    *(_WORD *)(v41 + 12) = 2114;
    uint64_t v49 = v62;
    sub_10000D070(v70, v62, (uint64_t *)&unk_1000E5530);
    unsigned int v50 = v45(v49, 1, v44);
    id v18 = v60;
    if (v50 == 1)
    {
      sub_10000A404(v49, (uint64_t *)&unk_1000E5530);
      id v72 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v51 = 0;
    }
    else
    {
      id v51 = *(id *)(v49 + *(int *)(v44 + 28));
      sub_100023404(v49, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      id v72 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    id v15 = v58;
    v42[1] = v51;
    sub_10000A404(v70, (uint64_t *)&unk_1000E5530);
    *(_WORD *)(v41 + 22) = 1024;
    LODWORD(v72) = v68 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 28) = 1024;
    swift_beginAccess();
    LODWORD(v72) = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Update steppers for leftZone: %{public}@, rightZone: %{public}@ isRHD: %{BOOL}d didCreateNewView:%{BOOL}d.", (uint8_t *)v41, 0x22u);
    sub_100006730(&qword_1000E4F30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000A404((uint64_t)v12, (uint64_t *)&unk_1000E5530);
    sub_10000A404(v34, (uint64_t *)&unk_1000E5530);
  }
  swift_beginAccess();
  id v52 = v66;
  if (v71 == 1) {
    sub_10001E390();
  }
  uint64_t v53 = type metadata accessor for ClimateZone();
  id v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48);
  if (v54(v18, 1, v53) != 1) {
    sub_100021970();
  }
  if (v54(v15, 1, v53) != 1) {
    sub_100021970();
  }

  sub_10000A404((uint64_t)v15, (uint64_t *)&unk_1000E5530);
  sub_10000A404((uint64_t)v18, (uint64_t *)&unk_1000E5530);
  return 0.0;
}

uint64_t sub_1000202C4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v32 = a4;
  id v33 = a5;
  uint64_t v9 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ClimateZone();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v18 = (char *)&v32 - v17;
  sub_10000D070(a1, (uint64_t)v11, (uint64_t *)&unk_1000E5530);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E5530);
    sub_100020B4C(a2);
  }
  else
  {
    sub_100023344((uint64_t)v11, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    int v19 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView;
    if (a2 != 2) {
      int v19 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView;
    }
    int v20 = *(void **)(v5 + *v19);
    if (!v20)
    {
      sub_1000206E0((uint64_t)v18, a2, a3, v32, v33);
      sub_100023404((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      return 1;
    }
    uint64_t v21 = qword_1000E46D8;
    id v22 = v20;
    if (v21 != -1) {
      swift_once();
    }
    id v23 = qword_1000EA798;
    id v24 = v22;
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      uint64_t v34 = a2;
      id v35 = v33;
      *(_DWORD *)uint64_t v26 = 134349314;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2080;
      swift_getObjectType();
      uint64_t v27 = _typeName(_:qualified:)();
      uint64_t v34 = sub_10000A56C(v27, v28, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "Status bar already existing for side: %{public}lu, kind: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10000ABC4((uint64_t)v18, (uint64_t)v15);
    uint64_t v30 = (uint64_t)v24 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
    swift_beginAccess();
    sub_100023198((uint64_t)v15, v30);
    uint64_t v31 = swift_endAccess();
    (*(void (**)(uint64_t))((swift_isaMask & *v24) + 0xA0))(v31);
    sub_100023404((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ClimateZone);

    sub_100023404((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  }
  return 0;
}

void sub_1000206E0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  id v43 = a5;
  uint64_t v11 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1000EA798;
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134349056;
    v44[0] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Creating Climate status bar view for side: %{public}lu", v16, 0xCu);
    swift_slowDealloc();
  }
  id v17 = [self sharedApplication];
  id v18 = [v17 delegate];

  if (!v18)
  {
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  int v19 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v20 = v19[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  sub_10000ABC4(a1, (uint64_t)v13);
  if (v20 == 1)
  {
    uint64_t v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = a2;
    id v23 = objc_allocWithZone((Class)type metadata accessor for ClimateCompactStatusBarView());
    id v24 = v6;
    uint64_t v25 = a2;
    id v26 = v43;
    id v42 = v43;
    id v27 = a3;
    id v28 = a4;
    id v29 = v26;
    a2 = v25;
    uint64_t v6 = v24;
    uint64_t v30 = sub_10005695C((uint64_t)v13, a3, a4, v29, (uint64_t)sub_100023234, v22);

    swift_release();
    v44[3] = type metadata accessor for ClimateOverlayViewController();
    v44[0] = v24;
    uint64_t v31 = v24;
    sub_100054BAC((uint64_t)v44, (uint64_t)"didTapClimateStatusBarButton:", 64);
    sub_10000A404((uint64_t)v44, (uint64_t *)&unk_1000E5420);
  }
  else
  {
    id v32 = objc_allocWithZone((Class)type metadata accessor for ClimateRegularStatusBarView());
    uint64_t v30 = sub_1000849B8((uint64_t)v13);
    id v33 = *(char **)&v30[OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper];
    if (v33)
    {
      uint64_t v34 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upButton];
      id v35 = v33;
      [v34 addTarget:v6 action:"didTapClimateStatusBarButton:" forControlEvents:64];
      [*(id *)&v35[OBJC_IVAR____TtC7Climate14ClimateStepper_downButton] addTarget:v6 action:"didTapClimateStatusBarButton:" forControlEvents:64];
      uint64_t v36 = (id *)&v35[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
      swift_beginAccess();
      [*v36 addTarget:v6 action:"didTapClimateStatusBarButton:" forControlEvents:64];
      [v35 _setCornerRadius:0.0];
    }
  }
  if (a2 == 8)
  {
    uint64_t v37 = OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView;
  }
  else
  {
    if (a2 != 2) {
      goto LABEL_15;
    }
    uint64_t v37 = OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView;
  }
  id v38 = *(void **)&v6[v37];
  *(void *)&v6[v37] = v30;
  os_log_type_t v39 = v30;

LABEL_15:
  [v30 setAlpha:1.0];
  id v40 = [v6 view];
  if (v40)
  {
    uint64_t v41 = v40;
    [v40 addSubview:v30];

    return;
  }
LABEL_18:
  __break(1u);
}

void sub_100020B4C(uint64_t a1)
{
  if (a1 == 2) {
    uint64_t v2 = OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView;
  }
  else {
    uint64_t v2 = OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView;
  }
  id v3 = (void **)(v1 + v2);
  uint64_t v4 = *(void **)(v1 + v2);
  if (v4)
  {
    [v4 removeFromSuperview];
    uint64_t v4 = *v3;
  }
  *id v3 = 0;
}

id sub_100020BE8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateOverlayViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateOverlayViewController()
{
  return self;
}

void sub_100020CEC(uint64_t a1, uint64_t a2, void **a3)
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1000EA798;
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Close indicator pressed", v6, 2u);
    swift_slowDealloc();
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_100020DF8(1, a3, 0);
  }
}

void sub_100020DF8(char a1, void **a2, char a3)
{
  uint64_t v4 = v3;
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1000EA798;
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134349312;
    HIDWORD(aBlock) = HIDWORD(a2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 1026;
    LODWORD(aBlock) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Asking to update popover for side: %{public}lu, isHidden: %{BOOL,public}d", (uint8_t *)v10, 0x12u);
    swift_slowDealloc();
  }
  uint64_t v11 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover;
  if (a2 != (void **)2) {
    uint64_t v11 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover;
  }
  uint64_t v12 = *(void **)&v4[*v11];
  uint64_t v13 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView;
  if (a2 != (void **)2) {
    uint64_t v13 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView;
  }
  uint64_t v14 = *(void **)&v4[*v13];
  if (a1)
  {
    if (!v12)
    {
      id v15 = v14;
      id v16 = 0;
      goto LABEL_21;
    }
    id v15 = v14;
    id v16 = v12;
    id v17 = [v16 view];
    if (v17)
    {
      id v18 = v17;
      [v17 alpha];
      double v20 = v19;

      if (v20 < 1.0)
      {
        uint64_t v21 = qword_1000EA798;
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          id v23 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v23 = 134349056;
          aBlock = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Early return, popover already hidden for side: %{public}lu", v23, 0xCu);
          swift_slowDealloc();
        }

        return;
      }
LABEL_21:
      id v52 = self;
      uint64_t v27 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = v12;
      *(void *)(v28 + 32) = v14;
      *(unsigned char *)(v28 + 40) = a3 & 1;
      id v57 = sub_100023170;
      uint64_t v58 = v28;
      aBlock = _NSConcreteStackBlock;
      uint64_t v54 = 1107296256;
      id v55 = sub_10005FC84;
      uint64_t v56 = &unk_1000CB078;
      id v29 = _Block_copy(&aBlock);
      id v30 = v16;
      id v31 = v15;
      swift_release();
      uint64_t v32 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v57 = sub_100023180;
      uint64_t v58 = v32;
      aBlock = _NSConcreteStackBlock;
      uint64_t v54 = 1107296256;
      id v55 = sub_10005FCC8;
      uint64_t v56 = &unk_1000CB0A0;
      id v33 = _Block_copy(&aBlock);
      swift_release();
      [v52 animateWithDuration:0 delay:v29 options:v33 animations:0.35 completion:0.0];

      _Block_release(v33);
      _Block_release(v29);
      return;
    }
    goto LABEL_37;
  }
  if (!v12)
  {
    id v34 = v14;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  id v24 = v14;
  id v25 = [v12 view];
  if (!v25)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  id v26 = v25;
  [v25 setAlpha:1.0];

  if (v14)
  {
LABEL_23:
    type metadata accessor for ClimateCompactStatusBarView();
    uint64_t v35 = swift_dynamicCastClass();
    if (v35 && (a3 & 1) == 0)
    {
      char v36 = *(unsigned char *)(v35 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator);
      *(unsigned char *)(v35 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator) = 5;
      id v37 = v14;
      sub_100054234(v36);
    }
  }
LABEL_26:
  if (v12)
  {
    id v38 = [v12 view];
    if (v38)
    {
      os_log_type_t v39 = v38;
      id v40 = [v4 view];
      if (!v40)
      {
LABEL_39:
        __break(1u);
        return;
      }
      uint64_t v41 = v40;
      [v40 bringSubviewToFront:v39];
    }
  }
  id v42 = [v4 view];
  if (!v42)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  id v43 = v42;
  [v42 layoutIfNeeded];

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v45 = Strong;
    id v46 = [Strong _FBSScene];

    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = v4;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = sub_100023098;
    *(void *)(v48 + 24) = v47;
    id v57 = sub_1000230B0;
    uint64_t v58 = v48;
    aBlock = _NSConcreteStackBlock;
    uint64_t v54 = 1107296256;
    id v55 = sub_10001F3F4;
    uint64_t v56 = &unk_1000CB000;
    uint64_t v49 = _Block_copy(&aBlock);
    unsigned int v50 = v4;
    swift_retain();
    swift_release();
    [v46 updateClientSettingsWithBlock:v49];

    _Block_release(v49);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();

    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }
}

void sub_1000214A0(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v4 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC78(a1, (uint64_t)v44);
  type metadata accessor for ClimateButton();
  if (swift_dynamicCast())
  {
    uint64_t v7 = v43;
    uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView];
    if (v8)
    {
      type metadata accessor for ClimateStatusBarView();
      id v9 = v8;
      id v10 = v7;
      char v11 = UIFocusEnvironment.contains(_:)();

      if (v11)
      {
        uint64_t v12 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover;
        uint64_t v13 = 2;
        goto LABEL_9;
      }
    }
    uint64_t v14 = *(void **)&v2[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView];
    if (v14)
    {
      type metadata accessor for ClimateStatusBarView();
      id v15 = v7;
      id v9 = v14;
      char v16 = UIFocusEnvironment.contains(_:)();

      if (v16)
      {
        uint64_t v12 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover;
        uint64_t v13 = 8;
LABEL_9:
        id v17 = *(void **)&v2[*v12];
        id v18 = self;
        id v19 = v17;
        id v20 = [v18 sharedApplication];
        unint64_t v21 = (unint64_t)[v20 delegate];

        if (v21)
        {
          type metadata accessor for ClimateAppDelegate();
          swift_dynamicCastClassUnconditional();
          os_log_type_t v22 = sub_10008EAA4();
          swift_unknownObjectRelease();
          char v23 = v22[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

          unint64_t v21 = 0;
          if ((v23 & 1) == 0 && v17)
          {
            type metadata accessor for ClimateRegularStatusBarView();
            uint64_t v24 = swift_dynamicCastClass();
            if (v24 && (id v25 = *(char **)(v24 + OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper)) != 0)
            {
              uint64_t v40 = v13;
              sub_100007310(0, (unint64_t *)&qword_1000E4A20);
              id v26 = (void **)&v25[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
              swift_beginAccess();
              uint64_t v27 = *v26;
              id v42 = v19;
              id v41 = v9;
              uint64_t v28 = v25;
              id v29 = v27;
              char v30 = static NSObject.== infix(_:_:)();

              if (v30)
              {
                id v31 = v41;
                unint64_t v21 = (unint64_t)v42;
                id v32 = [v42 view];
                if (!v32)
                {
LABEL_27:

                  __break(1u);
                  return;
                }
                id v33 = v32;
                [v32 alpha];
                double v35 = v34;

                unint64_t v21 = v35 == 1.0;
              }
              else
              {

                unint64_t v21 = 0;
              }
              uint64_t v13 = v40;
            }
            else
            {
              unint64_t v21 = 0;
            }
          }
          uint64_t v37 = (uint64_t)v9 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
          swift_beginAccess();
          sub_10000ABC4(v37, (uint64_t)v6);
          id v38 = [v2 view];
          if (v38)
          {
            os_log_type_t v39 = v38;
            sub_100063644((uint64_t)v17, (uint64_t)v6, v38, (void **)v13, v21);

            sub_100023404((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClimateZone);
            return;
          }
        }
        else
        {
          __break(1u);
        }

        __break(1u);
        goto LABEL_27;
      }
    }
    static os_log_type_t.error.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    char v36 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
}

void sub_100021970()
{
  uint64_t v1 = v0;
  id v2 = [self sharedApplication];
  id v3 = [v2 delegate];

  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v4 = sub_10008EAA4();
  swift_unknownObjectRelease();
  char v5 = v4[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v5) {
    return;
  }
  id v6 = [v1 view];
  if (!v6)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  [v6 bounds];
}

void sub_100021A9C(void *a1, uint64_t a2)
{
  id v5 = [a1 view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_21;
  }
  id v6 = v5;
  [v5 setAlpha:0.0];

  [v2 addChildViewController:a1];
  id v7 = [v2 view];
  if (!v7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = v7;
  id v9 = [a1 view];
  if (!v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v10 = v9;
  [v8 addSubview:v9];

  [a1 didMoveToParentViewController:v2];
  id v11 = [a1 view];
  if (!v11)
  {
LABEL_23:
    __break(1u);
    return;
  }
  uint64_t v12 = v11;
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t v13 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView;
  if (a2 != 2) {
    uint64_t v13 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView;
  }
  uint64_t v14 = *(void **)&v2[*v13];
  if (v14)
  {
    os_log_t log = v14;
    sub_100021E20(a1, log, a2);
    id v15 = self;
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 activateConstraints:isa];

    id v17 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover;
    if (a2 != 2) {
      id v17 = &OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover;
    }
    uint64_t v18 = *v17;
    id v19 = *(void **)&v2[v18];
    *(void *)&v2[v18] = a1;
    id v20 = a1;

    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    unint64_t v21 = qword_1000EA798;
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v23 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Popover added to hiearchy for side: %{public}lu", v23, 0xCu);
LABEL_16:
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    os_log_type_t v24 = static os_log_type_t.error.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    os_log_type_t v25 = v24;
    os_log_t log = (os_log_t)static OS_os_log.default.getter();
    if (os_log_type_enabled(log, v24))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v26 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, log, v25, "Unable to create popover for side: %{public}lu", v26, 0xCu);
      goto LABEL_16;
    }
  }
}

void sub_100021E20(void *a1, id a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = _swiftEmptyArrayStorage;
  id v9 = [self sharedApplication];
  id v10 = [v9 delegate];

  if (!v10)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v11 = sub_10008EAA4();
  swift_unknownObjectRelease();
  char v12 = v11[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  id v13 = [a1 view];
  uint64_t v14 = v13;
  if ((v12 & 1) == 0)
  {
    if (a3 == 2)
    {
      if (!v13)
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      id v21 = [v13 leftAnchor];

      id v22 = [v4 view];
      if (!v22)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      char v23 = v22;
      id v24 = [v22 leftAnchor];

      id v25 = [v21 constraintEqualToAnchor:v24 constant:6.0];
    }
    else
    {
      if (!v13)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      id v21 = [v13 rightAnchor];

      id v45 = [v4 view];
      if (!v45)
      {
LABEL_58:
        __break(1u);
        return;
      }
      id v46 = v45;
      id v24 = [v45 rightAnchor];

      id v25 = [v21 constraintEqualToAnchor:v24 constant:-6.0];
    }
    id v38 = v25;

    id v47 = [a1 view];
    if (v47)
    {
      uint64_t v48 = v47;
      id v49 = [v47 heightAnchor];

      id v32 = [v49 constraintEqualToConstant:64.0];
      id v50 = [a1 view];
      if (v50)
      {
        id v51 = v50;
        id v52 = [v50 bottomAnchor];

        id v53 = [a2 topAnchor];
        id v39 = [v52 constraintEqualToAnchor:v53 constant:-6.0];

        if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
        {
          uint64_t v54 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v55 = v38;
          uint64_t v56 = v54 + 3;
          if (!__OFADD__(v54, 3))
          {
LABEL_30:
            sub_10009CCD4(v56);
            specialized Array._endMutation()();
            uint64_t v8 = v32;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v43 = v39;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v44 = v38;
            goto LABEL_35;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
LABEL_41:
        id v60 = v38;
        swift_bridgeObjectRetain();
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v56 = v61 + 3;
        if (!__OFADD__(v61, 3)) {
          goto LABEL_30;
        }
        goto LABEL_43;
      }
      goto LABEL_50;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (a3 == 2)
  {
    if (!v13)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    id v15 = [v13 leftAnchor];

    id v16 = [v4 view];
    if (!v16)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    id v17 = v16;
    id v18 = [v16 safeAreaLayoutGuide];

    id v19 = [v18 leftAnchor];
    id v20 = [v15 constraintEqualToAnchor:v19 constant:12.0];
  }
  else
  {
    if (!v13)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    id v15 = [v13 rightAnchor];

    id v26 = [v4 view];
    if (!v26)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v27 = v26;
    id v28 = [v26 safeAreaLayoutGuide];

    id v19 = [v28 rightAnchor];
    id v20 = [v15 constraintEqualToAnchor:v19 constant:-12.0];
  }
  a2 = v20;

  id v29 = [a1 view];
  if (!v29) {
    goto LABEL_46;
  }
  char v30 = v29;
  id v31 = [v29 heightAnchor];

  id v32 = [v31 constraintEqualToConstant:216.0];
  id v33 = [a1 view];
  if (!v33)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  double v34 = v33;
  id v35 = [v33 topAnchor];

  id v36 = [v4 view];
  if (!v36)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v37 = v36;
  id v38 = [v36 topAnchor];

  id v39 = [v35 constraintEqualToAnchor:v38 constant:12.0];
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    uint64_t v40 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v41 = a2;
    uint64_t v42 = v40 + 3;
    if (!__OFADD__(v40, 3)) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
  id v58 = a2;
  swift_bridgeObjectRetain();
  uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v42 = v59 + 3;
  if (__OFADD__(v59, 3))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_19:
  sub_10009CCD4(v42);
  specialized Array._endMutation()();
  uint64_t v8 = v32;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_44:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v43 = v39;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v44 = a2;
LABEL_35:
  id v57 = v44;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

void sub_1000225F8(uint64_t a1, void *a2, void *a3, char a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    if (a2)
    {
      id v9 = [a2 view];
      if (!v9)
      {
        __break(1u);
        return;
      }
      id v10 = v9;
      [v9 setAlpha:0.0];
    }
    if (a3)
    {
      type metadata accessor for ClimateCompactStatusBarView();
      uint64_t v11 = swift_dynamicCastClass();
      if (v11)
      {
        if ((a4 & 1) == 0)
        {
          char v12 = *(unsigned char *)(v11 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator);
          *(unsigned char *)(v11 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator) = 0;
          id v13 = a3;
          sub_100054234(v12);
        }
      }
    }
  }
}

void sub_1000226E8(char a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (id)Strong;
    if (a1)
    {
      uint64_t v4 = (void *)swift_unknownObjectWeakLoadStrong();
      if (v4)
      {
        id v5 = v4;
        id v6 = [v4 _FBSScene];

        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v3;
        uint64_t v8 = swift_allocObject();
        *(void *)(v8 + 16) = sub_100023464;
        *(void *)(v8 + 24) = v7;
        aBlock[4] = sub_10002348C;
        aBlock[5] = v8;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10001F3F4;
        aBlock[3] = &unk_1000CB118;
        id v9 = _Block_copy(aBlock);
        id v3 = v3;
        swift_retain();
        swift_release();
        [v6 updateClientSettingsWithBlock:v9];

        _Block_release(v9);
        LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();

        swift_release();
        swift_release();
        if ((v6 & 1) == 0) {
          return;
        }
        __break(1u);
      }
    }
  }
}

void sub_1000228AC(void *a1, uint64_t a2)
{
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (!v4) {
    return;
  }
  id v50 = (id)v4;
  sub_100006730(&qword_1000E5408);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B20E0;
  id v6 = *(void **)(a2 + OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover);
  *(void *)(inited + 32) = v6;
  uint64_t v7 = *(void **)(a2 + OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover);
  *(void *)(inited + 40) = v7;
  uint64_t v51 = inited;
  id v49 = a1;
  specialized Array._endMutation()();
  id v8 = v7;
  id v9 = v6;
  char v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    char v12 = v10;
    if (v11 >= *(void *)(v51 + 16))
    {
      __break(1u);
      goto LABEL_27;
    }
    id v13 = *(void **)(v51 + 32 + 8 * v11);
    if (v13) {
      break;
    }
LABEL_5:
    char v10 = 1;
    unint64_t v11 = 1;
    if (v12)
    {
      swift_bridgeObjectRelease();
      if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      {
        if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_24;
        }
        goto LABEL_15;
      }
LABEL_27:
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v48) {
        goto LABEL_24;
      }
LABEL_15:
      sub_100006730(&qword_1000E5410);
      uint64_t v30 = swift_initStackObject();
      *(_OWORD *)(v30 + 16) = xmmword_1000B20E0;
      id v31 = *(void **)(a2 + OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView);
      *(void *)(v30 + 32) = v31;
      id v32 = *(void **)(a2 + OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView);
      *(void *)(v30 + 40) = v32;
      if (v31)
      {
        id v33 = v32;
        id v34 = v31;
        [v34 frame];
        id v39 = [self valueWithCGRect:v35, v36, v37, v38];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        if (v32) {
          goto LABEL_19;
        }
      }
      else
      {
        id v46 = v32;
        if (v32)
        {
LABEL_19:
          id v40 = v32;
          [v40 frame];
          id v45 = [self valueWithCGRect:v41, v42, v43, v44];
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();

          goto LABEL_24;
        }
      }
      swift_release();
LABEL_24:
      sub_100007310(0, &qword_1000E5418);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v50 setPresentedPopoverFrames:isa];

      return;
    }
  }
  id v14 = v13;
  id v15 = [v14 view];
  if (v15)
  {
    id v16 = v15;
    [v15 alpha];
    double v18 = v17;

    if (v18 != 0.0)
    {
      id v19 = [v14 view];
      if (!v19) {
        goto LABEL_30;
      }
      id v20 = v19;
      [v19 frame];
      double v22 = v21;
      double v24 = v23;
      double v26 = v25;
      double v28 = v27;

      id v29 = [self valueWithCGRect:v22, v24, v26, v28];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    goto LABEL_5;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

unint64_t sub_100022D90(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100006730(&qword_1000E53F0);
      unint64_t result = static _SetStorage.allocate(capacity:)();
      id v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  id v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  id v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    sub_10002301C(&qword_1000E53F8);
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_10002301C(&qword_1000E5400);
      while (1)
      {
        unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      unint64_t result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  unint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10002301C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnyCancellable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100023060()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100023098(void *a1)
{
  sub_1000228AC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000230A0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000230B0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000230D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000230E8()
{
  return swift_release();
}

uint64_t sub_1000230F0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100023128()
{
  swift_release();

  return _swift_deallocObject(v0, 41, 7);
}

void sub_100023170()
{
  sub_1000225F8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

void sub_100023180(char a1)
{
}

uint64_t sub_100023188()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100023198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000231FC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100023234(uint64_t a1)
{
  sub_100020CEC(a1, *(void *)(v1 + 16), *(void ***)(v1 + 24));
}

void sub_10002323C()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_leftPopover] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_rightPopover] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v1 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v1 = &_swiftEmptySetSingleton;
  }
  *(void *)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_cancellables] = v1;
  *(void *)&v0[OBJC_IVAR____TtC7Climate28ClimateOverlayViewController_activeConstraints] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100023334(uint64_t a1)
{
}

void sub_10002333C(unint64_t *a1)
{
}

uint64_t sub_100023344(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000233AC()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000233E4()
{
  sub_10001F348(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000233F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100023404(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100023490()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey.Side();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v27[-v10];
  id v12 = [self sharedApplication];
  id v13 = [v12 delegate];

  if (v13)
  {
    uint64_t v31 = v0;
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    uint64_t v14 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    id v15 = [*(id *)&v14[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] currentSession];
    uint64_t v30 = v1;
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = v5;
      uint64_t v18 = v6;
      unint64_t v19 = v9;
      uint64_t v20 = (char *)[v15 configuration];

      unsigned int v28 = [v20 rightHandDrive];
      uint64_t v14 = v20;
      unint64_t v9 = v19;
      uint64_t v6 = v18;
      uint64_t v5 = v17;
    }
    else
    {
      unsigned int v28 = 0;
    }

    uint64_t v21 = v31;
    CAUVehicleLayoutKey.side.getter();
    id v29 = *(void (**)(unsigned char *, void, uint64_t))(v6 + 104);
    v29(v9, enum case for CAUVehicleLayoutKey.Side.right(_:), v5);
    char v22 = static CAUVehicleLayoutKey.Side.== infix(_:_:)();
    double v23 = v9;
    double v24 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v24(v23, v5);
    v24(v11, v5);
    uint64_t v25 = v21;
    uint64_t v26 = v30;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v25, v30);
    if (v22)
    {
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v26);
    }
    else
    {
      CAUVehicleLayoutKey.side.getter();
      v29(v23, enum case for CAUVehicleLayoutKey.Side.left(_:), v5);
      sub_100023850();
      dispatch thunk of static Equatable.== infix(_:_:)();
      v24(v23, v5);
      v24(v11, v5);
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v26);
    }
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100023850()
{
  unint64_t result = qword_1000E54A8;
  if (!qword_1000E54A8)
  {
    type metadata accessor for CAUVehicleLayoutKey.Side();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E54A8);
  }
  return result;
}

void sub_1000238A8(char a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_100064020(v3, a1 & 1);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_100023960()
{
  id v1 = [v0 view];
  if (v1)
  {
    uint64_t v2 = v1;
    id v6 = [v1 layer];

    id v3 = [self blackColor];
    id v4 = [v3 CGColor];

    [v6 setShadowColor:v4];
    LODWORD(v5) = 1045220557;
    [v6 setShadowOpacity:v5];
    [v6 setShadowOffset:0.0, 0.0];
    [v6 setShadowRadius:17.0];
  }
  else
  {
    __break(1u);
  }
}

void sub_100023A78()
{
  id v1 = v0;
  id v12 = _swiftEmptyArrayStorage;
  id v2 = [self sharedApplication];
  id v3 = [v2 delegate];

  if (v3)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v4 = sub_10008EAA4();
    swift_unknownObjectRelease();
    char v5 = v4[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    if (v5)
    {
      if (qword_1000E4660 != -1) {
        swift_once();
      }
      id v6 = &qword_1000EA690;
    }
    else
    {
      if (qword_1000E4658 != -1) {
        swift_once();
      }
      id v6 = &qword_1000EA688;
    }
    uint64_t v7 = *v6;
    uint64_t v8 = *(void *)(*v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(v7 + 8 * v9++ + 32);
        uint64_t v11 = v10;
        swift_bridgeObjectRetain();
        sub_100023C30(&v11, v1, (uint64_t *)&v12);
        swift_bridgeObjectRelease();
      }
      while (v8 != v9);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100023C30(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  char v5 = _swiftEmptyArrayStorage;
  double v35 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v32 = v4 + 32;
    swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t v30 = a2;
    uint64_t v31 = v4;
    uint64_t v29 = v6;
    while (1)
    {
      if (v8 >= *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        uint64_t result = (uint64_t)sub_1000A2C98(0, v5[2] + 1, 1, v5);
        char v5 = (void *)result;
        *a3 = result;
LABEL_27:
        unint64_t v27 = v5[2];
        unint64_t v26 = v5[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t result = (uint64_t)sub_1000A2C98((void *)(v26 > 1), v27 + 1, 1, v5);
          char v5 = (void *)result;
          *a3 = result;
        }
        v5[2] = v27 + 1;
        v5[v27 + 4] = v3;
        return result;
      }
      unsigned __int8 v9 = *(unsigned char *)(v32 + v8);
      id v3 = a2;
      unint64_t v10 = (unint64_t)sub_100023F08(v9);
      if (v10) {
        break;
      }
LABEL_5:
      if (++v8 == v6)
      {
        swift_bridgeObjectRelease();
        char v5 = v35;
        goto LABEL_25;
      }
    }
    unint64_t v11 = v10;
    if (v10 >> 62)
    {
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v33 = v8;
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v33 = v8;
      if (v12)
      {
LABEL_10:
        id v34 = _swiftEmptyArrayStorage;
        id v3 = &v34;
        sub_10008AF80(0, v12 & ~(v12 >> 63), 0);
        if (v12 < 0) {
          goto LABEL_32;
        }
        id v13 = v34;
        if ((v11 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            id v34 = v13;
            unint64_t v17 = v13[2];
            unint64_t v16 = v13[3];
            if (v17 >= v16 >> 1)
            {
              sub_10008AF80(v16 > 1, v17 + 1, 1);
              id v13 = v34;
            }
            ++v14;
            v13[2] = v17 + 1;
            uint64_t v18 = &v13[2 * v17];
            *((unsigned char *)v18 + 32) = v9;
            v18[5] = v15;
          }
          while (v12 != v14);
        }
        else
        {
          unint64_t v19 = (void **)(v11 + 32);
          do
          {
            uint64_t v20 = *v19;
            id v34 = v13;
            unint64_t v22 = v13[2];
            unint64_t v21 = v13[3];
            id v23 = v20;
            if (v22 >= v21 >> 1)
            {
              sub_10008AF80(v21 > 1, v22 + 1, 1);
              id v13 = v34;
            }
            v13[2] = v22 + 1;
            double v24 = &v13[2 * v22];
            *((unsigned char *)v24 + 32) = v9;
            v24[5] = v23;
            ++v19;
            --v12;
          }
          while (v12);
        }
        swift_bridgeObjectRelease();
        char v5 = _swiftEmptyArrayStorage;
        a2 = v30;
        uint64_t v4 = v31;
        uint64_t v6 = v29;
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
    id v13 = _swiftEmptyArrayStorage;
LABEL_4:
    id v3 = &v35;
    sub_10009773C((uint64_t)v13);
    unint64_t v8 = v33;
    goto LABEL_5;
  }
LABEL_25:
  if (v5[2])
  {
    id v3 = sub_10009F74C((uint64_t)v5);
    swift_bridgeObjectRelease();
    char v5 = (void *)*a3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = (uint64_t)v5;
    if ((result & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  return swift_bridgeObjectRelease();
}

void *sub_100023F08(unsigned int a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v7 - 8);
  unsigned __int8 v9 = (char *)v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ClimateSystemManager();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v104 = (uint64_t)v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = self;
  id v14 = [v13 sharedApplication];
  id v15 = [v14 delegate];

  if (!v15) {
    goto LABEL_83;
  }
  v103[1] = type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v16 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10000A404((uint64_t)v9, &qword_1000E5AC0);
    return 0;
  }
  sub_10001C51C((uint64_t)v9, v104);
  unsigned int v17 = a1;
  int v18 = a1;
  unint64_t v19 = v2;
  switch(v18)
  {
    case 0:
      uint64_t v20 = &v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone];
      unint64_t v21 = *(void *)&v20[*(int *)(type metadata accessor for ClimateZone() + 36)];
      if (v21 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        if (v22) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v22)
        {
LABEL_7:
          unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          if ((v22 & 0x8000000000000000) == 0)
          {
            uint64_t v23 = 0;
            do
            {
              if ((v21 & 0xC000000000000001) != 0) {
                id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v24 = *(id *)(v21 + 8 * v23 + 32);
              }
              uint64_t v25 = v24;
              ++v23;
              id v26 = objc_allocWithZone((Class)type metadata accessor for ClimateVentServiceButton());
              sub_100066760(v25, 4);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            while (v22 != v23);
LABEL_57:
            unint64_t v60 = v105;
LABEL_58:
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          __break(1u);
LABEL_70:
          swift_bridgeObjectRetain();
          uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v80) {
            goto LABEL_71;
          }
LABEL_39:
          unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          if ((v80 & 0x8000000000000000) == 0)
          {
            uint64_t v81 = 0;
            do
            {
              if ((v21 & 0xC000000000000001) != 0) {
                id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v82 = *(id *)(v21 + 8 * v81 + 32);
              }
              char v83 = v82;
              ++v81;
              id v84 = objc_allocWithZone((Class)type metadata accessor for ClimateZonesSyncedServiceButton());
              sub_10001C94C(v83, 4u);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            while (v80 != v81);
            goto LABEL_57;
          }
          __break(1u);
          goto LABEL_82;
        }
      }
LABEL_71:
      swift_bridgeObjectRelease();
      unint64_t v60 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_72;
    case 1:
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_1000B2670;
      id v28 = objc_retain(*(id *)&v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone
                                 + *(int *)(type metadata accessor for ClimateZone() + 28)]);
      id v29 = [v13 sharedApplication];
      id v30 = [v29 delegate];

      if (!v30) {
        goto LABEL_84;
      }
      swift_dynamicCastClassUnconditional();
      uint64_t v31 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      uint64_t v32 = v31[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      id v33 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneTargetTemperatureStepper());
      *(void *)(v27 + 32) = sub_10002766C(v28, v32, 4);
      unint64_t v105 = v27;
LABEL_28:
      specialized Array._endMutation()();
      unint64_t v60 = v105;
      goto LABEL_72;
    case 2:
      id v34 = &v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone];
      double v35 = *(void **)&v34[*(int *)(type metadata accessor for ClimateZone() + 32)];
      if (!v35) {
        goto LABEL_64;
      }
      id v36 = v35;
      id v37 = [v13 sharedApplication];
      id v38 = [v37 delegate];

      if (!v38) {
        goto LABEL_86;
      }
      swift_dynamicCastClassUnconditional();
      id v39 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      int v40 = v39[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      if (v40 == 1)
      {
        id v41 = v36;
        id v42 = [v13 sharedApplication];
        id v43 = [v42 delegate];

        if (!v43) {
          goto LABEL_87;
        }
        swift_dynamicCastClassUnconditional();
        double v44 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        uint64_t v45 = v44[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        id v46 = objc_allocWithZone((Class)type metadata accessor for ClimateFanContinuousStepper());
        id v47 = sub_1000A0038(v41, v45, 4);
      }
      else
      {
        id v96 = objc_allocWithZone((Class)type metadata accessor for ClimateFanServiceStepper());
        id v47 = sub_100084E80(v36, 4u);
      }
      uint64_t v97 = v47;
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v98 = swift_allocObject();
      *(_OWORD *)(v98 + 16) = xmmword_1000B2670;
      *(void *)(v98 + 32) = v97;
      unint64_t v105 = v98;
      specialized Array._endMutation()();
      unint64_t v60 = v105;

      goto LABEL_72;
    case 4:
      uint64_t v48 = &v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone];
      id v49 = *(void **)&v48[*(int *)(type metadata accessor for ClimateZone() + 40)];
      if (!v49) {
        goto LABEL_64;
      }
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_1000B2670;
      id v51 = objc_allocWithZone((Class)type metadata accessor for ClimateSeatHeatingCoolingServiceButton());
      id v52 = v49;
      id v53 = sub_100058C74(v52);
      goto LABEL_26;
    case 5:
      uint64_t v54 = &v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone];
      id v55 = *(void **)&v54[*(int *)(type metadata accessor for ClimateZone() + 44)];
      if (!v55) {
        goto LABEL_64;
      }
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_1000B2670;
      id v56 = objc_allocWithZone((Class)type metadata accessor for ClimateSeatFanServiceButton());
      id v52 = v55;
      id v53 = sub_10004BD94(v52);
      goto LABEL_26;
    case 7:
      id v57 = &v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone];
      id v58 = *(void **)&v57[*(int *)(type metadata accessor for ClimateZone() + 48)];
      if (!v58) {
        goto LABEL_64;
      }
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_1000B2670;
      id v59 = objc_allocWithZone((Class)type metadata accessor for ClimateSteeringWheelButton());
      id v52 = v58;
      id v53 = sub_10004D940(v52);
LABEL_26:
      *(void *)(v50 + 32) = v53;
      unint64_t v105 = v50;
      specialized Array._endMutation()();
      unint64_t v60 = v105;

      goto LABEL_72;
    case 9:
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_1000B2670;
      uint64_t v62 = &v2[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone];
      id v63 = *(void **)&v62[*(int *)(type metadata accessor for ClimateZone() + 28)];
      sub_100007310(0, &qword_1000E4B48);
      id v64 = v63;
      CAFPositionedRequired.layoutKey.getter();

      id v65 = objc_allocWithZone((Class)type metadata accessor for ClimateDeepLinkButton());
      *(void *)(v61 + 32) = sub_100057DA0((uint64_t)v6);
      unint64_t v105 = v61;
      goto LABEL_28;
    case 10:
      id v66 = [*(id *)(v104 + 8) recirculation];
      if (!v66) {
        goto LABEL_64;
      }
      id v67 = v66;
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_1000B2670;
      objc_allocWithZone((Class)type metadata accessor for ClimateRecirculationServiceButton());
      id v69 = v67;
      uint64_t v70 = sub_10008F6E8(v69, 4);
      goto LABEL_63;
    case 11:
      id v71 = [v13 sharedApplication];
      id v72 = [v71 delegate];

      if (!v72) {
        goto LABEL_85;
      }
      swift_dynamicCastClassUnconditional();
      uint64_t v73 = (char *)sub_10008EAA4();
      swift_unknownObjectRelease();
      id v74 = [*(id *)&v73[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] currentSession];
      if (v74)
      {
        uint64_t v75 = v74;
        id v76 = [v74 configuration];

        LOBYTE(v75) = [v76 rightHandDrive];
        if (v75)
        {
          sub_100024D30();
          if (v77 != 8) {
            goto LABEL_64;
          }
          goto LABEL_61;
        }
      }
      else
      {
      }
      sub_100024D30();
      if (v93 != 2)
      {
LABEL_64:
        sub_10000D204(v104, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
        return 0;
      }
LABEL_61:
      id v94 = [*(id *)(v104 + 8) cabin];
      if (!v94) {
        goto LABEL_64;
      }
      id v95 = v94;
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_1000B2670;
      objc_allocWithZone((Class)type metadata accessor for ClimateMaxACButton());
      id v69 = v95;
      uint64_t v70 = sub_10007F0D8(v69, 4u);
LABEL_63:
      *(void *)(v68 + 32) = v70;
      unint64_t v105 = v68;
      specialized Array._endMutation()();
      unint64_t v60 = v105;

LABEL_72:
      if (v60 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v101 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v101) {
          goto LABEL_74;
        }
LABEL_76:
        sub_10000D204(v104, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
        swift_bridgeObjectRelease();
        return 0;
      }
      if (!*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_76;
      }
LABEL_74:
      char v99 = v19;
      id v100 = sub_100026C44(v60, v99, v17);

      sub_10000D204(v104, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      swift_bridgeObjectRelease();
      return v100;
    case 12:
      id v78 = [*(id *)(v104 + 8) zonesSynceds];
      if (!v78) {
        goto LABEL_64;
      }
      uint64_t v79 = v78;
      sub_100007310(0, (unint64_t *)&qword_1000E5430);
      unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v21 >> 62) {
        goto LABEL_70;
      }
      uint64_t v80 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v80) {
        goto LABEL_39;
      }
      goto LABEL_71;
    case 13:
      id v85 = [*(id *)(v104 + 8) defrosts];
      if (!v85) {
        goto LABEL_64;
      }
      uint64_t v86 = v85;
      sub_100007310(0, &qword_1000E5540);
      unint64_t v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v105 = (unint64_t)_swiftEmptyArrayStorage;
      if (v87 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
        if (v88)
        {
LABEL_48:
          if (v88 >= 1)
          {
            for (uint64_t i = 0; i != v88; ++i)
            {
              if ((v87 & 0xC000000000000001) != 0) {
                id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v90 = *(id *)(v87 + 8 * i + 32);
              }
              uint64_t v91 = v90;
              id v92 = objc_allocWithZone((Class)type metadata accessor for ClimateDefrostServiceButton());
              sub_1000069F4(v91, 4u);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            swift_bridgeObjectRelease();
            goto LABEL_57;
          }
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
          JUMPOUT(0x100024CF8);
        }
      }
      else
      {
        uint64_t v88 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v88) {
          goto LABEL_48;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v60 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_58;
    default:
      goto LABEL_64;
  }
}

void sub_100024D30()
{
  uint64_t v0 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  double v35 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100006730((uint64_t *)&unk_1000E5520);
  __chkstk_darwin(v37);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v11 - 8);
  uint64_t v36 = (uint64_t)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v15 = (char *)&v35 - v14;
  __chkstk_darwin(v16);
  int v18 = (char *)&v35 - v17;
  id v19 = [self sharedApplication];
  id v20 = [v19 delegate];

  if (!v20)
  {
    __break(1u);
    return;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v21 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v22 = type metadata accessor for ClimateSystemManager();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v7, 1, v22) == 1)
  {
    uint64_t v23 = &qword_1000E5AC0;
    uint64_t v24 = (uint64_t)v7;
  }
  else
  {
    sub_10000D070((uint64_t)&v7[*(int *)(v22 + 28)], (uint64_t)v10, (uint64_t *)&unk_1000E5530);
    sub_10000D204((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    uint64_t v25 = type metadata accessor for ClimateZone();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v10, 1, v25) != 1)
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
      v27(v18, v10, v0);
      sub_10000D204((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
      v26(v18, 0, 1, v0);
      goto LABEL_8;
    }
    uint64_t v23 = (uint64_t *)&unk_1000E5530;
    uint64_t v24 = (uint64_t)v10;
  }
  sub_10000A404(v24, v23);
  id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v26(v18, 1, 1, v0);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
LABEL_8:
  uint64_t v28 = v37;
  v27(v15, (char *)(v38 + OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone), v0);
  v26(v15, 0, 1, v0);
  uint64_t v29 = (uint64_t)&v4[*(int *)(v28 + 48)];
  sub_10000D070((uint64_t)v18, (uint64_t)v4, (uint64_t *)&unk_1000E7C60);
  sub_10000D070((uint64_t)v15, v29, (uint64_t *)&unk_1000E7C60);
  id v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v30((uint64_t)v4, 1, v0) == 1)
  {
    sub_10000A404((uint64_t)v15, (uint64_t *)&unk_1000E7C60);
    sub_10000A404((uint64_t)v18, (uint64_t *)&unk_1000E7C60);
    if (v30(v29, 1, v0) == 1)
    {
      sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E7C60);
      return;
    }
    goto LABEL_13;
  }
  uint64_t v31 = v36;
  sub_10000D070((uint64_t)v4, v36, (uint64_t *)&unk_1000E7C60);
  if (v30(v29, 1, v0) == 1)
  {
    sub_10000A404((uint64_t)v15, (uint64_t *)&unk_1000E7C60);
    sub_10000A404((uint64_t)v18, (uint64_t *)&unk_1000E7C60);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v31, v0);
LABEL_13:
    sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E5520);
    return;
  }
  uint64_t v32 = v31;
  id v33 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v35, v29, v0);
  sub_10000734C();
  dispatch thunk of static Equatable.== infix(_:_:)();
  id v34 = *(void (**)(char *, uint64_t))(v1 + 8);
  v34(v33, v0);
  sub_10000A404((uint64_t)v15, (uint64_t *)&unk_1000E7C60);
  sub_10000A404((uint64_t)v18, (uint64_t *)&unk_1000E7C60);
  v34((char *)v32, v0);
  sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E7C60);
}

id sub_1000253C0(void *a1, char a2)
{
  sub_10002633C(a1, a2);

  return v2;
}

id sub_1000254A4()
{
  return sub_1000259D0(0, type metadata accessor for ClimateQuickActionPopover);
}

uint64_t sub_100025550()
{
  return type metadata accessor for ClimateQuickActionPopover();
}

uint64_t type metadata accessor for ClimateQuickActionPopover()
{
  uint64_t result = qword_1000E54E0;
  if (!qword_1000E54E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000255A4()
{
  uint64_t result = type metadata accessor for ClimateZone();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100025664()
{
  uint64_t v0 = self;
  id v1 = [v0 sharedApplication];
  id v2 = [v1 delegate];

  if (v2)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v3 = sub_10008EAA4();
    swift_unknownObjectRelease();
    id v4 = [v0 sharedApplication];
    id v5 = [v4 userInterfaceLayoutDirection];

    sub_100024D30();
    if (v6 != 8 || v5 == (id)1) {
      sub_100024D30();
    }
  }
  else
  {
    __break(1u);
  }
}

id sub_1000259B8(uint64_t a1)
{
  return sub_1000259D0(a1, type metadata accessor for ClimatePopoverTapView);
}

id sub_1000259D0(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimatePopoverTapView()
{
  return self;
}

uint64_t sub_100025A40(uint64_t result)
{
  id v2 = *(void (**)(void))(v1 + OBJC_IVAR____TtC7Climate21ClimatePopoverTapView_tapHandler);
  if (v2)
  {
    char v3 = result;
    swift_retain();
    v2(v3 & 1);
    return sub_100005690((uint64_t)v2);
  }
  return result;
}

char *sub_100025AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_sourceView] = 0;
  v3[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_isSet] = 0;
  uint64_t v6 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView;
  id v7 = objc_allocWithZone((Class)UIView);
  uint64_t v8 = v3;
  *(void *)&v3[v6] = [v7 init];
  uint64_t v9 = &v8[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_delegate];
  *(void *)&v8[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v10 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_popoverTapView;
  *(void *)&v8[v10] = [objc_allocWithZone((Class)type metadata accessor for ClimatePopoverTapView()) init];
  sub_10000ABC4(a1, (uint64_t)&v8[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone]);
  *((void *)v9 + 1) = a3;
  swift_unknownObjectWeakAssign();

  v63.receiver = v8;
  v63.super_class = (Class)type metadata accessor for ClimateQuickActionPopover();
  uint64_t v11 = (char *)[v63 initWithNibName:0 bundle:0];
  unint64_t v12 = *(void *)(a1 + *(int *)(type metadata accessor for ClimateZone() + 24));
  if (v12 >> 62)
  {
    id v19 = v11;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v13 = (uint64_t)result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v14 = v11;
    uint64_t result = (char *)swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_10;
    }
  }
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_18;
  }
  for (uint64_t i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v12 + 8 * i + 32);
    }
    int v18 = v17;
    [v17 registerObserver:v11];
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v20 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView;
  [*(id *)&v11[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView] setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t result = (char *)[v11 view];
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v21 = result;
  [result addSubview:*(void *)&v11[v20]];

  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1000B20F0;
  id v23 = [*(id *)&v11[v20] leftAnchor];
  uint64_t result = (char *)[v11 view];
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v24 = result;
  id v25 = [result leftAnchor];

  id v26 = [v23 constraintEqualToAnchor:v25];
  *(void *)(v22 + 32) = v26;
  id v27 = [*(id *)&v11[v20] rightAnchor];
  uint64_t result = (char *)[v11 view];
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v28 = result;
  id v29 = [result rightAnchor];

  id v30 = [v27 constraintEqualToAnchor:v29];
  *(void *)(v22 + 40) = v30;
  id v31 = [*(id *)&v11[v20] topAnchor];
  uint64_t result = (char *)[v11 view];
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v32 = result;
  uint64_t v62 = a1;
  id v33 = [result topAnchor];

  id v34 = [v31 constraintEqualToAnchor:v33];
  *(void *)(v22 + 48) = v34;
  id v35 = [*(id *)&v11[v20] bottomAnchor];
  uint64_t result = (char *)[v11 view];
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v36 = result;
  uint64_t v37 = self;
  id v38 = [v36 bottomAnchor];

  id v39 = [v35 constraintEqualToAnchor:v38];
  *(void *)(v22 + 56) = v39;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v37 activateConstraints:isa];

  [*(id *)&v11[v20] _setContinuousCornerRadius:20.0];
  id v41 = [*(id *)&v11[v20] layer];
  [v41 setMasksToBounds:1];

  uint64_t v42 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_popoverTapView;
  id v43 = *(char **)&v11[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_popoverTapView];
  [v43 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v44 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v45 = (void (**)(char))&v43[OBJC_IVAR____TtC7Climate21ClimatePopoverTapView_tapHandler];
  uint64_t v46 = *(void *)&v43[OBJC_IVAR____TtC7Climate21ClimatePopoverTapView_tapHandler];
  *uint64_t v45 = sub_100026E30;
  v45[1] = (void (*)(char))v44;
  sub_100005690(v46);
  uint64_t result = (char *)[v11 view];
  if (result)
  {
    id v47 = result;
    [result addSubview:*(void *)&v11[v42]];

    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1000B20F0;
    id v49 = [*(id *)&v11[v42] leftAnchor];
    id v50 = [*(id *)&v11[v20] leftAnchor];
    id v51 = [v49 constraintEqualToAnchor:v50];

    *(void *)(v48 + 32) = v51;
    id v52 = [*(id *)&v11[v42] trailingAnchor];
    id v53 = [*(id *)&v11[v20] trailingAnchor];
    id v54 = [v52 constraintEqualToAnchor:v53];

    *(void *)(v48 + 40) = v54;
    id v55 = [*(id *)&v11[v42] topAnchor];
    id v56 = [*(id *)&v11[v20] topAnchor];
    id v57 = [v55 constraintEqualToAnchor:v56];

    *(void *)(v48 + 48) = v57;
    id v58 = [*(id *)&v11[v42] bottomAnchor];
    id v59 = [*(id *)&v11[v20] bottomAnchor];
    id v60 = [v58 constraintEqualToAnchor:v59];

    *(void *)(v48 + 56) = v60;
    specialized Array._endMutation()();
    Class v61 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v37 activateConstraints:v61];

    sub_10000D204(v62, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    return v11;
  }
LABEL_23:
  __break(1u);
  return result;
}

void sub_100026264()
{
  *(void *)&v0[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_sourceView] = 0;
  v0[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_isSet] = 0;
  uint64_t v1 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v0[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_popoverTapView;
  *(void *)&v0[v2] = [objc_allocWithZone((Class)type metadata accessor for ClimatePopoverTapView()) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10002633C(void *a1, char a2)
{
  swift_getObjectType();
  uint64_t v3 = swift_conformsToProtocol2();
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3) {
    id v5 = a1;
  }
  else {
    id v5 = 0;
  }
  if (v5)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v7 = self;
    id v8 = a1;
    id v9 = [v7 clearColor];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(ObjectType, v4);
    uint64_t v12 = v11;

    swift_bridgeObjectRelease();
    (*(void (**)(id, uint64_t, void *, uint64_t, uint64_t))(v4 + 40))(v9, v12, &_swiftEmptyDictionarySingleton, ObjectType, v4);
LABEL_17:

    goto LABEL_18;
  }
  type metadata accessor for ClimateStepper();
  uint64_t v13 = swift_dynamicCastClass();
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    id v15 = self;
    id v16 = a1;
    id v17 = [v15 clearColor];
    id v18 = [v15 systemWhiteColor];
    id v19 = (void *)((char *)v14 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig);
    id v8 = *(id *)((char *)v14 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig);
    uint64_t v20 = *(void **)((char *)v14 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8);
    uint64_t v21 = *(void *)((char *)v14 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16);
    *id v19 = v17;
    v19[1] = v18;
    v19[2] = &_swiftEmptyDictionarySingleton;
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v22 = v17;
    id v23 = v18;
    swift_bridgeObjectRetain();
    id v24 = v22;
    id v25 = v23;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v21);
      char v27 = v26;
      swift_bridgeObjectRelease();

      if (v27) {
        goto LABEL_16;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void))((swift_isaMask & *v14) + 0x1F0))();
LABEL_16:

    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_18:
  [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v28 = [a1 layer];
  id v29 = self;
  id v30 = [v29 sharedApplication];
  id v31 = [v30 delegate];

  if (!v31)
  {
    __break(1u);
    goto LABEL_44;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v32 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v33 = v32[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  double v34 = 10.0;
  if (v33) {
    double v34 = 12.0;
  }
  [v28 setCornerRadius:v34];

  id v35 = [a1 layer];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v36 = objc_allocWithZone((Class)CAFilter);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = [v36 initWithType:v37];

  [v35 setCompositingFilter:v38];
  if (sub_10004A96C(a2) == 0x70706574536E6166 && v39 == 0xEA00000000007265) {
    goto LABEL_23;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_25;
  }
  if (sub_10004A96C(a2) == 0xD000000000000012 && v58 == 0x80000001000B4FB0)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v59)
  {
LABEL_25:
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1000B1F40;
    id v42 = [a1 widthAnchor];
    id v43 = [v29 sharedApplication];
    id v44 = [v43 delegate];

    if (v44)
    {
      swift_dynamicCastClassUnconditional();
      uint64_t v45 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      int v46 = v45[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      double v47 = 120.0;
      if (v46) {
        double v47 = 44.0;
      }
      id v48 = [v42 constraintEqualToConstant:v47];

      *(void *)(v41 + 32) = v48;
      id v49 = [a1 heightAnchor];
      id v50 = [v29 sharedApplication];
      id v51 = [v50 delegate];

      if (v51)
      {
        swift_dynamicCastClassUnconditional();
        id v52 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        int v53 = v52[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        if (v53) {
          double v54 = 144.0;
        }
        else {
          double v54 = 40.0;
        }
LABEL_32:
        id v55 = self;
        id v56 = [v49 constraintEqualToConstant:v54];

        *(void *)(v41 + 40) = v56;
        specialized Array._endMutation()();
        sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v55 activateConstraints:isa];

        return;
      }
      goto LABEL_45;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1000B1F40;
  id v60 = [a1 widthAnchor];
  id v61 = [v29 sharedApplication];
  id v62 = [v61 delegate];

  if (!v62)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  swift_dynamicCastClassUnconditional();
  objc_super v63 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v64 = v63[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  double v65 = 40.0;
  if (v64) {
    double v65 = 44.0;
  }
  id v66 = [v60 constraintEqualToConstant:v65];

  *(void *)(v41 + 32) = v66;
  id v49 = [a1 heightAnchor];
  id v67 = [v29 sharedApplication];
  id v68 = [v67 delegate];

  if (v68)
  {
    swift_dynamicCastClassUnconditional();
    id v69 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    int v70 = v69[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    if (v70) {
      double v54 = 44.0;
    }
    else {
      double v54 = 40.0;
    }
    goto LABEL_32;
  }
LABEL_47:
  __break(1u);
}

void *sub_100026C44(unint64_t a1, void *a2, unsigned int a3)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v4) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = 0;
    id v7 = *(void (**)(id, void))((swift_isaMask & *a2) + 0x120);
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v6 + 32);
      }
      id v9 = v8;
      ++v6;
      v7(v8, a3);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100026DD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100026DF8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100026E30(char a1)
{
}

double sub_100026E38()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ClimateVentServiceButton());
  uint64_t v3 = sub_100066760(v1, 2);
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730(&qword_1000E4B50);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1000B2000;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = &off_1000CA838;
  return result;
}

uint64_t ClimateStepperButton.presentationStates.getter()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  sub_100005690((uint64_t)v1);
  return v3;
}

uint64_t ClimateStepperButton.shouldBeHighlighted.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted);
}

id ClimateStepperButton.shouldBeHighlighted.setter(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted;
  int v3 = v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted];
  v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = a1;
  id result = [v1 setHighlighted:a1 & 1];
  uint64_t v5 = v1[v2];
  if (v3 != v5)
  {
    uint64_t v6 = &v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate];
    id result = (id)swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, ObjectType, v7);
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id (*ClimateStepperButton.shouldBeHighlighted.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v1 + v2);
  return sub_10002702C;
}

id sub_10002702C(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(*(void *)a1 + v1);
  v2[v1] = *(unsigned char *)(a1 + 16);
  [v2 setHighlighted:];
  uint64_t v5 = v2[v1];
  if ((v3 ^ v5))
  {
    uint64_t v6 = &v2[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate];
    id result = (id)swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, ObjectType, v7);
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id ClimateButton.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id ClimateStepperButton.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ClimateStepperButton();
  return [super init];
}

uint64_t type metadata accessor for ClimateStepperButton()
{
  return self;
}

uint64_t sub_100027208()
{
  sub_100005690(*(void *)(v0 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock));
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate;

  return sub_100026DD0(v1);
}

id ClimateStepperButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateStepperButton();
  return [super dealloc];
}

uint64_t sub_1000272D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = (id *)(v0 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  [*v6 targetTemperatureRestricted];
  unsigned __int8 v7 = [*v6 targetTemperatureInvalid];
  unsigned int v8 = [*v6 targetTemperatureDisabled];
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_temperatureButton);
  if ((v7 & 1) != 0 || v8)
  {
    uint64_t v12 = (void *)(v9 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
    swift_beginAccess();
    uint64_t v13 = v12[1];
    *uint64_t v12 = 0;
    v12[1] = 0;
    if (v13)
    {
      ClimateButton.updateClimateConfiguration()();
      swift_bridgeObjectRelease();
    }
    id v23 = (uint64_t *)(v9 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    swift_beginAccess();
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t *v23 = 0xD000000000000012;
    v23[1] = 0x80000001000B6600;
    if (v25)
    {
      if (v24 == 0xD000000000000012 && v25 == 0x80000001000B6600) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = (void *)(v9 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    swift_beginAccess();
    uint64_t v11 = v10[1];
    void *v10 = 0;
    v10[1] = 0;
    if (v11)
    {
      ClimateButton.updateClimateConfiguration()();
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = v1 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_currentValue;
    swift_beginAccess();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
    id v15 = [*v6 targetTemperatureRange];
    uint64_t v16 = Measurement<>.readableString(in:)();
    uint64_t v18 = v17;

    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    id v19 = (uint64_t *)(v9 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
    uint64_t result = swift_beginAccess();
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    *id v19 = v16;
    v19[1] = v18;
    if (v18)
    {
      if (v22)
      {
        if (v16 == v21 && v18 == v22) {
          return swift_bridgeObjectRelease();
        }
LABEL_17:
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    else if (!v22)
    {
      return result;
    }
  }
  ClimateButton.updateClimateConfiguration()();
  return swift_bridgeObjectRelease();
}

void sub_100027644()
{
  sub_1000272D4();

  ClimateStepper.updatePresentation()();
}

char *sub_10002766C(void *a1, uint64_t a2, int a3)
{
  uint64_t v7 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v7 - 8);
  uint64_t v58 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = self;
  uint64_t v10 = v3;
  id v56 = v9;
  id v11 = [v9 celsius];
  uint64_t v57 = sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  Measurement.init(value:unit:)();
  v10[OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_style] = a3;
  id v12 = objc_allocWithZone((Class)type metadata accessor for ClimateTemperatureIndicator());
  id v13 = a1;
  int v59 = a3;
  sub_100090A44(v13, 0, 0, 1, a3);
  *(void *)&v10[OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_temperatureButton] = v14;

  id v15 = *(void **)&v10[OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_temperatureButton];
  *(void *)&v10[OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature] = v13;
  id v16 = v15;
  id v17 = v13;
  id v18 = v16;
  id v19 = ClimateStepper.init(primaryButton:axis:range:)(v18, a2, [v17 targetTemperatureRange]);
  [v17 registerObserver:v19];

  uint64_t v20 = v19;
  id v21 = [v17 car];
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = [v21 dimensionManager];

    [v23 registerObserver:v20];
  }
  uint64_t v24 = self;
  uint64_t v25 = v20;
  id v26 = [v24 clearColor];
  id v27 = [v24 systemBlueColor];
  id v28 = &v25[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig];
  id v30 = *(void **)&v25[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig];
  id v29 = *(void **)&v25[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig + 8];
  *(void *)id v28 = v26;
  *((void *)v28 + 1) = v27;
  *((void *)v28 + 2) = &_swiftEmptyDictionarySingleton;
  id v31 = v26;
  id v32 = v27;
  swift_bridgeObjectRelease();

  sub_10007B450();
  int v33 = v25;
  id v34 = [v24 clearColor];
  id v35 = [v24 systemRedColor];
  id v36 = &v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig];
  NSString v37 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig];
  id v38 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig + 8];
  *(void *)id v36 = v34;
  *((void *)v36 + 1) = v35;
  *((void *)v36 + 2) = &_swiftEmptyDictionarySingleton;
  id v39 = v34;
  id v40 = v35;
  swift_bridgeObjectRelease();

  sub_10007B464();
  if ((_BYTE)v59)
  {
    uint64_t v41 = (uint64_t)v58;
    p_type = (char **)(&stru_1000D5FF0 + 16);
    if (v59 == 4 || v59 == 2)
    {
      id v43 = (id *)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
      swift_beginAccess();
      [*v43 setUserInteractionEnabled:0];
    }
  }
  else
  {
    char v44 = v33[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial];
    v33[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial] = 1;
    uint64_t v41 = (uint64_t)v58;
    p_type = &stru_1000D5FF0.type;
    if ((v44 & 1) == 0)
    {
      uint64_t v45 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_backgroundView];
      int v46 = v33;
      id v47 = [v45 removeFromSuperview];
      (*(void (**)(id))((swift_isaMask & *(void *)v46) + 0x148))(v47);
    }
  }
  id v48 = [v17 p_type[487]];
  if (!v48
    || (id v49 = v48,
        id v50 = [v48 dimensionManager],
        v49,
        id v51 = [v50 unitTemperature],
        v50,
        !v51))
  {
    id v51 = [v56 celsius];
  }
  sub_100027F84();

  id v52 = [v17 targetTemperature];
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v53 = sub_100006730(&qword_1000E5040);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v41, 0, 1, v53);
  sub_1000286FC(v41);
  sub_10000A404(v41, (uint64_t *)&unk_1000E4D00);
  sub_1000272D4();
  ClimateStepper.updatePresentation()();

  return v33;
}

uint64_t sub_100027BF0(uint64_t a1)
{
  uint64_t v25 = a1;
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v23 - v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - v9;
  id v11 = (id *)(v1 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  id v12 = [*v11 targetTemperature];
  sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = (void *)Measurement.unit.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v10, v2);
  id v15 = [*v11 targetTemperatureRange];
  id v16 = [v15 step];

  [v16 doubleValue];
  id v17 = v13;
  Measurement.init(value:unit:)();
  id v18 = *v11;
  id v19 = [v18 targetTemperature];
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = v24;
  Measurement<>.localeStep(_:by:)();
  v14(v5, v2);
  NSMeasurement v26 = Measurement._bridgeToObjectiveC()();
  Class isa = v26.super.isa;
  ((void (*)(char *, uint64_t, __n128))v14)(v20, v2, *(__n128 *)&v26._doubleValue);
  [v18 setTargetTemperature:isa];

  return ((uint64_t (*)(char *, uint64_t))v14)(v10, v2);
}

void sub_100027EB4()
{
  id v1 = objc_allocWithZone(v0);
  id v2 = [self celsius];
  sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  Measurement.init(value:unit:)();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100027F84()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_temperatureButton) titleLabel];
  if (v1)
  {
    int v2 = 1 << *(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_style);
    id v7 = v1;
    if ((v2 & 0x23) != 0)
    {
      CTFontRef v3 = (CTFontRef)[self monospacedDigitSystemFontOfSize:17.0 weight:UIFontWeightSemibold];
    }
    else if ((v2 & 0xC) != 0)
    {
      CTFontRef v3 = (CTFontRef)[self monospacedDigitSystemFontOfSize:20.0 weight:UIFontWeightSemibold];
    }
    else
    {
      sub_100007310(0, (unint64_t *)&qword_1000E4A20);
      id v4 = [self fahrenheit];
      char v5 = static NSObject.== infix(_:_:)();

      if (v5) {
        CTFontRef v3 = (CTFontRef)[self monospacedDigitSystemFontOfSize:22.0 weight:UIFontWeightMedium];
      }
      else {
        CTFontRef v3 = sub_1000290B0();
      }
    }
    CTFontRef v6 = v3;
    [v7 setFont:v3];
  }
}

void sub_100028140(uint64_t a1, uint64_t a2)
{
  CTFontRef v3 = v2;
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006730(&qword_1000E5040);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = (void *)Measurement._bridgeToObjectiveC()();
  uint64_t v14 = (objc_class *)type metadata accessor for ClimateZoneTargetTemperatureStepper();
  v45.receiver = v3;
  v45.super_class = v14;
  [super temperatureService:a1 didUpdateTargetTemperature:v13];

  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v15 = qword_1000EA798;
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v12, a2, v9);
  id v17 = v3;
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  if (os_log_type_enabled(v15, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    NSString v37 = v12;
    uint64_t v21 = v20;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v43 = 0;
    uint64_t v44 = v38;
    *(_DWORD *)uint64_t v21 = 136315650;
    id v39 = v16;
    uint64_t v40 = a2;
    memset(v42, 0, sizeof(v42));
    uint64_t v22 = ClimateLogPrefix(file:function:line:_:)(0xD000000000000031, 0x80000001000B6540, (uint64_t)"temperatureService(_:didUpdateTargetTemperature:)", 49, 2, 108, (uint64_t)v42);
    int v36 = v19;
    uint64_t v23 = v22;
    os_log_t v35 = v15;
    unint64_t v25 = v24;
    sub_10000A404((uint64_t)v42, &qword_1000E55D8);
    *(void *)&v42[0] = sub_10000A56C(v23, v25, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2082;
    NSMeasurement v26 = (id *)&v17[OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature];
    swift_beginAccess();
    id v27 = [*v26 vehicleLayoutKey];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    uint64_t v41 = sub_10000A56C(v28, v30, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2082;
    sub_10000A524((unint64_t *)&unk_1000E7780);
    id v31 = v37;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v41 = sub_10000A56C(v32, v33, &v44);
    a2 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v16 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v31, v9);
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, "%s Update zone: %{public}s with target temperature: %{public}s.", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v16(v8, a2, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  sub_1000286FC((uint64_t)v8);
  sub_10000A404((uint64_t)v8, (uint64_t *)&unk_1000E4D00);
  sub_1000272D4();
  ClimateStepper.updatePresentation()();
}

void sub_1000286FC(uint64_t a1)
{
  sub_100006730((uint64_t *)&unk_1000E4D00);
  ((void (*)(void))__chkstk_darwin)();
  id v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730(&qword_1000E5040);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - v10;
  sub_100029464(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E4D00);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    unint64_t v29 = v1;
    id v12 = &v1[OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_currentValue];
    swift_beginAccess();
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v28(v9, v12, v5);
    sub_10000A524((unint64_t *)&unk_1000E55E0);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    v14(v9, v5);
    if ((v13 & 1) == 0)
    {
      v28(v9, v11, v5);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v12, v9, v5);
      swift_endAccess();
      v14(v11, v5);
      return;
    }
    v14(v11, v5);
    id v1 = v29;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v15 = qword_1000EA798;
  id v16 = v1;
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v32 = 0;
    uint64_t v33 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    memset(v31, 0, sizeof(v31));
    uint64_t v20 = ClimateLogPrefix(file:function:line:_:)(0xD000000000000031, 0x80000001000B6540, (uint64_t)"updateCurrentValue(with:)", 25, 2, 116, (uint64_t)v31);
    unint64_t v22 = v21;
    sub_10000A404((uint64_t)v31, &qword_1000E55D8);
    *(void *)&v31[0] = sub_10000A56C(v20, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2082;
    uint64_t v23 = (id *)&v16[OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature];
    swift_beginAccess();
    id v24 = [*v23 vehicleLayoutKey];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v30 = sub_10000A56C(v25, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "%s Target temperature is nil or already set for zone: %{public}s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100028CB8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_currentValue;
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_temperatureButton);
}

id sub_100028D38()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZoneTargetTemperatureStepper();
  [super dealloc];
}

uint64_t sub_100028DF4()
{
  return type metadata accessor for ClimateZoneTargetTemperatureStepper();
}

uint64_t type metadata accessor for ClimateZoneTargetTemperatureStepper()
{
  uint64_t result = qword_1000E55B8;
  if (!qword_1000E55B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100028E48()
{
  sub_100028EF0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100028EF0()
{
  if (!qword_1000E55C8)
  {
    sub_100007310(255, (unint64_t *)&qword_1000E4D10);
    unint64_t v0 = type metadata accessor for Measurement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000E55C8);
    }
  }
}

CTFontRef sub_1000290B0()
{
  unint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  uint64_t v1 = CTFontCreateWithNameAndOptions(v0, 18.0, 0, 0x20000uLL);

  sub_100006730(&qword_1000E55F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B2000;
  *(void *)(inited + 32) = kCTFontFeatureSettingsAttribute;
  sub_100006730(&qword_1000E55F8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B2000;
  sub_100006730(&qword_1000E5600);
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000B20E0;
  *(void *)(v4 + 32) = kCTFontFeatureTypeIdentifierKey;
  *(void *)(v4 + 40) = 6;
  *(void *)(v4 + 48) = kCTFontFeatureSelectorIdentifierKey;
  *(void *)(v4 + 56) = 0;
  CFStringRef v5 = (id)kCTFontFeatureSettingsAttribute;
  CFStringRef v6 = (id)kCTFontFeatureTypeIdentifierKey;
  CFStringRef v7 = (id)kCTFontFeatureSelectorIdentifierKey;
  *(void *)(v3 + 32) = sub_100033554(v4);
  *(void *)(inited + 40) = v3;
  sub_100033654(inited);
  type metadata accessor for CFString(0);
  sub_100006730(&qword_1000E5608);
  sub_1000294CC();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v9 = CTFontDescriptorCreateWithAttributes(isa);

  CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v1, 18.0, 0, v9);
  return CopyWithAttributes;
}

uint64_t sub_100029264()
{
  uint64_t v1 = sub_100006730(&qword_1000E5040);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100027F84();
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7Climate35ClimateZoneTargetTemperatureStepper_temperatureButton);
  CFStringRef v6 = (id *)(v0 + OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature);
  swift_beginAccess();
  id v7 = *v6;
  id v8 = [v7 targetTemperature];
  sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

  id v9 = [v7 targetTemperatureRange];
  uint64_t v10 = Measurement<>.readableString(in:)();
  uint64_t v12 = v11;

  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  char v13 = (uint64_t *)(v5 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *v13;
  uint64_t v16 = v13[1];
  *char v13 = v10;
  v13[1] = v12;
  if (v12)
  {
    if (v16)
    {
      BOOL v17 = v10 == v15 && v12 == v16;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (!v16)
  {
    return result;
  }
  ClimateButton.updateClimateConfiguration()();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100029464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E4D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000294CC()
{
  unint64_t result = qword_1000E5610;
  if (!qword_1000E5610)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5610);
  }
  return result;
}

uint64_t sub_100029524()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_dots);
  swift_beginAccess();
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue;
  int v4 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue);
  id v5 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range) maximum];
  int v6 = [v5 intValue];

  BOOL v7 = v4 < 0;
  uint64_t v37 = v3;
  int v8 = *(_DWORD *)(v0 + v3);
  if (v7) {
    int v9 = v6 & (v6 >> 31);
  }
  else {
    int v9 = v6 & ~(v6 >> 31);
  }
  id v10 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range) minimum];
  unint64_t v11 = (unint64_t)[v10 intValue];

  unsigned int v12 = v11 & ~((int)v11 >> 31);
  if (v8 < 0) {
    unsigned int v12 = v11 & ((int)v11 >> 31);
  }
  BOOL v13 = __OFSUB__(v9, v12);
  unsigned int v14 = v9 - v12;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    if (v2 != v14)
    {
      unsigned int v15 = *(_DWORD *)(v0 + v37);
      double v16 = *(double *)(v0 + OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_diameter);
      id v17 = *(id *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range);
      sub_100029E10(v15, v17, v16);
    }
    unint64_t v11 = *v1;
    if (!(*v1 >> 62))
    {
      uint64_t v18 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v18) {
        goto LABEL_13;
      }
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v18 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_13:
  if (v18 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v36 = v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig;
    uint64_t v21 = OBJC_IVAR____TtC7Climate19ClimateProgressView_range;
    unint64_t v22 = v11 & 0xC000000000000001;
    unint64_t v23 = v11;
    do
    {
      if (v22) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(v11 + 8 * v20 + 32);
      }
      id v31 = v30;
      int v32 = *(_DWORD *)(v0 + v37);
      uint64_t v33 = *(void **)(v0 + v21);
      if (v32 < 0)
      {
        id v34 = [v33 maximum];
        int v35 = [v34 intValue];

        int v26 = v32 - (v35 & (v35 >> 31));
        if (v26 < 0) {
          int v26 = (v35 & (v35 >> 31)) - v32;
        }
      }
      else
      {
        id v24 = [v33 minimum];
        int v25 = [v24 intValue];

        int v26 = v32 - (v25 & ~(v25 >> 31));
      }
      uint64_t v27 = v20 + 1;
      BOOL v28 = v20 < v26;
      uint64_t v29 = 8;
      if (v28) {
        uint64_t v29 = 16;
      }
      [v31 setBackgroundColor:*(void *)(v36 + v29)];

      ++v20;
      unint64_t v11 = v23;
    }
    while (v18 != v27);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100029830(int a1)
{
  int v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue) = a1;
  sub_100030A94(v2);

  return sub_100029524();
}

void sub_100029870(void *a1, void *a2, void *a3, void *a4)
{
  int v8 = (void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  int v9 = (void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig + 8);
  id v10 = *v9;
  unint64_t v11 = (void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig + 16);
  unsigned int v12 = *v11;
  BOOL v13 = *(void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  *int v8 = a1;
  id v52 = v11;
  uint64_t v53 = v9;
  *int v9 = a2;
  *unint64_t v11 = a3;
  v8[3] = a4;
  id v14 = a3;
  swift_bridgeObjectRetain_n();
  id v15 = a1;
  id v16 = a2;
  id v51 = v14;
  id v49 = v15;
  id v50 = v16;
  swift_bridgeObjectRelease();

  uint64_t v54 = v4;
  uint64_t v17 = *(void *)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView);
  id v18 = [self clearColor];
  uint64_t v19 = *v8;
  uint64_t v20 = (void *)(v17 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  unint64_t v22 = *(void **)(v17 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v21 = *(void **)(v17 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v23 = *(void *)(v17 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  void *v20 = v18;
  v20[1] = v19;
  v20[2] = &_swiftEmptyDictionarySingleton;
  id v24 = v19;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v25 = v18;
  id v26 = v24;
  swift_bridgeObjectRetain();
  id v27 = v25;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v23);
  char v29 = v28;
  swift_bridgeObjectRelease();

  if ((v29 & 1) == 0) {
LABEL_6:
  }
    ClimateButton.refreshColorConfig()();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v30 = (uint64_t *)(v54 + OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_dots);
  swift_beginAccess();
  uint64_t v31 = *v30;
  id v48 = a4;
  if (!((unint64_t)*v30 >> 62))
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_9;
    }
LABEL_23:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  if (!v32) {
    goto LABEL_23;
  }
LABEL_9:
  if (v32 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue;
    uint64_t v35 = OBJC_IVAR____TtC7Climate19ClimateProgressView_range;
    do
    {
      if ((v31 & 0xC000000000000001) != 0) {
        id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v42 = *(id *)(v31 + 8 * v33 + 32);
      }
      uint64_t v43 = v42;
      int v44 = *(_DWORD *)(v54 + v34);
      objc_super v45 = *(void **)(v54 + v35);
      if (v44 < 0)
      {
        id v46 = [v45 maximum];
        int v47 = [v46 intValue];

        int v38 = v44 - (v47 & (v47 >> 31));
        if (v38 < 0) {
          int v38 = (v47 & (v47 >> 31)) - v44;
        }
      }
      else
      {
        id v36 = [v45 minimum];
        int v37 = [v36 intValue];

        int v38 = v44 - (v37 & ~(v37 >> 31));
      }
      uint64_t v39 = v33 + 1;
      BOOL v40 = v33 < v38;
      uint64_t v41 = v53;
      if (v40) {
        uint64_t v41 = v52;
      }
      [v43 setBackgroundColor:[v41]];

      ++v33;
    }
    while (v32 != v39);
    goto LABEL_23;
  }
  __break(1u);
}

id sub_100029C34(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted) = a1;
  if (a1) {
    double v3 = 0.2;
  }
  else {
    double v3 = 1.0;
  }
  [*(id *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView) setAlpha:v3];
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView);
  if (*(unsigned char *)(v1 + v2)) {
    double v5 = 0.2;
  }
  else {
    double v5 = 1.0;
  }

  return [v4 setAlpha:v5];
}

void sub_100029CD0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue;
  int v2 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue);
  id v3 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range) maximum];
  int v4 = [v3 intValue];

  int v5 = *(_DWORD *)(v0 + v1);
  if (v2 >= 0) {
    int v6 = v4 & ~(v4 >> 31);
  }
  else {
    int v6 = v4 & (v4 >> 31);
  }
  id v7 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range) minimum];
  int v8 = [v7 intValue];

  int v9 = v8 & ~(v8 >> 31);
  if (v5 < 0) {
    int v9 = v8 & (v8 >> 31);
  }
  int v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_14;
  }
  id v11 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range) step];
  unsigned int v12 = [v11 intValue];

  if (!v12)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  if (v10 == 0x80000000 && v12 == -1) {
    goto LABEL_15;
  }
}

void sub_100029E10(unsigned int a1, void *a2, double a3)
{
  int v4 = v3;
  uint64_t v8 = OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView;
  [*(id *)&v3[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView] removeFromSuperview];
  sub_100007310(0, &qword_1000E5680);
  uint64_t v9 = UIStackView.init(axis:spacing:arrangedSubviews:)();
  int v10 = *(void **)&v3[v8];
  uint64_t v78 = v8;
  *(void *)&v3[v8] = v9;

  id v11 = &v3[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_dots];
  swift_beginAccess();
  v11->Class isa = (Class)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v12 = OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue;
  LODWORD(v8) = *(_DWORD *)&v3[OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue];
  id v13 = [*(id *)&v3[OBJC_IVAR____TtC7Climate19ClimateProgressView_range] maximum];
  int v14 = [v13 intValue];

  BOOL v15 = (int)v8 < 0;
  uint64_t v77 = v12;
  int v16 = *(_DWORD *)&v4[v12];
  if (v15) {
    int v17 = v14 & (v14 >> 31);
  }
  else {
    int v17 = v14 & ~(v14 >> 31);
  }
  uint64_t v79 = v4;
  uint64_t v18 = (uint64_t)[*(id *)&v4[OBJC_IVAR____TtC7Climate19ClimateProgressView_range] minimum];
  int v19 = [(id)v18 intValue];

  int v20 = v19 & ~(v19 >> 31);
  if (v16 < 0) {
    int v20 = v19 & (v19 >> 31);
  }
  uint64_t p_type = (v17 - v20);
  if (__OFSUB__(v17, v20))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  id v22 = [a2 step];
  uint64_t v18 = (uint64_t)[v22 intValue];

  if (!v18)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  BOOL v23 = p_type == 0x80000000 && v18 == -1;
  if (v23) {
    goto LABEL_48;
  }
  int v24 = (int)p_type / (int)v18;
  if ((int)p_type / (int)v18 >= 4)
  {
    static os_log_type_t.error.getter();
    sub_100006730(&qword_1000E5688);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1000B20E0;
    *(void *)(v25 + 56) = &type metadata for Int;
    *(void *)(v25 + 64) = &protocol witness table for Int;
    *(void *)(v25 + 32) = 3;
    v26.Class isa = v11->isa;
    *(void *)(v25 + 96) = sub_100006730(&qword_1000E5690);
    *(void *)(v25 + 104) = sub_10002AF78();
    *(v25 + 72) = v26;
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    swift_bridgeObjectRetain();
    id v27 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  sub_100029CD0();
  if (v28)
  {
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    char v29 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (v24 >= 3) {
    int v30 = 3;
  }
  else {
    int v30 = v24;
  }
  os_log_type_t v31 = static os_log_type_t.default.getter();
  sub_100007310(0, (unint64_t *)&qword_1000E4F00);
  uint64_t v18 = static OS_os_log.default.getter();
  os_log_type_t v32 = v31;
  if (os_log_type_enabled((os_log_t)v18, v31))
  {
    uint64_t p_type = 8;
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 67240192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v18, v32, "Drawing %{public}d dots.", v33, 8u);
    swift_slowDealloc();
  }

  if (v30 < 0) {
    goto LABEL_49;
  }
  unint64_t v76 = __PAIR64__(v30, a1);
  if (v30)
  {
    uint64_t v34 = self;
    uint64_t v35 = &v79[OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig];
    id v36 = (objc_class *)type metadata accessor for ClimateDotsProgressView.Dot();
    int v37 = HIDWORD(v76);
    uint64_t p_type = (uint64_t)&stru_1000D5FF0.type;
    while (v37)
    {
      v80.receiver = objc_allocWithZone(v36);
      v80.super_class = v36;
      id v38 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
      [v38 setTranslatesAutoresizingMaskIntoConstraints:0];
      [v38 _setCornerRadius:a3 * 0.5];
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_1000B1F40;
      id v40 = [v38 widthAnchor];
      id v41 = [v40 constraintEqualToConstant:a3];

      *(void *)(v39 + 32) = v41;
      id v42 = [v38 heightAnchor];

      id v43 = [v42 constraintEqualToConstant:a3];
      *(void *)(v39 + 40) = v43;
      specialized Array._endMutation()();
      sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v34 activateConstraints:isa];

      [v38 setBackgroundColor:*((void *)v35 + 1)];
      swift_beginAccess();
      id v45 = v38;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((uint64_t)v11->isa & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((uint64_t)v11->isa & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v18 = (uint64_t)v11;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      [*(id *)&v79[v78] addArrangedSubview:v45];

      if (!--v37) {
        goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_28:
  [*(id *)&v79[v78] setTranslatesAutoresizingMaskIntoConstraints:0 v76];
  [*(id *)&v79[v78] setDistribution:3];
  [v79 addSubview:*(void *)&v79[v78]];
  id v46 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1000B20F0;
  id v48 = [*(id *)&v79[v78] topAnchor];
  id v49 = [*(id *)&v79[OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView] bottomAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49];

  *(void *)(v47 + 32) = v50;
  id v51 = [*(id *)&v79[v78] widthAnchor];
  id v52 = [v51 constraintEqualToConstant:(double)HIDWORD(v76) * a3 + ((double)HIDWORD(v76) + -1.0) * 5.0];

  *(void *)(v47 + 40) = v52;
  id v53 = [*(id *)&v79[v78] heightAnchor];
  id v54 = [v53 constraintEqualToConstant:a3];

  *(void *)(v47 + 48) = v54;
  id v55 = [*(id *)&v79[v78] centerXAnchor];
  uint64_t p_type = (uint64_t)v79;
  id v56 = [v79 centerXAnchor];
  id v57 = [v55 constraintEqualToAnchor:v56];

  *(void *)(v47 + 56) = v57;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v46 activateConstraints:v58];

  if (!v76)
  {
    sub_10002AAA0(0);
    return;
  }
  uint64_t v18 = (uint64_t)v11->isa;
  if ((unint64_t)v11->isa >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    if (!v59) {
      goto LABEL_51;
    }
    goto LABEL_31;
  }
  uint64_t v59 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v59)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_31:
  if (v59 >= 1)
  {
    uint64_t v60 = 0;
    uint64_t v61 = OBJC_IVAR____TtC7Climate19ClimateProgressView_range;
    uint64_t v62 = p_type + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig;
    do
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v69 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v69 = (objc_class *)*(id *)(v18 + 8 * v60 + 32);
      }
      int v70 = v69;
      uint64_t v71 = p_type;
      int v72 = *(_DWORD *)(p_type + v77);
      uint64_t v73 = *(void **)(v71 + v61);
      if (v72 < 0)
      {
        id v74 = [v73 maximum];
        int v75 = [v74 intValue];

        int v65 = v72 - (v75 & (v75 >> 31));
        if (v65 < 0) {
          int v65 = (v75 & (v75 >> 31)) - v72;
        }
      }
      else
      {
        id v63 = [v73 minimum];
        int v64 = [v63 intValue];

        int v65 = v72 - (v64 & ~(v64 >> 31));
      }
      uint64_t v66 = v60 + 1;
      BOOL v67 = v60 < v65;
      uint64_t v68 = 8;
      if (v67) {
        uint64_t v68 = 16;
      }
      -[objc_class setBackgroundColor:](v70, "setBackgroundColor:", *(void *)(v62 + v68), v76);

      ++v60;
      BOOL v23 = v59 == v66;
      uint64_t p_type = (uint64_t)v79;
    }
    while (!v23);
    goto LABEL_51;
  }
  __break(1u);
}

void sub_10002A830(char a1)
{
  sub_100029CD0();
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView;
    int v5 = *(void **)&v1[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView];
    v12[0] = 0x3FF0000000000000;
    v12[1] = 0;
    v12[2] = 0;
    uint64_t v12[3] = 0x3FF0000000000000;
    v12[4] = 0;
    v12[5] = 0;
    [v5 setTransform:v12];
    [*(id *)&v1[v4] setAlpha:0.0];
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v1;
    if (a1)
    {
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = sub_10002AF70;
      *(void *)(v7 + 24) = v6;
      uint64_t v8 = v1;
      swift_retain();
      [v8 _removeAllAnimations:1];
      uint64_t v9 = sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
      __chkstk_darwin(v9);
      static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)();
      swift_release();
      swift_release();
    }
    else
    {
      int v10 = *(void **)&v1[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint];
      id v11 = v1;
      if (v10) {
        [v10 setConstant:-3.0];
      }
      [v1 layoutIfNeeded];
      [*(id *)&v1[v4] setAlpha:1.0];
      swift_release();
    }
  }
}

id sub_10002AA24(char *a1)
{
  int v2 = *(void **)&a1[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint];
  if (v2) {
    [v2 setConstant:-3.0];
  }
  [a1 layoutIfNeeded];
  char v3 = *(void **)&a1[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView];

  return [v3 setAlpha:1.0];
}

void sub_10002AAA0(char a1)
{
  sub_100029CD0();
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = qword_1000E4650;
    id v5 = *(id *)&v1[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView];
    if (v4 != -1) {
      swift_once();
    }
    v12[0] = *(_OWORD *)byte_1000EA650;
    v12[1] = *(_OWORD *)&byte_1000EA650[16];
    v12[2] = *(_OWORD *)&byte_1000EA650[32];
    [v5 setTransform:v12];

    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v1;
    if (a1)
    {
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = sub_10002AEB0;
      *(void *)(v7 + 24) = v6;
      uint64_t v8 = v1;
      swift_retain();
      [v8 _removeAllAnimations:1];
      uint64_t v9 = sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
      __chkstk_darwin(v9);
      static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)();
      swift_release();
      swift_release();
    }
    else
    {
      int v10 = *(void **)&v1[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint];
      id v11 = v1;
      if (v10) {
        [v10 setConstant:0.0];
      }
      [v1 layoutIfNeeded];
      swift_release();
    }
  }
}

uint64_t sub_10002ACB0()
{
  return swift_bridgeObjectRelease();
}

id sub_10002ACF0()
{
  return sub_10002AE1C(type metadata accessor for ClimateDotsProgressView);
}

uint64_t type metadata accessor for ClimateDotsProgressView()
{
  return self;
}

id sub_10002AE04()
{
  return sub_10002AE1C(type metadata accessor for ClimateDotsProgressView.Dot);
}

id sub_10002AE1C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateDotsProgressView.Dot()
{
  return self;
}

uint64_t sub_10002AE78()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10002AEB0()
{
  uint64_t v1 = *(char **)(v0 + 16);
  int v2 = *(void **)&v1[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint];
  if (v2) {
    [v2 setConstant:0.0];
  }

  return [v1 layoutIfNeeded];
}

uint64_t sub_10002AF10()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002AF48()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_10002AF70()
{
  return sub_10002AA24(*(char **)(v0 + 16));
}

unint64_t sub_10002AF78()
{
  unint64_t result = qword_1000E5698;
  if (!qword_1000E5698)
  {
    sub_10000A4DC(&qword_1000E5690);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5698);
  }
  return result;
}

uint64_t sub_10002AFE4(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v41 - v12;
  __chkstk_darwin(v14);
  int v16 = (char *)&v41 - v15;
  sub_10000D070(a1, (uint64_t)v7, (uint64_t *)&unk_1000E7C60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E7C60);
  }
  id v48 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v43 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v44 = v9 + 32;
  v43(v16, v7, v8);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_1000EA798;
  int v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v49 = v9 + 16;
  uint64_t v47 = v19;
  v19(v13, v16, v8);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v20))
  {
    id v42 = v18;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    aBlock[0] = v41;
    *(_DWORD *)uint64_t v21 = 136315138;
    id v46 = (uint64_t (*)(char *, uint64_t))(v21 + 4);
    uint64_t v22 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v51 = sub_10000A56C(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v24 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    uint64_t v45 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v46 = v24;
    v24(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v42, v20, "Disabled state timer created for layoutKey: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    uint64_t v45 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v46 = v25;
    v25(v13, v8);
  }
  NSObject v26 = v47;
  v47(v4, v16, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  uint64_t v27 = v50;
  sub_10002B5E0((uint64_t)v4);
  sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E7C60);
  id v42 = self;
  [self autoGroupTimer];
  double v29 = v28;
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = (uint64_t)v48;
  v26(v48, v16, v8);
  unint64_t v32 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v30;
  v43((char *)(v33 + v32), (char *)v31, v8);
  aBlock[4] = (uint64_t)sub_10002ECCC;
  aBlock[5] = v33;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000541CC;
  aBlock[3] = (uint64_t)&unk_1000CB400;
  uint64_t v34 = _Block_copy(aBlock);
  swift_release();
  id v35 = [v42 scheduledTimerWithTimeInterval:0 repeats:v34 block:v29];
  _Block_release(v34);
  id v36 = v16;
  v26((char *)v31, v16, v8);
  int v37 = (uint64_t *)(v27 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_timerForLayoutKey);
  swift_beginAccess();
  id v38 = v35;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *v37;
  *int v37 = 0x8000000000000000;
  sub_10003F6A0((uint64_t)v35, v31, isUniquelyReferenced_nonNull_native);
  *int v37 = v51;
  swift_bridgeObjectRelease();
  id v40 = v46;
  v46((char *)v31, v8);
  swift_endAccess();

  return v40(v36, v8);
}

uint64_t sub_10002B5E0(uint64_t a1)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D070(a1, (uint64_t)v5, (uint64_t *)&unk_1000E7C60);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    return sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E7C60);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v5, v6);
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_timerForLayoutKey);
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (*(void *)(*v11 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_10007C5C4((uint64_t)v9);
    if (v14)
    {
      id v15 = *(id *)(*(void *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease();
      [v15 invalidate];
      swift_beginAccess();
      int v16 = (void *)sub_10003A5E8((uint64_t)v9);
      swift_endAccess();
      sub_10002EBB8(v16);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10002B814(char *a1, unsigned __int8 *a2)
{
  return sub_100066148(*a1, *a2);
}

Swift::Int sub_10002B820()
{
  return Hasher._finalize()();
}

uint64_t sub_10002B8BC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002B944()
{
  return Hasher._finalize()();
}

unint64_t sub_10002B9DC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10002EB28(*a1);
  *a2 = result;
  return result;
}

void sub_10002BA0C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = 0x65646F4D6F747561;
  if (v2 != 1) {
    uint64_t v4 = 0x64656C6261736964;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 6710895;
  }
  if (!v5) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

id sub_10002BA64()
{
  *(void *)&v0[OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_disabledStateTimer] = 0;
  uint64_t v1 = OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_observersForLayoutKey;
  int v2 = v0;
  *(void *)&v0[v1] = sub_100033760((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_timerForLayoutKey;
  *(void *)&v2[v3] = sub_10003399C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v4 = OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsForLayoutKey;
  *(void *)&v2[v4] = sub_100033B90((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsInAutomodeForLayoutKey;
  *(void *)&v2[v5] = sub_100033BCC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey;
  *(void *)&v2[v6] = sub_100033C08((uint64_t)_swiftEmptyArrayStorage);

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ClimateGroupedVentsAutoModeHandler();
  return [super init];
}

uint64_t sub_10002BB50()
{
  unint64_t v1 = sub_100033760((uint64_t)_swiftEmptyArrayStorage);
  int v2 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_observersForLayoutKey);
  swift_beginAccess();
  unint64_t *v2 = v1;
  swift_bridgeObjectRelease();
  unint64_t v3 = sub_10003399C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v4 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_timerForLayoutKey);
  swift_beginAccess();
  *uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  unint64_t v5 = sub_100033B90((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsForLayoutKey);
  swift_beginAccess();
  unint64_t *v6 = v5;
  swift_bridgeObjectRelease();
  unint64_t v7 = sub_100033BCC((uint64_t)_swiftEmptyArrayStorage);
  objc_super v8 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsInAutomodeForLayoutKey);
  swift_beginAccess();
  *objc_super v8 = v7;
  swift_bridgeObjectRelease();
  unint64_t v9 = sub_100033C08((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = (unint64_t *)(v0 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey);
  swift_beginAccess();
  unint64_t *v10 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10002BC9C())()
{
  return j__swift_endAccess;
}

uint64_t (*sub_10002BCF8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10002BD54(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  double v29 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v30 = (uint64_t)&v29 - v7;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)&v29 - v13;
  uint64_t v15 = v2 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsInAutomodeForLayoutKey;
  swift_beginAccess();
  if (*(void *)(*(void *)v15 + 16)
    && (swift_bridgeObjectRetain(), sub_10007C5C4(a2), char v17 = v16, swift_bridgeObjectRelease(), (v17 & 1) != 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  }
  else
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v18(v14, a2, v8);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34[0] = *(void *)v15;
    *(void *)uint64_t v15 = 0x8000000000000000;
    sub_10003F848((uint64_t)&_swiftEmptySetSingleton, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v15 = v34[0];
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_endAccess();
    v18(v11, a2, v8);
  }
  os_log_type_t v20 = sub_10002BCF8();
  uint64_t v21 = sub_100034464(v34);
  if (*v22)
  {
    uint64_t v23 = v32;
    int v24 = v29;
    uint64_t v25 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v29, v31, v33);
    uint64_t v26 = v30;
    char v27 = sub_10002D5D0(v30, v24);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v25);
    ((void (*)(void *, void))v21)(v34, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    ((void (*)(unsigned char *, void))v20)(v35, 0);
  }
  else
  {
    ((void (*)(void *, void))v21)(v34, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    ((void (*)(unsigned char *, void))v20)(v35, 0);
    char v27 = 0;
  }
  return v27 & 1;
}

uint64_t sub_10002C104(uint64_t a1)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D070(a1, (uint64_t)v5, (uint64_t *)&unk_1000E7C60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E7C60);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  uint64_t v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (!*(void *)(v11 + 16))
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10007C5C4((uint64_t)v9);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(v11 + 56) + v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v14;
}

uint64_t sub_10002C308(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();
  id v14 = [a1 uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = (void (**)(unsigned char *, uint64_t))(v7 + 8);
  if (a2)
  {
    char v16 = sub_10002BD54((uint64_t)v9, (uint64_t)v13);
    (*v15)(v9, v6);
    if (v16)
    {
      char v17 = 1;
LABEL_17:
      sub_10002C8B0(v17, (uint64_t)v13);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  else
  {
    sub_10002C660((uint64_t)v9, (uint64_t)v13);
    (*v15)(v9, v6);
  }
  uint64_t v18 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsInAutomodeForLayoutKey);
  swift_beginAccess();
  uint64_t v19 = *v18;
  if (*(void *)(v19 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_10007C5C4((uint64_t)v13);
    if (v21)
    {
      uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v22 + 16);
      swift_bridgeObjectRelease();
      if (!v23)
      {
        int v24 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey);
        swift_beginAccess();
        uint64_t v25 = *v24;
        if (*(void *)(v25 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v26 = sub_10007C5C4((uint64_t)v13);
          if (v27)
          {
            int v28 = *(unsigned __int8 *)(*(void *)(v25 + 56) + v26);
            swift_bridgeObjectRelease();
            if (v28 == 1)
            {
              swift_bridgeObjectRelease();
LABEL_15:
              sub_10002C8B0(2, (uint64_t)v13);
              goto LABEL_16;
            }
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v29) {
              goto LABEL_15;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
LABEL_16:
        char v17 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10002C660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006730((uint64_t *)&unk_1000E5790);
  __n128 v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a2, v4, v9);
  uint64_t v12 = sub_10002BCF8();
  char v13 = sub_100034464(v17);
  if (*v14)
  {
    sub_10002E56C(a1, (uint64_t)v11);
    sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E5790);
    ((void (*)(void *, void))v13)(v17, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return ((uint64_t (*)(unsigned char *, void))v12)(v18, 0);
  }
  else
  {
    ((void (*)(void *, void))v13)(v17, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    ((void (*)(unsigned char *, void))v12)(v18, 0);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
    return sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E5790);
  }
}

uint64_t sub_10002C8B0(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  __n128 v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, a2, v5, v7);
  uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v10;
  uint64_t *v10 = 0x8000000000000000;
  sub_10003F4F8(a1, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  uint64_t *v10 = v27;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_endAccess();
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_observersForLayoutKey);
  uint64_t result = swift_beginAccess();
  uint64_t v14 = *v12;
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_10007C5C4(a2);
    if (v16)
    {
      uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1)
      {
        if (a1 == 1)
        {
          uint64_t v18 = *(void *)(v17 + 16);
          if (v18)
          {
            uint64_t v19 = v17 + 32;
            swift_bridgeObjectRetain();
            do
            {
              sub_10000D070(v19, (uint64_t)&v27, (uint64_t *)&unk_1000E5780);
              uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
              if (Strong)
              {
                [Strong showAutoModeUI];
                swift_unknownObjectRelease();
              }
              sub_10000A404((uint64_t)&v27, (uint64_t *)&unk_1000E5780);
              v19 += 8;
              --v18;
            }
            while (v18);
            return swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          uint64_t v24 = *(void *)(v17 + 16);
          if (v24)
          {
            uint64_t v25 = v17 + 32;
            swift_bridgeObjectRetain();
            do
            {
              sub_10000D070(v25, (uint64_t)&v27, (uint64_t *)&unk_1000E5780);
              unint64_t v26 = (void *)swift_unknownObjectWeakLoadStrong();
              if (v26)
              {
                [v26 showDisabledUI];
                swift_unknownObjectRelease();
              }
              sub_10000A404((uint64_t)&v27, (uint64_t *)&unk_1000E5780);
              v25 += 8;
              --v24;
            }
            while (v24);
            return swift_bridgeObjectRelease_n();
          }
        }
      }
      else
      {
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21)
        {
          uint64_t v22 = v17 + 32;
          swift_bridgeObjectRetain();
          do
          {
            sub_10000D070(v22, (uint64_t)&v27, (uint64_t *)&unk_1000E5780);
            uint64_t v23 = (void *)swift_unknownObjectWeakLoadStrong();
            if (v23)
            {
              [v23 showStackUI];
              swift_unknownObjectRelease();
            }
            sub_10000A404((uint64_t)&v27, (uint64_t *)&unk_1000E5780);
            v22 += 8;
            --v21;
          }
          while (v21);
          return swift_bridgeObjectRelease_n();
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_10002CC68()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateGroupedVentsAutoModeHandler();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateGroupedVentsAutoModeHandler()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ClimateLayoutMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClimateGroupedVentsAutoModeHandler.AutoModeState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002CEA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateGroupedVentsAutoModeHandler.AutoModeState()
{
  return &type metadata for ClimateGroupedVentsAutoModeHandler.AutoModeState;
}

unint64_t sub_10002CEE4()
{
  unint64_t result = qword_1000E5758;
  if (!qword_1000E5758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5758);
  }
  return result;
}

void sub_10002CF38(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - v10;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  char v13 = (char *)Strong;
  if (![a1 isValid]
    || (uint64_t v14 = &v13[OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_timerForLayoutKey],
        swift_beginAccess(),
        uint64_t v15 = *(void *)v14,
        !*(void *)(v15 + 16)))
  {
LABEL_23:

    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_10007C5C4(a3);
  if ((v17 & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v18 = *(void **)(*(void *)(v15 + 56) + 8 * v16);
  id v19 = v18;
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_23;
  }
  sub_100007310(0, (unint64_t *)&unk_1000E57A0);
  id v20 = v19;
  id v21 = a1;
  char v22 = static NSObject.== infix(_:_:)();

  if ((v22 & 1) == 0) {
    goto LABEL_23;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1000EA798;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v24(v11, a3, v5);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  int v26 = v25;
  if (os_log_type_enabled(v23, v25))
  {
    uint64_t v47 = v24;
    uint64_t v27 = swift_slowAlloc();
    int v45 = v26;
    int v28 = (uint8_t *)v27;
    uint64_t v46 = swift_slowAlloc();
    v49[0] = v46;
    id v43 = v28;
    os_log_t v44 = v23;
    *(_DWORD *)int v28 = 136315138;
    uint64_t v29 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v48 = sub_10000A56C(v29, v30, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v24 = v47;
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31(v11, v5);
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Disabled state timer fired for layoutKey: %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31(v11, v5);
  }
  v24(v8, a3, v5);
  uint64_t v32 = (uint64_t *)&v13[OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_stateForLayoutKey];
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = *v32;
  uint64_t *v32 = 0x8000000000000000;
  sub_10003F4F8(1, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  uint64_t *v32 = v48;
  swift_bridgeObjectRelease();
  v31(v8, v5);
  swift_endAccess();
  uint64_t v34 = &v13[OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_observersForLayoutKey];
  swift_beginAccess();
  uint64_t v35 = *(void *)v34;
  if (!*(void *)(*(void *)v34 + 16)) {
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  unint64_t v36 = sub_10007C5C4(a3);
  if ((v37 & 1) == 0)
  {
LABEL_11:

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v38 = *(void *)(*(void *)(v35 + 56) + 8 * v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(v38 + 16);
  if (!v39)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v40 = v38 + 32;
  swift_bridgeObjectRetain();
  do
  {
    sub_10000D070(v40, (uint64_t)&v48, (uint64_t *)&unk_1000E5780);
    uint64_t v41 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v41)
    {
      [v41 showAutoModeUI];
      swift_unknownObjectRelease();
    }
    sub_10000A404((uint64_t)&v48, (uint64_t *)&unk_1000E5780);
    v40 += 8;
    --v39;
  }
  while (v39);

  swift_bridgeObjectRelease_n();
}

void sub_10002D430(uint64_t a1)
{
  sub_10002C8B0(2, a1);
  id v3 = [self standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned __int8 v5 = [v3 BOOLForKey:v4];

  if ((v5 & 1) == 0)
  {
    uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate34ClimateGroupedVentsAutoModeHandler_ventsForLayoutKey);
    swift_beginAccess();
    uint64_t v7 = *v6;
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_10007C5C4(a1);
      if ((v9 & 1) != 0
        && (uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            (uint64_t v11 = *(void *)(v10 + 16)) != 0))
      {
        uint64_t v12 = v10 + 32;
        swift_bridgeObjectRetain();
        do
        {
          sub_10000D070(v12, (uint64_t)&v14, &qword_1000E7AD0);
          uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
          [Strong setOn:[Strong on]];

          sub_10000A404((uint64_t)&v14, &qword_1000E7AD0);
          v12 += 8;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t sub_10002D5D0(uint64_t a1, char *a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10002EB74((unint64_t *)&qword_1000E5760);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    char v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v32 * v13;
      unint64_t v20 = *(void *)(v10 + 48) + v32 * v13;
      id v21 = v14;
      v14(v9, v20, v6);
      sub_10002EB74((unint64_t *)&qword_1000E70C0);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      uint64_t v14 = v21;
      uint64_t v10 = v18;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        id v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    *id v3 = 0x8000000000000000;
    sub_10002DCB4((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *id v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_10002D8CC()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100006730((uint64_t *)&unk_1000E5770);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    char v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      int v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10002EB74((unint64_t *)&qword_1000E5760);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10002DCB4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10002D8CC();
  }
  else
  {
    if (v12 > v11)
    {
      sub_10002DF2C();
      goto LABEL_12;
    }
    sub_10002E1D0();
  }
  uint64_t v13 = *v3;
  sub_10002EB74((unint64_t *)&qword_1000E5760);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10002EB74((unint64_t *)&qword_1000E70C0);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10002DF2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730((uint64_t *)&unk_1000E5770);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  char v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10002E1D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100006730((uint64_t *)&unk_1000E5770);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10002EB74((unint64_t *)&qword_1000E5760);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002E56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10002EB74((unint64_t *)&qword_1000E5760);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v28 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v24 = v2;
    uint64_t v25 = v6;
    uint64_t v26 = a2;
    uint64_t v27 = ~v11;
    unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v14 = v6 + 16;
    uint64_t v13 = v15;
    uint64_t v16 = *(void *)(v14 + 56);
    while (1)
    {
      v13(v8, *(void *)(v9 + 48) + v16 * v12, v5);
      sub_10002EB74((unint64_t *)&qword_1000E70C0);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v8, v5);
      if (v17) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      if (((*(void *)(v28 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v6 = v25;
        a2 = v26;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v19 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v19;
    uint64_t v30 = *v19;
    *unint64_t v19 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10002DF2C();
      uint64_t v21 = v30;
    }
    uint64_t v6 = v25;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 32))(v26, *(void *)(v21 + 48) + v16 * v12, v5);
    sub_10002E820(v12);
    *unint64_t v19 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
}

uint64_t sub_10002E820(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    BOOL v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_10002EB74((unint64_t *)&qword_1000E5760);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_10002EB28(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000CA170, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_10002EB74(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10002EBB8(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_10002EBC8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002EC00()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10002ECCC(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10002CF38(a1, v4, v5);
}

uint64_t sub_10002ED40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002ED50()
{
  return swift_release();
}

void sub_10002ED5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000B1F40;
  uint64_t v7 = *(void **)(a1 + OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView);
  id v8 = [v7 heightAnchor];
  type metadata accessor for ClimateAssets();
  CAUVehicleLayout.cabinSeatsImage.getter();
  int v9 = CAUVehicleLayoutInfo.height.getter();
  unint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  id v11 = [v8 constraintEqualToConstant:(double)v9];

  *(void *)(v6 + 32) = v11;
  id v12 = [v7 widthAnchor];
  CAUVehicleLayout.cabinSeatsImage.getter();
  LODWORD(v11) = CAUVehicleLayoutInfo.width.getter();
  v10(v5, v2);
  id v13 = [v12 constraintEqualToConstant:(double)(int)v11];

  *(void *)(v6 + 40) = v13;
  uint64_t v18 = v6;
  specialized Array._endMutation()();
  *(void *)(a1 + OBJC_IVAR____TtC7Climate14ClimateCarView_imageActiveHeightConstraint) = v18;
  uint64_t v14 = self;
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v14 deactivateConstraints:isa];

  swift_bridgeObjectRetain();
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 activateConstraints:v16];
  swift_bridgeObjectRelease();
}

void sub_10002EFEC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10002F070(a1);
  }
}

id sub_10002F070(uint64_t a1)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ClimateZone();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FB7C(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10002FBE4((uint64_t)v5);
    return [*(id *)(v1 + OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView) setImage:*(void *)(v1+ OBJC_IVAR____TtC7Climate14ClimateCarView_assets+ *(int *)(type metadata accessor for ClimateAssets() + 24))];
  }
  else
  {
    sub_10000D1A0((uint64_t)v5, (uint64_t)v9);
    id v11 = *(void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView);
    uint64_t v12 = v1 + OBJC_IVAR____TtC7Climate14ClimateCarView_assets;
    uint64_t v13 = v12 + *(int *)(type metadata accessor for ClimateAssets() + 24);
    uint64_t v14 = *(void *)(v13 + 8);
    id v15 = *(id *)v13;
    swift_bridgeObjectRetain();
    id v16 = (id)sub_1000086E8((uint64_t)v9, (uint64_t)v15, v14);
    swift_bridgeObjectRelease();

    [v11 setImage:v16];
    return (id)sub_10002FD28((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  }
}

id sub_10002F2AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCarView();
  return [super dealloc];
}

uint64_t sub_10002F3A8()
{
  return type metadata accessor for ClimateCarView();
}

uint64_t type metadata accessor for ClimateCarView()
{
  uint64_t result = qword_1000E5818;
  if (!qword_1000E5818) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002F3FC()
{
  uint64_t result = type metadata accessor for ClimateSystemManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ClimateAssets();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void sub_10002F4F4()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayout();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = (objc_class *)type metadata accessor for ClimateCarView();
  v58.receiver = v0;
  v58.super_class = v9;
  [super layoutSubviews];
  unint64_t v10 = *(void **)&v0[OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView];
  [v10 layoutIfNeeded];
  id v11 = *(char **)&v0[OBJC_IVAR____TtC7Climate14ClimateCarView_positionViews];
  [v11 layoutIfNeeded];
  if ((v0[OBJC_IVAR____TtC7Climate14ClimateCarView_hasAlreadyLayout] & 1) == 0)
  {
    uint64_t v51 = v1;
    uint64_t v52 = v2;
    uint64_t v49 = v4;
    v0[OBJC_IVAR____TtC7Climate14ClimateCarView_hasAlreadyLayout] = 1;
    [v0 bounds];
    double Width = CGRectGetWidth(v59);
    [v10 bounds];
    double v13 = Width / CGRectGetWidth(v60);
    id v56 = v0;
    [v0 bounds];
    double Height = CGRectGetHeight(v61);
    id v54 = v10;
    [v10 bounds];
    double v15 = Height / CGRectGetHeight(v62);
    if (v15 >= v13) {
      double v16 = v13;
    }
    else {
      double v16 = v15;
    }
    uint64_t v17 = OBJC_IVAR____TtC7Climate20ClimatePositionViews_scale;
    *(double *)&v11[OBJC_IVAR____TtC7Climate20ClimatePositionViews_scale] = v16;
    id v18 = sub_10008B8AC();
    uint64_t v53 = type metadata accessor for ClimateAssets();
    CAUVehicleLayout.cabinSeatsImage.getter();
    int v19 = CAUVehicleLayoutInfo.height.getter();
    int64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20(v8, v5);
    [v18 setConstant:*(double *)&v11[v17] * (double)v19];

    id v21 = sub_10008B8D4();
    CAUVehicleLayout.cabinSeatsImage.getter();
    int v22 = CAUVehicleLayoutInfo.width.getter();
    uint64_t v50 = v5;
    uint64_t v55 = v6 + 8;
    uint64_t v48 = v20;
    v20(v8, v5);
    [v21 setConstant:*(double *)&v11[v17] * (double)v22];

    unint64_t v23 = *(void *)&v11[OBJC_IVAR____TtC7Climate20ClimatePositionViews_positions];
    if (v23 >> 62)
    {
      uint64_t v24 = v52;
      swift_bridgeObjectRetain_n();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v24 = v52;
      uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v25)
      {
LABEL_7:
        if (v25 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v26 = 0;
        do
        {
          if ((v23 & 0xC000000000000001) != 0) {
            uint64_t v27 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v27 = (char *)*(id *)(v23 + 8 * v26 + 32);
          }
          BOOL v28 = v27;
          ++v26;
          *(void *)&v27[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale] = *(void *)&v11[v17];
          sub_100087930();
        }
        while (v25 != v26);
      }
    }
    swift_bridgeObjectRelease_n();
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1000B1F40;
    id v29 = [v54 heightAnchor];
    uint64_t v30 = (uint64_t)&v56[OBJC_IVAR____TtC7Climate14ClimateCarView_assets + *(int *)(v53 + 20)];
    uint64_t v31 = v24;
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    uint64_t v47 = &v56[OBJC_IVAR____TtC7Climate14ClimateCarView_assets];
    uint64_t v32 = v49;
    uint64_t v33 = v51;
    v46(v49, v30, v51);
    CAUVehicleLayout.cabinSeatsImage.getter();
    int v45 = *(void (**)(char *, uint64_t))(v31 + 8);
    v45(v32, v33);
    int v34 = CAUVehicleLayoutInfo.height.getter();
    uint64_t v35 = v50;
    int64_t v36 = v48;
    v48(v8, v50);
    id v37 = [v29 constraintEqualToConstant:v16 * (double)v34];

    uint64_t v38 = v52;
    *(void *)(v52 + 32) = v37;
    id v39 = [v54 widthAnchor];
    v46(v32, (uint64_t)&v47[*(int *)(v53 + 20)], v33);
    CAUVehicleLayout.cabinSeatsImage.getter();
    v45(v32, v33);
    LODWORD(v37) = CAUVehicleLayoutInfo.width.getter();
    v36(v8, v35);
    id v40 = [v39 constraintEqualToConstant:v16 * (double)(int)v37];

    *(void *)(v38 + 40) = v40;
    uint64_t v57 = v38;
    specialized Array._endMutation()();
    *(void *)&v56[OBJC_IVAR____TtC7Climate14ClimateCarView_imageActiveHeightConstraint] = v57;
    uint64_t v41 = self;
    sub_100006774();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v41 deactivateConstraints:isa];

    swift_bridgeObjectRetain();
    Class v43 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v41 activateConstraints:v43];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10002FB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E5530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FBE4(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E5530);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10002FC44()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIImageView) init];
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v2 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateCarView_cancellables] = v2;
  v0[OBJC_IVAR____TtC7Climate14ClimateCarView_hasAlreadyLayout] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateCarView_imageActiveHeightConstraint] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10002FD28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002FD88()
{
  return 3;
}

uint64_t sub_10002FD90()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton)
                + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation);
  char v2 = [v1 on];
  char v3 = [v1 autoMode];
  char v4 = [v1 onRestricted];
  char v5 = [v1 onInvalid];
  char v6 = [v1 onDisabled];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2, v3, v4, v5, v6);
}

char *sub_10002FE58(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_autoModeGlyph] = 0;
  id v3 = objc_allocWithZone((Class)type metadata accessor for ClimateRecirculationServiceButton());
  char v4 = v1;
  id v5 = a1;
  char v6 = sub_10008F6E8(v5, 1);
  *(void *)&v4[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton] = v6;
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v4[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculation] = v5;
  id v7 = v5;

  uint64_t v8 = (char *)sub_100015F7C(0, 0, 1);
  int v9 = v8;
  uint64_t v10 = OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton;
  id v11 = *(unsigned char **)&v8[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton];
  int v12 = v11[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v11[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v12 == 1)
  {
    double v13 = v8;
  }
  else
  {
    uint64_t v14 = *(void **)&v11[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    double v15 = v8;
    double v16 = v11;
    [v14 removeFromSuperview];
    sub_100088B54();
  }
  [v7 registerObserver:v9];
  [v9 addSubview:*(void *)&v9[v10]];
  sub_10002FFCC();
  sub_100030248();

  return v9;
}

void sub_10002FFCC()
{
  uint64_t v1 = v0;
  char v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  char v4 = *(void **)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton];
  id v5 = [v4 leadingAnchor];
  id v6 = [v1 leadingAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 trailingAnchor];
  id v9 = [v1 trailingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [v4 topAnchor];
  id v12 = [v1 topAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  id v14 = [v4 bottomAnchor];
  id v15 = [v1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v3 + 56) = v16;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_10003021C()
{
  return sub_100088B54();
}

void sub_100030248()
{
  uint64_t v1 = v0;
  char v2 = *(void **)&v0[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculation];
  unsigned __int8 v3 = [v2 on];
  v1[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn] = v3;
  unsigned __int8 v4 = [v2 autoMode];
  v1[OBJC_IVAR____TtC7Climate16ClimateIndicator_isAutoMode] = v4;
  sub_10009F8A4();
  objc_msgSend(v1, "setEnabled:", (_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0((char)objc_msgSend(*(id *)(*(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton]+ OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation), "on"), (char)objc_msgSend(*(id *)(*(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton]+ OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation), "autoMode"), (char)objc_msgSend(*(id *)(*(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton]+ OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation), "onRestricted"), (char)objc_msgSend(*(id *)(*(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton]+ OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation), "onInvalid"),
       (char)[*(id *)(*(void *)&v1[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton]+ OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation) onDisabled]) & 0x18) == 0);
  sub_100088B54();

  ClimateButton.refreshColorConfig()();
}

void sub_100030388()
{
  sub_100026DD0(v0 + OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_delegate);

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_autoModeGlyph);
}

id sub_1000303E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateRecirculationIdicator();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateRecirculationIdicator()
{
  return self;
}

uint64_t sub_1000304AC(void *a1)
{
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn);
  if (v3 == [a1 on])
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v8 = qword_1000EA798;
    os_log_type_t v9 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v8, v9);
    if (result)
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v10 = 0;
      id v11 = "Recirculation indicator did update with same ON value. Skipping.";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v11, v10, 2u);
      return swift_slowDealloc();
    }
  }
  else
  {
    if ([a1 receivedAllValues])
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      unsigned __int8 v4 = qword_1000EA798;
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        id v6 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v6 = 67240192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Recirculation indicator did update ON: %{BOOL,public}d", v6, 8u);
        swift_slowDealloc();
      }
      sub_100030248();
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        sub_100056DAC();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v8 = qword_1000EA798;
    os_log_type_t v9 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v8, v9);
    if (result)
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v10 = 0;
      id v11 = "Recirculation service hasn't receivedAllValues.";
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_1000307A8(void *a1, char a2)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7Climate16ClimateIndicator_isAutoMode) == (a2 & 1))
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v7 = qword_1000EA798;
    os_log_type_t v8 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v7, v8);
    if (result)
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      id v10 = "Recirculation indicator did update with same autoMode value. Skipping.";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
      return swift_slowDealloc();
    }
  }
  else
  {
    if ([a1 receivedAllValues])
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      int v3 = qword_1000EA798;
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v5 = 67240192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Recirculation service did update autoMode: %{BOOL,public}d", v5, 8u);
        swift_slowDealloc();
      }
      sub_100030248();
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        sub_100056DAC();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v7 = qword_1000EA798;
    os_log_type_t v8 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v7, v8);
    if (result)
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      id v10 = "Recirculation service automode hasn't receivedAllValues.";
      goto LABEL_17;
    }
  }
  return result;
}

void sub_100030A94(int a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue;
  uint64_t v4 = *(int *)((char *)v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue);
  uint64_t v5 = OBJC_IVAR____TtC7Climate19ClimateProgressView_range;
  id v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v1
                                                             + OBJC_IVAR____TtC7Climate19ClimateProgressView_range), "maximum"));
  id v7 = [v6 integerValue];

  if ((uint64_t)v7 >= v4)
  {
    uint64_t v8 = *(int *)((char *)v1 + v3);
    id v9 = [*(id *)((char *)v1 + v5) minimum];
    id v10 = [v9 integerValue];

    if ((uint64_t)v10 <= v8)
    {
      int v11 = *(_DWORD *)((char *)v1 + v3);
      if (v11 != a1)
      {
        if (v11)
        {
          if (a1) {
            return;
          }
          id v12 = *(void (**)(uint64_t))((swift_isaMask & *v1) + 0x128);
        }
        else
        {
          id v12 = *(void (**)(uint64_t))((swift_isaMask & *v1) + 0x120);
        }
        v12(1);
      }
    }
  }
}

void sub_100030C2C(int a1)
{
  int v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue) = a1;
  sub_100030A94(v2);
}

id sub_100030C44(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted) = a1;
  double v2 = 0.2;
  if ((a1 & 1) == 0) {
    double v2 = 1.0;
  }
  return [*(id *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView) setAlpha:v2];
}

void sub_100030C80()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView);
  id v2 = [self clearColor];
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  id v13 = *(id *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  *uint64_t v4 = v2;
  v4[1] = v3;
  v4[2] = &_swiftEmptyDictionarySingleton;
  id v7 = v3;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v8 = v2;
  id v9 = v7;
  swift_bridgeObjectRetain();
  id v10 = v8;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v6);
  char v12 = v11;
  swift_bridgeObjectRelease();

  if ((v12 & 1) == 0) {
LABEL_6:
  }
    ClimateButton.refreshColorConfig()();

  swift_bridgeObjectRelease();
}

void sub_100030DFC(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = (void *)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  id v8 = *(void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  id v9 = *(void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig + 8);
  id v10 = *(void **)(v4 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig + 16);
  void *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  id v11 = a3;
  swift_bridgeObjectRetain();
  id v13 = a1;
  id v12 = a2;
  swift_bridgeObjectRelease();

  sub_100030C80();
  swift_bridgeObjectRelease();
}

uint64_t sub_100030EC4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100030EEC()
{
}

void sub_100030F48()
{
}

id sub_100030FFC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateProgressView();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateProgressView()
{
  return self;
}

CGFloat sub_1000310E4()
{
  CGAffineTransformMakeScale(&v1, 0.01, 0.01);
  CGFloat result = v1.a;
  *(CGAffineTransform *)byte_1000EA650 = v1;
  return result;
}

void *sub_10003112C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v10 = OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView;
  id v11 = objc_allocWithZone((Class)type metadata accessor for ClimatePassthroughButton());
  id v12 = v6;
  *(void *)&v6[v10] = [v11 init];
  v12[OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted] = 0;
  id v13 = &v12[OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig];
  id v14 = self;
  id v15 = [v14 labelColor];
  id v16 = [v14 labelColor];
  id v17 = [v16 colorWithAlphaComponent:0.25];

  id v18 = [v14 labelColor];
  *(void *)id v13 = v15;
  *((void *)v13 + 1) = v17;
  *((void *)v13 + 2) = v18;
  *((void *)v13 + 3) = &_swiftEmptyDictionarySingleton;
  *(void *)&v12[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint] = 0;
  *(void *)&v12[OBJC_IVAR____TtC7Climate19ClimateProgressView_range] = a6;
  int v88 = a5;
  *(_DWORD *)&v12[OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue] = a5;
  id v19 = a6;

  v90.receiver = v12;
  v90.super_class = (Class)type metadata accessor for ClimateProgressView();
  int64_t v20 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v21 = OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView;
  [*(id *)((char *)v20 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView) setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v87 = v19;
  if (a4)
  {
    id v22 = [self configurationWithScale:-1];
  }
  else
  {
    CGFloat result = [self _preferredFontForTextStyle:UIFontTextStyleBody weight:UIFontWeightSemibold];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v24 = result;
    id v22 = [self configurationWithFont:result scale:3];
  }
  uint64_t v25 = (char *)*(id *)((char *)v20 + v21);
  id v26 = v22;
  id v27 = ClimateButton.imageSymbolConfiguration.getter();
  BOOL v28 = *(void **)&v25[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v25[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v26;
  id v29 = v26;

  id v30 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  LOBYTE(v28) = static NSObject.== infix(_:_:)();

  if ((v28 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

  char v83 = v29;
  uint64_t v31 = *(char **)((char *)v20 + v21);
  uint64_t v32 = &v31[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  *(void *)uint64_t v32 = a1;
  *((void *)v32 + 1) = a2;
  uint64_t v35 = v31;
  int64_t v36 = v35;
  if (a2)
  {
    if (v33 && (v34 == a1 && v33 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v33)
  {
LABEL_14:
    ClimateButton.updateClimateConfiguration()();
LABEL_15:

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

LABEL_16:
  id v37 = *(char **)((char *)v20 + v21);
  [v37 setContentMode:1];
  [v37 _setContinuousCornerRadius:0.0];
  char v38 = v37[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v37[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if ((v38 & 1) == 0)
  {
    id v39 = *(void **)&v37[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    id v40 = v37;
    [v39 removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  uint64_t v41 = *(char **)((char *)v20 + v21);
  uint64_t v42 = &v41[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  swift_beginAccess();
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v42 = a3;
  *((void *)v42 + 1) = a4;
  int v45 = v41;
  swift_bridgeObjectRetain();
  if (a4)
  {
    if (v43 && (v44 == a3 && v43 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v43)
  {
LABEL_25:
    ClimateButton.updateClimateConfiguration()();
LABEL_26:

    swift_bridgeObjectRelease();
    goto LABEL_27;
  }

LABEL_27:
  id v46 = [*(id *)((char *)v20 + v21) titleLabel];
  if (v46)
  {
    uint64_t v47 = v46;
    [v46 setNumberOfLines:1];
  }
  uint64_t v48 = *(char **)((char *)v20 + v21);
  uint64_t v49 = &v48[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle];
  swift_beginAccess();
  char v50 = *v49;
  *uint64_t v49 = 1;
  if ((v50 & 1) == 0)
  {
    uint64_t v51 = v48;
    ClimateButton.updateClimateConfiguration()();
  }
  uint64_t v86 = v21;
  uint64_t v52 = (char *)*(id *)((char *)v20 + v21);
  id v53 = [v14 clearColor];
  id v54 = *(void **)((char *)v20 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  uint64_t v55 = &v52[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  id v56 = *(void **)&v52[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  uint64_t v57 = *(void **)&v52[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  uint64_t v58 = *(void *)&v52[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
  *(void *)uint64_t v55 = v53;
  *((void *)v55 + 1) = v54;
  *((void *)v55 + 2) = &_swiftEmptyDictionarySingleton;
  id v59 = v54;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v60 = v53;
  id v61 = v59;
  swift_bridgeObjectRetain();
  id v62 = v60;
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v58);
    char v64 = v63;
    swift_bridgeObjectRelease();

    if (v64) {
      goto LABEL_37;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  ClimateButton.refreshColorConfig()();
LABEL_37:

  swift_bridgeObjectRelease();
  [v20 addSubview:*(void *)((char *)v20 + v86)];
  if (a4)
  {
    swift_bridgeObjectRelease();
    double v65 = 45.0;
  }
  else
  {
    double v65 = 30.0;
  }
  id v66 = [*(id *)((char *)v20 + v86) centerYAnchor];
  id v67 = [v20 centerYAnchor];
  id v68 = [v66 constraintEqualToAnchor:v67];

  id v69 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_1000B20F0;
  id v71 = [*(id *)((char *)v20 + v86) widthAnchor];
  id v72 = [v71 constraintEqualToConstant:v65];

  *(void *)(v70 + 32) = v72;
  id v73 = [*(id *)((char *)v20 + v86) heightAnchor];
  id v74 = [v73 constraintEqualToConstant:30.0];

  *(void *)(v70 + 40) = v74;
  *(void *)(v70 + 48) = v68;
  int v75 = *(void **)((char *)v20 + v86);
  id v76 = v68;
  id v77 = [v75 centerXAnchor];
  id v78 = [v20 centerXAnchor];
  id v79 = [v77 constraintEqualToAnchor:v78];

  *(void *)(v70 + 56) = v79;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v69 activateConstraints:isa];

  uint64_t v81 = *(void **)((char *)v20 + OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint);
  *(void *)((char *)v20 + OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint) = v76;
  id v82 = v76;

  if (v88) {
    (*(void (**)(void))((swift_isaMask & *v20) + 0x128))(0);
  }
  else {
    (*(void (**)(void))((swift_isaMask & *v20) + 0x120))(0);
  }

  return v20;
}

void sub_100031A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, id a6, double a7)
{
  id v11 = [a6 minimum];
  unsigned int v12 = [v11 intValue];

  id v13 = [a6 maximum];
  int v14 = [v13 intValue];

  int v15 = v14 & (v14 >> 31);
  int v16 = v12 - v15;
  if (__OFSUB__(v12, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v17 = [a6 maximum];
  unsigned int v18 = [v17 intValue];

  id v19 = [a6 minimum];
  int v20 = [v19 intValue];

  int v21 = v20 & ~(v20 >> 31);
  BOOL v22 = __OFSUB__(v18, v21);
  int v23 = v18 - v21;
  if (v22)
  {
LABEL_15:
    __break(1u);
    return;
  }
  if (v16 >= 0) {
    unsigned int v24 = v16;
  }
  else {
    unsigned int v24 = -v16;
  }
  if (v23 < 0) {
    int v23 = -v23;
  }
  if (v24 > 3 || v23 >= 4)
  {
    objc_allocWithZone((Class)type metadata accessor for ClimateBarProgressView());
    swift_bridgeObjectRetain();
    id v26 = a6;
    swift_bridgeObjectRetain();
    sub_100075AE8(a1, a2, a3, a4, a5, v26, a7);
  }
  else
  {
    id v27 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimateDotsProgressView());
    uint64_t v28 = OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_stackView;
    sub_100007310(0, &qword_1000E5680);
    swift_bridgeObjectRetain();
    id v29 = a6;
    id v30 = v27;
    swift_bridgeObjectRetain();
    *(void *)&v27[v28] = UIStackView.init(axis:spacing:arrangedSubviews:)();
    *(void *)&v30[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_dots] = &_swiftEmptyArrayStorage;
    *(double *)&v30[OBJC_IVAR____TtC7Climate23ClimateDotsProgressView_diameter] = a7;

    id v31 = v29;
    uint64_t v32 = sub_10003112C(a1, a2, a3, a4, a5, v31);
    sub_100029E10(a5, v31, a7);
  }
}

void sub_100031CA8()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)type metadata accessor for ClimatePassthroughButton()) init];
  v0[OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted] = 0;
  objc_super v2 = &v0[OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig];
  uint64_t v3 = self;
  id v4 = [v3 labelColor];
  id v5 = [v3 labelColor];
  id v6 = [v5 colorWithAlphaComponent:0.25];

  id v7 = [v3 labelColor];
  void *v2 = v4;
  v2[1] = v6;
  v2[2] = v7;
  v2[3] = &_swiftEmptyDictionarySingleton;
  *(void *)&v0[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100031E40()
{
}

id sub_100031E50()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCabinServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateCabinServiceButton()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for ClimateHeatingCoolingVentingImages(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void destroy for ClimateHeatingCoolingVentingImages(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for ClimateHeatingCoolingVentingImages(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  return a1;
}

__n128 initializeWithTake for ClimateColorConfig(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ClimateHeatingCoolingVentingImages(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for ClimateHeatingCoolingVentingImages(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClimateHeatingCoolingVentingImages(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateHeatingCoolingVentingImages()
{
  return &type metadata for ClimateHeatingCoolingVentingImages;
}

uint64_t sub_1000320E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  uint64_t v57 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CAUBaselineAnchor();
  uint64_t v64 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006730(&qword_1000E59C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v62 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v13 = (char *)&v55 - v12;
  __chkstk_darwin(v14);
  uint64_t v55 = (char *)&v55 - v15;
  __chkstk_darwin(v16);
  uint64_t v61 = (uint64_t)&v55 - v17;
  uint64_t v18 = sub_100006730(&qword_1000E59C8);
  __chkstk_darwin(v18 - 8);
  int v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unsigned int v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  id v27 = (char *)&v55 - v26;
  uint64_t v60 = v2;
  uint64_t v28 = CAUVehicleLayout.infos.getter();
  if (*(void *)(v28 + 16) && (unint64_t v29 = sub_10007C5C4(a1), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v20, *(void *)(v28 + 56) + *(void *)(v22 + 72) * v29, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, v20, v21);
    CAUVehicleLayoutInfo.baselineAnchor.getter();
    uint64_t v39 = v64;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v13, 1, v6) == 1)
    {
      sub_10000A404((uint64_t)v13, &qword_1000E59C0);
      uint64_t v40 = 1;
      uint64_t v41 = (uint64_t)v55;
    }
    else
    {
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      uint64_t v56 = v6;
      v43(v8, v13, v6);
      int v44 = CAUBaselineAnchor.x.getter();
      CAUVehicleLayout.cabinSeatsImage.getter();
      int v45 = CAUVehicleLayoutInfo.x.getter();
      id v46 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
      uint64_t result = v46(v24, v21);
      if (__OFSUB__(v44, v45))
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      int v47 = CAUBaselineAnchor.y.getter();
      CAUVehicleLayout.cabinSeatsImage.getter();
      int v48 = CAUVehicleLayoutInfo.y.getter();
      uint64_t result = v46(v24, v21);
      if (__OFSUB__(v47, v48))
      {
LABEL_23:
        __break(1u);
        return result;
      }
      uint64_t v41 = (uint64_t)v55;
      CAUBaselineAnchor.init(x:y:)();
      uint64_t v39 = v64;
      uint64_t v6 = v56;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v56);
      uint64_t v40 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v41, v40, 1, v6);
    sub_100032D78(v41, v61);
    int v49 = CAUVehicleLayoutInfo.x.getter();
    CAUVehicleLayout.cabinSeatsImage.getter();
    int v50 = CAUVehicleLayoutInfo.x.getter();
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
    uint64_t result = v51(v24, v21);
    if (__OFSUB__(v49, v50))
    {
      __break(1u);
    }
    else
    {
      int v52 = CAUVehicleLayoutInfo.y.getter();
      CAUVehicleLayout.cabinSeatsImage.getter();
      int v53 = CAUVehicleLayoutInfo.y.getter();
      uint64_t result = v51(v24, v21);
      if (!__OFSUB__(v52, v53))
      {
        CAUVehicleLayoutInfo.height.getter();
        CAUVehicleLayoutInfo.width.getter();
        uint64_t v54 = v61;
        sub_100032DE0(v61, v62);
        CAUVehicleLayoutInfo.init(x:y:height:width:baselineAnchor:)();
        sub_10000A404(v54, &qword_1000E59C0);
        return v51(v27, v21);
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v56 = v6;
  sub_10000A404((uint64_t)v20, &qword_1000E59C8);
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_1000EA798;
  uint64_t v34 = v57;
  uint64_t v33 = v58;
  uint64_t v35 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, a1, v59);
  if (os_log_type_enabled(v32, v31))
  {
    int64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    *(_DWORD *)int64_t v36 = 136446210;
    uint64_t v37 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v65 = sub_10000A56C(v37, v38, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "Unable to retrieve layoutInfo for %{public}s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v62, 1, 1, v56);
  return CAUVehicleLayoutInfo.init(x:y:height:width:baselineAnchor:)();
}

uint64_t sub_1000328C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v22 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CAUAsset.Seat.State();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v20 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CAUResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = &v13[*(int *)(sub_100006730(&qword_1000E4B40) + 48)];
  uint64_t v23 = v5;
  uint64_t v24 = v4;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v19 = a1;
  v18(v13, a1, v4);
  uint64_t v21 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, a2, v7);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for CAUResource.seat(_:), v10);
  uint64_t v15 = CAUAssetLibrary.asset(for:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v15;
}

uint64_t sub_100032D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E59C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100032DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E59C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100032E48()
{
  sub_100006730((uint64_t *)&unk_1000E59D0);
  uint64_t v0 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1000B2BF0;
  uint64_t v3 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v3(v7 + v8, enum case for CAUVehicleLayoutKey.seat_front_left(_:), v0);
  v3(v7 + v8 + v2, enum case for CAUVehicleLayoutKey.seat_front_middle(_:), v0);
  v3(v7 + v8 + 2 * v2, enum case for CAUVehicleLayoutKey.seat_front_right(_:), v0);
  v3(v7 + v8 + 3 * v2, enum case for CAUVehicleLayoutKey.seat_front(_:), v0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000B2BF0;
  v3(v4 + v8, enum case for CAUVehicleLayoutKey.seat_2ndRow_left(_:), v0);
  v3(v4 + v8 + v2, enum case for CAUVehicleLayoutKey.seat_2ndRow_middle(_:), v0);
  v3(v4 + v8 + 2 * v2, enum case for CAUVehicleLayoutKey.seat_2ndRow_right(_:), v0);
  v3(v4 + v8 + 3 * v2, enum case for CAUVehicleLayoutKey.seat_2ndRow(_:), v0);
  sub_1000978A8(v4);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000B2BF0;
  v3(v5 + v8, enum case for CAUVehicleLayoutKey.seat_3rdRow_left(_:), v0);
  v3(v5 + v8 + v2, enum case for CAUVehicleLayoutKey.seat_3rdRow_middle(_:), v0);
  v3(v5 + v8 + 2 * v2, enum case for CAUVehicleLayoutKey.seat_3rdRow_right(_:), v0);
  v3(v5 + v8 + 3 * v2, enum case for CAUVehicleLayoutKey.seat_3rdRow(_:), v0);
  sub_1000978A8(v5);
  return v7;
}

unint64_t sub_100033160(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5DC8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5DB8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D070(v12, (uint64_t)v5, &qword_1000E5DC8);
    unint64_t result = sub_10007C4F0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = sub_1000437B4(v9, v7[7] + 8 * v16);
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033360(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E5D90);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5D88);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D070(v12, (uint64_t)v5, (uint64_t *)&unk_1000E5D90);
    unint64_t result = sub_10007C5C4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CAUVehicleLayoutKey();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033554(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5E80);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_10007C698((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033654(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5E78);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10007C698((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033760(uint64_t a1)
{
  return sub_10003379C(a1, &qword_1000E5E70, &qword_1000E5D80, (uint64_t (*)(char *))sub_10007C5C4, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey);
}

unint64_t sub_10003379C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  unint64_t v29 = a5;
  char v30 = a4;
  uint64_t v8 = sub_100006730(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v13 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = *(int *)(v8 + 48);
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v28[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D070(v18, (uint64_t)v11, a2);
    unint64_t result = v30(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v29(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    *(void *)(v13[7] + 8 * v22) = *(void *)&v11[v15];
    uint64_t v25 = v13[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003399C(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5E60);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5E68);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D070(v12, (uint64_t)v5, &qword_1000E5E60);
    unint64_t result = sub_10007C5C4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CAUVehicleLayoutKey();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033B90(uint64_t a1)
{
  return sub_10003379C(a1, &qword_1000E5E58, &qword_1000E5D60, (uint64_t (*)(char *))sub_10007C5C4, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey);
}

unint64_t sub_100033BCC(uint64_t a1)
{
  return sub_10003379C(a1, &qword_1000E5E50, &qword_1000E5D70, (uint64_t (*)(char *))sub_10007C5C4, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey);
}

unint64_t sub_100033C08(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5E48);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5D78);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D070(v12, (uint64_t)v5, &qword_1000E5E48);
    unint64_t result = sub_10007C5C4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CAUVehicleLayoutKey();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(unsigned char *)(v7[7] + v16) = v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033DFC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730((uint64_t *)&unk_1000E5D30);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_10007C840(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100033F18(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5E88);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000D070(v6, (uint64_t)&v13, (uint64_t *)&unk_1000E5E90);
    uint64_t v7 = v13;
    unint64_t result = sub_10007C8B8(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100043FB4(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100034048(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5DA8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006730(&qword_1000E5DA0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000D070(v12, (uint64_t)v5, &qword_1000E5DA8);
    unint64_t result = sub_10007C4F0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = sub_100006730(&qword_1000E5040);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*sub_100034280(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_100041FC0(v2, (uint64_t)v6);
  return sub_100034370;
}

uint64_t (*sub_100034374(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_1000420E4(v2, (uint64_t)v6);
  return sub_100034370;
}

uint64_t (*sub_100034464(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_100042204(v2, (uint64_t)v6);
  return sub_100034370;
}

void sub_100034554(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

void (*sub_1000345CC(void *a1, uint64_t a2, uint64_t a3, char a4))(void *a1)
{
  uint64_t v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[56] = a4;
  *((void *)v8 + 4) = a2;
  *((void *)v8 + 5) = a3;
  sub_100043628(a2, a3, a4);
  *((void *)v8 + 6) = sub_1000423BC(v8, a2, a3, a4);
  return sub_100034660;
}

void sub_100034660(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 40);
  uint64_t v3 = *(void *)(*a1 + 32);
  char v4 = *(unsigned char *)(*a1 + 56);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  sub_100010840(v3, v2, v4);

  free(v1);
}

void *sub_1000346CC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10008AF30(0, v1, 0);
  unint64_t result = (void *)sub_100042FC0(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v19 = v1;
  int v20 = v4;
  uint64_t v21 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v22 = v6;
    unint64_t result = (void *)_print_unlocked<A, B>(_:_:)();
    unint64_t v12 = *((void *)&_swiftEmptyArrayStorage + 2);
    unint64_t v11 = *((void *)&_swiftEmptyArrayStorage + 3);
    if (v12 >= v11 >> 1) {
      unint64_t result = (void *)sub_10008AF30(v11 > 1, v12 + 1, 1);
    }
    *((void *)&_swiftEmptyArrayStorage + 2) = v12 + 1;
    uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 16 * v12;
    *((void *)v13 + 4) = 0;
    *((void *)v13 + 5) = 0xE000000000000000;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v14 = *(void *)(v21 + 8 * v10);
    if ((v14 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v20;
    if (*(_DWORD *)(a1 + 36) != v20) {
      goto LABEL_27;
    }
    unint64_t v15 = v14 & (-2 << (v5 & 0x3F));
    if (v15)
    {
      int64_t v8 = __clz(__rbit64(v15)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v19;
    }
    else
    {
      unint64_t v16 = v10 + 1;
      unint64_t v17 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v19;
      if (v10 + 1 < v17)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v16);
        if (v18)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v18)) + (v16 << 6);
        }
        else
        {
          while (v17 - 2 != v10)
          {
            unint64_t v18 = *(void *)(a1 + 80 + 8 * v10++);
            if (v18)
            {
              unint64_t v16 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v22 + 1;
    uint64_t v5 = v8;
    if (v22 + 1 == v9) {
      return &_swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t (*sub_100034910())()
{
  return j__swift_endAccess;
}

double sub_10003496C()
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  int64_t v1 = &unk_1000EA000;
  uint64_t v2 = qword_1000EA798;
  id v3 = v0;
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100006730(&qword_1000E5CF8);
    sub_10004363C();
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    uint64_t v9 = v6;
    int64_t v1 = &unk_1000EA000;
    uint64_t v38 = sub_10000A56C(v9, v8, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v4, "ActiveScenes = %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_100034E34(v10);
  uint64_t v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  if (v17 && (sub_100010840(v11, v13, v15), sub_1000A3E68(v17), uint64_t v19 = v18, v21 = v20, swift_bridgeObjectRelease(), v19))
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = *((void *)v1 + 243);
    id v23 = v21;
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134349056;
      sub_1000A42C0();
      uint64_t v38 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v22, v24, "Returning main scale: %{public}f", v25, 0xCu);
      swift_slowDealloc();
    }
    else
    {
    }
    sub_1000A42C0();
    double v35 = v36;
  }
  else
  {
    uint64_t v27 = *((void *)v1 + 243);
    id v28 = v3;
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)char v30 = 136446210;
      uint64_t v31 = swift_bridgeObjectRetain();
      sub_1000346CC(v31);
      swift_bridgeObjectRelease();
      sub_100006730((uint64_t *)&unk_1000E70E0);
      sub_10000D02C((unint64_t *)&qword_1000E5E00, (uint64_t *)&unk_1000E70E0);
      uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      sub_10000A56C(v32, v34, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Unable to resolve a carplay sceneDelegate [%{public}s]", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 2.0;
  }
  return v35;
}

uint64_t sub_100034E34(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  int64_t v21 = v5;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_23;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v10 >= v5) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v22 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v5) {
        goto LABEL_31;
      }
      unint64_t v11 = *(void *)(v22 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v5) {
          goto LABEL_31;
        }
        unint64_t v11 = *(void *)(v22 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v5) {
            goto LABEL_31;
          }
          unint64_t v11 = *(void *)(v22 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(a1 + 48) + 24 * v9;
    int v14 = *(unsigned __int8 *)(v13 + 16);
    if (*(unsigned char *)(v13 + 16))
    {
      uint64_t v15 = *(void *)v13;
      uint64_t v16 = *(void *)(v13 + 8);
      if (v14 == 1 || __PAIR128__(v16, v15) < 2)
      {
        if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8 * v9) + 16))
        {
          swift_bridgeObjectRetain();
          goto LABEL_33;
        }
        uint64_t v23 = *(void *)v13;
        uint64_t v17 = qword_1000E46D8;
        swift_bridgeObjectRetain();
        if (v17 != -1) {
          swift_once();
        }
        uint64_t v18 = qword_1000EA798;
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          int v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "empty dictionary, continue", v20, 2u);
          int64_t v5 = v21;
          swift_slowDealloc();
        }
        sub_100010840(v23, v16, v14);
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v5)
  {
LABEL_31:
    uint64_t v15 = 0;
LABEL_33:
    swift_release();
    return v15;
  }
  unint64_t v11 = *(void *)(v22 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v22 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000350E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_10003515C()
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000EA798;
  id v2 = v0;
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 134349056;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v1, v3, "Updating view controllers for %{public}ld scenes", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  id v5 = v2;
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_100043360(v6, v5);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000352E4()
{
  return sub_1000354C8();
}

uint64_t sub_1000352F8(uint64_t a1)
{
  uint64_t v3 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v12 - v7;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000D070(a1, (uint64_t)v8, &qword_1000E5AC0);
  v1;
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v9 = type metadata accessor for ClimateSystemManager();
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9);
  sub_10000A404((uint64_t)v5, &qword_1000E5AC0);
  if (v10 == 1)
  {
    sub_1000940AC();
    sub_10003515C();
  }
  return sub_10000A404(a1, &qword_1000E5AC0);
}

uint64_t sub_1000354B4()
{
  return sub_1000354C8();
}

uint64_t sub_1000354C8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100035538()
{
  return sub_1000355D4();
}

uint64_t sub_10003554C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000355C0()
{
  return sub_1000355D4();
}

uint64_t sub_1000355D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

char *sub_100035640()
{
  uint64_t v1 = sub_100006730((uint64_t *)&unk_1000E5490);
  uint64_t v83 = *(void *)(v1 - 8);
  uint64_t v84 = v1;
  __chkstk_darwin(v1);
  id v82 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100006730(&qword_1000E5E10);
  uint64_t v80 = *(void *)(v3 - 8);
  uint64_t v81 = v3;
  __chkstk_darwin(v3);
  id v79 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730(&qword_1000E5E18);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  __chkstk_darwin(v5);
  id v76 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006730((uint64_t *)&unk_1000E5E20);
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  __chkstk_darwin(v7);
  id v73 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v72);
  uint64_t v71 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v70 = (char *)&v63 - v11;
  uint64_t v12 = sub_100006730(&qword_1000E4BB0);
  uint64_t v68 = *(void *)(v12 - 8);
  uint64_t v69 = v12;
  __chkstk_darwin(v12);
  id v67 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v66);
  uint64_t v65 = (uint64_t)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v64 = sub_100006730(&qword_1000E5E30);
  uint64_t v18 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  int v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100006730(&qword_1000E5E38);
  uint64_t v21 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_carManager;
  id v25 = objc_allocWithZone((Class)CAFCarManager);
  uint64_t v26 = v0;
  *(void *)&v0[v24] = [v25 init];
  uint64_t v27 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_assetManager;
  type metadata accessor for CAUAssetLibraryManager();
  swift_allocObject();
  *(void *)&v26[v27] = CAUAssetLibraryManager.init()();
  uint64_t v28 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_continuousStepperTracker;
  type metadata accessor for ClimateContinuousStepperTracker();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = sub_10003379C((uint64_t)_swiftEmptyArrayStorage, &qword_1000E5E40, &qword_1000E5DC0, (uint64_t (*)(char *))sub_10007C4F0, (uint64_t (*)(void))&type metadata accessor for UUID);
  *(void *)&v26[v28] = v29;
  uint64_t v30 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_targetTemperatureTracker;
  *(void *)&v26[v30] = [objc_allocWithZone((Class)type metadata accessor for ClimateTargetTemperatureTracker()) init];
  uint64_t v31 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_groupedVentHandler;
  *(void *)&v26[v31] = [objc_allocWithZone((Class)type metadata accessor for ClimateGroupedVentsAutoModeHandler()) init];
  uint64_t v32 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus;
  *(void *)&v26[v32] = [objc_allocWithZone((Class)CARSessionStatus) initWithOptions:1];
  *(void *)&v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator_requestContentManager] = 0;
  unint64_t v33 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__appActive];
  LOBYTE(v86) = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v33, v23, v63);
  unint64_t v34 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__currentCar];
  uint64_t v86 = 0;
  sub_100006730(&qword_1000E5AB0);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v34, v20, v64);
  double v35 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__climateSystem];
  uint64_t v36 = type metadata accessor for ClimateSystemManager();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v17, 1, 1, v36);
  sub_10000D070((uint64_t)v17, v65, &qword_1000E5AC0);
  uint64_t v37 = v67;
  Published.init(initialValue:)();
  sub_10000A404((uint64_t)v17, &qword_1000E5AC0);
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v35, v37, v69);
  uint64_t v38 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__activeZone];
  uint64_t v39 = type metadata accessor for ClimateZone();
  uint64_t v40 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v70, 1, 1, v39);
  sub_10000D070(v40, v71, (uint64_t *)&unk_1000E5530);
  uint64_t v41 = v73;
  Published.init(initialValue:)();
  sub_10000A404(v40, (uint64_t *)&unk_1000E5530);
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v38, v41, v75);
  uint64_t v42 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__layoutSide];
  uint64_t v86 = 2;
  type metadata accessor for UIRectEdge(0);
  uint64_t v43 = v76;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v42, v43, v78);
  int v44 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__layoutMode];
  LOBYTE(v86) = 0;
  int v45 = v79;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v44, v45, v81);
  id v46 = &v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator__statusBarSteppersState];
  uint64_t v86 = 3;
  int v47 = v82;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v46, v47, v84);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    int v48 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    int v48 = &_swiftEmptySetSingleton;
  }
  *(void *)&v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator_cancellables] = v48;
  v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar] = 0;
  *(void *)&v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator_activeScenes] = &_swiftEmptyDictionarySingleton;
  *(void *)&v26[OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager] = [objc_allocWithZone((Class)type metadata accessor for ClimateSignpostManager()) init];

  int v49 = (objc_class *)type metadata accessor for ClimateCoordinator();
  v85.receiver = v26;
  v85.super_class = v49;
  int v50 = (char *)[super init];
  sub_10003613C();
  [*(id *)&v50[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] addSessionObserver:v50];
  uint64_t v51 = OBJC_IVAR____TtC7Climate18ClimateCoordinator_carManager;
  int v52 = *(void **)&v50[OBJC_IVAR____TtC7Climate18ClimateCoordinator_carManager];
  [v52 registerObserver:v50];
  id v53 = v52;
  id v54 = [v53 currentCar];
  [v50 carManager:v53 didUpdateCurrentCar:v54];

  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v55 = qword_1000EA798;
  uint64_t v56 = v50;
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 138543362;
    uint64_t v60 = *(void **)&v50[v51];
    uint64_t v86 = (uint64_t)v60;
    id v61 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v59 = v60;

    _os_log_impl((void *)&_mh_execute_header, v55, v57, "climate coordinator started carManager=%{public}@", v58, 0xCu);
    sub_100006730(&qword_1000E4F30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return v56;
}

void sub_10003613C()
{
  uint64_t v1 = v0;
  id v2 = [*(id *)&v0[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] currentSession];
  if (v2)
  {
    uint64_t v3 = v2;
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_1000EA798;
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      sub_10000A56C(0xD000000000000016, 0x80000001000B6E40, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s CARSession available", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    type metadata accessor for CAFUIRequestContentManager();
    swift_allocObject();
    id v7 = v3;
    *(void *)&v1[OBJC_IVAR____TtC7Climate18ClimateCoordinator_requestContentManager] = CAFUIRequestContentManager.init(session:)();
    swift_release();
    id v8 = [v7 configuration];
    unsigned int v9 = [v8 rightHandDrive];

    if (v9) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = 2;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v16 = v10;
    uint64_t v11 = v1;
    static Published.subscript.setter();
  }
  else
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_1000EA798;
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_10000A56C(0xD000000000000016, 0x80000001000B6E40, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s No CARSession available", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    *(void *)&v1[OBJC_IVAR____TtC7Climate18ClimateCoordinator_requestContentManager] = 0;
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v16 = 2;
    uint64_t v15 = v1;
    static Published.subscript.setter();
  }
}

id sub_100036520()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCoordinator();
  [super dealloc];
}

uint64_t sub_10003681C()
{
  return type metadata accessor for ClimateCoordinator();
}

uint64_t type metadata accessor for ClimateCoordinator()
{
  uint64_t result = qword_1000E5A90;
  if (!qword_1000E5A90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100036870()
{
  sub_100036BBC(319, &qword_1000E5AA0);
  if (v0 <= 0x3F)
  {
    sub_100036B14(319, &qword_1000E5AA8, &qword_1000E5AB0);
    if (v1 <= 0x3F)
    {
      sub_100036B14(319, &qword_1000E5AB8, &qword_1000E5AC0);
      if (v2 <= 0x3F)
      {
        sub_100036B14(319, (unint64_t *)&unk_1000E5AC8, (uint64_t *)&unk_1000E5530);
        if (v3 <= 0x3F)
        {
          sub_100036B64();
          if (v4 <= 0x3F)
          {
            sub_100036BBC(319, &qword_1000E5AE0);
            if (v5 <= 0x3F)
            {
              sub_100036BBC(319, &qword_1000E5AE8);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_100036B14(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_10000A4DC(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100036B64()
{
  if (!qword_1000E5AD8)
  {
    type metadata accessor for UIRectEdge(255);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000E5AD8);
    }
  }
}

void sub_100036BBC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_100036C04@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ClimateCoordinator();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100036C44(unsigned char *a1, void *a2)
{
  unint64_t v3 = v2;
  unint64_t v6 = &a1[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type];
  uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type];
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type + 8];
  char v9 = a1[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type + 16];
  sub_100006730(&qword_1000E5CF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B2000;
  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_persistentIdentifier + 8];
  *(void *)(inited + 32) = *(void *)&a1[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_persistentIdentifier];
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 48) = a1;
  sub_100043628(v7, v8, v9);
  swift_bridgeObjectRetain();
  uint64_t v12 = a1;
  unint64_t v13 = sub_100033DFC(inited);
  uint64_t v14 = &v3[OBJC_IVAR____TtC7Climate18ClimateCoordinator_activeScenes];
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = *(void *)v14;
  *(void *)uint64_t v14 = 0x8000000000000000;
  sub_10003FA38(v13, v7, v8, v9, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v14 = v31;
  swift_bridgeObjectRelease();
  sub_100010840(v7, v8, v9);
  swift_endAccess();
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1000EA798;
  uint64_t v17 = v3;
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446210;
    swift_bridgeObjectRetain();
    sub_100006730(&qword_1000E5CF8);
    int v20 = a2;
    sub_10004363C();
    uint64_t v21 = Dictionary.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = v21;
    a2 = v20;
    sub_10000A56C(v24, v23, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "Attach active scenes = %{public}s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v25 = *(void *)v6;
  uint64_t v26 = *((void *)v6 + 1);
  char v27 = v6[16];
  sub_100043628(*(void *)v6, v26, v27);
  sub_100036F68(v25, v26, v27, a2);
  uint64_t v29 = v28;
  sub_100010840(v25, v26, v27);
  return v29;
}

void sub_100036F68(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v94 = a4;
  *(void *)&long long v95 = a2;
  *((void *)&v95 + 1) = a1;
  uint64_t v6 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CAUResource();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006730((uint64_t *)&unk_1000E5D08);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CAUPhysicalControlBarsLayout();
  *(void *)&double v18 = __chkstk_darwin(v16).n128_u64[0];
  int v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (a3 == 2)
    {
      if (v95 == 0)
      {
        if (v94)
        {
          id v48 = [v94 _FBSScene:v18];
          id v49 = [v48 settings];

          if (v49)
          {
            self;
            uint64_t v50 = swift_dynamicCastObjCClass();
            if (v50)
            {
              uint64_t v51 = (void *)v50;
              if (qword_1000E46D8 != -1) {
                swift_once();
              }
              int v52 = qword_1000EA798;
              os_log_type_t v53 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v52, v53))
              {
                id v54 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)id v54 = 0;
                _os_log_impl((void *)&_mh_execute_header, v52, v53, "Showing quick controls.", v54, 2u);
                swift_slowDealloc();
              }
              id v55 = [v51 containerHeight];
              [v55 floatValue];
              float v57 = v56;

              id v58 = [self sharedApplication];
              id v59 = [v58 delegate];

              if (v59)
              {
                double v60 = v57;
                type metadata accessor for ClimateAppDelegate();
                swift_dynamicCastClassUnconditional();
                id v61 = sub_10008EAA4();
                swift_unknownObjectRelease();
                swift_getKeyPath();
                swift_getKeyPath();
                uint64_t v63 = (void (*)(uint64_t *, void))static Published.subscript.modify();
                if ((*v62 & 1) == 0) {
                  *v62 |= 1uLL;
                }
                v63(&v96, 0);

                swift_release();
                swift_release();
                id v64 = objc_allocWithZone((Class)type metadata accessor for ClimateOverlayViewController());
                id v65 = v94;
                id v66 = v94;
                sub_10001D938(v65, v60);
              }
              else
              {
                __break(1u);
              }
              return;
            }
          }
        }
        if (qword_1000E46D8 != -1) {
          swift_once();
        }
        uint64_t v75 = qword_1000EA798;
        os_log_type_t v76 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v75, v76)) {
          goto LABEL_59;
        }
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v77 = 0;
        uint64_t v78 = "No scene settings for quick controls.";
        goto LABEL_58;
      }
      if (!(*((void *)&v95 + 1) ^ 1 | (unint64_t)v95))
      {
        uint64_t v93 = v17;
        if (v94)
        {
          id v21 = [v94 _FBSScene:v18];
          id v22 = [v21 settings];

          if (v22)
          {
            self;
            unint64_t v23 = (void *)swift_dynamicCastObjCClass();
            if (v23)
            {
              if ([v23 hasPhysicalControlBars])
              {
                uint64_t v24 = dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter();
                if (v24)
                {
                  uint64_t v25 = (void *)v24;
                  id v92 = v22;
                  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for CAUResource.physicalControlBarsLayout(_:), v9);
                  sub_1000436A0();
                  id v94 = v25;
                  dispatch thunk of CAUAssetLibrary.asset<A>(for:)();
                  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
                  uint64_t v85 = v93;
                  int v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v15, 1, v16);
                  if (v86 == 1)
                  {
                    sub_10000A404((uint64_t)v15, (uint64_t *)&unk_1000E5D08);
                    static os_log_type_t.debug.getter();
                    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
                    unint64_t v87 = (void *)static OS_os_log.default.getter();
                    os_log(_:dso:log:_:_:)();

                    id v88 = objc_allocWithZone((Class)type metadata accessor for ClimateLoadingViewController());
                    sub_100010124(*((unint64_t *)&v95 + 1), v95, 2u);
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v20, v15, v16);
                    static os_log_type_t.debug.getter();
                    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
                    uint64_t v89 = (void *)static OS_os_log.default.getter();
                    os_log(_:dso:log:_:_:)();

                    uint64_t v90 = CAUPhysicalControlBarsLayout.climateLayouts.getter();
                    id v91 = objc_allocWithZone((Class)type metadata accessor for ClimatePhysicalControlBarsViewController());
                    sub_10000AD40(v90);

                    (*(void (**)(char *, uint64_t))(v85 + 8))(v20, v16);
                  }
                  return;
                }
                static os_log_type_t.debug.getter();
                sub_100007310(0, (unint64_t *)&qword_1000E4F00);
                uint64_t v83 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();
              }
              else
              {
                if (qword_1000E46D8 != -1) {
                  swift_once();
                }
                uint64_t v80 = qword_1000EA798;
                os_log_type_t v81 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v80, v81))
                {
                  id v82 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)id v82 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v80, v81, "No physical controls.", v82, 2u);
                  swift_slowDealloc();
                }
              }
              id v84 = objc_allocWithZone((Class)type metadata accessor for ClimateLoadingViewController());
              sub_100010124(*((unint64_t *)&v95 + 1), v95, 2u);

              return;
            }
          }
        }
        if (qword_1000E46D8 != -1) {
          swift_once();
        }
        uint64_t v75 = qword_1000EA798;
        os_log_type_t v76 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v75, v76))
        {
LABEL_59:
          id v79 = objc_allocWithZone((Class)type metadata accessor for ClimateLoadingViewController());
          sub_100010124(*((unint64_t *)&v95 + 1), v95, 2u);
          return;
        }
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v77 = 0;
        uint64_t v78 = "No scene settings for physical controls.";
LABEL_58:
        _os_log_impl((void *)&_mh_execute_header, v75, v76, v78, v77, 2u);
        swift_slowDealloc();
        goto LABEL_59;
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v26 = type metadata accessor for ClimateSystemManager();
    int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v8, 1, v26);
    sub_10000A404((uint64_t)v8, &qword_1000E5AC0);
    if (v27 == 1)
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      uint64_t v28 = qword_1000EA798;
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Showing loading view controller.", v30, 2u);
        swift_slowDealloc();
      }
      id v31 = objc_allocWithZone((Class)type metadata accessor for ClimateLoadingViewController());
      unint64_t v32 = *((void *)&v95 + 1);
      goto LABEL_42;
    }
    if (a3 == 1)
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      uint64_t v69 = qword_1000EA798;
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Showing app view controller.", v71, 2u);
        swift_slowDealloc();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v96) = BYTE8(v95);
      id v72 = v4;
      static Published.subscript.setter();
      id v73 = [objc_allocWithZone((Class)type metadata accessor for ClimateAppViewController()) init];
      id v74 = [objc_allocWithZone((Class)UINavigationController) initWithRootViewController:v73];

      [v74 setNavigationBarHidden:1];
    }
    else
    {
      unint64_t v32 = *((void *)&v95 + 1);
      if (a3 != 2 || v95 != __PAIR128__(2, 0))
      {
        id v67 = objc_allocWithZone((Class)type metadata accessor for ClimateLoadingViewController());
LABEL_42:
        unint64_t v68 = v95;
        sub_100043628(v32, v95, a3);
        sub_100010124(v32, v68, a3);
        return;
      }
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      uint64_t v42 = qword_1000EA798;
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        int v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Showing phone view controller", v44, 2u);
        swift_slowDealloc();
      }
      int v45 = (objc_class *)type metadata accessor for ClimateRoleViewController();
      id v46 = (char *)objc_allocWithZone(v45);
      int v47 = &v46[OBJC_IVAR____TtC7Climate25ClimateRoleViewController_role];
      *(void *)int v47 = 0x656E6F6850;
      *((void *)v47 + 1) = 0xE500000000000000;
      v99.receiver = v46;
      v99.super_class = v45;
      [super initWithNibName:0 bundle:0];
    }
  }
  else
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    unint64_t v33 = qword_1000EA798;
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      double v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unknown scene type", v35, 2u);
      swift_slowDealloc();
    }
    uint64_t v96 = 0x206E776F6E6B6E55;
    unint64_t v97 = 0xE800000000000000;
    v36._uint64_t countAndFlagsBits = *((void *)&v95 + 1);
    v36._object = (void *)v95;
    String.append(_:)(v36);
    uint64_t v37 = v96;
    unint64_t v38 = v97;
    uint64_t v39 = (objc_class *)type metadata accessor for ClimateRoleViewController();
    uint64_t v40 = (char *)objc_allocWithZone(v39);
    uint64_t v41 = &v40[OBJC_IVAR____TtC7Climate25ClimateRoleViewController_role];
    *(void *)uint64_t v41 = v37;
    *((void *)v41 + 1) = v38;
    v98.receiver = v40;
    v98.super_class = v39;
    [super initWithNibName:0 bundle:0];
  }
}

id sub_100037DB8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type + 8);
  char v6 = *(unsigned char *)(a1 + OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type + 16);
  sub_100043628(v4, v5, v6);
  uint64_t v7 = sub_100034910();
  uint64_t v8 = sub_1000345CC(v27, v4, v5, v6);
  if (*v9)
  {
    uint64_t v10 = a1 + OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_persistentIdentifier;
    uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_persistentIdentifier);
    uint64_t v12 = *(void *)(v10 + 8);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)sub_10003A6E0(v11, v12);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v8)(v27, 0);
    sub_100010840(v4, v5, v6);
    ((void (*)(unsigned char *, void))v7)(v28, 0);
  }
  else
  {
    ((void (*)(uint64_t *, void))v8)(v27, 0);
    sub_100010840(v4, v5, v6);
    ((void (*)(unsigned char *, void))v7)(v28, 0);
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1000EA798;
  id v15 = v2;
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446210;
    v27[0] = v18;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100006730(&qword_1000E5CF8);
    sub_10004363C();
    uint64_t v19 = Dictionary.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    sub_10000A56C(v19, v21, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "Detach active scenes = %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v22 = (objc_class *)type metadata accessor for ClimateRoleViewController();
  unint64_t v23 = (char *)objc_allocWithZone(v22);
  uint64_t v24 = &v23[OBJC_IVAR____TtC7Climate25ClimateRoleViewController_role];
  *(void *)uint64_t v24 = 0x74657320746F6ELL;
  *((void *)v24 + 1) = 0xE700000000000000;
  v26.receiver = v23;
  v26.super_class = v22;
  return [super initWithNibName:0 bundle:0];
}

void sub_100038110(void **a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ClimateSystemManager();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v65 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v60 - v8;
  uint64_t v10 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v10 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v67 = (uint64_t)&v60 - v13;
  __chkstk_darwin(v14);
  os_log_type_t v16 = (char *)&v60 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v60 - v18;
  unint64_t v68 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10000D070((uint64_t)v19, (uint64_t)v16, &qword_1000E5AC0);
  unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v20(v16, 1, v4) == 1)
  {
    sub_10000A404((uint64_t)v16, &qword_1000E5AC0);
  }
  else
  {
    sub_10004393C((uint64_t)v16, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    char v21 = sub_100046984();
    sub_10000D204((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    if (v21)
    {
      char v22 = 1;
      goto LABEL_6;
    }
  }
  char v22 = 0;
LABEL_6:
  unint64_t v23 = v68;
  sub_10000A404((uint64_t)v19, &qword_1000E5AC0);
  uint64_t v24 = OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_rootViewController;
  type metadata accessor for ClimateLoadingViewController();
  if (swift_dynamicCastClass())
  {
    if (v22) {
      goto LABEL_8;
    }
  }
  else if ((v22 & 1) == 0)
  {
LABEL_8:
    uint64_t v64 = v24;
    uint64_t v25 = *(void *)&v23[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type];
    uint64_t v26 = *(void *)&v23[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type + 8];
    char v27 = v23[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_type + 16];
    uint64_t v63 = OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_window;
    uint64_t v28 = *(void **)&v23[OBJC_IVAR____TtC7Climate20ClimateSceneDelegate_window];
    sub_100043628(v25, v26, v27);
    if (v28) {
      id v29 = [v28 windowScene];
    }
    else {
      id v29 = 0;
    }
    sub_100036F68(v25, v26, v27, v29);
    unint64_t v38 = v37;

    sub_100010840(v25, v26, v27);
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v39 = qword_1000EA798;
    id v40 = a2;
    id v41 = v38;
    id v42 = v40;
    id v43 = v41;
    int v44 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v39, (os_log_type_t)v44))
    {

LABEL_27:
      id v54 = v68;
      uint64_t v55 = v64;
      float v56 = *(void **)&v68[v64];
      *(void *)&v68[v64] = v43;
      id v57 = v43;

      uint64_t v58 = v63;
      id v59 = *(void **)&v54[v63];
      if (v59)
      {
        [v59 setRootViewController:*(void *)&v54[v55]];
        id v59 = *(void **)&v54[v58];
      }
      [v59 makeKeyAndVisible];

      return;
    }
    int v61 = v44;
    os_log_t v62 = v39;
    uint64_t v45 = swift_slowAlloc();
    double v60 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 67109378;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v46 = v67;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v47 = v46;
    uint64_t v48 = v66;
    sub_10000D070(v47, v66, &qword_1000E5AC0);
    if (v20((char *)v48, 1, v4) == 1)
    {
      sub_10000A404(v48, &qword_1000E5AC0);
    }
    else
    {
      uint64_t v49 = v65;
      sub_10004393C(v48, v65, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      char v50 = sub_100046984();
      sub_10000D204(v49, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      if (v50)
      {
        int v51 = 1;
LABEL_26:
        os_log_type_t v52 = v61;
        sub_10000A404(v67, &qword_1000E5AC0);

        LODWORD(v69) = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v45 + 8) = 2112;
        id v69 = v43;
        id v53 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *double v60 = v43;

        _os_log_impl((void *)&_mh_execute_header, v62, v52, "climatesystem.isSystemReady=%{BOOL}d, showing view controller %@.", (uint8_t *)v45, 0x12u);
        sub_100006730(&qword_1000E4F30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_27;
      }
    }
    int v51 = 0;
    goto LABEL_26;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1000EA798;
  id v31 = v23;
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v32))
  {
    unint64_t v33 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v34 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v33 = 138412290;
    double v35 = *(void **)&v23[v24];
    id v69 = v35;
    id v36 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v34 = v35;

    _os_log_impl((void *)&_mh_execute_header, v30, v32, "using existing view controller %@", v33, 0xCu);
    sub_100006730(&qword_1000E4F30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100038890(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v116 = a1;
  unint64_t v117 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v114 = *(void *)(v4 - 8);
  uint64_t v115 = v4;
  __chkstk_darwin(v4);
  uint64_t v112 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for DispatchQoS();
  uint64_t v111 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  id v110 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v7 - 8);
  uint64_t v106 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v107 = (uint64_t)&v99 - v10;
  __chkstk_darwin(v11);
  uint64_t v104 = (uint64_t)&v99 - v12;
  uint64_t v13 = type metadata accessor for ClimateZone();
  uint64_t v108 = *(void *)(v13 - 8);
  uint64_t v109 = v13;
  __chkstk_darwin(v13);
  uint64_t v103 = (uint64_t)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ClimateSystemManager();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v105 = (uint64_t)&v99 - v20;
  uint64_t v21 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v21 - 8);
  unint64_t v23 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v99 - v25;
  __chkstk_darwin(v27);
  id v29 = (char *)&v99 - v28;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v31 = v30(v29, 1, v15);
  sub_10000A404((uint64_t)v29, &qword_1000E5AC0);
  if (v31 != 1)
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    int v44 = qword_1000EA798;
    unint64_t v45 = v117;
    swift_bridgeObjectRetain_n();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v119 = sub_10000A56C(v116, v45, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "ClimateSystem Ready? (%{public}s) Early exit, already have climate system.", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_38:
      swift_slowDealloc();
      return;
    }
LABEL_27:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v32 = aBlock[0];
  unint64_t v33 = v3;
  if (!aBlock[0])
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v48 = qword_1000EA798;
    unint64_t v49 = v117;
    swift_bridgeObjectRetain_n();
    char v50 = v3;
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      id v53 = (void *)swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v119 = sub_10000A56C(v116, v49, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v52 + 12) = 2112;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v54 = v119;
      if (!v119) {
        uint64_t v119 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v53 = v54;

      _os_log_impl((void *)&_mh_execute_header, v48, v51, "ClimateSystem Ready? (%{public}s) currentCar=%@", (uint8_t *)v52, 0x16u);
      sub_100006730(&qword_1000E4F30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_38;
    }

    goto LABEL_27;
  }
  id v34 = [aBlock[0] climate];
  if (v34)
  {
    double v35 = v34;
    id v36 = [v32 positionManager];
    if (v36)
    {
      uint64_t v37 = v36;
      if ([v36 accessoryIsTracked:v35])
      {
        id v101 = v37;
        id v100 = v32;
        sub_10004765C(v100, (uint64_t)v26);
        sub_1000352F8((uint64_t)v26);
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        int v38 = v30(v23, 1, v15);
        id v102 = v35;
        if (v38 == 1)
        {
          uint64_t v39 = v33;
          sub_10000A404((uint64_t)v23, &qword_1000E5AC0);
          unint64_t v40 = v117;
          if (qword_1000E46D8 != -1) {
            swift_once();
          }
          id v41 = qword_1000EA798;
          swift_bridgeObjectRetain_n();
          os_log_type_t v42 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v41, v42))
          {
            id v43 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)id v43 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v119 = sub_10000A56C(v116, v40, (uint64_t *)aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "ClimateSystem Ready? (%{public}s) No climateSystem available.", v43, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }
          uint64_t v82 = v107;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v107, 1, 1, v109);
          swift_getKeyPath();
          swift_getKeyPath();
          sub_10000D070(v82, v106, (uint64_t *)&unk_1000E5530);
          id v83 = v39;
          static Published.subscript.setter();
          sub_10000A404(v82, (uint64_t *)&unk_1000E5530);
        }
        else
        {
          uint64_t v70 = v105;
          sub_10004393C((uint64_t)v23, v105, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
          unint64_t v71 = v117;
          if (qword_1000E46D8 != -1) {
            swift_once();
          }
          id v72 = &unk_1000EA000;
          id v73 = qword_1000EA798;
          sub_1000438D4(v70, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
          swift_bridgeObjectRetain_n();
          os_log_type_t v74 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v73, v74))
          {
            uint64_t v75 = swift_slowAlloc();
            aBlock[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 136446466;
            swift_bridgeObjectRetain();
            uint64_t v119 = sub_10000A56C(v116, v71, (uint64_t *)aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v75 + 12) = 2082;
            uint64_t v76 = sub_100049B3C();
            uint64_t v119 = sub_10000A56C(v76, v77, (uint64_t *)aBlock);
            id v72 = &unk_1000EA000;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10000D204((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "ClimateSystem Ready? (%{public}s) Yes! climateSystem=%{public}s", (uint8_t *)v75, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v70 = v105;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            sub_10000D204((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
          }
          uint64_t v84 = v108;
          *(unsigned char *)(*(void *)&v33[OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager]
                   + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_climateSystemManagerCreated) = 1;
          sub_100094488();
          uint64_t v85 = v104;
          sub_1000482A4(v104);
          uint64_t v86 = v109;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v85, 1, v109) == 1)
          {
            sub_10000A404(v85, (uint64_t *)&unk_1000E5530);
            unint64_t v87 = *((void *)v72 + 243);
            os_log_type_t v88 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v87, v88))
            {
              uint64_t v89 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v89 = 0;
              _os_log_impl((void *)&_mh_execute_header, v87, v88, "No front zone.", v89, 2u);
              swift_slowDealloc();
            }
          }
          else
          {
            uint64_t v90 = v103;
            sub_10004393C(v85, v103, (uint64_t (*)(void))type metadata accessor for ClimateZone);
            uint64_t v91 = v107;
            sub_1000438D4(v90, v107, (uint64_t (*)(void))type metadata accessor for ClimateZone);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v91, 0, 1, v86);
            swift_getKeyPath();
            swift_getKeyPath();
            sub_10000D070(v91, v106, (uint64_t *)&unk_1000E5530);
            id v92 = v33;
            static Published.subscript.setter();
            sub_10000A404(v91, (uint64_t *)&unk_1000E5530);
            sub_10000D204(v90, (uint64_t (*)(void))type metadata accessor for ClimateZone);
          }
          sub_10000D204(v70, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
        }
        sub_100007310(0, (unint64_t *)&qword_1000E7C70);
        uint64_t v93 = (void *)static OS_dispatch_queue.main.getter();
        id v94 = (void *)swift_allocObject();
        swift_unknownObjectWeakInit();
        aBlock[4] = sub_10004386C;
        aBlock[5] = v94;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = (id)1107296256;
        aBlock[2] = sub_10005FC84;
        aBlock[3] = &unk_1000CB5A0;
        long long v95 = _Block_copy(aBlock);
        swift_release();
        uint64_t v96 = v110;
        static DispatchQoS.unspecified.getter();
        aBlock[0] = _swiftEmptyArrayStorage;
        sub_10004388C((unint64_t *)&qword_1000E5DD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100006730((uint64_t *)&unk_1000E7C80);
        sub_10000D02C(&qword_1000E5DE0, (uint64_t *)&unk_1000E7C80);
        unint64_t v97 = v112;
        uint64_t v98 = v115;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v95);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v97, v98);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v96, v113);
        return;
      }
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v59 = qword_1000EA798;
    id v60 = v32;
    unint64_t v61 = v117;
    swift_bridgeObjectRetain_n();
    id v62 = v35;
    id v63 = v60;
    id v64 = v62;
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v59, v65))
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    uint64_t v66 = swift_slowAlloc();
    uint64_t v67 = (void *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v119 = sub_10000A56C(v116, v61, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v66 + 12) = 2114;
    id v68 = [v63 positionManager];
    id v69 = v68;
    if (v68) {
      uint64_t v119 = (uint64_t)v68;
    }
    else {
      uint64_t v119 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v67 = v69;

    *(_WORD *)(v66 + 22) = 1024;
    id v78 = [v63 positionManager];
    if (v78)
    {
      id v79 = v78;
      unsigned __int8 v80 = [v78 accessoryIsTracked:v64];

      if (v80)
      {
        int v81 = 1;
LABEL_49:
        LODWORD(v119) = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v59, v65, "ClimateSystem Ready? (%{public}s) positionManager=%{public}@ climateTracked=%{BOOL}d", (uint8_t *)v66, 0x1Cu);
        sub_100006730(&qword_1000E4F30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
    }
    else
    {
    }
    int v81 = 0;
    goto LABEL_49;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v55 = qword_1000EA798;
  unint64_t v56 = v117;
  swift_bridgeObjectRetain_n();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v119 = sub_10000A56C(v116, v56, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v55, v57, "ClimateSystem Ready? (%{public}s) Missing the Climate accessory", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

void sub_100039CF4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10003515C();
  }
}

ValueMetadata *type metadata accessor for ClimateCoordinator.StatusBarSteppersState()
{
  return &type metadata for ClimateCoordinator.StatusBarSteppersState;
}

void *sub_10003A0A0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10003A0AC(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_10003A0B4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10003A0C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10003A0DC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10003A0F0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10003A120@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10003A14C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10003A170(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10003A184(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10003A198(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10003A1AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10003A1C0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10003A1D4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10003A1E8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10003A1FC()
{
  return *v0 == 0;
}

uint64_t sub_10003A20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10003A224(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_10003A238@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100043A0C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t sub_10003A27C()
{
  unint64_t result = qword_1000E5CD0;
  if (!qword_1000E5CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5CD0);
  }
  return result;
}

unint64_t sub_10003A2D4()
{
  unint64_t result = qword_1000E5CD8;
  if (!qword_1000E5CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5CD8);
  }
  return result;
}

unint64_t sub_10003A32C()
{
  unint64_t result = qword_1000E5CE0;
  if (!qword_1000E5CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5CE0);
  }
  return result;
}

unint64_t sub_10003A384()
{
  unint64_t result = qword_1000E5CE8;
  if (!qword_1000E5CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5CE8);
  }
  return result;
}

void *sub_10003A3D8()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10003A3E4@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10003A464(uint64_t a1, void **a2)
{
  unint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_10003A4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10007C4F0(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100040628();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v6, v13);
    sub_1000437B4(*(void *)(v11 + 56) + 8 * v6, a2);
    sub_10003DA44(v6, v11);
    *id v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

uint64_t sub_10003A5E8(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10007C5C4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 1;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100040B88();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_10003E070(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003A6E0(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10007C840(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *id v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004127C();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10003E5E4(v6, v9);
  *id v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003A7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10007C5C4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100041810((uint64_t (*)(void))type metadata accessor for ClimateZone, (uint64_t *)&unk_1000E5DF0, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ClimateZone();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10004393C(v12 + *(void *)(v20 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    sub_10003E7BC(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ClimateZone();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10003A9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10007C4F0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100041430();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_100006730(&qword_1000E5040);
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_10003EB04(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_100006730(&qword_1000E5040);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10003AB84(uint64_t a1)
{
  return sub_10003AB9C(a1, &qword_1000E5D48);
}

uint64_t sub_10003AB90(uint64_t a1)
{
  return sub_10003AB9C(a1, &qword_1000E5D40);
}

uint64_t sub_10003AB9C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10007C4F0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100041D28((uint64_t (*)(void))&type metadata accessor for UUID, a2);
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10003EE50(v6, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10003ACB8(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100006730(&qword_1000E5DC0);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  os_log_type_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  id v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          id v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  id v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v12;
  return result;
}

uint64_t sub_10003B0DC(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100006730(&qword_1000E5DB8);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  int64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  int v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v42 = v8;
  id v43 = v7;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    unint64_t v22 = v40;
    unint64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          id v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = v5;
    uint64_t v26 = *(void *)(v5 + 72);
    unint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    uint64_t v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      sub_1000437B4(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v47);
    }
    else
    {
      (*v41)(v43, v27, v44);
      sub_10000D070(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v47, &qword_1000E5DB0);
    }
    sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = sub_1000437B4((uint64_t)v47, *(void *)(v10 + 56) + 8 * v18);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  id v3 = v38;
  unint64_t v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v10;
  return result;
}

uint64_t sub_10003B524(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100006730(&qword_1000E5D88);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  id v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  int64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          id v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  id v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v12;
  return result;
}

uint64_t sub_10003B948(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100006730(&qword_1000E5D78);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    id v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              id v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *id v3 = v11;
  return result;
}

uint64_t sub_10003BD6C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_100006730(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_10003C194(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100006730(&qword_1000E5E68);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    BOOL v38 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v40 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v39 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v46 = v5;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v42 = v6;
    for (i = v9; ; uint64_t v9 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v39) {
          goto LABEL_34;
        }
        unint64_t v23 = v40[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v23 = v40[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_34:
              swift_release();
              id v3 = v38;
              if (v44)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v23 = v40[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v44)
      {
        (*v45)(v8, v26, v46);
        uint64_t v27 = *(void **)(*(void *)(v9 + 56) + 8 * v21);
      }
      else
      {
        (*v41)(v8, v26, v46);
        uint64_t v27 = *(void **)(*(void *)(v9 + 56) + 8 * v21);
        id v28 = v27;
      }
      sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v45)(*(void *)(v11 + 48) + v25 * v19, v8, v46);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v27;
      ++*(void *)(v11 + 16);
      uint64_t v6 = v42;
    }
  }
  uint64_t result = swift_release();
  *id v3 = v11;
  return result;
}

uint64_t sub_10003C5B0(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  sub_100006730(&qword_1000E5D28);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_50;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }
    if (v18 >= v37) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v38 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v37) {
        goto LABEL_43;
      }
      unint64_t v20 = *(void *)(v38 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v37)
        {
LABEL_43:
          swift_release();
          id v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }
        unint64_t v20 = *(void *)(v38 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_52;
            }
            if (v13 >= v37) {
              goto LABEL_43;
            }
            unint64_t v20 = *(void *)(v38 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 48) + 24 * v17;
    uint64_t v24 = *(void *)v22;
    uint64_t v23 = *(void *)(v22 + 8);
    int v25 = *(unsigned __int8 *)(v22 + 16);
    uint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    if ((v39 & 1) == 0)
    {
      sub_100043628(*(void *)v22, *(void *)(v22 + 8), *(unsigned char *)(v22 + 16));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    if (v25)
    {
      if (v25 == 1)
      {
        Hasher._combine(_:)(3uLL);
        Swift::UInt v27 = v24;
      }
      else if (v24 | v23)
      {
        if (v24 ^ 1 | v23) {
          Swift::UInt v27 = 4;
        }
        else {
          Swift::UInt v27 = 2;
        }
      }
      else
      {
        Swift::UInt v27 = 1;
      }
      Hasher._combine(_:)(v27);
    }
    else
    {
      Hasher._combine(_:)(0);
      String.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
    *(void *)uint64_t v15 = v24;
    *(void *)(v15 + 8) = v23;
    *(unsigned char *)(v15 + 16) = v25;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v26;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v36;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_46:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v19, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_50:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

uint64_t sub_10003C944(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v53 = sub_100006730(&qword_1000E5040);
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100006730(&qword_1000E5DA0);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  os_log_type_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    uint64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          id v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  id v3 = v42;
  uint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v13;
  return result;
}

uint64_t sub_10003CE44(uint64_t a1, int a2)
{
  return sub_10003CE78(a1, a2, (uint64_t (*)(void))type metadata accessor for ClimateDefrost, &qword_1000E5DE8, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
}

uint64_t sub_10003CE78(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void))
{
  uint64_t v58 = a5;
  uint64_t v7 = v5;
  uint64_t v9 = a3(0);
  uint64_t v52 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)&v47 - v10;
  uint64_t v11 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v54 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v5;
  sub_100006730(a4);
  int v53 = a2;
  uint64_t v15 = v14;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v18 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v19 = *(void *)(v14 + 64);
  uint64_t v49 = (void *)(v14 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v19;
  uint64_t v47 = v5;
  int64_t v48 = (unint64_t)(v18 + 63) >> 6;
  int v50 = (void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  uint64_t v55 = (void (**)(char *, unint64_t, uint64_t))(v12 + 32);
  uint64_t v56 = v11;
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  uint64_t v51 = v15;
  int64_t v25 = v54;
  while (1)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v48) {
      break;
    }
    unint64_t v30 = v49;
    unint64_t v31 = v49[v29];
    ++v24;
    if (!v31)
    {
      int64_t v24 = v29 + 1;
      if (v29 + 1 >= v48) {
        goto LABEL_34;
      }
      unint64_t v31 = v49[v24];
      if (!v31)
      {
        int64_t v32 = v29 + 2;
        if (v32 >= v48)
        {
LABEL_34:
          swift_release();
          uint64_t v7 = v47;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v31 = v49[v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v24 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v48) {
              goto LABEL_34;
            }
            unint64_t v31 = v49[v24];
            ++v32;
            if (v31) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v32;
      }
    }
LABEL_21:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v24 << 6);
    int64_t v25 = v54;
LABEL_22:
    uint64_t v33 = v12;
    uint64_t v34 = *(void *)(v12 + 72);
    unint64_t v35 = *(void *)(v15 + 48) + v34 * v28;
    if (v53)
    {
      (*v55)(v25, v35, v56);
      uint64_t v36 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v52 + 72);
      sub_10004393C(v36 + v37 * v28, v57, v58);
    }
    else
    {
      (*v50)(v25, v35, v56);
      uint64_t v38 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v52 + 72);
      sub_1000438D4(v38 + v37 * v28, v57, v58);
    }
    sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      int64_t v25 = v54;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      int64_t v25 = v54;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*v55)((char *)(*(void *)(v17 + 48) + v34 * v26), (unint64_t)v25, v56);
    uint64_t result = sub_10004393C(v57, *(void *)(v17 + 56) + v37 * v26, v58);
    ++*(void *)(v17 + 16);
    uint64_t v15 = v51;
    uint64_t v12 = v33;
  }
  swift_release();
  uint64_t v7 = v47;
  unint64_t v30 = v49;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v46 = 1 << *(unsigned char *)(v15 + 32);
  if (v46 >= 64) {
    bzero(v30, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v30 = -1 << v46;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v7 = v17;
  return result;
}

uint64_t sub_10003D358(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  sub_100006730(&qword_1000E5D50);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v30 = a2;
    int64_t v8 = 0;
    unint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v31 = -1 << v29;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      char v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

uint64_t sub_10003D620(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100006730(&qword_1000E5D48);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  char v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  int64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          id v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  id v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v12;
  return result;
}

void sub_10003DA44(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      unint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v35 = v15;
      unint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v11;
      do
      {
        uint64_t v18 = v8;
        int64_t v19 = v35 * v10;
        uint64_t v20 = v17;
        v32(v7, *(void *)(a2 + 48) + v35 * v10, v4);
        sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v7, v4);
        uint64_t v17 = v20;
        unint64_t v22 = v21 & v20;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 >= v33 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            if (v35 * a1 < v19
              || *(void *)(a2 + 48) + v35 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v35))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v35 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            if (a1 < (uint64_t)v10 || *(void *)(a2 + 56) + 8 * a1 >= *(void *)(a2 + 56) + 8 * v10 + 8)
            {
              sub_100006730(&qword_1000E5DB0);
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v17 = v20;
            }
            else
            {
              BOOL v25 = a1 == v10;
              a1 = v10;
              uint64_t v17 = v20;
              if (!v25)
              {
                sub_100006730(&qword_1000E5DB0);
                swift_arrayInitWithTakeBackToFront();
                uint64_t v17 = v20;
                a1 = v10;
              }
            }
          }
        }
        else if (v22 >= v33 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        unint64_t v10 = (v10 + 1) & v17;
        uint64_t v8 = v18;
      }
      while (((*(void *)(v18 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *unint64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10003DD90(int64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  BOOL v44 = a4;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = a2 + 64;
  uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = _HashTable.previousHole(before:)();
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      uint64_t v17 = (v16 + 1) & v15;
      char v42 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v43 = v9 + 16;
      uint64_t v47 = *(void *)(v9 + 72);
      int64_t v41 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        uint64_t v18 = v12;
        int64_t v19 = v47 * v14;
        v42(v11, *(void *)(a2 + 48) + v47 * v14, v8);
        unint64_t v20 = v17;
        uint64_t v21 = v15;
        sub_10004388C(v44, v45);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v41)(v11, v8);
        uint64_t v23 = v22 & v21;
        uint64_t v15 = v21;
        uint64_t v17 = v20;
        if (a1 >= (uint64_t)v20)
        {
          if (v23 >= v20 && a1 >= v23)
          {
LABEL_17:
            uint64_t v26 = *(void *)(a2 + 48);
            unint64_t v27 = v26 + v47 * a1;
            unint64_t v28 = v26 + v19 + v47;
            if (v47 * a1 < v19 || v27 >= v28)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v12 = v18;
            }
            else
            {
              BOOL v30 = v47 * a1 == v19;
              uint64_t v12 = v18;
              if (!v30) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t v31 = *(void *)(a2 + 56);
            unint64_t v32 = (void *)(v31 + 8 * a1);
            unint64_t v33 = (void *)(v31 + 8 * v14);
            if (a1 != v14 || (a1 = v14, v32 >= v33 + 1))
            {
              void *v32 = *v33;
              a1 = v14;
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v20 || a1 >= v23)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v18;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
      }
      while (((*(void *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    uint64_t v34 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v35 = *v34;
    uint64_t v36 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v34 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v36 = *v34;
    uint64_t v35 = (-1 << a1) - 1;
  }
  *uint64_t v34 = v36 & v35;
  uint64_t v37 = *(void *)(a2 + 16);
  BOOL v38 = __OFSUB__(v37, 1);
  uint64_t v39 = v37 - 1;
  if (v38)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v39;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10003E070(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            uint64_t v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    int64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10003E368(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v29 = (result + 1) & v7;
      do
      {
        uint64_t v8 = 24 * v6;
        uint64_t v9 = *(void *)(a2 + 48) + 24 * v6;
        uint64_t v11 = *(void *)v9;
        uint64_t v10 = *(void *)(v9 + 8);
        int v12 = *(unsigned __int8 *)(v9 + 16);
        Hasher.init(_seed:)();
        if (v12)
        {
          if (v12 == 1)
          {
            Hasher._combine(_:)(3uLL);
            Swift::UInt v13 = v11;
          }
          else if (v11 | v10)
          {
            if (v11 ^ 1 | v10) {
              Swift::UInt v13 = 4;
            }
            else {
              Swift::UInt v13 = 2;
            }
          }
          else
          {
            Swift::UInt v13 = 1;
          }
          Hasher._combine(_:)(v13);
        }
        else
        {
          Hasher._combine(_:)(0);
          swift_bridgeObjectRetain();
          String.hash(into:)();
        }
        Swift::Int v14 = Hasher._finalize()();
        uint64_t result = sub_100010840(v11, v10, v12);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v29)
        {
          if (v15 < v29) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v29)
        {
          goto LABEL_21;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_21:
          uint64_t v16 = *(void *)(a2 + 48);
          unint64_t v17 = v16 + 24 * v3;
          unint64_t v18 = (long long *)(v16 + v8);
          if (24 * v3 < v8 || v17 >= (unint64_t)v18 + 24 || v3 != v6)
          {
            long long v19 = *v18;
            *(void *)(v17 + 16) = *((void *)v18 + 2);
            *(_OWORD *)unint64_t v17 = v19;
          }
          uint64_t v20 = *(void *)(a2 + 56);
          uint64_t v21 = (void *)(v20 + 8 * v3);
          uint64_t v22 = (void *)(v20 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v21 >= v22 + 1))
          {
            void *v21 = *v22;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  uint64_t *v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10003E5E4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          int v12 = (_OWORD *)(v11 + 16 * v3);
          Swift::UInt v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10003E7BC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v40 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v41 = v13;
      BOOL v38 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v39 = v14;
      uint64_t v37 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v10;
        v39(v7, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_10004388C(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v38)(v7, v4);
        unint64_t v20 = v19 & v11;
        if (a1 >= (uint64_t)v40)
        {
          if (v20 >= v40 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for ClimateZone() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t v26 = v23 + v24 * a1;
            int64_t v27 = v24 * v10;
            unint64_t v28 = v23 + v24 * v10 + v24;
            BOOL v29 = v25 < v27 || v26 >= v28;
            uint64_t v8 = v16;
            if (v29)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v11 = v37;
            }
            else
            {
              a1 = v10;
              uint64_t v11 = v37;
              if (v25 != v27)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v40 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *unint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10003EB04(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v40 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v41 = v13;
      BOOL v38 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v39 = v14;
      uint64_t v37 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v10;
        v39(v7, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v38)(v7, v4);
        unint64_t v20 = v19 & v11;
        if (a1 >= (uint64_t)v40)
        {
          if (v20 >= v40 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(sub_100006730(&qword_1000E5040) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t v26 = v23 + v24 * a1;
            int64_t v27 = v24 * v10;
            unint64_t v28 = v23 + v24 * v10 + v24;
            BOOL v29 = v25 < v27 || v26 >= v28;
            uint64_t v8 = v16;
            if (v29)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v11 = v37;
            }
            else
            {
              a1 = v10;
              uint64_t v11 = v37;
              if (v25 != v27)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v40 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *unint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10003EE50(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_10004388C((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            uint64_t v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_10003F148(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10007C4F0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100040E20((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1000E5DC0);
    goto LABEL_7;
  }
  sub_10003ACB8(v17, a3 & 1);
  unint64_t v23 = sub_10007C4F0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100040384(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10003F320(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10007C4F0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100040628();
      goto LABEL_7;
    }
    sub_10003B0DC(v17, a3 & 1);
    unint64_t v23 = sub_10007C4F0(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100040154(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 8 * v14;

  return sub_10004374C(a1, v21);
}

uint64_t sub_10003F4EC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10003F854(a1, a2, a3, &qword_1000E5D80);
}

uint64_t sub_10003F4F8(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10007C5C4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000408F8();
    goto LABEL_7;
  }
  sub_10003B948(result, a3 & 1);
  uint64_t result = sub_10007C5C4(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100040214(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10003F694(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10003F854(a1, a2, a3, &qword_1000E5D60);
}

void sub_10003F6A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10007C5C4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100040B88();
    goto LABEL_7;
  }
  sub_10003C194(v17, a3 & 1);
  unint64_t v22 = sub_10007C5C4(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1000402CC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10003F848(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10003F854(a1, a2, a3, &qword_1000E5D70);
}

uint64_t sub_10003F854(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_10007C5C4(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100040E20((uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey, a4);
    goto LABEL_7;
  }
  sub_10003BD6C(v18, a3 & 1, a4);
  unint64_t v24 = sub_10007C5C4(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_100040384(v15, (uint64_t)v12, v27, v21, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey);
}

uint64_t sub_10003FA38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10007C74C(a2, a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000410B8();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10003C5B0(v17, a5 & 1);
  unint64_t v23 = sub_10007C74C(a2, a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = v20[6] + 24 * v14;
  *(void *)uint64_t v25 = a2;
  *(void *)(v25 + 8) = a3;
  *(unsigned char *)(v25 + 16) = a4;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v28;

  return sub_100043628(a2, a3, a4);
}

uint64_t sub_10003FBD0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10007C5C4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100041810((uint64_t (*)(void))type metadata accessor for ClimateZone, (uint64_t *)&unk_1000E5DF0, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      goto LABEL_7;
    }
    sub_10003CE78(v17, a3 & 1, (uint64_t (*)(void))type metadata accessor for ClimateZone, (uint64_t *)&unk_1000E5DF0, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    unint64_t v24 = sub_10007C5C4(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100040440(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21 + *(void *)(*(void *)(type metadata accessor for ClimateZone() - 8) + 72) * v14;

  return sub_1000439A4(a1, v22);
}

uint64_t sub_10003FE18(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10007C4F0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100041430();
      goto LABEL_7;
    }
    sub_10003C944(v17, a3 & 1);
    unint64_t v28 = sub_10007C4F0(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100040530(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = sub_100006730(&qword_1000E5040);
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_100040020(char a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10007C94C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100041B7C();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(unsigned char *)(v16[7] + v10) = a1 & 1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_10003D358(result, a3 & 1);
  uint64_t result = sub_10007C94C(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100040154(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_1000437B4(a3, a4[7] + 8 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100040214(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1000402CC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100040384(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_100040440(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for ClimateZone();
  uint64_t result = sub_10004393C(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100040530(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_100006730(&qword_1000E5040);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

void *sub_100040628()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730(&qword_1000E5DB8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v23 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v24 = v6 + 64;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 8 * v16;
    sub_10000D070(*(void *)(v6 + 56) + v18, (uint64_t)v27, &qword_1000E5DB0);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = (void *)sub_1000437B4((uint64_t)v27, *(void *)(v8 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_1000408D8()
{
  return sub_100041D28((uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey, &qword_1000E5D88);
}

void *sub_1000408F8()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730(&qword_1000E5D78);
  uint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *uint64_t v22 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100040B88()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730(&qword_1000E5E68);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100040E20(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - v6;
  sub_100006730(a2);
  uint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v28 = v8 + 64;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  uint64_t v31 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000410B8()
{
  uint64_t v1 = v0;
  sub_100006730(&qword_1000E5D28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    char v23 = *(unsigned char *)(v17 + 16);
    *(void *)uint64_t v22 = *(void *)v17;
    *(void *)(v22 + 8) = v19;
    *(unsigned char *)(v22 + 16) = v23;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    sub_100043628(v18, v19, v23);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10004127C()
{
  uint64_t v1 = v0;
  sub_100006730((uint64_t *)&unk_1000E5D30);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100041430()
{
  uint64_t v42 = sub_100006730(&qword_1000E5040);
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730(&qword_1000E5DA0);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v31 = v46;
    uint64_t v30 = v32;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  uint64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v45;
  uint64_t v14 = v44;
  uint64_t v37 = v45 + 16;
  uint64_t v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      unint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v9;
      unint64_t v20 = v19 | (v9 << 6);
      uint64_t v21 = v43;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    int64_t v47 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    unint64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    unint64_t v24 = *(void *)(v21 + 56) + v23;
    unint64_t v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000417DC()
{
  return sub_100041810((uint64_t (*)(void))type metadata accessor for ClimateDefrost, &qword_1000E5DE8, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
}

void *sub_100041810(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v44 = a3;
  uint64_t v5 = a1(0);
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v42 = (char *)&v35 - v6;
  uint64_t v41 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730(a2);
  uint64_t v35 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v46 = v10;
  if (!v11)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v46;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v12 = v10;
  id result = (void *)(v10 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v9 || (unint64_t)result >= v9 + 64 + 8 * v14)
  {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v14);
    uint64_t v12 = v46;
  }
  uint64_t v36 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v12 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v45 = v9;
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v39 = v7 + 16;
  int64_t v37 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v38 = v7 + 32;
  unint64_t v20 = v40;
  uint64_t v19 = v41;
  uint64_t v21 = (uint64_t)v42;
  for (i = v46; ; id result = (void *)sub_10004393C(v21, *(void *)(i + 56) + v29, v28))
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v15 << 6);
      uint64_t v25 = v45;
      goto LABEL_9;
    }
    int64_t v30 = v15 + 1;
    uint64_t v25 = v45;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v37) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v30);
    ++v15;
    if (!v31)
    {
      int64_t v15 = v30 + 1;
      if (v30 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v36 + 8 * v15);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    unint64_t v18 = (v31 - 1) & v31;
    unint64_t v24 = __clz(__rbit64(v31)) + (v15 << 6);
LABEL_9:
    unint64_t v26 = *(void *)(v7 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v20, *(void *)(v25 + 48) + v26, v19);
    uint64_t v27 = *(void *)(v25 + 56);
    int64_t v28 = v44;
    unint64_t v29 = *(void *)(v43 + 72) * v24;
    sub_1000438D4(v27 + v29, v21, v44);
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(i + 48) + v26, v20, v19);
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v46;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v36 + 8 * v32);
  if (v31)
  {
    int64_t v15 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v15 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v15 >= v37) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v15);
    ++v32;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100041B7C()
{
  uint64_t v1 = v0;
  sub_100006730(&qword_1000E5D50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100041D08()
{
  return sub_100041D28((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1000E5D48);
}

id sub_100041D28(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v26 - v6;
  sub_100006730(a2);
  uint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  id result = (id)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    unint64_t v22 = *(void **)(*(void *)(v8 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = v22;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t (*sub_100041FC0(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_100042B48(v4);
  v4[12] = sub_100042504(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000420E0;
}

uint64_t (*sub_1000420E4(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_100042B84(v4);
  v4[12] = sub_1000426A0(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000420E0;
}

uint64_t (*sub_100042204(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_100042B84(v4);
  v4[12] = sub_100042848(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000420E0;
}

void sub_100042324(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*sub_1000423BC(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t a1)
{
  uint64_t v8 = malloc(0x68uLL);
  *a1 = v8;
  v8[96] = a4;
  *((void *)v8 + 8) = a2;
  *((void *)v8 + 9) = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100043628(a2, a3, a4);
  *((void *)v8 + 10) = sub_100042B84(v8);
  *((void *)v8 + 11) = sub_10004299C((void *)v8 + 4, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  return sub_10004247C;
}

void sub_10004247C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  uint64_t v4 = *(void *)(*(void *)a1 + 64);
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  char v5 = *(unsigned char *)(*(void *)a1 + 96);
  (*(void (**)(void))(*(void *)a1 + 88))();
  sub_100010840(v4, v3, v5);
  v2(v1, 0);

  free(v1);
}

void (*sub_100042504(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_10007C4F0(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_100042650;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100040E20((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1000E5DC0);
      goto LABEL_7;
    }
    sub_10003ACB8(v14, a3 & 1);
    unint64_t v18 = sub_10007C4F0(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  id result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100042650(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100042BB4(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_1000426A0(void *a1, uint64_t a2, char a3))()
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_10007C5C4(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1000427F4;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100040E20((uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey, &qword_1000E5D80);
      goto LABEL_7;
    }
    sub_10003BD6C(v14, a3 & 1, &qword_1000E5D80);
    unint64_t v18 = sub_10007C5C4(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for CAUVehicleLayoutKey();
  id result = (uint64_t (*)())KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000427F8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100042D44(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_100042848(void *a1, uint64_t a2, char a3))()
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_10007C5C4(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1000427F4;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100040E20((uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey, &qword_1000E5D70);
      goto LABEL_7;
    }
    sub_10003BD6C(v14, a3 & 1, &qword_1000E5D70);
    unint64_t v18 = sub_10007C5C4(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for CAUVehicleLayoutKey();
  id result = (uint64_t (*)())KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*sub_10004299C(void *a1, uint64_t a2, uint64_t a3, char a4, char a5))(uint64_t **a1)
{
  uint64_t v6 = v5;
  uint64_t v12 = malloc(0x30uLL);
  *a1 = v12;
  v12[2] = a3;
  _OWORD v12[3] = v5;
  *((unsigned char *)v12 + 40) = a4;
  v12[1] = a2;
  uint64_t v13 = *v5;
  unint64_t v15 = sub_10007C74C(a2, a3, a4);
  *((unsigned char *)v12 + 41) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[4] = v15;
      if (v19)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*(void *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *uint64_t v12 = v21;
        return sub_100042AF4;
      }
LABEL_11:
      uint64_t v21 = 0;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_1000410B8();
      goto LABEL_7;
    }
    sub_10003C5B0(v18, a5 & 1);
    unint64_t v22 = sub_10007C74C(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      unint64_t v15 = v22;
      v12[4] = v22;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  id result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100042AF4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100042ED4(*a1, *((unsigned char *)*a1 + 41), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], *((unsigned char *)*a1 + 40));
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_100042B48(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_100042B78;
}

uint64_t sub_100042B78(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*sub_100042B84(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_100043FC8;
}

uint64_t sub_100042BB4(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  __n128 v12 = __chkstk_darwin(v10);
  char v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  if (v15)
  {
    uint64_t v16 = (void *)*a3;
    if (a2)
    {
      *(void *)(v16[7] + 8 * a4) = v15;
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v11 + 16))(v14, a5, v12);
      sub_100040384(a4, (uint64_t)v14, v15, v16, (uint64_t (*)(void))&type metadata accessor for UUID);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10003DD90(a4, *a3, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_100042D44(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CAUVehicleLayoutKey();
  __n128 v12 = __chkstk_darwin(v10);
  char v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  if (v15)
  {
    uint64_t v16 = (void *)*a3;
    if (a2)
    {
      *(void *)(v16[7] + 8 * a4) = v15;
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v11 + 16))(v14, a5, v12);
      sub_100040384(a4, (uint64_t)v14, v15, v16, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10003DD90(a4, *a3, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey, &qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey, (uint64_t)&protocol conformance descriptor for CAUVehicleLayoutKey);
  }
  return swift_bridgeObjectRetain();
}

uint64_t *sub_100042ED4(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = *result;
  if (*result)
  {
    uint64_t v10 = (void *)*a3;
    if (a2)
    {
      *(void *)(v10[7] + 8 * a4) = v9;
    }
    else
    {
      v10[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v11 = v10[6] + 24 * a4;
      *(void *)uint64_t v11 = a5;
      *(void *)(v11 + 8) = a6;
      *(unsigned char *)(v11 + 16) = a7;
      *(void *)(v10[7] + 8 * a4) = v9;
      uint64_t v12 = v10[2];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13)
      {
        __break(1u);
        return result;
      }
      v10[2] = v14;
      sub_100043628(a5, a6, a7);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10003E368(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

uint64_t sub_100042FC0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_100043070(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100006730(&qword_1000E5D58);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = *(void *)(a1 + 32);
  long long v22 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t result = sub_10007C484(v5);
  long long v8 = v22;
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v20 = (id)v8;
    id v21 = v1;
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  uint64_t v10 = a1 + 64;
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v4[6] + 8 * result) = v5;
    uint64_t v11 = v4[7] + 24 * result;
    *(_OWORD *)uint64_t v11 = v8;
    *(void *)(v11 + 16) = v6;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v4[2] = v14;
    unint64_t v1 = (void *)*((void *)&v8 + 1);
    if (!--v2) {
      goto LABEL_8;
    }
    uint64_t v15 = v10 + 32;
    Swift::UInt v5 = *(void *)v10;
    long long v23 = *(_OWORD *)(v10 + 8);
    uint64_t v16 = *(void *)(v10 + 24);
    id v17 = (id)v8;
    id v18 = v1;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10007C484(v5);
    uint64_t v10 = v15;
    uint64_t v6 = v16;
    long long v8 = v23;
    if (v19) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void sub_1000431C4(uint64_t a1, void *a2)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    id v18 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v16 = v18;
    sub_100038110(&v18, a2);
    if (v2)
    {
      swift_release();

      return;
    }

    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v9) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    if (!v14)
    {
      int64_t v15 = v10 + 1;
      if (v10 + 1 >= v9) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v9) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 3;
      if (v10 + 3 >= v9) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v15);
      if (v14)
      {
LABEL_14:
        int64_t v10 = v15;
        goto LABEL_15;
      }
      int64_t v17 = v10 + 4;
      if (v10 + 4 >= v9)
      {
LABEL_26:
        swift_release();
        return;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v17);
      v10 += 4;
      if (!v14) {
        break;
      }
    }
LABEL_15:
    unint64_t v8 = (v14 - 1) & v14;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v9) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v17;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
}

void sub_100043360(uint64_t a1, void *a2)
{
  uint64_t v19 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v20 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v7 >= v20) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v19 + 8 * v7);
    if (!v12) {
      break;
    }
LABEL_20:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_21:
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    uint64_t v15 = qword_1000E46D8;
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = qword_1000EA798;
    swift_bridgeObjectRetain();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v18 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Updating view controllers for %{public}ld delegates", v18, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    sub_1000431C4(v14, v8);
    swift_bridgeObjectRelease_n();
  }
  int64_t v13 = v7 + 1;
  if (v7 + 1 >= v20) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v13);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v13 = v7 + 2;
  if (v7 + 2 >= v20) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v13);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v13 = v7 + 3;
  if (v7 + 3 >= v20) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v13);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v13 = v7 + 4;
  if (v7 + 4 >= v20)
  {
LABEL_29:
    swift_release();
    return;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v13);
  if (v12)
  {
LABEL_19:
    int64_t v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v20) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v19 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100043628(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10004363C()
{
  unint64_t result = qword_1000E5D00;
  if (!qword_1000E5D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5D00);
  }
  return result;
}

unint64_t sub_1000436A0()
{
  unint64_t result = qword_1000E5D18;
  if (!qword_1000E5D18)
  {
    sub_10000A4DC((uint64_t *)&unk_1000E5D08);
    sub_10004388C(&qword_1000E5D20, (void (*)(uint64_t))&type metadata accessor for CAUPhysicalControlBarsLayout);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5D18);
  }
  return result;
}

uint64_t sub_10004374C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E5DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000437B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E5DB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043834()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10004386C()
{
}

uint64_t sub_100043874(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100043884()
{
  return swift_release();
}

uint64_t sub_10004388C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000438D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004393C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000439A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043A0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_100043A44(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v4 - 8);
  uint64_t v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v38 = (char *)&v37 - v10;
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  unint64_t v11 = qword_1000EA798;
  id v12 = a1;
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v11, v13);
  id v40 = v12;
  if (v14)
  {
    int64_t v37 = v8;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    os_log_type_t v17 = a1;
    if (a1)
    {
      id v18 = v40;
      id v41 = v40;
      id v19 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      id v41 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v18 = v40;
    }
    *uint64_t v16 = v17;

    a1 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "didUpdateCurrentCar %{public}@", v15, 0xCu);
    sub_100006730(&qword_1000E4F30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    id v8 = v37;
  }
  else
  {
  }
  uint64_t v20 = *(void *)&v2[OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager];
  uint64_t v21 = OBJC_IVAR____TtC7Climate22ClimateSignpostManager_car;
  long long v22 = *(void **)(v20 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_car);
  *(void *)(v20 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_car) = 0;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v23 = v41;
  if (v41)
  {
    id v24 = [v41 positionManager];

    if (v24)
    {
      [v24 unregisterObserver:v2];
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  id v25 = v41;
  if (v41)
  {
    [v41 unregisterObserver:v2];
  }
  uint64_t v26 = type metadata accessor for ClimateZone();
  uint64_t v27 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v38, 1, 1, v26);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000D070(v27, (uint64_t)v8, (uint64_t *)&unk_1000E5530);
  uint64_t v28 = v2;
  static Published.subscript.setter();
  sub_10000A404(v27, (uint64_t *)&unk_1000E5530);
  uint64_t v29 = type metadata accessor for ClimateSystemManager();
  uint64_t v30 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v39, 1, 1, v29);
  sub_1000352F8(v30);
  sub_10002BB50();
  swift_getKeyPath();
  swift_getKeyPath();
  id v41 = a1;
  id v31 = v40;
  int64_t v32 = v28;
  static Published.subscript.setter();
  uint64_t v33 = *(void **)(v20 + v21);
  *(void *)(v20 + v21) = a1;
  id v34 = v31;

  if (a1)
  {
    [v34 registerObserver:v32];
    id v35 = [v34 positionManager];
    if (v35)
    {
      uint64_t v36 = v35;
      [v35 registerObserver:v32];
    }
  }
  sub_100038890(0xD000000000000022, 0x80000001000B6F30);
}

_OWORD *sub_100043FB4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100043FD0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate31ClimateAutoControlServiceButton_autoClimateControl);
  unsigned int v2 = [v1 level];
  unsigned int v3 = [v1 levelRestricted];
  unsigned int v4 = [v1 levelInvalid];
  unsigned __int8 v5 = [v1 levelDisabled];
  if (v2)
  {
    if (v3)
    {
      uint64_t v6 = 5;
      if (v4) {
        uint64_t v6 = 13;
      }
      if ((v5 & 1) == 0) {
        return v6;
      }
      return v6 | 0x10;
    }
    uint64_t v6 = 9;
    if (!v4) {
      uint64_t v6 = 1;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else if (v3)
  {
    uint64_t v6 = 4;
    if (v4) {
      uint64_t v6 = 12;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else
  {
    uint64_t v6 = 8;
    if (!v4) {
      uint64_t v6 = 0;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  return v6;
}

char *sub_1000441B8(void *a1)
{
  unsigned int v3 = v1;
  unsigned int v4 = [a1 level];
  id v5 = [a1 levelRange];
  sub_100031A38(0x6C6C69662E6E6166, 0xE800000000000000, 1330926913, 0xE400000000000000, v4, v5, 5.0);
  uint64_t v7 = v6;

  *(void *)&v3[OBJC_IVAR____TtC7Climate26ClimateAutoModeLevelButton_progressView] = v7;
  *(void *)&v3[OBJC_IVAR____TtC7Climate31ClimateAutoControlServiceButton_autoClimateControl] = a1;
  v20.receiver = v3;
  v20.super_class = (Class)type metadata accessor for ClimateAutoControlServiceButton();
  id v8 = a1;
  uint64_t v9 = [super init];
  uint64_t v10 = *(void (**)(void))((swift_isaMask & *v9) + 0x220);
  unint64_t v11 = v9;
  v10();
  id v12 = v11;
  [v8 registerObserver:v12];

  os_log_type_t v13 = v12;
  sub_1000444D0();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v8;
  uint64_t v16 = (uint64_t *)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v17 = *v16;
  *uint64_t v16 = (uint64_t)sub_100044AC0;
  v16[1] = v15;
  id v18 = v8;
  sub_100005690(v17);
  sub_10004478C();

  return v13;
}

void sub_1000443D0(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    unsigned int v6 = [a3 level] + 1;
    if ((v6 >> 8))
    {
      __break(1u);
    }
    else
    {
      id v7 = [a3 levelRange];
      unsigned int v8 = [v7 maximumValue];

      if (v8 < v6)
      {
        id v9 = [a3 levelRange];
        LOBYTE(v6) = [v9 minimumValue];
      }
      [a3 setLevel:v6];
      sub_10004478C();
    }
  }
}

void sub_1000444D0()
{
  uint64_t v1 = *(char **)&v0[OBJC_IVAR____TtC7Climate26ClimateAutoModeLevelButton_progressView];
  unsigned int v2 = *(unsigned char **)&v1[OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView];
  char v3 = v2[OBJC_IVAR____TtC7Climate13ClimateButton_textOnTopOfSymbol];
  v2[OBJC_IVAR____TtC7Climate13ClimateButton_textOnTopOfSymbol] = 1;
  if ((v3 & 1) == 0) {
    [v2 setNeedsLayout];
  }
  *(void *)&v2[OBJC_IVAR____TtC7Climate13ClimateButton_spaceBetweenSymbolAndTitle] = 0xC000000000000000;
  [v2 setNeedsLayout];
  [v0 addSubview:v1];
  unsigned int v4 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000B20F0;
  id v6 = [v1 leadingAnchor];
  id v7 = [v0 leadingAnchor];
  id v8 = [v6 constraintEqualToAnchor:v7];

  *(void *)(v5 + 32) = v8;
  id v9 = [v1 trailingAnchor];
  id v10 = [v0 trailingAnchor];
  id v11 = [v9 constraintEqualToAnchor:v10];

  *(void *)(v5 + 40) = v11;
  id v12 = [v1 topAnchor];
  id v13 = [v0 topAnchor];
  id v14 = [v12 constraintEqualToAnchor:v13];

  *(void *)(v5 + 48) = v14;
  id v15 = [v1 bottomAnchor];
  id v16 = [v0 bottomAnchor];
  id v17 = [v15 constraintEqualToAnchor:v16];

  *(void *)(v5 + 56) = v17;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:isa];
}

id sub_10004478C()
{
  uint64_t v1 = v0;
  unsigned int v2 = *(void **)&v0[OBJC_IVAR____TtC7Climate26ClimateAutoModeLevelButton_progressView];
  if (sub_100043FD0())
  {
    if (qword_1000E4680 != -1) {
      swift_once();
    }
    id v3 = (id)qword_1000EA6F8;
  }
  else
  {
    id v3 = [self labelColor];
    if (qword_1000E4680 != -1) {
      swift_once();
    }
  }
  id v4 = [(id)qword_1000EA6F8 colorWithAlphaComponent:0.25];
  uint64_t v5 = qword_1000EA6F8;
  id v6 = *(void (**)(id, id, uint64_t, void *))((swift_isaMask & *v2) + 0xD0);
  id v7 = (id)qword_1000EA6F8;
  v6(v3, v4, v5, &_swiftEmptyDictionarySingleton);
  sub_10009F8A4();
  [v1 setEnabled:(unint64_t)sub_100043FD0() < 8];
  sub_10008896C();

  return sub_100088B54();
}

void sub_1000449D0()
{
}

id sub_1000449E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateAutoModeLevelButton();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateAutoModeLevelButton()
{
  return self;
}

uint64_t sub_100044A48()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044A80()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100044AC0(uint64_t a1)
{
  sub_1000443D0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

char *sub_100044AC8()
{
  uint64_t v0 = (char *)sub_100015F7C(1, 0x4036000000000000, 0);
  uint64_t v1 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v3 = *(void *)v1;
  uint64_t v2 = *((void *)v1 + 1);
  *(_OWORD *)uint64_t v1 = xmmword_1000B30B0;
  id v4 = v0;
  if (!v2
    || (v3 == 0x6B72616D78 ? (BOOL v5 = v2 == 0xE500000000000000) : (BOOL v5 = 0),
        !v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  id v6 = self;
  id v7 = v4;
  uint64_t result = (char *)[v6 _preferredFontForTextStyle:UIFontTextStyleFootnote weight:UIFontWeightSemibold];
  if (result)
  {
    id v9 = result;
    id v10 = [self configurationWithFont:result scale:1];

    id v11 = ClimateButton.imageSymbolConfiguration.getter();
    id v12 = *(void **)&v7[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
    *(void *)&v7[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v10;
    id v13 = v10;

    id v14 = ClimateButton.imageSymbolConfiguration.getter();
    sub_100007310(0, (unint64_t *)&unk_1000E7700);
    LOBYTE(v12) = static NSObject.== infix(_:_:)();

    if ((v12 & 1) == 0) {
      ClimateButton.updateClimateConfiguration()();
    }

    id v15 = &v7[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v16 = *(void **)&v7[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v17 = *(void **)&v7[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
    uint64_t v18 = *(void *)&v7[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
    id v19 = self;
    id v20 = v16;
    id v21 = v17;
    swift_bridgeObjectRetain();
    id v22 = [v19 clearColor];
    id v23 = [v19 labelColor];
    id v24 = v23;
    if (v22)
    {
      if (v23)
      {
LABEL_13:

        id v25 = *(void **)v15;
        uint64_t v26 = (void *)*((void *)v15 + 1);
        uint64_t v27 = *((void *)v15 + 2);
        *(void *)id v15 = v22;
        *((void *)v15 + 1) = v24;
        *((void *)v15 + 2) = v18;
        swift_bridgeObjectRetain_n();
        sub_100007310(0, (unint64_t *)&qword_1000E4A20);
        id v28 = v22;
        id v29 = v24;
        id v30 = v28;
        id v31 = v29;
        if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
        {
          sub_10007C1D0(v18, v27);
          char v33 = v32;
          swift_bridgeObjectRelease();

          if (v33) {
            goto LABEL_19;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ClimateButton.refreshColorConfig()();
LABEL_19:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    else
    {
      id v22 = v20;
      if (v24) {
        goto LABEL_13;
      }
    }
    id v24 = v21;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_100044E44()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCloseButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateCloseButton()
{
  return self;
}

char *sub_100044E9C(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  id v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    BOOL v5 = a1;
    id v6 = a2[1];
    id v7 = a2[2];
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v7;
    uint64_t v8 = *(int *)(a3 + 28);
    id v9 = &a1[v8];
    id v10 = (char *)a2 + v8;
    id v11 = (int *)type metadata accessor for ClimateZone();
    uint64_t v12 = *((void *)v11 - 1);
    id v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    id v14 = v4;
    id v15 = v6;
    id v16 = v7;
    uint64_t v59 = v12;
    if (v13(v10, 1, v11))
    {
      uint64_t v17 = sub_100006730((uint64_t *)&unk_1000E5530);
      memcpy(v9, v10, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v18 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v9, v10, v18);
      *(void *)&v9[v11[5]] = *(void *)&v10[v11[5]];
      *(void *)&v9[v11[6]] = *(void *)&v10[v11[6]];
      uint64_t v19 = v11[7];
      id v20 = *(void **)&v10[v19];
      *(void *)&v9[v19] = v20;
      uint64_t v21 = v11[8];
      uint64_t v54 = *(void **)&v10[v21];
      *(void *)&v9[v21] = v54;
      *(void *)&v9[v11[9]] = *(void *)&v10[v11[9]];
      uint64_t v22 = v11[10];
      uint64_t v55 = *(void **)&v10[v22];
      *(void *)&v9[v22] = v55;
      uint64_t v23 = v11[11];
      uint64_t v56 = *(void **)&v10[v23];
      *(void *)&v9[v23] = v56;
      uint64_t v24 = v11[12];
      id v25 = *(void **)&v10[v24];
      *(void *)&v9[v24] = v25;
      uint64_t v26 = *(void (**)(char *, void, uint64_t, int *))(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v27 = v20;
      id v28 = v54;
      swift_bridgeObjectRetain();
      id v29 = v55;
      id v30 = v56;
      id v31 = v25;
      v26(v9, 0, 1, v11);
    }
    uint64_t v32 = a3;
    uint64_t v33 = *(int *)(a3 + 32);
    id v34 = &v5[v33];
    id v35 = (char *)a2 + v33;
    if (v13((char *)a2 + v33, 1, v11))
    {
      uint64_t v36 = sub_100006730((uint64_t *)&unk_1000E5530);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v37 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v34, v35, v37);
      *(void *)&v34[v11[5]] = *(void *)&v35[v11[5]];
      *(void *)&v34[v11[6]] = *(void *)&v35[v11[6]];
      uint64_t v38 = v11[7];
      uint64_t v39 = *(void **)&v35[v38];
      *(void *)&v34[v38] = v39;
      uint64_t v40 = v11[8];
      id v41 = *(void **)&v35[v40];
      *(void *)&v34[v40] = v41;
      *(void *)&v34[v11[9]] = *(void *)&v35[v11[9]];
      uint64_t v42 = v11[10];
      uint64_t v57 = *(void **)&v35[v42];
      *(void *)&v34[v42] = v57;
      uint64_t v43 = v11[11];
      uint64_t v44 = *(void **)&v35[v43];
      *(void *)&v34[v43] = v44;
      uint64_t v45 = v11[12];
      uint64_t v46 = *(void **)&v35[v45];
      *(void *)&v34[v45] = v46;
      uint64_t v58 = v44;
      id v60 = *(void (**)(char *, void, uint64_t, int *))(v59 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v47 = v39;
      id v48 = v41;
      uint64_t v32 = a3;
      swift_bridgeObjectRetain();
      id v49 = v57;
      id v50 = v58;
      id v51 = v46;
      v60(v34, 0, 1, v11);
    }
    uint64_t v52 = *(int *)(v32 + 40);
    *(void *)&v5[*(int *)(v32 + 36)] = *(char **)((char *)a2 + *(int *)(v32 + 36));
    *(void *)&v5[v52] = *(char **)((char *)a2 + v52);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t sub_100045274(id *a1, uint64_t a2)
{
  id v4 = (char *)a1 + *(int *)(a2 + 28);
  BOOL v5 = (int *)type metadata accessor for ClimateZone();
  id v6 = *(unsigned int (**)(char *, uint64_t, int *))(*((void *)v5 - 1) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (char *)a1 + *(int *)(a2 + 32);
  if (!v6(v8, 1, v5))
  {
    uint64_t v9 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100045484(void *a1, uint64_t a2, int *a3)
{
  BOOL v5 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v6 = *(void **)(a2 + 16);
  a1[2] = v6;
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  id v10 = (int *)type metadata accessor for ClimateZone();
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  id v13 = v5;
  id v14 = v4;
  id v15 = v6;
  uint64_t v58 = v11;
  if (v12(v9, 1, v10))
  {
    uint64_t v16 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v8, v9, v17);
    *(void *)&v8[v10[5]] = *(void *)&v9[v10[5]];
    *(void *)&v8[v10[6]] = *(void *)&v9[v10[6]];
    uint64_t v18 = v10[7];
    uint64_t v19 = *(void **)&v9[v18];
    *(void *)&v8[v18] = v19;
    uint64_t v20 = v10[8];
    uint64_t v21 = *(void **)&v9[v20];
    *(void *)&v8[v20] = v21;
    *(void *)&v8[v10[9]] = *(void *)&v9[v10[9]];
    uint64_t v22 = v10[10];
    uint64_t v54 = *(void **)&v9[v22];
    *(void *)&v8[v22] = v54;
    uint64_t v23 = v10[11];
    uint64_t v55 = *(void **)&v9[v23];
    *(void *)&v8[v23] = v55;
    uint64_t v24 = v10[12];
    uint64_t v56 = *(void **)&v9[v24];
    *(void *)&v8[v24] = v56;
    id v25 = *(void (**)(char *, void, uint64_t, int *))(v11 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v26 = v19;
    id v27 = v21;
    swift_bridgeObjectRetain();
    id v28 = v54;
    id v29 = v55;
    id v30 = v56;
    v25(v8, 0, 1, v10);
  }
  uint64_t v31 = a2;
  uint64_t v32 = a3[8];
  uint64_t v33 = (char *)a1 + v32;
  id v34 = (char *)(a2 + v32);
  if (v12((char *)(a2 + v32), 1, v10))
  {
    uint64_t v35 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v36 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v33, v34, v36);
    *(void *)&v33[v10[5]] = *(void *)&v34[v10[5]];
    *(void *)&v33[v10[6]] = *(void *)&v34[v10[6]];
    uint64_t v37 = v10[7];
    uint64_t v38 = *(void **)&v34[v37];
    *(void *)&v33[v37] = v38;
    uint64_t v39 = v10[8];
    uint64_t v40 = *(void **)&v34[v39];
    *(void *)&v33[v39] = v40;
    *(void *)&v33[v10[9]] = *(void *)&v34[v10[9]];
    uint64_t v41 = v10[10];
    uint64_t v42 = *(void **)&v34[v41];
    *(void *)&v33[v41] = v42;
    uint64_t v43 = v10[11];
    uint64_t v44 = *(void **)&v34[v43];
    *(void *)&v33[v43] = v44;
    uint64_t v45 = v10[12];
    uint64_t v46 = *(void **)&v34[v45];
    *(void *)&v33[v45] = v46;
    uint64_t v57 = v44;
    uint64_t v59 = *(void (**)(char *, void, uint64_t, int *))(v58 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v47 = v38;
    uint64_t v31 = a2;
    id v48 = v40;
    swift_bridgeObjectRetain();
    id v49 = v42;
    id v50 = v57;
    id v51 = v46;
    v59(v33, 0, 1, v10);
  }
  uint64_t v52 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)(v31 + a3[9]);
  *(void *)((char *)a1 + v52) = *(void *)(v31 + v52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004580C(uint64_t a1, void **a2, int *a3)
{
  id v4 = a2;
  id v6 = *a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *a2;
  id v8 = v6;

  uint64_t v9 = v4[1];
  id v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = v4[2];
  id v13 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  id v14 = v12;

  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)v4 + v15;
  uint64_t v18 = (int *)type metadata accessor for ClimateZone();
  uint64_t v19 = *((void *)v18 - 1);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, int *))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      uint64_t v23 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v16, v17, v23);
      *(void *)&v16[v18[5]] = *(void *)&v17[v18[5]];
      *(void *)&v16[v18[6]] = *(void *)&v17[v18[6]];
      uint64_t v24 = v18[7];
      id v110 = v4;
      uint64_t v25 = v19;
      id v26 = *(void **)&v17[v24];
      *(void *)&v16[v24] = v26;
      uint64_t v27 = v18[8];
      uint64_t v104 = *(void **)&v17[v27];
      *(void *)&v16[v27] = v104;
      *(void *)&v16[v18[9]] = *(void *)&v17[v18[9]];
      uint64_t v28 = v18[10];
      uint64_t v105 = *(void **)&v17[v28];
      *(void *)&v16[v28] = v105;
      uint64_t v29 = v18[11];
      uint64_t v106 = *(void **)&v17[v29];
      *(void *)&v16[v29] = v106;
      uint64_t v30 = v18[12];
      uint64_t v31 = *(void **)&v17[v30];
      *(void *)&v16[v30] = v31;
      uint64_t v107 = v31;
      uint64_t v109 = *(void (**)(char *, void, uint64_t, int *))(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v32 = v26;
      uint64_t v19 = v25;
      id v4 = v110;
      id v33 = v104;
      swift_bridgeObjectRetain();
      id v34 = v105;
      id v35 = v106;
      id v36 = v107;
      v109(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_10004A170((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClimateZone);
LABEL_6:
    uint64_t v37 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v16, v17, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v62 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 24))(v16, v17, v62);
  *(void *)&v16[v18[5]] = *(void *)&v17[v18[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v16[v18[6]] = *(void *)&v17[v18[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v18[7];
  id v64 = *(void **)&v17[v63];
  os_log_type_t v65 = *(void **)&v16[v63];
  *(void *)&v16[v63] = v64;
  id v66 = v64;

  uint64_t v67 = v18[8];
  id v68 = *(void **)&v16[v67];
  id v69 = *(void **)&v17[v67];
  *(void *)&v16[v67] = v69;
  id v70 = v69;

  *(void *)&v16[v18[9]] = *(void *)&v17[v18[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v71 = v18[10];
  id v72 = *(void **)&v16[v71];
  id v73 = *(void **)&v17[v71];
  *(void *)&v16[v71] = v73;
  id v74 = v73;

  uint64_t v75 = v18[11];
  uint64_t v76 = *(void **)&v16[v75];
  unint64_t v77 = *(void **)&v17[v75];
  *(void *)&v16[v75] = v77;
  id v78 = v77;

  uint64_t v79 = v18[12];
  unsigned __int8 v80 = *(void **)&v16[v79];
  int v81 = *(void **)&v17[v79];
  *(void *)&v16[v79] = v81;
  id v82 = v81;

LABEL_7:
  uint64_t v38 = a3[8];
  uint64_t v39 = (char *)(a1 + v38);
  uint64_t v40 = (char *)v4 + v38;
  int v41 = v20((char *)(a1 + v38), 1, v18);
  int v42 = v20(v40, 1, v18);
  if (!v41)
  {
    if (!v42)
    {
      uint64_t v83 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 24))(v39, v40, v83);
      *(void *)&v39[v18[5]] = *(void *)&v40[v18[5]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v39[v18[6]] = *(void *)&v40[v18[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v84 = v18[7];
      uint64_t v85 = *(void **)&v40[v84];
      uint64_t v86 = *(void **)&v39[v84];
      *(void *)&v39[v84] = v85;
      id v87 = v85;

      uint64_t v88 = v18[8];
      uint64_t v89 = *(void **)&v39[v88];
      uint64_t v90 = *(void **)&v40[v88];
      *(void *)&v39[v88] = v90;
      id v91 = v90;

      *(void *)&v39[v18[9]] = *(void *)&v40[v18[9]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v92 = v18[10];
      uint64_t v93 = *(void **)&v39[v92];
      id v94 = *(void **)&v40[v92];
      *(void *)&v39[v92] = v94;
      id v95 = v94;

      uint64_t v96 = v18[11];
      unint64_t v97 = *(void **)&v39[v96];
      uint64_t v98 = *(void **)&v40[v96];
      *(void *)&v39[v96] = v98;
      id v99 = v98;

      uint64_t v100 = v18[12];
      id v101 = *(void **)&v39[v100];
      id v102 = *(void **)&v40[v100];
      *(void *)&v39[v100] = v102;
      id v103 = v102;

      goto LABEL_13;
    }
    sub_10004A170((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    goto LABEL_12;
  }
  if (v42)
  {
LABEL_12:
    uint64_t v60 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v39, v40, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v43 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v39, v40, v43);
  *(void *)&v39[v18[5]] = *(void *)&v40[v18[5]];
  *(void *)&v39[v18[6]] = *(void *)&v40[v18[6]];
  uint64_t v44 = v18[7];
  uint64_t v45 = v19;
  uint64_t v46 = *(void **)&v40[v44];
  *(void *)&v39[v44] = v46;
  uint64_t v47 = v18[8];
  id v48 = *(void **)&v40[v47];
  *(void *)&v39[v47] = v48;
  *(void *)&v39[v18[9]] = *(void *)&v40[v18[9]];
  uint64_t v49 = v18[10];
  id v50 = *(void **)&v40[v49];
  *(void *)&v39[v49] = v50;
  uint64_t v51 = v18[11];
  uint64_t v52 = *(void **)&v40[v51];
  *(void *)&v39[v51] = v52;
  uint64_t v53 = v18[12];
  uint64_t v54 = *(void **)&v40[v53];
  *(void *)&v39[v53] = v54;
  uint64_t v108 = v52;
  uint64_t v111 = *(void (**)(char *, void, uint64_t, int *))(v45 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v55 = v46;
  id v56 = v48;
  swift_bridgeObjectRetain();
  id v57 = v50;
  id v58 = v108;
  id v59 = v54;
  v111(v39, 0, 1, v18);
LABEL_13:
  *(void *)(a1 + a3[9]) = *(void **)((char *)v4 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void **)((char *)v4 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100045E7C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)(a1 + v6);
  id v8 = (char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ClimateZone();
  uint64_t v10 = *((void *)v9 - 1);
  id v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
    *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
    *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
    *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
    *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
    *(void *)&v7[v9[9]] = *(void *)&v8[v9[9]];
    *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
    *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
    *(void *)&v7[v9[12]] = *(void *)&v8[v9[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  if (v11((char *)(a2 + v14), 1, v9))
  {
    uint64_t v17 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
    *(void *)&v15[v9[5]] = *(void *)&v16[v9[5]];
    *(void *)&v15[v9[6]] = *(void *)&v16[v9[6]];
    *(void *)&v15[v9[7]] = *(void *)&v16[v9[7]];
    *(void *)&v15[v9[8]] = *(void *)&v16[v9[8]];
    *(void *)&v15[v9[9]] = *(void *)&v16[v9[9]];
    *(void *)&v15[v9[10]] = *(void *)&v16[v9[10]];
    *(void *)&v15[v9[11]] = *(void *)&v16[v9[11]];
    *(void *)&v15[v9[12]] = *(void *)&v16[v9[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v10 + 56))(v15, 0, 1, v9);
  }
  uint64_t v19 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  return a1;
}

uint64_t sub_100046158(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = a2[2];

  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)(a1 + v9);
  id v11 = (char *)a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for ClimateZone();
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      uint64_t v17 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v10, v11, v17);
      *(void *)&v10[v12[5]] = *(void *)&v11[v12[5]];
      *(void *)&v10[v12[6]] = *(void *)&v11[v12[6]];
      *(void *)&v10[v12[7]] = *(void *)&v11[v12[7]];
      *(void *)&v10[v12[8]] = *(void *)&v11[v12[8]];
      *(void *)&v10[v12[9]] = *(void *)&v11[v12[9]];
      *(void *)&v10[v12[10]] = *(void *)&v11[v12[10]];
      *(void *)&v10[v12[11]] = *(void *)&v11[v12[11]];
      *(void *)&v10[v12[12]] = *(void *)&v11[v12[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_10004A170((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
LABEL_6:
    uint64_t v18 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v27 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 40))(v10, v11, v27);
  *(void *)&v10[v12[5]] = *(void *)&v11[v12[5]];
  swift_bridgeObjectRelease();
  *(void *)&v10[v12[6]] = *(void *)&v11[v12[6]];
  swift_bridgeObjectRelease();
  uint64_t v28 = v12[7];
  uint64_t v29 = *(void **)&v10[v28];
  *(void *)&v10[v28] = *(void *)&v11[v28];

  uint64_t v30 = v12[8];
  uint64_t v31 = *(void **)&v10[v30];
  *(void *)&v10[v30] = *(void *)&v11[v30];

  *(void *)&v10[v12[9]] = *(void *)&v11[v12[9]];
  swift_bridgeObjectRelease();
  uint64_t v32 = v12[10];
  id v33 = *(void **)&v10[v32];
  *(void *)&v10[v32] = *(void *)&v11[v32];

  uint64_t v34 = v12[11];
  id v35 = *(void **)&v10[v34];
  *(void *)&v10[v34] = *(void *)&v11[v34];

  uint64_t v36 = v12[12];
  uint64_t v37 = *(void **)&v10[v36];
  *(void *)&v10[v36] = *(void *)&v11[v36];

LABEL_7:
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)(a1 + v19);
  int v21 = (char *)a2 + v19;
  int v22 = v14((char *)(a1 + v19), 1, v12);
  int v23 = v14(v21, 1, v12);
  if (!v22)
  {
    if (!v23)
    {
      uint64_t v38 = type metadata accessor for CAUVehicleLayoutKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 40))(v20, v21, v38);
      *(void *)&v20[v12[5]] = *(void *)&v21[v12[5]];
      swift_bridgeObjectRelease();
      *(void *)&v20[v12[6]] = *(void *)&v21[v12[6]];
      swift_bridgeObjectRelease();
      uint64_t v39 = v12[7];
      uint64_t v40 = *(void **)&v20[v39];
      *(void *)&v20[v39] = *(void *)&v21[v39];

      uint64_t v41 = v12[8];
      int v42 = *(void **)&v20[v41];
      *(void *)&v20[v41] = *(void *)&v21[v41];

      *(void *)&v20[v12[9]] = *(void *)&v21[v12[9]];
      swift_bridgeObjectRelease();
      uint64_t v43 = v12[10];
      uint64_t v44 = *(void **)&v20[v43];
      *(void *)&v20[v43] = *(void *)&v21[v43];

      uint64_t v45 = v12[11];
      uint64_t v46 = *(void **)&v20[v45];
      *(void *)&v20[v45] = *(void *)&v21[v45];

      uint64_t v47 = v12[12];
      id v48 = *(void **)&v20[v47];
      *(void *)&v20[v47] = *(void *)&v21[v47];

      goto LABEL_13;
    }
    sub_10004A170((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_100006730((uint64_t *)&unk_1000E5530);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v24 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v20, v21, v24);
  *(void *)&v20[v12[5]] = *(void *)&v21[v12[5]];
  *(void *)&v20[v12[6]] = *(void *)&v21[v12[6]];
  *(void *)&v20[v12[7]] = *(void *)&v21[v12[7]];
  *(void *)&v20[v12[8]] = *(void *)&v21[v12[8]];
  *(void *)&v20[v12[9]] = *(void *)&v21[v12[9]];
  *(void *)&v20[v12[10]] = *(void *)&v21[v12[10]];
  *(void *)&v20[v12[11]] = *(void *)&v21[v12[11]];
  *(void *)&v20[v12[12]] = *(void *)&v21[v12[12]];
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v20, 0, 1, v12);
LABEL_13:
  *(void *)(a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000466A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000466BC);
}

uint64_t sub_1000466BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006730((uint64_t *)&unk_1000E5530);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    id v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100046770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100046784);
}

void *sub_100046784(void *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006730((uint64_t *)&unk_1000E5530);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ClimateSystemManager()
{
  uint64_t result = qword_1000E5FB0;
  if (!qword_1000E5FB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004687C()
{
  sub_10004692C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10004692C()
{
  if (!qword_1000E5FC0)
  {
    type metadata accessor for ClimateZone();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000E5FC0);
    }
  }
}

uint64_t sub_100046984()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClimateSystemManager();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - v9;
  sub_10002FB7C(v1 + *(int *)(v2 + 28), (uint64_t)&v16 - v9);
  uint64_t v11 = type metadata accessor for ClimateZone();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  int v13 = v12(v10, 1, v11);
  sub_10000A404((uint64_t)v10, (uint64_t *)&unk_1000E5530);
  sub_10004A234(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  if (v13 == 1)
  {
    sub_10002FB7C((uint64_t)&v4[*(int *)(v2 + 32)], (uint64_t)v7);
    sub_10004A170((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    BOOL v14 = v12(v7, 1, v11) != 1;
    sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E5530);
  }
  else
  {
    sub_10004A170((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    return 1;
  }
  return v14;
}

void sub_100046B8C()
{
  id v0 = [self sharedApplication];
  id v1 = [v0 delegate];

  if (v1)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    uint64_t v2 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    id v3 = [*(id *)&v2[OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus] currentSession];
    uint64_t v4 = v3;
    if (v3)
    {
      uint64_t v5 = (char *)[v3 configuration];

      [v5 rightHandDrive];
      uint64_t v2 = v5;
    }
  }
  else
  {
    __break(1u);
  }
}

double sub_100046C9C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v3 - 8);
  id v50 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v47 - v6;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v13 = (char *)&v47 - v12;
  uint64_t v14 = type metadata accessor for ClimateZone();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = __chkstk_darwin(v18);
  int v21 = (char *)&v47 - v20;
  uint64_t v51 = *(void (**)(char *, void, uint64_t, __n128))(v9 + 104);
  v51(v13, enum case for CAUVehicleLayoutKey.seat_front_left(_:), v8, v19);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v47 = v17;
  if (v22)
  {
    uint64_t v49 = v14;
    uint64_t v53 = v8;
    unint64_t v23 = sub_10007C5C4((uint64_t)v13);
    uint64_t v25 = v15;
    if (v24)
    {
      sub_10004A234(*(void *)(a1 + 56) + *(void *)(v15 + 72) * v23, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t v27 = v7;
      uint64_t v28 = 0;
    }
    else
    {
      id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t v27 = v7;
      uint64_t v28 = 1;
    }
    uint64_t v14 = v49;
    id v48 = v26;
    v26(v27, v28, 1, v49);
    uint64_t v8 = v53;
  }
  else
  {
    id v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v48(v7, 1, 1, v14);
    uint64_t v25 = v15;
  }
  uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  v29(v13, v8);
  uint64_t v53 = v25;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v30(v7, 1, v14) != 1)
  {
    sub_10004A29C((uint64_t)v7, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v40 = v54;
    v54[3] = v14;
    v40[4] = (uint64_t)&off_1000CBD78;
    uint64_t v41 = sub_10004A304(v40);
    uint64_t v42 = (uint64_t)v21;
    goto LABEL_13;
  }
  sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E5530);
  sub_100046B8C();
  if ((v31 & 1) == 0)
  {
    uint64_t v32 = (uint64_t)v52;
    ((void (*)(char *, void, uint64_t))v51)(v52, enum case for CAUVehicleLayoutKey.seat_front(_:), v8);
    if (*(void *)(a1 + 16))
    {
      uint64_t v33 = v8;
      uint64_t v34 = a1;
      unint64_t v35 = sub_10007C5C4(v32);
      uint64_t v36 = (uint64_t)v50;
      uint64_t v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48;
      if (v38)
      {
        sub_10004A234(*(void *)(v34 + 56) + *(void *)(v53 + 72) * v35, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for ClimateZone);
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = 1;
      }
      uint64_t v8 = v33;
      v37(v36, v39, 1, v14);
    }
    else
    {
      uint64_t v36 = (uint64_t)v50;
      v48(v50, 1, 1, v14);
    }
    v29((char *)v32, v8);
    if (v30((char *)v36, 1, v14) == 1)
    {
      sub_10000A404(v36, (uint64_t *)&unk_1000E5530);
      goto LABEL_19;
    }
    uint64_t v45 = (uint64_t)v47;
    sub_10004A29C(v36, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v46 = v54;
    v54[3] = v14;
    v46[4] = (uint64_t)&off_1000CBD78;
    uint64_t v41 = sub_10004A304(v46);
    uint64_t v42 = v45;
LABEL_13:
    sub_10004A29C(v42, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    return result;
  }
LABEL_19:
  uint64_t v44 = v54;
  v54[4] = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v44 = 0u;
  *((_OWORD *)v44 + 1) = 0u;
  return result;
}

double sub_10004717C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v3 - 8);
  id v50 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v47 - v6;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v13 = (char *)&v47 - v12;
  uint64_t v14 = type metadata accessor for ClimateZone();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = __chkstk_darwin(v18);
  int v21 = (char *)&v47 - v20;
  uint64_t v51 = *(void (**)(char *, void, uint64_t, __n128))(v9 + 104);
  v51(v13, enum case for CAUVehicleLayoutKey.seat_front_right(_:), v8, v19);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v47 = v17;
  if (v22)
  {
    uint64_t v49 = v14;
    uint64_t v53 = v8;
    unint64_t v23 = sub_10007C5C4((uint64_t)v13);
    uint64_t v25 = v15;
    if (v24)
    {
      sub_10004A234(*(void *)(a1 + 56) + *(void *)(v15 + 72) * v23, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t v27 = v7;
      uint64_t v28 = 0;
    }
    else
    {
      id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t v27 = v7;
      uint64_t v28 = 1;
    }
    uint64_t v14 = v49;
    id v48 = v26;
    v26(v27, v28, 1, v49);
    uint64_t v8 = v53;
  }
  else
  {
    id v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v48(v7, 1, 1, v14);
    uint64_t v25 = v15;
  }
  uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  v29(v13, v8);
  uint64_t v53 = v25;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v30(v7, 1, v14) != 1)
  {
    sub_10004A29C((uint64_t)v7, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v40 = v54;
    v54[3] = v14;
    v40[4] = (uint64_t)&off_1000CBD78;
    uint64_t v41 = sub_10004A304(v40);
    uint64_t v42 = (uint64_t)v21;
    goto LABEL_13;
  }
  sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E5530);
  sub_100046B8C();
  if (v31)
  {
    uint64_t v32 = (uint64_t)v52;
    ((void (*)(char *, void, uint64_t))v51)(v52, enum case for CAUVehicleLayoutKey.seat_front(_:), v8);
    if (*(void *)(a1 + 16))
    {
      uint64_t v33 = v8;
      uint64_t v34 = a1;
      unint64_t v35 = sub_10007C5C4(v32);
      uint64_t v36 = (uint64_t)v50;
      uint64_t v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48;
      if (v38)
      {
        sub_10004A234(*(void *)(v34 + 56) + *(void *)(v53 + 72) * v35, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for ClimateZone);
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = 1;
      }
      uint64_t v8 = v33;
      v37(v36, v39, 1, v14);
    }
    else
    {
      uint64_t v36 = (uint64_t)v50;
      v48(v50, 1, 1, v14);
    }
    v29((char *)v32, v8);
    if (v30((char *)v36, 1, v14) == 1)
    {
      sub_10000A404(v36, (uint64_t *)&unk_1000E5530);
      goto LABEL_19;
    }
    uint64_t v45 = (uint64_t)v47;
    sub_10004A29C(v36, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v46 = v54;
    v54[3] = v14;
    v46[4] = (uint64_t)&off_1000CBD78;
    uint64_t v41 = sub_10004A304(v46);
    uint64_t v42 = v45;
LABEL_13:
    sub_10004A29C(v42, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    return result;
  }
LABEL_19:
  uint64_t v44 = v54;
  v54[4] = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v44 = 0u;
  *((_OWORD *)v44 + 1) = 0u;
  return result;
}

uint64_t sub_10004765C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v104 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v4 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  unint64_t v110 = (unint64_t)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v87 - v7;
  uint64_t v9 = sub_100006730(&qword_1000E6010);
  __chkstk_darwin(v9 - 8);
  id v102 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for ClimateDefrost();
  uint64_t v103 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v107 = (uint64_t)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v106 = (uint64_t)&v87 - v13;
  uint64_t v14 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v14 - 8);
  uint64_t v96 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v95 = (char *)&v87 - v17;
  uint64_t v18 = type metadata accessor for ClimateSystemManager();
  uint64_t v97 = *(void *)(v18 - 8);
  *(void *)&double v19 = __chkstk_darwin(v18).n128_u64[0];
  int v21 = (id *)((char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v22 = [a1 climate:v19];
  if (!v22) {
    goto LABEL_8;
  }
  unint64_t v23 = v22;
  id v24 = [a1 positionManager];
  if (!v24)
  {

LABEL_8:
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
    return v33(a2, 1, 1, v18);
  }
  uint64_t v25 = v24;
  id v101 = v8;
  uint64_t v93 = (int *)v18;
  uint64_t v89 = a2;
  void *v21 = a1;
  v21[1] = v23;
  v21[2] = v24;
  uint64_t v113 = &_swiftEmptyDictionarySingleton;
  id v88 = a1;
  id v26 = v23;
  id v27 = v25;
  uint64_t v28 = sub_100032E48();
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v92 = v21;
  id v87 = v26;
  if (v29)
  {
    uint64_t v109 = (char *)((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v30 = &v109[v28];
    uint64_t v31 = *(void *)(v4 + 72);
    do
    {
      sub_100048450(v30, (uint64_t)v27, v26, (uint64_t)&v113);
      v30 += v31;
      --v29;
    }
    while (v29);
    uint64_t v94 = 0;
    swift_bridgeObjectRelease();
    unint64_t v32 = (unint64_t)v109;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v94 = 0;
    uint64_t v31 = *(void *)(v4 + 72);
    unint64_t v32 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  }
  sub_100006730((uint64_t *)&unk_1000E59D0);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1000B30E0;
  unint64_t v36 = v35 + v32;
  char v38 = *(void (**)(unint64_t, void, uint64_t))(v4 + 104);
  uint64_t v37 = v4 + 104;
  uint64_t v39 = v104;
  v38(v35 + v32, enum case for CAUVehicleLayoutKey.windshield_front(_:), v104);
  v38(v35 + v32 + v31, enum case for CAUVehicleLayoutKey.windshield_rear(_:), v39);
  v38(v35 + v32 + 2 * v31, enum case for CAUVehicleLayoutKey.mirror_leftSide(_:), v39);
  v38(v35 + v32 + 3 * v31, enum case for CAUVehicleLayoutKey.mirror_rightSide(_:), v39);
  v38(v35 + v32 + 4 * v31, enum case for CAUVehicleLayoutKey.mirror_sides(_:), v39);
  uint64_t v40 = (void (**)(uint64_t, unint64_t, uint64_t))(v37 - 88);
  uint64_t v41 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  uint64_t v98 = (void (**)(uint64_t, uint64_t))(v37 - 96);
  uint64_t v42 = v39;
  uint64_t v91 = v35;
  swift_bridgeObjectRetain();
  uint64_t v109 = (char *)&_swiftEmptyDictionarySingleton;
  uint64_t v43 = 5;
  unint64_t v90 = v35 + v32;
  uint64_t v44 = (uint64_t)v101;
  uint64_t v45 = (uint64_t)v102;
  id v105 = v27;
  id v99 = v41;
  uint64_t v100 = v40;
  do
  {
    unint64_t v47 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)();
    id v48 = *v40;
    (*v40)(v44, v36, v42);
    sub_10009E6F4(v47, v44, v45);
    if ((*v41)(v45, 1, v108) == 1)
    {
      sub_10000A404(v45, &qword_1000E6010);
      uint64_t v46 = v105;
    }
    else
    {
      uint64_t v49 = v31;
      uint64_t v50 = v106;
      sub_10004A29C(v45, v106, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
      uint64_t v51 = v110;
      v48(v110, v36, v42);
      sub_10004A234(v50, v107, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
      uint64_t v52 = (uint64_t)v109;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v111[0] = v52;
      unint64_t v55 = sub_10007C5C4(v51);
      uint64_t v56 = *(void *)(v52 + 16);
      BOOL v57 = (v54 & 1) == 0;
      uint64_t v58 = v56 + v57;
      if (__OFADD__(v56, v57))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      char v59 = v54;
      if (*(void *)(v52 + 24) >= v58)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1000417DC();
        }
      }
      else
      {
        sub_10003CE44(v58, isUniquelyReferenced_nonNull_native);
        unint64_t v60 = sub_10007C5C4(v110);
        if ((v59 & 1) != (v61 & 1)) {
          goto LABEL_38;
        }
        unint64_t v55 = v60;
      }
      uint64_t v31 = v49;
      uint64_t v62 = (void *)v111[0];
      uint64_t v41 = v99;
      if (v59)
      {
        uint64_t v109 = (char *)v111[0];
        sub_10004A1D0(v107, *(void *)(v111[0] + 56) + *(void *)(v103 + 72) * v55);
        uint64_t v42 = v104;
        uint64_t v40 = v100;
      }
      else
      {
        *(void *)(v111[0] + 8 * (v55 >> 6) + 64) |= 1 << v55;
        uint64_t v42 = v104;
        uint64_t v40 = v100;
        v48(v62[6] + v55 * v31, v110, v104);
        sub_10004A29C(v107, v62[7] + *(void *)(v103 + 72) * v55, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
        uint64_t v63 = v62[2];
        BOOL v64 = __OFADD__(v63, 1);
        uint64_t v65 = v63 + 1;
        if (v64) {
          goto LABEL_36;
        }
        v62[2] = v65;
        uint64_t v109 = (char *)v111[0];
      }
      swift_bridgeObjectRelease();
      (*v98)(v110, v42);
      sub_10004A170(v106, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
      uint64_t v46 = v105;
      uint64_t v44 = (uint64_t)v101;
      uint64_t v45 = (uint64_t)v102;
    }
    v36 += v31;
    --v43;
  }
  while (v43);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v66 = (uint64_t)v113;
  uint64_t v67 = v93;
  uint64_t v68 = (uint64_t)v92;
  *(void *)((char *)v92 + v93[9]) = v113;
  *(void *)(v68 + v67[10]) = v109;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_100046C9C(v66, v111);
  swift_bridgeObjectRelease();
  if (v112)
  {
    sub_100006730(&qword_1000E6020);
    uint64_t v69 = type metadata accessor for ClimateZone();
    uint64_t v70 = (uint64_t)v95;
    int v71 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v70, v71 ^ 1u, 1, v69);
  }
  else
  {
    sub_10000A404((uint64_t)v111, &qword_1000E6018);
    uint64_t v72 = type metadata accessor for ClimateZone();
    uint64_t v70 = (uint64_t)v95;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v95, 1, 1, v72);
  }
  uint64_t v73 = (uint64_t)v96;
  sub_10004A108(v70, v68 + v67[7]);
  uint64_t v74 = swift_bridgeObjectRetain();
  sub_10004717C(v74, v111);
  swift_bridgeObjectRelease();
  if (v112)
  {
    sub_100006730(&qword_1000E6020);
    uint64_t v75 = type metadata accessor for ClimateZone();
    int v76 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v73, v76 ^ 1u, 1, v75);
  }
  else
  {
    sub_10000A404((uint64_t)v111, &qword_1000E6018);
    uint64_t v77 = type metadata accessor for ClimateZone();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v73, 1, 1, v77);
  }
  sub_10004A108(v73, v68 + v67[8]);
  uint64_t v78 = swift_bridgeObjectRetain();
  uint64_t v79 = sub_10004989C(v78, (uint64_t (*)(void))type metadata accessor for ClimateZone, (uint64_t (*)(void))type metadata accessor for ClimateZone, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  swift_bridgeObjectRelease();
  v111[0] = v79;
  uint64_t v80 = swift_bridgeObjectRetain();
  unint64_t v81 = sub_10004989C(v80, (uint64_t (*)(void))type metadata accessor for ClimateDefrost, (uint64_t (*)(void))type metadata accessor for ClimateDefrost, (uint64_t (*)(void))type metadata accessor for ClimateDefrost);
  swift_bridgeObjectRelease();
  sub_100097A58(v81);
  id v82 = [self sharedApplication];
  id v83 = [v82 delegate];

  if (v83)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    uint64_t v84 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    id v85 = *(id *)&v84[OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager];

    sub_100093DB0(v111[0]);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = v89;
    sub_10004A29C(v68, v89, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(v97 + 56))(v86, 0, 1, v67);
  }
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000482A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - v7;
  sub_100046B8C();
  char v10 = v9;
  uint64_t v11 = type metadata accessor for ClimateSystemManager();
  uint64_t v12 = v11;
  if (v10)
  {
    uint64_t v13 = v1 + *(int *)(v11 + 32);
    sub_10002FB7C(v13, (uint64_t)v8);
    uint64_t v14 = type metadata accessor for ClimateZone();
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v8, 1, v14);
    sub_10000A404((uint64_t)v8, (uint64_t *)&unk_1000E5530);
    if (v15 == 1)
    {
      uint64_t v16 = 7;
LABEL_6:
      uint64_t v13 = v1 + *(int *)(v12 + 4 * v16);
    }
  }
  else
  {
    uint64_t v13 = v1 + *(int *)(v11 + 28);
    sub_10002FB7C(v13, (uint64_t)v5);
    uint64_t v17 = type metadata accessor for ClimateZone();
    int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v5, 1, v17);
    sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E5530);
    if (v18 == 1)
    {
      uint64_t v16 = 8;
      goto LABEL_6;
    }
  }
  return sub_10002FB7C(v13, a1);
}

void sub_100048450(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v119 = a4;
  uint64_t v7 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v7 - 8);
  uint64_t v118 = (uint64_t)v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v121 = (uint64_t)v110 - v10;
  uint64_t v11 = type metadata accessor for ClimateZone();
  uint64_t v122 = *(void *)(v11 - 8);
  uint64_t v123 = v11;
  __chkstk_darwin(v11);
  uint64_t v117 = (uint64_t)v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v13 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v131 = (char *)v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v133 = (char *)v110 - v16;
  __chkstk_darwin(v17);
  double v19 = (char *)v110 - v18;
  __chkstk_darwin(v20);
  id v22 = (char *)v110 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v110 - v24;
  __chkstk_darwin(v26);
  id v126 = (char *)v110 - v27;
  uint64_t v28 = a1;
  uint64_t v140 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)();
  id v29 = [a3 steeringWheelHeatingCooling];
  uint64_t v124 = v4;
  uint64_t v125 = v13;
  if (!v29) {
    goto LABEL_40;
  }
  id v30 = v29;
  uint64_t v31 = CAFPositionManager.layoutKeys.getter();
  sub_100046B8C();
  uint64_t v116 = a3;
  uint64_t v115 = v30;
  if ((v32 & 1) == 0)
  {
    uint64_t v40 = *(void (**)(char *, void, uint64_t))(v13 + 104);
    unint64_t v41 = (v13 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    uint64_t v34 = v134;
    uint64_t v42 = v31;
    goto LABEL_16;
  }
  uint64_t v33 = *(void (**)(void))(v13 + 104);
  unsigned int v111 = enum case for CAUVehicleLayoutKey.seat_front_right(_:);
  uint64_t v34 = v134;
  id v127 = (void (*)(char *, void, uint64_t))v33;
  unint64_t v128 = v13 + 104;
  v33(v25);
  uint64_t v129 = *(void *)(v31 + 16);
  if (!v129)
  {
    uint64_t v43 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v42 = v31;
    goto LABEL_15;
  }
  unint64_t v132 = v19;
  id v130 = v28;
  unint64_t v35 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  id v120 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  v120(v22, v31 + v35, v34);
  uint64_t v36 = sub_10004A368((unint64_t *)&qword_1000E4A30, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
  swift_bridgeObjectRetain();
  uint64_t v37 = v34;
  uint64_t v114 = v36;
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = (char *)(v13 + 8);
  unint64_t v135 = *(void (**)(char *, uint64_t))(v13 + 8);
  v135(v22, v37);
  if (v38)
  {
    swift_bridgeObjectRelease();
LABEL_31:
    uint64_t v68 = v134;
    v135(v25, v134);
    uint64_t v66 = v126;
    v127(v126, v111, v68);
    uint64_t v28 = v130;
    a3 = v116;
    goto LABEL_32;
  }
  uint64_t v112 = v31;
  if (v129 == 1)
  {
    uint64_t v42 = v112;
    swift_bridgeObjectRelease();
    uint64_t v28 = v130;
    uint64_t v34 = v134;
    uint64_t v43 = v135;
    double v19 = v132;
    goto LABEL_15;
  }
  v110[1] = (unint64_t)v39 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v113 = *(void *)(v13 + 72);
  unint64_t v44 = v112 + v113 + v35;
  unint64_t v45 = 1;
  uint64_t v34 = v134;
  do
  {
    v120(v22, v44, v34);
    unint64_t v46 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      goto LABEL_58;
    }
    char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    v135(v22, v34);
    if (v47)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = v125;
      goto LABEL_31;
    }
    ++v45;
    v44 += v113;
    uint64_t v34 = v134;
    uint64_t v13 = v125;
  }
  while (v46 != v129);
  uint64_t v42 = v112;
  swift_bridgeObjectRelease();
  uint64_t v28 = v130;
  double v19 = v132;
  uint64_t v43 = v135;
LABEL_15:
  unint64_t v48 = v128 & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v43(v25, v34);
  unint64_t v41 = v48;
  a3 = v116;
  uint64_t v40 = v127;
LABEL_16:
  int v49 = enum case for CAUVehicleLayoutKey.seat_front_left(_:);
  id v127 = v40;
  unint64_t v128 = v41;
  v40(v19, enum case for CAUVehicleLayoutKey.seat_front_left(_:), v34);
  uint64_t v129 = *(void *)(v42 + 16);
  if (!v129)
  {
    uint64_t v58 = *(void (**)(char *, uint64_t))(v13 + 8);
    goto LABEL_27;
  }
  LODWORD(v114) = v49;
  uint64_t v50 = v42;
  unint64_t v51 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v52 = v133;
  id v120 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  v120(v133, v50 + v51, v34);
  unint64_t v45 = sub_10004A368((unint64_t *)&qword_1000E4A30, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
  swift_bridgeObjectRetain();
  unint64_t v132 = v19;
  uint64_t v53 = v13;
  uint64_t v54 = v34;
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v57 = *(void (**)(char *, uint64_t))(v53 + 8);
  uint64_t v56 = v53 + 8;
  unint64_t v135 = v57;
  v57(v52, v54);
  if (v55)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    a3 = v116;
    uint64_t v67 = v134;
    v135(v132, v134);
    uint64_t v66 = v126;
    v127(v126, v114, v67);
    uint64_t v13 = v125;
    goto LABEL_32;
  }
  uint64_t v112 = v50;
  a3 = v116;
  if (v129 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = v134;
    uint64_t v58 = v135;
    uint64_t v13 = v125;
    double v19 = v132;
    goto LABEL_27;
  }
  uint64_t v113 = v56 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  id v130 = v28;
  uint64_t v59 = *(void *)(v125 + 72);
  unint64_t v60 = v112 + v59 + v51;
  uint64_t v61 = 1;
  uint64_t v34 = v134;
  while (2)
  {
    uint64_t v39 = v133;
    v120(v133, v60, v34);
    uint64_t v62 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      swift_bridgeObjectRetain();
      uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v75) {
        goto LABEL_60;
      }
LABEL_43:
      if (v75 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v76 = 0;
      unint64_t v77 = v45 & 0xC000000000000001;
      LODWORD(v128) = enum case for CAUVehicleLayoutKey.seat_front(_:);
      id v126 = (char *)(v125 + 8);
      id v127 = (void (*)(char *, void, uint64_t))(v125 + 104);
      uint64_t v78 = &selRef_startAnimating;
      uint64_t v129 = v75;
      id v130 = v39;
      while (1)
      {
        if (v77) {
          uint64_t v80 = (void (*)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v80 = (void (*)(char *, uint64_t))*(id *)(v45 + 8 * v76 + 32);
        }
        unint64_t v81 = v78[119];
        unint64_t v135 = v80;
        id v82 = [v80 v81];
        if (v82)
        {
          id v83 = v82;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          v84._uint64_t countAndFlagsBits = CAUVehicleLayoutKey.rawValue.getter();
          Swift::Bool v85 = String.hasPrefix(_:)(v84);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v86 = v135;
          if (v85) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v87 = CAUVehicleLayoutKey.rawValue.getter();
          unint64_t v132 = v88;
          uint64_t v133 = (char *)v87;
          uint64_t v89 = v131;
          unint64_t v90 = v78;
          unint64_t v91 = v77;
          uint64_t v92 = v134;
          (*(void (**)(char *, void, uint64_t))v127)(v131, v128, v134);
          unint64_t v93 = v45;
          uint64_t v94 = CAUVehicleLayoutKey.rawValue.getter();
          uint64_t v96 = v95;
          uint64_t v97 = v92;
          unint64_t v77 = v91;
          uint64_t v78 = v90;
          (*(void (**)(char *, uint64_t))v126)(v89, v97);
          v98._uint64_t countAndFlagsBits = v94;
          unint64_t v45 = v93;
          v98._object = v96;
          LOBYTE(v89) = String.hasPrefix(_:)(v98);
          uint64_t v75 = v129;
          uint64_t v39 = v130;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v86 = v135;
          if ((v89 & 1) == 0)
          {
LABEL_45:
            uint64_t v79 = v86;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        ++v76;

        if (v75 == v76) {
          goto LABEL_60;
        }
      }
    }
    char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
    BOOL v64 = v39;
    char v65 = v63;
    v135(v64, v34);
    if (v65)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = v130;
      goto LABEL_29;
    }
    ++v61;
    v60 += v59;
    uint64_t v34 = v134;
    if (v62 != v129) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = v130;
  uint64_t v13 = v125;
  a3 = v116;
  double v19 = v132;
  uint64_t v58 = v135;
LABEL_27:
  unint64_t v135 = v58;
  v58(v19, v34);
  uint64_t v66 = v126;
  v127(v126, enum case for CAUVehicleLayoutKey.seat_front(_:), v34);
LABEL_32:
  swift_bridgeObjectRelease();
  sub_10004A368((unint64_t *)&qword_1000E6030, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v138 == v136 && v139 == v137)
  {
    swift_bridgeObjectRelease_n();
    v135(v66, v134);
    uint64_t v69 = v115;
    goto LABEL_36;
  }
  uint64_t v70 = v66;
  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v135(v70, v134);
  uint64_t v69 = v115;
  if (v71)
  {
LABEL_36:
    id v72 = v69;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }

LABEL_40:
  id v73 = [a3 climateControlsLockeds];
  uint64_t v39 = v28;
  if (!v73) {
    goto LABEL_61;
  }
  uint64_t v74 = v73;
  sub_100007310(0, &qword_1000E6028);
  unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v45 >> 62) {
    goto LABEL_59;
  }
  uint64_t v75 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v75) {
    goto LABEL_43;
  }
LABEL_60:
  swift_bridgeObjectRelease();
  uint64_t v13 = v125;
LABEL_61:
  unint64_t v99 = v140;
  uint64_t v100 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  id v101 = v131;
  uint64_t v102 = v134;
  v100(v131, v39, v134);
  uint64_t v103 = v121;
  sub_10005B5D4(v99, v101, v121);
  uint64_t v104 = v122;
  id v105 = v39;
  uint64_t v106 = v123;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v103, 1, v123) == 1)
  {
    sub_10000A404(v103, (uint64_t *)&unk_1000E5530);
  }
  else
  {
    uint64_t v107 = v103;
    uint64_t v108 = v117;
    sub_10004A29C(v107, v117, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    v100(v101, v105, v102);
    uint64_t v109 = v118;
    sub_10004A234(v108, v118, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v109, 0, 1, v106);
    sub_1000654FC(v109, (uint64_t)v101);
    sub_10004A170(v108, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  }
}

void sub_1000491B0(void *a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v56 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  BOOL v64 = (char *)&v49 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10004A3B0();
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v52 = v7;
  uint64_t v66 = v2;
  uint64_t v16 = sub_100007310(0, &qword_1000E4B48);
  char v65 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  char v63 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  uint64_t v51 = v3;
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  uint64_t v50 = v11;
  uint64_t v59 = (void (**)(uint64_t, uint64_t))(v11 + 8);
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  uint64_t v18 = &selRef_startAnimating;
  uint64_t v19 = v14;
  uint64_t v54 = v14;
  char v55 = a1;
  uint64_t v61 = v15;
  uint64_t v62 = v10;
  uint64_t v53 = v13;
  uint64_t v60 = v16;
  while (1)
  {
    if (*(void *)(v19 + 8 * v17 + 32) == v16)
    {
      self;
      id v69 = (id)swift_dynamicCastObjCClass();
      if (v69) {
        break;
      }
    }
LABEL_15:
    if (!objc_msgSend(a1, v18[163], swift_getObjCClassFromMetadata()) && v15 != ++v17) {
      continue;
    }
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v20 = self;
  id v68 = a1;
  id v21 = [v20 sharedApplication];
  id v22 = [v21 delegate];

  if (v22)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    uint64_t v23 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    uint64_t v24 = (char *)*(id *)&v23[OBJC_IVAR____TtC7Climate18ClimateCoordinator_targetTemperatureTracker];

    id v25 = v69;
    id v26 = [v69 uniqueIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v27 = [v25 targetTemperature];
    sub_100007310(0, (unint64_t *)&qword_1000E4D10);
    uint64_t v28 = v64;
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v29 = (uint64_t)v28;
    uint64_t v30 = (uint64_t)v13;
    uint64_t v31 = v66;
    char v32 = *v65;
    (*v65)(v29, 0, 1, v66);
    id v67 = v24;
    uint64_t v33 = (uint64_t *)&v24[OBJC_IVAR____TtC7Climate31ClimateTargetTemperatureTracker_targetTemperatures];
    swift_beginAccess();
    if ((*v63)(v29, 1, v31) == 1)
    {
      BOOL v57 = v32;
      uint64_t v34 = (uint64_t)v52;
      sub_10000A404(v29, (uint64_t *)&unk_1000E4D00);
      swift_bridgeObjectRetain();
      unint64_t v35 = sub_10007C4F0(v30);
      char v37 = v36;
      swift_bridgeObjectRelease();
      char v38 = v59;
      if (v37)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v40 = *v33;
        uint64_t v70 = *v33;
        *uint64_t v33 = 0x8000000000000000;
        uint64_t v16 = v60;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100041430();
          uint64_t v40 = v70;
        }
        unint64_t v41 = *(void *)(v40 + 48) + *(void *)(v50 + 72) * v35;
        int v49 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
        uint64_t v42 = v62;
        v49(v41, v62);
        uint64_t v43 = v70;
        uint64_t v44 = v66;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v51 + 32))(v34, *(void *)(v70 + 56) + *(void *)(v51 + 72) * v35, v66);
        sub_10003EB04(v35, v43);
        *uint64_t v33 = v43;
        swift_bridgeObjectRelease();
        v57(v34, 0, 1, v44);
        unint64_t v45 = v49;
      }
      else
      {
        v57(v34, 1, 1, v66);
        unint64_t v45 = *v38;
        uint64_t v42 = v62;
        uint64_t v16 = v60;
      }
      uint64_t v13 = v53;
      v45((uint64_t)v53, v42);
      sub_10000A404(v34, (uint64_t *)&unk_1000E4D00);
      uint64_t v19 = v54;
      a1 = v55;
      uint64_t v15 = v61;
    }
    else
    {
      uint64_t v46 = (uint64_t)v56;
      (*v58)(v56, v29, v31);
      char v47 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v70 = *v33;
      *uint64_t v33 = 0x8000000000000000;
      sub_10003FE18(v46, v30, v47);
      *uint64_t v33 = v70;
      swift_bridgeObjectRelease();
      (*v59)(v30, v62);
      uint64_t v13 = (char *)v30;
      uint64_t v16 = v60;
      uint64_t v15 = v61;
    }
    uint64_t v18 = &selRef_startAnimating;
    swift_endAccess();
    unint64_t v48 = v67;
    [v69 registerObserver:v67];

    goto LABEL_15;
  }
  __break(1u);
}

id sub_10004984C(void *a1)
{
  return [a1 isKindOfClass:swift_getObjCClassFromMetadata()];
}

uint64_t sub_10004989C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v28 = a4;
  uint64_t v27 = a2(0);
  uint64_t v6 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v26) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v25 + 8 * v17);
        if (!v22)
        {
          int64_t v17 = v21 + 3;
          if (v21 + 3 >= v26) {
            goto LABEL_23;
          }
          unint64_t v22 = *(void *)(v25 + 8 * v17);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_5:
    sub_10004A234(*(void *)(a1 + 56) + *(void *)(v6 + 72) * v19, (uint64_t)v11, a3);
    sub_10004A29C((uint64_t)v11, (uint64_t)v8, a3);
    unint64_t v20 = *(void *)&v8[*(int *)(v27 + 24)];
    swift_bridgeObjectRetain();
    sub_10004A170((uint64_t)v8, v28);
    uint64_t result = sub_100097A58(v20);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v26)
  {
LABEL_23:
    swift_release();
    return (uint64_t)v29;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100049B3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v6 - 8);
  uint64_t v47 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(86);
  v15._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v15._object = (void *)0x80000001000B6FD0;
  String.append(_:)(v15);
  id v16 = [*v0 uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10004A368(&qword_1000E6008, (void (*)(uint64_t))&type metadata accessor for UUID);
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v18._uint64_t countAndFlagsBits = 0x3D73656E6F7A20;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  unint64_t v19 = (int *)type metadata accessor for ClimateSystemManager();
  uint64_t v49 = (*(void **)((char *)v1 + v19[9]))[2];
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x74736F7266656420;
  v21._object = (void *)0xEA00000000003D73;
  String.append(_:)(v21);
  uint64_t v49 = (*(void **)((char *)v1 + v19[10]))[2];
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0x6F72467466656C20;
  v23._object = (void *)0xEF3D656E6F5A746ELL;
  String.append(_:)(v23);
  uint64_t v24 = v19[7];
  unint64_t v48 = v1;
  sub_10002FB7C((uint64_t)v1 + v24, (uint64_t)v10);
  uint64_t v25 = type metadata accessor for ClimateZone();
  int64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48);
  if (v26(v10, 1, v25) == 1)
  {
    uint64_t v27 = v2;
    uint64_t v28 = v3;
    uint64_t v29 = v27;
    sub_10000A404((uint64_t)v10, (uint64_t *)&unk_1000E5530);
    uint64_t v30 = (void *)0xE400000000000000;
    uint64_t v31 = 1701736302;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v10, v2);
    sub_10004A170((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v31 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v30 = v32;
    uint64_t v33 = v2;
    uint64_t v28 = v3;
    uint64_t v34 = *(void (**)(char *))(v3 + 8);
    uint64_t v29 = v33;
    v34(v5);
  }
  v35._uint64_t countAndFlagsBits = v31;
  v35._object = v30;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._object = (void *)0x80000001000B6FF0;
  v36._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v36);
  uint64_t v37 = v19[8];
  uint64_t v38 = v47;
  sub_10002FB7C((uint64_t)v48 + v37, v47);
  if (v26((char *)v38, 1, v25) == 1)
  {
    sub_10000A404(v38, (uint64_t *)&unk_1000E5530);
    uint64_t v39 = (void *)0xE400000000000000;
    uint64_t v40 = 1701736302;
  }
  else
  {
    uint64_t v41 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v5, v38, v29);
    sub_10004A170(v38, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v40 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v39 = v42;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v29);
  }
  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v39;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 62;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  return v50;
}

uint64_t sub_10004A0A8()
{
  uint64_t v0 = sub_100006730(&qword_1000E6058);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_1000E4F10;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1000E6060;
  }

  return sub_100006730(v2);
}

uint64_t sub_10004A108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E5530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A170(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10004A1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateDefrost();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A234(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004A29C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_10004A304(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10004A368(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004A3B0()
{
  sub_10004A0A8();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000B30F0;
  *(void *)(v0 + 32) = sub_100007310(0, (unint64_t *)&qword_1000E5430);
  *(void *)(v0 + 40) = sub_100007310(0, (unint64_t *)&unk_1000E6130);
  *(void *)(v0 + 48) = sub_100007310(0, &qword_1000E6038);
  *(void *)(v0 + 56) = sub_100007310(0, &qword_1000E6028);
  *(void *)(v0 + 64) = sub_100007310(0, (unint64_t *)&unk_1000E7AA0);
  *(void *)(v0 + 72) = sub_100007310(0, &qword_1000E6040);
  *(void *)(v0 + 80) = sub_100007310(0, &qword_1000E6048);
  *(void *)(v0 + 88) = sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  *(void *)(v0 + 96) = sub_100007310(0, &qword_1000E4B48);
  *(void *)(v0 + 104) = sub_100007310(0, &qword_1000E65F0);
  *(void *)(v0 + 112) = sub_100007310(0, (unint64_t *)&unk_1000E6240);
  *(void *)(v0 + 120) = sub_100007310(0, &qword_1000E6050);
  return v0;
}

uint64_t getEnumTagSinglePayload for ClimateSlotType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClimateSlotType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004A6ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateSlotType()
{
  return &type metadata for ClimateSlotType;
}

BOOL sub_10004A6E4(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 8))() - 4) < 5u;
}

BOOL sub_10004A71C(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 8))() - 1) < 2u;
}

uint64_t sub_10004A754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  char v8 = v7(a2, a3);
  if (sub_10004A96C(v8) == 1953391990 && v9 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
  }
  type metadata accessor for ClimateGroupedVentsButton();
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    unint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC7Climate25ClimateGroupedVentsButton_ventButtons);
    if (v13 >> 62)
    {
      id v18 = v3;
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)(v14 - 1) > 1) {
      return 3;
    }
  }
LABEL_12:
  unsigned int v15 = (v7(a2, a3) - 1);
  uint64_t v16 = 2;
  if (a1) {
    uint64_t v16 = 3;
  }
  if (v15 <= 1) {
    return v16;
  }
  else {
    return 1;
  }
}

double sub_10004A8C0(uint64_t a1)
{
  return sub_10004A908(a1, (uint64_t)&off_1000CA080, (uint64_t)&off_1000CA0A8, (uint64_t)&off_1000CA0D0, &qword_1000EA688);
}

double sub_10004A8E4(uint64_t a1)
{
  return sub_10004A908(a1, (uint64_t)&off_1000CA0F8, (uint64_t)&off_1000CA120, (uint64_t)&off_1000CA148, &qword_1000EA690);
}

double sub_10004A908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_100006730(&qword_1000E6070);
  uint64_t v9 = swift_allocObject();
  *(void *)&double result = 3;
  *(_OWORD *)(v9 + 16) = xmmword_1000B3140;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3;
  *(void *)(v9 + 48) = a4;
  *a5 = v9;
  return result;
}

unint64_t sub_10004A96C(char a1)
{
  unint64_t result = 1953391990;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x70706574536E6166;
      break;
    case 3:
      unint64_t result = 0x65646F4D6F747561;
      break;
    case 4:
      unint64_t result = 0x7461654874616573;
      break;
    case 5:
      unint64_t result = 0x6E614674616573;
      break;
    case 6:
      unint64_t result = 0x7373614D74616573;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0x736C6F72746E6F63;
      break;
    case 9:
      unint64_t result = 0x6B6E694C70656564;
      break;
    case 10:
      unint64_t result = 0x6C75637269636572;
      break;
    case 11:
      unint64_t result = 0x434178616DLL;
      break;
    case 12:
      unint64_t result = 1668184435;
      break;
    case 13:
      unint64_t result = 0x74736F72666564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004AB34(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10004A96C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10004A96C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10004ABC0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004A96C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10004AC24()
{
  sub_10004A96C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004AC78()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004A96C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10004ACD8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004AD8C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10004AD08@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10004A96C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10004AD38()
{
  unint64_t result = qword_1000E6068;
  if (!qword_1000E6068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6068);
  }
  return result;
}

unint64_t sub_10004AD8C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000CA1D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t sub_10004ADD8()
{
  return 7;
}

uint64_t sub_10004ADE0()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin);
  unsigned int v2 = [v1 hvacOn];
  unsigned int v3 = [v1 hvacOnInvalid];
  uint64_t v4 = 9;
  if (!v3) {
    uint64_t v4 = 1;
  }
  uint64_t v5 = 8;
  if (!v3) {
    uint64_t v5 = 0;
  }
  if (v2) {
    return v4;
  }
  else {
    return v5;
  }
}

char *sub_10004AE4C(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin] = a1;
  v63.receiver = v1;
  v63.super_class = (Class)type metadata accessor for ClimateCabinServiceButton();
  id v3 = a1;
  uint64_t v4 = (char *)[super init];
  [v3 registerObserver:v4];

  uint64_t v5 = &v4[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *((void *)v5 + 1);
  *(_OWORD *)uint64_t v5 = xmmword_1000B3240;
  char v8 = v4;
  if (!v7
    || (v6 == 0x7265776F70 ? (BOOL v9 = v7 == 0xE500000000000000) : (BOOL v9 = 0),
        !v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v3;
  uint64_t v12 = (uint64_t *)&v8[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v13 = *v12;
  *uint64_t v12 = (uint64_t)sub_10004B650;
  v12[1] = v11;
  id v58 = v3;
  sub_100005690(v13);
  id v14 = [v8 titleLabel];
  if (v14)
  {
    unsigned int v15 = v14;
    if (qword_1000E46F8 != -1) {
      swift_once();
    }
    [v15 setFont:qword_1000EA820];
  }
  int v16 = v8[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v8[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v16 != 1)
  {
    Swift::String v17 = *(void **)&v8[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    id v18 = v8;
    [v17 removeFromSuperview];
    sub_100088B54();
  }
  uint64_t v19 = qword_1000E46D0;
  Swift::String v20 = v8;
  if (v19 != -1) {
    swift_once();
  }
  Swift::String v21 = (void *)qword_1000EA770;
  Swift::String v22 = *(void **)algn_1000EA778;
  uint64_t v23 = qword_1000EA780;
  uint64_t v24 = (void **)&v20[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  uint64_t v25 = *(void **)&v20[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  uint64_t v59 = *(void *)&v20[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
  uint64_t v61 = *(void **)&v20[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
  char *v24 = (void *)qword_1000EA770;
  v24[1] = v22;
  void v24[2] = (void *)v23;
  id v26 = v21;
  id v27 = v22;
  swift_bridgeObjectRetain_n();
  id v57 = v26;
  id v28 = v27;
  uint64_t v29 = *v24;
  uint64_t v30 = v24[1];
  uint64_t v31 = (uint64_t)v24[2];
  sub_1000056A0();
  id v32 = v29;
  id v33 = v30;
  swift_bridgeObjectRetain();
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_21;
  }
  sub_10007C1D0(v31, v59);
  char v35 = v34;
  swift_bridgeObjectRelease();

  if ((v35 & 1) == 0) {
LABEL_21:
  }
    (*(void (**)(void))((swift_isaMask & *(void *)v20) + 0x228))();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = qword_1000E46C8;
  uint64_t v37 = v20;
  if (v36 != -1) {
    swift_once();
  }
  uint64_t v38 = (void *)qword_1000EA758;
  uint64_t v39 = (void *)qword_1000EA760;
  uint64_t v40 = qword_1000EA768;
  uint64_t v41 = (void **)&v37[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
  uint64_t v42 = *(void **)&v37[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
  uint64_t v62 = *(void **)&v37[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
  uint64_t v43 = *(void *)&v37[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
  *uint64_t v41 = (void *)qword_1000EA758;
  v41[1] = v39;
  v41[2] = (void *)v40;
  id v44 = v38;
  id v45 = v39;
  swift_bridgeObjectRetain_n();
  id v60 = v44;
  id v46 = v45;
  uint64_t v47 = *v41;
  unint64_t v48 = v41[1];
  uint64_t v49 = (uint64_t)v41[2];
  id v50 = v47;
  id v51 = v48;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v49, v43);
    char v53 = v52;
    swift_bridgeObjectRelease();

    if (v53) {
      goto LABEL_30;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))((swift_isaMask & *(void *)v37) + 0x228))();
LABEL_30:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v54 = v37;
  sub_10009F8A4();
  char v55 = *(void **)&v54[OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin];
  [v55 hvacOn];
  [v54 setEnabled:[v55 hvacOnInvalid] ^ 1];
  sub_10008896C();
  sub_100088B54();

  return v54;
}

void sub_10004B454(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (char *)Strong;
    objc_msgSend(a3, "setHvacOn:", objc_msgSend(a3, "hvacOn") ^ 1);
    sub_10009F8A4();
    uint64_t v6 = *(void **)&v5[OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin];
    [v6 hvacOn];
    objc_msgSend(v5, "setEnabled:", objc_msgSend(v6, "hvacOnInvalid") ^ 1);
    sub_10008896C();
    sub_100088B54();
  }
}

id sub_10004B580()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateHVACButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateHVACButton()
{
  return self;
}

uint64_t sub_10004B5D8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004B610()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004B650(uint64_t a1)
{
  sub_10004B454(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_10004B658()
{
  sub_10009F8A4();
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin];
  [v1 hvacOn];
  [v0 setEnabled:[v1 hvacOnInvalid] ^ 1];
  sub_10008896C();

  return sub_100088B54();
}

uint64_t sub_10004B6D0()
{
  return CAFPositioned.layoutKey.getter();
}

void sub_10004B778()
{
}

id sub_10004B788()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateAutoControlServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateAutoControlServiceButton()
{
  return self;
}

char *sub_10004B8A0(void *a1)
{
  if ([a1 hasLevel])
  {
    id v2 = objc_allocWithZone((Class)type metadata accessor for ClimateAutoModeLevelButton());
    id v3 = sub_1000441B8(a1);
  }
  else
  {
    id v4 = objc_allocWithZone((Class)type metadata accessor for ClimateAutoModeIntensityButton());
    id v3 = sub_100072648(a1);
  }
  uint64_t v5 = v3;
  uint64_t v6 = self;
  uint64_t v7 = v5;
  id v8 = [v6 clearColor];
  id v9 = [v6 systemGreenColor];
  uint64_t v10 = &v7[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  uint64_t v11 = *(void **)&v7[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  uint64_t v12 = *(void **)&v7[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
  uint64_t v13 = *(void *)&v7[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
  *(void *)uint64_t v10 = v8;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 2) = &_swiftEmptyDictionarySingleton;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v14 = v8;
  id v15 = v9;
  swift_bridgeObjectRetain();
  id v16 = v14;
  id v17 = v15;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v13);
  char v19 = v18;
  swift_bridgeObjectRelease();

  if ((v19 & 1) == 0) {
LABEL_9:
  }
    sub_10008896C();

  swift_bridgeObjectRelease();
  Swift::String v20 = &v7[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle];
  swift_beginAccess();
  char v21 = *v20;
  char *v20 = 1;
  if ((v21 & 1) == 0)
  {
    Swift::String v22 = v7;
    ClimateButton.updateClimateConfiguration()();
  }
  return v7;
}

uint64_t sub_10004BAB4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_seatFan);
  if ([v1 hasOn] && (objc_msgSend(v1, "on") & 1) == 0)
  {
    unsigned __int8 v8 = [v1 autoMode];
    unsigned __int8 v9 = [v1 onRestricted];
    unsigned int v10 = [v1 onInvalid];
    unsigned __int8 v11 = [v1 onDisabled];
    if (v8)
    {
      if (v9)
      {
        uint64_t v12 = 6;
        uint64_t v13 = 14;
      }
      else
      {
        uint64_t v12 = 2;
        uint64_t v13 = 10;
      }
    }
    else
    {
      if ((v9 & 1) == 0)
      {
        uint64_t v12 = 8;
        if (!v10) {
          uint64_t v12 = 0;
        }
        if ((v11 & 1) == 0) {
          return v12;
        }
        return v12 | 0x10;
      }
      uint64_t v12 = 4;
      uint64_t v13 = 12;
    }
    if (v10) {
      uint64_t v12 = v13;
    }
    if ((v11 & 1) == 0) {
      return v12;
    }
    return v12 | 0x10;
  }
  char v2 = CAFSeatFan.isVenting.getter();
  char v3 = [v1 autoMode];
  char v4 = [v1 fanLevelRestricted];
  char v5 = [v1 fanLevelInvalid];
  char v6 = [v1 fanLevelDisabled];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2 & 1, v3, v4, v5, v6);
}

uint64_t sub_10004BD48()
{
  return CAFPositionedRequired.layoutKey.getter();
}

char *sub_10004BD94(void *a1)
{
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_currentValue] = 0;
  uint64_t v7 = OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_autoModeGlyph;
  id v8 = objc_allocWithZone((Class)UIImageView);
  unsigned __int8 v9 = v1;
  *(void *)&v1[v7] = [v8 init];
  sub_100007310(0, (unint64_t *)&unk_1000E6240);
  CAFPositionedRequired.layoutKey.getter();
  sub_100023490();
  char v11 = v10;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  BOOL v12 = (v11 & 1) == 0;
  if (v11) {
    uint64_t v13 = 0xD000000000000011;
  }
  else {
    uint64_t v13 = 0xD000000000000010;
  }
  if (v12) {
    uint64_t v14 = 0x80000001000B7120;
  }
  else {
    uint64_t v14 = 0x80000001000B7140;
  }
  id v15 = (uint64_t *)&v9[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_symbolName];
  *id v15 = v13;
  v15[1] = v14;
  *(void *)&v9[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_seatFan] = a1;
  id v16 = a1;
  unsigned int v17 = [v16 fanLevel];
  id v18 = [v16 fanLevelRange];
  id v19 = [v18 int32Range];

  sub_100031A38(v13, v14, 0, 0, v17, v19, 5.0);
  uint64_t v21 = v20;

  *(void *)&v9[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView] = v21;
  Swift::String v22 = (objc_class *)type metadata accessor for ClimateSeatFanServiceButton();
  v51.receiver = v9;
  v51.super_class = v22;
  uint64_t v23 = (char *)[super init];
  sub_10004C398();
  [v16 registerObserver:v23];
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v16;
  id v26 = (uint64_t *)&v23[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v27 = *v26;
  *id v26 = (uint64_t)sub_10004D0A8;
  v26[1] = v25;
  id v50 = v16;
  sub_100005690(v27);
  uint64_t v28 = qword_1000E46C0;
  uint64_t v29 = v23;
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_1000EA740;
  uint64_t v31 = qword_1000EA750;
  if (qword_1000E4690 != -1) {
    swift_once();
  }
  id v32 = (void *)qword_1000EA708;
  id v33 = (void **)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  char v34 = *(void **)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  char v35 = *(void **)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
  uint64_t v49 = *(void *)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
  *id v33 = v30;
  v33[1] = v32;
  v33[2] = (void *)v31;
  id v36 = v32;
  id v37 = v30;
  swift_bridgeObjectRetain_n();
  id v48 = v37;
  id v47 = v36;
  uint64_t v38 = *v33;
  uint64_t v39 = v33[1];
  uint64_t v40 = (uint64_t)v33[2];
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v41 = v38;
  id v42 = v39;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v40, v49);
    char v44 = v43;
    swift_bridgeObjectRelease();

    if (v44) {
      goto LABEL_17;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))((swift_isaMask & *(void *)v29) + 0x228))();
LABEL_17:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008EEC4();
  sub_10004C610();

  return v29;
}

void sub_10004C278(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if ([Strong isEnabled])
    {
      sub_100067564();
      [a3 setFanLevel:v5[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_currentValue]];
      sub_10004C610();
    }
  }
}

void sub_10004C398()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView];
  [v0 addSubview:v1];
  char v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  id v4 = [v1 leadingAnchor];
  id v5 = [v0 leadingAnchor];
  id v6 = [v4 constraintEqualToAnchor:v5];

  *(void *)(v3 + 32) = v6;
  id v7 = [v1 trailingAnchor];
  id v8 = [v0 trailingAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8];

  *(void *)(v3 + 40) = v9;
  id v10 = [v1 topAnchor];
  id v11 = [v0 topAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v3 + 48) = v12;
  id v13 = [v1 bottomAnchor];
  id v14 = [v0 bottomAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

uint64_t sub_10004C610()
{
  uint64_t v1 = v0;
  char v2 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_autoModeGlyph];
  if (v2)
  {
    id v3 = v2;
    [v3 setHidden:(sub_10004BAB4() & 0x1A) != 2];
  }
  sub_10009F8A4();
  [v0 setEnabled:(sub_10004BAB4() & 0x18) == 0];
  sub_10004C7BC();
  sub_100088B54();
  id v4 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView];
  id v5 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  id v6 = *(id *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  id v7 = [v6 colorWithAlphaComponent:0.25];
  id v8 = (void *)*((void *)v5 + 1);
  id v9 = *(void (**)(id, id, void *, void *))((swift_isaMask & *v4) + 0xD0);
  id v10 = v8;
  v9(v6, v7, v8, &_swiftEmptyDictionarySingleton);
  if ((sub_10004BAB4() & 0x18) != 0) {
    unsigned __int8 v11 = 0;
  }
  else {
    unsigned __int8 v11 = [*(id *)&v1[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_seatFan] fanLevel];
  }
  v1[OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_currentValue] = v11;
  return (*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x88))();
}

void sub_10004C7BC()
{
  uint64_t v1 = v0;
  sub_10008896C();
  char v2 = sub_10004BAB4();
  if ((v2 & 0x19) == 1)
  {
    if ((v2 & 2) != 0)
    {
      id v3 = [self systemOrangeColor];
    }
    else
    {
      if (qword_1000E4688 != -1) {
        swift_once();
      }
      id v3 = (id)qword_1000EA700;
    }
    uint64_t v23 = v3;
    uint64_t v24 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor);
    long long v45 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8);
    uint64_t v25 = v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
    long long v44 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
    uint64_t v26 = *(void *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
    *(void *)uint64_t v25 = v24;
    *(_OWORD *)(v25 + 8) = v45;
    id v27 = v24;
    id v28 = (id)v45;
    swift_bridgeObjectRetain_n();
    id v43 = v27;
    id v29 = v28;
    uint64_t v30 = *(void **)v25;
    uint64_t v31 = *(void **)(v25 + 8);
    uint64_t v32 = *(void *)(v25 + 16);
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v33 = v30;
    id v34 = v31;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v32, v26);
      char v36 = v35;
      swift_bridgeObjectRelease();

      if (v36) {
        goto LABEL_19;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_100088B54();
    id v37 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView);
    id v38 = *(id *)(v25 + 8);
    id v39 = [v38 colorWithAlphaComponent:0.25];
    uint64_t v40 = *(void **)(v25 + 8);
    id v41 = *(void (**)(id, id, void *, void *))((swift_isaMask & *v37) + 0xD0);
    id v42 = v40;
    v41(v38, v39, v40, &_swiftEmptyDictionarySingleton);
LABEL_19:

    goto LABEL_20;
  }
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  long long v45 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
  uint64_t v5 = v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  long long v44 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  *(void *)uint64_t v5 = v4;
  *(_OWORD *)(v5 + 8) = v45;
  id v7 = v4;
  id v8 = (id)v45;
  swift_bridgeObjectRetain_n();
  id v43 = v7;
  id v9 = v8;
  id v10 = *(void **)v5;
  unsigned __int8 v11 = *(void **)(v5 + 8);
  uint64_t v12 = *(void *)(v5 + 16);
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v13 = v10;
  id v14 = v11;
  swift_bridgeObjectRetain();
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_11;
  }
  sub_10007C1D0(v12, v6);
  char v16 = v15;
  swift_bridgeObjectRelease();

  if ((v16 & 1) == 0)
  {
LABEL_11:
    sub_100088B54();
    unsigned int v17 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView);
    id v18 = *(id *)(v5 + 8);
    id v19 = [v18 colorWithAlphaComponent:0.25];
    uint64_t v20 = *(void **)(v5 + 8);
    uint64_t v21 = *(void (**)(id, id, void *, void *))((swift_isaMask & *v17) + 0xD0);
    id v22 = v20;
    v21(v18, v19, v20, &_swiftEmptyDictionarySingleton);
  }
LABEL_20:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t sub_10004CC08()
{
  sub_100088B54();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  id v4 = [v3 colorWithAlphaComponent:0.25];
  uint64_t v5 = *(void **)(v2 + 8);
  uint64_t v6 = *(uint64_t (**)(id, id, void *, void *))((swift_isaMask & *v1) + 0xD0);
  id v7 = v5;
  return v6(v3, v4, v5, &_swiftEmptyDictionarySingleton);
}

void sub_10004CCD0()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_autoModeGlyph);
}

id sub_10004CD34()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSeatFanServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateSeatFanServiceButton()
{
  return self;
}

uint64_t sub_10004CDFC@<X0>(uint64_t a1@<X8>)
{
  sub_100007310(0, (unint64_t *)&unk_1000E6240);
  CAFPositionedRequired.layoutKey.getter();
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  id v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

unint64_t sub_10004CF60()
{
  unint64_t result = qword_1000E61F0;
  if (!qword_1000E61F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E61F0);
  }
  return result;
}

unint64_t sub_10004CFB4(uint64_t a1)
{
  unint64_t result = sub_10004CFDC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004CFDC()
{
  unint64_t result = qword_1000E6230;
  if (!qword_1000E6230)
  {
    type metadata accessor for ClimateSeatFanServiceButton();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6230);
  }
  return result;
}

uint64_t sub_10004D030()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004D068()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004D0A8(uint64_t a1)
{
  sub_10004C278(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_10004D0B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_currentValue;
  int v3 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_currentValue);
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel);
  id v5 = [v4 heatingCoolingLevelRange];
  CAFRange.maximumValue<A>()();

  if (v3 < v25)
  {
    uint64_t v6 = OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange) == 1)
    {
      id v7 = [v4 heatingCoolingLevelRange];
      CAFRange.stepValue<A>()();

      int v8 = *(_DWORD *)(v1 + v2);
      int v9 = v8 + v25;
      if (!__OFADD__(v8, v25)) {
        goto LABEL_18;
      }
      __break(1u);
    }
  }
  int v10 = *(_DWORD *)(v1 + v2);
  id v11 = [v4 heatingCoolingLevelRange];
  CAFRange.maximumValue<A>()();

  if (v10 == v25)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange) = 0;
    id v12 = [v4 heatingCoolingLevelRange];
    CAFRange.minimumValue<A>()();

    int v13 = v25 & ~(v25 >> 31);
LABEL_8:
    sub_10004D8A8(v13);
    return;
  }
  int v14 = *(_DWORD *)(v1 + v2);
  id v15 = [v4 heatingCoolingLevelRange];
  CAFRange.minimumValue<A>()();

  if (v25 >= v14
    || (uint64_t v6 = OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange,
        (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange) & 1) != 0))
  {
    int v16 = *(_DWORD *)(v1 + v2);
    id v17 = [v4 heatingCoolingLevelRange];
    CAFRange.minimumValue<A>()();

    if (v16 != v25) {
      return;
    }
    uint64_t v6 = OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange) = 1;
    id v18 = [v4 heatingCoolingLevelRange];
    CAFRange.minimumValue<A>()();

    if (v25)
    {
      id v19 = [v4 heatingCoolingLevelRange];
      CAFRange.maximumValue<A>()();

      int v13 = v25 & (v25 >> 31);
      goto LABEL_8;
    }
LABEL_17:
    id v21 = [v4 heatingCoolingLevelRange];
    CAFRange.stepValue<A>()();

    int v8 = *(_DWORD *)(v1 + v2);
    int v9 = v8 + v25;
    if (__OFADD__(v8, v25))
    {
      __break(1u);
      return;
    }
    goto LABEL_18;
  }
  id v20 = [v4 heatingCoolingLevelRange];
  CAFRange.stepValue<A>()();

  int v8 = *(_DWORD *)(v1 + v2);
  int v9 = v8 - v25;
  if (__OFSUB__(v8, v25))
  {
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  *(_DWORD *)(v1 + v2) = v9;
  if (v9 != v8)
  {
    if (!v8) {
      *(unsigned char *)(v1 + v6) = v9 >= 0;
    }
    id v22 = *(void **)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle);
    float v23 = (float)v9;
    uint64_t v24 = *(void *)((swift_isaMask & *v22) + 0x70);
    if (*(float *)((char *)v22 + v24) != v23)
    {
      *(float *)((char *)v22 + v24) = v23;
      sub_100083EB0(1);
    }
  }
}

void sub_10004D458()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_currentValue;
  int v3 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_currentValue);
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_seatHeatingCooling);
  id v5 = [v4 heatingCoolingLevelRange];
  CAFRange.maximumValue<A>()();

  if (v3 < v22
    && *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_isInPositiveRange) == 1)
  {
    id v6 = [v4 heatingCoolingLevelRange];
    CAFRange.stepValue<A>()();

    int v7 = *(_DWORD *)(v1 + v2);
    int v8 = v7 + v22;
    if (!__OFADD__(v7, v22)) {
      goto LABEL_8;
    }
    __break(1u);
  }
  int v9 = *(_DWORD *)(v1 + v2);
  id v10 = [v4 heatingCoolingLevelRange];
  CAFRange.maximumValue<A>()();

  if (v9 == v22)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_isInPositiveRange) = 0;
    id v11 = [v4 heatingCoolingLevelRange];
    CAFRange.minimumValue<A>()();

    int v8 = v22 & ~(v22 >> 31);
LABEL_8:
    *(_DWORD *)(v1 + v2) = v8;
    (*(void (**)(void))((swift_isaMask & **(void **)(v1
                                                     + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView))
                      + 0x88))();
    return;
  }
  int v12 = *(_DWORD *)(v1 + v2);
  id v13 = [v4 heatingCoolingLevelRange];
  CAFRange.minimumValue<A>()();

  if (v22 < v12
    && (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_isInPositiveRange) & 1) == 0)
  {
    id v18 = [v4 heatingCoolingLevelRange];
    CAFRange.stepValue<A>()();

    int v19 = *(_DWORD *)(v1 + v2);
    int v8 = v19 - v22;
    if (!__OFSUB__(v19, v22)) {
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_18;
  }
  int v14 = *(_DWORD *)(v1 + v2);
  id v15 = [v4 heatingCoolingLevelRange];
  CAFRange.minimumValue<A>()();

  if (v14 == v22)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_isInPositiveRange) = 1;
    id v16 = [v4 heatingCoolingLevelRange];
    CAFRange.minimumValue<A>()();

    if (v22)
    {
      id v17 = [v4 heatingCoolingLevelRange];
      CAFRange.maximumValue<A>()();

      int v8 = v22 & (v22 >> 31);
      goto LABEL_8;
    }
LABEL_18:
    id v20 = [v4 heatingCoolingLevelRange];
    CAFRange.stepValue<A>()();

    int v21 = *(_DWORD *)(v1 + v2);
    int v8 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
      return;
    }
    goto LABEL_8;
  }
}

uint64_t sub_10004D7E8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel);
  char v2 = [v1 heatingCoolingLevel] != 0;
  char v3 = [v1 autoMode];
  char v4 = [v1 heatingCoolingLevelRestricted];
  char v5 = [v1 heatingCoolingLevelInvalid];
  char v6 = [v1 heatingCoolingLevelDisabled];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2, v3, v4, v5, v6);
}

void sub_10004D8A8(int a1)
{
  int v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_currentValue);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_currentValue) = a1;
  if (v2 != a1)
  {
    if (!v2) {
      *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange) = a1 >= 0;
    }
    char v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle);
    uint64_t v4 = *(void *)((swift_isaMask & *v3) + 0x70);
    if (*(float *)((char *)v3 + v4) != (float)a1)
    {
      *(float *)((char *)v3 + v4) = (float)a1;
      sub_100083EB0(1);
    }
  }
}

char *sub_10004D940(void *a1)
{
  *(_DWORD *)&v1[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_currentValue] = 0;
  uint64_t v3 = OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_autoModeGlyph;
  id v4 = objc_allocWithZone((Class)UIImageView);
  char v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  *(void *)&v5[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel] = a1;
  id v6 = a1;
  id v7 = [v6 heatingCoolingLevelRange];
  signed int v8 = [v6 heatingCoolingLevel];
  v5[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_isInPositiveRange] = v8 >= 0;
  id v9 = [v7 minimum];
  [v9 floatValue];
  float v11 = v10;

  id v12 = [v7 maximum];
  [v12 floatValue];
  float v14 = v13;

  id v15 = objc_allocWithZone((Class)sub_100006730(&qword_1000E6358));
  id v16 = sub_100083BE0(v11, v14, 38.0, 2.0);
  *(void *)&v5[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle] = v16;
  float v17 = (float)(int)[v6 heatingCoolingLevel];
  uint64_t v18 = *(void *)((swift_isaMask & *v16) + 0x70);
  if (*(float *)((char *)v16 + v18) != v17)
  {
    *(float *)((char *)v16 + v18) = v17;
    sub_100083EB0(1);
  }
  uint64_t v19 = qword_1000E46A8;
  id v20 = v16;
  if (v19 != -1) {
    swift_once();
  }
  int v21 = (void *)qword_1000EA720;
  uint64_t v22 = *(void *)((swift_isaMask & *v20) + 0x68);
  float v23 = *(void **)((char *)v20 + v22);
  *(void *)((char *)v20 + v22) = qword_1000EA720;
  id v24 = v21;

  int v25 = *(void **)((char *)v20 + *(void *)((swift_isaMask & *v20) + 0x78));
  uint64_t v26 = *(void **)((char *)v20 + v22);
  if (v26) {
    id v27 = [v26 CGColor];
  }
  else {
    id v27 = 0;
  }
  [v25 setStrokeColor:v27];

  v56.receiver = v5;
  v56.super_class = (Class)type metadata accessor for ClimateSteeringWheelButton();
  id v28 = [super init];
  id v29 = &v28[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *((void *)v29 + 1);
  *(void *)id v29 = 0xD00000000000001CLL;
  *((void *)v29 + 1) = 0x80000001000B7210;
  uint64_t v32 = v28;
  if (!v31
    || (v30 != 0xD00000000000001CLL || v31 != 0x80000001000B7210)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  [v6 registerObserver:v32];
  uint64_t v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v33;
  *(void *)(v34 + 24) = v6;
  char v35 = (uint64_t *)&v32[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v36 = *v35;
  *char v35 = (uint64_t)sub_10004ECE0;
  v35[1] = v34;
  id v37 = v6;
  sub_100005690(v36);
  uint64_t v38 = OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle;
  id v39 = *(void **)&v32[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle];
  [v39 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v32 addSubview:v39];
  uint64_t v40 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1000B20F0;
  id v42 = [v39 centerXAnchor];
  id v43 = [v32 centerXAnchor];
  id v44 = [v42 constraintEqualToAnchor:v43];

  *(void *)(v41 + 32) = v44;
  id v45 = [*(id *)&v32[v38] centerYAnchor];
  id v46 = [v32 centerYAnchor];
  id v47 = [v45 constraintEqualToAnchor:v46];

  *(void *)(v41 + 40) = v47;
  id v48 = [*(id *)&v32[v38] heightAnchor];
  id v49 = [v32 heightAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49];

  *(void *)(v41 + 48) = v50;
  id v51 = [*(id *)&v32[v38] widthAnchor];
  id v52 = [v32 widthAnchor];
  id v53 = [v51 constraintEqualToAnchor:v52];

  *(void *)(v41 + 56) = v53;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v40 activateConstraints:isa];

  sub_10008F28C();
  sub_10004E760();

  return v32;
}

void sub_10004DF84(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v5 = (char *)Strong;
    sub_10004D0B4();
    [a3 setHeatingCoolingLevel:*(unsigned int *)&v5[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_currentValue]];
    sub_10004E760();
  }
}

void sub_10004E094()
{
  sub_100088B54();
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel];
  char v2 = _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0([v1 heatingCoolingLevel] != 0, (char)[v1 autoMode], (char)[v1 heatingCoolingLevelRestricted], (char)[v1 heatingCoolingLevelInvalid], (char)[v1 heatingCoolingLevelDisabled]);
  if ((int)[v1 heatingCoolingLevel] >= 1)
  {
    uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle];
    id v4 = &selRef_startAnimating;
    if ((_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0([v1 heatingCoolingLevel] != 0, (char)objc_msgSend(v1, "autoMode"), (char)objc_msgSend(v1, "heatingCoolingLevelRestricted"), (char)objc_msgSend(v1, "heatingCoolingLevelInvalid"), (char)objc_msgSend(v1, "heatingCoolingLevelDisabled")) & 2) != 0)
    {
      id v5 = [self systemRedColor];
    }
    else
    {
      if (qword_1000E4698 != -1) {
        swift_once();
      }
      id v5 = (id)qword_1000EA710;
    }
    uint64_t v14 = *(void *)((swift_isaMask & *v3) + 0x60);
    id v15 = *(void **)((char *)v3 + v14);
    *(void *)((char *)v3 + v14) = v5;
    id v10 = v5;

    id v16 = *(void **)((char *)v3 + *(void *)((swift_isaMask & *v3) + 0x80));
    float v17 = *(void **)((char *)v3 + v14);
    if (v17) {
      id v13 = [v17 CGColor];
    }
    else {
      id v13 = 0;
    }
LABEL_24:
    [v16 setStrokeColor:v13];
    goto LABEL_25;
  }
  unsigned int v6 = [v1 heatingCoolingLevel];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_progressCircle];
  if ((v6 & 0x80000000) != 0)
  {
    if ((_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0([v1 heatingCoolingLevel] != 0, (char)objc_msgSend(v1, "autoMode"), (char)objc_msgSend(v1, "heatingCoolingLevelRestricted"), (char)objc_msgSend(v1, "heatingCoolingLevelInvalid"), (char)objc_msgSend(v1, "heatingCoolingLevelDisabled")) & 2) != 0)
    {
      id v18 = [self systemBlueColor];
    }
    else
    {
      if (qword_1000E4690 != -1) {
        swift_once();
      }
      id v18 = (id)qword_1000EA708;
    }
    uint64_t v19 = *(void *)((swift_isaMask & *v3) + 0x60);
    id v20 = *(void **)((char *)v3 + v19);
    *(void *)((char *)v3 + v19) = v18;
    id v10 = v18;

    id v16 = *(void **)((char *)v3 + *(void *)((swift_isaMask & *v3) + 0x80));
    int v21 = *(void **)((char *)v3 + v19);
    if (v21) {
      id v13 = [v21 CGColor];
    }
    else {
      id v13 = 0;
    }
    id v4 = &selRef_startAnimating;
    goto LABEL_24;
  }
  id v7 = [self labelColor];
  uint64_t v8 = *(void *)((swift_isaMask & *v3) + 0x60);
  id v9 = *(void **)((char *)v3 + v8);
  *(void *)((char *)v3 + v8) = v7;
  id v10 = v7;

  float v11 = *(void **)((char *)v3 + *(void *)((swift_isaMask & *v3) + 0x80));
  id v12 = *(void **)((char *)v3 + v8);
  if (v12) {
    id v13 = [v12 CGColor];
  }
  else {
    id v13 = 0;
  }
  [v11 setStrokeColor:v13];
  id v4 = &selRef_startAnimating;
LABEL_25:

  if (v2)
  {
    if ((_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0([v1 heatingCoolingLevel] != 0, (char)objc_msgSend(v1, v4[68]), (char)objc_msgSend(v1, "heatingCoolingLevelRestricted"), (char)objc_msgSend(v1, "heatingCoolingLevelInvalid"), (char)objc_msgSend(v1, "heatingCoolingLevelDisabled")) & 2) != 0)
    {
      if (qword_1000E46A0 != -1) {
        swift_once();
      }
      id v23 = (id)qword_1000EA718;
      id v24 = [v0 traitCollection];
      id v22 = [v23 resolvedColorWithTraitCollection:v24];
    }
    else
    {
      if (qword_1000E46A8 != -1) {
        swift_once();
      }
      id v22 = (id)qword_1000EA720;
    }
    uint64_t v25 = *(void *)((swift_isaMask & *v3) + 0x68);
    uint64_t v26 = *(void **)((char *)v3 + v25);
    *(void *)((char *)v3 + v25) = v22;
    id v27 = v22;

    id v28 = *(void **)((char *)v3 + *(void *)((swift_isaMask & *v3) + 0x78));
    id v29 = *(void **)((char *)v3 + v25);
    if (v29) {
      id v30 = [v29 CGColor];
    }
    else {
      id v30 = 0;
    }
    id v31 = v30;
    [v28 setStrokeColor:];
  }
}

void sub_10004E760()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_autoModeGlyph];
  if (v1)
  {
    id v2 = v1;
    [v2 setHidden:!sub_10008EDFC()];
  }
  sub_10009F8A4();
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel];
  objc_msgSend(v0, "setEnabled:", (_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(objc_msgSend(v3, "heatingCoolingLevel") != 0, (char)objc_msgSend(v3, "autoMode"), (char)objc_msgSend(v3, "heatingCoolingLevelRestricted"), (char)objc_msgSend(v3, "heatingCoolingLevelInvalid"), (char)objc_msgSend(v3, "heatingCoolingLevelDisabled")) & 0x18) == 0);
  sub_10008896C();
  sub_10004E094();
  if ((_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0([v3 heatingCoolingLevel] != 0, (char)objc_msgSend(v3, "autoMode"), (char)objc_msgSend(v3, "heatingCoolingLevelRestricted"), (char)objc_msgSend(v3, "heatingCoolingLevelInvalid"), (char)objc_msgSend(v3, "heatingCoolingLevelDisabled")) & 0x18) != 0)int v4 = 0; {
  else
  }
    int v4 = [v3 heatingCoolingLevel];

  sub_10004D8A8(v4);
}

void sub_10004E91C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_autoModeGlyph);
}

id sub_10004E96C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSteeringWheelButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateSteeringWheelButton()
{
  return self;
}

unint64_t sub_10004EAE4()
{
  unint64_t result = qword_1000E6300;
  if (!qword_1000E6300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6300);
  }
  return result;
}

uint64_t sub_10004EB38(uint64_t a1)
{
  uint64_t result = sub_10004EC28(&qword_1000E6340);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004EB7C(uint64_t a1)
{
  uint64_t result = sub_10004EC28(&qword_1000E6340);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10004EBC0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10004EC28(&qword_1000E6348);
  uint64_t result = sub_10004EC28(&qword_1000E6350);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10004EC28(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClimateSteeringWheelButton();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004EC68()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004ECA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004ECE0(uint64_t a1)
{
  sub_10004DF84(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_10004ECE8()
{
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for ClimateVerticalQuickActionPopover();
  [super viewDidLayoutSubviews];
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_isSet) & 1) == 0)
  {
    *((unsigned char *)v0 + OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_isSet) = 1;
    sub_10004EE2C();
    [v0 setAdditionalSafeAreaInsets:8.0, 8.0, 8.0, 8.0];
    sub_100023A78();
    sub_10004F18C(v1);
    swift_bridgeObjectRelease();
    sub_100023960();
    id v2 = [v0 view];
    if (v2)
    {
      uint64_t v3 = v2;
      id v4 = [self clearColor];
      [v3 setBackgroundColor:v4];
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10004EE2C()
{
  id v1 = [self materialViewWithRecipe:20];
  if (!v1) {
    return;
  }
  id v2 = v1;
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  [*(id *)&v0[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView] addSubview:v2];
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  id v4 = [v2 leftAnchor];
  id v5 = [v0 view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  unsigned int v6 = v5;
  id v7 = [v5 leftAnchor];

  id v8 = [v4 constraintEqualToAnchor:v7];
  *(void *)(v3 + 32) = v8;
  id v9 = [v2 rightAnchor];
  id v10 = [v0 view];
  if (!v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  float v11 = v10;
  id v12 = [v10 rightAnchor];

  id v13 = [v9 constraintEqualToAnchor:v12];
  *(void *)(v3 + 40) = v13;
  id v14 = [v2 topAnchor];
  id v15 = [v0 view];
  if (!v15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v16 = v15;
  id v17 = [v15 topAnchor];

  id v18 = [v14 constraintEqualToAnchor:v17];
  *(void *)(v3 + 48) = v18;
  id v19 = [v2 bottomAnchor];
  id v20 = [v0 view];
  if (!v20)
  {
LABEL_13:
    __break(1u);
    return;
  }
  int v21 = v20;
  id v22 = self;
  id v23 = [v21 bottomAnchor];

  id v24 = [v19 constraintEqualToAnchor:v23];
  *(void *)(v3 + 56) = v24;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v22 activateConstraints:isa];
}

void sub_10004F18C(void *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  sub_100025664();
  if (v4)
  {
    uint64_t v5 = a1[2];
    if (v5 && v5 != 1)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_31;
      }
      while (1)
      {
        unint64_t v38 = 0;
        v5 += 3;
        while (1)
        {
          unint64_t v40 = v5 - 4;
          if (v38 == v5 - 4) {
            goto LABEL_22;
          }
          unint64_t v41 = a1[2];
          if (v38 >= v41) {
            break;
          }
          if (v40 >= v41) {
            goto LABEL_29;
          }
          id v42 = &a1[v38];
          uint64_t v43 = v42[4];
          v42[4] = a1[v5];
          unint64_t v44 = a1[2];
          swift_bridgeObjectRetain();
          if (v40 >= v44) {
            goto LABEL_30;
          }
          a1[v5] = v43;
          swift_bridgeObjectRelease();
LABEL_22:
          ++v38;
          uint64_t v39 = v5 - 5;
          --v5;
          if ((uint64_t)v38 >= v39) {
            goto LABEL_7;
          }
        }
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        a1 = sub_100082118(a1);
      }
    }
  }
LABEL_7:
  uint64_t v7 = a1[2];
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v11 = a1[i + 4];
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        if (v12 == 1)
        {
          id v9 = *(id *)(v11 + 40);
        }
        else
        {
          id v13 = (const char *)swift_bridgeObjectRetain();
          id v14 = sub_10004F6C4(v13);
          swift_bridgeObjectRelease();
          id v9 = v14;
        }
        id v10 = v9;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
  swift_bridgeObjectRelease();
  id v15 = objc_allocWithZone((Class)UIStackView);
  sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithArrangedSubviews:isa];

  [v17 setSpacing:8.0];
  [v17 setAxis:0];
  [v17 setDistribution:3];
  [v17 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v18 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView;
  [*(id *)(v2 + OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView) addSubview:v17];
  id v19 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1000B20F0;
  id v21 = [v17 topAnchor];
  id v22 = [*(id *)(v2 + v18) safeAreaLayoutGuide];
  id v23 = [v22 topAnchor];

  id v24 = [v21 constraintEqualToAnchor:v23];
  *(void *)(v20 + 32) = v24;
  id v25 = [v17 leftAnchor];
  id v26 = [*(id *)(v2 + v18) safeAreaLayoutGuide];
  id v27 = [v26 leftAnchor];

  id v28 = [v25 constraintEqualToAnchor:v27];
  *(void *)(v20 + 40) = v28;
  id v29 = [v17 bottomAnchor];
  id v30 = [*(id *)(v2 + v18) safeAreaLayoutGuide];
  id v31 = [v30 bottomAnchor];

  id v32 = [v29 constraintEqualToAnchor:v31];
  *(void *)(v20 + 48) = v32;
  id v33 = [v17 rightAnchor];
  id v34 = [*(id *)(v2 + v18) safeAreaLayoutGuide];
  id v35 = [v34 rightAnchor];

  id v36 = [v33 constraintEqualToAnchor:v35];
  *(void *)(v20 + 56) = v36;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 activateConstraints:v45];
}

id sub_10004F6C4(const char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CAUFeatureFlag.Climate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CAUFeatureFlag();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v67 = (unint64_t)_swiftEmptyArrayStorage;
  id v12 = [self sharedApplication];
  id v13 = [v12 delegate];

  if (!v13)
  {
    __break(1u);
    JUMPOUT(0x1000502D0);
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v14 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_retain();

  uint64_t v15 = dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter();
  swift_release();
  Optional<A>.featureFlags()();

  CAUFeatureFlag.climate.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  LOBYTE(v15) = CAUFeatureFlag.Climate.groupedVentsLayout.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v15 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v16 = v2 + OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_climateZone;
  unint64_t v17 = *(void *)(v16 + *(int *)(type metadata accessor for ClimateZone() + 36));
  if (v17 >> 62) {
    goto LABEL_52;
  }
  if (*(uint64_t *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
LABEL_53:
    uint64_t v51 = *((void *)a1 + 2);
    id v52 = _swiftEmptyArrayStorage;
    if (v51)
    {
      unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      id v53 = (void **)(a1 + 40);
      do
      {
        uint64_t v54 = *v53;
        v53 += 2;
        id v55 = v54;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v51;
      }
      while (v51);
      id v52 = (void *)v66;
    }
    swift_bridgeObjectRelease();
    unint64_t v67 = (unint64_t)v52;
    goto LABEL_58;
  }
  while (1)
  {
    unint64_t v18 = *((void *)a1 + 2);
    id v19 = _swiftEmptyArrayStorage;
    uint64_t v61 = a1;
    unint64_t v62 = v18;
    if (v18)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = (void **)(a1 + 40);
      id v21 = _swiftEmptyArrayStorage;
      char v65 = "atHeating";
      unint64_t v22 = v18;
      do
      {
        char v23 = *((unsigned char *)v20 - 8);
        id v24 = *v20;
        switch(v23)
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
            id v27 = v24;
            swift_bridgeObjectRelease();
            if (v26) {
              goto LABEL_12;
            }

            break;
          default:
            id v25 = v24;
            swift_bridgeObjectRelease();
LABEL_12:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v66 = (unint64_t)v21;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10008AF50(0, v21[2] + 1, 1);
              id v21 = (void *)v66;
            }
            unint64_t v30 = v21[2];
            unint64_t v29 = v21[3];
            if (v30 >= v29 >> 1)
            {
              sub_10008AF50(v29 > 1, v30 + 1, 1);
              id v21 = (void *)v66;
            }
            v21[2] = v30 + 1;
            id v31 = &v21[2 * v30];
            *((unsigned char *)v31 + 32) = v23;
            v31[5] = v24;
            break;
        }
        v20 += 2;
        --v22;
      }
      while (v22);
      a1 = v61;
      swift_bridgeObjectRelease();
      unint64_t v18 = v62;
    }
    else
    {
      id v21 = _swiftEmptyArrayStorage;
    }
    unint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v32 = v21[2];
    if (v32)
    {
      type metadata accessor for ClimateVentServiceButton();
      swift_retain();
      uint64_t v33 = 5;
      do
      {
        id v34 = (void *)v21[v33];
        if (swift_dynamicCastClass())
        {
          id v35 = v34;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v33 += 2;
        --v32;
      }
      while (v32);
      swift_release();
      id v19 = (void *)v66;
    }
    swift_release();
    objc_allocWithZone((Class)type metadata accessor for ClimateGroupedVentsButton());
    sub_100016EF0((unint64_t)v19, 1, 4);
    if (!v18)
    {

      goto LABEL_58;
    }
    id v60 = v36;
    swift_bridgeObjectRetain();
    LODWORD(v65) = 0;
    unint64_t v37 = 0;
    uint64_t v64 = -(uint64_t)v18;
    unint64_t v38 = a1 + 40;
    a1 = "off";
    objc_super v63 = "atHeating";
LABEL_29:
    uint64_t v39 = v37 <= v18 ? v18 : v37;
    uint64_t v40 = -v39;
    unint64_t v41 = (void **)&v38[16 * v37++];
LABEL_35:
    if (v40 + v37 != 1) {
      break;
    }
    __break(1u);
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50 < 2) {
      goto LABEL_53;
    }
  }
  id v42 = *v41;
  switch(*((unsigned char *)v41 - 8))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v45 = v42;
      swift_bridgeObjectRelease();
      if (!(v65 & 1 | ((v44 & 1) == 0))) {
        goto LABEL_44;
      }
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v46)
      {
      }
      else
      {
        id v47 = v45;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      goto LABEL_34;
    default:
      id v43 = v42;
      swift_bridgeObjectRelease();
      if ((v65 & 1) == 0)
      {
LABEL_44:
        id v48 = v60;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        unint64_t v49 = v64 + v37;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        LODWORD(v65) = 1;
        unint64_t v18 = v62;
        if (!v49)
        {

          goto LABEL_49;
        }
        goto LABEL_29;
      }

      swift_bridgeObjectRelease();
LABEL_34:
      ++v37;
      v41 += 2;
      if (v64 + v37 != 1) {
        goto LABEL_35;
      }

LABEL_49:
      swift_bridgeObjectRelease();
LABEL_58:
      id v56 = objc_allocWithZone((Class)UIStackView);
      sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v58 = [v56 initWithArrangedSubviews:isa];

      [v58 setSpacing:8.0];
      [v58 setAxis:1];
      [v58 setDistribution:3];
      [v58 setTranslatesAutoresizingMaskIntoConstraints:0];
      return v58;
  }
}

id sub_100050374(void *a1, char a2)
{
  uint64_t v3 = v2;
  sub_10002633C(a1, a2);
  type metadata accessor for ClimateStepper();
  uint64_t v4 = (void *)swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(uint64_t (**)(double))((swift_isaMask & *v4) + 0x258);
    id v7 = a1;
    uint64_t v8 = v6(44.0);
    (*(void (**)(uint64_t, double))((swift_isaMask & *v5) + 0x270))(v8, 44.0);
    uint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_popoverTapView);
    uint64_t v10 = (char *)v5 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
    swift_beginAccess();
    *((void *)v10 + 1) = &off_1000CB1E0;
    swift_unknownObjectWeakAssign();
    id v11 = v9;
    sub_10007B220();
  }
  else
  {
    type metadata accessor for ClimateDeepLinkButton();
    uint64_t v12 = swift_dynamicCastClass();
    if (v12)
    {
      id v13 = (char *)v12;
      id v14 = a1;
      [v13 addTarget:v3 action:"didTapDeepLinkButton:" forControlEvents:64];
      uint64_t v15 = &v13[OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate];
      swift_beginAccess();
      *((void *)v15 + 1) = &off_1000CB1E0;
      swift_unknownObjectWeakAssign();
    }
    else
    {
      type metadata accessor for ClimateButton();
      uint64_t v16 = swift_dynamicCastClass();
      if (v16)
      {
        uint64_t v17 = v16 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
        swift_beginAccess();
        *(void *)(v17 + 8) = &off_1000CB1E0;
        swift_unknownObjectWeakAssign();
      }
    }
  }

  return a1;
}

id sub_1000505E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateVerticalQuickActionPopover();
  return [super dealloc];
}

uint64_t sub_10005061C()
{
  return type metadata accessor for ClimateVerticalQuickActionPopover();
}

uint64_t type metadata accessor for ClimateVerticalQuickActionPopover()
{
  uint64_t result = qword_1000E6388;
  if (!qword_1000E6388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100050670()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1000506A8()
{
  return sub_100004580();
}

char *sub_1000506D4(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v3 = objc_allocWithZone((Class)type metadata accessor for ClimateCompressorButton());
  uint64_t v4 = v1;
  id v5 = a1;
  uint64_t v6 = sub_10000465C(v5, 1);
  *(void *)&v4[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_compressorButton] = v6;
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v4[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_cabin] = v5;
  id v7 = v5;

  uint64_t v8 = (char *)sub_100015F7C(0, 0, 1);
  uint64_t v9 = v8;
  uint64_t v10 = OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_compressorButton;
  id v11 = *(unsigned char **)&v8[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_compressorButton];
  int v12 = v11[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v11[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v12 == 1)
  {
    id v13 = v8;
  }
  else
  {
    id v14 = *(void **)&v11[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    uint64_t v15 = v8;
    uint64_t v16 = v11;
    [v14 removeFromSuperview];
    sub_100088B54();
  }
  [v7 registerObserver:v9];
  [v9 addSubview:*(void *)&v9[v10]];
  sub_100050898();
  unsigned __int8 v17 = [*(id *)&v9[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_cabin] compressorOn];
  v9[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn] = v17;
  sub_10009F8A4();
  [v9 setEnabled:(sub_100004580() & 0x18) == 0];
  sub_100088B54();
  ClimateButton.refreshColorConfig()();

  return v9;
}

void sub_100050898()
{
  uint64_t v1 = v0;
  objc_super v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_compressorButton];
  id v5 = [v4 leadingAnchor];
  id v6 = [v1 leadingAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 trailingAnchor];
  id v9 = [v1 trailingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [v4 topAnchor];
  id v12 = [v1 topAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  id v14 = [v4 bottomAnchor];
  id v15 = [v1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v3 + 56) = v16;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_100050AE8()
{
  return sub_100088B54();
}

void sub_100050B14()
{
  unsigned __int8 v1 = [*(id *)&v0[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_cabin] compressorOn];
  v0[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn] = v1;
  sub_10009F8A4();
  [v0 setEnabled:(sub_100004580() & 0x18) == 0];
  sub_100088B54();

  ClimateButton.refreshColorConfig()();
}

void sub_100050B9C()
{
  sub_100026DD0(v0 + OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_delegate);

  unsigned __int8 v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_compressorButton);
}

id sub_100050BEC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCompressorIndicator();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateCompressorIndicator()
{
  return self;
}

uint64_t sub_100050CA8(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn;
  int v4 = v1[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn];
  if (v4 == [a1 compressorOn])
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v9 = qword_1000EA798;
    os_log_type_t v10 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v9, v10);
    if (result)
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      id v12 = "Compressor indicator did update with same ON value. Skipping.";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
      return swift_slowDealloc();
    }
  }
  else
  {
    if ([a1 receivedAllValues])
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      id v5 = qword_1000EA798;
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        id v7 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v7 = 67240192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Compressor indicator did update ON: %{BOOL,public}d", v7, 8u);
        swift_slowDealloc();
      }
      v1[v3] = [*(id *)&v1[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_cabin] compressorOn];
      sub_10009F8A4();
      [v1 setEnabled:(sub_100004580() & 0x18) == 0];
      sub_100088B54();
      ClimateButton.refreshColorConfig()();
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        sub_10005700C();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v9 = qword_1000EA798;
    os_log_type_t v10 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v9, v10);
    if (result)
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      id v12 = "Compressor service hasn't receivedAllValues.";
      goto LABEL_17;
    }
  }
  return result;
}

void *sub_100051004()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate21ClimateSystemControls____lazy_storage___controls;
  if (*(void *)(v0 + OBJC_IVAR____TtC7Climate21ClimateSystemControls____lazy_storage___controls))
  {
    objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate21ClimateSystemControls____lazy_storage___controls);
  }
  else
  {
    objc_super v2 = sub_10005106C(v0);
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

void *sub_10005106C(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned __int8 v17 = *(void **)(a1 + OBJC_IVAR____TtC7Climate21ClimateSystemControls_climate);
  for (unint64_t i = (unint64_t)sub_1000533E0(unk_1000CA368, v17);
        ;
        unint64_t i = (unint64_t)sub_1000533E0(*((unsigned char *)&off_1000CA348 + v1 + 32), v17))
  {
    unint64_t v3 = i;
    if (i >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4) {
        goto LABEL_2;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((i & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v4) {
        goto LABEL_2;
      }
    }
    uint64_t result = self;
    if (v4 < 1) {
      break;
    }
    os_log_type_t v6 = result;
    uint64_t v18 = v1;
    swift_bridgeObjectRetain();
    for (uint64_t j = 0; j != v4; ++j)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v3 + 8 * j + 32);
      }
      id v9 = v8;
      [v8 setTranslatesAutoresizingMaskIntoConstraints:0, v17];
      [v9 _setContinuousCornerRadius:0.0];
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1000B1F40;
      id v11 = [v9 heightAnchor];
      id v12 = [v11 constraintEqualToConstant:44.0];

      *(void *)(v10 + 32) = v12;
      id v13 = [v9 widthAnchor];
      id v14 = [v9 heightAnchor];
      id v15 = [v13 constraintEqualToAnchor:v14];

      *(void *)(v10 + 40) = v15;
      specialized Array._endMutation()();
      sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v6 activateConstraints:isa];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = v18;
LABEL_2:
    ++v1;
    swift_bridgeObjectRelease();
    if (v1 == 6) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
  return result;
}

void sub_1000513E0()
{
  unint64_t v3 = v0;
  uint64_t v4 = OBJC_IVAR____TtC7Climate21ClimateSystemControls_areButtonsAlreadyVisible;
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate21ClimateSystemControls_areButtonsAlreadyVisible) & 1) != 0
    || ([v0 bounds], CGRectGetHeight(v42) == 0.0))
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v5 = qword_1000EA798;
    Class v40 = v3;
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67240448;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 8) = 2050;
      [(objc_class *)v40 bounds];
      CGRectGetHeight(v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "System control buttons already visible: %{BOOL,public}d, view height: %{public}f", (uint8_t *)v7, 0x12u);
      swift_slowDealloc();
      return;
    }
    goto LABEL_40;
  }
  *((unsigned char *)v0 + v4) = 1;
  id v8 = &selRef_startAnimating;
  [v0 frame];
  double v9 = (CGRectGetHeight(v44) + 4.0) / 48.0;
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  int64_t v1 = (uint64_t)v9;
  unint64_t v10 = (unint64_t)sub_100051004();
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
LABEL_46:
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
  swift_bridgeObjectRelease();
  if (v11 >= v1) {
    uint64_t v12 = v1;
  }
  else {
    uint64_t v12 = v11;
  }
  [v0 frame];
  double Height = CGRectGetHeight(v45);
  unint64_t v14 = (unint64_t)sub_100051004();
  if (v14 >> 62) {
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v15 > v1)
  {
    if (v1 < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v16 = (unint64_t)sub_100051004();
      uint64_t v15 = v16;
      id v8 = (char **)(v16 >> 62);
      if (!(v16 >> 62))
      {
        uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v17 >= v1) {
          goto LABEL_21;
        }
        goto LABEL_52;
      }
    }
    if (_CocoaArrayWrapper.endIndex.getter() < 0)
    {
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17 >= v1)
    {
LABEL_21:
      if ((v15 & 0xC000000000000001) != 0 && v1)
      {
        type metadata accessor for ClimateButton();
        Swift::Int v18 = 0;
        do
        {
          Swift::Int v19 = v18 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v18);
          Swift::Int v18 = v19;
        }
        while (v1 != v19);
      }
      if (v8)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v2 = v21;
        id v8 = v22;
        int64_t v1 = v23;
        swift_bridgeObjectRelease_n();
        if (v1) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8;
        uint64_t v2 = (v15 & 0xFFFFFFFFFFFFFF8) + 32;
        int64_t v1 = (2 * v1) | 1;
        if (v1)
        {
LABEL_31:
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          id v24 = (void *)swift_dynamicCastClass();
          if (!v24)
          {
            swift_unknownObjectRelease();
            id v24 = _swiftEmptyArrayStorage;
          }
          uint64_t v25 = v24[2];
          swift_release();
          if (!__OFSUB__((unint64_t)v1 >> 1, v8))
          {
            if (v25 == ((unint64_t)v1 >> 1) - (void)v8)
            {
              unint64_t v20 = swift_dynamicCastClass();
              swift_unknownObjectRelease();
              if (!v20)
              {
                swift_unknownObjectRelease();
                unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
              }
              goto LABEL_37;
            }
            goto LABEL_54;
          }
LABEL_53:
          __break(1u);
LABEL_54:
          swift_unknownObjectRelease();
        }
      }
      unint64_t v20 = (unint64_t)sub_10006E204(v17, v2, (uint64_t)v8, v1);
      swift_unknownObjectRelease();
      goto LABEL_37;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v20 = (unint64_t)sub_100051004();
LABEL_37:
  double v26 = fmin((Height + (double)v12 * -44.0) / (double)v12, 30.0);
  if (v20 >> 62)
  {
    sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
  }
  swift_bridgeObjectRelease();
  id v27 = objc_allocWithZone((Class)UIStackView);
  sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = [v27 initWithArrangedSubviews:isa];

  [v3 addSubview:v29];
  [v29 setAxis:1];
  [v29 setSpacing:v26];
  [v29 setAlignment:3];
  [v29 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v30 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1000B2110;
  id v32 = [v29 widthAnchor];
  id v33 = [v32 constraintEqualToConstant:60.0];

  *(void *)(v31 + 32) = v33;
  id v34 = [v29 centerXAnchor];
  id v35 = [v3 centerXAnchor];
  id v36 = [v34 constraintEqualToAnchor:v35];

  *(void *)(v31 + 40) = v36;
  id v37 = [v29 centerYAnchor];
  id v38 = [v3 centerYAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38];

  *(void *)(v31 + 48) = v39;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v30 activateConstraints:v40];

LABEL_40:
}

id sub_100051B98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSystemControls();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateSystemControls()
{
  return self;
}

uint64_t sub_100051C3C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000533CC(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100051CB8(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_100051CB8(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v142 = (char *)&v123 - v8;
  __chkstk_darwin(v9);
  unint64_t v135 = (char *)&v123 - v10;
  __chkstk_darwin(v11);
  uint64_t v134 = (char *)&v123 - v12;
  __chkstk_darwin(v13);
  uint64_t v129 = (char *)&v123 - v14;
  __chkstk_darwin(v15);
  unint64_t v128 = (char *)&v123 - v16;
  id v127 = a1;
  Swift::Int v17 = a1[1];
  Swift::Int v18 = _minimumMergeRunLength(_:)(v17);
  if (v18 >= v17)
  {
    if (v17 < 0) {
      goto LABEL_147;
    }
    if (v17) {
      sub_1000528A8(0, v17, 1, v127);
    }
    return;
  }
  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_155;
  }
  Swift::Int v125 = v18;
  unint64_t v20 = v142;
  unint64_t v132 = (void *)v17;
  uint64_t v137 = v1;
  if (v17 < 2)
  {
    int64_t v23 = (char *)_swiftEmptyArrayStorage;
    uint64_t v152 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v136 = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v17 != 1)
    {
      unint64_t v27 = _swiftEmptyArrayStorage[2];
LABEL_113:
      if (v27 >= 2)
      {
        uint64_t v116 = *v127;
        do
        {
          unint64_t v117 = v27 - 2;
          if (v27 < 2) {
            goto LABEL_142;
          }
          if (!v116) {
            goto LABEL_154;
          }
          uint64_t v118 = *(void *)&v23[16 * v117 + 32];
          uint64_t v119 = *(void *)&v23[16 * v27 + 24];
          uint64_t v120 = v137;
          sub_100052B98((id *)(v116 + 8 * v118), (id *)(v116 + 8 * *(void *)&v23[16 * v27 + 16]), (char *)(v116 + 8 * v119), v136);
          uint64_t v137 = v120;
          if (v120) {
            break;
          }
          if (v119 < v118) {
            goto LABEL_143;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v23 = sub_1000533B8((uint64_t)v23);
          }
          if (v117 >= *((void *)v23 + 2)) {
            goto LABEL_144;
          }
          uint64_t v121 = &v23[16 * v117 + 32];
          *(void *)uint64_t v121 = v118;
          *((void *)v121 + 1) = v119;
          unint64_t v122 = *((void *)v23 + 2);
          if (v27 > v122) {
            goto LABEL_145;
          }
          memmove(&v23[16 * v27 + 16], &v23[16 * v27 + 32], 16 * (v122 - v27));
          *((void *)v23 + 2) = v122 - 1;
          unint64_t v27 = v122 - 1;
        }
        while (v122 > 2);
      }
LABEL_124:
      swift_bridgeObjectRelease();
      *(void *)((v152 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v21 = v19 >> 1;
    sub_100007310(0, &qword_1000E5540);
    uint64_t v22 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) = v21;
    uint64_t v136 = (id *)((v22 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v152 = v22;
  }
  uint64_t v24 = 0;
  uint64_t v25 = *v127;
  unsigned int v145 = enum case for CAUVehicleLayoutKey.windshield_front(_:);
  v143 = (void (**)(char *, uint64_t))(v4 + 8);
  v144 = (void (**)(char *, void, uint64_t))(v4 + 104);
  uint64_t v124 = v25 + 16;
  uint64_t v123 = v25 - 8;
  int64_t v23 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = v3;
  char v141 = v6;
  uint64_t v26 = (uint64_t)v132;
  uint64_t v147 = v25;
LABEL_15:
  uint64_t v28 = v24;
  uint64_t v29 = v24 + 1;
  uint64_t v131 = v24;
  if (v24 + 1 < v26)
  {
    id v126 = v23;
    unint64_t v30 = *(void **)(v25 + 8 * v29);
    uint64_t v31 = *(void **)(v25 + 8 * v24);
    uint64_t v32 = sub_100007310(0, &qword_1000E5540);
    id v33 = v30;
    id v130 = v31;
    uint64_t v139 = v32;
    CAFPositionedRequired.layoutKey.getter();
    uint64_t v138 = *v144;
    v138(v129, v145, v3);
    unint64_t v34 = sub_100053D44();
    dispatch thunk of RawRepresentable.rawValue.getter();
    unint64_t v133 = v34;
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v150 == v148 && v151 == v149) {
      LODWORD(v146) = 1;
    }
    else {
      LODWORD(v146) = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v35 = *v143;
    (*v143)(v129, v3);
    v35(v128, v3);

    uint64_t v28 = v131;
    uint64_t v29 = v131 + 2;
    if (v131 + 2 < (uint64_t)v132)
    {
      id v36 = (id *)(v124 + 8 * v131);
      while (1)
      {
        uint64_t v37 = v29;
        id v38 = *(v36 - 1);
        id v39 = *v36;
        id v40 = v38;
        CAFPositionedRequired.layoutKey.getter();
        v138(v135, v145, v3);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        BOOL v41 = v150 == v148 && v151 == v149;
        int v42 = v41 ? 1 : _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35(v135, v3);
        v35(v134, v3);

        if ((v146 ^ v42)) {
          break;
        }
        uint64_t v29 = v37 + 1;
        ++v36;
        if (v132 == (void *)(v37 + 1))
        {
          uint64_t v29 = (uint64_t)v132;
          unint64_t v20 = v142;
          goto LABEL_32;
        }
      }
      unint64_t v20 = v142;
      uint64_t v29 = v37;
LABEL_32:
      uint64_t v28 = v131;
    }
    int64_t v23 = v126;
    os_log_type_t v6 = v141;
    uint64_t v43 = v147;
    if (v146)
    {
      if (v29 < v28) {
        goto LABEL_148;
      }
      if (v28 < v29)
      {
        CGRect v44 = (uint64_t *)(v123 + 8 * v29);
        uint64_t v45 = v29;
        uint64_t v46 = v28;
        id v47 = (uint64_t *)(v147 + 8 * v28);
        do
        {
          if (v46 != --v45)
          {
            if (!v43) {
              goto LABEL_153;
            }
            uint64_t v48 = *v47;
            uint64_t *v47 = *v44;
            uint64_t *v44 = v48;
          }
          ++v46;
          --v44;
          ++v47;
        }
        while (v46 < v45);
      }
    }
  }
  if (v29 >= (uint64_t)v132) {
    goto LABEL_65;
  }
  if (__OFSUB__(v29, v28)) {
    goto LABEL_146;
  }
  if (v29 - v28 >= v125) {
    goto LABEL_65;
  }
  if (__OFADD__(v28, v125)) {
    goto LABEL_149;
  }
  if (v28 + v125 >= (uint64_t)v132) {
    unint64_t v49 = v132;
  }
  else {
    unint64_t v49 = (void *)(v28 + v125);
  }
  if ((uint64_t)v49 >= v28)
  {
    if ((void *)v29 == v49) {
      goto LABEL_65;
    }
    id v126 = v23;
    uint64_t v50 = sub_100007310(0, &qword_1000E5540);
    uint64_t v51 = v147;
    uint64_t v139 = v50;
    unint64_t v52 = v123 + 8 * v29;
    id v130 = v49;
LABEL_53:
    uint64_t v54 = *(void **)(v51 + 8 * v29);
    uint64_t v55 = v28;
    unint64_t v133 = v52;
    uint64_t v146 = v29;
    while (1)
    {
      id v56 = *(void **)v52;
      id v57 = v54;
      id v58 = v56;
      CAFPositionedRequired.layoutKey.getter();
      (*v144)(v6, v145, v3);
      sub_100053D44();
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v150 == v148 && v151 == v149)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v61 = *v143;
        (*v143)(v6, v3);
        v61(v20, v3);
      }
      else
      {
        LODWORD(v138) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v60 = *v143;
        (*v143)(v6, v3);
        v60(v20, v3);

        if ((v138 & 1) == 0)
        {
          os_log_type_t v6 = v141;
          unint64_t v20 = v142;
          uint64_t v3 = v140;
          uint64_t v53 = v146;
          uint64_t v51 = v147;
LABEL_52:
          uint64_t v29 = v53 + 1;
          unint64_t v52 = v133 + 8;
          uint64_t v28 = v131;
          if ((id)v29 != v130) {
            goto LABEL_53;
          }
          uint64_t v29 = (uint64_t)v130;
          int64_t v23 = v126;
LABEL_65:
          if (v29 < v28) {
            goto LABEL_141;
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v146 = v29;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            int64_t v23 = sub_1000531FC(0, *((void *)v23 + 2) + 1, 1, v23);
          }
          unint64_t v65 = *((void *)v23 + 2);
          unint64_t v64 = *((void *)v23 + 3);
          unint64_t v27 = v65 + 1;
          uint64_t v25 = v147;
          if (v65 >= v64 >> 1)
          {
            uint64_t v115 = sub_1000531FC((char *)(v64 > 1), v65 + 1, 1, v23);
            uint64_t v25 = v147;
            int64_t v23 = v115;
          }
          *((void *)v23 + 2) = v27;
          unint64_t v66 = v23 + 32;
          unint64_t v67 = &v23[16 * v65 + 32];
          uint64_t v68 = v146;
          *(void *)unint64_t v67 = v28;
          *((void *)v67 + 1) = v68;
          if (v65)
          {
LABEL_71:
            unint64_t v69 = v27 - 1;
            if (v27 >= 4)
            {
              uint64_t v74 = &v66[16 * v27];
              uint64_t v75 = *((void *)v74 - 8);
              uint64_t v76 = *((void *)v74 - 7);
              BOOL v80 = __OFSUB__(v76, v75);
              uint64_t v77 = v76 - v75;
              if (v80) {
                goto LABEL_130;
              }
              uint64_t v79 = *((void *)v74 - 6);
              uint64_t v78 = *((void *)v74 - 5);
              BOOL v80 = __OFSUB__(v78, v79);
              uint64_t v72 = v78 - v79;
              char v73 = v80;
              if (v80) {
                goto LABEL_131;
              }
              unint64_t v81 = v27 - 2;
              id v82 = &v66[16 * v27 - 32];
              uint64_t v84 = *(void *)v82;
              uint64_t v83 = *((void *)v82 + 1);
              BOOL v80 = __OFSUB__(v83, v84);
              uint64_t v85 = v83 - v84;
              if (v80) {
                goto LABEL_133;
              }
              BOOL v80 = __OFADD__(v72, v85);
              uint64_t v86 = v72 + v85;
              if (v80) {
                goto LABEL_136;
              }
              if (v86 >= v77)
              {
                uint64_t v104 = &v66[16 * v69];
                uint64_t v106 = *(void *)v104;
                uint64_t v105 = *((void *)v104 + 1);
                BOOL v80 = __OFSUB__(v105, v106);
                uint64_t v107 = v105 - v106;
                if (v80) {
                  goto LABEL_140;
                }
                BOOL v97 = v72 < v107;
              }
              else
              {
LABEL_84:
                if (v73) {
                  goto LABEL_132;
                }
                unint64_t v81 = v27 - 2;
                uint64_t v87 = &v66[16 * v27 - 32];
                uint64_t v89 = *(void *)v87;
                uint64_t v88 = *((void *)v87 + 1);
                BOOL v90 = __OFSUB__(v88, v89);
                uint64_t v91 = v88 - v89;
                char v92 = v90;
                if (v90) {
                  goto LABEL_135;
                }
                unint64_t v93 = &v66[16 * v69];
                uint64_t v95 = *(void *)v93;
                uint64_t v94 = *((void *)v93 + 1);
                BOOL v80 = __OFSUB__(v94, v95);
                uint64_t v96 = v94 - v95;
                if (v80) {
                  goto LABEL_138;
                }
                if (__OFADD__(v91, v96)) {
                  goto LABEL_139;
                }
                if (v91 + v96 < v72) {
                  goto LABEL_96;
                }
                BOOL v97 = v72 < v96;
              }
              if (v97) {
                unint64_t v69 = v81;
              }
            }
            else
            {
              if (v27 == 3)
              {
                uint64_t v71 = *((void *)v23 + 4);
                uint64_t v70 = *((void *)v23 + 5);
                BOOL v80 = __OFSUB__(v70, v71);
                uint64_t v72 = v70 - v71;
                char v73 = v80;
                goto LABEL_84;
              }
              uint64_t v98 = *((void *)v23 + 4);
              uint64_t v99 = *((void *)v23 + 5);
              BOOL v80 = __OFSUB__(v99, v98);
              uint64_t v91 = v99 - v98;
              char v92 = v80;
LABEL_96:
              if (v92) {
                goto LABEL_134;
              }
              uint64_t v100 = &v66[16 * v69];
              uint64_t v102 = *(void *)v100;
              uint64_t v101 = *((void *)v100 + 1);
              BOOL v80 = __OFSUB__(v101, v102);
              uint64_t v103 = v101 - v102;
              if (v80) {
                goto LABEL_137;
              }
              if (v103 < v91) {
                goto LABEL_14;
              }
            }
            unint64_t v108 = v69 - 1;
            if (v69 - 1 >= v27)
            {
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
              break;
            }
            if (!v25) {
              goto LABEL_152;
            }
            uint64_t v109 = &v66[16 * v108];
            uint64_t v110 = *(void *)v109;
            unsigned int v111 = &v66[16 * v69];
            uint64_t v112 = *((void *)v111 + 1);
            uint64_t v113 = v137;
            sub_100052B98((id *)(v25 + 8 * *(void *)v109), (id *)(v25 + 8 * *(void *)v111), (char *)(v25 + 8 * v112), v136);
            uint64_t v137 = v113;
            if (v113) {
              goto LABEL_124;
            }
            if (v112 < v110) {
              goto LABEL_127;
            }
            if (v69 > *((void *)v23 + 2)) {
              goto LABEL_128;
            }
            *(void *)uint64_t v109 = v110;
            *(void *)&v66[16 * v108 + 8] = v112;
            unint64_t v114 = *((void *)v23 + 2);
            if (v69 >= v114) {
              goto LABEL_129;
            }
            unint64_t v27 = v114 - 1;
            memmove(&v66[16 * v69], v111 + 16, 16 * (v114 - 1 - v69));
            *((void *)v23 + 2) = v114 - 1;
            uint64_t v25 = v147;
            if (v114 <= 2) {
              goto LABEL_14;
            }
            goto LABEL_71;
          }
          unint64_t v27 = 1;
LABEL_14:
          uint64_t v26 = (uint64_t)v132;
          uint64_t v24 = v146;
          os_log_type_t v6 = v141;
          unint64_t v20 = v142;
          if (v146 >= (uint64_t)v132) {
            goto LABEL_113;
          }
          goto LABEL_15;
        }
      }
      uint64_t v53 = v146;
      uint64_t v51 = v147;
      if (!v147) {
        goto LABEL_151;
      }
      unint64_t v62 = *(void **)v52;
      uint64_t v54 = *(void **)(v52 + 8);
      *(void *)unint64_t v52 = v54;
      *(void *)(v52 + 8) = v62;
      v52 -= 8;
      ++v55;
      os_log_type_t v6 = v141;
      unint64_t v20 = v142;
      uint64_t v3 = v140;
      if (v53 == v55) {
        goto LABEL_52;
      }
    }
  }
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000528A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a1;
  uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v34 = (char *)&v26 - v12;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v13 = *a4;
    unsigned int v33 = enum case for CAUVehicleLayoutKey.windshield_front(_:);
    uint64_t v31 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = (void (**)(char *, void, uint64_t))(v11 + 104);
    uint64_t v30 = sub_100007310(0, &qword_1000E5540);
    uint64_t v35 = v13;
    uint64_t v14 = v13 + 8 * a3 - 8;
    uint64_t v15 = v34;
LABEL_5:
    uint64_t v16 = *(void **)(v35 + 8 * a3);
    uint64_t v17 = v28;
    uint64_t v29 = v14;
    uint64_t v36 = a3;
    while (1)
    {
      Swift::Int v18 = *(void **)v14;
      id v19 = v16;
      id v41 = v18;
      CAFPositionedRequired.layoutKey.getter();
      (*v32)(v9, v33, v7);
      sub_100053D44();
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v39 == v37 && v40 == v38)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v24 = *v31;
        (*v31)(v9, v7);
        v24(v15, v7);

        uint64_t v23 = v36;
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = *v31;
        (*v31)(v9, v7);
        v22(v15, v7);

        uint64_t v23 = v36;
        if ((v21 & 1) == 0) {
          goto LABEL_4;
        }
      }
      if (!v35) {
        break;
      }
      uint64_t v25 = *(void **)v14;
      uint64_t v16 = *(void **)(v14 + 8);
      *(void *)uint64_t v14 = v16;
      *(void *)(v14 + 8) = v25;
      v14 -= 8;
      if (v23 == ++v17)
      {
LABEL_4:
        a3 = v23 + 1;
        uint64_t v14 = v29 + 8;
        if (a3 == v27) {
          return;
        }
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

uint64_t sub_100052B98(id *a1, id *a2, char *a3, id *a4)
{
  uint64_t v58 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v8 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  id v56 = (void **)((char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v54 = (void **)((char *)v47 - v11);
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)v47 - v13;
  __chkstk_darwin(v14);
  unint64_t v52 = a3;
  uint64_t v53 = (char *)v47 - v15;
  uint64_t v16 = (char *)a2 - (char *)a1;
  uint64_t v17 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v17 = (char *)a2 - (char *)a1;
  }
  uint64_t v18 = v17 >> 3;
  uint64_t v19 = a3 - (char *)a2;
  uint64_t v20 = v19 / 8;
  unint64_t v65 = a1;
  uint64_t v51 = a4;
  unint64_t v64 = a4;
  if (v17 >> 3 >= v19 / 8)
  {
    if (v19 >= -7)
    {
      unsigned int v33 = v51;
      if (v51 != a2 || &a2[v20] <= v51) {
        memmove(v51, a2, 8 * v20);
      }
      unint64_t v34 = (unint64_t)&v33[v20];
      objc_super v63 = (void *)v34;
      unint64_t v65 = a2;
      if (v19 >= 8 && a1 < a2)
      {
        LODWORD(v50) = enum case for CAUVehicleLayoutKey.windshield_front(_:);
        uint64_t v48 = (void (**)(void **, uint64_t))(v8 + 8);
        unint64_t v49 = (void (**)(char *, uint64_t))(v8 + 104);
        v47[2] = sub_100007310(0, &qword_1000E5540);
        uint64_t v35 = v52 - 8;
        uint64_t v36 = a2;
        id v57 = a1;
        do
        {
          uint64_t v55 = (char *)a2;
          uint64_t v53 = (char *)v34;
          uint64_t v37 = (void *)(v34 - 8);
          uint64_t v38 = *--v36;
          id v39 = *(id *)(v34 - 8);
          unint64_t v52 = v38;
          CAFPositionedRequired.layoutKey.getter();
          ((void (*)(void **, void, uint64_t))*v49)(v56, v50, v58);
          sub_100053D44();
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          if (v61 == v59 && v62 == v60) {
            char v40 = 1;
          }
          else {
            char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          id v41 = v35 + 8;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v42 = *v48;
          uint64_t v43 = v58;
          (*v48)(v56, v58);
          v42(v54, v43);

          CGRect v44 = v55;
          if (v40)
          {
            BOOL v45 = v41 == v55;
            unint64_t v34 = (unint64_t)v53;
            if (!v45 || v35 >= v55) {
              *(void *)uint64_t v35 = *v36;
            }
            unint64_t v65 = v36;
          }
          else
          {
            objc_super v63 = v37;
            if (v41 < v53 || v35 >= v53 || v41 != v53) {
              *(void *)uint64_t v35 = *v37;
            }
            uint64_t v36 = (id *)v44;
            unint64_t v34 = (unint64_t)v37;
          }
          if (v34 <= (unint64_t)v51) {
            break;
          }
          v35 -= 8;
          a2 = v36;
        }
        while (v36 > v57);
      }
LABEL_49:
      sub_1000532FC((void **)&v65, (const void **)&v64, &v63);
      return 1;
    }
  }
  else if (v16 >= -7)
  {
    char v21 = v51;
    if (v51 != a1 || &a1[v18] <= v51) {
      memmove(v51, a1, 8 * v18);
    }
    id v56 = &v21[v18];
    objc_super v63 = v56;
    if (v16 >= 8 && a2 < (id *)v52)
    {
      uint64_t v22 = v21;
      LODWORD(v54) = enum case for CAUVehicleLayoutKey.windshield_front(_:);
      unint64_t v49 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v50 = (void (**)(char *, void, uint64_t))(v8 + 104);
      uint64_t v48 = (void (**)(void **, uint64_t))sub_100007310(0, &qword_1000E5540);
      while (1)
      {
        id v57 = a1;
        uint64_t v23 = *v22;
        id v24 = *a2;
        id v25 = v23;
        CAFPositionedRequired.layoutKey.getter();
        (*v50)(v55, v54, v58);
        sub_100053D44();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v61 == v59 && v62 == v60)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v26 = *v49;
          uint64_t v27 = v58;
          (*v49)(v55, v58);
          v26(v53, v27);
        }
        else
        {
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v29 = *v49;
          uint64_t v30 = v58;
          (*v49)(v55, v58);
          v29(v53, v30);

          if ((v28 & 1) == 0)
          {
            uint64_t v32 = v57;
            if (v57 != v22) {
              *id v57 = *v22;
            }
            unint64_t v64 = ++v22;
            unint64_t v31 = (unint64_t)a2;
            goto LABEL_22;
          }
        }
        unint64_t v31 = (unint64_t)(a2 + 1);
        uint64_t v32 = v57;
        if (v57 < a2 || (unint64_t)v57 >= v31 || v57 != a2) {
          *id v57 = *a2;
        }
LABEL_22:
        a1 = v32 + 1;
        unint64_t v65 = a1;
        if (v22 < v56)
        {
          a2 = (id *)v31;
          if (v31 < (unint64_t)v52) {
            continue;
          }
        }
        goto LABEL_49;
      }
    }
    goto LABEL_49;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000531FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006730(&qword_1000E6420);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000532FC(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1000533B8(uint64_t a1)
{
  return sub_1000531FC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000533CC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1000533E0(char a1, void *a2)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v64 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  objc_super v63 = (char *)&v58 - v8;
  __chkstk_darwin(v9);
  uint64_t v68 = (char *)&v58 - v10;
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  unint64_t v67 = (char *)&v58 - v13;
  switch(a1)
  {
    case 1:
      [a2 recirculation:v12];
      if (!v43) {
        return _swiftEmptyArrayStorage;
      }
      CGRect v44 = v43;
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1000B2670;
      id v45 = objc_allocWithZone((Class)type metadata accessor for ClimateRecirculationServiceButton());
      id v39 = v44;
      char v40 = sub_10008F6E8(v39, 3);
      goto LABEL_42;
    case 2:
      id v35 = [a2 cabin:v12];
      if (!v35) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v36 = v35;
      if (![v35 hasMaxACOn]) {
        goto LABEL_43;
      }
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1000B2670;
      id v38 = objc_allocWithZone((Class)type metadata accessor for ClimateMaxACButton());
      id v39 = v36;
      char v40 = sub_10007F0D8(v39, 3u);
      goto LABEL_42;
    case 3:
      id v41 = [a2 cabin];
      if (!v41) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v36 = v41;
      if (![v41 hasCompressorOn]) {
        goto LABEL_43;
      }
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1000B2670;
      id v42 = objc_allocWithZone((Class)type metadata accessor for ClimateCompressorButton());
      id v39 = v36;
      char v40 = sub_10000465C(v39, 3);
      goto LABEL_42;
    case 4:
      id v27 = [a2 zonesSynceds:v12];
      uint64_t v15 = _swiftEmptyArrayStorage;
      if (!v27) {
        return v15;
      }
      char v28 = v27;
      sub_100007310(0, (unint64_t *)&qword_1000E5430);
      unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v30)
        {
LABEL_25:
          uint64_t v71 = (uint64_t)_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          if ((v30 & 0x8000000000000000) == 0)
          {
            uint64_t v31 = 0;
            do
            {
              if ((v29 & 0xC000000000000001) != 0) {
                id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v32 = *(id *)(v29 + 8 * v31 + 32);
              }
              unsigned int v33 = v32;
              ++v31;
              id v34 = objc_allocWithZone((Class)type metadata accessor for ClimateZonesSyncedServiceButton());
              sub_10001C94C(v33, 3u);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            while (v30 != v31);
            uint64_t v15 = (void *)v71;
            goto LABEL_46;
          }
LABEL_72:
          __break(1u);
          swift_release();
          __break(1u);
          JUMPOUT(0x100053D2CLL);
        }
      }
      else
      {
        uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v30) {
          goto LABEL_25;
        }
      }
LABEL_46:
      swift_bridgeObjectRelease();
      return v15;
    case 5:
      id v46 = [a2 cabin];
      if (!v46) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v36 = v46;
      if ([v46 hasHvacOn])
      {
        sub_100006730((uint64_t *)&unk_1000E4F10);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_1000B2670;
        id v47 = objc_allocWithZone((Class)type metadata accessor for ClimateHVACButton());
        id v39 = v36;
        char v40 = sub_10004AE4C(v39);
LABEL_42:
        *(void *)(v37 + 32) = v40;
        uint64_t v71 = v37;
        specialized Array._endMutation()();
        uint64_t v15 = (void *)v71;
      }
      else
      {
LABEL_43:

        return _swiftEmptyArrayStorage;
      }
      return v15;
    default:
      [a2 defrosts:v12];
      uint64_t v15 = _swiftEmptyArrayStorage;
      if (!v14) {
        return v15;
      }
      uint64_t v16 = v14;
      uint64_t v66 = sub_100007310(0, &qword_1000E5540);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      char v73 = _swiftEmptyArrayStorage;
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_5;
        }
LABEL_49:
        swift_bridgeObjectRelease();
        unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
        goto LABEL_50;
      }
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v18) {
        goto LABEL_49;
      }
LABEL_5:
      if (v18 < 1)
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      uint64_t v19 = 0;
      unint64_t v60 = v17 & 0xC000000000000001;
      unsigned int v59 = enum case for CAUVehicleLayoutKey.windshield_front(_:);
      unint64_t v65 = (void (**)(char *, void, uint64_t))(v5 + 104);
      uint64_t v20 = (void (**)(char *, uint64_t))(v5 + 8);
      unsigned int v58 = enum case for CAUVehicleLayoutKey.windshield_rear(_:);
      uint64_t v61 = v18;
      unint64_t v62 = v17;
      do
      {
        if (v60) {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v21 = *(id *)(v17 + 8 * v19 + 32);
        }
        uint64_t v22 = v21;
        CAFPositionedRequired.layoutKey.getter();
        uint64_t v23 = *v65;
        (*v65)(v68, v59, v4);
        sub_100053D44();
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v71 == v69 && v72 == v70) {
          char v24 = 1;
        }
        else {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v25 = *v20;
        (*v20)(v68, v4);
        v25(v67, v4);
        if (v24) {
          goto LABEL_8;
        }
        CAFPositionedRequired.layoutKey.getter();
        v23(v64, v58, v4);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v71 == v69 && v72 == v70)
        {
          swift_bridgeObjectRelease_n();
          v25(v64, v4);
          v25(v63, v4);
LABEL_8:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_9;
        }
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25(v64, v4);
        v25(v63, v4);
        if (v26) {
          goto LABEL_8;
        }

LABEL_9:
        ++v19;
        unint64_t v17 = v62;
      }
      while (v61 != v19);
      swift_bridgeObjectRelease();
      unint64_t v48 = (unint64_t)v73;
      uint64_t v15 = _swiftEmptyArrayStorage;
LABEL_50:
      swift_bridgeObjectRetain();
      if ((v48 & 0x8000000000000000) != 0 || (unint64_t v49 = (void *)v48, (v48 & 0x4000000000000000) != 0))
      {
        unint64_t v49 = sub_10006E0E4(v48);
        swift_release();
      }
      uint64_t v71 = (uint64_t)v49;
      sub_100051C3C(&v71);
      swift_release();
      uint64_t v50 = v71;
      if (v71 < 0 || (v71 & 0x4000000000000000) != 0)
      {
        swift_retain();
        uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v57) {
          goto LABEL_62;
        }
        swift_bridgeObjectRetain();
        uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v51) {
          goto LABEL_62;
        }
        uint64_t v71 = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v51 & 0x8000000000000000) == 0) {
          goto LABEL_56;
        }
        __break(1u);
        goto LABEL_71;
      }
      uint64_t v51 = *(void *)(v71 + 16);
      if (v51)
      {
        uint64_t v71 = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
LABEL_56:
        uint64_t v52 = 0;
        do
        {
          if ((v50 & 0xC000000000000001) != 0) {
            id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v53 = *(id *)(v50 + 8 * v52 + 32);
          }
          uint64_t v54 = v53;
          ++v52;
          id v55 = objc_allocWithZone((Class)type metadata accessor for ClimateDefrostServiceButton());
          sub_1000069F4(v54, 3u);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v51 != v52);
        uint64_t v15 = (void *)v71;
      }
LABEL_62:
      swift_release();
      return v15;
  }
}

unint64_t sub_100053D44()
{
  unint64_t result = qword_1000E6030;
  if (!qword_1000E6030)
  {
    type metadata accessor for CAUVehicleLayoutKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6030);
  }
  return result;
}

uint64_t sub_100053D9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_100007310(0, &qword_1000E6050);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100053F24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  if ((((result & 1) == 0) ^ *(unsigned __int8 *)(a2 + 32))) {
    return 1;
  }
  if (v2 != 1)
  {
    uint64_t v4 = 33;
    while (1)
    {
      uint64_t v5 = v4 - 31;
      if (__OFADD__(v4 - 32, 1)) {
        break;
      }
      char v3 = ((result & 1) == 0) ^ *(unsigned char *)(a2 + v4);
      if ((v3 & 1) == 0)
      {
        ++v4;
        if (v5 != v2) {
          continue;
        }
      }
      return v3 & 1;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  return result;
}

void sub_100053F9C(char a1)
{
  sub_100055CEC();
  uint64_t v3 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v4)
  {
    [v4 invalidate];
    uint64_t v5 = *(void **)(v1 + v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(v1 + v3) = 0;

  if ((a1 & 1) == 0)
  {
    char v6 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator);
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator) = 0;
    sub_100054234(v6);
    sub_10005520C();
  }
  char v7 = self;
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  LOBYTE(v8) = a1 & 1;
  *(unsigned char *)(v9 + 24) = a1 & 1;
  uint64_t v18 = sub_100057D44;
  uint64_t v19 = v9;
  char v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005FC84;
  unint64_t v17 = &unk_1000CBB80;
  uint64_t v10 = _Block_copy(&v14);
  swift_release();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(unsigned char *)(v12 + 24) = v8;
  uint64_t v18 = sub_100057D50;
  uint64_t v19 = v12;
  char v14 = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  uint64_t v16 = sub_10005FCC8;
  unint64_t v17 = &unk_1000CBBD0;
  id v13 = _Block_copy(&v14);
  swift_release();
  [v7 animateWithDuration:0 delay:v10 options:v13 animations:0.3 completion:0.0];
  _Block_release(v13);
  _Block_release(v10);
}

void sub_1000541CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_100054234(char a1)
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1000EA798;
  id v4 = v1;
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v5))
  {
    unint64_t v6 = 0xEB00000000657275;
    uint64_t v7 = 0x74617265706D6574;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v9 = 0x74617265706D6574;
    unint64_t v10 = 0xEB00000000657275;
    switch(a1)
    {
      case 1:
        unint64_t v10 = 0xE300000000000000;
        uint64_t v9 = 7233894;
        break;
      case 2:
        uint64_t v9 = 0x73736572706D6F63;
        unint64_t v10 = 0xEA0000000000726FLL;
        break;
      case 3:
        unint64_t v10 = 0xE400000000000000;
        uint64_t v9 = 1668184435;
        break;
      case 4:
        uint64_t v9 = 0x6C75637269636572;
        unint64_t v10 = 0xED00006E6F697461;
        break;
      case 5:
        unint64_t v10 = 0xE500000000000000;
        uint64_t v9 = 0x65736F6C63;
        break;
      default:
        break;
    }
    sub_10000A56C(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    switch(v4[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator])
    {
      case 1:
        unint64_t v6 = 0xE300000000000000;
        uint64_t v7 = 7233894;
        break;
      case 2:
        uint64_t v7 = 0x73736572706D6F63;
        unint64_t v6 = 0xEA0000000000726FLL;
        break;
      case 3:
        unint64_t v6 = 0xE400000000000000;
        uint64_t v7 = 1668184435;
        break;
      case 4:
        uint64_t v7 = 0x6C75637269636572;
        unint64_t v6 = 0xED00006E6F697461;
        break;
      case 5:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x65736F6C63;
        break;
      default:
        break;
    }
    sub_10000A56C(v7, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Current indicator updated from %{public}s to %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100054598(a1);
  if (v11) {
    sub_10005479C(a1);
  }
}

void sub_100054598(char a1)
{
  uint64_t v2 = v1;
  id v4 = [self sharedApplication];
  id v5 = [v4 delegate];

  if (v5)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v6 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();

    swift_release();
    swift_release();
    if (v15)
    {
      uint64_t v7 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator;
      uint64_t v8 = sub_1000556F8(*(unsigned char *)(v2 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator));
      if (v8 && (uint64_t v9 = v8, [v8 alpha], v11 = v10, v9, v11 == 1.0))
      {
        sub_100066254(*(unsigned char *)(v2 + v7), a1);
      }
      else
      {
        if (qword_1000E46D8 != -1) {
          swift_once();
        }
        uint64_t v12 = qword_1000EA798;
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          char v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Current fan indicator need animation", v14, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10005479C(char a1)
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1000EA798;
  id v4 = v1;
  os_log_type_t v5 = static os_log_type_t.default.getter();
  id v6 = (void *)&unk_1000EA000;
  if (os_log_type_enabled(v3, v5))
  {
    unint64_t v7 = 0xEB00000000657275;
    uint64_t v8 = 0x74617265706D6574;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = 0x74617265706D6574;
    unint64_t v11 = 0xEB00000000657275;
    switch(a1)
    {
      case 1:
        unint64_t v11 = 0xE300000000000000;
        uint64_t v10 = 7233894;
        break;
      case 2:
        uint64_t v10 = 0x73736572706D6F63;
        unint64_t v11 = 0xEA0000000000726FLL;
        break;
      case 3:
        unint64_t v11 = 0xE400000000000000;
        uint64_t v10 = 1668184435;
        break;
      case 4:
        uint64_t v10 = 0x6C75637269636572;
        unint64_t v11 = 0xED00006E6F697461;
        break;
      case 5:
        unint64_t v11 = 0xE500000000000000;
        uint64_t v10 = 0x65736F6C63;
        break;
      default:
        break;
    }
    sub_10000A56C(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    id v6 = &unk_1000EA000;
    switch(v4[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator])
    {
      case 1:
        unint64_t v7 = 0xE300000000000000;
        uint64_t v8 = 7233894;
        break;
      case 2:
        uint64_t v8 = 0x73736572706D6F63;
        unint64_t v7 = 0xEA0000000000726FLL;
        break;
      case 3:
        unint64_t v7 = 0xE400000000000000;
        uint64_t v8 = 1668184435;
        break;
      case 4:
        uint64_t v8 = 0x6C75637269636572;
        unint64_t v7 = 0xED00006E6F697461;
        break;
      case 5:
        unint64_t v7 = 0xE500000000000000;
        uint64_t v8 = 0x65736F6C63;
        break;
      default:
        break;
    }
    sub_10000A56C(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Animate current indicator from %{public}s to %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (v4[v6[216]] == 5)
  {
    [*(id *)&v4[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer] invalidate];
    sub_10005520C();
    return;
  }
  if (!a1) {
    goto LABEL_25;
  }
  if (a1 == 5)
  {
    sub_10005520C();
    return;
  }
  if (v4[v6[216]]) {
    uint64_t v12 = &off_1000CA058;
  }
  else {
LABEL_25:
  }
    uint64_t v12 = &off_1000CA030;
  sub_100055F20(a1, (uint64_t)v12);
}

void sub_100054B58()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator)) {
    sub_100054E60();
  }
  if (!*(void *)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator))
  {
    sub_100055064();
  }
}

uint64_t sub_100054BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  sub_100006730(&qword_1000E6488);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B30E0;
  unint64_t v7 = *(void **)(v3 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator);
  *(void *)(inited + 32) = v7;
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator);
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fanButton);
    id v10 = v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)(inited + 40) = v9;
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator);
  if (v11)
  {
    uint64_t v12 = *(void **)(v11 + OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_compressorButton);
    id v13 = v12;
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)(inited + 48) = v12;
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator);
  if (v14)
  {
    char v15 = *(void **)(v14 + OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_syncButton);
    id v16 = v15;
  }
  else
  {
    char v15 = 0;
  }
  *(void *)(inited + 56) = v15;
  uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculationIdicator);
  if (v17)
  {
    uint64_t v18 = *(void **)(v17 + OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_recirculationButton);
    id v19 = v18;
  }
  else
  {
    uint64_t v18 = 0;
  }
  *(void *)(inited + 64) = v18;
  v36[0] = inited;
  specialized Array._endMutation()();
  uint64_t v20 = inited;
  id v21 = v7;
  for (uint64_t i = 4; ; ++i)
  {
    uint64_t v23 = *(void **)(v20 + 8 * i);
    if (v23)
    {
      sub_100057C60(a1, (uint64_t)v36);
      uint64_t v24 = v37;
      if (v37)
      {
        id v25 = sub_100057CC8(v36, v37);
        uint64_t v26 = *(void *)(v24 - 8);
        __n128 v27 = __chkstk_darwin(v25);
        unint64_t v29 = (char *)&v36[-1] - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v26 + 16))(v29, v27);
        id v30 = v23;
        uint64_t v31 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v24);
        sub_10000AC28((uint64_t)v36);
      }
      else
      {
        id v32 = v23;
        uint64_t v31 = 0;
      }
      [v23 addTarget:v31 action:a2 forControlEvents:v35];

      swift_unknownObjectRelease();
    }
    if (i == 8) {
      break;
    }
    uint64_t v33 = i - 3;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      return swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

void sub_100054E60()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v2 + *(int *)(type metadata accessor for ClimateZone() + 28));
  id v4 = objc_allocWithZone((Class)type metadata accessor for ClimateTemperatureIndicator());
  sub_100090A44(v3, 0, 0, 1, 1);
  id v6 = v5;
  id v7 = [v5 titleLabel];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [self monospacedDigitSystemFontOfSize:14.0 weight:UIFontWeightMedium];
    [v8 setFont:v9];
  }
  id v10 = self;
  uint64_t v11 = v6;
  id v12 = [v10 configurationWithPointSize:5 weight:14.0];
  id v13 = ClimateButton.imageSymbolConfiguration.getter();
  uint64_t v14 = *(void **)&v11[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v11[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v12;
  id v15 = v12;

  id v16 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  LOBYTE(v14) = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

  *(void *)&v11[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_delegate + 8] = &off_1000CB8C8;
  swift_unknownObjectWeakAssign();
  sub_10008BF7C(v11);
  uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator);
  *(void *)(v1 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator) = v11;
}

void sub_100055064()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for ClimateZone();
  id v7 = *(id *)(v5 + *(int *)(v6 + 28));
  sub_100008F00((uint64_t)v4);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_10002FBE4((uint64_t)v4);
  }
  else
  {
    uint64_t v8 = *(void **)&v4[*(int *)(v6 + 32)];
    id v9 = v8;
    sub_100057C04((uint64_t)v4);
    if (v8)
    {
      id v10 = objc_allocWithZone((Class)type metadata accessor for ClimateFanIndicator());
      id v11 = v9;
      id v12 = sub_10006265C(v11);
      *(void *)&v12[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_delegate + 8] = &off_1000CB8B8;
      swift_unknownObjectWeakAssign();
      sub_10008BF7C(v12);
      [v12 setAlpha:0.0];
      id v13 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator);
      *(void *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator) = v12;
    }
  }
}

void sub_10005520C()
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000EA798;
  uint64_t v2 = v0;
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)id v4 = 136446210;
    unint64_t v5 = 0xEB00000000657275;
    uint64_t v6 = 0x74617265706D6574;
    switch(v2[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator])
    {
      case 1:
        unint64_t v5 = 0xE300000000000000;
        uint64_t v6 = 7233894;
        break;
      case 2:
        unint64_t v5 = 0xEA0000000000726FLL;
        uint64_t v6 = 0x73736572706D6F63;
        break;
      case 3:
        unint64_t v5 = 0xE400000000000000;
        uint64_t v6 = 1668184435;
        break;
      case 4:
        unint64_t v5 = 0xED00006E6F697461;
        uint64_t v6 = 0x6C75637269636572;
        break;
      case 5:
        unint64_t v5 = 0xE500000000000000;
        uint64_t v6 = 0x65736F6C63;
        break;
      default:
        break;
    }
    sub_10000A56C(v6, v5, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v3, "Show current indicator: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v7 = *(void **)&v2[OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator];
  if (v7) {
    [v7 setAlpha:0.0];
  }
  uint64_t v8 = *(void **)&v2[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator];
  if (v8) {
    [v8 setAlpha:0.0];
  }
  id v9 = *(void **)&v2[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator];
  if (v9) {
    [v9 setAlpha:0.0];
  }
  id v10 = *(void **)&v2[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator];
  if (v10) {
    [v10 setAlpha:0.0];
  }
  id v11 = *(void **)&v2[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculationIdicator];
  if (v11) {
    [v11 setAlpha:0.0];
  }
  [*(id *)&v2[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeButton] setAlpha:0.0];
  uint64_t v12 = self;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v2;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100057BEC;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = (uint64_t)sub_10002AFD4;
  aBlock[5] = v14;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100093D88;
  aBlock[3] = (uint64_t)&unk_1000CBB30;
  id v15 = _Block_copy(aBlock);
  id v16 = v2;
  swift_retain();
  swift_release();
  [(id)v12 performWithoutAnimation:v15];
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x100055640);
  }
  uint64_t v17 = sub_1000556F8(v16[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator]);
  if (v17)
  {
    uint64_t v18 = v17;
    [v17 setAlpha:1.0];
    swift_release();
  }
  else
  {
    swift_release();
  }
}

void sub_100055658(uint64_t a1)
{
  uint64_t v1 = sub_1000556F8(*(unsigned char *)(a1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator));
  if (v1)
  {
    uint64_t v2 = v1;
    if (qword_1000E4710 != -1) {
      swift_once();
    }
    v3[0] = xmmword_1000EA860;
    v3[1] = *(_OWORD *)algn_1000EA870;
    v3[2] = xmmword_1000EA880;
    [v2 setTransform:v3];
  }
}

void *sub_1000556F8(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator;
      goto LABEL_7;
    case 2:
      uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator;
      goto LABEL_7;
    case 3:
      uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator;
      goto LABEL_7;
    case 4:
      uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculationIdicator;
      goto LABEL_7;
    case 5:
      os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeButton);
      goto LABEL_10;
    default:
      uint64_t v2 = OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator;
LABEL_7:
      os_log_type_t v3 = *(void **)(v1 + v2);
      if (v3) {
LABEL_10:
      }
        id v4 = v3;
      return v3;
  }
}

void sub_1000557AC()
{
  uint64_t v1 = self;
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v8[4] = sub_100057BAC;
  v8[5] = v2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000541CC;
  v8[3] = &unk_1000CBAB8;
  os_log_type_t v3 = _Block_copy(v8);
  swift_release();
  id v4 = [v1 scheduledTimerWithTimeInterval:0 repeats:v3 block:3.0];
  _Block_release(v3);
  uint64_t v5 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v6)
  {
    [v6 invalidate];
    id v7 = *(void **)(v0 + v5);
  }
  else
  {
    id v7 = 0;
  }
  *(void *)(v0 + v5) = v4;
}

void sub_1000558D8(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    os_log_type_t v3 = (unsigned char *)Strong;
    id v4 = *(void **)(Strong + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
    if (v4)
    {
      sub_100007310(0, (unint64_t *)&unk_1000E57A0);
      id v5 = a1;
      id v6 = v4;
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
        if ([v5 isValid])
        {
          if (qword_1000E46D8 != -1) {
            swift_once();
          }
          uint64_t v8 = qword_1000EA798;
          os_log_type_t v9 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v8, v9))
          {
            id v10 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v10 = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, v9, "Reset indicator timer fired", v10, 2u);
            swift_slowDealloc();
          }
          uint64_t v11 = v3[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator];
          v3[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator] = 0;
          sub_100054234(v11);
        }
      }
    }
  }
}

void sub_100055A58()
{
  sub_100005690(*(void *)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeAction));
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeButton);
}

id sub_100055B1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCompactStatusBarView();
  [super dealloc];
}

uint64_t sub_100055C24()
{
  return type metadata accessor for ClimateCompactStatusBarView();
}

uint64_t type metadata accessor for ClimateCompactStatusBarView()
{
  uint64_t result = qword_1000E6478;
  if (!qword_1000E6478) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100055C78()
{
  return swift_updateClassMetadata2();
}

void sub_100055CEC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator);
  if (v1)
  {
    id v2 = [v1 layer];
    [v2 removeAllAnimations];
  }
  os_log_type_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator);
  if (v3)
  {
    id v4 = [v3 layer];
    [v4 removeAllAnimations];
  }
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeButton), "layer"));
  [v5 removeAllAnimations];

  id v6 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator);
  if (v6)
  {
    id v7 = [v6 layer];
    [v7 removeAllAnimations];
  }
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator);
  if (v8)
  {
    id v9 = [v8 layer];
    [v9 removeAllAnimations];
  }
}

void sub_100055E34(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = Strong;
    double v5 = 1.0;
    if (a2) {
      double v5 = 0.0;
    }
    [Strong setAlpha:v5];
  }
}

void sub_100055EA4(char a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v6 = (unsigned char *)Strong;
    if (a1 & 1) != 0 && (a3)
    {
      char v7 = *(unsigned char *)(Strong + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator);
      v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator] = 0;
      sub_100054234(v7);
    }
  }
}

void sub_100055F20(char a1, uint64_t a2)
{
  id v4 = sub_1000556F8(a1);
  if (v4)
  {
    id v18 = v4;
    double v5 = sub_1000556F8(*(unsigned char *)(v2 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator));
    if (v5)
    {
      id v6 = v5;
      sub_100055CEC();
      uint64_t v7 = qword_1000E4710;
      id v8 = v18;
      if (v7 != -1) {
        swift_once();
      }
      long long aBlock = xmmword_1000EA860;
      long long v20 = *(_OWORD *)algn_1000EA870;
      long long v21 = xmmword_1000EA880;
      [v8 setTransform:&aBlock];

      [v8 setAlpha:1.0];
      [v6 setAlpha:0.0];
      uint64_t v9 = qword_1000E4708;
      id v10 = v6;
      if (v9 != -1) {
        swift_once();
      }
      long long aBlock = xmmword_1000EA830;
      long long v20 = xmmword_1000EA840;
      long long v21 = xmmword_1000EA850;
      [v10 setTransform:&aBlock];

      uint64_t v11 = self;
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = v8;
      _OWORD v12[3] = v10;
      v12[4] = a2;
      *(void *)&long long v21 = sub_100057558;
      *((void *)&v21 + 1) = v12;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v20 = sub_10005FC84;
      *((void *)&v20 + 1) = &unk_1000CB900;
      uint64_t v13 = _Block_copy(&aBlock);
      id v14 = v8;
      id v15 = v10;
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v16 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(void *)&long long v21 = sub_1000575B4;
      *((void *)&v21 + 1) = v16;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v20 = sub_10005FCC8;
      *((void *)&v20 + 1) = &unk_1000CB950;
      uint64_t v17 = _Block_copy(&aBlock);
      swift_release();
      [v11 _animateUsingSpringWithDuration:0 delay:v13 options:v17 mass:0.513 stiffness:0.0 damping:2.0 initialVelocity:300.0 animations:50.0 completion:0.0];

      _Block_release(v17);
      _Block_release(v13);
    }
    else
    {
    }
  }
}

uint64_t sub_100056254(void *a1, void *a2, uint64_t a3)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v9;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = &xmmword_1000B2000;
  if (!v11) {
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a3 + 32) & 1) == 0)
  {
    if (v11 != 1)
    {
      uint64_t v16 = 33;
      while (1)
      {
        uint64_t v17 = v16 - 31;
        if (__OFADD__(v16 - 32, 1)) {
          break;
        }
        if (*(unsigned char *)(a3 + v16)) {
          goto LABEL_3;
        }
        ++v16;
        if (v17 == v11) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_12:
    uint64_t v25 = v9;
    id v26 = self;
    os_log_type_t v3 = (void *)swift_allocObject();
    v3[2] = sub_1000575FC;
    _OWORD v3[3] = v8;
    uint64_t v18 = swift_allocObject();
    __n128 v27 = sub_10002AF48;
    *(void *)(v18 + 16) = sub_10002AF48;
    *(void *)(v18 + 24) = v3;
    *(void *)&long long v30 = sub_10001C5F8;
    *((void *)&v30 + 1) = v18;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v29 = sub_100093D88;
    *((void *)&v29 + 1) = &unk_1000CBA18;
    uint64_t v12 = (long long *)_Block_copy(&aBlock);
    id v4 = (void *)*((void *)&v30 + 1);
    uint64_t v10 = v8;
    id v19 = a2;
    long long v20 = a1;
    long long v21 = v19;
    uint64_t v22 = v20;
    swift_retain();
    swift_retain();
    swift_release();
    [v26 performWithoutAnimation:v12];
    _Block_release(v12);
    LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v20 & 1) == 0)
    {
      uint64_t v10 = v25;
      uint64_t v12 = &xmmword_1000B2000;
      goto LABEL_14;
    }
    goto LABEL_19;
  }
LABEL_3:
  uint64_t v13 = qword_1000E4708;
  id v14 = a2;
  id v15 = a1;
  os_log_type_t v3 = v14;
  id v4 = v15;
  if (v13 != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    long long aBlock = xmmword_1000EA830;
    long long v29 = xmmword_1000EA840;
    long long v30 = xmmword_1000EA850;
    [v4 setTransform:&aBlock];
    if (qword_1000E4710 != -1) {
      swift_once();
    }
    long long aBlock = xmmword_1000EA860;
    long long v29 = *(_OWORD *)algn_1000EA870;
    long long v30 = xmmword_1000EA880;
    [v3 setTransform:&aBlock];
    __n128 v27 = 0;
    os_log_type_t v3 = 0;
LABEL_14:
    if (sub_100053F24(0, a3)) {
      break;
    }
    a3 = self;
    a2 = (void *)swift_allocObject();
    a2[2] = sub_100057604;
    a2[3] = v10;
    a1 = (void *)swift_allocObject();
    a1[2] = sub_10002AFE0;
    a1[3] = a2;
    *(void *)&long long v30 = sub_10002AFD4;
    *((void *)&v30 + 1) = a1;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = *((void *)v12 + 81);
    *(void *)&long long v29 = sub_100093D88;
    *((void *)&v29 + 1) = &unk_1000CBA90;
    uint64_t v24 = _Block_copy(&aBlock);
    id v4 = (void *)*((void *)&v30 + 1);
    swift_retain();
    swift_retain();
    swift_release();
    [(id)a3 performWithoutAnimation:v24];
    swift_release();
    swift_release();
    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    sub_100005690((uint64_t)v27);
    uint64_t result = swift_release();
    if ((v24 & 1) == 0) {
      return result;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
  }
  [a1 setAlpha:0.0];
  [a2 setAlpha:1.0];
  swift_release();
  swift_release();
  return sub_100005690((uint64_t)v27);
}

id sub_100056710(id a1, void *a2)
{
  if (qword_1000E4708 != -1) {
    swift_once();
  }
  long long v5 = xmmword_1000EA830;
  long long v6 = xmmword_1000EA840;
  long long v7 = xmmword_1000EA850;
  [a1 setTransform:&v5];
  if (qword_1000E4710 != -1) {
    swift_once();
  }
  long long v5 = xmmword_1000EA860;
  long long v6 = *(_OWORD *)algn_1000EA870;
  long long v7 = xmmword_1000EA880;
  return [a2 setTransform:&v5];
}

void sub_1000567F8(char a1)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    os_log_type_t v3 = Strong;
    if (a1)
    {
      switch(*((unsigned char *)Strong + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v4 & 1) == 0) {
            sub_1000557AC();
          }
          goto LABEL_7;
        default:

          swift_bridgeObjectRelease();
          break;
      }
    }
    else
    {
LABEL_7:
    }
  }
}

char *sub_10005695C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a1;
  uint64_t v12 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_fanIndicator] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculationIdicator] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer] = 0;
  v6[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator] = 0;
  uint64_t v15 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeButton;
  id v16 = objc_allocWithZone((Class)type metadata accessor for ClimateCloseButton());
  uint64_t v17 = v6;
  *(void *)&v6[v15] = sub_100044AC8();
  *(void *)&v17[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_cabin] = a2;
  *(void *)&v17[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculation] = a3;
  *(void *)&v17[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_sync] = a4;
  uint64_t v18 = (uint64_t *)&v17[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeAction];
  uint64_t *v18 = a5;
  v18[1] = a6;
  id v19 = a4;
  id v20 = a2;
  id v21 = a3;
  sub_10001C6B0(a5);

  sub_10000ABC4(v47, (uint64_t)v14);
  *(void *)&v17[OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator] = 0;
  sub_10000ABC4((uint64_t)v14, (uint64_t)&v17[OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone]);
  uint64_t v22 = (objc_class *)type metadata accessor for ClimateStatusBarView();
  v48.receiver = v17;
  v48.super_class = v22;
  id v23 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100057C04((uint64_t)v14);
  uint64_t v24 = (char *)v23;
  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100054E60();
  sub_100055064();
  uint64_t v25 = *(void **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_cabin];
  if (v25)
  {
    id v26 = objc_allocWithZone((Class)type metadata accessor for ClimateCompressorIndicator());
    id v27 = v25;
    uint64_t v28 = sub_1000506D4(v27);
    *(void *)&v28[OBJC_IVAR____TtC7Climate26ClimateCompressorIndicator_delegate + 8] = &off_1000CB8A8;
    swift_unknownObjectWeakAssign();
    sub_10008BF7C(v28);
    [v28 setAlpha:0.0];
    long long v29 = *(void **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator];
    *(void *)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_compressorIndicator] = v28;
  }
  long long v30 = *(void **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_sync];
  if (v30)
  {
    id v31 = objc_allocWithZone((Class)type metadata accessor for ClimateSyncIndicator());
    id v32 = v30;
    uint64_t v33 = sub_10007FBFC(v32);
    *(void *)&v33[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_delegate + 8] = &off_1000CB888;
    swift_unknownObjectWeakAssign();
    sub_10008BF7C(v33);
    [v33 setAlpha:0.0];
    id v34 = *(void **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator];
    *(void *)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_syncIndicator] = v33;
  }
  uint64_t v35 = *(void **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculation];
  if (v35)
  {
    id v36 = objc_allocWithZone((Class)type metadata accessor for ClimateRecirculationIdicator());
    id v37 = v35;
    id v38 = sub_10002FE58(v37);
    *(void *)&v38[OBJC_IVAR____TtC7Climate28ClimateRecirculationIdicator_delegate + 8] = &off_1000CB898;
    swift_unknownObjectWeakAssign();
    sub_10008BF7C(v38);
    [v38 setAlpha:0.0];
    id v39 = *(void **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculationIdicator];
    *(void *)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_recirculationIdicator] = v38;
  }
  char v40 = *(char **)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeButton];
  [v40 setTranslatesAutoresizingMaskIntoConstraints:0, v47];
  uint64_t v41 = *(void *)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeAction];
  uint64_t v42 = *(void *)&v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_closeAction + 8];
  id v43 = (uint64_t *)&v40[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v44 = *v43;
  uint64_t *v43 = v41;
  v43[1] = v42;
  sub_10001C6B0(v41);
  sub_100005690(v44);
  sub_10008BF7C(v40);
  [v40 setAlpha:0.0];
  char v45 = v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator];
  v24[OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator] = 0;
  sub_100054234(v45);

  sub_100057C04(v47);
  return v24;
}

void sub_100056DAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v3)
  {
    [v3 invalidate];
    char v4 = *(void **)(v1 + v2);
  }
  else
  {
    char v4 = 0;
  }
  *(void *)(v1 + v2) = 0;

  uint64_t v5 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator;
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator))
  {
    case 5:
      swift_bridgeObjectRelease();
      break;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
      {
        id v7 = [self sharedApplication];
        id v8 = [v7 delegate];

        if (!v8)
        {
          __break(1u);
          JUMPOUT(0x100056FF4);
        }
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        id v9 = sub_10008EAA4();
        swift_unknownObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();

        swift_release();
        swift_release();
        if (v11)
        {
          char v10 = *(unsigned char *)(v1 + v5);
          *(unsigned char *)(v1 + v5) = 4;
          sub_100054234(v10);
          sub_1000557AC();
        }
      }
      break;
  }
}

void sub_10005700C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v3)
  {
    [v3 invalidate];
    char v4 = *(void **)(v1 + v2);
  }
  else
  {
    char v4 = 0;
  }
  *(void *)(v1 + v2) = 0;

  uint64_t v5 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator;
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator))
  {
    case 5:
      swift_bridgeObjectRelease();
      break;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
      {
        id v7 = [self sharedApplication];
        id v8 = [v7 delegate];

        if (!v8)
        {
          __break(1u);
          JUMPOUT(0x100057254);
        }
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        id v9 = sub_10008EAA4();
        swift_unknownObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();

        swift_release();
        swift_release();
        if (v11)
        {
          char v10 = *(unsigned char *)(v1 + v5);
          *(unsigned char *)(v1 + v5) = 2;
          sub_100054234(v10);
          sub_1000557AC();
        }
      }
      break;
  }
}

void sub_10005726C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v3)
  {
    [v3 invalidate];
    char v4 = *(void **)(v1 + v2);
  }
  else
  {
    char v4 = 0;
  }
  *(void *)(v1 + v2) = 0;

  uint64_t v5 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator;
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator))
  {
    case 5:
      swift_bridgeObjectRelease();
      break;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
      {
        id v7 = [self sharedApplication];
        id v8 = [v7 delegate];

        if (!v8)
        {
          __break(1u);
          JUMPOUT(0x1000574F0);
        }
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        id v9 = sub_10008EAA4();
        swift_unknownObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();

        swift_release();
        swift_release();
        if (v12)
        {
          uint64_t v10 = v1 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
          swift_beginAccess();
          if (([*(id *)(v10 + *(int *)(type metadata accessor for ClimateZone() + 28)) targetTemperatureDisabled] & 1) == 0)
          {
            char v11 = *(unsigned char *)(v1 + v5);
            *(unsigned char *)(v1 + v5) = 0;
            sub_100054234(v11);
          }
        }
      }
      break;
  }
}

uint64_t sub_100057510()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100057558()
{
  return sub_100056254(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100057564(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057574()
{
  return swift_release();
}

uint64_t sub_10005757C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000575B4(char a1)
{
}

uint64_t sub_1000575BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000575FC()
{
  return sub_100056710(*(id *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_100057604()
{
  uint64_t v1 = *(void **)(v0 + 24);
  [*(id *)(v0 + 16) setAlpha:0.0];

  return [v1 setAlpha:1.0];
}

uint64_t sub_100057650()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057688()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057698()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000576A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v3)
  {
    [v3 invalidate];
    char v4 = *(void **)(v1 + v2);
  }
  else
  {
    char v4 = 0;
  }
  *(void *)(v1 + v2) = 0;

  uint64_t v5 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator;
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator))
  {
    case 5:
      swift_bridgeObjectRelease();
      break;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
      {
        id v7 = [self sharedApplication];
        id v8 = [v7 delegate];

        if (!v8)
        {
          __break(1u);
          JUMPOUT(0x100057934);
        }
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        id v9 = sub_10008EAA4();
        swift_unknownObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();

        swift_release();
        swift_release();
        if (v12)
        {
          uint64_t v10 = v1 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
          swift_beginAccess();
          if (([*(id *)(v10 + *(int *)(type metadata accessor for ClimateZone() + 28)) targetTemperatureDisabled] & 1) == 0)
          {
            char v11 = *(unsigned char *)(v1 + v5);
            *(unsigned char *)(v1 + v5) = 1;
            sub_100054234(v11);
            sub_1000557AC();
          }
        }
      }
      break;
  }
}

void sub_10005794C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer;
  os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_resetIndicatorTimer);
  if (v3)
  {
    [v3 invalidate];
    char v4 = *(void **)(v1 + v2);
  }
  else
  {
    char v4 = 0;
  }
  *(void *)(v1 + v2) = 0;

  uint64_t v5 = OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator;
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateCompactStatusBarView_currentIndicator))
  {
    case 5:
      swift_bridgeObjectRelease();
      break;
    default:
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
      {
        id v7 = [self sharedApplication];
        id v8 = [v7 delegate];

        if (!v8)
        {
          __break(1u);
          JUMPOUT(0x100057B94);
        }
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        id v9 = sub_10008EAA4();
        swift_unknownObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();

        swift_release();
        swift_release();
        if (v11)
        {
          char v10 = *(unsigned char *)(v1 + v5);
          *(unsigned char *)(v1 + v5) = 3;
          sub_100054234(v10);
          sub_1000557AC();
        }
      }
      break;
  }
}

void sub_100057BAC(void *a1)
{
}

uint64_t sub_100057BB4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100057BEC()
{
  sub_100055658(*(void *)(v0 + 16));
}

uint64_t sub_100057BF4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057C04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClimateZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100057C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E5420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_100057CC8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100057D0C()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_100057D44()
{
  sub_100055E34(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_100057D50(char a1)
{
  sub_100055EA4(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

char *sub_100057DA0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  char v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = (objc_class *)type metadata accessor for ClimateDeepLinkButton();
  v21.receiver = v1;
  v21.super_class = v7;
  id v8 = [super init];
  id v9 = &v8[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v11 = *(void *)v9;
  uint64_t v10 = *((void *)v9 + 1);
  *(_OWORD *)id v9 = xmmword_1000B35B0;
  char v12 = v8;
  if (!v10
    || (v11 == 0x73697370696C6C65 ? (BOOL v13 = v10 == 0xE800000000000000) : (BOOL v13 = 0),
        !v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(&v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v3);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v4 + 32))(v16 + v15, v6, v3);
  uint64_t v17 = (uint64_t *)&v12[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v18 = *v17;
  *uint64_t v17 = (uint64_t)sub_100058404;
  v17[1] = v16;
  swift_retain();
  sub_100005690(v18);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  swift_release();
  return v12;
}

void sub_10005801C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100006730(&qword_1000E64B8);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v12 = (void *)Strong;
    sub_10007D794(a3, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {

      sub_100058478((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      id v13 = [v12 window];
      if (v13
        && (v14 = v13, id v15 = [v13 windowScene],
                       v14,
                       v15))
      {
        URL._bridgeToObjectiveC()(v16);
        uint64_t v18 = v17;
        [v15 openURL:v17 options:0 completionHandler:0];

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
    }
  }
}

id sub_1000582A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateDeepLinkButton();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateDeepLinkButton()
{
  return self;
}

uint64_t sub_100058300()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100058338()
{
  uint64_t v1 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100058404(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10005801C(a1, v4, v5);
}

uint64_t sub_100058478(uint64_t a1)
{
  uint64_t v2 = sub_100006730(&qword_1000E64B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static ClimatePresentation.restricted.getter()
{
  return 4;
}

void *ClimatePresentation.disabled.unsafeMutableAddressor()
{
  return &static ClimatePresentation.disabled;
}

void *ClimatePresentation.invalid.unsafeMutableAddressor()
{
  return &static ClimatePresentation.invalid;
}

void *ClimatePresentation.on.unsafeMutableAddressor()
{
  return &static ClimatePresentation.on;
}

void *ClimatePresentation.restricted.unsafeMutableAddressor()
{
  return &static ClimatePresentation.restricted;
}

void *ClimatePresentation.auto.unsafeMutableAddressor()
{
  return &static ClimatePresentation.auto;
}

uint64_t static ClimatePresentation.auto.getter()
{
  return 2;
}

uint64_t static ClimatePresentation.invalid.getter()
{
  return 8;
}

uint64_t static ClimatePresentation.disabled.getter()
{
  return 16;
}

Swift::Int sub_100058538()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100058580()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000585AC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000585F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100043A08();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t ClimatePresentation.description.getter(char a1)
{
  return sub_100058670(a1, 73, 0xD00000000000001FLL, (void *)0x80000001000B7540);
}

uint64_t ClimatePresentation.accessibilityLabel.getter(char a1)
{
  return sub_100058670(a1, 52, 0x656C62617369643CLL, (void *)0xEA00000000003D64);
}

uint64_t sub_100058670(char a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v7._uint64_t countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  if ((a1 & 0x10) != 0) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if ((a1 & 0x10) != 0) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x64696C61766E6920;
  v11._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v11);
  if ((a1 & 8) != 0) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if ((a1 & 8) != 0) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x6369727473657220;
  v15._object = (void *)0xEC0000003D646574;
  String.append(_:)(v15);
  if ((a1 & 4) != 0) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if ((a1 & 4) != 0) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x3D6F74756120;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  if ((a1 & 2) != 0) {
    uint64_t v20 = 1702195828;
  }
  else {
    uint64_t v20 = 0x65736C6166;
  }
  if ((a1 & 2) != 0) {
    unint64_t v21 = 0xE400000000000000;
  }
  else {
    unint64_t v21 = 0xE500000000000000;
  }
  unint64_t v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 1030647584;
  v23._object = (void *)0xE400000000000000;
  String.append(_:)(v23);
  if (a1) {
    uint64_t v24 = 1702195828;
  }
  else {
    uint64_t v24 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v25 = 0xE400000000000000;
  }
  else {
    unint64_t v25 = 0xE500000000000000;
  }
  unint64_t v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 62;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return 0;
}

uint64_t sub_100058824()
{
  return ClimatePresentation.description.getter(*v0);
}

uint64_t _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(char a1, char a2, char a3, char a4, char a5)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4) {
          uint64_t result = 15;
        }
        else {
          uint64_t result = 7;
        }
        if ((a5 & 1) == 0) {
          return result;
        }
        return result | 0x10;
      }
      if (a4) {
        uint64_t result = 11;
      }
      else {
        uint64_t result = 3;
      }
      if (a5) {
        return result | 0x10;
      }
    }
    else if (a3)
    {
      if (a4) {
        uint64_t result = 13;
      }
      else {
        uint64_t result = 5;
      }
      if (a5) {
        return result | 0x10;
      }
    }
    else
    {
      if (a4) {
        uint64_t result = 9;
      }
      else {
        uint64_t result = 1;
      }
      if (a5) {
        return result | 0x10;
      }
    }
  }
  else if (a2)
  {
    if (a3)
    {
      if (a4) {
        uint64_t result = 14;
      }
      else {
        uint64_t result = 6;
      }
      if (a5) {
        return result | 0x10;
      }
    }
    else
    {
      if (a4) {
        uint64_t result = 10;
      }
      else {
        uint64_t result = 2;
      }
      if (a5) {
        return result | 0x10;
      }
    }
  }
  else if (a3)
  {
    if (a4) {
      uint64_t result = 12;
    }
    else {
      uint64_t result = 4;
    }
    if (a5) {
      return result | 0x10;
    }
  }
  else
  {
    if (a4) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = 0;
    }
    if (a5) {
      return result | 0x10;
    }
  }
  return result;
}

unint64_t sub_1000588EC()
{
  unint64_t result = qword_1000E64C0;
  if (!qword_1000E64C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E64C0);
  }
  return result;
}

unint64_t sub_100058944()
{
  unint64_t result = qword_1000E64C8;
  if (!qword_1000E64C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E64C8);
  }
  return result;
}

unint64_t sub_10005899C()
{
  unint64_t result = qword_1000E64D0;
  if (!qword_1000E64D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E64D0);
  }
  return result;
}

unint64_t sub_1000589F4()
{
  unint64_t result = qword_1000E64D8;
  if (!qword_1000E64D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E64D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimatePresentation()
{
  return &type metadata for ClimatePresentation;
}

uint64_t sub_100058A58()
{
  Swift::UInt v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_seatHeatingCooling);
  if (CAFSeatHeatingCooling.isCooling.getter()) {
    char v2 = 1;
  }
  else {
    char v2 = CAFSeatHeatingCooling.isHeating.getter();
  }
  if ([v1 hasOn] && !objc_msgSend(v1, "on"))
  {
    uint64_t v3 = &selRef_onDisabled;
    uint64_t v4 = &selRef_onInvalid;
    uint64_t v5 = &selRef_onRestricted;
  }
  else
  {
    uint64_t v3 = &selRef_heatingCoolingLevelDisabled;
    uint64_t v4 = &selRef_heatingCoolingLevelInvalid;
    uint64_t v5 = &selRef_heatingCoolingLevelRestricted;
  }
  char v6 = [v1 autoMode];
  char v7 = [v1 *v5];
  char v8 = [v1 *v4];
  char v9 = [v1 *v3];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2 & 1, v6, v7, v8, v9);
}

char *sub_100058C74(void *a1)
{
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)&v1[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_currentValue] = 0;
  uint64_t v7 = OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_autoModeGlyph;
  id v8 = objc_allocWithZone((Class)UIImageView);
  char v9 = v1;
  *(void *)&v1[v7] = [v8 init];
  *(void *)&v9[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_seatHeatingCooling] = a1;
  sub_100007310(0, &qword_1000E65F0);
  id v10 = a1;
  CAFPositionedRequired.layoutKey.getter();
  sub_100023490();
  char v12 = v11;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  BOOL v13 = (v12 & 1) == 0;
  if (v12) {
    uint64_t v14 = 0xD00000000000001CLL;
  }
  else {
    uint64_t v14 = 0xD00000000000001BLL;
  }
  if (v13) {
    uint64_t v15 = 0x80000001000B7620;
  }
  else {
    uint64_t v15 = 0x80000001000B7640;
  }
  uint64_t v16 = (uint64_t *)&v9[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_symbolName];
  *uint64_t v16 = v14;
  v16[1] = v15;
  signed int v17 = [v10 heatingCoolingLevel];
  v9[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_isInPositiveRange] = v17 >= 0;
  swift_bridgeObjectRetain();
  unsigned int v18 = [v10 heatingCoolingLevel];
  id v19 = [v10 heatingCoolingLevelRange];
  sub_100031A38(v14, v15, 0, 0, v18, v19, 5.0);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();

  *(void *)&v9[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView] = v21;
  unint64_t v22 = (objc_class *)type metadata accessor for ClimateSeatHeatingCoolingServiceButton();
  v51.receiver = v9;
  v51.super_class = v22;
  Swift::String v23 = [v51 init];
  sub_100059810();
  [v10 registerObserver:v23];
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v10;
  unint64_t v26 = (uint64_t *)&v23[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v27 = *v26;
  *unint64_t v26 = (uint64_t)sub_100059EEC;
  v26[1] = v25;
  id v50 = v10;
  sub_100005690(v27);
  uint64_t v28 = qword_1000E46C0;
  long long v29 = v23;
  if (v28 != -1) {
    swift_once();
  }
  long long v30 = (void *)qword_1000EA740;
  uint64_t v31 = qword_1000EA750;
  if (qword_1000E4688 != -1) {
    swift_once();
  }
  id v32 = (void *)qword_1000EA700;
  uint64_t v33 = (void **)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  id v34 = *(void **)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
  uint64_t v35 = *(void **)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
  uint64_t v49 = *(void *)&v29[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
  *uint64_t v33 = v30;
  v33[1] = v32;
  v33[2] = (void *)v31;
  id v36 = v32;
  id v37 = v30;
  swift_bridgeObjectRetain_n();
  id v48 = v37;
  id v47 = v36;
  id v38 = *v33;
  id v39 = v33[1];
  uint64_t v40 = (uint64_t)v33[2];
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v41 = v38;
  id v42 = v39;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v40, v49);
    char v44 = v43;
    swift_bridgeObjectRelease();

    if (v44) {
      goto LABEL_17;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))((swift_isaMask & *(void *)v29) + 0x228))();
LABEL_17:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008EEE4();
  sub_100059294();

  return v29;
}

void sub_100059174(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if ([Strong isEnabled])
    {
      sub_10004D458();
      [a3 setHeatingCoolingLevel:*(unsigned int *)&v5[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_currentValue]];
      sub_100059294();
    }
  }
}

uint64_t sub_100059294()
{
  Swift::UInt v1 = v0;
  char v2 = *(void **)&v0[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_autoModeGlyph];
  if (v2)
  {
    id v3 = v2;
    [v3 setHidden:(sub_100058A58() & 0x1A) != 2];
  }
  sub_10009F8A4();
  [v0 setEnabled:(sub_100058A58() & 0x18) == 0];
  sub_100059440();
  sub_100088B54();
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView];
  uint64_t v5 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  id v6 = *(id *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  id v7 = [v6 colorWithAlphaComponent:0.25];
  id v8 = (void *)*((void *)v5 + 1);
  char v9 = *(void (**)(id, id, void *, void *))((swift_isaMask & *v4) + 0xD0);
  id v10 = v8;
  v9(v6, v7, v8, &_swiftEmptyDictionarySingleton);
  if ((sub_100058A58() & 0x18) != 0) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = [*(id *)&v1[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_seatHeatingCooling] heatingCoolingLevel];
  }
  *(_DWORD *)&v1[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_currentValue] = v11;
  return (*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x88))();
}

void sub_100059440()
{
  uint64_t v1 = v0;
  sub_10008896C();
  char v2 = sub_100058A58();
  if ((v2 & 0x19) != 1) {
    return;
  }
  char v3 = v2;
  if (CAFSeatHeatingCooling.isHeating.getter())
  {
    if ((v3 & 2) == 0)
    {
      if (qword_1000E4688 != -1) {
        swift_once();
      }
      uint64_t v4 = (void *)qword_1000EA700;
LABEL_12:
      id v5 = v4;
LABEL_17:
      uint64_t v8 = v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor;
      char v9 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor);
      int v7 = 1;
      id v10 = *(void **)(v1 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor);
      unsigned int v11 = v5;
      goto LABEL_18;
    }
    id v6 = [self systemOrangeColor];
    goto LABEL_16;
  }
  if (CAFSeatHeatingCooling.isCooling.getter())
  {
    if ((v3 & 2) == 0)
    {
      if (qword_1000E4690 != -1) {
        swift_once();
      }
      uint64_t v4 = (void *)qword_1000EA708;
      goto LABEL_12;
    }
    id v6 = [self systemBlueColor];
LABEL_16:
    id v5 = v6;
    goto LABEL_17;
  }
  int v7 = 0;
  uint64_t v8 = v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor;
  id v5 = *(id *)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  char v9 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
  id v10 = *(void **)(v1 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  unsigned int v11 = *(void **)(v1 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
LABEL_18:
  uint64_t v12 = *(void *)(v8 + 16);
  id v32 = v5;
  id v13 = v5;
  id v14 = v9;
  swift_bridgeObjectRetain();
  uint64_t v15 = v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  uint64_t v16 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  signed int v17 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  *(void *)uint64_t v15 = v10;
  *(void *)(v15 + 8) = v11;
  *(void *)(v15 + 16) = v12;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v19 = v10;
  id v20 = v11;
  swift_bridgeObjectRetain_n();
  id v21 = v19;
  id v22 = v20;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

LABEL_24:
    sub_100088B54();
    uint64_t v25 = *(void **)(v1 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView);
    id v26 = *(id *)(v15 + 8);
    id v27 = [v26 colorWithAlphaComponent:0.25];
    uint64_t v28 = *(void **)(v15 + 8);
    uint64_t v33 = v21;
    long long v29 = v17;
    long long v30 = *(void (**)(id, id, void *, void *))((swift_isaMask & *v25) + 0xD0);
    id v31 = v28;
    v30(v26, v27, v28, &_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (!v7) {
      return;
    }
    goto LABEL_25;
  }
  sub_10007C1D0(v12, v18);
  char v24 = v23;
  swift_bridgeObjectRelease();

  if ((v24 & 1) == 0) {
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0) {
    return;
  }
LABEL_25:
}

uint64_t sub_1000597C4()
{
  return CAFPositioned.layoutKey.getter();
}

void sub_100059810()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView];
  [v0 addSubview:v1];
  char v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  id v4 = [v1 leadingAnchor];
  id v5 = [v0 leadingAnchor];
  id v6 = [v4 constraintEqualToAnchor:v5];

  *(void *)(v3 + 32) = v6;
  id v7 = [v1 trailingAnchor];
  id v8 = [v0 trailingAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8];

  *(void *)(v3 + 40) = v9;
  id v10 = [v1 topAnchor];
  id v11 = [v0 topAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v3 + 48) = v12;
  id v13 = [v1 bottomAnchor];
  id v14 = [v0 bottomAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

uint64_t sub_100059A88()
{
  sub_100088B54();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_progressView);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  id v4 = [v3 colorWithAlphaComponent:0.25];
  id v5 = *(void **)(v2 + 8);
  id v6 = *(uint64_t (**)(id, id, void *, void *))((swift_isaMask & *v1) + 0xD0);
  id v7 = v5;
  return v6(v3, v4, v5, &_swiftEmptyDictionarySingleton);
}

void sub_100059B50()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate38ClimateSeatHeatingCoolingServiceButton_autoModeGlyph);
}

id sub_100059BB4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSeatHeatingCoolingServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateSeatHeatingCoolingServiceButton()
{
  return self;
}

uint64_t sub_100059D44(uint64_t a1)
{
  uint64_t result = sub_100059E34(&qword_1000E65D8);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100059D88(uint64_t a1)
{
  uint64_t result = sub_100059E34(&qword_1000E65D8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100059DCC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100059E34(&qword_1000E65E0);
  uint64_t result = sub_100059E34(&qword_1000E65E8);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100059E34(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClimateSeatHeatingCoolingServiceButton();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100059E74()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100059EAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100059EEC(uint64_t a1)
{
  sub_100059174(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void *sub_100059EF8(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain();
    do
    {
      a1(&v11, v9);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += v10;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v12;
  }
  return result;
}

void sub_10005A070(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  unint64_t v7 = (unint64_t)sub_100059EF8((void (*)(uint64_t *__return_ptr, uint64_t))sub_10005AC4C, (uint64_t)v10, v6);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_100007310(0, &qword_1000E5680);
    uint64_t v8 = (void *)UIStackView.init(axis:spacing:arrangedSubviews:)();
    [v8 setDistribution:1];
    [v8 setAlignment:3];
    [*(id *)(a5 + OBJC_IVAR____TtC7Climate25ClimateCarPlaceholderView_carView) addArrangedSubview:v8];

    return;
  }
  swift_bridgeObjectRelease();
}

id sub_10005A19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = a3;
  uint64_t v72 = a2;
  char v73 = (void *)type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(v73 - 1);
  __chkstk_darwin(v73);
  unint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006730(&qword_1000E59C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CAUVehicleLayoutInfo();
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ClimateZone();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14 - 8);
  signed int v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (char *)&v70 - v19;
  __chkstk_darwin(v21);
  char v23 = (char *)&v70 - v22;
  uint64_t v24 = *(void *)(v3 + *(int *)(type metadata accessor for ClimateSystemManager() + 36));
  if (*(void *)(v24 + 16) && (unint64_t v25 = sub_10007C5C4(a1), (v26 & 1) != 0))
  {
    sub_10000ABC4(*(void *)(v24 + 56) + *(void *)(v15 + 72) * v25, (uint64_t)v20);
    sub_10000D1A0((uint64_t)v20, (uint64_t)v23);
    id v27 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
    [v27 setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v70 = v23;
    sub_10000ABC4((uint64_t)v23, (uint64_t)v17);
    uint64_t v28 = type metadata accessor for CAUBaselineAnchor();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v10, 1, 1, v28);
    uint64_t v29 = v72;
    swift_unknownObjectRetain();
    CAUVehicleLayoutInfo.init(x:y:height:width:baselineAnchor:)();
    id v30 = objc_allocWithZone((Class)type metadata accessor for ClimateZonePositionView());
    sub_100087D0C((uint64_t)v17, v29, v71, (uint64_t)v13);
    id v32 = v31;
    swift_unknownObjectRelease();
    [v27 addSubview:v32];
    id v33 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
    [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v33 setTextAlignment:1];
    id v34 = [self _preferredFontForTextStyle:UIFontTextStyleCaption2 variant:1024];
    [v33 setFont:v34];

    [v27 addSubview:v33];
    sub_10005C244();
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v33 setText:v35];

    char v73 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1000B3910;
    id v37 = [v32 heightAnchor];
    id v38 = [v37 constraintEqualToConstant:70.0];

    *(void *)(v36 + 32) = v38;
    id v39 = [v32 widthAnchor];
    id v40 = [v39 constraintEqualToConstant:70.0];

    *(void *)(v36 + 40) = v40;
    id v41 = [v32 topAnchor];
    id v42 = [v27 topAnchor];
    id v43 = [v41 constraintEqualToAnchor:v42];

    *(void *)(v36 + 48) = v43;
    id v44 = [v32 leadingAnchor];
    id v45 = [v27 leadingAnchor];
    id v46 = [v44 constraintEqualToAnchor:v45];

    *(void *)(v36 + 56) = v46;
    id v47 = [v32 trailingAnchor];
    id v48 = [v27 trailingAnchor];
    id v49 = [v47 constraintEqualToAnchor:v48];

    *(void *)(v36 + 64) = v49;
    id v50 = [v33 topAnchor];
    id v51 = [v32 bottomAnchor];
    id v52 = [v50 constraintEqualToAnchor:v51 constant:0.0];

    *(void *)(v36 + 72) = v52;
    id v53 = [v33 leadingAnchor];
    id v54 = [v27 leadingAnchor];
    id v55 = [v53 constraintEqualToAnchor:v54];

    *(void *)(v36 + 80) = v55;
    id v56 = [v33 trailingAnchor];
    id v57 = [v27 trailingAnchor];
    id v58 = [v56 constraintEqualToAnchor:v57];

    *(void *)(v36 + 88) = v58;
    id v59 = [v33 bottomAnchor];
    id v60 = [v27 bottomAnchor];
    id v61 = [v59 constraintEqualToAnchor:v60];

    *(void *)(v36 + 96) = v61;
    uint64_t v75 = v36;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v73 activateConstraints:isa];

    sub_100057C04((uint64_t)v70);
  }
  else
  {
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    unint64_t v64 = qword_1000EA798;
    unint64_t v65 = v73;
    (*(void (**)(char *, uint64_t, void *))(v5 + 16))(v7, a1, v73);
    if (os_log_type_enabled(v64, v63))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136446210;
      uint64_t v67 = CAUVehicleLayoutKey.rawValue.getter();
      uint64_t v74 = sub_10000A56C(v67, v68, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void *))(v5 + 8))(v7, v65);
      _os_log_impl((void *)&_mh_execute_header, v64, v63, "No zone available for %{public}s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, void *))(v5 + 8))(v7, v65);
    }
    return 0;
  }
  return v27;
}

id sub_10005ABE4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateCarPlaceholderView();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateCarPlaceholderView()
{
  return self;
}

id sub_10005AC4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_10005A19C(a1, *(void *)(v2 + 24), *(void *)(v2 + 32));
  *a2 = result;
  return result;
}

void sub_10005AC90()
{
  id v0 = [self cl_carSystemSecondaryColor];
  id v1 = [v0 colorWithAlphaComponent:0.05];

  qword_1000EA6C8 = (uint64_t)v1;
}

void sub_10005ACFC()
{
  qword_1000EA6D0 = 0x4014000000000000;
  *(void *)algn_1000EA6D8 = 0;
  qword_1000EA6E0 = 0;
  unk_1000EA6E8 = 0;
}

uint64_t *sub_10005AD14(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    uint64_t v12 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v12;
    uint64_t v13 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v14 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = (uint64_t)v14;
    uint64_t v15 = a3[11];
    uint64_t v16 = a3[12];
    signed int v17 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v17;
    uint64_t v18 = *(void **)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = (uint64_t)v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = v11;
    id v20 = v12;
    swift_bridgeObjectRetain();
    id v21 = v14;
    id v22 = v17;
    id v23 = v18;
  }
  return a1;
}

void sub_10005AE5C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + a2[12]);
}

uint64_t sub_10005AF24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  uint64_t v11 = *(void **)(a2 + v9);
  *(void *)(a1 + v9) = v11;
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v13 = *(void **)(a2 + v12);
  *(void *)(a1 + v12) = v13;
  uint64_t v14 = a3[11];
  uint64_t v15 = a3[12];
  uint64_t v16 = *(void **)(a2 + v14);
  *(void *)(a1 + v14) = v16;
  signed int v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v10;
  id v19 = v11;
  swift_bridgeObjectRetain();
  id v20 = v13;
  id v21 = v16;
  id v22 = v17;
  return a1;
}

uint64_t sub_10005B01C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[8];
  uint64_t v12 = *(void **)(a1 + v11);
  uint64_t v13 = *(void **)(a2 + v11);
  *(void *)(a1 + v11) = v13;
  id v14 = v13;

  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[10];
  uint64_t v16 = *(void **)(a1 + v15);
  signed int v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  id v18 = v17;

  uint64_t v19 = a3[11];
  id v20 = *(void **)(a1 + v19);
  id v21 = *(void **)(a2 + v19);
  *(void *)(a1 + v19) = v21;
  id v22 = v21;

  uint64_t v23 = a3[12];
  uint64_t v24 = *(void **)(a1 + v23);
  unint64_t v25 = *(void **)(a2 + v23);
  *(void *)(a1 + v23) = v25;
  id v26 = v25;

  return a1;
}

uint64_t sub_10005B158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  return a1;
}

uint64_t sub_10005B218(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[8];
  uint64_t v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[10];
  uint64_t v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  uint64_t v13 = a3[11];
  id v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);

  uint64_t v15 = a3[12];
  uint64_t v16 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);

  return a1;
}

uint64_t sub_10005B328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B33C);
}

uint64_t sub_10005B33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10005B3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B410);
}

uint64_t sub_10005B410(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ClimateZone()
{
  uint64_t result = qword_1000E6680;
  if (!qword_1000E6680) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005B518()
{
  uint64_t result = type metadata accessor for CAUVehicleLayoutKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10005B5D4@<X0>(unint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v102 = a3;
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v98 = (char *)&v91 - v10;
  uint64_t v11 = type metadata accessor for ClimateZone();
  uint64_t v103 = *(void *)(v11 - 8);
  __n128 v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = v15[8];
  *(void *)&v14[v110] = 0;
  uint64_t v16 = (uint64_t *)&v14[v15[9]];
  uint64_t v108 = v5;
  uint64_t v109 = v16;
  *uint64_t v16 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v106 = v15[10];
  uint64_t v107 = a2;
  *(void *)&v14[v106] = 0;
  uint64_t v100 = v15[11];
  uint64_t v101 = v6;
  *(void *)&v14[v100] = 0;
  uint64_t v99 = v15[12];
  *(void *)&v14[v99] = 0;
  uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
  v104(v14, (uint64_t)a2, v5, v12);
  uint64_t v17 = *(int *)(v11 + 20);
  unsigned int v111 = v14;
  uint64_t v105 = (uint64_t *)&v14[v17];
  *(void *)&v14[v17] = a1;
  unint64_t v115 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18) {
      goto LABEL_3;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    uint64_t v6 = v108;
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t)v98;
    if (qword_1000E46D8 == -1)
    {
LABEL_49:
      BOOL v80 = qword_1000EA798;
      unint64_t v81 = v107;
      ((void (*)(uint64_t, char *, uint64_t))v104)(v18, v107, v6);
      os_log_type_t v82 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v80, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        uint64_t v114 = swift_slowAlloc();
        *(_DWORD *)uint64_t v83 = 136446210;
        uint64_t v84 = CAUVehicleLayoutKey.rawValue.getter();
        uint64_t v113 = sub_10000A56C(v84, v85, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v86(v18, v108);
        _os_log_impl((void *)&_mh_execute_header, v80, v82, "ClimateZonePosition requires a zone key=%{public}s", v83, 0xCu);
        swift_arrayDestroy();
        uint64_t v6 = v108;
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v87 = v107;
      }
      else
      {
        uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v86(v18, v6);
        uint64_t v87 = v81;
      }
      v86((uint64_t)v87, v6);
      uint64_t v89 = v102;
      uint64_t v88 = v103;
      uint64_t v90 = (uint64_t)v111;
      v86((uint64_t)v111, v6);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v89, 1, 1, v11);
    }
LABEL_54:
    swift_once();
    goto LABEL_49;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v18) {
    goto LABEL_47;
  }
LABEL_3:
  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v95 = v6 + 16;
  uint64_t v94 = v8;
  uint64_t v97 = v11;
  id v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = a1 & 0xC000000000000001;
  *(void *)&long long v19 = 138543362;
  long long v93 = v19;
  unint64_t v96 = a1;
  do
  {
    if (v22) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(a1 + 8 * v21 + 32);
    }
    uint64_t v24 = v23;
    self;
    uint64_t v25 = swift_dynamicCastObjCClass();
    if (v25)
    {
      id v26 = (void *)v25;

      id v27 = v24;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v20 = v26;
      goto LABEL_6;
    }
    self;
    uint64_t v28 = swift_dynamicCastObjCClass();
    id v112 = v20;
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = v18;
      unint64_t v31 = a1;
      unint64_t v32 = v22;
      uint64_t v33 = v110;
      uint64_t v34 = (uint64_t)v111;
      NSString v35 = *(void **)&v111[v110];
      id v36 = v24;

      *(void *)(v34 + v33) = v29;
      id v37 = v36;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      unint64_t v22 = v32;
      a1 = v31;
      uint64_t v18 = v30;
      id v20 = v112;
      goto LABEL_6;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v38 = v24;
      id v39 = v109;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v40 = v38;
      goto LABEL_22;
    }
    self;
    uint64_t v42 = swift_dynamicCastObjCClass();
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v44 = (uint64_t)v111;
      uint64_t v45 = v106;
      id v46 = *(void **)&v111[v106];
      id v47 = v24;

      *(void *)(v44 + v45) = v43;
      id v48 = v47;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      a1 = v96;
      id v20 = v112;
    }
    else
    {
      self;
      uint64_t v49 = swift_dynamicCastObjCClass();
      if (v49)
      {
        uint64_t v50 = v49;
        uint64_t v51 = (uint64_t)v111;
        uint64_t v52 = v100;
        goto LABEL_33;
      }
      self;
      uint64_t v53 = swift_dynamicCastObjCClass();
      if (v53)
      {
        uint64_t v50 = v53;
        uint64_t v51 = (uint64_t)v111;
        uint64_t v52 = v99;
LABEL_33:
        id v92 = *(id *)(v51 + v52);
        id v54 = v24;

        *(void *)(v51 + v52) = v50;
        id v40 = v54;
LABEL_22:
        id v41 = v40;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        id v20 = v112;
        goto LABEL_6;
      }
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      id v55 = qword_1000EA798;
      id v56 = v24;
      os_log_type_t v57 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v55, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        id v59 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = v93;
        *(void *)(v58 + 4) = v56;
        *id v59 = v56;
        _os_log_impl((void *)&_mh_execute_header, v55, v57, "unknown service: %{public}@", (uint8_t *)v58, 0xCu);
        sub_100006730(&qword_1000E4F30);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v20 = v112;
        swift_slowDealloc();
      }
      else
      {
      }
    }
LABEL_6:
    ++v21;
  }
  while (v18 != v21);
  swift_bridgeObjectRelease();
  if (!v20)
  {
    uint64_t v11 = v97;
    uint64_t v6 = v108;
    goto LABEL_48;
  }
  uint64_t v60 = v97;
  uint64_t v61 = (uint64_t)v111;
  *(void *)&v111[*(int *)(v97 + 24)] = v115;
  *(void *)(v61 + *(int *)(v60 + 28)) = v20;
  id v62 = v20;
  sub_10005C314(v109, (uint64_t (*)(uint64_t))sub_100082114, (void (*)(void *))sub_10005D114);
  sub_10005C314(v105, (uint64_t (*)(uint64_t))sub_100082114, (void (*)(void *))sub_10005C958);
  uint64_t v63 = v108;
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  unint64_t v64 = qword_1000EA798;
  unint64_t v65 = v94;
  uint64_t v66 = v107;
  ((void (*)(char *, char *, uint64_t))v104)(v94, v107, v63);
  swift_bridgeObjectRetain();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v67))
  {
    uint64_t v68 = swift_slowAlloc();
    id v112 = v62;
    uint64_t v69 = v68;
    uint64_t v110 = swift_slowAlloc();
    uint64_t v114 = v110;
    *(_DWORD *)uint64_t v69 = 136446466;
    uint64_t v70 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v113 = sub_10000A56C(v70, v71, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v109 = *(uint64_t **)(v101 + 8);
    ((void (*)(char *, uint64_t))v109)(v65, v63);
    *(_WORD *)(v69 + 12) = 2082;
    sub_100007310(0, &qword_1000E66E0);
    swift_bridgeObjectRetain();
    uint64_t v72 = Array.description.getter();
    unint64_t v74 = v73;
    swift_bridgeObjectRelease();
    uint64_t v113 = sub_10000A56C(v72, v74, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v64, v67, "ClimateZone created. LayoutKey: %{public}s, Services: %{public}s", (uint8_t *)v69, 0x16u);
    swift_arrayDestroy();
    uint64_t v60 = v97;
    swift_slowDealloc();
    swift_slowDealloc();
    id v75 = v112;

    ((void (*)(char *, uint64_t))v109)(v107, v63);
  }
  else
  {

    uint64_t v76 = *(void (**)(char *, uint64_t))(v101 + 8);
    v76(v65, v63);
    swift_bridgeObjectRelease_n();
    v76(v66, v63);
  }
  uint64_t v77 = v102;
  uint64_t v78 = (uint64_t)v111;
  sub_10000ABC4((uint64_t)v111, v102);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v77, 0, 1, v60);
  return sub_100057C04(v78);
}

uint64_t sub_10005C244()
{
  if (sub_10005C764() > 1u)
  {
    CAUVehicleLayoutKey.rawValue.getter();
    NSString v0 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v0 = String._bridgeToObjectiveC()();
  }
  id v1 = sub_10005C8E4(v0);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t sub_10005C314(uint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void *))
{
  uint64_t v6 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v6;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v6 < 0 || (v6 & 0x4000000000000000) != 0)
  {
    uint64_t v6 = a2(v6);
    *a1 = v6;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v10[0] = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
  v10[1] = v8;
  a3(v10);
  return specialized Array._endMutation()();
}

double sub_10005C3B4()
{
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v43 = _swiftEmptyArrayStorage;
  unint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ClimateZone() + 20));
  if (v1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v3 = 0;
    unint64_t v4 = v1 & 0xC000000000000001;
    unint64_t v30 = v1 + 32;
    uint64_t v31 = v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v33 = v2;
    unint64_t v34 = v1;
    unint64_t v32 = v1 & 0xC000000000000001;
    while (1)
    {
      if (v4)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v3 >= *(void *)(v31 + 16)) {
          goto LABEL_27;
        }
        id v5 = *(id *)(v30 + 8 * v3);
      }
      uint64_t v6 = v5;
      if (__OFADD__(v3++, 1)) {
        break;
      }
      id v38 = v5;
      sub_100007310(0, &qword_1000E66E0);
      id v8 = v6;
      sub_100006730(&qword_1000E66E8);
      if (swift_dynamicCast())
      {
        NSString v35 = v8;
        sub_10005DF6C(v36, (uint64_t)v39);
        uint64_t v9 = v40;
        uint64_t v10 = v41;
        sub_100057CC8(v39, v40);
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12)
        {
          uint64_t v13 = (uint64_t *)(v11 + 40);
          do
          {
            id v14 = (void *)*(v13 - 1);
            uint64_t v15 = *v13;
            uint64_t ObjectType = swift_getObjectType();
            id v17 = v14;
            if (sub_10004A6E4(ObjectType, v15))
            {
              uint64_t v18 = v42;
              id v19 = v17;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v18 = sub_1000A3230(0, v18[2] + 1, 1, v18);
                uint64_t v42 = v18;
              }
              unint64_t v21 = v18[2];
              unint64_t v20 = v18[3];
              if (v21 >= v20 >> 1)
              {
                uint64_t v18 = sub_1000A3230((void *)(v20 > 1), v21 + 1, 1, v18);
                uint64_t v42 = v18;
              }
              sub_10008B460(v21, (uint64_t)v19, (uint64_t *)&v42, ObjectType, v15);
              uint64_t v42 = v18;
            }
            unint64_t v22 = v43;
            id v23 = v17;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              unint64_t v22 = sub_1000A3230(0, v22[2] + 1, 1, v22);
              uint64_t v43 = v22;
            }
            unint64_t v25 = v22[2];
            unint64_t v24 = v22[3];
            if (v25 >= v24 >> 1)
            {
              unint64_t v22 = sub_1000A3230((void *)(v24 > 1), v25 + 1, 1, v22);
              uint64_t v43 = v22;
            }
            sub_10008B460(v25, (uint64_t)v23, (uint64_t *)&v43, ObjectType, v15);

            uint64_t v43 = v22;
            v13 += 2;
            --v12;
          }
          while (v12);
        }

        swift_bridgeObjectRelease();
        sub_10000AC28((uint64_t)v39);
        uint64_t v2 = v33;
        unint64_t v1 = v34;
        unint64_t v4 = v32;
        if (v3 == v33)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          id v26 = v42;
          id v27 = v43;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v37 = 0;
        memset(v36, 0, sizeof(v36));

        sub_10000A404((uint64_t)v36, &qword_1000E66F0);
        if (v3 == v2) {
          goto LABEL_25;
        }
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  id v26 = _swiftEmptyArrayStorage;
  id v27 = _swiftEmptyArrayStorage;
LABEL_30:
  sub_100006730(&qword_1000E66F8);
  uint64_t v28 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v28 + 16) = xmmword_1000B20E0;
  *(void *)(v28 + 32) = v27;
  *(void *)(v28 + 40) = v26;
  return result;
}

uint64_t sub_10005C764()
{
  uint64_t v1 = sub_100006730(&qword_1000E66D8);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100046B8C();
  char v6 = v5;
  uint64_t v7 = *(int *)(v2 + 56);
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v4, v0, v8);
  uint64_t v10 = v6 & 1;
  v4[v7] = v6 & 1;
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v4, v8);
  if (v11 == enum case for CAUVehicleLayoutKey.seat_front_left(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
  }
  else if (v11 == enum case for CAUVehicleLayoutKey.seat_front_right(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
    return !(v6 & 1);
  }
  else
  {
    sub_10000A404((uint64_t)v4, &qword_1000E66D8);
    return 2;
  }
  return v10;
}

id sub_10005C8E4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = CAFFrameworkBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:&stru_1000CD0C0 table:@"Localizable"];

  return v3;
}

char *sub_10005C958(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  double result = (char *)_minimumMergeRunLength(_:)(v4);
  if ((uint64_t)result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_143;
    }
    if (v4) {
      return sub_10005D7FC(0, (char *)v4, (char *)1, v3);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_151;
  }
  uint64_t v7 = result;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v111 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v110 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
LABEL_109:
      long long v93 = v10;
      if (v13 >= 2)
      {
        uint64_t v94 = *v3;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_138;
          }
          if (!v94) {
            goto LABEL_150;
          }
          unint64_t v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_10005D9B8((char *)(v94 + 8 * v97), (char *)(v94 + 8 * *(void *)&v93[16 * v13 + 16]), v94 + 8 * v98, v110);
          if (v2) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_139;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v96 = sub_1000533B8((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_140;
          }
          uint64_t v99 = v96 + 32;
          uint64_t v100 = &v96[16 * v95 + 32];
          *(void *)uint64_t v100 = v97;
          *((void *)v100 + 1) = v98;
          uint64_t v101 = v96;
          unint64_t v102 = *((void *)v96 + 2);
          if (v13 > v102) {
            goto LABEL_141;
          }
          memmove(&v99[16 * v13 - 16], &v99[16 * v13], 16 * (v102 - v13));
          long long v93 = v101;
          *((void *)v101 + 2) = v102 - 1;
          unint64_t v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_106:
      swift_bridgeObjectRelease();
      *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return (char *)swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_100007310(0, &qword_1000E66E0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v110 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v111 = v9;
  }
  uint64_t v105 = v7;
  Swift::Int v11 = 0;
  uint64_t v12 = *v3;
  uint64_t v103 = v3;
  uint64_t v104 = *v3 - 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v107 = v4;
  while (1)
  {
    Swift::Int v14 = v11++;
    Swift::Int v108 = v14;
    if (v11 >= v4) {
      goto LABEL_37;
    }
    self;
    uint64_t v15 = swift_dynamicCastObjCClass();
    if (!v15 || (uint64_t v16 = (void *)v15, self, (v17 = swift_dynamicCastObjCClass()) == 0))
    {
      Swift::Int v21 = v14 + 2;
      if (v14 + 2 < v4)
      {
        BOOL v20 = 1;
        goto LABEL_24;
      }
      goto LABEL_29;
    }
    id v18 = [v16 typeCompare:v17];
    Swift::Int v19 = v14;
    BOOL v20 = v18 == (id)-1;
    Swift::Int v21 = v19 + 2;
    if (v19 + 2 >= v4)
    {
LABEL_27:
      if (!v20) {
        break;
      }
      goto LABEL_28;
    }
    do
    {
LABEL_24:
      self;
      uint64_t v23 = swift_dynamicCastObjCClass();
      if (v23 && (v24 = (void *)v23, self, (uint64_t v25 = swift_dynamicCastObjCClass()) != 0))
      {
        if (((v20 ^ ([v24 typeCompare:v25] != (id)-1)) & 1) == 0) {
          goto LABEL_27;
        }
      }
      else if (!v20)
      {
        goto LABEL_57;
      }
      Swift::Int v22 = v21 + 1;
      Swift::Int v21 = v22;
    }
    while (v22 < v107);
    Swift::Int v21 = v22;
    if (!v20) {
      break;
    }
LABEL_28:
    Swift::Int v4 = v107;
    Swift::Int v14 = v108;
    if (v21 < v108) {
      goto LABEL_144;
    }
LABEL_29:
    if (v14 < v21)
    {
      id v26 = (uint64_t *)(v104 + 8 * v21);
      Swift::Int v27 = v21;
      Swift::Int v28 = v14;
      uint64_t v29 = (uint64_t *)(v12 + 8 * v14);
      do
      {
        if (v28 != --v27)
        {
          if (!v12) {
            goto LABEL_149;
          }
          uint64_t v30 = *v29;
          uint64_t *v29 = *v26;
          *id v26 = v30;
        }
        ++v28;
        --v26;
        ++v29;
      }
      while (v28 < v27);
    }
    Swift::Int v11 = v21;
LABEL_37:
    if (v11 < v4) {
      goto LABEL_38;
    }
LABEL_58:
    if (v11 < v14) {
      goto LABEL_137;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1000531FC(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v40 = *((void *)v10 + 2);
    unint64_t v39 = *((void *)v10 + 3);
    unint64_t v13 = v40 + 1;
    if (v40 >= v39 >> 1) {
      uint64_t v10 = sub_1000531FC((char *)(v39 > 1), v40 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    uint64_t v41 = v10 + 32;
    uint64_t v42 = &v10[16 * v40 + 32];
    *(void *)uint64_t v42 = v14;
    *((void *)v42 + 1) = v11;
    if (v40)
    {
      Swift::Int v109 = v11;
      while (1)
      {
        unint64_t v43 = v13 - 1;
        if (v13 >= 4)
        {
          id v48 = &v41[16 * v13];
          uint64_t v49 = *((void *)v48 - 8);
          uint64_t v50 = *((void *)v48 - 7);
          BOOL v54 = __OFSUB__(v50, v49);
          uint64_t v51 = v50 - v49;
          if (v54) {
            goto LABEL_126;
          }
          uint64_t v53 = *((void *)v48 - 6);
          uint64_t v52 = *((void *)v48 - 5);
          BOOL v54 = __OFSUB__(v52, v53);
          uint64_t v46 = v52 - v53;
          char v47 = v54;
          if (v54) {
            goto LABEL_127;
          }
          unint64_t v55 = v13 - 2;
          id v56 = &v41[16 * v13 - 32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v54 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v54) {
            goto LABEL_129;
          }
          BOOL v54 = __OFADD__(v46, v59);
          uint64_t v60 = v46 + v59;
          if (v54) {
            goto LABEL_132;
          }
          if (v60 >= v51)
          {
            uint64_t v78 = &v41[16 * v43];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v54 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v54) {
              goto LABEL_136;
            }
            BOOL v71 = v46 < v81;
            goto LABEL_96;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v72 = *((void *)v10 + 4);
            uint64_t v73 = *((void *)v10 + 5);
            BOOL v54 = __OFSUB__(v73, v72);
            uint64_t v65 = v73 - v72;
            char v66 = v54;
            goto LABEL_90;
          }
          uint64_t v45 = *((void *)v10 + 4);
          uint64_t v44 = *((void *)v10 + 5);
          BOOL v54 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          char v47 = v54;
        }
        if (v47) {
          goto LABEL_128;
        }
        unint64_t v55 = v13 - 2;
        uint64_t v61 = &v41[16 * v13 - 32];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v64 = __OFSUB__(v62, v63);
        uint64_t v65 = v62 - v63;
        char v66 = v64;
        if (v64) {
          goto LABEL_131;
        }
        os_log_type_t v67 = &v41[16 * v43];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v54 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v54) {
          goto LABEL_134;
        }
        if (__OFADD__(v65, v70)) {
          goto LABEL_135;
        }
        if (v65 + v70 >= v46)
        {
          BOOL v71 = v46 < v70;
LABEL_96:
          if (v71) {
            unint64_t v43 = v55;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v66) {
          goto LABEL_130;
        }
        unint64_t v74 = &v41[16 * v43];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v54 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v54) {
          goto LABEL_133;
        }
        if (v77 < v65) {
          goto LABEL_14;
        }
LABEL_98:
        unint64_t v82 = v43 - 1;
        if (v43 - 1 >= v13)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        if (!v12) {
          goto LABEL_148;
        }
        uint64_t v83 = v10;
        uint64_t v84 = v12;
        unint64_t v85 = &v41[16 * v82];
        uint64_t v86 = *(void *)v85;
        uint64_t v87 = v41;
        unint64_t v88 = v43;
        uint64_t v89 = &v41[16 * v43];
        uint64_t v90 = *((void *)v89 + 1);
        uint64_t v91 = v84;
        sub_10005D9B8((char *)(v84 + 8 * *(void *)v85), (char *)(v84 + 8 * *(void *)v89), v84 + 8 * v90, v110);
        if (v1) {
          goto LABEL_106;
        }
        if (v90 < v86) {
          goto LABEL_123;
        }
        if (v88 > *((void *)v83 + 2)) {
          goto LABEL_124;
        }
        *(void *)unint64_t v85 = v86;
        *(void *)&v87[16 * v82 + 8] = v90;
        unint64_t v92 = *((void *)v83 + 2);
        if (v88 >= v92) {
          goto LABEL_125;
        }
        uint64_t v10 = v83;
        unint64_t v13 = v92 - 1;
        memmove(v89, v89 + 16, 16 * (v92 - 1 - v88));
        uint64_t v41 = v87;
        *((void *)v83 + 2) = v92 - 1;
        uint64_t v12 = v91;
        Swift::Int v11 = v109;
        if (v92 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v4 = v107;
    if (v11 >= v107)
    {
      uint64_t v2 = v1;
      uint64_t v3 = v103;
      goto LABEL_109;
    }
  }
LABEL_57:
  Swift::Int v11 = v21;
  Swift::Int v4 = v107;
  Swift::Int v14 = v108;
  if (v21 >= v107) {
    goto LABEL_58;
  }
LABEL_38:
  if (__OFSUB__(v11, v14)) {
    goto LABEL_142;
  }
  if (v11 - v14 >= (uint64_t)v105) {
    goto LABEL_58;
  }
  if (__OFADD__(v14, v105)) {
    goto LABEL_145;
  }
  if ((uint64_t)&v105[v14] >= v4) {
    Swift::Int v31 = v4;
  }
  else {
    Swift::Int v31 = (Swift::Int)&v105[v14];
  }
  if (v31 >= v14)
  {
    if (v11 != v31)
    {
      unint64_t v32 = (uint64_t *)(v104 + 8 * v11);
      Swift::Int v106 = v31;
      do
      {
        Swift::Int v33 = v14;
        unint64_t v34 = v32;
        do
        {
          self;
          uint64_t v35 = swift_dynamicCastObjCClass();
          if (v35)
          {
            id v36 = (void *)v35;
            self;
            uint64_t v37 = swift_dynamicCastObjCClass();
            if (v37)
            {
              if ([v36 typeCompare:v37] != (id)-1) {
                break;
              }
            }
          }
          if (!v12) {
            goto LABEL_147;
          }
          uint64_t v38 = *v34;
          *unint64_t v34 = v34[1];
          v34[1] = v38;
          --v34;
          ++v33;
        }
        while (v11 != v33);
        ++v11;
        ++v32;
        Swift::Int v14 = v108;
      }
      while (v11 != v106);
      Swift::Int v11 = v106;
    }
    goto LABEL_58;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  double result = (char *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005D114(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  double result = (char *)_minimumMergeRunLength(_:)(v4);
  if ((uint64_t)result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_133;
    }
    if (v4) {
      return sub_10005D8FC(0, (char *)v4, (char *)1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_141;
  }
  uint64_t v7 = result;
  uint64_t v91 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v99 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
LABEL_99:
      uint64_t v83 = v10;
      if (v13 >= 2)
      {
        uint64_t v84 = *v91;
        do
        {
          unint64_t v85 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_128;
          }
          if (!v84) {
            goto LABEL_140;
          }
          uint64_t v86 = v83;
          uint64_t v87 = *(void *)&v83[16 * v85 + 32];
          uint64_t v88 = *(void *)&v83[16 * v13 + 24];
          sub_10005DCD8((id *)(v84 + 8 * v87), (id *)(v84 + 8 * *(void *)&v83[16 * v13 + 16]), v84 + 8 * v88, __dst);
          if (v2) {
            break;
          }
          if (v88 < v87) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_1000533B8((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_130;
          }
          uint64_t v89 = &v86[16 * v85 + 32];
          *(void *)uint64_t v89 = v87;
          *((void *)v89 + 1) = v88;
          unint64_t v90 = *((void *)v86 + 2);
          if (v13 > v90) {
            goto LABEL_131;
          }
          memmove(&v86[16 * v13 + 16], &v86[16 * v13 + 32], 16 * (v90 - v13));
          uint64_t v83 = v86;
          *((void *)v86 + 2) = v90 - 1;
          unint64_t v13 = v90 - 1;
        }
        while (v90 > 2);
      }
LABEL_96:
      swift_bridgeObjectRelease();
      *(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return (char *)swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (id *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v99 = v9;
  }
  Swift::Int v11 = 0;
  uint64_t v93 = *a1 + 16;
  uint64_t v94 = v7;
  uint64_t v98 = *a1;
  uint64_t v92 = *a1 - 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  uint64_t v12 = &selRef_startAnimating;
  Swift::Int v95 = v4;
  while (1)
  {
    Swift::Int v14 = v11++;
    if (v11 < v4)
    {
      id v15 = [*(id *)(v98 + 8 * v11) v12[201]:*(void *)(v98 + 8 * v14)];
      Swift::Int v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        uint64_t v16 = (id *)(v93 + 8 * v14);
        while ((v15 == (id)-1) != (objc_msgSend(*v16, v12[201], *(v16 - 1)) != (id)-1))
        {
          ++v11;
          ++v16;
          if (v4 == v11)
          {
            Swift::Int v11 = v4;
            break;
          }
        }
      }
      if (v15 == (id)-1)
      {
        if (v11 < v14) {
          goto LABEL_136;
        }
        if (v14 < v11)
        {
          uint64_t v17 = (uint64_t *)(v92 + 8 * v11);
          Swift::Int v18 = v11;
          Swift::Int v19 = v14;
          BOOL v20 = (uint64_t *)(v98 + 8 * v14);
          do
          {
            if (v19 != --v18)
            {
              if (!v98) {
                goto LABEL_139;
              }
              uint64_t v21 = *v20;
              uint64_t *v20 = *v17;
              *uint64_t v17 = v21;
            }
            ++v19;
            --v17;
            ++v20;
          }
          while (v19 < v18);
        }
      }
    }
    if (v11 >= v4) {
      goto LABEL_39;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_132;
    }
    if (v11 - v14 >= (uint64_t)v94) {
      goto LABEL_39;
    }
    if (__OFADD__(v14, v94)) {
      goto LABEL_134;
    }
    Swift::Int v22 = (uint64_t)&v94[v14] >= v4 ? v4 : (Swift::Int)&v94[v14];
    if (v22 < v14) {
      break;
    }
    if (v11 != v22)
    {
      uint64_t v78 = (void *)(v92 + 8 * v11);
      uint64_t v23 = v98;
      do
      {
        uint64_t v79 = *(void **)(v98 + 8 * v11);
        Swift::Int v80 = v14;
        uint64_t v81 = v78;
        do
        {
          if (objc_msgSend(v79, v12[201], *v81) != (id)-1) {
            break;
          }
          if (!v98) {
            goto LABEL_137;
          }
          uint64_t v82 = *v81;
          uint64_t v79 = (void *)v81[1];
          *uint64_t v81 = v79;
          v81[1] = v82;
          --v81;
          ++v80;
        }
        while (v11 != v80);
        ++v11;
        ++v78;
      }
      while (v11 != v22);
      Swift::Int v11 = v22;
      if (v22 < v14) {
        goto LABEL_127;
      }
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v23 = v98;
    if (v11 < v14) {
      goto LABEL_127;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1000531FC(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v25 = *((void *)v10 + 2);
    unint64_t v24 = *((void *)v10 + 3);
    unint64_t v13 = v25 + 1;
    if (v25 >= v24 >> 1) {
      uint64_t v10 = sub_1000531FC((char *)(v24 > 1), v25 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    id v26 = v10 + 32;
    Swift::Int v27 = &v10[16 * v25 + 32];
    *(void *)Swift::Int v27 = v14;
    *((void *)v27 + 1) = v11;
    if (v25)
    {
      Swift::Int v96 = v11;
      while (1)
      {
        unint64_t v28 = v13 - 1;
        if (v13 >= 4)
        {
          Swift::Int v33 = &v26[16 * v13];
          uint64_t v34 = *((void *)v33 - 8);
          uint64_t v35 = *((void *)v33 - 7);
          BOOL v39 = __OFSUB__(v35, v34);
          uint64_t v36 = v35 - v34;
          if (v39) {
            goto LABEL_116;
          }
          uint64_t v38 = *((void *)v33 - 6);
          uint64_t v37 = *((void *)v33 - 5);
          BOOL v39 = __OFSUB__(v37, v38);
          uint64_t v31 = v37 - v38;
          char v32 = v39;
          if (v39) {
            goto LABEL_117;
          }
          unint64_t v40 = v13 - 2;
          uint64_t v41 = &v26[16 * v13 - 32];
          uint64_t v43 = *(void *)v41;
          uint64_t v42 = *((void *)v41 + 1);
          BOOL v39 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          if (v39) {
            goto LABEL_119;
          }
          BOOL v39 = __OFADD__(v31, v44);
          uint64_t v45 = v31 + v44;
          if (v39) {
            goto LABEL_122;
          }
          if (v45 >= v36)
          {
            uint64_t v63 = &v26[16 * v28];
            uint64_t v65 = *(void *)v63;
            uint64_t v64 = *((void *)v63 + 1);
            BOOL v39 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            if (v39) {
              goto LABEL_126;
            }
            BOOL v56 = v31 < v66;
            goto LABEL_77;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v57 = *((void *)v10 + 4);
            uint64_t v58 = *((void *)v10 + 5);
            BOOL v39 = __OFSUB__(v58, v57);
            uint64_t v50 = v58 - v57;
            char v51 = v39;
            goto LABEL_71;
          }
          uint64_t v30 = *((void *)v10 + 4);
          uint64_t v29 = *((void *)v10 + 5);
          BOOL v39 = __OFSUB__(v29, v30);
          uint64_t v31 = v29 - v30;
          char v32 = v39;
        }
        if (v32) {
          goto LABEL_118;
        }
        unint64_t v40 = v13 - 2;
        uint64_t v46 = &v26[16 * v13 - 32];
        uint64_t v48 = *(void *)v46;
        uint64_t v47 = *((void *)v46 + 1);
        BOOL v49 = __OFSUB__(v47, v48);
        uint64_t v50 = v47 - v48;
        char v51 = v49;
        if (v49) {
          goto LABEL_121;
        }
        uint64_t v52 = &v26[16 * v28];
        uint64_t v54 = *(void *)v52;
        uint64_t v53 = *((void *)v52 + 1);
        BOOL v39 = __OFSUB__(v53, v54);
        uint64_t v55 = v53 - v54;
        if (v39) {
          goto LABEL_124;
        }
        if (__OFADD__(v50, v55)) {
          goto LABEL_125;
        }
        if (v50 + v55 >= v31)
        {
          BOOL v56 = v31 < v55;
LABEL_77:
          if (v56) {
            unint64_t v28 = v40;
          }
          goto LABEL_79;
        }
LABEL_71:
        if (v51) {
          goto LABEL_120;
        }
        uint64_t v59 = &v26[16 * v28];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v39 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v39) {
          goto LABEL_123;
        }
        if (v62 < v50) {
          goto LABEL_14;
        }
LABEL_79:
        unint64_t v67 = v28 - 1;
        if (v28 - 1 >= v13)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        if (!v23) {
          goto LABEL_138;
        }
        uint64_t v68 = v12;
        uint64_t v69 = v10;
        uint64_t v70 = v23;
        BOOL v71 = &v26[16 * v67];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v26;
        unint64_t v74 = v28;
        uint64_t v75 = &v26[16 * v28];
        uint64_t v76 = *((void *)v75 + 1);
        sub_10005DCD8((id *)(v70 + 8 * *(void *)v71), (id *)(v70 + 8 * *(void *)v75), v70 + 8 * v76, __dst);
        if (v1) {
          goto LABEL_96;
        }
        if (v76 < v72) {
          goto LABEL_113;
        }
        if (v74 > *((void *)v69 + 2)) {
          goto LABEL_114;
        }
        *(void *)BOOL v71 = v72;
        *(void *)&v73[16 * v67 + 8] = v76;
        unint64_t v77 = *((void *)v69 + 2);
        if (v74 >= v77) {
          goto LABEL_115;
        }
        uint64_t v10 = v69;
        unint64_t v13 = v77 - 1;
        memmove(v75, v75 + 16, 16 * (v77 - 1 - v74));
        id v26 = v73;
        *((void *)v69 + 2) = v77 - 1;
        uint64_t v23 = v98;
        uint64_t v12 = v68;
        Swift::Int v11 = v96;
        if (v77 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v4 = v95;
    if (v11 >= v95)
    {
      uint64_t v2 = v1;
      goto LABEL_99;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  double result = (char *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005D7FC(char *result, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v12 = result;
  if (a3 != a2)
  {
    Swift::Int v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * (void)a3 - 8;
LABEL_5:
    uint64_t v7 = v12;
    uint64_t v8 = (uint64_t *)v6;
    while (1)
    {
      self;
      double result = (char *)swift_dynamicCastObjCClass();
      if (result)
      {
        uint64_t v9 = result;
        self;
        double result = (char *)swift_dynamicCastObjCClass();
        if (result)
        {
          double result = (char *)[v9 typeCompare:result];
          if (result != (char *)-1)
          {
LABEL_4:
            ++v4;
            v6 += 8;
            if (v4 == a2) {
              return result;
            }
            goto LABEL_5;
          }
        }
      }
      if (!v5) {
        break;
      }
      uint64_t v10 = *v8;
      *uint64_t v8 = v8[1];
      v8[1] = v10;
      --v8;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

char *sub_10005D8FC(char *result, char *a2, char *a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    Swift::Int v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * (void)a3 - 8;
LABEL_5:
    double result = *(char **)(v7 + 8 * (void)v4);
    uint64_t v9 = v6;
    uint64_t v10 = (void *)v8;
    while (1)
    {
      double result = (char *)[result typeCompare:*v10];
      if (result != (char *)-1)
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t v11 = *v10;
      double result = (char *)v10[1];
      void *v10 = result;
      v10[1] = v11;
      --v10;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D9B8(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v29 = __src;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = a2 - __src;
  int64_t v8 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v8 = a2 - __src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  unint64_t v28 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (a4 != a2 || &a2[8 * v12] <= a4) {
        memmove(a4, a2, 8 * v12);
      }
      Swift::Int v18 = &a4[8 * v12];
      Swift::Int v27 = v18;
      uint64_t v29 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        Swift::Int v19 = (char *)(a3 - 8);
        BOOL v20 = v5;
        while (1)
        {
          uint64_t v21 = v19 + 8;
          v20 -= 8;
          self;
          uint64_t v22 = swift_dynamicCastObjCClass();
          if (v22
            && (v23 = (void *)v22, self, (uint64_t v24 = swift_dynamicCastObjCClass()) != 0)
            && [v23 typeCompare:v24] != (id)-1)
          {
            Swift::Int v27 = v18 - 8;
            if (v21 < v18 || v19 >= v18 || v21 != v18) {
              *(void *)Swift::Int v19 = *((void *)v18 - 1);
            }
            BOOL v20 = v5;
            v18 -= 8;
            if (v5 <= v6) {
              goto LABEL_47;
            }
          }
          else
          {
            if (v21 != v5 || v19 >= v5) {
              *(void *)Swift::Int v19 = *(void *)v20;
            }
            uint64_t v29 = v20;
            if (v20 <= v6) {
              goto LABEL_47;
            }
          }
          v19 -= 8;
          uint64_t v5 = v20;
          if (v18 <= a4) {
            goto LABEL_47;
          }
        }
      }
      goto LABEL_47;
    }
  }
  else if (v7 >= -7)
  {
    if (a4 != __src || &__src[8 * v9] <= a4) {
      memmove(a4, __src, 8 * v9);
    }
    Swift::Int v27 = &a4[8 * v9];
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      unint64_t v13 = a4;
      do
      {
        self;
        uint64_t v14 = swift_dynamicCastObjCClass();
        if (v14
          && (id v15 = (void *)v14, self, (v16 = swift_dynamicCastObjCClass()) != 0)
          && [v15 typeCompare:v16] != (id)-1)
        {
          if (v6 != v13) {
            *(void *)uint64_t v6 = *(void *)v13;
          }
          v13 += 8;
          unint64_t v28 = v13;
          uint64_t v17 = v5;
        }
        else
        {
          uint64_t v17 = v5 + 8;
          if (v6 < v5 || v6 >= v17 || v6 != v5) {
            *(void *)uint64_t v6 = *(void *)v5;
          }
        }
        v6 += 8;
        if (v13 >= &a4[8 * v9]) {
          break;
        }
        uint64_t v5 = v17;
      }
      while ((unint64_t)v17 < a3);
      uint64_t v29 = v6;
    }
LABEL_47:
    sub_1000532F8(&v29, &v28, &v27);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005DCD8(id *__src, id *a2, unint64_t a3, id *__dst)
{
  Swift::Int v4 = __dst;
  uint64_t v6 = a2;
  int64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (id *)(a3 - 8);
        Swift::Int v18 = v6;
        while (1)
        {
          Swift::Int v19 = v17 + 1;
          uint64_t v20 = (uint64_t)*--v18;
          if ([*(v16 - 1) typeCompare:v20] == (id)-1)
          {
            if (v19 != v6 || v17 >= v6) {
              *uint64_t v17 = *v18;
            }
            uint64_t v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v22 = v16 - 1;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *uint64_t v17 = *(v16 - 1);
            }
            Swift::Int v18 = v6;
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if ([*v6 typeCompare:*v4] == (id)-1)
        {
          id v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            id *v7 = *v6;
          }
        }
        else
        {
          if (v7 != v4) {
            id *v7 = *v4;
          }
          uint64_t v23 = ++v4;
          id v15 = v6;
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_1000532F8(&v24, &v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005DF6C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10005DF84()
{
  return 5;
}

uint64_t sub_10005DF8C()
{
  sub_10005DFC0();
  uint64_t result = static UIColor.cafui_tableCellPlainBackground.getter();
  qword_1000EA6F0 = result;
  return result;
}

unint64_t sub_10005DFC0()
{
  unint64_t result = qword_1000E6BE0;
  if (!qword_1000E6BE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E6BE0);
  }
  return result;
}

void sub_10005E000(uint64_t a1)
{
}

void sub_10005E014(uint64_t a1)
{
}

void sub_10005E028(uint64_t a1)
{
}

void sub_10005E03C(uint64_t a1)
{
}

void sub_10005E050(uint64_t a1, SEL *a2, void *a3)
{
  id v4 = [self *a2];
  if (qword_1000E46B0 != -1) {
    swift_once();
  }
  id v5 = (id)qword_1000E6700;
  id v6 = [v4 resolvedColorWithTraitCollection:v5];

  *a3 = v6;
}

void sub_10005E108()
{
  id v0 = [self labelColor];
  id v1 = [v0 colorWithAlphaComponent:0.35];

  qword_1000EA718 = (uint64_t)v1;
}

void sub_10005E178()
{
  if (qword_1000E46A0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000E46B0;
  id v1 = (id)qword_1000EA718;
  if (v0 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1000E6700;
  id v3 = [v1 resolvedColorWithTraitCollection:v2];

  qword_1000EA720 = (uint64_t)v3;
}

id sub_10005E24C()
{
  id result = [self traitCollectionWithUserInterfaceStyle:1];
  qword_1000E6700 = (uint64_t)result;
  return result;
}

char *sub_10005E28C()
{
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for ClimateStepperPowerButton();
  id v1 = [super init];
  id v2 = &v1[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *((void *)v2 + 1);
  *(_OWORD *)id v2 = xmmword_1000B3240;
  id v5 = v1;
  if (!v4
    || (v3 == 0x7265776F70 ? (BOOL v6 = v4 == 0xE500000000000000) : (BOOL v6 = 0),
        !v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  char v7 = v5[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v5[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if ((v7 & 1) == 0)
  {
    int64_t v8 = *(void **)&v5[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    int64_t v9 = v5;
    [v8 removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];

  return v5;
}

id sub_10005E3FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateStepperPowerButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateStepperPowerButton()
{
  return self;
}

uint64_t ClimateButton.action.getter()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v2 = *v1;
  sub_10001C6B0(*v1);
  return v2;
}

uint64_t ClimateButton.action.setter(uint64_t a1, uint64_t a2)
{
  id v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *id v5 = a1;
  v5[1] = a2;
  return sub_100005690(v6);
}

uint64_t (*ClimateButton.action.modify())()
{
  return j__swift_endAccess;
}

uint64_t ClimateButton.popoverDelegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ClimateButton.popoverDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ClimateButton.popoverDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  _OWORD v3[3] = Strong;
  v3[4] = v7;
  return sub_10005E6B0;
}

void sub_10005E6B0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

id ClimateButton.imageSymbolConfiguration.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
LABEL_5:
    id v8 = v2;
    return v3;
  }
  id result = [self _preferredFontForTextStyle:UIFontTextStyleBody weight:UIFontWeightSemibold];
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [self configurationWithFont:result scale:3];

    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void ClimateButton.imageSymbolConfiguration.setter(void *a1)
{
  uint64_t v2 = v1;
  id v4 = ClimateButton.imageSymbolConfiguration.getter();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
  *(void *)(v2 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration) = a1;
  id v7 = a1;

  id v6 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  LOBYTE(v5) = static NSObject.== infix(_:_:)();

  if ((v5 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
}

void (*ClimateButton.imageSymbolConfiguration.modify(id *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = ClimateButton.imageSymbolConfiguration.getter();
  return sub_10005E910;
}

void sub_10005E910(uint64_t a1, char a2)
{
  id v4 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2)
  {
    id v5 = v4;
    id v6 = ClimateButton.imageSymbolConfiguration.getter();
    id v7 = *(void **)(v3 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
    *(void *)(v3 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration) = v5;
    id v8 = v5;

    id v9 = ClimateButton.imageSymbolConfiguration.getter();
    sub_100007310(0, (unint64_t *)&unk_1000E7700);
    char v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) == 0) {
      ClimateButton.updateClimateConfiguration()();
    }

    objc_super v11 = *(void **)a1;
  }
  else
  {
    id v16 = ClimateButton.imageSymbolConfiguration.getter();
    uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
    *(void *)(v3 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration) = v4;
    id v13 = v4;

    id v14 = ClimateButton.imageSymbolConfiguration.getter();
    sub_100007310(0, (unint64_t *)&unk_1000E7700);
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0) {
      ClimateButton.updateClimateConfiguration()();
    }

    objc_super v11 = v16;
  }
}

uint64_t ClimateButton.imageSystemName.getter()
{
  return sub_10005EB00(&OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
}

uint64_t ClimateButton.imageSystemName.setter(uint64_t a1, uint64_t a2)
{
  return sub_10005EB60(a1, a2, &OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
}

uint64_t (*ClimateButton.imageSystemName.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName;
  v3[5] = v1;
  v3[6] = v4;
  id v5 = (void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  _OWORD v3[3] = *v5;
  v3[4] = v6;
  swift_bridgeObjectRetain();
  return sub_10005EAF0;
}

uint64_t ClimateButton.title.getter()
{
  return sub_10005EB00(&OBJC_IVAR____TtC7Climate13ClimateButton_title);
}

uint64_t sub_10005EB00(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t ClimateButton.title.setter(uint64_t a1, uint64_t a2)
{
  return sub_10005EB60(a1, a2, &OBJC_IVAR____TtC7Climate13ClimateButton_title);
}

uint64_t sub_10005EB60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *a3);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  uint64_t *v6 = a1;
  v6[1] = a2;
  if (a2)
  {
    if (v9)
    {
      BOOL v10 = v8 == a1 && v9 == a2;
      if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (!v9)
  {
    return result;
  }
  ClimateButton.updateClimateConfiguration()();
  return swift_bridgeObjectRelease();
}

uint64_t (*ClimateButton.title.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate13ClimateButton_title;
  v3[5] = v1;
  v3[6] = v4;
  id v5 = (void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  _OWORD v3[3] = *v5;
  v3[4] = v6;
  swift_bridgeObjectRetain();
  return sub_10005EAF0;
}

void sub_10005EC88(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  id v7 = (uint64_t *)(v5 + v4);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t *v7 = v3;
  v7[1] = v6;
  BOOL v10 = (uint64_t *)(v2[5] + v2[6]);
  if (a2)
  {
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    swift_bridgeObjectRetain();
    if (v12)
    {
      if (v8)
      {
        BOOL v13 = v11 == v9 && v12 == v8;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_20;
        }
      }
      goto LABEL_19;
    }
    if (v8)
    {
LABEL_19:
      ClimateButton.updateClimateConfiguration()();
LABEL_20:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = v10[1];
    if (v14)
    {
      if (v8)
      {
        BOOL v15 = *v10 == v9 && v14 == v8;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_24;
        }
      }
    }
    else if (!v8)
    {
      goto LABEL_25;
    }
    ClimateButton.updateClimateConfiguration()();
  }
LABEL_24:
  swift_bridgeObjectRelease();
LABEL_25:

  free(v2);
}

void *ClimateButton.attributedTitle.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_attributedTitle);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ClimateButton.attributedTitle.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_attributedTitle);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  ClimateButton.updateClimateConfiguration()();
}

void (*ClimateButton.attributedTitle.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_10005EEB0;
}

void sub_10005EEB0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
}

uint64_t ClimateButton.smallTitle.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle);
  swift_beginAccess();
  return *v1;
}

void ClimateButton.smallTitle.setter(char a1)
{
  int v3 = a1 & 1;
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle);
  swift_beginAccess();
  int v5 = *v4;
  *uint64_t v4 = a1;
  if (v5 != v3) {
    ClimateButton.updateClimateConfiguration()();
  }
}

void (*ClimateButton.smallTitle.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle;
  _OWORD v3[3] = v1;
  v3[4] = v4;
  int v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return sub_10005F014;
}

void sub_10005F014(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  int v4 = *(unsigned __int8 *)(*(void *)a1 + 40);
  int v5 = *(unsigned __int8 *)(v3 + v2);
  *(unsigned char *)(v3 + v2) = v4;
  if (v4 != v5) {
    ClimateButton.updateClimateConfiguration()();
  }

  free(v1);
}

Swift::Void __swiftcall ClimateButton.updatePresentation()()
{
  sub_10009F8A4();
  id v1 = [v0 setEnabled:((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x128))() & 0x18) == 0];
  (*(void (**)(id))((swift_isaMask & *v0) + 0x228))(v1);
  uint64_t v2 = *(void (**)(void))((swift_isaMask & *v0) + 0x230);

  v2();
}

uint64_t ClimateButton.shouldBeHighlighted.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted);
}

id ClimateButton.shouldBeHighlighted.setter(char a1)
{
  v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = a1;
  return [v1 setHighlighted:a1 & 1];
}

uint64_t ClimateButton.touchUpInsideActionTriggered()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (*v2)
  {
    swift_retain();
    v3(v1);
    sub_100005690((uint64_t)v3);
  }
  uint64_t v4 = v1 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v6 + 8))(0, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ClimateButton.longPressGestureTriggered(_:)(void *a1)
{
  uint64_t v2 = v1;
  if ([a1 state] == (id)1)
  {
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    uint64_t v4 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x240))(1);
    int v5 = (char *)v2 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
    swift_beginAccess();
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v7 = *((void *)v5 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(1, ObjectType, v7);
      return swift_unknownObjectRelease();
    }
  }
  else if ([a1 state] == (id)3)
  {
    (*(void (**)(void))((swift_isaMask & *v1) + 0x240))(0);
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    uint64_t v9 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    BOOL v10 = (char *)v2 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v11 = *((void *)v10 + 1);
      uint64_t v12 = swift_getObjectType();
      (*(void (**)(void, uint64_t, uint64_t))(v11 + 8))(0, v12, v11);
      swift_unknownObjectRelease();
    }
    [a1 locationInView:v2];
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    [v2 bounds];
    v19.x = v14;
    v19.y = v16;
    uint64_t result = CGRectContainsPoint(v20, v19);
    if (result) {
      return (uint64_t)[v2 sendActionsForControlEvents:64];
    }
  }
  else
  {
    uint64_t result = (uint64_t)[a1 state];
    if (result == 4)
    {
      uint64_t v17 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x240);
      return v17(0);
    }
  }
  return result;
}

void ClimateButton.updateClimateConfiguration()()
{
  sub_10009F8A4();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName;
  swift_beginAccess();
  if (*((void *)v1 + 1))
  {
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = ClimateButton.imageSymbolConfiguration.getter();
    id v4 = (id)CAFUIImageForSymbolNameWithConfiguration();

    [v0 setImage:v4 forState:0];
  }
  else
  {
    [v0 setImage:0 forState:0];
  }
  int v5 = (id *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_attributedTitle);
  uint64_t v6 = swift_beginAccess();
  if (*v5)
  {
    id v7 = *v5;
    [v0 setAttributedTitle:v7 forState:0];
    [v0 setTitle:0 forState:0];

    return;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x160))(v6);
  if (v9)
  {
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t v11 = (char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle;
      swift_beginAccess();
      if (*v11 == 1)
      {
        id v12 = [v0 titleLabel];
        if (v12)
        {
          double v13 = v12;
          id v14 = [self _preferredFontForTextStyle:UIFontTextStyleCaption2 variant:1024];
          [v13 setFont:v14];
        }
      }
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v0 setTitle:v15 forState:0];

      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
  [v0 setTitle:0 forState:0];
LABEL_16:
  [v0 setAttributedTitle:0 forState:0];
}

uint64_t ClimateButton.layoutKey.getter@<X0>(uint64_t a1@<X8>)
{
  if ([v1 superview]
    && (sub_100007310(0, (unint64_t *)&qword_1000E7AB0),
        sub_100006730((uint64_t *)&unk_1000E6780),
        (swift_dynamicCast() & 1) != 0))
  {
    if (*((void *)&v8 + 1))
    {
      sub_10005DF6C(&v7, (uint64_t)v10);
      uint64_t v3 = v11;
      uint64_t v4 = v12;
      sub_100057CC8(v10, v11);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
      return sub_10000AC28((uint64_t)v10);
    }
  }
  else
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
  }
  sub_10000A404((uint64_t)&v7, (uint64_t *)&unk_1000E6770);
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
}

uint64_t ClimateButton.accessibilityLabelPrimary.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x160))();
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
  }
  else
  {
    int v5 = (void *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    swift_beginAccess();
    uint64_t v6 = v5[1];
    if (v6) {
      uint64_t v3 = *v5;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v6) {
      uint64_t v4 = (void *)v5[1];
    }
    else {
      uint64_t v4 = (void *)0xE000000000000000;
    }
    swift_bridgeObjectRetain();
  }
  v7._uint64_t countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall ClimateButton.refreshColorConfig()()
{
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial))
  {
    uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
    uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
    uint64_t v3 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x128);
    id v4 = *(id *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
    id v5 = v1;
    uint64_t v6 = swift_bridgeObjectRetain();
    char v7 = v3(v6);
    id v16 = sub_10006511C(v7, v4, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v16 = [self clearColor];
  }
  long long v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v9 = *(void *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  uint64_t v10 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x128);
  id v11 = *(id *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  id v12 = v8;
  uint64_t v13 = swift_bridgeObjectRetain();
  char v14 = v10(v13);
  id v15 = sub_1000651BC(v14, v12, v9);
  swift_bridgeObjectRelease();

  [v0 setBackgroundColor:v16];
  [v0 setTitleColor:v15 forState:0];
  [v0 setTitleColor:v15 forState:2];
  [v0 setTintColor:v15];
  [v0 setAdjustsImageWhenHighlighted:0];
}

uint64_t sub_10005FC84(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10005FCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_10005FD1C()
{
  uint64_t v1 = v0;
  id v2 = [self materialViewWithRecipe:4];
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v0 insertSubview:v3 atIndex:0];
    id v4 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1000B20F0;
    id v6 = [v3 leadingAnchor];
    id v7 = [v1 leadingAnchor];
    id v8 = [v6 constraintEqualToAnchor:v7];

    *(void *)(v5 + 32) = v8;
    id v9 = [v3 trailingAnchor];
    id v10 = [v1 trailingAnchor];
    id v11 = [v9 constraintEqualToAnchor:v10];

    *(void *)(v5 + 40) = v11;
    id v12 = [v3 topAnchor];
    id v13 = [v1 topAnchor];
    id v14 = [v12 constraintEqualToAnchor:v13];

    *(void *)(v5 + 48) = v14;
    id v15 = [v3 bottomAnchor];
    id v16 = [v1 bottomAnchor];
    id v17 = [v15 constraintEqualToAnchor:v16];

    *(void *)(v5 + 56) = v17;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 activateConstraints:isa];

    CGPoint v19 = *(void **)&v1[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    *(void *)&v1[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView] = v3;
  }
}

id ClimateButton.isHighlighted.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateButton();
  return [super isHighlighted];
}

uint64_t type metadata accessor for ClimateButton()
{
  return self;
}

id ClimateButton.isHighlighted.setter(char a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ClimateButton();
  [super setHighlighted:a1 & 1];
  return sub_100060140();
}

id sub_100060140()
{
  id v1 = [v0 titleLabel];
  if (v1)
  {
    objc_super v2 = v1;
    char v3 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x238))();
    double v4 = 0.2;
    if ((v3 & 1) == 0) {
      double v4 = 1.0;
    }
    [v2 setAlpha:v4];
  }
  id v5 = [v0 imageView];
  if (v5)
  {
    id v6 = v5;
    char v7 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x238))();
    double v8 = 0.2;
    if ((v7 & 1) == 0) {
      double v8 = 1.0;
    }
    [v6 setAlpha:v8];
  }
  uint64_t v9 = OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel;
  id result = *(id *)((char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel);
  if (result)
  {
    id result = [result alpha];
    if (v11 > 0.1)
    {
      id v12 = *(void **)((char *)v0 + v9);
      if (v12)
      {
        char v13 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x238))(result);
        double v14 = 0.2;
        if ((v13 & 1) == 0) {
          double v14 = 1.0;
        }
        return [v12 setAlpha:v14];
      }
    }
  }
  return result;
}

void *ClimateButton.init()()
{
  uint64_t v1 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v1 - 8);
  char v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel] = 0;
  double v8 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  *double v8 = 0;
  v8[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  *uint64_t v9 = 0;
  v9[1] = 0;
  id v10 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  void *v10 = 0;
  v10[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_attributedTitle] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_spaceBetweenSymbolAndTitle] = 0x4008000000000000;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_textOnTopOfSymbol] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = 0;
  double v11 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelModifier];
  *double v11 = 0;
  v11[1] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelShouldIncludeStates] = 1;
  id v12 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier];
  *id v12 = 0;
  v12[1] = 0;
  uint64_t v13 = qword_1000E46B8;
  double v14 = v0;
  if (v13 != -1) {
    swift_once();
  }
  id v15 = (void *)qword_1000EA728;
  id v16 = (void *)qword_1000EA730;
  uint64_t v17 = qword_1000EA738;
  Swift::Int v18 = &v14[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  *(void *)Swift::Int v18 = qword_1000EA728;
  *((void *)v18 + 1) = v16;
  *((void *)v18 + 2) = v17;
  id v19 = v15;
  id v20 = v16;
  swift_bridgeObjectRetain();

  uint64_t v21 = (objc_class *)type metadata accessor for ClimateButton();
  v40.receiver = v14;
  v40.super_class = v21;
  id v22 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = v22;
  sub_100006730(&qword_1000E67E0);
  uint64_t ObjectType = String.init<A>(describing:)();
  uint64_t v39 = v24;
  (*(void (**)(void))((swift_isaMask & *v23) + 0x268))();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A404((uint64_t)v3, (uint64_t *)&unk_1000E7C60);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v37._uint64_t countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v25._uint64_t countAndFlagsBits = 58;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
  }
  sub_10007AB50();
  [v23 setAdjustsImageWhenDisabled:0];
  [v23 setContentEdgeInsets:UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right];
  id v26 = [v23 imageView];
  if (v26)
  {
    Swift::Int v27 = v26;
    [v26 setContentMode:1];
  }
  [v23 setClipsToBounds:1];
  [v23 _setContinuousCornerRadius:12.0];
  sub_10005FD1C();
  (*(void (**)(void))((swift_isaMask & *v23) + 0x230))();
  ClimateButton.updateClimateConfiguration()();
  id v28 = [v23 titleLabel];
  if (v28)
  {
    uint64_t v29 = v28;
    [v28 setLineBreakMode:0];
  }
  id v30 = [v23 titleLabel];
  if (v30)
  {
    uint64_t v31 = v30;
    [v30 setTextAlignment:1];
  }
  id v32 = [v23 titleLabel];
  if (v32)
  {
    Swift::Int v33 = v32;
    id v34 = [self _preferredFontForTextStyle:UIFontTextStyleBody variant:1024];
    [v33 setFont:v34];
  }
  [v23 addTarget:v23 action:"touchUpInsideActionTriggered" forControlEvents:64];
  id v35 = [objc_allocWithZone((Class)UILongPressGestureRecognizer) initWithTarget:v23 action:"longPressGestureTriggered:"];
  [v23 addGestureRecognizer:v35];

  return v23;
}

id ClimateStepper.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

Swift::Void __swiftcall ClimateButton.layoutSubviews()()
{
  v25.receiver = v0;
  v25.super_class = (Class)type metadata accessor for ClimateButton();
  [super layoutSubviews];
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName;
  uint64_t v2 = swift_beginAccess();
  if (!*((void *)v1 + 1)) {
    goto LABEL_7;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x160))(v2);
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    sub_100060B10();
  }
  else
  {
LABEL_7:
    [v0 titleEdgeInsets];
    double left = UIEdgeInsetsZero.left;
    double bottom = UIEdgeInsetsZero.bottom;
    double right = UIEdgeInsetsZero.right;
    if (v14 != UIEdgeInsetsZero.top || v8 != left || v9 != bottom || v10 != right)
    {
      [v0 imageEdgeInsets];
      if (v21 != UIEdgeInsetsZero.top || v18 != left || v19 != bottom || v20 != right)
      {
        [v0 setTitleEdgeInsets:UIEdgeInsetsZero.top, left, bottom, right];
        [v0 setImageEdgeInsets:UIEdgeInsetsZero.top, left, bottom, right];
      }
    }
  }
}

void sub_100060B10()
{
  uint64_t v1 = v0;
  id v2 = [v0 imageView];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 image];

    if (v4)
    {
      [v4 size];
      double v6 = v5;
      double v8 = v7;

      id v9 = [v1 titleLabel];
      if (v9)
      {
        double v10 = v9;
        id v11 = [v9 text];

        if (v11)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v12 = [v1 titleLabel];
          if (v12
            && (uint64_t v13 = v12, v14 = [v12 font], v13, v14))
          {
            id v15 = self;
            id v16 = [v15 sharedApplication];
            id v17 = [v16 delegate];

            if (v17)
            {
              type metadata accessor for ClimateAppDelegate();
              swift_dynamicCastClassUnconditional();
              id v18 = sub_10008EAA4();
              swift_unknownObjectRelease();
              id v19 = [v15 sharedApplication];
              id v20 = [v19 userInterfaceLayoutDirection];

              id v21 = objc_allocWithZone((Class)NSString);
              NSString v22 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              id v23 = [v21 initWithString:v22];

              sub_100006730(&qword_1000E6840);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_1000B2000;
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              NSString v25 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              *(void *)(inited + 32) = v25;
              *(void *)(inited + 64) = sub_100007310(0, &qword_1000E6848);
              *(void *)(inited + 40) = v14;
              id v26 = v14;
              sub_100033F18(inited);
              type metadata accessor for Key(0);
              sub_100062554();
              Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v23 sizeWithAttributes:isa];
              double v29 = v28;
              double v31 = v30;

              [v1 bounds];
              double v32 = (CGRectGetWidth(v45) - v6) * 0.5;
              uint64_t v33 = OBJC_IVAR____TtC7Climate13ClimateButton_spaceBetweenSymbolAndTitle;
              double v34 = *(double *)&v1[OBJC_IVAR____TtC7Climate13ClimateButton_spaceBetweenSymbolAndTitle];
              if (v1[OBJC_IVAR____TtC7Climate13ClimateButton_textOnTopOfSymbol] == 1)
              {
                double v35 = -v6;
                if (v20 == (id)1) {
                  double v36 = 0.0;
                }
                else {
                  double v36 = -v6;
                }
                if (v20 != (id)1) {
                  double v35 = 0.0;
                }
                double v37 = v8 + v34;
                if (v20 == (id)1) {
                  double v38 = -v29;
                }
                else {
                  double v38 = v32;
                }
                [v1 setTitleEdgeInsets:0.0, v36, v37, v35];
                [v1 setImageEdgeInsets:v31 + *(double *)&v1[v33], v38, 0.0, 0.0];
              }
              else
              {
                double v39 = -v29;
                if (v20 != (id)1) {
                  double v39 = v32;
                }
                double v40 = v31 + v34;
                double v41 = -v6;
                if (v20 == (id)1) {
                  double v42 = -v6;
                }
                else {
                  double v42 = 0.0;
                }
                if (v20 == (id)1) {
                  double v43 = 0.0;
                }
                else {
                  double v43 = v41;
                }
                [v1 setImageEdgeInsets:0.0, v39, v40];
                [v1 setTitleEdgeInsets:v8 + *(double *)&v1[v33], v43, 0.0, v42];
              }
            }
            else
            {
              __break(1u);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }
  }
}

uint64_t ClimateButton.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  return sub_100061070(a1, a2, (SEL *)&selRef_touchesBegan_withEvent_, 1);
}

uint64_t ClimateButton.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  return sub_100061070(a1, a2, (SEL *)&selRef_touchesEnded_withEvent_, 0);
}

uint64_t sub_100061070(uint64_t a1, uint64_t a2, SEL *a3, uint64_t a4)
{
  sub_100007310(0, &qword_1000E67E8);
  sub_100062434(&qword_1000E67F0, &qword_1000E67E8);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for ClimateButton();
  [super isa:a2];

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x240))(a4);
}

uint64_t sub_100061184(void *a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5, uint64_t a6)
{
  sub_100007310(0, &qword_1000E67E8);
  sub_100062434(&qword_1000E67F0, &qword_1000E67E8);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a4;
  id v11 = a1;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v14.receiver = v11;
  v14.super_class = (Class)type metadata accessor for ClimateButton();
  [super isa:v10];

  (*(void (**)(uint64_t))((swift_isaMask & *v11) + 0x240))(a6);
  return swift_bridgeObjectRelease();
}

uint64_t ClimateButton.pressesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  return sub_1000612D8(a1, a2, (SEL *)&selRef_pressesBegan_withEvent_, 1);
}

uint64_t sub_1000612D8(uint64_t a1, uint64_t a2, SEL *a3, uint64_t a4)
{
  sub_100007310(0, &qword_1000E67F8);
  sub_100062434((unint64_t *)&unk_1000E6800, &qword_1000E67F8);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for ClimateButton();
  [super isa:a2];

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x240))(a4);
}

uint64_t sub_1000613EC(void *a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5, uint64_t a6)
{
  sub_100007310(0, &qword_1000E67F8);
  sub_100062434((unint64_t *)&unk_1000E6800, &qword_1000E67F8);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a4;
  id v11 = a1;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v14.receiver = v11;
  v14.super_class = (Class)type metadata accessor for ClimateButton();
  [super isa:v10];

  (*(void (**)(uint64_t))((swift_isaMask & *v11) + 0x240))(a6);
  return swift_bridgeObjectRelease();
}

uint64_t ClimateButton.pressesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  return sub_1000612D8(a1, a2, (SEL *)&selRef_pressesEnded_withEvent_, 0);
}

Swift::Void __swiftcall ClimateButton.didMoveToSuperview()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for ClimateButton();
  [super didMoveToSuperview];
  sub_10007AB50();
}

id ClimateStepper.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return [v9 initWithFrame:a1, a2, a3, a4];
}

void ClimateButton.init(frame:)()
{
}

id ClimateButton.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateButton();
  return [super dealloc];
}

uint64_t sub_1000617E0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x268))();
}

id sub_10006183C(char a1)
{
  objc_super v2 = v1;
  id v4 = [objc_allocWithZone((Class)UILabel) init];
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setText:v5];

  id v6 = [self systemGreenColor];
  [v4 setTextColor:v6];

  id v7 = [self systemFontOfSize:12.0 weight:UIFontWeightSemibold];
  [v4 setFont:v7];

  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setTextAlignment:1];
  [v2 addSubview:v4];
  id v8 = [v2 imageView];
  if (v8)
  {
    id v9 = v8;
    id v10 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1000B2110;
    id v12 = [v4 leadingAnchor];
    id v13 = [v2 leadingAnchor];
    id v14 = [v12 constraintEqualToAnchor:v13];

    *(void *)(v11 + 32) = v14;
    id v15 = [v4 trailingAnchor];
    id v16 = [v2 trailingAnchor];
    id v17 = [v15 constraintEqualToAnchor:v16];

    *(void *)(v11 + 40) = v17;
    id v18 = [v4 topAnchor];
    id v19 = [v9 bottomAnchor];
    id v20 = [v18 constraintEqualToAnchor:v19 constant:3.0];

    *(void *)(v11 + 48) = v20;
    *(void *)&v29.a = v11;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v10 activateConstraints:isa];

    [v2 setNeedsLayout];
    [v2 setNeedsDisplay];
    [v2 layoutIfNeeded];
    [v4 setNeedsLayout];
    [v4 setNeedsDisplay];
    [v4 layoutIfNeeded];
    id v22 = v4;
    id v23 = v22;
    if (a1)
    {
      long long v24 = xmmword_1000B39D0;
      long long v25 = xmmword_1000B39E0;
      long long v26 = 0uLL;
    }
    else
    {
      [v22 frame];
      CGFloat Height = CGRectGetHeight(v30);
      CGAffineTransformMakeTranslation(&v29, 0.0, Height);
      long long v25 = *(_OWORD *)&v29.a;
      long long v24 = *(_OWORD *)&v29.c;
      long long v26 = *(_OWORD *)&v29.tx;
    }
    *(_OWORD *)&v29.a = v25;
    *(_OWORD *)&v29.c = v24;
    *(_OWORD *)&v29.tx = v26;
    [v23 setTransform:&v29];
  }
  return v4;
}

Swift::Void __swiftcall ClimateButton.updateAutoModeLabel(isVisible:isAnimated:animationDelay:)(Swift::Bool isVisible, Swift::Bool isAnimated, Swift::Double animationDelay)
{
  id v4 = v3;
  uint64_t v8 = OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel;
  id v9 = *(void **)&v3[OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel];
  id v10 = &unk_1000E4000;
  if (v9) {
    goto LABEL_8;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1000EA798;
  id v12 = v3;
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v13))
  {
    logdouble a = v11;
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = (void *)swift_slowAlloc();
    *(_DWORD *)id v14 = 138412290;
    *(void *)&aBlock.double a = v12;
    id v15 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v48 = v12;

    id v10 = (void *)&unk_1000E4000;
    _os_log_impl((void *)&_mh_execute_header, loga, v13, "Creating autoMode label for: %@", v14, 0xCu);
    sub_100006730(&qword_1000E4F30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v16 = sub_10006183C(isVisible);
  id v17 = *(void **)&v4[v8];
  *(void *)&v4[v8] = v16;

  id v9 = *(void **)&v4[v8];
  if (v9)
  {
LABEL_8:
    id v18 = v9;
    [v18 frame];
    CGFloat Height = CGRectGetHeight(v53);
    CGAffineTransformMakeTranslation(&aBlock, 0.0, Height);
    if (isVisible) {
      double a = 1.0;
    }
    else {
      double a = aBlock.a;
    }
    if (isVisible) {
      double b = 0.0;
    }
    else {
      double b = aBlock.b;
    }
    if (isVisible) {
      double c = 0.0;
    }
    else {
      double c = aBlock.c;
    }
    if (isVisible) {
      double d = 1.0;
    }
    else {
      double d = aBlock.d;
    }
    if (isVisible) {
      double tx = 0.0;
    }
    else {
      double tx = aBlock.tx;
    }
    if (isVisible) {
      double ty = 0.0;
    }
    else {
      double ty = aBlock.ty;
    }
    uint64_t v26 = v10[219];
    if (isAnimated)
    {
      if (v26 != -1) {
        swift_once();
      }
      double v51 = animationDelay;
      Swift::Int v27 = qword_1000EA798;
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        CGAffineTransform v29 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)CGAffineTransform v29 = 67109120;
        LODWORD(aBlock.a) = isVisible;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Animating autoMode label, isVisible:%{BOOL}d", v29, 8u);
        swift_slowDealloc();
      }
      [v18 setAlpha:1.0];
      Swift::Bool v30 = isVisible;
      double v31 = 120.0;
      if (isVisible) {
        double v31 = 26.0;
      }
      os_log_t log = *(os_log_t *)&v31;
      if (isVisible) {
        double v32 = 172.0;
      }
      else {
        double v32 = 1740.0;
      }
      if (isVisible) {
        double v33 = 0.7;
      }
      else {
        double v33 = 0.4;
      }
      double v34 = self;
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = v4;
      *(double *)(v35 + 24) = a;
      *(double *)(v35 + 32) = b;
      *(double *)(v35 + 40) = c;
      *(double *)(v35 + 48) = d;
      *(double *)(v35 + 56) = tx;
      *(double *)(v35 + 64) = ty;
      *(void *)&aBlock.double tx = sub_1000624BC;
      *(void *)&aBlock.double ty = v35;
      *(void *)&aBlock.double a = _NSConcreteStackBlock;
      *(void *)&aBlock.double b = 1107296256;
      *(void *)&aBlock.double c = sub_10005FC84;
      *(void *)&aBlock.double d = &unk_1000CBDD0;
      double v36 = _Block_copy(&aBlock);
      double v37 = v4;
      swift_release();
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v37;
      *(unsigned char *)(v38 + 24) = v30;
      *(void *)&aBlock.double tx = sub_100062518;
      *(void *)&aBlock.double ty = v38;
      *(void *)&aBlock.double a = _NSConcreteStackBlock;
      *(void *)&aBlock.double b = 1107296256;
      *(void *)&aBlock.double c = sub_10005FCC8;
      *(void *)&aBlock.double d = &unk_1000CBE20;
      double v39 = _Block_copy(&aBlock);
      double v40 = v37;
      swift_release();
      [v34 _animateUsingSpringWithDuration:4 delay:v36 options:v39 mass:v33 stiffness:v51 damping:1.0 initialVelocity:v32 animations:*(double *)&log completion:0.0];

      _Block_release(v39);
      _Block_release(v36);
    }
    else
    {
      if (v26 != -1) {
        swift_once();
      }
      double v41 = qword_1000EA798;
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        double v43 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)double v43 = 67109120;
        LODWORD(aBlock.a) = isVisible;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "updating autoMode label, isVisible:%{BOOL}d", v43, 8u);
        swift_slowDealloc();
      }
      uint64_t v44 = *(void **)&v4[v8];
      if (v44)
      {
        aBlock.double a = a;
        aBlock.double b = b;
        aBlock.double c = c;
        aBlock.double d = d;
        aBlock.double tx = tx;
        aBlock.double ty = ty;
        [v44 setTransform:&aBlock];
        CGRect v45 = *(void **)&v4[v8];
        if (v45)
        {
          if (isVisible) {
            double v46 = 1.0;
          }
          else {
            double v46 = 0.0;
          }
          id v47 = v45;
          [v47 setAlpha:v46];
        }
      }
    }
  }
}

id sub_100062230(uint64_t a1, _OWORD *a2)
{
  id result = *(id *)(a1 + OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel);
  if (result)
  {
    long long v3 = a2[1];
    v4[0] = *a2;
    v4[1] = v3;
    v4[2] = a2[2];
    return [result setTransform:v4];
  }
  return result;
}

void _s7Climate0A6ButtonC5coderACSgSo7NSCoderC_tcfc_0()
{
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel] = 0;
  objc_super v1 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  *objc_super v1 = 0;
  v1[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = 0;
  objc_super v2 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  void *v2 = 0;
  v2[1] = 0;
  long long v3 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  *long long v3 = 0;
  v3[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_attributedTitle] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_spaceBetweenSymbolAndTitle] = 0x4008000000000000;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_textOnTopOfSymbol] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = 0;
  id v4 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelModifier];
  *id v4 = 0;
  v4[1] = 0;
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelShouldIncludeStates] = 1;
  NSString v5 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier];
  *NSString v5 = 0;
  v5[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100062434(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007310(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100062484()
{
  return _swift_deallocObject(v0, 72, 7);
}

id sub_1000624BC()
{
  return sub_100062230(*(void *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_1000624C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000624D8()
{
  return swift_release();
}

uint64_t sub_1000624E0()
{
  return _swift_deallocObject(v0, 25, 7);
}

id sub_100062518(id result)
{
  if (result)
  {
    uint64_t result = *(id *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel);
    if (result)
    {
      double v2 = 0.0;
      if (*(unsigned char *)(v1 + 24)) {
        double v2 = 1.0;
      }
      return [result setAlpha:v2];
    }
  }
  return result;
}

unint64_t sub_100062554()
{
  unint64_t result = qword_1000E4820;
  if (!qword_1000E4820)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4820);
  }
  return result;
}

double sub_1000625B4()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ClimateSeatFanServiceButton());
  long long v3 = sub_10004BD94(v1);
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730(&qword_1000E4B50);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1000B2000;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = &off_1000CBD98;
  return result;
}

uint64_t sub_100062630()
{
  return sub_100082690();
}

char *sub_10006265C(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  long long v3 = &v1[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig];
  uint64_t v4 = self;
  NSString v5 = v1;
  id v6 = [v4 labelColor];
  id v7 = [v4 labelColor];
  id v8 = [v7 colorWithAlphaComponent:0.25];

  id v9 = [v4 labelColor];
  *(void *)long long v3 = v6;
  *((void *)v3 + 1) = v8;
  *((void *)v3 + 2) = v9;
  *((void *)v3 + 3) = &_swiftEmptyDictionarySingleton;
  *(void *)&v5[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_autoModeGlyph] = 0;
  id v10 = objc_allocWithZone((Class)type metadata accessor for ClimateFanButton());
  id v11 = a1;
  sub_100082818(v11, 1u);
  os_log_type_t v13 = v12;
  *(void *)&v5[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fanButton] = v12;
  [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v14 = v13;
  id v15 = v6;
  id v16 = v8;
  id v17 = v9;
  sub_1000823F0(v15, v8, v9, (uint64_t)&_swiftEmptyDictionarySingleton);

  *(void *)&v5[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fan] = v11;
  id v18 = v11;

  id v19 = (char *)sub_100015F7C(0, 0, 1);
  id v20 = v19;
  uint64_t v21 = OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fanButton;
  id v22 = *(unsigned char **)&v19[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fanButton];
  int v23 = v22[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v22[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v23 == 1)
  {
    long long v24 = v19;
  }
  else
  {
    long long v25 = *(void **)&v22[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    uint64_t v26 = v19;
    Swift::Int v27 = v22;
    [v25 removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  [v18 registerObserver:v20];
  [v20 addSubview:*(void *)&v20[v21]];
  sub_1000628A8();
  sub_100062AF8();

  return v20;
}

void sub_1000628A8()
{
  uint64_t v1 = v0;
  id v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fanButton];
  id v5 = [v4 leadingAnchor];
  id v6 = [v1 leadingAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 trailingAnchor];
  id v9 = [v1 trailingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [v4 topAnchor];
  id v12 = [v1 topAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  id v14 = [v4 bottomAnchor];
  id v15 = [v1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v3 + 56) = v16;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

void sub_100062AF8()
{
  uint64_t v1 = v0;
  BOOL v2 = (sub_100082690() & 0x1A) == 2;
  v0[OBJC_IVAR____TtC7Climate16ClimateIndicator_isAutoMode] = v2;
  if ((sub_100082690() & 0x1A) == 2)
  {
    id v3 = [*(id *)&v0[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fan] fanLevelRange];
    id v4 = [v3 maximum];
LABEL_5:
    id v7 = v4;

    [v7 floatValue];
    float v9 = v8;

    goto LABEL_7;
  }
  char v5 = sub_100082690();
  id v6 = *(void **)&v0[OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fan];
  if ((v5 & 0x18) != 0)
  {
    id v3 = [v6 fanLevelRange];
    id v4 = [v3 minimum];
    goto LABEL_5;
  }
  float v9 = (float)[v6 fanLevel];
LABEL_7:
  sub_1000825B0(v9);
  sub_10009F8A4();
  [v1 setEnabled:(sub_100082690() & 0x18) == 0];
  sub_100062C70();

  ClimateButton.refreshColorConfig()();
}

void sub_100062C70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_fanButton);
  if ((sub_100082690() & 0x1A) == 2)
  {
    id v3 = self;
    id v4 = [v3 labelColor];
    id v5 = [v3 systemGreenColor];
    id v6 = [v5 colorWithAlphaComponent:0.25];

    id v7 = [v3 systemGreenColor];
    float v8 = &_swiftEmptyDictionarySingleton;
    float v9 = v4;
    id v10 = v6;
LABEL_5:
    sub_1000823F0(v9, v10, v7, (uint64_t)v8);
    goto LABEL_6;
  }
  id v11 = *(void **)(v2 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors);
  id v12 = *(void **)(v2 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 8);
  id v13 = *(void **)(v2 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 16);
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 24);
  id v16 = *(void **)(v1 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig);
  id v15 = *(void **)(v1 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig + 8);
  id v18 = *(void **)(v1 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig + 16);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig + 24);
  id v25 = v13;
  swift_bridgeObjectRetain();
  id v19 = v11;
  id v20 = v12;
  sub_10008E948((uint64_t)v19, v12, v13, v14, (uint64_t)v16, v15, v18, v17);
  LOBYTE(v12) = v21;
  swift_bridgeObjectRelease();

  if ((v12 & 1) == 0)
  {
    id v22 = v18;
    swift_bridgeObjectRetain();
    id v23 = v16;
    id v24 = v15;
    float v9 = v23;
    id v10 = v15;
    id v7 = v18;
    float v8 = (void *)v17;
    goto LABEL_5;
  }
LABEL_6:
  ClimateButton.refreshColorConfig()();
}

void sub_100062E28()
{
  sub_100026DD0(v0 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_delegate);

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig + 8);
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_defaultProgressViewColorConfig + 16);
  swift_bridgeObjectRelease();

  id v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate19ClimateFanIndicator_autoModeGlyph);
}

id sub_100062EBC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateFanIndicator();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateFanIndicator()
{
  return self;
}

uint64_t sub_100062FAC(void *a1, unsigned __int8 a2)
{
  float v4 = sub_100082504();
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v4 <= -1.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v4 >= 256.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if ((int)v4 == a2 || (sub_100082690() & 0x1A) == 2)
  {
    if (qword_1000E46D8 == -1)
    {
LABEL_7:
      id v5 = qword_1000EA798;
      os_log_type_t v6 = static os_log_type_t.default.getter();
      uint64_t result = os_log_type_enabled(v5, v6);
      if (!result) {
        return result;
      }
      float v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v8 = 0;
      float v9 = "Fan indicator did update with same level or automode ON. Skipping.";
      goto LABEL_9;
    }
LABEL_27:
    swift_once();
    goto LABEL_7;
  }
  if ([a1 receivedAllValues])
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v10 = qword_1000EA798;
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v12 = 16908544;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fan indicator did update level: %{public}hhu", v12, 5u);
      swift_slowDealloc();
    }
    sub_100062AF8();
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_1000576A8();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v5 = qword_1000EA798;
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v5, v6);
    if (result)
    {
      float v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v8 = 0;
      float v9 = "Fan service hasn't receivedAllValues.";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v9, v8, 2u);
      return swift_slowDealloc();
    }
  }
  return result;
}

uint64_t sub_100063350(void *a1, char a2)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7Climate16ClimateIndicator_isAutoMode) == (a2 & 1))
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v7 = qword_1000EA798;
    os_log_type_t v8 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v7, v8);
    if (result)
    {
      float v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v9 = 0;
      id v10 = "Fan indicator did update with same autoMode value. Skipping.";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
      return swift_slowDealloc();
    }
  }
  else
  {
    if ([a1 receivedAllValues])
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      id v3 = qword_1000EA798;
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        id v5 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v5 = 67240192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fan service did update autoMode: %{BOOL,public}d", v5, 8u);
        swift_slowDealloc();
      }
      sub_100062AF8();
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        sub_1000576A8();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v7 = qword_1000EA798;
    os_log_type_t v8 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v7, v8);
    if (result)
    {
      float v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v9 = 0;
      id v10 = "Fan service automode hasn't receivedAllValues.";
      goto LABEL_17;
    }
  }
  return result;
}

void sub_100063644(uint64_t a1, uint64_t a2, void *a3, void **a4, int a5)
{
  uint64_t v53 = a2;
  int v51 = a5;
  id v48 = a3;
  uint64_t v52 = a1;
  uint64_t v6 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v6 - 8);
  uint64_t v49 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v48 - v9;
  uint64_t v10 = sub_100006730(&qword_1000E64B8);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1000EA798;
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v19 = 134349056;
    uint64_t v55 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Updating popover for side: %{public}lu", v19, 0xCu);
    swift_slowDealloc();
  }
  id v20 = a4;
  char v21 = self;
  id v22 = [v21 sharedApplication];
  id v23 = [v22 delegate];

  if (!v23)
  {
    __break(1u);
    goto LABEL_29;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v24 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if ((v55 & 4) == 0)
  {
    uint64_t v25 = v54;
    if (v52)
    {
LABEL_25:
      if (swift_unknownObjectWeakLoadStrong())
      {
        sub_100020DF8(v51 & 1, a4, 0);
        swift_unknownObjectRelease();
      }
      sub_100063E14((uint64_t)a4);
      return;
    }
    uint64_t v26 = qword_1000EA798;
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v28 = 134349056;
      uint64_t v55 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Creating popover for side: %{public}lu", v28, 0xCu);
      a4 = v20;
      swift_slowDealloc();
    }
    id v29 = [v21 sharedApplication];
    id v30 = [v29 delegate];

    if (v30)
    {
      swift_dynamicCastClassUnconditional();
      double v31 = sub_10008EAA4();
      swift_unknownObjectRelease();
      char v32 = v31[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      if (v32)
      {
        uint64_t v33 = v50;
        sub_10000ABC4(v53, v50);
        id v34 = objc_allocWithZone((Class)type metadata accessor for ClimateVerticalQuickActionPopover());
      }
      else
      {
        [v48 bounds];
        CGFloat v40 = CGRectGetWidth(v56) + -12.0;
        uint64_t v33 = v50;
        sub_10000ABC4(v53, v50);
        double v41 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimateHorizontalQuickActionPopover());
        *(void *)&v41[OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_quickActionContainers] = _swiftEmptyArrayStorage;
        *(void *)&v41[OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_popoverWidth] = 0;
        *(CGFloat *)&v41[OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_maxWidth] = v40;
      }
      uint64_t v42 = v49;
      sub_10000ABC4(v33, v49);
      swift_retain();
      double v43 = sub_100025AC4(v42, v25, (uint64_t)&off_1000CBF10);
      swift_release();
      sub_100057C04(v33);
      uint64_t v44 = 40;
      if (a4 == (void **)2) {
        uint64_t v44 = 24;
      }
      CGRect v45 = *(void **)(v25 + v44);
      *(void *)(v25 + v44) = v43;
      double v46 = v43;

      if (swift_unknownObjectWeakLoadStrong())
      {
        id v47 = v46;
        sub_100021A9C(v47, (uint64_t)a4);
        swift_unknownObjectRelease();
      }
      goto LABEL_25;
    }
LABEL_29:
    __break(1u);
    return;
  }
  sub_10007D794(v53, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000A404((uint64_t)v12, &qword_1000E64B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      double v37 = (void *)Strong;
      URL._bridgeToObjectiveC()(v36);
      double v39 = v38;
      [v37 openURL:v38 options:0 completionHandler:0];
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  sub_100063D48();
}

uint64_t sub_100063CC4()
{
  swift_unknownObjectWeakDestroy();

  sub_100026DD0((uint64_t)(v0 + 7));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClimatePopoverManager()
{
  return self;
}

void sub_100063D48()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100020DF8(1, (void **)2, 1);
    swift_unknownObjectRelease();
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100020DF8(1, (void **)8, 1);
    swift_unknownObjectRelease();
  }
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    [v1 invalidate];
    uint64_t v2 = *(void **)(v0 + 32);
  }
  else
  {
    uint64_t v2 = 0;
  }
  *(void *)(v0 + 32) = 0;

  id v3 = *(void **)(v0 + 48);
  if (v3)
  {
    [v3 invalidate];
    id v3 = *(void **)(v0 + 48);
  }
  *(void *)(v0 + 48) = 0;
}

void sub_100063E14(uint64_t a1)
{
  id v3 = self;
  double v4 = sub_100064494();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = a1;
  v18[4] = sub_100064690;
  v18[5] = v6;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000541CC;
  v18[3] = &unk_1000CBF78;
  uint64_t v7 = _Block_copy(v18);
  swift_release();
  id v8 = [v3 scheduledTimerWithTimeInterval:0 repeats:v7 block:v4];
  _Block_release(v7);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1000EA798;
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "ClimatePopoverManager timer created.", v11, 2u);
    swift_slowDealloc();
  }
  if (a1 != 2)
  {
    id v16 = *(void **)(v1 + 48);
    uint64_t v13 = (void **)(v1 + 48);
    id v12 = v16;
    if (v16) {
      goto LABEL_7;
    }
LABEL_9:
    id v17 = v8;
    goto LABEL_10;
  }
  uint64_t v14 = *(void **)(v1 + 32);
  uint64_t v13 = (void **)(v1 + 32);
  id v12 = v14;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_7:
  id v15 = v8;
  [v12 invalidate];
  id v12 = *v13;
LABEL_10:
  *uint64_t v13 = v8;
}

void sub_100064020(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void **)(v2 + 24);
  if (v5
    && (type metadata accessor for ClimateQuickActionPopover(),
        id v7 = a1,
        id v8 = v5,
        LOBYTE(a1) = static NSObject.== infix(_:_:)(),
        v7,
        v8,
        (a1 & 1) != 0))
  {
    int v9 = 1;
    uint64_t v10 = 2;
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 8;
  }
  os_log_type_t v11 = static os_log_type_t.default.getter();
  sub_100064454();
  id v12 = static OS_os_log.default.getter();
  if (os_log_type_enabled(v12, v11))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v11, "ClimatePopoverManager invalidate timer for side: %{public}lu", v13, 0xCu);
    swift_slowDealloc();
  }

  if (v9)
  {
    id v15 = (void **)(v3 + 32);
    uint64_t v14 = *(void **)(v3 + 32);
    if (v14)
    {
LABEL_9:
      [v14 invalidate];
      id v16 = *v15;
      goto LABEL_12;
    }
  }
  else
  {
    id v15 = (void **)(v3 + 48);
    uint64_t v14 = *(void **)(v3 + 48);
    if (v14) {
      goto LABEL_9;
    }
  }
  id v16 = 0;
LABEL_12:
  *id v15 = 0;

  os_log_type_t v17 = static os_log_type_t.default.getter();
  os_log_type_t v18 = static OS_os_log.default.getter();
  if (os_log_type_enabled(v18, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 67240448;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "ClimatePopoverManager should stop timer: %{BOOL,public}d for side: %{public}lu ", (uint8_t *)v19, 0x12u);
    swift_slowDealloc();
  }

  if ((a2 & 1) == 0) {
    sub_100063E14(v10);
  }
}

uint64_t sub_100064264(void *a1, uint64_t a2, void **a3)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if ([a1 isValid])
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      uint64_t v5 = qword_1000EA798;
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        id v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "ClimatePopoverManager timer did fired.", v7, 2u);
        swift_slowDealloc();
      }
      if (!swift_unknownObjectWeakLoadStrong()) {
        return swift_release();
      }
      sub_100020DF8(1, a3, 0);
      swift_release();
      return swift_unknownObjectRelease();
    }
    swift_release();
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  int v9 = qword_1000EA798;
  os_log_type_t v10 = static os_log_type_t.default.getter();
  uint64_t result = os_log_type_enabled(v9, v10);
  if (result)
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "ClimatePopoverManager timer invalidated.", v11, 2u);
    return swift_slowDealloc();
  }
  return result;
}

unint64_t sub_100064454()
{
  unint64_t result = qword_1000E4F00;
  if (!qword_1000E4F00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E4F00);
  }
  return result;
}

double sub_100064494()
{
  uint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned int v3 = [v1 BOOLForKey:v2];

  double v4 = 7.0;
  if (v3)
  {
    id v5 = [v0 standardUserDefaults];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 valueForKey:v6];

    if (v7)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v10, 0, sizeof(v10));
    }
    sub_1000646B0((uint64_t)v10, (uint64_t)v11);
    if (v12)
    {
      if (swift_dynamicCast()) {
        return v9;
      }
    }
    else
    {
      sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E5420);
    }
  }
  return v4;
}

uint64_t sub_100064620()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100064658()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100064690(void *a1)
{
  return sub_100064264(a1, *(void *)(v1 + 16), *(void ***)(v1 + 24));
}

uint64_t sub_100064698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000646A8()
{
  return swift_release();
}

uint64_t sub_1000646B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E5420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ClimateColorConfig(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s7Climate18ClimateColorConfigVwCP_0(void *a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClimateColorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClimateColorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClimateColorConfig(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClimateColorConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateColorConfig()
{
  return &type metadata for ClimateColorConfig;
}

id sub_10006490C(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_10007C484(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 56) + 24 * v3;
  id v6 = *(id *)v5;
  id v7 = *(void **)(v5 + 8);
  id v8 = *(id *)v5;
  id v9 = v7;
  swift_bridgeObjectRetain();
  return v6;
}

id sub_100064984()
{
  return sub_100064994(0.6);
}

id sub_100064994(double a1)
{
  uint64_t v2 = self;
  id v3 = [v2 labelColor];
  id v4 = [v3 colorWithAlphaComponent:a1];

  sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
  LOBYTE(v3) = static NSObject.== infix(_:_:)();

  if (v3) {
    goto LABEL_7;
  }
  id v5 = [v2 cl_carSystemTertiaryColor];
  id v6 = [v5 colorWithAlphaComponent:0.1];

  LOBYTE(v5) = static NSObject.== infix(_:_:)();
  if (v5) {
    goto LABEL_7;
  }
  id v7 = [v2 clearColor];
  char v8 = static NSObject.== infix(_:_:)();

  if (v8) {
    goto LABEL_7;
  }
  if (qword_1000E4678 != -1) {
    swift_once();
  }
  id v9 = (id)qword_1000EA6F0;
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
LABEL_7:
    return v15;
  }
  else
  {
    id v12 = [v2 cl_carSystemTertiaryColor];
    char v13 = static NSObject.== infix(_:_:)();

    if (v13) {
      id v14 = [v15 colorWithAlphaComponent:0.1];
    }
    else {
      id v14 = [v15 colorWithAlphaComponent:a1];
    }
    return v14;
  }
}

void sub_100064BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v2, v3);
  }
}

unint64_t sub_100064C7C()
{
  unint64_t result = qword_1000E6A60;
  if (!qword_1000E6A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6A60);
  }
  return result;
}

unint64_t sub_100064CD0(uint64_t a1)
{
  unint64_t result = sub_100064C7C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064CF8(void *a1, void *a2)
{
  _StringGuts.grow(_:)(59);
  v4._object = (void *)0x80000001000B7AB0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v4);
  id v5 = a1;
  id v6 = [v5 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x6F726765726F6620;
  v11._object = (void *)0xEC0000003D646E75;
  String.append(_:)(v11);
  id v12 = a2;
  id v13 = [v12 description];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v16 = v15;

  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);

  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x3D73657461747320;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  sub_100064EB4();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t sub_100064EA8()
{
  return sub_100064CF8(*v0, v0[1]);
}

unint64_t sub_100064EB4()
{
  unint64_t result = qword_1000E6A90;
  if (!qword_1000E6A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6A90);
  }
  return result;
}

id sub_100064F08(uint64_t a1)
{
  return sub_100064FD0(a1, (SEL *)&selRef_systemWhiteColor, &qword_1000EA728, &qword_1000EA730, &qword_1000EA738);
}

id sub_100064F24()
{
  uint64_t v0 = self;
  id v1 = [v0 labelColor];
  id result = [v0 systemBlackColor];
  qword_1000EA740 = (uint64_t)v1;
  *(void *)algn_1000EA748 = result;
  qword_1000EA750 = (uint64_t)&_swiftEmptyDictionarySingleton;
  return result;
}

id sub_100064F98(uint64_t a1)
{
  return sub_100064FD0(a1, (SEL *)&selRef_cl_carSystemTertiaryColor, &qword_1000EA758, &qword_1000EA760, &qword_1000EA768);
}

id sub_100064FB4(uint64_t a1)
{
  return sub_100064FD0(a1, (SEL *)&selRef_labelColor, &qword_1000EA770, algn_1000EA778, &qword_1000EA780);
}

id sub_100064FD0(uint64_t a1, SEL *a2, void *a3, void *a4, void *a5)
{
  id v9 = self;
  id v10 = [v9 clearColor];
  id result = [v9 *a2];
  *a3 = v10;
  *a4 = result;
  *a5 = &_swiftEmptyDictionarySingleton;
  return result;
}

id sub_10006505C(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  if (a1 & 0x10) != 0 && (unint64_t v4 = sub_10007C484(0x10uLL), (v5) {
    || (a1 & 8) != 0 && *(void *)(a2 + 16) && (unint64_t v4 = sub_10007C484(8uLL), (v6 & 1) != 0))
  }
  {
    uint64_t v7 = *(void *)(a2 + 56) + 24 * v4;
    id v8 = *(id *)v7;
    id v9 = *(void **)(v7 + 8);
    id v10 = *(id *)v7;
    id v11 = v9;
    swift_bridgeObjectRetain();
    return v8;
  }
  if ((a1 & 4) == 0) {
    return 0;
  }
  id v12 = sub_10006490C(4uLL, a2);
  if (v12) {
    return v12;
  }
  else {
    return 0;
  }
}

id sub_10006511C(char a1, void *a2, uint64_t a3)
{
  id v4 = sub_10006505C(a1, a3);
  if (v4)
  {
    id v6 = v4;

    swift_bridgeObjectRelease();
    return v6;
  }
  if ((a1 & 0x10) != 0) {
    return sub_100064994(0.3);
  }

  return a2;
}

id sub_1000651BC(char a1, void *a2, uint64_t a3)
{
  id v4 = sub_10006505C(a1, a3);
  if (v4)
  {
    id v6 = v5;

    swift_bridgeObjectRelease();
    return v6;
  }
  if ((a1 & 0x10) != 0)
  {
    if ((a1 & 8) != 0)
    {
      id v8 = [self standardUserDefaults];
      NSString v9 = String._bridgeToObjectiveC()();
      unsigned int v10 = [v8 BOOLForKey:v9];

      if (v10) {
        id v11 = [self systemYellowColor];
      }
      else {
        id v11 = sub_100064994(0.3);
      }
      Swift::String v17 = v11;
      id v6 = sub_100064994(0.3);

      return v6;
    }
    goto LABEL_16;
  }
  if ((a1 & 8) == 0)
  {
    if ((a1 & 4) == 0)
    {
      return a2;
    }
    double v16 = 0.6;
    return sub_100064994(v16);
  }
  id v12 = [self standardUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v12 BOOLForKey:v13];

  if (!v14)
  {
LABEL_16:
    double v16 = 0.3;
    return sub_100064994(v16);
  }
  id v15 = [self systemYellowColor];

  return v15;
}

uint64_t sub_1000653DC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_10000A404(a1, &qword_1000E6AD8);
    sub_10003A4D4(a2, (uint64_t)v9);
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
    return sub_10000A404((uint64_t)v9, &qword_1000E6AD8);
  }
  else
  {
    sub_1000437B4(a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_10003F320((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
  }
}

uint64_t sub_1000654FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ClimateZone();
  __n128 v10 = __chkstk_darwin(v9);
  id v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, __n128))(v13 + 48))(a1, 1, v10) == 1)
  {
    sub_10000A404(a1, (uint64_t *)&unk_1000E5530);
    sub_10003A7B0(a2, (uint64_t)v8);
    uint64_t v14 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
    return sub_10000A404((uint64_t)v8, (uint64_t *)&unk_1000E5530);
  }
  else
  {
    sub_10000D1A0(a1, (uint64_t)v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10003FBD0((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for CAUVehicleLayoutKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_100065708(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006730(&qword_1000E5040);
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    sub_10000A404(a1, (uint64_t *)&unk_1000E4D00);
    sub_10003A9AC(a2, (uint64_t)v8);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
    return sub_10000A404((uint64_t)v8, (uint64_t *)&unk_1000E4D00);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10003FE18((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  }
}

id sub_1000659A4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateTargetTemperatureTracker();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateTargetTemperatureTracker()
{
  return self;
}

uint64_t sub_100065A0C(void *a1)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v3 - 8);
  id v34 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v33 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = sub_100006730(&qword_1000E5040);
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)&double v16 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v32 = a1;
  id v19 = [a1 uniqueIdentifier:v16];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v20 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate31ClimateTargetTemperatureTracker_targetTemperatures);
  swift_beginAccess();
  uint64_t v21 = *v20;
  if (*(void *)(*v20 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v22 = sub_10007C4F0((uint64_t)v13);
    if (v23)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v7, *(void *)(v21 + 56) + *(void *)(v15 + 72) * v22, v14);
      id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v24(v7, 0, 1, v14);
    }
    else
    {
      id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v24(v7, 1, 1, v14);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v24(v7, 1, 1, v14);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1) {
    return sub_10000A404((uint64_t)v7, (uint64_t *)&unk_1000E4D00);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v7, v14);
  uint64_t v26 = v32;
  CAFTemperature.adjustTargetTemperatureIfNeeded(visibleTemperature:)((uint64_t)v18);
  id v27 = [v26 uniqueIdentifier];
  uint64_t v28 = (uint64_t)v33;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v29 = [v26 targetTemperature];
  sub_100066048();
  uint64_t v30 = (uint64_t)v34;
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

  v24((char *)v30, 0, 1, v14);
  swift_beginAccess();
  sub_100065708(v30, v28);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

unint64_t sub_100066048()
{
  unint64_t result = qword_1000E4D10;
  if (!qword_1000E4D10)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E4D10);
  }
  return result;
}

id sub_1000660F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimatePassthroughButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimatePassthroughButton()
{
  return self;
}

uint64_t sub_100066148(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x65646F4D6F747561;
    }
    else {
      uint64_t v2 = 0x64656C6261736964;
    }
    unint64_t v3 = 0xE800000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x65646F4D6F747561;
      }
      else {
        uint64_t v5 = 0x64656C6261736964;
      }
      unint64_t v6 = 0xE800000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v2 = 6710895;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE300000000000000;
  if (v2 != 6710895)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100066254(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB00000000657275;
  uint64_t v3 = 0x74617265706D6574;
  uint64_t v4 = a1;
  uint64_t v5 = 0x74617265706D6574;
  unint64_t v6 = 0xEB00000000657275;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v5 = 7233894;
      break;
    case 2:
      uint64_t v5 = 0x73736572706D6F63;
      unint64_t v6 = 0xEA0000000000726FLL;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1668184435;
      break;
    case 4:
      uint64_t v5 = 0x6C75637269636572;
      unint64_t v6 = 0xED00006E6F697461;
      break;
    case 5:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x65736F6C63;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      if (v5 == 7233894) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0xEA0000000000726FLL;
      if (v5 != 0x73736572706D6F63) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      if (v5 != 1668184435) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v3 = 0x6C75637269636572;
      unint64_t v2 = 0xED00006E6F697461;
      goto LABEL_15;
    case 5:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x65736F6C63) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v3) {
        goto LABEL_19;
      }
LABEL_16:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100066468(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x656C676E69536E6FLL;
    }
    else {
      uint64_t v3 = 2037277037;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x656C676E69536E6FLL;
      }
      else {
        uint64_t v6 = 2037277037;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x796E614D6E6FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x796E614D6E6FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10006656C()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState)) {
    return 16;
  }
  int v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent);
  if (![v2 hasOn])
  {
    unsigned int v6 = [v2 autoMode];
    unsigned __int8 v7 = [v2 currentIndexRestricted];
    unsigned int v8 = [v2 currentIndexInvalid];
    unsigned int v9 = [v2 currentIndexDisabled];
    if (v6)
    {
      if (v7)
      {
        uint64_t v1 = 7;
        uint64_t v10 = 15;
        goto LABEL_14;
      }
      uint64_t v1 = 3;
      if (v8) {
        uint64_t v1 = 11;
      }
      if (!v9) {
        return v1;
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v1 = 5;
        uint64_t v10 = 13;
LABEL_14:
        if (v8) {
          uint64_t v1 = v10;
        }
        if ((v9 & 1) == 0) {
          return v1;
        }
        return v1 | 0x10;
      }
      uint64_t v1 = 9;
      if (!v8) {
        uint64_t v1 = 1;
      }
      if ((v9 & 1) == 0) {
        return v1;
      }
    }
    return v1 | 0x10;
  }
  char v3 = [v2 on];
  char v4 = [v2 autoMode];
  if ([v2 onRestricted]) {
    char v5 = 1;
  }
  else {
    char v5 = [v2 currentIndexRestricted];
  }
  if ([v2 onInvalid]) {
    char v11 = 1;
  }
  else {
    char v11 = [v2 currentIndexInvalid];
  }
  if ([v2 onDisabled]) {
    char v13 = 1;
  }
  else {
    char v13 = [v2 currentIndexDisabled];
  }

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v3, v4, v5, v11, v13);
}

char *sub_100066760(void *a1, char a2)
{
  v2[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_lockButtonToDisabledState] = 0;
  *(_DWORD *)&v2[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_currentValue] = 0;
  char v5 = &v2[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_defaultSymbolName];
  *char v5 = 0xD000000000000012;
  v5[1] = 0x80000001000B7C20;
  *(void *)&v2[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent] = a1;
  unsigned int v6 = v2;
  id v7 = a1;
  if ([v7 hasOn])
  {
    id v8 = [v7 combinations];
    sub_100007310(0, (unint64_t *)&unk_1000E6BC0);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    char v11 = v10 < 2;
  }
  else
  {
    char v11 = 2;
  }
  v6[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_ventConfiguration] = v11;
  v6[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_style] = a2;
  sub_100006730(&qword_1000E6BB8);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1000B2000;
  _StringGuts.grow(_:)(81);
  v13._uint64_t countAndFlagsBits = 0x207075746553;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  id v14 = [v7 name];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0xD000000000000019;
  v19._object = (void *)0x80000001000B7C40;
  String.append(_:)(v19);
  unsigned int v20 = [v7 hasOn];
  BOOL v21 = v20 == 0;
  if (v20) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (v21) {
    unint64_t v23 = 0xE500000000000000;
  }
  else {
    unint64_t v23 = 0xE400000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0xD000000000000016;
  v25._object = (void *)0x80000001000B7C60;
  String.append(_:)(v25);
  id v26 = [v7 combinations];
  sub_100007310(0, (unint64_t *)&unk_1000E6BC0);
  unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = v28;
  v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0xD000000000000014;
  v30._object = (void *)0x80000001000B7C80;
  String.append(_:)(v30);
  if (v6[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_ventConfiguration])
  {
    if (v6[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_ventConfiguration] == 1)
    {
      unint64_t v31 = 0xE800000000000000;
      uint64_t v32 = 0x656C676E69536E6FLL;
    }
    else
    {
      unint64_t v31 = 0xE400000000000000;
      uint64_t v32 = 2037277037;
    }
  }
  else
  {
    unint64_t v31 = 0xE600000000000000;
    uint64_t v32 = 0x796E614D6E6FLL;
  }
  unint64_t v33 = v31;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();

  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  v50.receiver = v6;
  v50.super_class = (Class)type metadata accessor for ClimateVentServiceButton();
  id v34 = [super init];
  [v7 registerObserver:v34];
  sub_100066D70();
  uint64_t v35 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v35;
  *(void *)(v36 + 24) = v7;
  double v37 = (uint64_t *)&v34[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v38 = *v37;
  *double v37 = (uint64_t)sub_10006837C;
  v37[1] = v36;
  id v39 = v7;
  sub_100005690(v38);
  sub_100066D70();
  id v40 = [v34 imageView];
  if (v40)
  {
    double v41 = v40;
    uint64_t v42 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_1000B2670;
    id v44 = [v41 firstBaselineAnchor];
    id v45 = [v34 firstBaselineAnchor];
    id v46 = [v44 constraintEqualToAnchor:v45];

    *(void *)(v43 + 32) = v46;
    uint64_t v51 = v43;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v42 activateConstraints:isa];
  }
  unsigned int v48 = [v39 currentIndex:0, 0xE000000000000000];
  *(_DWORD *)&v34[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_currentValue] = v48;
  sub_100066D70();

  return v34;
}

id sub_100066D70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(__n128))((swift_isaMask & *v0) + 0x128))(v4) & 0x18) == 0) {
    goto LABEL_10;
  }
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v0
                                                             + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent), "combinations"));
  sub_100007310(0, (unint64_t *)&unk_1000E6BC0);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v9 >= 2)
  {
    uint64_t v11 = *(void *)((char *)v1 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_defaultSymbolName);
    uint64_t v10 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_defaultSymbolName + 8);
    uint64_t v12 = (void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    swift_beginAccess();
    uint64_t v14 = *v12;
    object = (void *)v12[1];
    *uint64_t v12 = v11;
    v12[1] = (uint64_t)v10;
    swift_bridgeObjectRetain();
    if (v10)
    {
      if (object)
      {
        if (v11 == v14 && object == v10) {
          goto LABEL_20;
        }
LABEL_16:
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
LABEL_10:
    sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
    CAFPositionedRequired.layoutKey.getter();
    sub_100023490();
    char v16 = v15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    Swift::String v17 = CAFVent.symbolName(useRightFacingSeat:)(v16 & 1);
    Swift::String v18 = (Swift::String *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    swift_beginAccess();
    uint64_t countAndFlagsBits = v18->_countAndFlagsBits;
    object = v18->_object;
    Swift::String *v18 = v17;
    if (v17._object)
    {
      if (object)
      {
        if (v17._countAndFlagsBits == countAndFlagsBits && object == v17._object) {
          goto LABEL_20;
        }
        goto LABEL_16;
      }
LABEL_19:
      ClimateButton.updateClimateConfiguration()();
LABEL_20:
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  if (object) {
    goto LABEL_19;
  }
LABEL_21:
  sub_10009F8A4();
  [v1 setEnabled:((*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x128))() & 0x18) == 0];
  sub_1000670B0();
  return sub_100088B54();
}

void sub_1000670B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10008896C();
  char v3 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x128))(v2);
  if ((v3 & 0x1A) != 2)
  {
    id v7 = [self _preferredFontForTextStyle:UIFontTextStyleBody weight:UIFontWeightSemibold];
    if (v7)
    {
      unint64_t v8 = v7;
      id v9 = [self configurationWithFont:v7 scale:3];

      id v10 = ClimateButton.imageSymbolConfiguration.getter();
      uint64_t v11 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
      *(void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration) = v9;
      id v27 = v9;

      id v12 = ClimateButton.imageSymbolConfiguration.getter();
      sub_100007310(0, (unint64_t *)&unk_1000E7700);
      LOBYTE(v11) = static NSObject.== infix(_:_:)();

      if ((v11 & 1) == 0) {
        ClimateButton.updateClimateConfiguration()();
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  char v4 = v3;
  id v5 = [self systemGreenColor];
  if ((v4 & 4) != 0)
  {
    id v13 = sub_100064984();

    id v14 = *(id *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
    id v6 = sub_100064984();

    id v5 = v13;
  }
  else
  {
    id v6 = *(id *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  }
  id v15 = [self _preferredFontForTextStyle:UIFontTextStyleBody weight:UIFontWeightSemibold];
  if (!v15) {
    goto LABEL_16;
  }
  char v16 = v15;
  Swift::String v17 = self;
  id v18 = [v17 configurationWithFont:v16 scale:3];

  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1000B1F40;
  *(void *)(v19 + 32) = v5;
  *(void *)(v19 + 40) = v6;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
  id v10 = v5;
  id v27 = v6;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = [v17 configurationWithPaletteColors:isa];

  id v22 = [v18 configurationByApplyingConfiguration:v21];
  id v23 = ClimateButton.imageSymbolConfiguration.getter();
  unint64_t v24 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration);
  *(void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration) = v22;
  id v25 = v22;

  id v26 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  LOBYTE(v24) = static NSObject.== infix(_:_:)();

  if ((v24 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

LABEL_12:
}

uint64_t sub_100067480()
{
  return CAFPositionedRequired.layoutKey.getter();
}

uint64_t sub_1000674CC@<X0>(uint64_t a1@<X8>)
{
  sub_100007310(0, (unint64_t *)&unk_1000E6BD0);
  CAFPositionedRequired.layoutKey.getter();
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  char v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

void sub_100067564()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_currentValue;
  unsigned int v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_currentValue);
  char v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_seatFan);
  id v5 = [v4 fanLevelRange];
  CAFRange.maximumValue<A>()();

  if (v3 >= v13)
  {
    id v10 = [v4 fanLevelRange];
    CAFRange.minimumValue<A>()();

    uint64_t v9 = v12;
    *(unsigned char *)(v1 + v2) = v12;
    unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView);
    goto LABEL_5;
  }
  id v6 = [v4 fanLevelRange];
  CAFRange.stepValue<A>()();

  unsigned int v7 = *(unsigned __int8 *)(v1 + v2) + v11;
  if (((v7 >> 8) & 1) == 0)
  {
    *(unsigned char *)(v1 + v2) = v7;
    unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateSeatFanServiceButton_progressView);
    uint64_t v9 = v7;
LABEL_5:
    (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0x88))(v9);
    return;
  }
  __break(1u);
}

id sub_1000676E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_currentValue;
  unsigned int v3 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_currentValue);
  char v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent);
  id v5 = [v4 currentIndexRange];
  CAFRange.maximumValue<A>()();

  if (v3 < v13)
  {
    id v6 = [v4 currentIndexRange];
    CAFRange.stepValue<A>()();

    int v7 = *(_DWORD *)(v1 + v2);
    int v8 = v7 + v11;
    if (!__CFADD__(v7, v11)) {
      goto LABEL_6;
    }
    __break(1u);
  }
  id v9 = [v4 currentIndexRange];
  CAFRange.minimumValue<A>()();

  int v8 = v12;
LABEL_6:
  *(_DWORD *)(v1 + v2) = v8;
  return sub_100066D70();
}

uint64_t sub_100067808(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100066468(*a1, *a2);
}

Swift::Int sub_100067814()
{
  return Hasher._finalize()();
}

uint64_t sub_1000678AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100067930()
{
  return Hasher._finalize()();
}

unint64_t sub_1000679C4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000682B8(*a1);
  *a2 = result;
  return result;
}

void sub_1000679F4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x656C676E69536E6FLL;
  if (v2 != 1)
  {
    uint64_t v5 = 2037277037;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x796E614D6E6FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100067A48(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v5 = (char *)Strong;
  if (*(unsigned char *)(Strong + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_ventConfiguration))
  {
    if (*(unsigned char *)(Strong + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_ventConfiguration) == 1) {
      [*(id *)(Strong + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent) setOn:[*(id *)(Strong + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent) on] ^ 1];
    }
    else {
      sub_1000676E8();
    }
    goto LABEL_9;
  }
  BOOL v6 = *(void **)(Strong + OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_vent);
  if (![v6 on])
  {
    [v6 setOn:1];
LABEL_9:
    sub_100066D70();
    goto LABEL_10;
  }
  sub_1000676E8();
LABEL_10:
  unsigned int v7 = [a3 currentIndex];
  if (v7 != *(_DWORD *)&v5[OBJC_IVAR____TtC7Climate24ClimateVentServiceButton_currentValue]) {
    [a3 setCurrentIndex:];
  }
}

uint64_t sub_100067C0C()
{
  return swift_bridgeObjectRelease();
}

id sub_100067C50()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateVentServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateVentServiceButton()
{
  return self;
}

id sub_100067E04(void *a1)
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  objc_super v2 = qword_1000EA798;
  id v3 = a1;
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    int v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543618;
    id v6 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v8 = v3;

    *(_WORD *)(v5 + 12) = 1026;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v4, "Vent: %{public}@ ON state updated to: %{BOOL,public}d", (uint8_t *)v5, 0x12u);
    sub_100006730(&qword_1000E4F30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return sub_100066D70();
}

unsigned char *storeEnumTagSinglePayload for ClimateVentServiceButton.Configuration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100068154);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateVentServiceButton.Configuration()
{
  return &type metadata for ClimateVentServiceButton.Configuration;
}

unint64_t sub_100068190()
{
  unint64_t result = qword_1000E6B68;
  if (!qword_1000E6B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6B68);
  }
  return result;
}

unint64_t sub_1000681E8()
{
  unint64_t result = qword_1000E6B70;
  if (!qword_1000E6B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6B70);
  }
  return result;
}

unint64_t sub_10006823C(uint64_t a1)
{
  unint64_t result = sub_100068264();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100068264()
{
  unint64_t result = qword_1000E6BB0;
  if (!qword_1000E6BB0)
  {
    type metadata accessor for ClimateVentServiceButton();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6BB0);
  }
  return result;
}

unint64_t sub_1000682B8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000CA370, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100068304()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006833C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10006837C(uint64_t a1)
{
  sub_100067A48(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100068384(uint64_t a1)
{
  uint64_t v46 = sub_100006730(&qword_1000E6D50);
  __chkstk_darwin(v46);
  id v45 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v44 = (char *)&v40 - v4;
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v40 - v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v47 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  unsigned int v13 = (char *)_swiftEmptyArrayStorage;
  uint64_t v14 = (uint64_t)v44;
  objc_super v50 = (char *)_swiftEmptyArrayStorage;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v48 = (v10 - 1) & v10;
  int64_t v49 = v12;
  for (unint64_t i = __clz(__rbit64(v10)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    uint64_t v20 = v47;
    uint64_t v21 = *(void *)(v47 + 48);
    uint64_t v22 = type metadata accessor for CAUVehicleLayoutKey();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = v23;
    id v25 = *(void (**)(char *, unint64_t, uint64_t))(v23 + 16);
    uint64_t v26 = (uint64_t)v43;
    v25(v43, v21 + *(void *)(v23 + 72) * i, v22);
    uint64_t v27 = *(void *)(v20 + 56);
    uint64_t v28 = v27 + *(void *)(*(void *)(type metadata accessor for ClimateZone() - 8) + 72) * i;
    uint64_t v29 = v46;
    sub_100071EB8(v28, v26 + *(int *)(v46 + 48), (uint64_t (*)(void))type metadata accessor for ClimateZone);
    sub_100072538(v26, v14);
    uint64_t v30 = *(int *)(v29 + 48);
    unint64_t v31 = v45;
    uint64_t v32 = (uint64_t)&v45[v30];
    uint64_t v33 = v14 + v30;
    v25(v45, v14, v22);
    sub_100071EB8(v33, v32, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v34 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v31, v22);
    sub_100071F20(v32, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    sub_10000A404(v14, &qword_1000E6D50);
    unsigned int v13 = v50;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000A28D8(0, *((void *)v13 + 2) + 1, 1, v13);
      unsigned int v13 = (char *)result;
    }
    unint64_t v38 = *((void *)v13 + 2);
    unint64_t v37 = *((void *)v13 + 3);
    if (v38 >= v37 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000A28D8((char *)(v37 > 1), v38 + 1, 1, v13);
      unsigned int v13 = (char *)result;
    }
    *((void *)v13 + 2) = v38 + 1;
    id v39 = &v13[16 * v38];
    *((void *)v39 + 4) = v34;
    *((void *)v39 + 5) = v36;
    unint64_t v10 = v48;
    int64_t v12 = v49;
    objc_super v50 = v13;
    if (v48) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v16 >= v42) {
      goto LABEL_27;
    }
    unint64_t v17 = *(void *)(v41 + 8 * v16);
    int64_t v18 = v12 + 1;
    if (!v17)
    {
      int64_t v18 = v12 + 2;
      if (v12 + 2 >= v42) {
        goto LABEL_27;
      }
      unint64_t v17 = *(void *)(v41 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v12 + 3;
        if (v12 + 3 >= v42) {
          goto LABEL_27;
        }
        unint64_t v17 = *(void *)(v41 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v12 + 4;
          if (v12 + 4 >= v42) {
            goto LABEL_27;
          }
          unint64_t v17 = *(void *)(v41 + 8 * v18);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v48 = (v17 - 1) & v17;
    int64_t v49 = v18;
  }
  uint64_t v19 = v12 + 5;
  if (v12 + 5 >= v42)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v13;
  }
  unint64_t v17 = *(void *)(v41 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v12 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v42) {
      goto LABEL_27;
    }
    unint64_t v17 = *(void *)(v41 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1000687BC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (!v10)
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView);
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive) == 1)
    {
      [v1 setHidden:1];
      [*(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton) setHidden:1];
      id v2 = sub_1000689D0();
      [v2 setHidden:0];
    }
    else
    {
      [v1 setHidden:0];
      id v3 = sub_1000689D0();
      [v3 setHidden:1];

      id v2 = *(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton);
      uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache);
      if (v4)
      {
        id v5 = v2;
        sub_100071CE4(v4);
        unint64_t v6 = CAFUISettingsCache.rootSettings(in:visibleOnly:)();
        sub_100015120(v4);
        if (v6 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        BOOL v8 = v7 == 0;
      }
      else
      {
        id v9 = v2;
        BOOL v8 = 1;
      }
      [v2 setHidden:v8];
    }
  }
}

id sub_1000689D0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard);
  }
  else
  {
    uint64_t v4 = (void *)sub_100068A34(v0);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_100068A34(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ClimateZone();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int v11 = (char *)&v25[-1] - v10;
  int64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E5530);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_100072050((uint64_t)v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    sub_100071EB8((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    unsigned int v13 = (void *)swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v26 = type metadata accessor for ClimateCoordinator();
    uint64_t v27 = &off_1000CB510;
    v25[0] = v12;
    id v14 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneCard());
    uint64_t v15 = sub_100071FA4((uint64_t)v25, v26);
    __n128 v16 = __chkstk_darwin(v15);
    int64_t v18 = (void *)((char *)&v25[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v19 + 16))(v18, v16);
    uint64_t v20 = *v18;
    id v21 = v12;
    swift_retain();
    uint64_t v22 = sub_10006FB2C((uint64_t)v8, v20, (uint64_t)sub_100071F88, v13, v14);
    swift_release();
    sub_10000AC28((uint64_t)v25);

    sub_100071F20((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    swift_release();
    return (uint64_t)v22;
  }
  return result;
}

id sub_100068DE0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___systemControls;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___systemControls);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___systemControls);
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_climateSystem + 8);
    uint64_t v5 = (objc_class *)type metadata accessor for ClimateSystemControls();
    uint64_t v6 = objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC7Climate21ClimateSystemControls____lazy_storage___controls] = 0;
    v6[OBJC_IVAR____TtC7Climate21ClimateSystemControls_areButtonsAlreadyVisible] = 0;
    *(void *)&v6[OBJC_IVAR____TtC7Climate21ClimateSystemControls_climate] = v4;
    v12.receiver = v6;
    v12.super_class = v5;
    id v7 = v4;
    id v8 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
    [v8 setTranslatesAutoresizingMaskIntoConstraints:0];

    uint64_t v9 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

id sub_100068EDC()
{
  id result = [*(id *)(*(void *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator)+ OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus) currentSession];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result limitUserInterfaces];
    if (v3 && (v4 = v3, unsigned __int8 v5 = [v3 BOOLValue], v4, (v5 & 1) != 0))
    {
      id v6 = [v2 configuration];
      unint64_t v7 = (unint64_t)[v6 limitableUserInterfaces];

      return (id)((v7 >> 5) & 1);
    }
    else
    {

      return 0;
    }
  }
  return result;
}

id sub_100068FB0()
{
  return sub_100068FE8((SEL *)&selRef_leftAnchor, (SEL *)&selRef_rightAnchor, 20.0, -20.0);
}

id sub_100068FCC()
{
  return sub_100068FE8((SEL *)&selRef_rightAnchor, (SEL *)&selRef_leftAnchor, -20.0, 20.0);
}

id sub_100068FE8(SEL *a1, SEL *a2, double a3, double a4)
{
  id v8 = v4;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  unint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000B3E10;
  id v10 = sub_100068DE0();
  id v11 = [v10 topAnchor];

  id result = [v8 view];
  if (!result) {
    goto LABEL_30;
  }
  unsigned int v13 = result;
  id v14 = [result safeAreaLayoutGuide];

  id v15 = [v14 topAnchor];
  id v16 = [v11 constraintEqualToAnchor:v15];

  *(void *)(v9 + 32) = v16;
  id v17 = sub_100068DE0();
  id v18 = [v17 bottomAnchor];

  id result = [v8 view];
  if (!result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v19 = result;
  id v20 = [result safeAreaLayoutGuide];

  id v21 = [v20 bottomAnchor];
  id v22 = [v18 constraintEqualToAnchor:v21];

  *(void *)(v9 + 40) = v22;
  id v23 = sub_100068DE0();
  id v24 = [v23 *a1];

  id result = [v8 view];
  if (!result)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  id v25 = result;
  id v26 = [result safeAreaLayoutGuide];

  id v27 = [v26 *a1];
  id v28 = [v24 constraintEqualToAnchor:v27];

  *(void *)(v9 + 48) = v28;
  id v29 = sub_100068DE0();
  id v30 = [v29 widthAnchor];

  id v31 = [v30 constraintEqualToConstant:60.0];
  *(void *)(v9 + 56) = v31;
  id v32 = sub_1000689D0();
  id v33 = [v32 topAnchor];

  id result = [v8 view];
  if (!result)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v34 = result;
  id v35 = [result safeAreaLayoutGuide];

  id v36 = [v35 topAnchor];
  id v37 = [v33 constraintEqualToAnchor:v36 constant:4.0];

  *(void *)(v9 + 64) = v37;
  id v38 = sub_1000689D0();
  id v39 = [v38 bottomAnchor];

  id result = [v8 view];
  if (!result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v40 = result;
  id v41 = [result safeAreaLayoutGuide];

  id v42 = [v41 bottomAnchor];
  id v43 = [v39 constraintEqualToAnchor:v42];

  *(void *)(v9 + 72) = v43;
  id v44 = sub_1000689D0();
  uint64_t v89 = a1;
  id v45 = [v44 *a1];

  id v46 = sub_100068DE0();
  id v47 = [v46 *a2];

  id v48 = [v45 constraintEqualToAnchor:v47];
  *(void *)(v9 + 80) = v48;
  uint64_t v49 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView;
  id v50 = [*(id *)&v8[OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView] topAnchor];
  id result = [v8 view];
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v51 = result;
  id v52 = [result safeAreaLayoutGuide];

  id v53 = [v52 topAnchor];
  id v54 = [v50 constraintEqualToAnchor:v53];

  *(void *)(v9 + 88) = v54;
  id v55 = [*(id *)&v8[v49] bottomAnchor];
  id result = [v8 view];
  if (!result)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  CGRect v56 = result;
  id v57 = [result safeAreaLayoutGuide];

  id v58 = [v57 bottomAnchor];
  id v59 = [v55 constraintEqualToAnchor:v58];

  *(void *)(v9 + 96) = v59;
  id v60 = [*(id *)&v8[v49] *a2];
  id result = [v8 view];
  if (!result)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v61 = result;
  id v62 = [result safeAreaLayoutGuide];

  id v63 = [v62 *a2];
  id v64 = [v60 constraintEqualToAnchor:v63];

  *(void *)(v9 + 104) = v64;
  specialized Array._endMutation()();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (!v91)
  {
    id v76 = [*(id *)&v8[v49] *v89];
    id v77 = sub_100068DE0();
    id v78 = [v77 *a2];

    id v69 = [v76 constraintEqualToAnchor:v78 constant:a3];
    id v79 = sub_1000689D0();
    id v80 = [v79 *a2];

    id result = [v8 view];
    if (!result)
    {
LABEL_38:
      __break(1u);
      return result;
    }
    uint64_t v81 = result;
    id v82 = [result safeAreaLayoutGuide];

    id v83 = [v82 *a2];
    id v72 = [v80 constraintEqualToAnchor:v83 constant:a4];

    if (!(v9 >> 62))
    {
      uint64_t v84 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)(v84 + 2);
      if (!__OFADD__(v84, 2))
      {
LABEL_18:
        sub_10009CCD4((uint64_t)result);
        specialized Array._endMutation()();
        id v75 = v69;
        goto LABEL_19;
      }
      goto LABEL_29;
    }
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id result = (id)(v88 + 2);
    if (!__OFADD__(v88, 2)) {
      goto LABEL_18;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  id v65 = sub_1000689D0();
  id v66 = [v65 widthAnchor];

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double v67 = 300.0;
  if (v91 == 1) {
    double v67 = 208.0;
  }
  id v68 = [v66 constraintEqualToConstant:v67];

  id v69 = [*(id *)&v8[v49] *v89];
  id v70 = sub_1000689D0();
  id v71 = [v70 *a2];

  id v72 = [v69 constraintEqualToAnchor:v71];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v74 = v87 + 2;
    if (!__OFADD__(v87, 2)) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
  uint64_t v73 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v74 = v73 + 2;
  if (__OFADD__(v73, 2))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_14:
  sub_10009CCD4(v74);
  specialized Array._endMutation()();
  id v75 = v68;
LABEL_19:
  unint64_t v85 = v75;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v86 = v72;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return (id)v9;
}

uint64_t sub_100069A78()
{
  uint64_t v1 = sub_100006730(&qword_1000E6D20);
  __chkstk_darwin(v1 - 8);
  id v3 = (uint64_t *)((char *)&v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v117 = type metadata accessor for ClimateAssets();
  uint64_t v4 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v116 = (uint64_t)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v8 = (char *)&v107 - v7;
  uint64_t v9 = sub_100006730(&qword_1000E5AC0);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ClimateSystemManager();
  uint64_t v118 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v118 + 64);
  __chkstk_darwin(v12);
  uint64_t v119 = (id *)((char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  uint64_t v120 = (void **)((char *)&v107 - v15);
  id v16 = self;
  id v17 = v0;
  id v18 = [v16 sharedApplication];
  id v19 = [v18 delegate];

  if (v19)
  {
    uint64_t v20 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator;
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v21 = sub_10008EAA4();
    swift_unknownObjectRelease();
    *(void *)&v17[v20] = v21;
    uint64_t v114 = v13;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      id v22 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
    }
    else {
      id v22 = &_swiftEmptySetSingleton;
    }
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_cancellables] = v22;
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_activeConstraints] = _swiftEmptyArrayStorage;
    v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive] = 0;
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard] = 0;
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_autoSettingsObserver] = 0;
    id v23 = &v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache];
    *(_OWORD *)id v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    *((_OWORD *)v23 + 2) = 0u;
    *((void *)v23 + 6) = 0;
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___systemControls] = 0;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v11, 1, v12) == 1) {
      goto LABEL_75;
    }
    uint64_t v24 = (uint64_t)v120;
    sub_100072050((uint64_t)v11, (uint64_t)v120, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    sub_100071EB8(v24, (uint64_t)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_climateSystem], (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton] = [objc_allocWithZone((Class)type metadata accessor for ClimateSettingsButton()) init];
    id v25 = *(void **)&v17[v20];
    id v26 = (void **)v24;
    uint64_t v27 = *(int *)(v12 + 36);
    id v28 = v25;
    swift_retain();
    uint64_t v29 = swift_bridgeObjectRetain();
    id v30 = sub_10006DF90(v29);
    swift_bridgeObjectRelease();
    sub_100007AA8((uint64_t)v30, v3);
    swift_release();
    int v31 = (*(uint64_t (**)(void *, uint64_t, void))(v4 + 48))(v3, 1, v117);
    uint64_t v115 = v27;
    if (v31 == 1)
    {
      sub_10000A404((uint64_t)v3, &qword_1000E6D20);
      id v32 = v119;
      sub_100071EB8(v24, (uint64_t)v119, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      id v33 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimateCarPlaceholderView());
      uint64_t v34 = sub_10006E758(v32, (uint64_t)v28, v33);
    }
    else
    {
      sub_100072050((uint64_t)v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
      uint64_t v35 = (uint64_t)v119;
      sub_100071EB8(v24, (uint64_t)v119, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
      uint64_t v36 = v116;
      sub_100071EB8((uint64_t)v8, v116, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
      id v37 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimateCarView());
      id v38 = v28;
      sub_100070D2C(v35, v38, v36, v37);
      uint64_t v34 = v39;

      sub_100071F20((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
    }

    swift_release();
    *(void *)&v17[OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView] = v34;

    uint64_t v40 = (objc_class *)type metadata accessor for ClimateAppViewController();
    v121.receiver = v17;
    v121.super_class = v40;
    id v41 = [super initWithNibName:0 bundle:0];
    id v42 = *v26;
    id v43 = (char *)v41;
    id v44 = [v42 automakerSettings];
    if (!v44)
    {
      if (qword_1000E46D8 == -1)
      {
LABEL_22:
        id v53 = qword_1000EA798;
        os_log_type_t v54 = static os_log_type_t.default.getter();
        id v55 = v43;
        if (!os_log_type_enabled(v53, v54))
        {
LABEL_64:

          sub_100071F20((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
          return (uint64_t)v43;
        }
        CGRect v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)CGRect v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Automaker Settings is not available.", v56, 2u);
        swift_slowDealloc();
LABEL_58:
        id v55 = v43;
        goto LABEL_64;
      }
LABEL_60:
      swift_once();
      goto LABEL_22;
    }
    uint64_t v45 = (uint64_t)v44;
    unint64_t v46 = CAFAutomakerSettings.allSettings.getter();
    unint64_t v47 = v46;
    *(void *)&long long v131 = _swiftEmptyArrayStorage;
    if (v46 >> 62)
    {
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      if (v48) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v48 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v48)
      {
LABEL_11:
        if (v48 >= 1)
        {
          uint64_t v49 = v43;
          for (uint64_t i = 0; i != v48; ++i)
          {
            if ((v47 & 0xC000000000000001) != 0) {
              id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v51 = *(id *)(v47 + 8 * i + 32);
            }
            id v52 = v51;
            if ([v51 category] == 2)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
            }
          }
          swift_bridgeObjectRelease();
          id v43 = v49;
          id v26 = v120;
LABEL_28:
          id v57 = [(id)v45 settingsSections];
          if (v57)
          {
            id v58 = v57;
            sub_100007310(0, &qword_1000E6D48);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();
          }
          CAFUISettingsCache.init(settings:sections:)();
          id v59 = v122;
          unint64_t v60 = v123;
          if (v123 >> 62)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v74)
            {
LABEL_32:
              if (!(*(void **)((char *)v26 + v115))[2])
              {
LABEL_37:
                swift_bridgeObjectRelease();
                uint64_t v116 = v126;
                uint64_t v115 = v60;
                long long v117 = v125;
                long long v113 = v124;
                while (1)
                {
                  id v112 = (id)v45;
                  id v69 = [objc_allocWithZone((Class)type metadata accessor for CAFUIAutomakerSettingObserver()) init];
                  id v70 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v69) + 0x60);
                  id v55 = v43;
                  v70(v43, &off_1000CC128);
                  id v26 = v59;
                  if (v60 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
                    if (!v45) {
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    uint64_t v45 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                    if (!v45) {
                      goto LABEL_62;
                    }
                  }
                  if (v45 >= 1) {
                    break;
                  }
                  __break(1u);
LABEL_68:
                  swift_bridgeObjectRetain();
                  uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v106) {
                    goto LABEL_69;
                  }
LABEL_42:
                  uint64_t v116 = v130;
                  long long v117 = v129;
                  long long v113 = v128;
                  id v59 = (void **)v127[0];
                  uint64_t v115 = v127[1];
                }
                for (uint64_t j = 0; j != v45; ++j)
                {
                  if ((v60 & 0xC000000000000001) != 0) {
                    id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v72 = *(id *)(v60 + 8 * j + 32);
                  }
                  uint64_t v73 = v72;
                  [v72 registerObserver:v69];
                }
LABEL_62:
                Swift::Int v108 = v43;
                swift_bridgeObjectRelease_n();
                *(void *)&long long v131 = v26;
                *((void *)&v131 + 1) = v115;
                long long v132 = v113;
                long long v133 = v117;
                long long v79 = v117;
                uint64_t v80 = v116;
                uint64_t v134 = v116;
                uint64_t v81 = *((void *)&v113 + 1);
                id v82 = &v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache];
                uint64_t v111 = *(void *)&v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache];
                uint64_t v110 = *(void *)&v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache + 8];
                uint64_t v109 = *(void *)&v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache + 32];
                int64x2_t v83 = vdupq_lane_s64(v113, 0);
                v83.i64[0] = v115;
                *(void *)id v82 = v26;
                *(int64x2_t *)(v82 + 8) = v83;
                *((void *)v82 + 3) = v81;
                *((_OWORD *)v82 + 2) = v79;
                *((void *)v82 + 6) = v80;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_100015120(v111);
                uint64_t v84 = *(void **)&v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_autoSettingsObserver];
                *(void *)&v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_autoSettingsObserver] = v69;
                unint64_t v85 = v69;

                uint64_t v86 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton;
                id v87 = *(id *)&v55[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton];
                sub_100068EDC();
                [v87 setEnabled:CAFUISettingsCache.hasEnabledRootSettings(in:limitUIEnabled:)() & 1];

                uint64_t v88 = *(void **)&v55[v86];
                uint64_t v89 = self;
                id v90 = v88;
                id v91 = [v89 grayColor];
                [v90 setTitleColor:v91 forState:2];

                uint64_t v92 = *(void *)&v55[v86];
                uint64_t v93 = swift_allocObject();
                swift_unknownObjectWeakInit();
                id v26 = v120;
                uint64_t v94 = (uint64_t)v119;
                sub_100071EB8((uint64_t)v120, (uint64_t)v119, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
                id v11 = (char *)((*(unsigned __int8 *)(v118 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
                unint64_t v95 = (unint64_t)&v11[v114 + 7] & 0xFFFFFFFFFFFFFFF8;
                uint64_t v96 = swift_allocObject();
                *(void *)(v96 + 16) = v93;
                sub_100072050(v94, (uint64_t)&v11[v96], (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
                unint64_t v97 = v96 + v95;
                long long v98 = v132;
                *(_OWORD *)unint64_t v97 = v131;
                *(_OWORD *)(v97 + 16) = v98;
                *(_OWORD *)(v97 + 32) = v133;
                *(void *)(v97 + 48) = v134;
                uint64_t v99 = (uint64_t *)(v92 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
                swift_beginAccess();
                uint64_t v100 = *v99;
                *uint64_t v99 = (uint64_t)sub_100072418;
                v99[1] = v96;
                sub_100005690(v100);
                id v101 = [self defaultCenter];
                [v101 addObserver:v55 selector:"updateSettingsButtonForLimitUIChanged" name:CARSessionLimitUserInterfacesChangedNotification object:0];

                id v102 = [v55 view];
                if (v102)
                {
                  uint64_t v103 = v102;
                  sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
                  uint64_t v104 = (void *)static UIColor.cafui_tableBackground.getter();
                  [v103 setBackgroundColor:v104];

                  id v43 = v108;
                  goto LABEL_64;
                }
                goto LABEL_74;
              }
              uint64_t v62 = swift_bridgeObjectRetain();
              sub_100068384(v62);
              swift_bridgeObjectRelease();
              unint64_t v63 = CAFUISettingsCache.settings(excludingLayoutKeys:)();
              swift_bridgeObjectRelease();
              if (v63 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!((unint64_t)v59 >> 62)) {
                  goto LABEL_35;
                }
              }
              else
              {
                uint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (!((unint64_t)v59 >> 62))
                {
LABEL_35:
                  uint64_t v65 = *(void *)(((unint64_t)v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_36:
                  swift_bridgeObjectRelease();
                  if (v64 == v65) {
                    goto LABEL_37;
                  }
                  swift_bridgeObjectRelease();
                  sub_1000720B8((uint64_t)&v122);
                  id v66 = [(id)v45 settingsSections];
                  if (v66)
                  {
                    double v67 = v66;
                    sub_100007310(0, &qword_1000E6D48);
                    static Array._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  CAFUISettingsCache.init(settings:sections:)();
                  unint64_t v68 = CAFUISettingsCache.rootSettings(in:visibleOnly:)();
                  unint64_t v60 = v68;
                  if (v68 >> 62) {
                    goto LABEL_68;
                  }
                  if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_42;
                  }
LABEL_69:
                  swift_bridgeObjectRelease();
                  sub_1000720B8((uint64_t)v127);
                  if (qword_1000E46D8 != -1) {
                    swift_once();
                  }
                  id v75 = qword_1000EA798;
                  os_log_type_t v76 = static os_log_type_t.default.getter();
                  if (!os_log_type_enabled(v75, v76)) {
                    goto LABEL_57;
                  }
                  id v77 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)id v77 = 0;
                  id v78 = "More Settings not availabe, only zone related settings.";
                  goto LABEL_56;
                }
              }
              swift_bridgeObjectRetain();
              uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v61 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v61) {
              goto LABEL_32;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000720B8((uint64_t)&v122);
          if (qword_1000E46D8 != -1) {
            swift_once();
          }
          id v75 = qword_1000EA798;
          os_log_type_t v76 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v75, v76)) {
            goto LABEL_57;
          }
          id v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v77 = 0;
          id v78 = "No automaker settings for climate category.";
LABEL_56:
          _os_log_impl((void *)&_mh_execute_header, v75, v76, v78, v77, 2u);
          swift_slowDealloc();
LABEL_57:

          goto LABEL_58;
        }
        __break(1u);
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  sub_10000A404((uint64_t)v11, &qword_1000E5AC0);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10006ABF0(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator);
    id v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v8
                                                               + OBJC_IVAR____TtC7Climate18ClimateCoordinator_sessionStatus), "currentSession"));
    if (!v9)
    {
      id v10 = v7;
      goto LABEL_15;
    }
    id v10 = v9;
    if (*(void *)(v8 + OBJC_IVAR____TtC7Climate18ClimateCoordinator_requestContentManager))
    {
      id v11 = *a3;
      swift_retain();
      id v12 = [v11 automakerSettings];

      if (v12)
      {
        id v10 = v10;
        CAFUISettingsCache.categorySettings(for:)();
        objc_allocWithZone((Class)type metadata accessor for CAFUITileViewController());
        swift_retain();
        swift_retain();
        sub_1000724B8(a4);
        id v13 = (id)CAFUITileViewController.init(carSession:prominentCategories:listItems:settingsSections:settingsCache:assetManager:requestContentManager:preventVolumeNotification:)();
        NSString v14 = String._bridgeToObjectiveC()();
        [v13 setTitle:v14];

        id v15 = [v7 navigationController];
        if (v15)
        {
          id v16 = v15;
          [v15 pushViewController:v13 animated:1];
        }
        id v17 = self;
        id v18 = [v17 sharedApplication];
        id v19 = [v18 delegate];

        if (v19)
        {
          type metadata accessor for ClimateAppDelegate();
          swift_dynamicCastClassUnconditional();
          id v20 = sub_10008EAA4();
          swift_unknownObjectRelease();
          swift_getKeyPath();
          swift_getKeyPath();
          static Published.subscript.getter();

          swift_release();
          swift_release();
          if (v24 != 1)
          {
LABEL_11:
            id v23 = [v7 navigationController];
            [v23 setNavigationBarHidden:0];

            swift_release();
LABEL_15:

            return;
          }
          id v21 = [v17 sharedApplication];
          id v22 = [v21 delegate];

          if (v22)
          {
            swift_dynamicCastClassUnconditional();
            sub_10008EAA4();
            swift_unknownObjectRelease();
            swift_getKeyPath();
            swift_getKeyPath();
            uint64_t v24 = 7;
            static Published.subscript.setter();
            goto LABEL_11;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        return;
      }
      swift_release();
    }

    goto LABEL_15;
  }
}

id sub_10006B030()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateAppViewController();
  return [super dealloc];
}

uint64_t sub_10006B158()
{
  return type metadata accessor for ClimateAppViewController();
}

uint64_t type metadata accessor for ClimateAppViewController()
{
  uint64_t result = qword_1000E6C70;
  if (!qword_1000E6C70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006B1AC()
{
  uint64_t result = type metadata accessor for ClimateSystemManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10006B284()
{
  uint64_t v1 = sub_100006730(&qword_1000E6C80);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v142 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E7CB0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100006730(&qword_1000E6C88);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  long long v129 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_100006730(&qword_1000E6C90);
  uint64_t v133 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v130 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_100006730(&qword_1000E6C98);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  long long v131 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100006730(&qword_1000E6CA0);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v138 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_100006730(&qword_1000E6CA8);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  unint64_t v123 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_100006730(&qword_1000E6CB0);
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v126 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006730((uint64_t *)&unk_1000E5450);
  __chkstk_darwin(v14 - 8);
  char v141 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006730(&qword_1000E6CB8);
  uint64_t v149 = *(void *)(v16 - 8);
  uint64_t v150 = v16;
  __chkstk_darwin(v16);
  uint64_t v147 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v145 = (void *)sub_100006730(&qword_1000E6CC0);
  uint64_t v119 = *(v145 - 1);
  __chkstk_darwin(v145);
  uint64_t v118 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_100006730(&qword_1000E6CC8);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v120 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = (objc_class *)type metadata accessor for ClimateAppViewController();
  v153.receiver = v0;
  v153.super_class = v20;
  [super viewDidLoad];
  uint64_t v151 = v0;
  id v21 = [v0 view];
  if (!v21)
  {
    __break(1u);
    goto LABEL_20;
  }
  id v22 = v21;
  id v23 = v151;
  id v24 = sub_100068DE0();
  [v22 addSubview:v24];

  id v25 = [v23 view];
  if (!v25)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v26 = v25;
  uint64_t v27 = v151;
  id v28 = sub_1000689D0();
  [v26 addSubview:v28];

  id v29 = [v27 view];
  if (!v29)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v30 = v29;
  uint64_t v113 = v2;
  uint64_t v114 = v1;
  uint64_t v115 = v7;
  uint64_t v116 = v5;
  uint64_t v117 = v4;
  int v31 = v151;
  [v29 addSubview:*(void *)&v151[OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView]];

  id v32 = &v31[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache];
  id v33 = *(void **)&v31[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache];
  if (!v33)
  {
LABEL_17:
    id v78 = v151;
    v151[OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive] = 0;
    sub_1000687BC();
    uint64_t v148 = *(void *)&v78[OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator];
    swift_beginAccess();
    sub_100006730((uint64_t *)&unk_1000E5E20);
    long long v79 = v147;
    Published.projectedValue.getter();
    swift_endAccess();
    uint64_t v146 = &protocol conformance descriptor for Published<A>.Publisher;
    sub_10000D02C(&qword_1000E6CD0, &qword_1000E6CB8);
    uint64_t v80 = v118;
    uint64_t v81 = v150;
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v149 + 8))(v79, v81);
    id v144 = self;
    id v152 = [v144 mainRunLoop];
    uint64_t v82 = type metadata accessor for NSRunLoop.SchedulerOptions();
    uint64_t v83 = *(void *)(v82 - 8);
    v143 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56);
    uint64_t v150 = v83 + 56;
    uint64_t v84 = (uint64_t)v141;
    uint64_t v111 = v82;
    v143(v141, 1, 1, v82);
    uint64_t v149 = sub_100007310(0, (unint64_t *)&unk_1000E5470);
    id v112 = &protocol conformance descriptor for Publishers.Drop<A>;
    sub_10000D02C(&qword_1000E6CD8, &qword_1000E6CC0);
    uint64_t v147 = (char *)sub_10000CF84();
    unint64_t v85 = v120;
    uint64_t v86 = v145;
    Publisher.receive<A>(on:options:)();
    sub_10000A404(v84, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, void *))(v119 + 8))(v80, v86);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    unsigned int v145 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
    sub_10000D02C(&qword_1000E6CE0, &qword_1000E6CC8);
    uint64_t v87 = v122;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v85, v87);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    sub_100006730(&qword_1000E5E18);
    uint64_t v88 = v123;
    Published.projectedValue.getter();
    swift_endAccess();
    id v89 = v144;
    id v152 = [v144 mainRunLoop];
    uint64_t v90 = v82;
    id v91 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v143;
    v143((char *)v84, 1, 1, v90);
    sub_10000D02C(&qword_1000E6CE8, &qword_1000E6CA8);
    uint64_t v92 = v126;
    uint64_t v93 = v125;
    Publisher.receive<A>(on:options:)();
    sub_10000A404(v84, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, uint64_t))(v124 + 8))(v88, v93);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C(&qword_1000E6CF0, &qword_1000E6CB0);
    uint64_t v94 = v128;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v92, v94);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    sub_100006730(&qword_1000E5E10);
    unint64_t v95 = v129;
    Published.projectedValue.getter();
    swift_endAccess();
    id v152 = [v89 mainRunLoop];
    uint64_t v96 = v111;
    v91(v84, 1, 1, v111);
    sub_10000D02C(&qword_1000E6CF8, &qword_1000E6C88);
    unint64_t v97 = v130;
    uint64_t v98 = v134;
    Publisher.receive<A>(on:options:)();
    sub_10000A404(v84, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, uint64_t))(v132 + 8))(v95, v98);
    sub_10000D02C(&qword_1000E6D00, &qword_1000E6C90);
    uint64_t v99 = v131;
    uint64_t v100 = v135;
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v97, v100);
    sub_10000D02C(&qword_1000E6D08, &qword_1000E6C98);
    sub_100071E40();
    id v101 = v138;
    uint64_t v102 = v137;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v136 + 8))(v99, v102);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C(&qword_1000E6D18, &qword_1000E6CA0);
    uint64_t v103 = v140;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v139 + 8))(v101, v103);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v104 = v148;
    swift_retain();
    uint64_t v105 = v142;
    dispatch thunk of CAUAssetLibraryManager.$assetLibrary.getter();
    swift_release();
    id v152 = [v144 mainRunLoop];
    v143((char *)v84, 1, 1, v96);
    sub_10000D02C((unint64_t *)&unk_1000E7CC0, &qword_1000E6C80);
    uint64_t v106 = v115;
    uint64_t v107 = v114;
    Publisher.receive<A>(on:options:)();
    sub_10000A404(v84, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v105, v107);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C((unint64_t *)&unk_1000E7CD0, (uint64_t *)&unk_1000E7CB0);
    uint64_t v108 = v117;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v106, v108);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v109 = *(unsigned char **)(v104 + OBJC_IVAR____TtC7Climate18ClimateCoordinator_signpostManager);
    v109[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_mainViewControllerDidLoad] = 1;
    uint64_t v110 = v109;
    sub_100094488();

    return;
  }
  uint64_t v35 = *((void *)v32 + 1);
  uint64_t v34 = *((void *)v32 + 2);
  uint64_t v36 = (void (*)(void, void, void, void))*((void *)v32 + 3);
  id v37 = (void *)*((void *)v32 + 4);
  id v38 = (void *)*((void *)v32 + 5);
  uint64_t v39 = *((void *)v32 + 6);
  unint64_t v154 = v33;
  uint64_t v155 = v35;
  uint64_t v156 = v34;
  objc_super v157 = v36;
  uint64_t v158 = v37;
  unint64_t v159 = v38;
  uint64_t v160 = v39;
  uint64_t v40 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton;
  id v41 = v151;
  id v42 = *(void **)&v151[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton];
  uint64_t v146 = v33;
  swift_bridgeObjectRetain();
  uint64_t v148 = v35;
  uint64_t v43 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v144 = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  [v42 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v44 = [v41 view];
  if (!v44) {
    goto LABEL_22;
  }
  uint64_t v45 = v44;
  id v112 = v37;
  v143 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v36;
  [v44 addSubview:*(void *)&v151[v40]];

  id v46 = [self sharedApplication];
  id v47 = [v46 delegate];

  if (!v47)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v48 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  id v49 = v152;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1000B1F40;
  id v51 = v151;
  id v52 = [*(id *)&v151[v40] firstBaselineAnchor];
  id v53 = [v51 view];
  os_log_type_t v54 = v53;
  uint64_t v111 = v43;
  if (v49 == (id)8)
  {
    if (v53)
    {
      id v55 = [v53 safeAreaLayoutGuide];

      id v56 = [v55 topAnchor];
      id v57 = [v52 constraintEqualToAnchor:v56 constant:28.0];

      *(void *)(v50 + 32) = v57;
      id v58 = v151;
      id v59 = [*(id *)&v151[v40] leftAnchor];
      id v60 = [v58 view];
      if (v60)
      {
        uint64_t v61 = v60;
        uint64_t v62 = self;
        id v63 = [v61 safeAreaLayoutGuide];

        id v64 = [v63 leftAnchor];
        id v65 = [v59 constraintEqualToAnchor:v64 constant:24.0];
LABEL_14:
        id v73 = v65;

        *(void *)(v50 + 40) = v73;
        id v152 = (id)v50;
        specialized Array._endMutation()();
        sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v62 activateConstraints:isa];

        id v75 = *(id *)&v151[v40];
        unint64_t v76 = CAFUISettingsCache.rootSettings(in:visibleOnly:)();
        sub_100015120((uint64_t)v146);
        if (v76 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v77 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        [v75 setHidden:v77 == 0];

        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!v53)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v66 = [v53 safeAreaLayoutGuide];

  id v67 = [v66 topAnchor];
  id v68 = [v52 constraintEqualToAnchor:v67 constant:28.0];

  *(void *)(v50 + 32) = v68;
  id v69 = v151;
  id v59 = [*(id *)&v151[v40] rightAnchor];
  id v70 = [v69 view];
  if (v70)
  {
    id v71 = v70;
    uint64_t v62 = self;
    id v72 = [v71 safeAreaLayoutGuide];

    id v64 = [v72 rightAnchor];
    id v65 = [v59 constraintEqualToAnchor:v64 constant:-24.0];
    goto LABEL_14;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10006C904(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for ClimateZone();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v11 = &v16[-v10];
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v13 = (void *)result;
    sub_10002FB7C(a1, (uint64_t)v4);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {

      return sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E5530);
    }
    else
    {
      sub_100072050((uint64_t)v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      id v14 = sub_1000689D0();
      sub_100071EB8((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      uint64_t v15 = (uint64_t)v14 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_zone;
      swift_beginAccess();
      sub_100023198((uint64_t)v8, v15);
      swift_endAccess();
      sub_10009DED0();
      sub_100071F20((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClimateZone);

      *((unsigned char *)v13 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive) = 1;
      sub_1000687BC();

      return sub_100071F20((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    }
  }
  return result;
}

void sub_10006CB6C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10006CBC8(v1);
  }
}

void sub_10006CBC8(uint64_t a1)
{
  if (a1 == 2) {
    id v2 = sub_100068FB0();
  }
  else {
    id v2 = sub_100068FCC();
  }
  id v3 = v2;
  uint64_t v4 = self;
  uint64_t v5 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_activeConstraints;
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 deactivateConstraints:isa];

  *(void *)(v1 + v5) = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:v7];
}

void sub_10006CCDC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10006CD30();
  }
}

void sub_10006CD30()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClimateSystemManager();
  __chkstk_darwin(v2);
  id v41 = (id *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_100006730(&qword_1000E6D20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for ClimateAssets();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v40 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v42 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView;
  [*(id *)&v0[OBJC_IVAR____TtC7Climate24ClimateAppViewController_carView] removeFromSuperview];
  uint64_t v14 = (uint64_t)&v0[OBJC_IVAR____TtC7Climate24ClimateAppViewController_climateSystem];
  uint64_t v15 = *(void **)&v0[OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator];
  swift_retain();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_10006DF90(v16);
  swift_bridgeObjectRelease();
  sub_100007AA8((uint64_t)v17, v6);
  swift_release();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000A404((uint64_t)v6, &qword_1000E6D20);
    uint64_t v18 = v41;
    sub_100071EB8(v14, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    uint64_t v19 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimateCarPlaceholderView());
    id v20 = sub_10006E758(v18, (uint64_t)v15, v19);
  }
  else
  {
    sub_100072050((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
    uint64_t v21 = (uint64_t)v41;
    sub_100071EB8(v14, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    uint64_t v22 = v40;
    sub_100071EB8((uint64_t)v13, v40, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
    id v23 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimateCarView());
    id v24 = v15;
    sub_100070D2C(v21, v24, v22, v23);
    id v20 = v25;

    sub_100071F20((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
  }
  swift_release();
  uint64_t v26 = v42;
  uint64_t v27 = *(void **)&v0[v42];
  *(void *)&v0[v42] = v20;

  id v28 = [v0 view];
  if (!v28)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v29 = v28;
  [v28 addSubview:*(void *)&v1[v26]];

  id v30 = [v1 view];
  if (!v30)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int v31 = v30;
  [v30 bringSubviewToFront:*(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton]];

  id v32 = sub_10006D58C();
  if (!v32)
  {
LABEL_9:
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10006CBC8(v43);
    return;
  }
  id v33 = v32;
  id v34 = sub_1000689D0();
  [v34 removeFromSuperview];

  uint64_t v35 = *(void **)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard];
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard] = v33;
  uint64_t v36 = v33;

  id v37 = [v1 view];
  if (v37)
  {
    id v38 = v37;
    id v39 = sub_1000689D0();
    [v38 addSubview:v39];

    v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive] = 1;
    sub_1000687BC();

    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

void sub_10006D334(char a1)
{
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for ClimateAppViewController();
  [super viewDidAppear:a1 & 1];
  id v3 = [v1 navigationController];
  if (v3)
  {
    uint64_t v4 = v3;
    [v3 setNavigationBarHidden:1];
  }
  uint64_t v5 = self;
  id v6 = [v5 sharedApplication];
  id v7 = [v6 delegate];

  if (!v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v8 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if (v11 != 1) {
    return;
  }
  id v9 = [v5 sharedApplication];
  id v10 = [v9 delegate];

  if (!v10)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_dynamicCastClassUnconditional();
  sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.setter();
}

char *sub_10006D58C()
{
  uint64_t v1 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v24[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ClimateZone();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v24[-1] - v9;
  char v11 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000A404((uint64_t)v3, (uint64_t *)&unk_1000E5530);
    *(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive) = 0;
    sub_1000687BC();
    return 0;
  }
  else
  {
    sub_100072050((uint64_t)v3, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    sub_100071EB8((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    uint64_t v13 = (void *)swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v25 = type metadata accessor for ClimateCoordinator();
    uint64_t v26 = &off_1000CB510;
    v24[0] = v11;
    id v14 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneCard());
    uint64_t v15 = sub_100071FA4((uint64_t)v24, v25);
    __n128 v16 = __chkstk_darwin(v15);
    uint64_t v18 = (void *)((char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v19 + 16))(v18, v16);
    uint64_t v20 = *v18;
    id v21 = v11;
    swift_retain();
    objc_super v12 = sub_10006FB2C((uint64_t)v7, v20, (uint64_t)sub_100071F88, v13, v14);
    swift_release();
    sub_10000AC28((uint64_t)v24);

    sub_100071F20((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
    swift_release();
  }
  return v12;
}

void sub_10006D8F8()
{
  uint64_t v0 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v7 = (char *)Strong;
    *(unsigned char *)(Strong + OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive) = 0;
    sub_1000687BC();
    uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator];
    uint64_t v9 = type metadata accessor for ClimateZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10002FB7C((uint64_t)v5, (uint64_t)v2);
    id v10 = v8;
    static Published.subscript.setter();
    sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E5530);
  }
}

uint64_t sub_10006DA74()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007310(0, (unint64_t *)&qword_1000E7C70);
  id v7 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_100071DA8;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005FC84;
  aBlock[3] = &unk_1000CC160;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100071DC8();
  sub_100006730((uint64_t *)&unk_1000E7C80);
  sub_10000D02C(&qword_1000E5DE0, (uint64_t *)&unk_1000E7C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v12);
}

void sub_10006DD28()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = *(void **)(Strong + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton);
    uint64_t v3 = *(void *)(Strong + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache);
    id v4 = v2;
    if (v3)
    {
      sub_100071CE4(v3);
      sub_100068EDC();
      char v5 = CAFUISettingsCache.hasEnabledRootSettings(in:limitUIEnabled:)();
      sub_100015120(v3);
    }
    else
    {
      char v5 = 0;
    }
    [v2 setEnabled:v5 & 1];
  }
}

uint64_t sub_10006DEA0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10006DF20(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

void *sub_10006DF90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100006730((uint64_t *)&unk_1000E59D0);
  uint64_t v3 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      uint64_t v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_10006E388(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_100072040();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10006E0E4(unint64_t a1)
{
  return sub_10006E0FC(a1, (void (*)(void *, uint64_t, unint64_t))sub_10009CAB4);
}

void *sub_10006E0FC(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      unint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100006730((uint64_t *)&unk_1000E4F10);
      unint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void *sub_10006E204(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for ClimateButton();
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10006E388(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = __chkstk_darwin(v11);
  id v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
LABEL_37:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  uint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  uint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    id v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v42, *(void *)(v43 + 48) + v29 * v24, v8, v12);
    id v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    v30(a2, v22, v8);
    if (v21 == v40) {
      goto LABEL_36;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_37;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_10006E6D0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

char *sub_10006E758(id *a1, uint64_t a2, char *a3)
{
  id v71 = (void *)a2;
  uint64_t v5 = type metadata accessor for ClimateSystemManager();
  __chkstk_darwin(v5 - 8);
  uint64_t v69 = (uint64_t)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC7Climate25ClimateCarPlaceholderView_carView;
  sub_100007310(0, &qword_1000E5680);
  unint64_t v8 = a3;
  *(void *)&a3[v7] = UIStackView.init(axis:spacing:arrangedSubviews:)();

  uint64_t v9 = (objc_class *)type metadata accessor for ClimateCarPlaceholderView();
  v77.receiver = v8;
  v77.super_class = v9;
  unint64_t v10 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v76 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = OBJC_IVAR____TtC7Climate25ClimateCarPlaceholderView_carView;
  __n128 v12 = *(void **)&v10[OBJC_IVAR____TtC7Climate25ClimateCarPlaceholderView_carView];
  [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v12 setDistribution:2];
  [v12 setAlignment:3];
  uint64_t v13 = qword_1000E4670;
  id v14 = v12;
  if (v13 != -1) {
    swift_once();
  }
  [v14 setLayoutMargins:*(double *)&qword_1000EA6D0, *(double *)algn_1000EA6D8, *(double *)&qword_1000EA6E0, unk_1000EA6E8];

  uint64_t v15 = *(void **)&v10[v11];
  [v15 setLayoutMarginsRelativeArrangement:1];
  uint64_t v16 = qword_1000E4668;
  id v17 = v15;
  if (v16 != -1) {
    swift_once();
  }
  [v17 setBackgroundColor:qword_1000EA6C8];

  id v18 = [*(id *)&v10[v11] layer];
  [v18 setCornerRadius:18.0];

  id v19 = [*(id *)&v10[v11] layer];
  [v19 setCornerCurve:kCACornerCurveContinuous];

  id v73 = a1;
  id v20 = [*a1 vehicleResources];
  if (v20)
  {
    uint64_t v21 = v20;
    id v22 = [v20 vehicleInformation];

    if (v22)
    {
      id v23 = [v22 vehicleUserVisibleLabel];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v24 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
      [v24 setTextAlignment:1];
      id v25 = [self _preferredFontForTextStyle:UIFontTextStyleCaption2 variant:1024];
      [v24 setFont:v25];

      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v24 setText:v26];

      [*(id *)&v10[v11] addArrangedSubview:v24];
    }
  }
  uint64_t v70 = v11;
  uint64_t v27 = sub_100006730((uint64_t *)&unk_1000E59D0);
  uint64_t v28 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void *)(v29 + 72);
  uint64_t v31 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v32 = (v31 + 32) & ~v31;
  v66[1] = v27;
  v66[2] = v31 | 7;
  uint64_t v33 = swift_allocObject();
  long long v74 = xmmword_1000B2BF0;
  uint64_t v68 = v33;
  *(_OWORD *)(v33 + 16) = xmmword_1000B2BF0;
  uint64_t v34 = v33 + v32;
  uint64_t v35 = *(void (**)(uint64_t, void, uint64_t))(v29 + 104);
  v35(v33 + v32, enum case for CAUVehicleLayoutKey.seat_front_left(_:), v28);
  v35(v34 + v30, enum case for CAUVehicleLayoutKey.seat_front_middle(_:), v28);
  id v72 = v10;
  v35(v34 + 2 * v30, enum case for CAUVehicleLayoutKey.seat_front_right(_:), v28);
  v35(v34 + 3 * v30, enum case for CAUVehicleLayoutKey.seat_front(_:), v28);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v74;
  uint64_t v67 = v36;
  uint64_t v37 = v36 + v32;
  v35(v36 + v32, enum case for CAUVehicleLayoutKey.seat_2ndRow_left(_:), v28);
  v35(v37 + v30, enum case for CAUVehicleLayoutKey.seat_2ndRow_middle(_:), v28);
  v35(v37 + 2 * v30, enum case for CAUVehicleLayoutKey.seat_2ndRow_right(_:), v28);
  v35(v37 + 3 * v30, enum case for CAUVehicleLayoutKey.seat_2ndRow(_:), v28);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v74;
  v35(v38 + v32, enum case for CAUVehicleLayoutKey.seat_3rdRow_left(_:), v28);
  v35(v38 + v32 + v30, enum case for CAUVehicleLayoutKey.seat_3rdRow_middle(_:), v28);
  uint64_t v39 = v72;
  v35(v38 + v32 + 2 * v30, enum case for CAUVehicleLayoutKey.seat_3rdRow_right(_:), v28);
  v35(v38 + v32 + 3 * v30, enum case for CAUVehicleLayoutKey.seat_3rdRow(_:), v28);
  uint64_t v40 = v69;
  sub_100071EB8((uint64_t)v73, v69, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  uint64_t v75 = v68;
  id v41 = v71;
  sub_10005A070(&v75, v40, (uint64_t)v71, (uint64_t)&off_1000CB540, (uint64_t)v39);
  swift_bridgeObjectRelease();
  uint64_t v75 = v67;
  sub_10005A070(&v75, v40, (uint64_t)v41, (uint64_t)&off_1000CB540, (uint64_t)v39);
  swift_bridgeObjectRelease();
  uint64_t v75 = v38;
  sub_10005A070(&v75, v40, (uint64_t)v41, (uint64_t)&off_1000CB540, (uint64_t)v39);
  swift_bridgeObjectRelease();
  sub_100071F20(v40, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  uint64_t v42 = v70;
  uint64_t v43 = *(void **)&v39[v70];
  [v39 addSubview:v43];
  id v44 = [v43 topAnchor];
  id v45 = [v39 topAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45 constant:35.0];

  id v47 = [*(id *)&v39[v42] leftAnchor];
  id v48 = [v39 leftAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48 constant:40.0];

  id v50 = [*(id *)&v39[v42] rightAnchor];
  id v51 = [v39 rightAnchor];
  id v52 = [v50 constraintEqualToAnchor:v51 constant:-40.0];

  id v53 = [*(id *)&v39[v42] bottomAnchor];
  id v54 = [v39 bottomAnchor];
  id v55 = [v53 constraintEqualToAnchor:v54 constant:-5.0];

  if (v76 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v57 = v65 + 4;
    if (!__OFADD__(v65, 4))
    {
LABEL_10:
      sub_10009CCD4(v57);
      specialized Array._endMutation()();
      id v46 = v46;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v56 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v57 = v56 + 4;
    if (!__OFADD__(v56, 4)) {
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_21:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_11:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v58 = v49;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v59 = v52;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v60 = v55;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v61 = self;
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v61 activateConstraints:isa];

  id v63 = v72;
  sub_100071F20((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  return v63;
}

uint64_t sub_10006F24C(uint64_t a1, void *a2, id a3, char *a4)
{
  uint64_t v7 = a1;
  *(void *)&a4[OBJC_IVAR____TtC7Climate20ClimatePositionViews_scale] = 0x3FF0000000000000;
  *(void *)&a4[OBJC_IVAR____TtC7Climate20ClimatePositionViews____lazy_storage___heightConstraint] = 0;
  *(void *)&a4[OBJC_IVAR____TtC7Climate20ClimatePositionViews____lazy_storage___widthConstraint] = 0;
  sub_100071EB8(a1, (uint64_t)&a4[OBJC_IVAR____TtC7Climate20ClimatePositionViews_climateSystem], (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  unint64_t v8 = &a4[OBJC_IVAR____TtC7Climate20ClimatePositionViews_activeZoneTracker];
  *(void *)unint64_t v8 = a2;
  *((void *)v8 + 1) = &off_1000CB540;
  sub_100071EB8((uint64_t)a3, (uint64_t)&a4[OBJC_IVAR____TtC7Climate20ClimatePositionViews_assets], (uint64_t (*)(void))type metadata accessor for ClimateAssets);
  id v40 = a3;
  id v41 = a2;
  uint64_t v42 = &off_1000CB540;
  type metadata accessor for ClimateSystemManager();
  uint64_t v9 = a4;
  id v10 = a2;
  uint64_t v11 = swift_bridgeObjectRetain();
  __n128 v12 = sub_10006F83C(v11, (void (*)(uint64_t *__return_ptr, uint64_t))sub_100071EAC, (uint64_t)v39);
  swift_bridgeObjectRelease();
  *(void *)&v9[OBJC_IVAR____TtC7Climate20ClimatePositionViews_positions] = v12;

  uint64_t v13 = (objc_class *)type metadata accessor for ClimatePositionViews();
  v44.receiver = v9;
  v44.super_class = v13;
  id v14 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v14 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1000B1F40;
  *(void *)(v15 + 32) = sub_10008B8AC();
  *(void *)(v15 + 40) = sub_10008B8D4();
  unint64_t v43 = v15;
  specialized Array._endMutation()();
  id v38 = v14;
  unint64_t v16 = *(void *)&v14[OBJC_IVAR____TtC7Climate20ClimatePositionViews_positions];
  if (v16 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease_n();
LABEL_32:
    uint64_t v30 = self;
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v30 activateConstraints:isa];

    sub_100071F20(v7, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    sub_100071F20((uint64_t)a3, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
    swift_bridgeObjectRelease();
    return (uint64_t)v38;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v17) {
    goto LABEL_31;
  }
LABEL_3:
  if (v17 >= 1)
  {
    id v32 = v10;
    uint64_t v33 = v7;
    id v34 = a3;
    uint64_t v35 = v17;
    uint64_t v19 = 0;
    unint64_t v36 = v16;
    unint64_t v37 = v16 & 0xC000000000000001;
    while (1)
    {
      if (v37) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v16 + 8 * v19 + 32);
      }
      uint64_t v21 = v20;
      [v38 addSubview:v20];
      id v22 = (void *)sub_100086A1C();
      id v23 = (void *)sub_100086A48();
      a3 = sub_100086BE4();
      id v24 = sub_100086C0C();
      unint64_t v25 = v43;
      id v10 = (id)(v43 >> 62);
      if (v43 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = v16 + 4;
        if (__OFADD__(v16, 4))
        {
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v16 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v7 = v16 + 4;
        if (__OFADD__(v16, 4)) {
          goto LABEL_29;
        }
      }
      if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
        || (v25 & 0x8000000000000000) != 0
        || (v25 & 0x4000000000000000) != 0
        || v7 > *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
        if (v10)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._endMutation()();
      id v26 = v22;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v27 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v28 = a3;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v29 = v24;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v19;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      unint64_t v16 = v36;
      if (v35 == v19)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v7 = v33;
        a3 = v34;
        id v10 = v32;
        goto LABEL_32;
      }
    }
  }
  __break(1u);
  return result;
}

void *sub_10006F83C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3)
{
  void (*v31)(uint64_t *__return_ptr, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  uint64_t v31 = a2;
  id v32 = a3;
  uint64_t v5 = type metadata accessor for ClimateZone();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v28 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v29 = (uint64_t)&v25 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v25 = v3;
    uint64_t v35 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_10006E6D0(a1);
    uint64_t v11 = (uint64_t)result;
    int v13 = v12;
    uint64_t v14 = 0;
    uint64_t v15 = a1 + 64;
    uint64_t v26 = a1 + 80;
    uint64_t v27 = a1;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v17 = (unint64_t)v11 >> 6;
      if ((*(void *)(v15 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v13) {
        goto LABEL_23;
      }
      uint64_t v33 = v14;
      uint64_t v18 = v29;
      sub_100071EB8(*(void *)(a1 + 56) + *(void *)(v30 + 72) * v11, v29, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      uint64_t v19 = v28;
      sub_100072050(v18, v28, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      v31(&v34, v19);
      sub_100071F20(v19, (uint64_t (*)(void))type metadata accessor for ClimateZone);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      a1 = v27;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v16 = 1 << *(unsigned char *)(a1 + 32);
      if (v11 >= v16) {
        goto LABEL_24;
      }
      uint64_t v20 = *(void *)(v15 + 8 * v17);
      if ((v20 & (1 << v11)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v13) {
        goto LABEL_26;
      }
      unint64_t v21 = v20 & (-2 << (v11 & 0x3F));
      if (v21)
      {
        int64_t v16 = __clz(__rbit64(v21)) | v11 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = v17 + 1;
        unint64_t v23 = (unint64_t)(v16 + 63) >> 6;
        if (v17 + 1 < v23)
        {
          unint64_t v24 = *(void *)(v15 + 8 * v22);
          if (v24)
          {
LABEL_18:
            int64_t v16 = __clz(__rbit64(v24)) + (v22 << 6);
          }
          else
          {
            while (v23 - 2 != v17)
            {
              unint64_t v24 = *(void *)(v26 + 8 * v17++);
              if (v24)
              {
                unint64_t v22 = v17 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v14 = v33 + 1;
      uint64_t v11 = v16;
      if (v33 + 1 == v9) {
        return v35;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

char *sub_10006FB2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v119 = a3;
  id v120 = a4;
  uint64_t v8 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for ClimateCoordinator();
  uint64_t v128 = &off_1000CB510;
  v126[0] = a2;
  sub_100071EB8(a1, (uint64_t)a5 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_zone, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  id v11 = objc_allocWithZone((Class)UILabel);
  int v12 = a5;
  id v13 = [v11 initWithFrame:0.0, 0.0, 0.0, 0.0];
  *(void *)&v12[OBJC_IVAR____TtC7Climate15ClimateZoneCard_zoneLabel] = v13;
  sub_100071EB8(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  uint64_t v14 = (objc_class *)type metadata accessor for ClimateZoneControls();
  id v15 = objc_allocWithZone(v14);
  sub_100071EB8((uint64_t)v10, (uint64_t)v15 + OBJC_IVAR____TtC7Climate19ClimateZoneControls_zone, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  id v16 = objc_allocWithZone((Class)type metadata accessor for ClimateGrid());
  unint64_t v17 = (char *)v15;
  id v18 = [v16 initWithFrame:0.0, 0.0, 0.0, 0.0];
  *(void *)&v17[OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews] = v18;

  v125.receiver = v17;
  v125.super_class = v14;
  uint64_t v19 = (char *)[super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v19 addSubview:*(void *)&v19[OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews]];
  sub_10005C3B4();
  sub_1000894BC(v20);
  swift_bridgeObjectRelease();
  sub_100089D6C();

  sub_100071F20((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  *(void *)&v12[OBJC_IVAR____TtC7Climate15ClimateZoneCard_servicesGrid] = v19;

  unint64_t v21 = (objc_class *)type metadata accessor for ClimateZoneCard();
  v124.receiver = v12;
  v124.super_class = v21;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v23 = self;
  id v24 = v22;
  id v25 = [v23 clearColor];
  [v24 setBackgroundColor:v25];

  sub_10009E0AC();
  uint64_t v26 = OBJC_IVAR____TtC7Climate15ClimateZoneCard_zoneLabel;
  [*(id *)((char *)v24 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_zoneLabel) setTranslatesAutoresizingMaskIntoConstraints:0];
  [v24 addSubview:*(void *)((char *)v24 + v26)];
  id v27 = *(id *)((char *)v24 + v26);
  uint64_t v121 = a1;
  sub_10005C244();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v27 setText:v28];

  uint64_t v29 = *(void **)((char *)v24 + v26);
  uint64_t v30 = self;
  id v31 = v29;
  id v32 = [v30 systemFontOfSize:16.0 weight:UIFontWeightSemibold];
  [v31 setFont:v32];

  uint64_t v33 = *(void **)((char *)v24 + v26);
  sub_100057CC8(v126, v127);
  swift_getKeyPath();
  swift_getKeyPath();
  id v34 = v33;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  [v34 setTextAlignment:v122 != 0];

  uint64_t v35 = OBJC_IVAR____TtC7Climate15ClimateZoneCard_servicesGrid;
  [v24 addSubview:*(void *)((char *)v24 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_servicesGrid)];
  unint64_t v123 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100057CC8(v126, v127);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v122)
  {
    id v36 = [*(id *)((char *)v24 + v26) centerXAnchor];
    id v37 = [v24 centerXAnchor];
    id v38 = [v36 constraintEqualToAnchor:v37];

    uint64_t v39 = (char *)v38;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_32;
  }
  uint64_t v118 = (char *)v26;
  uint64_t v117 = v35;
  id v40 = [objc_allocWithZone((Class)type metadata accessor for ClimateButton()) init];
  [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v24 addSubview:v40];
  id v41 = [v23 clearColor];
  id v42 = [v23 labelColor];
  unint64_t v43 = (void *)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  objc_super v44 = *(void **)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  id v45 = *(void **)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v46 = *(void *)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  void *v43 = v41;
  v43[1] = v42;
  v43[2] = &_swiftEmptyDictionarySingleton;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v47 = v41;
  id v48 = v42;
  swift_bridgeObjectRetain();
  id v49 = v47;
  id v50 = v48;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_10;
  }
  sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v46);
  char v52 = v51;
  swift_bridgeObjectRelease();

  if ((v52 & 1) == 0) {
LABEL_10:
  }
    (*(void (**)(void))((swift_isaMask & *v40) + 0x230))();

  swift_bridgeObjectRelease();
  char v53 = *((unsigned char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial);
  *((unsigned char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial) = 1;
  if ((v53 & 1) == 0)
  {
    id v54 = [*(id *)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView) removeFromSuperview];
    (*(void (**)(id))((swift_isaMask & *v40) + 0x230))(v54);
  }
  id v55 = (void *)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
  swift_beginAccess();
  uint64_t v56 = *v55;
  uint64_t v57 = v55[1];
  *id v55 = 0xD000000000000011;
  v55[1] = 0x80000001000B7DB0;
  uint64_t v59 = v119;
  id v58 = v120;
  if (!v57
    || (v56 != 0xD000000000000011 || v57 != 0x80000001000B7DB0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ClimateButton.updateClimateConfiguration()();
  }
  swift_bridgeObjectRelease();
  *(_OWORD *)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier) = xmmword_1000B3E20;
  swift_bridgeObjectRelease();
  sub_10007AB50();
  uint64_t v60 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v61 = (void *)swift_allocObject();
  v61[2] = v60;
  v61[3] = v59;
  v61[4] = v58;
  uint64_t v62 = (void *)((char *)v40 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v63 = *v62;
  *uint64_t v62 = (uint64_t)sub_100072034;
  v62[1] = (uint64_t)v61;
  swift_retain();
  sub_100005690(v63);
  id v64 = [v40 heightAnchor];
  id v120 = [v64 constraintEqualToConstant:30.0];

  id v65 = [v40 widthAnchor];
  id v66 = [v40 heightAnchor];
  id v67 = [v65 constraintEqualToAnchor:v66];

  id v68 = [v40 trailingAnchor];
  id v69 = [v24 trailingAnchor];
  id v70 = [v68 constraintEqualToAnchor:v69 constant:-20.0];

  id v71 = [v40 centerYAnchor];
  uint64_t v39 = v118;
  id v72 = [*(id *)&v118[(void)v24] centerYAnchor];
  id v73 = [v71 constraintEqualToAnchor:v72];

  id v74 = [*(id *)&v39[(void)v24] leadingAnchor];
  id v75 = [v24 leadingAnchor];
  id v76 = [v74 constraintEqualToAnchor:v75 constant:20.0];

  id v77 = [*(id *)&v39[(void)v24] trailingAnchor];
  id v78 = [v24 trailingAnchor];
  id v79 = [v77 constraintLessThanOrEqualToAnchor:v78 constant:-20.0];

  if (!(v123 >> 62))
  {
    uint64_t v80 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v81 = v80 + 6;
    if (!__OFADD__(v80, 6)) {
      goto LABEL_20;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  uint64_t v116 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v81 = v116 + 6;
  if (__OFADD__(v116, 6)) {
    goto LABEL_52;
  }
LABEL_20:
  sub_10009CCD4(v81);
  specialized Array._endMutation()();
  uint64_t v39 = (char *)v120;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_53:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v82 = v67;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v83 = v70;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v84 = v73;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v85 = v76;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v86 = v79;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v35 = v117;
  uint64_t v26 = (uint64_t)v118;
LABEL_32:

  id v87 = [*(id *)((char *)v24 + v26) topAnchor];
  id v88 = [v24 topAnchor];
  id v89 = [v87 constraintEqualToAnchor:v88 constant:9.0];

  id v90 = [*(id *)((char *)v24 + v26) firstBaselineAnchor];
  id v91 = [v24 topAnchor];
  id v92 = [v90 constraintEqualToAnchor:v91 constant:28.0];

  id v93 = [*(id *)((char *)v24 + v35) topAnchor];
  id v94 = [v24 topAnchor];
  id v95 = [v93 constraintEqualToAnchor:v94 constant:38.0];

  id v96 = [*(id *)((char *)v24 + v35) bottomAnchor];
  id v97 = [v24 bottomAnchor];
  id v98 = [v96 constraintEqualToAnchor:v97];

  id v99 = [*(id *)((char *)v24 + v35) leadingAnchor];
  id v100 = [v24 leadingAnchor];
  id v101 = [v99 constraintEqualToAnchor:v100];

  id v102 = [*(id *)((char *)v24 + v35) trailingAnchor];
  id v103 = [v24 trailingAnchor];
  id v104 = [v102 constraintEqualToAnchor:v103];

  if (v123 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v115 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v106 = v115 + 6;
    if (!__OFADD__(v115, 6))
    {
LABEL_34:
      sub_10009CCD4(v106);
      specialized Array._endMutation()();
      id v89 = v89;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_35;
      }
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v105 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v106 = v105 + 6;
    if (!__OFADD__(v105, 6)) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_49:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_35:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v107 = v92;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v108 = v95;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v109 = v98;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v110 = v101;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v111 = v104;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v112 = self;
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v112 activateConstraints:isa];

  sub_100071F20(v121, (uint64_t (*)(void))type metadata accessor for ClimateZone);
  sub_10000AC28((uint64_t)v126);
  return (char *)v24;
}

void sub_100070D2C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v85 = a1;
  uint64_t v86 = a3;
  uint64_t v6 = sub_100006730((uint64_t *)&unk_1000E5450);
  __chkstk_darwin(v6 - 8);
  uint64_t v81 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006730(&qword_1000E6CB8);
  uint64_t v82 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006730(&qword_1000E6D28);
  uint64_t v73 = *(void *)(v10 - 8);
  uint64_t v74 = v10;
  __chkstk_darwin(v10);
  id v84 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006730(&qword_1000E6D30);
  uint64_t v76 = *(void *)(v12 - 8);
  uint64_t v77 = v12;
  __chkstk_darwin(v12);
  id v75 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ClimateAssets();
  __chkstk_darwin(v14);
  id v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ClimateSystemManager();
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView;
  id v21 = objc_allocWithZone((Class)UIImageView);
  id v22 = a4;
  *(void *)&a4[v20] = [v21 init];
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v23 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    unint64_t v23 = &_swiftEmptySetSingleton;
  }
  *(void *)&v22[OBJC_IVAR____TtC7Climate14ClimateCarView_cancellables] = v23;
  v22[OBJC_IVAR____TtC7Climate14ClimateCarView_hasAlreadyLayout] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Climate14ClimateCarView_imageActiveHeightConstraint] = _swiftEmptyArrayStorage;
  uint64_t v24 = v85;
  sub_100071EB8(v85, (uint64_t)&v22[OBJC_IVAR____TtC7Climate14ClimateCarView_climateSystem], (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  id v25 = &v22[OBJC_IVAR____TtC7Climate14ClimateCarView_activeZoneTracker];
  *(void *)id v25 = a2;
  *((void *)v25 + 1) = &off_1000CB540;
  uint64_t v26 = v86;
  sub_100071EB8(v86, (uint64_t)&v22[OBJC_IVAR____TtC7Climate14ClimateCarView_assets], (uint64_t (*)(void))type metadata accessor for ClimateAssets);
  sub_100071EB8(v24, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
  sub_100071EB8(v26, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
  id v27 = (char *)objc_allocWithZone((Class)type metadata accessor for ClimatePositionViews());
  id v79 = a2;
  *(void *)&v22[OBJC_IVAR____TtC7Climate14ClimateCarView_positionViews] = sub_10006F24C((uint64_t)v19, v79, v16, v27);

  NSString v28 = (objc_class *)type metadata accessor for ClimateCarView();
  v89.receiver = v22;
  v89.super_class = v28;
  uint64_t v29 = (char *)objc_msgSendSuper2(&v89, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  uint64_t v30 = OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView;
  id v31 = *(void **)&v29[OBJC_IVAR____TtC7Climate14ClimateCarView_carImageView];
  uint64_t v32 = *(void *)(v26 + *(int *)(v14 + 24));
  uint64_t v33 = v29;
  [v31 setImage:v32];
  [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
  unint64_t v88 = (unint64_t)_swiftEmptyArrayStorage;
  [v31 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v31 setContentMode:2];
  [v31 setClipsToBounds:1];
  [v33 addSubview:v31];
  uint64_t v34 = OBJC_IVAR____TtC7Climate14ClimateCarView_positionViews;
  uint64_t v35 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateCarView_positionViews];
  [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v33 addSubview:v35];
  id v36 = [v31 centerXAnchor];
  id v37 = [v33 centerXAnchor];
  uint64_t p_type = &stru_1000D5FF0.type;
  id v78 = [v36 constraintEqualToAnchor:v37];

  id v39 = [*(id *)&v33[v34] leadingAnchor];
  id v40 = [*(id *)&v29[v30] leadingAnchor];
  id v41 = [v39 constraintEqualToAnchor:v40];

  id v42 = [*(id *)&v33[v34] trailingAnchor];
  id v43 = [*(id *)&v29[v30] trailingAnchor];
  id v44 = [v42 constraintEqualToAnchor:v43];

  id v45 = [*(id *)&v33[v34] topAnchor];
  id v46 = [*(id *)&v29[v30] topAnchor];
  id v47 = [v45 constraintEqualToAnchor:v46];

  id v48 = [*(id *)&v33[v34] bottomAnchor];
  id v49 = [*(id *)&v29[v30] bottomAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49];

  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v52 = v71 + 5;
    if (!__OFADD__(v71, 5))
    {
LABEL_5:
      sub_10009CCD4(v52);
      specialized Array._endMutation()();
      uint64_t p_type = (char **)v78;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v51 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v52 = v51 + 5;
    if (!__OFADD__(v51, 5)) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v53 = v41;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v54 = v44;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v55 = v47;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v56 = v50;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v57 = self;
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v57 activateConstraints:isa];

  swift_beginAccess();
  sub_100006730((uint64_t *)&unk_1000E5E20);
  uint64_t v59 = v80;
  Published.projectedValue.getter();
  swift_endAccess();
  id v87 = [self mainRunLoop];
  uint64_t v60 = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v61 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v81, 1, 1, v60);
  sub_100007310(0, (unint64_t *)&unk_1000E5470);
  sub_10000D02C(&qword_1000E6CD0, &qword_1000E6CB8);
  sub_10000CF84();
  uint64_t v62 = v83;
  uint64_t v63 = v84;
  Publisher.receive<A>(on:options:)();
  sub_10000A404(v61, (uint64_t *)&unk_1000E5450);

  (*(void (**)(char *, uint64_t))(v82 + 8))(v59, v62);
  id v64 = [self sharedApplication];
  id v65 = [v64 delegate];

  if (v65)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v66 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();

    swift_release();
    swift_release();
    sub_10000D02C(&qword_1000E6D38, &qword_1000E6D28);
    id v67 = v75;
    uint64_t v68 = v74;
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v68);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C(&qword_1000E6D40, &qword_1000E6D30);
    uint64_t v69 = v77;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v67, v69);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v70 = v86;
    sub_10002ED5C((uint64_t)v33);

    sub_100071F20(v85, (uint64_t (*)(void))type metadata accessor for ClimateSystemManager);
    sub_100071F20(v70, (uint64_t (*)(void))type metadata accessor for ClimateAssets);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000719D0()
{
  unint64_t v1 = v0;
  id v2 = [self sharedApplication];
  id v3 = [v2 delegate];

  if (!v3) {
    __break(1u);
  }
  uint64_t v4 = OBJC_IVAR____TtC7Climate24ClimateAppViewController_coordinator;
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v5 = sub_10008EAA4();
  swift_unknownObjectRelease();
  *(void *)&v1[v4] = v5;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v6 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v6 = &_swiftEmptySetSingleton;
  }
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_cancellables] = v6;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_activeConstraints] = _swiftEmptyArrayStorage;
  v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___zoneCard] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_autoSettingsObserver] = 0;
  uint64_t v7 = &v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache];
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((void *)v7 + 6) = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateAppViewController____lazy_storage___systemControls] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100071B60()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_zoneCardActive) & 1) == 0)
  {
    unint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache);
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache);
    id v9 = *(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton);
    if (v2)
    {
      uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsCache);
      uint64_t v12 = v1[1];
      uint64_t v13 = v1[2];
      uint64_t v14 = v1[3];
      uint64_t v15 = v1[4];
      uint64_t v16 = v1[5];
      uint64_t v17 = v1[6];
      id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateAppViewController_settingsButton);
      sub_100071CE4(v2);
      unint64_t v4 = CAFUISettingsCache.rootSettings(in:visibleOnly:)();
      sub_100015120(v2);
      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      BOOL v6 = v5 == 0;
      uint64_t v7 = v9;
    }
    else
    {
      id v8 = v9;
      uint64_t v7 = v9;
      BOOL v6 = 1;
    }
    [v7 setHidden:v6, v9, v11, v12, v13, v14, v15, v16, v17];
  }
}

uint64_t sub_100071CE4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100071D70()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100071DA8()
{
}

uint64_t sub_100071DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100071DC0()
{
  return swift_release();
}

unint64_t sub_100071DC8()
{
  unint64_t result = qword_1000E5DD0;
  if (!qword_1000E5DD0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5DD0);
  }
  return result;
}

uint64_t sub_100071E30(uint64_t a1)
{
  return sub_10006C904(a1);
}

void sub_100071E38(uint64_t *a1)
{
}

unint64_t sub_100071E40()
{
  unint64_t result = qword_1000E6D10;
  if (!qword_1000E6D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E6D10);
  }
  return result;
}

void sub_100071E94()
{
}

void sub_100071EA4(uint64_t a1)
{
}

uint64_t sub_100071EAC@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  return sub_10008B478(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_100071EB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100071F20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100071F88()
{
}

uint64_t sub_100071FA4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100071FF4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100072034(uint64_t a1)
{
  sub_10009E044(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_100072040()
{
  return swift_release();
}

uint64_t sub_100072050(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000720B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100072138()
{
  uint64_t v1 = type metadata accessor for ClimateSystemManager();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();

  uint64_t v5 = v0 + v3 + *(int *)(v1 + 28);
  BOOL v6 = (int *)type metadata accessor for ClimateZone();
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48);
  if (!v7(v5, 1, v6))
  {
    uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v5, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  uint64_t v9 = v0 + v3 + *(int *)(v1 + 32);
  if (!v7(v9, 1, v6))
  {
    uint64_t v10 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 56, v2 | 7);
}

void sub_100072418(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ClimateSystemManager() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);

  sub_10006ABF0(a1, v5, (void **)(v1 + v4), v6);
}

uint64_t sub_1000724B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100072538(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E6D50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000725A8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate31ClimateAutoControlServiceButton_autoClimateControl);
  unsigned int v2 = [v1 intensity];
  unsigned int v3 = [v1 intensityRestricted];
  unsigned int v4 = [v1 intensityDisabled];
  if (v2 == 1)
  {
    uint64_t v5 = 4;
    if (!v3) {
      uint64_t v5 = 0;
    }
    if ((v4 & 1) == 0) {
      return v5;
    }
    return v5 | 0x10;
  }
  uint64_t v5 = 5;
  if (!v3) {
    uint64_t v5 = 1;
  }
  if (v4) {
    return v5 | 0x10;
  }
  return v5;
}

char *sub_100072648(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate31ClimateAutoControlServiceButton_autoClimateControl] = a1;
  v17.receiver = v1;
  v17.super_class = (Class)type metadata accessor for ClimateAutoControlServiceButton();
  id v3 = a1;
  unsigned int v4 = [super init];
  uint64_t v5 = *(void (**)(void))((swift_isaMask & *v4) + 0x220);
  uint64_t v6 = v4;
  v5();
  uint64_t v7 = v6;
  [v3 registerObserver:v7];

  uint64_t v8 = &v7[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle];
  swift_beginAccess();
  char v9 = *v8;
  *uint64_t v8 = 1;
  uint64_t v10 = v7;
  if ((v9 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v3;
  uint64_t v13 = (uint64_t *)&v10[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v14 = *v13;
  *uint64_t v13 = (uint64_t)sub_100072BEC;
  v13[1] = v12;
  id v15 = v3;
  sub_100005690(v14);
  sub_1000729CC();

  return v10;
}

void sub_100072814(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    [a3 setIntensity:sub_10007289C(1, [a3 intensity])];
    sub_1000729CC();
  }
}

uint64_t sub_10007289C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result = static CAFAutoModeIntensity.allCases.getter();
  uint64_t v5 = *(void *)(result + 16);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = result;
  int v7 = a2;
  uint64_t v8 = result + 32;
  if (*(unsigned __int8 *)(result + 32) != v7)
  {
    uint64_t v9 = 0;
    while (v5 - 1 != v9)
    {
      int v10 = *(unsigned __int8 *)(result + 33 + v9++);
      if (v10 == v7)
      {
        BOOL v11 = __OFADD__(v9, a1);
        a1 += v9;
        if (!v11) {
          goto LABEL_7;
        }
        __break(1u);
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
LABEL_7:
  unint64_t v12 = a1 % v5;
  sub_100006730(&qword_1000E6BB8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1000B2000;
  *(void *)(v13 + 56) = &type metadata for Int;
  *(void *)(v13 + 32) = a1 % v5;
  print(_:separator:terminator:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (((a1 % v5) & 0x8000000000000000) == 0)
  {
    if (v12 < *(void *)(v6 + 16))
    {
LABEL_13:
      uint64_t v14 = *(unsigned __int8 *)(v8 + v12);
      swift_bridgeObjectRelease();
      return v14;
    }
    __break(1u);
  }
  BOOL v11 = __OFADD__(v5, v12);
  v12 += v5;
  if (v11)
  {
LABEL_15:
    __break(1u);
  }
  else if ((v12 & 0x8000000000000000) == 0)
  {
    if (v12 < *(void *)(v6 + 16)) {
      goto LABEL_13;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

id sub_1000729CC()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate31ClimateAutoControlServiceButton_autoClimateControl];
  [v1 intensity];
  v2._uint64_t countAndFlagsBits = CAFAutoModeIntensity.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  swift_beginAccess();
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *((void *)v3 + 1);
  *(void *)id v3 = 0xA4F545541;
  *((void *)v3 + 1) = 0xE500000000000000;
  if (!v5
    || (v4 == 0xA4F545541 ? (BOOL v6 = v5 == 0xE500000000000000) : (BOOL v6 = 0),
        !v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }
  swift_bridgeObjectRelease();
  sub_10009F8A4();
  [v1 intensity];
  [v1 intensityRestricted];
  objc_msgSend(v0, "setEnabled:", objc_msgSend(v1, "intensityDisabled") ^ 1);
  sub_10008896C();
  return sub_100088B54();
}

id sub_100072B1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateAutoModeIntensityButton();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateAutoModeIntensityButton()
{
  return self;
}

uint64_t sub_100072B74()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100072BAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100072BEC(uint64_t a1)
{
  sub_100072814(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_100072BF4()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      return;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  objc_super v2 = self;
  id v3 = [v2 sharedApplication];
  id v4 = [v3 delegate];

  if (!v4)
  {
    __break(1u);
    goto LABEL_17;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();

  swift_unknownObjectRelease();
  id v5 = [v2 sharedApplication];
  id v6 = [v5 delegate];

  if (!v6)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_dynamicCastClassUnconditional();
  int v7 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v8 = v7[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v8 == 1) {
    sub_100073C9C();
  }
  else {
    sub_100074260();
  }
  id v9 = [v2 sharedApplication];
  id v10 = [v9 delegate];

  if (!v10) {
    goto LABEL_18;
  }
  swift_dynamicCastClassUnconditional();

  swift_unknownObjectRelease();
  id v11 = [v2 sharedApplication];
  id v12 = [v11 delegate];

  if (!v12)
  {
LABEL_19:
    __break(1u);
    return;
  }
  swift_dynamicCastClassUnconditional();
  uint64_t v13 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v14 = v13[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v14 == 1) {
    sub_10007469C();
  }
  else {
    sub_100074AA0();
  }
}

uint64_t sub_100072E90()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClimateGridLayoutManager()
{
  return self;
}

void sub_100072EF4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    int v14 = self;
    id v15 = [v14 sharedApplication];
    id v16 = [v15 delegate];

    if (v16)
    {
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      id v17 = sub_10008EAA4();
      swift_unknownObjectRelease();

      id v18 = [v14 sharedApplication];
      id v19 = [v18 delegate];

      if (v19)
      {
        swift_dynamicCastClassUnconditional();
        id v20 = sub_10008EAA4();
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_29;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!IndexPath.section.getter())
  {
    uint64_t v21 = *(void *)(*(void *)(*(void *)(v5 + 16) + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
    if (IndexPath.item.getter() < v21)
    {
      if (__OFADD__(IndexPath.item.getter(), 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      IndexPath.section.getter();
      IndexPath.init(item:section:)();
      id v22 = *(id *)(v5 + 16);
      unint64_t v23 = (void *)sub_100011F54((uint64_t)v13);
      uint64_t v25 = v24;

      if (v23)
      {
        uint64_t v55 = v25;
        id v26 = [self sharedApplication];
        id v27 = [v26 delegate];

        if (!v27)
        {
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        NSString v28 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        uint64_t v29 = v28[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        uint64_t ObjectType = swift_getObjectType();
        uint64_t v31 = sub_10004A754(v29, ObjectType, v55);

        BOOL v32 = v31 == 2;
        if (a3) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v32 = 1;
        if (a3)
        {
LABEL_18:
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
          goto LABEL_19;
        }
      }
      if (a2 == 2 && v32)
      {
        uint64_t v33 = self;
        id v34 = [v33 sharedApplication];
        id v35 = [v34 delegate];

        if (v35)
        {
          type metadata accessor for ClimateAppDelegate();
          swift_dynamicCastClassUnconditional();
          id v36 = sub_10008EAA4();
          swift_unknownObjectRelease();

          id v37 = [v33 sharedApplication];
          id v38 = [v37 delegate];

          if (v38)
          {
            swift_dynamicCastClassUnconditional();
            id v39 = sub_10008EAA4();
            swift_unknownObjectRelease();

            (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
            return;
          }
          goto LABEL_35;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        return;
      }
      goto LABEL_18;
    }
  }
LABEL_19:
  id v40 = *(id *)(v5 + 16);
  id v41 = (void *)sub_100011F54(a1);
  uint64_t v43 = v42;

  if (v41)
  {
    id v44 = self;
    id v45 = [v44 sharedApplication];
    id v46 = [v45 delegate];

    if (v46)
    {
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      id v47 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      uint64_t v48 = v47[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      uint64_t v49 = swift_getObjectType();
      uint64_t v50 = sub_10004A754(v48, v49, v43);
      id v51 = [v44 sharedApplication];
      id v52 = [v51 delegate];

      if (v50 == 2)
      {
        if (!v52)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
      }
      else if (!v52)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      swift_dynamicCastClassUnconditional();
      id v53 = sub_10008EAA4();
      swift_unknownObjectRelease();

      return;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
}

void sub_1000735E8(uint64_t a1)
{
  id v3 = *(id *)(v1 + 16);
  uint64_t v4 = (void *)sub_100011F54(a1);
  uint64_t v6 = v5;

  if (v4)
  {
    int v7 = self;
    id v8 = [v7 sharedApplication];
    id v9 = [v8 delegate];

    if (v9)
    {
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      id v10 = sub_10008EAA4();
      swift_unknownObjectRelease();

      id v11 = [v7 sharedApplication];
      id v12 = [v11 delegate];

      if (v12)
      {
        swift_dynamicCastClassUnconditional();
        uint64_t v13 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        uint64_t v14 = v13[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        uint64_t ObjectType = swift_getObjectType();
        uint64_t v16 = sub_10004A754(v14, ObjectType, v6);
        id v17 = [v7 sharedApplication];
        id v18 = [v17 delegate];

        if (v16 != 3)
        {
          if (v18)
          {
LABEL_9:
            swift_dynamicCastClassUnconditional();
            id v19 = sub_10008EAA4();
            swift_unknownObjectRelease();

            return;
          }
          goto LABEL_13;
        }
        if (v18) {
          goto LABEL_9;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

void sub_100073850(uint64_t a1)
{
  id v3 = *(id *)(v1 + 16);
  id v21 = (id)sub_100011F54(a1);
  uint64_t v5 = v4;

  if (!v21) {
    return;
  }
  uint64_t ObjectType = swift_getObjectType();
  if (sub_10004A71C(ObjectType, v5))
  {
    type metadata accessor for ClimateStepper();
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      id v8 = (void *)v7;
      id v9 = self;
      id v10 = v21;
      id v11 = [v9 sharedApplication];
      id v12 = [v11 delegate];

      if (v12)
      {
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        uint64_t v13 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        int v14 = v13[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        v15.n128_u64[0] = 0x4046000000000000;
        if (v14) {
          v15.n128_f64[0] = 56.0;
        }
        (*(void (**)(__n128))((swift_isaMask & *v8) + 0x258))(v15);
        id v16 = [v9 sharedApplication];
        id v17 = [v16 delegate];

        if (v17)
        {
          swift_dynamicCastClassUnconditional();
          id v18 = (unsigned __int8 *)sub_10008EAA4();
          swift_unknownObjectRelease();
          int v19 = v18[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

          v20.n128_u64[0] = 0x4046000000000000;
          if (v19) {
            v20.n128_f64[0] = 56.0;
          }
          (*(void (**)(__n128))((swift_isaMask & *v8) + 0x270))(v20);

          goto LABEL_11;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
  }
LABEL_11:
}

void sub_100073B00(double a1)
{
  objc_super v2 = self;
  id v3 = [v2 sharedApplication];
  id v4 = [v3 delegate];

  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v5 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v6 = v5[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v6 == 1) {
    double v7 = 56.0;
  }
  else {
    double v7 = 230.0;
  }
  if (a1 == v7)
  {
    id v8 = [v2 sharedApplication];
    id v9 = [v8 delegate];

    if (v9)
    {
      swift_dynamicCastClassUnconditional();
      id v10 = sub_10008EAA4();
      swift_unknownObjectRelease();

      return;
    }
    goto LABEL_10;
  }
}

void sub_100073C9C()
{
  uint64_t v1 = v0;
  uint64_t v39 = type metadata accessor for IndexPath();
  __chkstk_darwin(v39);
  id v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = 2;
  if (!*(void *)(*(void *)(v5 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16)) {
    uint64_t v6 = 3;
  }
  uint64_t v37 = v6;
  uint64_t v38 = *(void *)(*(void *)(v5 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
  if (!v38) {
    return;
  }
  uint64_t v7 = 0;
  double v8 = *(double *)(v0 + 56);
  id v9 = (void *)(v0 + 24);
  id v10 = (void (**)(char *, uint64_t))(v2 + 8);
  double v11 = 0.0;
  uint64_t v12 = v37;
  while (1)
  {
    IndexPath.init(item:section:)();
    sub_1000735E8((uint64_t)v4);
    double v14 = v13;
    double v16 = v15;
    sub_100073B00(v13);
    char v18 = v17;
    sub_100073850((uint64_t)v4);
    if (v12 <= 0)
    {
      id v19 = [self sharedApplication];
      id v20 = [v19 delegate];

      if (!v20) {
        goto LABEL_30;
      }
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      id v21 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      int v22 = v21[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      if (v22) {
        double v23 = 10.0;
      }
      else {
        double v23 = 8.0;
      }
      double v8 = v8 + v14 + v23;
      double v11 = 0.0;
      uint64_t v12 = v37;
    }
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v25 = [self layoutAttributesForCellWithIndexPath:isa];

    [v25 setFrame:v8, v11, v14, v16];
    swift_beginAccess();
    id v26 = v25;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    double v27 = *(double *)(v1 + 32);
    v40.origin.x = v8;
    v40.origin.y = v11;
    v40.size.width = v14;
    v40.size.height = v16;
    double MaxY = CGRectGetMaxY(v40);
    if (v27 > MaxY) {
      double MaxY = v27;
    }
    *(double *)(v1 + 32) = MaxY;
    double v29 = *(double *)(v1 + 40);
    v41.origin.x = v8;
    v41.origin.y = v11;
    v41.size.width = v14;
    v41.size.height = v16;
    double MaxX = CGRectGetMaxX(v41);
    if (v29 > MaxX) {
      double MaxX = v29;
    }
    *(double *)(v1 + 40) = MaxX;
    if (v18) {
      break;
    }
    BOOL v31 = __OFSUB__(v12--, 1);
    if (v31) {
      goto LABEL_28;
    }
LABEL_22:
    id v32 = [self sharedApplication];
    id v33 = [v32 delegate];

    if (!v33) {
      goto LABEL_29;
    }
    ++v7;
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v34 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    int v35 = v34[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    if (v35) {
      double v36 = 10.0;
    }
    else {
      double v36 = 8.0;
    }
    (*v10)(v4, v39);
    double v11 = v11 + v16 + v36;
    if (v38 == v7) {
      return;
    }
  }
  BOOL v31 = __OFSUB__(v12, 3);
  v12 -= 3;
  if (!v31) {
    goto LABEL_22;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_1000740C4(double a1)
{
  uint64_t v2 = self;
  id v3 = [v2 sharedApplication];
  id v4 = [v3 delegate];

  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v5 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v6 = v5[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v6 == 1) {
    double v7 = 56.0;
  }
  else {
    double v7 = 148.0;
  }
  if (a1 == v7)
  {
    id v8 = [v2 sharedApplication];
    id v9 = [v8 delegate];

    if (v9)
    {
      swift_dynamicCastClassUnconditional();
      id v10 = sub_10008EAA4();
      swift_unknownObjectRelease();

      return;
    }
    goto LABEL_10;
  }
}

void sub_100074260()
{
  uint64_t v1 = v0;
  uint64_t v40 = type metadata accessor for IndexPath();
  __chkstk_darwin(v40);
  id v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = 2;
  if (!*(void *)(*(void *)(v5 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16)) {
    uint64_t v6 = 3;
  }
  uint64_t v38 = v6;
  uint64_t v39 = *(void *)(*(void *)(v5 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
  if (!v39) {
    return;
  }
  uint64_t v7 = 0;
  double v8 = *(double *)(v0 + 56);
  id v9 = (void *)(v0 + 24);
  id v10 = (void (**)(char *, uint64_t))(v2 + 8);
  double v11 = 0.0;
  double v12 = v8;
  uint64_t v13 = v38;
  while (1)
  {
    IndexPath.init(item:section:)();
    sub_100072EF4((uint64_t)v4, v13, 0, 0);
    double v15 = v14;
    double v17 = v16;
    sub_1000740C4(v14);
    unsigned __int8 v19 = v18;
    if (!v13 || ((v13 < 2) & v18) != 0)
    {
      id v20 = [self sharedApplication];
      id v21 = [v20 delegate];

      if (!v21) {
        goto LABEL_31;
      }
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      int v22 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      int v23 = v22[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      if (v23) {
        double v24 = 10.0;
      }
      else {
        double v24 = 8.0;
      }
      double v11 = v11 + v17 + v24;
      double v12 = v8;
      uint64_t v13 = v38;
    }
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v26 = [self layoutAttributesForCellWithIndexPath:isa];

    [v26 setFrame:v12, v11, v15, v17];
    swift_beginAccess();
    id v27 = v26;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    double v28 = *(double *)(v1 + 32);
    v41.origin.x = v12;
    v41.origin.y = v11;
    v41.size.width = v15;
    v41.size.height = v17;
    double MaxY = CGRectGetMaxY(v41);
    if (v28 > MaxY) {
      double MaxY = v28;
    }
    *(double *)(v1 + 32) = MaxY;
    double v30 = *(double *)(v1 + 40);
    v42.origin.x = v12;
    v42.origin.y = v11;
    v42.size.width = v15;
    v42.size.height = v17;
    double MaxX = CGRectGetMaxX(v42);
    if (v30 > MaxX) {
      double MaxX = v30;
    }
    *(double *)(v1 + 40) = MaxX;
    if (v19) {
      break;
    }
    BOOL v32 = __OFSUB__(v13--, 1);
    if (v32) {
      goto LABEL_29;
    }
LABEL_23:
    id v33 = [self sharedApplication];
    id v34 = [v33 delegate];

    if (!v34) {
      goto LABEL_30;
    }
    ++v7;
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    int v35 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    int v36 = v35[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    if (v36) {
      double v37 = 10.0;
    }
    else {
      double v37 = 8.0;
    }
    (*v10)(v4, v40);
    double v12 = v12 + v15 + v37;
    if (v39 == v7) {
      return;
    }
  }
  BOOL v32 = __OFSUB__(v13, 2);
  v13 -= 2;
  if (!v32) {
    goto LABEL_23;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

void sub_10007469C()
{
  uint64_t v1 = v0;
  uint64_t v37 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  id v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v36 = *(void *)(*(void *)(v5 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16);
  if (v36)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
    uint64_t v7 = self;
    uint64_t v8 = 0;
    id v9 = (void (**)(char *, uint64_t))(v2 + 8);
    double v10 = 0.0;
    while (!__OFADD__(v8, v6))
    {
      IndexPath.init(item:section:)();
      sub_1000735E8((uint64_t)v4);
      double v12 = v11;
      double v14 = v13;
      id v15 = [v7 sharedApplication];
      id v16 = [v15 delegate];

      if (!v16) {
        goto LABEL_24;
      }
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      double v17 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      int v18 = v17[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      if (v18) {
        double v19 = 132.0;
      }
      else {
        double v19 = 160.0;
      }
      double v20 = *(double *)(v1 + 56);
      double v21 = 0.0;
      if (IndexPath.item.getter() != v6)
      {
        id v22 = [v7 sharedApplication];
        id v23 = [v22 delegate];

        if (!v23) {
          goto LABEL_25;
        }
        swift_dynamicCastClassUnconditional();
        double v24 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        int v25 = v24[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        if (v25) {
          double v26 = 10.0;
        }
        else {
          double v26 = 8.0;
        }
        double v21 = v10 + v26;
      }
      double v27 = v19 + v20;
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v29 = [self layoutAttributesForCellWithIndexPath:isa];

      [v29 setFrame:v19 + v20, v21, v12, v14];
      swift_beginAccess();
      id v30 = v29;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v1 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v8;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      double v31 = *(double *)(v1 + 32);
      v38.origin.x = v27;
      v38.origin.y = v21;
      v38.size.width = v12;
      v38.size.height = v14;
      double MaxY = CGRectGetMaxY(v38);
      if (v31 > MaxY) {
        double MaxY = v31;
      }
      *(double *)(v1 + 32) = MaxY;
      double v33 = *(double *)(v1 + 40);
      v39.origin.x = v27;
      v39.origin.y = v21;
      v39.size.width = v12;
      v39.size.height = v14;
      double MaxX = CGRectGetMaxX(v39);
      if (v33 > MaxX) {
        double MaxX = v33;
      }
      *(double *)(v1 + 40) = MaxX;

      (*v9)(v4, v37);
      double v10 = v14 + v21;
      if (v36 == v8) {
        return;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
}

void sub_100074AA0()
{
  uint64_t v1 = v0;
  uint64_t v53 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void (***)(char *, uint64_t))(v53 - 8);
  __chkstk_darwin(v53);
  id v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16);
  uint64_t p_type = &stru_1000D5FF0.type;
  if (v5)
  {
    uint64_t v55 = v2;
    uint64_t v7 = self;
    id v8 = [v7 sharedApplication];
    id v9 = [v8 delegate];

    if (!v9)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    double v10 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    int v11 = v10[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    uint64_t v12 = *(void *)(*(void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16);
    id v13 = [v7 sharedApplication];
    id v14 = [v13 delegate];

    if (!v14)
    {
LABEL_35:
      __break(1u);
      return;
    }
    uint64_t p_type = &stru_1000D5FF0.type;
    uint64_t v15 = v12 - 1;
    double v16 = 44.0;
    if (v11) {
      double v16 = 56.0;
    }
    double v17 = v16 * (double)v5;
    swift_dynamicCastClassUnconditional();
    int v18 = (unsigned __int8 *)sub_10008EAA4();
    swift_unknownObjectRelease();
    int v19 = v18[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

    double v20 = 8.0;
    if (v19) {
      double v20 = 10.0;
    }
    BOOL v54 = v17 + v20 * (double)v15 < *(double *)(v1 + 32);
    uint64_t v2 = v55;
  }
  else
  {
    BOOL v54 = 0;
  }
  uint64_t v21 = *(void *)(v1 + 16);
  uint64_t v52 = *(void *)(*(void *)(v21 + OBJC_IVAR____TtC7Climate17ClimateGridSource_surfaceItems) + 16);
  if (v52)
  {
    uint64_t v22 = *(void *)(*(void *)(v21 + OBJC_IVAR____TtC7Climate17ClimateGridSource_flowItems) + 16);
    uint64_t v55 = (void (**)(char *, uint64_t))self;
    uint64_t v23 = 0;
    double v24 = v2 + 1;
    double v25 = 0.0;
    while (!__OFADD__(v23, v22))
    {
      IndexPath.init(item:section:)();
      sub_100072EF4((uint64_t)v4, 0, 1, v54);
      double v27 = v26;
      double v29 = v28;
      id v30 = [v55 sharedApplication];
      double v31 = p_type;
      id v32 = [v30 p_type[460]];

      if (!v32) {
        goto LABEL_32;
      }
      type metadata accessor for ClimateAppDelegate();
      swift_dynamicCastClassUnconditional();
      double v33 = (unsigned __int8 *)sub_10008EAA4();
      swift_unknownObjectRelease();
      int v34 = v33[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

      if (v34) {
        double v35 = 68.0;
      }
      else {
        double v35 = 160.0;
      }
      double v36 = *(double *)(v1 + 56);
      double v37 = 0.0;
      if (IndexPath.item.getter() != v22)
      {
        id v38 = [v55 sharedApplication];
        id v39 = [v38 p_type[460]];

        if (!v39) {
          goto LABEL_33;
        }
        swift_dynamicCastClassUnconditional();
        uint64_t v40 = (unsigned __int8 *)sub_10008EAA4();
        swift_unknownObjectRelease();
        int v41 = v40[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

        if (v41) {
          double v42 = 10.0;
        }
        else {
          double v42 = 8.0;
        }
        double v37 = v25 + v42;
      }
      double v43 = v35 + v36;
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v45 = [self layoutAttributesForCellWithIndexPath:isa];

      [v45 setFrame:v35 + v36, v37, v27, v29];
      swift_beginAccess();
      id v46 = v45;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v1 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v23;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      double v47 = *(double *)(v1 + 32);
      v56.origin.x = v43;
      v56.origin.y = v37;
      v56.size.width = v27;
      v56.size.height = v29;
      double MaxY = CGRectGetMaxY(v56);
      if (v47 > MaxY) {
        double MaxY = v47;
      }
      *(double *)(v1 + 32) = MaxY;
      double v49 = *(double *)(v1 + 40);
      v57.origin.x = v43;
      v57.origin.y = v37;
      v57.size.width = v27;
      v57.size.height = v29;
      double MaxX = CGRectGetMaxX(v57);
      if (v49 > MaxX) {
        double MaxX = v49;
      }
      *(double *)(v1 + 40) = MaxX;

      (*v24)(v4, v53);
      double v25 = v29 + v37;
      uint64_t p_type = v31;
      if (v52 == v23) {
        return;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
}

void sub_100075058(uint64_t a1)
{
  uint64_t v2 = self;
  id v3 = [v2 sharedApplication];
  id v4 = [v3 delegate];

  if (!v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v5 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v6 = v5[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v6 == 1)
  {
    id v7 = [v2 sharedApplication];
    id v8 = [v7 delegate];

    if (!v8)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    swift_dynamicCastClassUnconditional();
    id v9 = sub_10008EAA4();
    swift_unknownObjectRelease();
  }
  id v10 = [v2 sharedApplication];
  id v11 = [v10 delegate];

  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_dynamicCastClassUnconditional();
  uint64_t v12 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v13 = v12[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  id v14 = [v2 sharedApplication];
  id v15 = [v14 delegate];

  if (v13 == 1)
  {
    if (a1 != 3)
    {
      if (v15)
      {
LABEL_14:
        swift_dynamicCastClassUnconditional();
        id v16 = sub_10008EAA4();
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_22;
    }
    if (v15) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  if (a1 == 2)
  {
    if (v15) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v15) {
    goto LABEL_14;
  }
LABEL_23:
  __break(1u);
}

void sub_1000753F8()
{
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for ClimateTapAreaButton();
  [super didMoveToSuperview];
  swift_getObjectType();
  sub_100006730(&qword_1000E6F20);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v8 = v1;
  v2._uint64_t countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = sub_10004A96C(*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate20ClimateTapAreaButton_slotType));
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = CAUVehicleLayoutKey.rawValue.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setAccessibilityIdentifier:v6, v7, v8];
}

uint64_t sub_1000755A8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate20ClimateTapAreaButton_key;
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_100075614()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateTapAreaButton();
  return [super dealloc];
}

uint64_t sub_1000756B8()
{
  return type metadata accessor for ClimateTapAreaButton();
}

uint64_t type metadata accessor for ClimateTapAreaButton()
{
  uint64_t result = qword_1000E6F10;
  if (!qword_1000E6F10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007570C()
{
  uint64_t result = type metadata accessor for CAUVehicleLayoutKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000757A4(int a1)
{
  int v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue) = a1;
  sub_100030A94(v2);

  sub_100076700();
}

void sub_1000757E4(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = (void **)(v5 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  id v10 = *(void **)(v5 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig);
  objc_super v9 = *(void **)(v5 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig + 8);
  id v11 = *(void **)(v5 + OBJC_IVAR____TtC7Climate19ClimateProgressView_progressColorConfig + 16);
  *uint64_t v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  id v12 = a3;
  swift_bridgeObjectRetain_n();
  id v13 = a1;
  id v14 = a2;
  id v28 = v12;
  id v30 = v13;
  id v27 = v14;
  swift_bridgeObjectRelease();

  uint64_t v15 = *(void *)(v5 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView);
  id v16 = [self clearColor];
  double v17 = *v8;
  int v18 = (void *)(v15 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  int v19 = *(void **)(v15 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  double v20 = *(void **)(v15 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v29 = *(void *)(v15 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  void *v18 = v16;
  v18[1] = v17;
  v18[2] = &_swiftEmptyDictionarySingleton;
  id v21 = v17;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v22 = v16;
  id v23 = v21;
  swift_bridgeObjectRetain();
  id v24 = v22;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v29);
  char v26 = v25;
  swift_bridgeObjectRelease();

  if ((v26 & 1) == 0) {
LABEL_6:
  }
    ClimateButton.refreshColorConfig()();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  [*(id *)(v5 + OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView) setBackgroundColor:v8[1]];
  [*(id *)(v5 + OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView) setBackgroundColor:v8[2]];
  swift_bridgeObjectRelease();
}

id sub_100075A4C(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_isHighlighted) = a1;
  if (a1) {
    double v3 = 0.2;
  }
  else {
    double v3 = 1.0;
  }
  [*(id *)(v1 + OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView) setAlpha:v3];
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView);
  if (*(unsigned char *)(v1 + v2)) {
    double v5 = 0.2;
  }
  else {
    double v5 = 1.0;
  }

  return [v4 setAlpha:v5];
}

void *sub_100075AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, double a7)
{
  id v13 = objc_allocWithZone((Class)UIView);
  id v14 = v7;
  id v15 = [v13 init];
  [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v15 _setContinuousCornerRadius:a7 * 0.5];
  *(void *)&v14[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView] = v15;
  id v16 = [objc_allocWithZone((Class)UIView) init];
  [v16 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v16 _setContinuousCornerRadius:a7 * 0.5];
  *(void *)&v14[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView] = v16;
  id v17 = [v16 widthAnchor];
  id v18 = [v17 constraintEqualToConstant:0.0];

  *(void *)&v14[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressViewConstraint] = v18;
  id v19 = a6;
  double v20 = sub_10003112C(a1, a2, a3, a4, a5, v19);
  sub_100075C80(a7);

  return v20;
}

id sub_100075C80(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView];
  [v2 addSubview:v4];
  double v5 = *(void **)&v2[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView];
  [v2 addSubview:v5];
  id v41 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000B40F0;
  id v7 = [v4 topAnchor];
  uint64_t v8 = *(void **)&v2[OBJC_IVAR____TtC7Climate19ClimateProgressView_contentView];
  id v9 = [v8 bottomAnchor];
  id v10 = [v7 constraintEqualToAnchor:v9];

  *(void *)(v6 + 32) = v10;
  id v11 = [v4 widthAnchor];
  id v12 = [v11 constraintEqualToConstant:30.0];

  *(void *)(v6 + 40) = v12;
  id v13 = [v4 heightAnchor];
  id v14 = [v13 constraintEqualToConstant:a1];

  *(void *)(v6 + 48) = v14;
  id v15 = [v4 centerXAnchor];
  id v16 = [v2 centerXAnchor];
  id v17 = [v15 constraintEqualToAnchor:v16];

  *(void *)(v6 + 56) = v17;
  id v18 = [v5 topAnchor];
  id v19 = [v8 bottomAnchor];
  id v20 = [v18 constraintEqualToAnchor:v19];

  uint64_t v21 = OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressViewConstraint;
  id v22 = *(void **)&v2[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressViewConstraint];
  *(void *)(v6 + 64) = v20;
  *(void *)(v6 + 72) = v22;
  id v23 = v22;
  id v24 = [v5 heightAnchor];
  id v25 = [v24 constraintEqualToConstant:a1];

  *(void *)(v6 + 80) = v25;
  id v26 = [v5 leadingAnchor];
  id v27 = [v4 leadingAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27];

  *(void *)(v6 + 88) = v28;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v41 activateConstraints:isa];

  float v30 = (float)*(int *)&v2[OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue];
  uint64_t v31 = OBJC_IVAR____TtC7Climate19ClimateProgressView_range;
  id v32 = [*(id *)&v2[OBJC_IVAR____TtC7Climate19ClimateProgressView_range] minimum];
  [v32 floatValue];
  LODWORD(a1) = v33;

  float v34 = v30 - *(float *)&a1;
  id v35 = [*(id *)&v2[v31] maximum];
  [v35 floatValue];
  LODWORD(a1) = v36;

  id v37 = [*(id *)&v2[v31] minimum];
  [v37 floatValue];
  float v39 = v38;

  [*(id *)&v2[v21] setConstant:(float)(v34 / (float)(*(float *)&a1 - v39)) * 30.0];

  return [v2 layoutIfNeeded];
}

uint64_t sub_1000760E8(char a1)
{
  double v3 = *(void **)&v1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView];
  id v4 = *(id *)&v1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView];
  id v5 = v3;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  [v4 setTransform:&v12];
  [v4 setAlpha:0.0];

  id v6 = v5;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  [v6 setTransform:&v12];
  [v6 setAlpha:0.0];

  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v1;
  if (a1)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_100076BAC;
    *(void *)(v8 + 24) = v7;
    id v9 = v1;
    swift_retain();
    [v9 _removeAllAnimations:1];
    uint64_t v10 = sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
    __chkstk_darwin(v10);
    static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)();
    swift_release();
  }
  else
  {
    sub_1000762F4(v1);
  }
  return swift_release();
}

void sub_1000762F4(char *a1)
{
  uint64_t v2 = *(void **)&a1[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint];
  if (v2) {
    [v2 setConstant:-3.0];
  }
  [a1 layoutIfNeeded];
  double v3 = *(void **)&a1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView];
  id v4 = *(id *)&a1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView];
  id v5 = v3;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  [v4 setTransform:&v7];
  [v4 setAlpha:1.0];

  id v6 = v5;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  [v6 setTransform:&v7];
  [v6 setAlpha:1.0];
}

uint64_t sub_100076404(char a1)
{
  uint64_t v2 = v1;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B1F40;
  id v5 = *(void **)&v1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView];
  *(void *)(inited + 32) = v5;
  id v6 = *(void **)&v1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressView];
  *(void *)(inited + 40) = v6;
  *(void *)&long long v22 = inited;
  specialized Array._endMutation()();
  uint64_t v7 = v22;
  unint64_t v8 = v22 & 0xC000000000000001;
  id v9 = v5;
  id v10 = v6;
  if ((v22 & 0xC000000000000001) != 0) {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v11 = *(id *)(v22 + 32);
  }
  uint64_t v12 = v11;
  if (qword_1000E4650 != -1) {
    swift_once();
  }
  long long v22 = *(_OWORD *)byte_1000EA650;
  long long v23 = *(_OWORD *)&byte_1000EA650[16];
  long long v24 = *(_OWORD *)&byte_1000EA650[32];
  [v12 setTransform:&v22];

  if (v8) {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v13 = *(id *)(v7 + 40);
  }
  uint64_t v14 = v13;
  if (qword_1000E4650 != -1) {
    swift_once();
  }
  long long v22 = *(_OWORD *)byte_1000EA650;
  long long v23 = *(_OWORD *)&byte_1000EA650[16];
  long long v24 = *(_OWORD *)&byte_1000EA650[32];
  [v14 setTransform:&v22];
  swift_bridgeObjectRelease();

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  if (a1)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10002AEB0;
    *(void *)(v16 + 24) = v15;
    uint64_t v17 = v2;
    swift_retain();
    [v17 _removeAllAnimations:1];
    uint64_t v18 = sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
    __chkstk_darwin(v18);
    static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)();
    swift_release();
    return swift_release();
  }
  else
  {
    id v20 = *(void **)&v2[OBJC_IVAR____TtC7Climate19ClimateProgressView_centerSymbolYConstraint];
    uint64_t v21 = v2;
    if (v20) {
      [v20 setConstant:0.0];
    }
    [v2 layoutIfNeeded];
    return swift_release();
  }
}

void sub_100076700()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue;
  uint64_t v2 = OBJC_IVAR____TtC7Climate19ClimateProgressView_range;
  double v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_range);
  if ((*(_DWORD *)(v0 + OBJC_IVAR____TtC7Climate19ClimateProgressView_currentValue) & 0x80000000) != 0)
  {
    id v13 = [v3 maximum];
    [v13 intValue];

    int v14 = *(_DWORD *)(v0 + v1);
    id v15 = [*(id *)(v0 + v2) maximum];
    int v16 = [v15 intValue];

    if (v14 >= 0) {
      int v17 = v16 & ~(v16 >> 31);
    }
    else {
      int v17 = v16 & (v16 >> 31);
    }
    int v18 = *(_DWORD *)(v0 + v1);
    id v19 = [*(id *)(v0 + v2) minimum];
    int v20 = [v19 intValue];

    int v21 = v20 & ~(v20 >> 31);
    if (v18 < 0) {
      int v21 = v20 & (v20 >> 31);
    }
    if (!__OFSUB__(v17, v21)) {
      goto LABEL_15;
    }
  }
  else
  {
    id v4 = [v3 minimum];
    [v4 intValue];

    int v5 = *(_DWORD *)(v0 + v1);
    id v6 = [*(id *)(v0 + v2) maximum];
    int v7 = [v6 intValue];

    if (v5 >= 0) {
      int v8 = v7 & ~(v7 >> 31);
    }
    else {
      int v8 = v7 & (v7 >> 31);
    }
    int v9 = *(_DWORD *)(v0 + v1);
    id v10 = [*(id *)(v0 + v2) minimum];
    int v11 = [v10 intValue];

    int v12 = v11 & ~(v11 >> 31);
    if (v9 < 0) {
      int v12 = v11 & (v11 >> 31);
    }
    if (!__OFSUB__(v8, v12))
    {
LABEL_15:
      uint64_t v22 = sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
      __chkstk_darwin(v22);
      static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

id sub_100076998(char *a1, float a2)
{
  id v4 = *(void **)&a1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_trackView];
  id v5 = *(id *)&a1[OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressViewConstraint];
  [v4 bounds];
  [v5 setConstant:CGRectGetWidth(v8) * a2];

  return [a1 layoutIfNeeded];
}

void sub_100076A38()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate22ClimateBarProgressView_progressViewConstraint);
}

id sub_100076A88()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateBarProgressView();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateBarProgressView()
{
  return self;
}

uint64_t sub_100076B3C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100076B74()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100076BAC()
{
  sub_1000762F4(*(char **)(v0 + 16));
}

id sub_100076BB4()
{
  return sub_100076998(*(char **)(v0 + 16), *(float *)(v0 + 24));
}

id sub_100076BC8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate23ClimateZonePositionView_zone;
  uint64_t v2 = type metadata accessor for ClimateZone();
  uint64_t v3 = v2;
  if (*(void *)(v1 + *(int *)(v2 + 44)))
  {
    int v4 = CAFSeatFan.isVenting.getter();
    int v5 = v4;
    if (!*(void *)(v1 + *(int *)(v3 + 40)))
    {
      if ((v4 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_11:
      CGRect v8 = *(void **)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_seatView);
      uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_images + 8);
      goto LABEL_14;
    }
  }
  else
  {
    if (!*(void *)(v1 + *(int *)(v2 + 40))) {
      goto LABEL_12;
    }
    int v5 = 0;
  }
  char v6 = CAFSeatHeatingCooling.isHeating.getter();
  int v7 = CAFSeatHeatingCooling.isCooling.getter();
  if ((v6 & 1) == 0)
  {
    if ((v5 | v7)) {
      goto LABEL_11;
    }
LABEL_12:
    CGRect v8 = *(void **)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_seatView);
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  CGRect v8 = *(void **)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_seatView);
  int v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_images);
  if (v5) {
    uint64_t v10 = v9[2];
  }
  else {
    uint64_t v10 = *v9;
  }
LABEL_14:

  return [v8 setImage:v10];
}

void sub_100076CE0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_images + 8);
  id v2 = *(id *)(v0 + OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_images + 16);
}

id sub_100076D48()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZoneHeatingCoolingVentingPositionView();
  return [super dealloc];
}

uint64_t sub_100076DEC()
{
  return type metadata accessor for ClimateZoneHeatingCoolingVentingPositionView();
}

uint64_t type metadata accessor for ClimateZoneHeatingCoolingVentingPositionView()
{
  uint64_t result = qword_1000E6F98;
  if (!qword_1000E6F98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100076E40()
{
  return swift_updateClassMetadata2();
}

char *sub_10007722C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  CGRect v8 = v7;
  uint64_t v55 = a3;
  CGRect v56 = a6;
  uint64_t v53 = a5;
  uint64_t v54 = a1;
  uint64_t v58 = a4;
  uint64_t v11 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v57 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = (int *)type metadata accessor for ClimateZone();
  __chkstk_darwin(v14);
  int v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_seatView;
  id v18 = objc_allocWithZone((Class)UIImageView);
  id v19 = v7;
  *(void *)&v8[v17] = [v18 init];
  int v20 = &v19[OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_images];
  int v21 = v53;
  uint64_t v22 = v56;
  *(void *)int v20 = v53;
  *((void *)v20 + 1) = v22;
  *((void *)v20 + 2) = a7;
  id v23 = a7;
  uint64_t v24 = v54;
  id v25 = v21;
  id v26 = v22;

  sub_10000ABC4(v24, (uint64_t)v16);
  id v27 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
  CGRect v56 = (void *)v11;
  v27(v13, v58, v11);
  swift_unknownObjectRetain();
  sub_100087D0C((uint64_t)v16, a2, v55, (uint64_t)v13);
  uint64_t v29 = v28;
  swift_unknownObjectRelease();
  float v30 = *(void **)(v24 + v14[7]);
  uint64_t v31 = v29;
  [v30 registerObserver:v31];
  id v32 = *(void **)(v24 + v14[10]);
  if (v32) {
    [v32 registerObserver:v31];
  }
  int v33 = *(void **)(v24 + v14[11]);
  if (v33) {
    [v33 registerObserver:v31];
  }
  uint64_t v34 = OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_seatView;
  id v35 = *(void **)&v31[OBJC_IVAR____TtC7Climate44ClimateZoneHeatingCoolingVentingPositionView_seatView];
  [v35 setContentMode:1];
  [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v31 insertSubview:v35 belowSubview:*(void *)&v31[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton]];
  int v36 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1000B20F0;
  id v38 = [v35 topAnchor];
  id v39 = [v31 topAnchor];
  id v40 = [v38 constraintEqualToAnchor:v39];

  *(void *)(v37 + 32) = v40;
  id v41 = [*(id *)&v31[v34] bottomAnchor];
  id v42 = [v31 bottomAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42];

  *(void *)(v37 + 40) = v43;
  id v44 = [*(id *)&v31[v34] leadingAnchor];
  id v45 = [v31 leadingAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45];

  *(void *)(v37 + 48) = v46;
  id v47 = [*(id *)&v31[v34] trailingAnchor];
  id v48 = [v31 trailingAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48];

  *(void *)(v37 + 56) = v49;
  uint64_t v59 = v37;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v36 activateConstraints:isa];

  sub_100076BC8();
  (*(void (**)(uint64_t, void *))(v57 + 8))(v58, v56);
  sub_100057C04(v24);
  return v31;
}

char *ClimateStepper.init(primaryButton:axis:range:)(void *a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC7Climate14ClimateStepper_activeConstraints] = &_swiftEmptyArrayStorage;
  int v7 = &v3[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig];
  CGRect v8 = self;
  int v9 = v3;
  id v10 = [v8 clearColor];
  id v11 = [v8 systemWhiteColor];
  *(void *)int v7 = v10;
  *((void *)v7 + 1) = v11;
  *((void *)v7 + 2) = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = &v9[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig];
  id v13 = [v8 clearColor];
  id v14 = [v8 systemWhiteColor];
  *(void *)uint64_t v12 = v13;
  *((void *)v12 + 1) = v14;
  *((void *)v12 + 2) = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = &v9[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
  id v16 = [v8 clearColor];
  id v17 = [v8 systemWhiteColor];
  *(void *)uint64_t v15 = v16;
  *((void *)v15 + 1) = v17;
  *((void *)v15 + 2) = &_swiftEmptyDictionarySingleton;
  v9[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial] = 0;
  id v18 = &v9[OBJC_IVAR____TtC7Climate14ClimateStepper_accessibilityIdentifierModifier];
  *(void *)id v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_backgroundView] = 0;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsWidth] = 0x4040000000000000;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonWidth] = 0x404F000000000000;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsHeight] = 0x4040000000000000;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonHeight] = 0x4040000000000000;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton] = a1;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_axis] = a2;
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_range] = a3;
  id v19 = (objc_class *)type metadata accessor for ClimateStepperButton();
  id v20 = objc_allocWithZone(v19);
  int v21 = a1;
  id v22 = a3;
  id v23 = [v20 init];
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_upButton] = v23;
  id v24 = [objc_allocWithZone(v19) init];
  *(void *)&v9[OBJC_IVAR____TtC7Climate14ClimateStepper_downButton] = v24;

  v147.receiver = v9;
  v147.super_class = (Class)type metadata accessor for ClimateStepper();
  id v25 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v26 = OBJC_IVAR____TtC7Climate14ClimateStepper_upButton;
  uint64_t v27 = *(void *)&v25[OBJC_IVAR____TtC7Climate14ClimateStepper_upButton];
  uint64_t v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v28;
  *(void *)(v29 + 24) = v22;
  float v30 = (void *)(v27 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v31 = *(void *)(v27 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  *float v30 = sub_10007B770;
  v30[1] = v29;
  id v32 = v22;
  int v33 = v25;
  sub_100005690(v31);
  uint64_t v145 = OBJC_IVAR____TtC7Climate14ClimateStepper_downButton;
  uint64_t v34 = *(void *)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_downButton];
  uint64_t v35 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v35;
  *(void *)(v36 + 24) = v32;
  uint64_t v37 = (void *)(v34 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v38 = *(void *)(v34 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  *uint64_t v37 = sub_10007B8E8;
  v37[1] = v36;
  id v136 = v32;
  sub_100005690(v38);
  if (qword_1000E4700 != -1) {
    swift_once();
  }
  id v39 = [self configurationWithFont:qword_1000EA828 scale:2];
  uint64_t v143 = v26;
  id v40 = *(unsigned char **)&v25[v26];
  int v41 = v40[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v40[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v41 != 1)
  {
    id v42 = *(void **)&v40[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    id v43 = v40;
    [v42 removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  id v44 = *(unsigned char **)&v33[v145];
  char v45 = v44[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v44[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if ((v45 & 1) == 0)
  {
    id v46 = *(void **)&v44[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    id v47 = v44;
    [v46 removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  char v48 = *((unsigned char *)v21 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial);
  *((unsigned char *)v21 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial) = 1;
  if ((v48 & 1) == 0)
  {
    id v49 = [*(id *)((char *)v21 + OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView) removeFromSuperview];
    (*(void (**)(id))((swift_isaMask & *v21) + 0x230))(v49);
  }
  id v144 = v21;
  ClimateStepper.setupBackgroundView()();
  sub_10007AEA4();
  uint64_t v50 = *(char **)&v25[v26];
  *(_OWORD *)&v50[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier] = xmmword_1000B4180;
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  sub_10007AB50();

  uint64_t v52 = *(void *)&v25[v26];
  uint64_t v53 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v54 = (uint64_t *)(v52 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v55 = *v54;
  *uint64_t v54 = (uint64_t)sub_10007BDC8;
  v54[1] = v53;
  sub_100005690(v55);
  id v142 = v25;
  CGRect v56 = (char *)*(id *)&v25[v26];
  id v57 = v39;
  id v58 = ClimateButton.imageSymbolConfiguration.getter();
  uint64_t v59 = *(void **)&v56[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v56[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v57;
  id v60 = v57;

  id v61 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  LOBYTE(v59) = static NSObject.== infix(_:_:)();

  if ((v59 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

  uint64_t v62 = *(char **)&v33[v145];
  *(_OWORD *)&v62[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier] = xmmword_1000B4190;
  uint64_t v63 = v62;
  swift_bridgeObjectRelease();
  sub_10007AB50();

  uint64_t v64 = *(void *)&v33[v145];
  uint64_t v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v66 = (uint64_t *)(v64 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v67 = *v66;
  *id v66 = (uint64_t)sub_10007BDEC;
  v66[1] = v65;
  sub_100005690(v67);
  uint64_t v68 = *(void **)&v33[v145];
  id v69 = v60;
  uint64_t v70 = v68;
  id v71 = ClimateButton.imageSymbolConfiguration.getter();
  uint64_t v72 = *(void **)&v70[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v70[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v57;
  id v73 = v69;

  id v74 = ClimateButton.imageSymbolConfiguration.getter();
  LOBYTE(v72) = static NSObject.== infix(_:_:)();

  if ((v72 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
  uint64_t v135 = v73;

  [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v75 = [v33 layer];
  [v75 setCornerCurve:kCACornerCurveContinuous];

  id v76 = [v33 layer];
  [v76 setCornerRadius:12.0];

  [v33 setClipsToBounds:1];
  [v33 addSubview:v21];
  uint64_t v77 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
  id v78 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8];
  id v79 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16];
  uint64_t v80 = (void **)((char *)v21 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v82 = *(void **)((char *)v21 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v81 = *(void **)((char *)v144 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v139 = *(void *)((char *)v144 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  char *v80 = v77;
  v80[1] = v78;
  v80[2] = v79;
  id v83 = v77;
  id v84 = v78;
  swift_bridgeObjectRetain_n();
  id v137 = v83;
  id v85 = v84;
  id v87 = *v80;
  uint64_t v86 = v80[1];
  uint64_t v88 = (uint64_t)v80[2];
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v89 = v87;
  id v90 = v86;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v88, v139);
    char v92 = v91;
    swift_bridgeObjectRelease();

    id v93 = v144;
    if (v92) {
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

    id v93 = v144;
  }
  (*(void (**)(void))((swift_isaMask & *v93) + 0x230))();
LABEL_19:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  [v93 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v94 = *(char **)&v33[v145];
  [v33 addSubview:v94];
  [v94 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v95 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig];
  id v96 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig + 8];
  id v97 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig + 16];
  id v98 = (void **)&v94[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  id v99 = *(void **)&v94[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  uint64_t v138 = *(void *)&v94[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
  uint64_t v140 = *(void **)&v94[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  *id v98 = v95;
  v98[1] = v96;
  v98[2] = v97;
  id v100 = v95;
  id v101 = v96;
  swift_bridgeObjectRetain_n();
  id v102 = v100;
  id v103 = v101;
  id v104 = v94;
  uint64_t v105 = *v98;
  uint64_t v106 = v98[1];
  uint64_t v107 = (uint64_t)v98[2];
  id v108 = v105;
  id v109 = v106;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v107, v138);
    char v111 = v110;
    swift_bridgeObjectRelease();

    if (v111) {
      goto LABEL_25;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  ClimateButton.refreshColorConfig()();
LABEL_25:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v112 = [*(id *)&v33[v145] layer];
  [v112 setHitTestsAsOpaque:1];

  id v113 = [*(id *)&v33[v145] layer];
  [v113 setCornerRadius:0.0];

  uint64_t v114 = *(char **)&v142[v143];
  [v33 addSubview:v114];
  [v114 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v115 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig];
  uint64_t v116 = *(void **)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig + 8];
  uint64_t v117 = *(void *)&v33[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig + 16];
  uint64_t v118 = &v114[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  uint64_t v119 = *(void **)&v114[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  uint64_t v146 = *(void **)&v114[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  uint64_t v141 = *(void *)&v114[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
  *(void *)uint64_t v118 = v115;
  *((void *)v118 + 1) = v116;
  *((void *)v118 + 2) = v117;
  id v120 = v115;
  id v121 = v116;
  swift_bridgeObjectRetain_n();
  id v122 = v120;
  id v123 = v121;
  objc_super v124 = v114;
  objc_super v125 = (void *)*((void *)v118 + 1);
  uint64_t v126 = *((void *)v118 + 2);
  id v127 = *(id *)v118;
  id v128 = v125;
  swift_bridgeObjectRetain();
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v126, v141);
    char v130 = v129;
    swift_bridgeObjectRelease();

    if (v130) {
      goto LABEL_31;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  ClimateButton.refreshColorConfig()();
LABEL_31:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v131 = [*(id *)&v142[v143] layer];
  [v131 setCornerRadius:0.0];

  id v132 = [*(id *)&v142[v143] layer];
  [v132 setHitTestsAsOpaque:1];

  id v133 = [objc_allocWithZone((Class)UIPanGestureRecognizer) initWithTarget:v33 action:"longPressTriggered:"];
  [v33 addGestureRecognizer:v133];
  ClimateStepper.updateConstraintsAndArrows()();

  return v33;
}

uint64_t ClimateStepper.popoverDelegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ClimateStepper.popoverDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  sub_10007B220();
  return swift_unknownObjectRelease();
}

void (*ClimateStepper.popoverDelegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  _OWORD v3[3] = Strong;
  v3[4] = v7;
  return sub_10007856C;
}

void sub_10007856C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    sub_10007B220();
  }

  free(v3);
}

id ClimateStepper.primaryButton.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void ClimateStepper.primaryButton.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*ClimateStepper.primaryButton.modify())()
{
  return j__swift_endAccess;
}

uint64_t ClimateStepper.axis.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis;
  swift_beginAccess();
  return *(void *)v1;
}

void ClimateStepper.axis.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  if (v4 != a1) {
    ClimateStepper.updateConstraintsAndArrows()();
  }
}

void (*ClimateStepper.axis.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7Climate14ClimateStepper_axis;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess();
  _OWORD v3[3] = *v5;
  return sub_100078830;
}

void sub_100078830(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(v4 + v3);
  *(void *)(v4 + v3) = v2;
  if (v2 != v5) {
    ClimateStepper.updateConstraintsAndArrows()();
  }

  free(v1);
}

Swift::Void __swiftcall ClimateStepper.updatePresentation()()
{
  uint64_t v1 = v0;
  char v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140))();
  uint64_t v3 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
  if ((v2 & 0x18) != 0)
  {
    [v3 setHidden:1];
    uint64_t v4 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
    [v4 setHidden:1];
  }
  else
  {
    [v3 setHidden:0];
    uint64_t v4 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
    [v4 setHidden:0];
  }
  uint64_t v5 = (id *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  char v6 = *(void (**)(void))((swift_isaMask & *(void *)*v5) + 0x220);
  id v7 = *v5;
  v6();

  sub_10009F8A4();
  CGRect v8 = *(uint64_t (**)(uint64_t))&v4[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (v8)
  {
    uint64_t v9 = swift_retain();
    char v10 = v8(v9);
    sub_100005690((uint64_t)v8);
    if ((v10 & 0x10) != 0)
    {
      BOOL v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    char v10 = 0;
  }
  BOOL v11 = (v10 & 8) == 0;
LABEL_9:
  [v4 setEnabled:v11];
  ClimateButton.refreshColorConfig()();
  sub_10009F8A4();
  uint64_t v12 = *(uint64_t (**)(uint64_t))&v3[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (!v12)
  {
    char v14 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = swift_retain();
  char v14 = v12(v13);
  sub_100005690((uint64_t)v12);
  if ((v14 & 0x10) == 0)
  {
LABEL_13:
    BOOL v15 = (v14 & 8) == 0;
    goto LABEL_14;
  }
  BOOL v15 = 0;
LABEL_14:
  [v3 setEnabled:v15];
  ClimateButton.refreshColorConfig()();
  uint64_t v16 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1E8))();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x1F0))(v16);
}

void ClimateStepper.step(_:)()
{
}

Swift::Void __swiftcall ClimateStepper.refreshColorConfig()()
{
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial))
  {
    uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8);
    uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16);
    uint64_t v3 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x140);
    id v4 = *(id *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig);
    id v5 = v1;
    uint64_t v6 = swift_bridgeObjectRetain();
    char v7 = v3(v6);
    id v8 = sub_10006511C(v7, v4, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v8 = [self clearColor];
  }
  [v0 setBackgroundColor:v8];
}

double ClimateStepper.arrowsWidth.getter()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsWidth);
}

double ClimateStepper.primaryButtonWidth.getter()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonWidth);
}

double ClimateStepper.arrowsHeight.getter()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsHeight);
}

void ClimateStepper.arrowsHeight.setter(double a1)
{
}

double ClimateStepper.primaryButtonHeight.getter()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonHeight);
}

void ClimateStepper.primaryButtonHeight.setter(double a1)
{
}

void sub_100078D38(void *a1, double a2)
{
  double v3 = *(double *)(v2 + *a1);
  *(double *)(v2 + *a1) = a2;
  if (v3 != a2)
  {
    id v4 = (void *)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
    swift_beginAccess();
    if (*v4 == 1) {
      ClimateStepper.updateConstraintsAndArrows()();
    }
  }
}

id ClimateStepper.longPressTriggered(_:)(void *a1)
{
  uint64_t v2 = v1;
  if ([a1 state] == (id)1)
  {
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    id v4 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v5 = v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
    swift_beginAccess();
    id result = (id)swift_unknownObjectWeakLoadStrong();
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(1, ObjectType, v7);
    return (id)swift_unknownObjectRelease();
  }
  id result = [a1 state];
  if (result == (id)3)
  {
    static os_log_type_t.default.getter();
    sub_100007310(0, (unint64_t *)&qword_1000E4F00);
    uint64_t v9 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v10 = v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v11 = *(void *)(v10 + 8);
      uint64_t v12 = swift_getObjectType();
      (*(void (**)(void, uint64_t, uint64_t))(v11 + 8))(0, v12, v11);
      swift_unknownObjectRelease();
    }
    uint64_t v13 = *(unsigned char **)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
    uint64_t v14 = OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted;
    int v15 = v13[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted];
    v13[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = 0;
    [v13 setHighlighted:0];
    uint64_t v16 = v13[v14];
    if (v15 != v16)
    {
      id v17 = &v13[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate];
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v18 = *((void *)v17 + 1);
        uint64_t v19 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 8))(v16, v19, v18);
        swift_unknownObjectRelease();
      }
    }
    id v20 = *(unsigned char **)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
    uint64_t v21 = OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted;
    int v22 = v20[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted];
    v20[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = 0;
    id result = [v20 setHighlighted:0];
    uint64_t v23 = v20[v21];
    if (v22 != v23)
    {
      id v24 = &v20[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate];
      id result = (id)swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        uint64_t v25 = *((void *)v24 + 1);
        uint64_t v26 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 8))(v23, v26, v25);
        return (id)swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

Swift::Void __swiftcall ClimateStepper.updateConstraintsAndArrows()()
{
  uint64_t v1 = self;
  uint64_t v2 = (void *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_activeConstraints);
  swift_beginAccess();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 deactivateConstraints:isa];

  void *v2 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  id v4 = (void *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
  swift_beginAccess();
  uint64_t v5 = *v4;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v86 = v4;
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B41A0;
  if (v5)
  {
    uint64_t v7 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
    id v8 = [v7 topAnchor];
    id v9 = [v0 topAnchor];
    id v10 = [v8 constraintEqualToAnchor:v9];

    *(void *)(inited + 32) = v10;
    id v11 = [v7 widthAnchor];
    id v12 = [v0 widthAnchor];
    id v13 = [v11 constraintEqualToAnchor:v12];

    *(void *)(inited + 40) = v13;
    id v14 = [v7 heightAnchor];
    id v84 = *(void (**)(void))((swift_isaMask & *v0) + 0x250);
    v84();
    id v15 = [v14 constraintEqualToConstant:];

    *(void *)(inited + 48) = v15;
    id v16 = [v7 centerXAnchor];
    id v17 = [v0 centerXAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17];

    *(void *)(inited + 56) = v18;
    uint64_t v19 = (id *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
    swift_beginAccess();
    id v20 = [*v19 widthAnchor];
    id v21 = [v0 widthAnchor];
    id v22 = [v20 constraintEqualToAnchor:v21];

    *(void *)(inited + 64) = v22;
    id v23 = [*v19 heightAnchor];
    (*(void (**)(void))((swift_isaMask & *v0) + 0x268))();
    id v24 = [v23 constraintEqualToConstant:];

    *(void *)(inited + 72) = v24;
    id v25 = [*v19 centerYAnchor];
    id v26 = [v0 centerYAnchor];
    id v27 = [v25 constraintEqualToAnchor:v26];

    *(void *)(inited + 80) = v27;
    id v28 = [*v19 centerXAnchor];
    id v29 = [v0 centerXAnchor];
    id v30 = [v28 constraintEqualToAnchor:v29];

    *(void *)(inited + 88) = v30;
    uint64_t v31 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
    id v32 = [v31 widthAnchor];
    id v33 = [v0 widthAnchor];
    id v34 = [v32 constraintEqualToAnchor:v33];

    *(void *)(inited + 96) = v34;
    id v35 = [v31 heightAnchor];
    v84();
    [v35 constraintEqualToConstant:];

    *(void *)(inited + 104) = v36;
    id v37 = [v31 bottomAnchor];
    id v38 = [v0 bottomAnchor];
    id v39 = [v37 constraintEqualToAnchor:v38];

    *(void *)(inited + 112) = v39;
    id v40 = [v31 centerXAnchor];
    id v41 = [v0 centerXAnchor];
  }
  else
  {
    uint64_t v31 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
    id v42 = [v31 leadingAnchor];
    id v43 = [v0 leadingAnchor];
    id v44 = [v42 constraintEqualToAnchor:v43];

    *(void *)(inited + 32) = v44;
    id v45 = [v31 heightAnchor];
    id v46 = [v0 heightAnchor];
    id v47 = [v45 constraintEqualToAnchor:v46];

    *(void *)(inited + 40) = v47;
    id v48 = [v31 widthAnchor];
    id v85 = *(void (**)(void))((swift_isaMask & *v0) + 0x220);
    v85();
    id v49 = [v48 constraintEqualToConstant:];

    *(void *)(inited + 48) = v49;
    id v50 = [v31 centerYAnchor];
    id v51 = [v0 centerYAnchor];
    id v52 = [v50 constraintEqualToAnchor:v51];

    *(void *)(inited + 56) = v52;
    uint64_t v53 = (id *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
    swift_beginAccess();
    id v54 = [*v53 widthAnchor];
    (*(void (**)(void))((swift_isaMask & *v0) + 0x238))();
    id v55 = [v54 constraintEqualToConstant:];

    *(void *)(inited + 64) = v55;
    id v56 = [*v53 heightAnchor];
    id v57 = [v0 heightAnchor];
    id v58 = [v56 constraintEqualToAnchor:v57];

    *(void *)(inited + 72) = v58;
    id v59 = [*v53 centerYAnchor];
    id v60 = [v0 centerYAnchor];
    id v61 = [v59 constraintEqualToAnchor:v60];

    *(void *)(inited + 80) = v61;
    id v62 = [*v53 centerXAnchor];
    id v63 = [v0 centerXAnchor];
    id v64 = [v62 constraintEqualToAnchor:v63];

    *(void *)(inited + 88) = v64;
    uint64_t v7 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
    id v65 = [v7 trailingAnchor];
    id v66 = [v0 trailingAnchor];
    id v67 = [v65 constraintEqualToAnchor:v66];

    *(void *)(inited + 96) = v67;
    id v68 = [v7 widthAnchor];
    v85();
    id v69 = [v68 constraintEqualToConstant:];

    *(void *)(inited + 104) = v69;
    id v70 = [v7 heightAnchor];
    id v71 = [v0 heightAnchor];
    id v72 = [v70 constraintEqualToAnchor:v71];

    *(void *)(inited + 112) = v72;
    id v40 = [v7 centerYAnchor];
    id v41 = [v0 centerYAnchor];
  }
  id v73 = [v40 constraintEqualToAnchor:v41];

  *(void *)(inited + 120) = v73;
  specialized Array._endMutation()();
  swift_beginAccess();
  sub_100097570(inited);
  swift_endAccess();
  swift_bridgeObjectRetain();
  Class v74 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 activateConstraints:v74];

  if (*v86 == 1) {
    unint64_t v75 = 0xEA00000000007075;
  }
  else {
    unint64_t v75 = 0xEF64726177726F66;
  }
  id v76 = &v7[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v77 = *(void *)v76;
  uint64_t v78 = *((void *)v76 + 1);
  *(void *)id v76 = 0x2E6E6F7276656863;
  *((void *)v76 + 1) = v75;
  if (!v78 || (v77 != 0x2E6E6F7276656863 || v75 != v78) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
  swift_bridgeObjectRelease();
  if (*v86 == 1) {
    unint64_t v79 = 0x2E6E6F7276656863;
  }
  else {
    unint64_t v79 = 0xD000000000000010;
  }
  if (*v86 == 1) {
    unint64_t v80 = 0xEC0000006E776F64;
  }
  else {
    unint64_t v80 = 0x80000001000B82B0;
  }
  uint64_t v81 = (unint64_t *)&v31[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  unint64_t v82 = *v81;
  unint64_t v83 = v81[1];
  *uint64_t v81 = v79;
  v81[1] = v80;
  if (!v83 || (v79 != v82 || v80 != v83) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
  swift_bridgeObjectRelease();
}

uint64_t ClimateStepper.constraintsForStepButtons(_:direction:)(void *a1, char a2)
{
  uint64_t v5 = (void *)((char *)v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
  swift_beginAccess();
  if (*v5)
  {
    if (a2)
    {
      sub_100006730((uint64_t *)&unk_1000E4F10);
      if (a2 == 1)
      {
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_1000B20F0;
        id v7 = [a1 widthAnchor];
        id v8 = [v2 widthAnchor];
        id v9 = [v7 constraintEqualToAnchor:v8];

        *(void *)(v6 + 32) = v9;
        id v10 = [a1 heightAnchor];
        (*(void (**)(void))((swift_isaMask & *v2) + 0x250))();
        id v11 = [v10 constraintEqualToConstant:];

        *(void *)(v6 + 40) = v11;
        id v12 = [a1 bottomAnchor];
        id v13 = [v2 bottomAnchor];
      }
      else
      {
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_1000B20F0;
        id v34 = [a1 widthAnchor];
        id v35 = [v2 widthAnchor];
        id v36 = [v34 constraintEqualToAnchor:v35];

        *(void *)(v6 + 32) = v36;
        id v37 = [a1 heightAnchor];
        (*(void (**)(void))((swift_isaMask & *v2) + 0x268))();
        id v38 = [v37 constraintEqualToConstant:];

        *(void *)(v6 + 40) = v38;
        id v12 = [a1 centerYAnchor];
        id v13 = [v2 centerYAnchor];
      }
      id v14 = [v12 constraintEqualToAnchor:v13];

      *(void *)(v6 + 48) = v14;
      id v15 = [a1 centerXAnchor];
      id v16 = [v2 centerXAnchor];
      id v17 = [v15 constraintEqualToAnchor:v16];
    }
    else
    {
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1000B20F0;
      id v26 = [a1 topAnchor];
      id v27 = [v2 topAnchor];
      id v28 = [v26 constraintEqualToAnchor:v27];

      *(void *)(v6 + 32) = v28;
      id v29 = [a1 widthAnchor];
      id v30 = [v2 widthAnchor];
      id v31 = [v29 constraintEqualToAnchor:v30];

      *(void *)(v6 + 40) = v31;
      id v32 = [a1 heightAnchor];
      (*(void (**)(void))((swift_isaMask & *v2) + 0x250))();
      id v33 = [v32 constraintEqualToConstant:];

      *(void *)(v6 + 48) = v33;
      id v15 = [a1 centerXAnchor];
      id v16 = [v2 centerXAnchor];
      id v17 = [v15 constraintEqualToAnchor:v16];
    }
  }
  else if (a2)
  {
    sub_100006730((uint64_t *)&unk_1000E4F10);
    if (a2 == 1)
    {
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1000B20F0;
      id v18 = [a1 leadingAnchor];
      id v19 = [v2 leadingAnchor];
      id v20 = [v18 constraintEqualToAnchor:v19];

      *(void *)(v6 + 32) = v20;
      id v21 = [a1 heightAnchor];
      id v22 = [v2 heightAnchor];
      id v23 = [v21 constraintEqualToAnchor:v22];

      *(void *)(v6 + 40) = v23;
      id v24 = [a1 widthAnchor];
      (*(void (**)(void))((swift_isaMask & *v2) + 0x220))();
      id v25 = [v24 constraintEqualToConstant:];

      *(void *)(v6 + 48) = v25;
      id v15 = [a1 centerYAnchor];
      id v16 = [v2 centerYAnchor];
    }
    else
    {
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1000B20F0;
      id v47 = [a1 widthAnchor];
      (*(void (**)(void))((swift_isaMask & *v2) + 0x238))();
      id v48 = [v47 constraintEqualToConstant:];

      *(void *)(v6 + 32) = v48;
      id v49 = [a1 heightAnchor];
      id v50 = [v2 heightAnchor];
      id v51 = [v49 constraintEqualToAnchor:v50];

      *(void *)(v6 + 40) = v51;
      id v52 = [a1 centerYAnchor];
      id v53 = [v2 centerYAnchor];
      id v54 = [v52 constraintEqualToAnchor:v53];

      *(void *)(v6 + 48) = v54;
      id v15 = [a1 centerXAnchor];
      id v16 = [v2 centerXAnchor];
    }
    id v17 = [v15 constraintEqualToAnchor:v16];
  }
  else
  {
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1000B20F0;
    id v39 = [a1 trailingAnchor];
    id v40 = [v2 trailingAnchor];
    id v41 = [v39 constraintEqualToAnchor:v40];

    *(void *)(v6 + 32) = v41;
    id v42 = [a1 widthAnchor];
    (*(void (**)(void))((swift_isaMask & *v2) + 0x220))();
    id v43 = [v42 constraintEqualToConstant:];

    *(void *)(v6 + 40) = v43;
    id v44 = [a1 heightAnchor];
    id v45 = [v2 heightAnchor];
    id v46 = [v44 constraintEqualToAnchor:v45];

    *(void *)(v6 + 48) = v46;
    id v15 = [a1 centerYAnchor];
    id v16 = [v2 centerYAnchor];
    id v17 = [v15 constraintEqualToAnchor:v16];
  }
  id v55 = v17;

  *(void *)(v6 + 56) = v55;
  specialized Array._endMutation()();
  return v6;
}

void ClimateStepper.setupBackgroundView()()
{
  uint64_t v1 = v0;
  id v2 = [self materialViewWithRecipe:4];
  if (v2)
  {
    double v3 = v2;
    [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v0 insertSubview:v3 atIndex:0];
    id v4 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1000B20F0;
    id v6 = [v3 leadingAnchor];
    id v7 = [v1 leadingAnchor];
    id v8 = [v6 constraintEqualToAnchor:v7];

    *(void *)(v5 + 32) = v8;
    id v9 = [v3 trailingAnchor];
    id v10 = [v1 trailingAnchor];
    id v11 = [v9 constraintEqualToAnchor:v10];

    *(void *)(v5 + 40) = v11;
    id v12 = [v3 topAnchor];
    id v13 = [v1 topAnchor];
    id v14 = [v12 constraintEqualToAnchor:v13];

    *(void *)(v5 + 48) = v14;
    id v15 = [v3 bottomAnchor];
    id v16 = [v1 bottomAnchor];
    id v17 = [v15 constraintEqualToAnchor:v16];

    *(void *)(v5 + 56) = v17;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 activateConstraints:isa];

    id v19 = *(void **)&v1[OBJC_IVAR____TtC7Climate14ClimateStepper_backgroundView];
    *(void *)&v1[OBJC_IVAR____TtC7Climate14ClimateStepper_backgroundView] = v3;
  }
}

uint64_t type metadata accessor for ClimateStepper()
{
  return self;
}

uint64_t sub_10007AB18()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10007AB50()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730((uint64_t *)&unk_1000E70D0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000B2000;
  v23[0] = swift_getObjectType();
  sub_100006730(&qword_1000E67E0);
  *(void *)(v9 + 32) = String.init<A>(describing:)();
  *(void *)(v9 + 40) = v10;
  uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier + 8];
  if (v11)
  {
    uint64_t v12 = *(void *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityIdentifierModifier];
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)sub_1000A28D8((char *)1, 2, 1, (char *)v9);
    *(void *)(v9 + 16) = 2;
    *(void *)(v9 + 48) = v12;
    *(void *)(v9 + 56) = v11;
  }
  uint64_t v24 = type metadata accessor for ClimateButton();
  id v25 = &off_1000CBEC8;
  v23[0] = v1;
  id v13 = *(void (**)(void))((swift_isaMask & *(void *)*sub_100057CC8(v23, v24)) + 0x268);
  id v14 = v1;
  v13();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000A404((uint64_t)v4, (uint64_t *)&unk_1000E7C60);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v15 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v17 = v16;
    unint64_t v19 = *(void *)(v9 + 16);
    unint64_t v18 = *(void *)(v9 + 24);
    if (v19 >= v18 >> 1) {
      uint64_t v9 = (uint64_t)sub_1000A28D8((char *)(v18 > 1), v19 + 1, 1, (char *)v9);
    }
    *(void *)(v9 + 16) = v19 + 1;
    uint64_t v20 = v9 + 16 * v19;
    *(void *)(v20 + 32) = v15;
    *(void *)(v20 + 40) = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_10000AC28((uint64_t)v23);
  v23[0] = v9;
  sub_100006730((uint64_t *)&unk_1000E70E0);
  sub_10007D4F0();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setAccessibilityIdentifier:v21];
}

void sub_10007AEA4()
{
  uint64_t v1 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006730((uint64_t *)&unk_1000E70D0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000B2000;
  v29[0] = swift_getObjectType();
  sub_100006730(qword_1000E70F0);
  *(void *)(v8 + 32) = String.init<A>(describing:)();
  *(void *)(v8 + 40) = v9;
  uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_accessibilityIdentifierModifier + 8];
  if (v10)
  {
    uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_accessibilityIdentifierModifier];
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)sub_1000A28D8((char *)1, 2, 1, (char *)v8);
    *(void *)(v8 + 16) = 2;
    *(void *)(v8 + 48) = v11;
    *(void *)(v8 + 56) = v10;
  }
  id v28 = v0;
  type metadata accessor for ClimateStepper();
  uint64_t v12 = v0;
  sub_100006730((uint64_t *)&unk_1000E6780);
  if (swift_dynamicCast())
  {
    sub_10005DF6C(v26, (uint64_t)v29);
    uint64_t v13 = v30;
    uint64_t v14 = v31;
    sub_100057CC8(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_10000A404((uint64_t)v3, (uint64_t *)&unk_1000E7C60);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
      uint64_t v15 = CAUVehicleLayoutKey.rawValue.getter();
      uint64_t v17 = v16;
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v18 = *(void *)(v8 + 24);
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        unint64_t v25 = v19 + 1;
        id v23 = sub_1000A28D8((char *)(v18 > 1), v19 + 1, 1, (char *)v8);
        unint64_t v20 = v25;
        uint64_t v8 = (uint64_t)v23;
      }
      *(void *)(v8 + 16) = v20;
      uint64_t v21 = v8 + 16 * v19;
      *(void *)(v21 + 32) = v15;
      *(void *)(v21 + 40) = v17;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    sub_10000AC28((uint64_t)v29);
  }
  else
  {
    uint64_t v27 = 0;
    memset(v26, 0, sizeof(v26));
    sub_10000A404((uint64_t)v26, (uint64_t *)&unk_1000E6770);
  }
  v29[0] = v8;
  sub_100006730((uint64_t *)&unk_1000E70E0);
  sub_10007D4F0();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 setAccessibilityIdentifier:v22];
}

double ClimateStepper.characteristicValue.getter()
{
  return 0.0;
}

uint64_t sub_10007B220()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
  swift_beginAccess();
  swift_unknownObjectWeakLoadStrong();
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = v1 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = v3;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
  swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = v5 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
  swift_beginAccess();
  *(void *)(v7 + 8) = v6;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  uint64_t v9 = *v8;
  swift_unknownObjectWeakLoadStrong();
  uint64_t v10 = *(void *)(v2 + 8);
  uint64_t v11 = v9 + OBJC_IVAR____TtC7Climate13ClimateButton_popoverDelegate;
  swift_beginAccess();
  *(void *)(v11 + 8) = v10;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

id ClimateStepper.downButton.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
}

id ClimateStepper.upButton.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
}

uint64_t ClimateStepper.presentationStates.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *(void *)*v1) + 0x128);
  id v3 = *v1;
  uint64_t v4 = v2();

  return v4;
}

uint64_t sub_10007B450()
{
  return sub_10007B478(&OBJC_IVAR____TtC7Climate14ClimateStepper_downButton, &OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig);
}

uint64_t sub_10007B464()
{
  return sub_10007B478(&OBJC_IVAR____TtC7Climate14ClimateStepper_upButton, &OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig);
}

uint64_t sub_10007B478(void *a1, void *a2)
{
  uint64_t v3 = v2 + *a2;
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v2 + *a1) + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  uint64_t v8 = *(void **)v7;
  NSString v22 = *(void **)(v7 + 8);
  uint64_t v9 = *(void *)(v7 + 16);
  *(void *)uint64_t v7 = *(void *)v3;
  *(void *)(v7 + 8) = v5;
  *(void *)(v7 + 16) = v6;
  id v10 = v4;
  id v11 = v5;
  swift_bridgeObjectRetain_n();
  id v21 = v10;
  id v12 = v11;
  uint64_t v14 = *(void **)v7;
  uint64_t v13 = *(void **)(v7 + 8);
  uint64_t v15 = *(void *)(v7 + 16);
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v16 = v14;
  id v17 = v13;
  swift_bridgeObjectRetain();
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  sub_10007C1D0(v15, v9);
  char v19 = v18;
  swift_bridgeObjectRelease();

  if ((v19 & 1) == 0) {
LABEL_6:
  }
    ClimateButton.refreshColorConfig()();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *ClimateStepper.__allocating_init(primaryButton:axis:range:)(void *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return ClimateStepper.init(primaryButton:axis:range:)(a1, a2, a3);
}

void *sub_10007B640()
{
  swift_beginAccess();
  id result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = (*(uint64_t (**)(void))((swift_isaMask & *result) + 0x140))();
    float v3 = (*(float (**)(void))((swift_isaMask & *v1) + 0xF0))();
    CAFRange.maximumValue<A>()();

    BOOL v4 = (v2 & 2) == 0;
    if (v5 > v3) {
      BOOL v4 = 0;
    }
    return (void *)_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2 & 1, (v2 & 2) >> 1, (v2 & 4) != 0, (v2 & 8) != 0, ((v2 & 0x10) != 0) | v4);
  }
  return result;
}

void *sub_10007B770()
{
  return sub_10007B640();
}

void *sub_10007B778()
{
  swift_beginAccess();
  id result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    char v2 = (*(uint64_t (**)(void))((swift_isaMask & *result) + 0x140))();
    float v3 = (*(float (**)(void))((swift_isaMask & *v1) + 0xF0))();
    CAFRange.minimumValue<A>()();

    BOOL v4 = (v2 & 2) == 0;
    if (v3 > v5) {
      BOOL v4 = 0;
    }
    return (void *)_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2 & 1, (v2 & 2) >> 1, (v2 & 4) != 0, (v2 & 8) != 0, ((v2 & 0x10) != 0) | v4);
  }
  return result;
}

uint64_t sub_10007B8A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10007B8E8()
{
  return sub_10007B778();
}

uint64_t sub_10007B8F0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = type metadata accessor for CAFRange.StepDirection();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v9 = (void *)result;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *a3, v4);
    (*(void (**)(char *))((swift_isaMask & *v9) + 0x150))(v7);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

Swift::Void __swiftcall ClimateStepper.layoutSubviews()()
{
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ClimateStepper();
  [super layoutSubviews];
  uint64_t v1 = &v0[OBJC_IVAR____TtC7Climate14ClimateStepper_axis];
  swift_beginAccess();
  if (*(void *)v1 == 1)
  {
    char v2 = *(void **)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_upButton];
    [v2 bounds];
    CGFloat v3 = CGRectGetHeight(v5) + -44.0;
    [v2 setImageEdgeInsets:0.0, 0.0, v3, 0.0];
    [*(id *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_downButton] setImageEdgeInsets:v3, 0.0, 0.0, 0.0];
  }
}

void ClimateStepper.init(frame:)()
{
}

id ClimateStepper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateStepper();
  return [super dealloc];
}

uint64_t sub_10007BDC8(uint64_t a1)
{
  return sub_10007B8F0(a1, v1, (unsigned int *)&enum case for CAFRange.StepDirection.up(_:));
}

uint64_t sub_10007BDEC(uint64_t a1)
{
  return sub_10007B8F0(a1, v1, (unsigned int *)&enum case for CAFRange.StepDirection.down(_:));
}

void sub_10007BE10(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v40 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v41 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = v11 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v14 >= v41) {
      return;
    }
    unint64_t v15 = *(void *)(v40 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v41) {
        return;
      }
      unint64_t v15 = *(void *)(v40 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v41) {
          return;
        }
        unint64_t v15 = *(void *)(v40 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v12 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_24:
    Swift::UInt v17 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    uint64_t v18 = *(void *)(v3 + 56) + 32 * v13;
    char v19 = *(void **)v18;
    unint64_t v20 = *(void **)(v18 + 8);
    id v21 = *(void **)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    unint64_t v23 = sub_10007C484(v17);
    if ((v24 & 1) == 0) {
      return;
    }
    unint64_t v44 = v12;
    int64_t v45 = v4;
    uint64_t v25 = *(void *)(v2 + 56) + 32 * v23;
    id v26 = *(void **)v25;
    uint64_t v27 = *(void **)(v25 + 8);
    id v29 = *(void **)(v25 + 16);
    uint64_t v28 = *(void *)(v25 + 24);
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v46 = v29;
    swift_bridgeObjectRetain();
    id v30 = v19;
    id v49 = v20;
    id v47 = v21;
    uint64_t v48 = v22;
    swift_bridgeObjectRetain();
    id v31 = v26;
    id v32 = v27;
    id v33 = v31;
    if ((static NSObject.== infix(_:_:)() & 1) == 0)
    {
LABEL_36:

      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    if (v27)
    {
      if (!v20) {
        goto LABEL_36;
      }
      sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
      id v34 = v32;
      id v35 = v49;
      char v36 = static NSObject.== infix(_:_:)();

      if ((v36 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        id v32 = v34;
LABEL_38:
        uint64_t v8 = v47;
        goto LABEL_39;
      }
    }
    else if (v20)
    {

      swift_bridgeObjectRelease();
      id v32 = v46;
      goto LABEL_38;
    }
    if (v29)
    {
      if (!v21) {
        goto LABEL_36;
      }
      sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
      uint64_t v9 = v46;
      id v37 = v46;
      uint64_t v8 = v47;
      id v38 = v47;
      char v39 = static NSObject.== infix(_:_:)();

      if ((v39 & 1) == 0)
      {

        swift_bridgeObjectRelease();
LABEL_39:

        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v9 = v46;
      uint64_t v8 = v47;
      if (v21)
      {

        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
    }
    char v10 = sub_10007BE10(v28, v48);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v3 = a1;
    uint64_t v2 = a2;
    unint64_t v7 = v44;
    int64_t v4 = v45;
    if ((v10 & 1) == 0) {
      return;
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v41) {
    return;
  }
  unint64_t v15 = *(void *)(v40 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v41) {
      return;
    }
    unint64_t v15 = *(void *)(v40 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
}

void sub_10007C1D0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v30 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      uint64_t v9 = (v7 - 1) & v7;
      unint64_t v10 = v8 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v31) {
      return;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v31) {
        return;
      }
      unint64_t v12 = *(void *)(v30 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v31) {
          return;
        }
        unint64_t v12 = *(void *)(v30 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v31) {
            return;
          }
          unint64_t v12 = *(void *)(v30 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v9 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_24:
    Swift::UInt v14 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v15 = *(void *)(a1 + 56) + 24 * v10;
    Swift::UInt v17 = *(void **)v15;
    int64_t v16 = *(void **)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    unint64_t v19 = sub_10007C484(v14);
    if ((v20 & 1) == 0) {
      return;
    }
    unint64_t v32 = v9;
    uint64_t v21 = *(void *)(a2 + 56) + 24 * v19;
    unint64_t v23 = *(void **)v21;
    uint64_t v22 = *(void **)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v25 = v17;
    id v26 = v16;
    swift_bridgeObjectRetain();
    id v27 = v23;
    id v28 = v22;
    swift_bridgeObjectRetain();
    if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    char v29 = sub_10007C1D0(v24, v18);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    unint64_t v7 = v32;
    if ((v29 & 1) == 0) {
      return;
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v31) {
    return;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v31) {
      return;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_33:
  __break(1u);
}

unint64_t sub_10007C484(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10007C9B8(a1, v2);
}

unint64_t sub_10007C4F0(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10007D4A8((unint64_t *)&qword_1000E5760, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10007CA54(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_1000E70C0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10007C5C4(uint64_t a1)
{
  type metadata accessor for CAUVehicleLayoutKey();
  sub_10007D4A8(&qword_1000E5D68, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10007CA54(a1, v2, (uint64_t (*)(void))&type metadata accessor for CAUVehicleLayoutKey, (unint64_t *)&qword_1000E4A30, (void (*)(uint64_t))&type metadata accessor for CAUVehicleLayoutKey, (uint64_t)&protocol conformance descriptor for CAUVehicleLayoutKey);
}

unint64_t sub_10007C698(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_10007D4A8(&qword_1000E70C8, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10007CBF4(a1, v2);
}

unint64_t sub_10007C74C(uint64_t a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  if (a3)
  {
    if (a3 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Swift::UInt v6 = a1;
    }
    else if (a1 | a2)
    {
      if (a1 ^ 1 | a2) {
        Swift::UInt v6 = 4;
      }
      else {
        Swift::UInt v6 = 2;
      }
    }
    else
    {
      Swift::UInt v6 = 1;
    }
    Hasher._combine(_:)(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
  }
  Swift::Int v7 = Hasher._finalize()();

  return sub_10007CD50(a1, a2, a3, v7);
}

unint64_t sub_10007C840(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10007CECC(a1, a2, v4);
}

unint64_t sub_10007C8B8(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10007CFB0(a1, v2);
}

unint64_t sub_10007C94C(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10007D128(a1, v2);
}

unint64_t sub_10007C9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10007CA54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  id v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    uint64_t v17 = v9 + 16;
    int64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8, v10);
      sub_10007D4A8(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_10007CBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_10007D4A8(&qword_1000E70C8, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10007CD50(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    BOOL v13 = a1 != 2;
    BOOL v14 = a1 != 1;
    if (a2)
    {
      BOOL v13 = 1;
      BOOL v14 = 1;
    }
    if (a3 != 2) {
      BOOL v13 = 1;
    }
    BOOL v23 = v13;
    char v15 = a3 != 2 || v14;
    if (a2 | a1) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = a3 == 2;
    }
    do
    {
      uint64_t v17 = (uint64_t *)(v12 + 24 * v7);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      int v20 = *((unsigned __int8 *)v17 + 16);
      if (v20)
      {
        if (v20 == 1)
        {
          if (a3 == 1 && v18 == a1) {
            return v7;
          }
        }
        else if (v18 | v19)
        {
          if (v18 ^ 1 | v19)
          {
            if (!v23) {
              return v7;
            }
          }
          else if ((v15 & 1) == 0)
          {
            return v7;
          }
        }
        else if (v16)
        {
          return v7;
        }
      }
      else if (!a3)
      {
        BOOL v21 = v18 == a1 && v19 == a2;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return v7;
        }
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_10007CECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10007CFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10007D128(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

void *sub_10007D1C8()
{
  uint64_t v0 = (unsigned __int8 *)[objc_allocWithZone((Class)type metadata accessor for ClimateStepperButton()) init];
  uint64_t v1 = v0;
  int v2 = v0[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v0[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v2 != 1)
  {
    uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    uint64_t v4 = v0;
    [v3 removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v5 = [v1 layer];
  [v5 setHitTestsAsOpaque:1];

  id v6 = [v1 layer];
  [v6 setCornerRadius:0.0];

  return v1;
}

void _s7Climate0A7StepperC5coderACSgSo7NSCoderC_tcfc_0()
{
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_activeConstraints] = _swiftEmptyArrayStorage;
  uint64_t v1 = &v0[OBJC_IVAR____TtC7Climate14ClimateStepper_downColorConfig];
  int v2 = self;
  id v3 = [v2 clearColor];
  id v4 = [v2 systemWhiteColor];
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = &_swiftEmptyDictionarySingleton;
  id v5 = &v0[OBJC_IVAR____TtC7Climate14ClimateStepper_upColorConfig];
  id v6 = [v2 clearColor];
  id v7 = [v2 systemWhiteColor];
  *id v5 = v6;
  v5[1] = v7;
  v5[2] = &_swiftEmptyDictionarySingleton;
  uint64_t v8 = &v0[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
  id v9 = [v2 clearColor];
  id v10 = [v2 systemWhiteColor];
  *uint64_t v8 = v9;
  v8[1] = v10;
  v8[2] = &_swiftEmptyDictionarySingleton;
  v0[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial] = 0;
  char v11 = &v0[OBJC_IVAR____TtC7Climate14ClimateStepper_accessibilityIdentifierModifier];
  *char v11 = 0;
  v11[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_backgroundView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsWidth] = 0x4040000000000000;
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonWidth] = 0x404F000000000000;
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsHeight] = 0x4040000000000000;
  *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonHeight] = 0x4040000000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10007D4A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007D4F0()
{
  unint64_t result = qword_1000E5E00;
  if (!qword_1000E5E00)
  {
    sub_10000A4DC((uint64_t *)&unk_1000E70E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5E00);
  }
  return result;
}

uint64_t ClimateLogPrefix(file:function:line:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  v23[0] = 47;
  v23[1] = 0xE100000000000000;
  void v22[2] = v23;
  swift_bridgeObjectRetain();
  if (*(void *)(sub_10007E7F0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10007EDF0, (uint64_t)v22, a1, a2) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    Substring.init(_:)();
  }
  v11._uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v23[0] = a6;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = 0xE000000000000000;
  if (!*(void *)(a7 + 24))
  {
    uint64_t v19 = 0;
    goto LABEL_8;
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 32;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  uint64_t result = sub_10007EE48(a7, (uint64_t)v23);
  if (v24)
  {
    sub_100057CC8(v23, v24);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    sub_10000AC28((uint64_t)v23);
    uint64_t v19 = v25;
    unint64_t v16 = v26;
LABEL_8:
    unint64_t v20 = v16;
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 58;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    return v27;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007D794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006730(&qword_1000E64B8);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = 0;
  v27[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v11._uint64_t countAndFlagsBits = 0x3A6574616D696C63;
  v11._object = (void *)0xEB000000003F2F2FLL;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = 1701736314;
  v12._object = (void *)0xE400000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 61;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14) == 1)
  {
    sub_10000A404((uint64_t)v10, &qword_1000E64B8);
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    unint64_t v16 = qword_1000EA798;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v27[0] = v24;
      uint64_t v25 = a2;
      *(_DWORD *)char v18 = 136315138;
      BOOL v23 = v18 + 4;
      uint64_t v19 = CAUVehicleLayoutKey.rawValue.getter();
      uint64_t v26 = sub_10000A56C(v19, v20, v27);
      a2 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to generate URL for %s.", v18, 0xCu);
      uint64_t v21 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v21 = 1;
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v10, v14);
    uint64_t v21 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v21, 1, v14);
}

uint64_t sub_10007DB74()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100064454();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1000EA798 = result;
  return result;
}

uint64_t sub_10007DC34()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100064454();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_1000EA7A0 = result;
  return result;
}

uint64_t sub_10007DCF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v71 = (char *)&v61 - v7;
  uint64_t v8 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v8 - 8);
  id v69 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006730(&qword_1000E7178);
  __chkstk_darwin(v10 - 8);
  id v70 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URLQueryItem();
  uint64_t v72 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v68 = (char *)&v61 - v16;
  uint64_t v17 = sub_100006730(&qword_1000E7180);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for URLComponents();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  BOOL v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v1;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_10000A404((uint64_t)v19, &qword_1000E7180);
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v24 = qword_1000EA798;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v73, v2);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      sub_10007EF2C();
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v75 = sub_10000A56C(v27, v28, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Couldn't parse URL components out of %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
LABEL_34:
    uint64_t v58 = type metadata accessor for CAUVehicleLayoutKey();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v74, 1, 1, v58);
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  id v66 = v23;
  uint64_t v29 = URLComponents.queryItems.getter();
  uint64_t v67 = v21;
  if (!v29)
  {
    uint64_t v40 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v70, 1, 1, v12);
    char v39 = v71;
LABEL_21:
    sub_10000A404(v40, &qword_1000E7178);
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v43 = qword_1000EA798;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v39, v73, v2);
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315394;
      sub_10007EF2C();
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v75 = sub_10000A56C(v46, v47, &v76);
      uint64_t v64 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v39, v2);
      *(_WORD *)(v45 + 12) = 2080;
      uint64_t v75 = sub_10000A56C(1701736314, 0xE400000000000000, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "URL %s doesn't seem to have a %s query parameter.", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v64);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v39, v2);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v20);
    }
    goto LABEL_34;
  }
  uint64_t v63 = v3;
  uint64_t v30 = *(void *)(v29 + 16);
  uint64_t v31 = v72;
  uint64_t v65 = v29;
  if (v30)
  {
    uint64_t v64 = v20;
    uint64_t v62 = v2;
    unint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
    unint64_t v33 = v29 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    id v34 = (void (**)(char *, uint64_t))(v72 + 8);
    uint64_t v35 = *(void *)(v72 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      v32(v14, v33, v12);
      if (URLQueryItem.name.getter() == 1701736314 && v36 == 0xE400000000000000) {
        break;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_19;
      }
      (*v34)(v14, v12);
      v33 += v35;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = 1;
        uint64_t v2 = v62;
        uint64_t v3 = v63;
        uint64_t v20 = v64;
        uint64_t v21 = v67;
        char v39 = v71;
        uint64_t v31 = v72;
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t v3 = v63;
    char v39 = v71;
    swift_bridgeObjectRelease();
    uint64_t v31 = v72;
    uint64_t v40 = (uint64_t)v70;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v70, v14, v12);
    uint64_t v38 = 0;
    uint64_t v2 = v62;
    uint64_t v20 = v64;
    uint64_t v21 = v67;
  }
  else
  {
    uint64_t v38 = 1;
    uint64_t v3 = v63;
    char v39 = v71;
LABEL_17:
    uint64_t v40 = (uint64_t)v70;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v40, v38, 1, v12);
  swift_bridgeObjectRelease();
  int v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v40, 1, v12);
  uint64_t v42 = (uint64_t)v69;
  if (v41 == 1) {
    goto LABEL_21;
  }
  uint64_t v48 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v68, v40, v12);
  URLQueryItem.value.getter();
  id v49 = v66;
  if (!v50)
  {
LABEL_29:
    uint64_t v54 = v21;
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v55 = qword_1000EA798;
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      id v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "No available climate zone in URL.", v57, 2u);
      swift_slowDealloc();
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v48, v12);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v49, v20);
    goto LABEL_34;
  }
  uint64_t v51 = v21;
  CAUVehicleLayoutKey.init(rawValue:)();
  uint64_t v52 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v53 = *(void *)(v52 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v42, 1, v52) == 1)
  {
    sub_10000A404(v42, (uint64_t *)&unk_1000E7C60);
    uint64_t v21 = v51;
    goto LABEL_29;
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v48, v12);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v20);
  uint64_t v60 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v74, v42, v52);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v60, 0, 1, v52);
}

uint64_t sub_10007E7F0(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_10007EC94(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(char **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_1000A2EB8(0, *((void *)v13 + 2) + 1, 1, v13);
  }
  unint64_t v27 = *((void *)v13 + 2);
  unint64_t v26 = *((void *)v13 + 3);
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_1000A2EB8((char *)(v26 > 1), v27 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v27 + 1;
  unint64_t v28 = &v13[32 * v27];
  *((void *)v28 + 4) = v45;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (*((void *)v13 + 2) != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_1000A2EB8(0, *((void *)v13 + 2) + 1, 1, v13);
    }
    unint64_t v39 = *((void *)v13 + 2);
    unint64_t v38 = *((void *)v13 + 3);
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_1000A2EB8((char *)(v38 > 1), v39 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v39 + 1;
    uint64_t v40 = &v13[32 * v39];
    *((void *)v40 + 4) = v31;
    *((void *)v40 + 5) = v33;
    *((void *)v40 + 6) = v35;
    *((void *)v40 + 7) = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007EC94(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_1000A2EB8(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_1000A2EB8((char *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    char v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v7;
    *((void *)v18 + 5) = v9;
    *((void *)v18 + 6) = v11;
    *((void *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007EDF0(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10007EE48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730(&qword_1000E55D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007EEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_10007EECC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10007EEEC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for Weak()
{
  return sub_10007EFCC();
}

unint64_t sub_10007EF2C()
{
  unint64_t result = qword_1000E7188;
  if (!qword_1000E7188)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E7188);
  }
  return result;
}

uint64_t sub_10007EF84()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007EFBC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007EFCC()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10007EFFC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin);
  unsigned int v2 = [v1 maxACOn];
  unsigned int v3 = [v1 maxACOnRestricted];
  unsigned int v4 = [v1 maxACOnInvalid];
  unsigned __int8 v5 = [v1 maxACOnDisabled];
  if (v2)
  {
    if (v3)
    {
      uint64_t v6 = 5;
      if (v4) {
        uint64_t v6 = 13;
      }
      if ((v5 & 1) == 0) {
        return v6;
      }
      return v6 | 0x10;
    }
    uint64_t v6 = 9;
    if (!v4) {
      uint64_t v6 = 1;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else if (v3)
  {
    uint64_t v6 = 4;
    if (v4) {
      uint64_t v6 = 12;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  else
  {
    uint64_t v6 = 8;
    if (!v4) {
      uint64_t v6 = 0;
    }
    if (v5) {
      return v6 | 0x10;
    }
  }
  return v6;
}

char *sub_10007F0D8(void *a1, unsigned __int8 a2)
{
  *(void *)&v2[OBJC_IVAR____TtC7Climate25ClimateCabinServiceButton_cabin] = a1;
  v71.receiver = v2;
  v71.super_class = (Class)type metadata accessor for ClimateCabinServiceButton();
  id v5 = a1;
  uint64_t v6 = (char *)[super init];
  [v5 registerObserver:v6];

  uint64_t v7 = &v6[OBJC_IVAR____TtC7Climate13ClimateButton_smallTitle];
  swift_beginAccess();
  char v8 = *v7;
  char *v7 = 1;
  uint64_t v9 = v6;
  if ((v8 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }
  uint64_t v10 = &v9[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  swift_beginAccess();
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(_OWORD *)uint64_t v10 = xmmword_1000B4200;
  uint64_t v13 = v9;
  if (!v11
    || (v12 == 0x432F412058414DLL ? (BOOL v14 = v11 == 0xE700000000000000) : (BOOL v14 = 0),
        !v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  id v15 = [v13 titleLabel];
  if (v15)
  {
    unint64_t v16 = v15;
    [v15 setNumberOfLines:2];
  }
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v5;
  char v19 = (uint64_t *)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v20 = *v19;
  *char v19 = (uint64_t)sub_10007F944;
  v19[1] = v18;
  id v21 = v5;
  sub_100005690(v20);
  if ((a2 | 2) == 3)
  {
    id v22 = [v13 titleLabel];
    if (v22)
    {
      uint64_t v23 = v22;
      if (qword_1000E46F8 != -1) {
        swift_once();
      }
      [v23 setFont:qword_1000EA820];
    }
    id v66 = v21;
    int v24 = v13[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v13[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if (v24 != 1)
    {
      uint64_t v25 = *(void **)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
      unint64_t v26 = v13;
      [v25 removeFromSuperview];
      sub_100088B54();
    }
    uint64_t v27 = qword_1000E46D0;
    unint64_t v28 = v13;
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v29 = (void *)qword_1000EA770;
    uint64_t v30 = *(void **)algn_1000EA778;
    uint64_t v31 = qword_1000EA780;
    uint64_t v32 = (void **)&v28[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v33 = *(void **)&v28[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v67 = *(void *)&v28[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
    id v69 = *(void **)&v28[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
    void *v32 = (void *)qword_1000EA770;
    v32[1] = v30;
    v32[2] = (void *)v31;
    id v34 = v29;
    id v35 = v30;
    swift_bridgeObjectRetain_n();
    id v65 = v34;
    id v36 = v35;
    uint64_t v37 = *v32;
    unint64_t v38 = v32[1];
    uint64_t v39 = (uint64_t)v32[2];
    sub_1000056A0();
    id v40 = v37;
    id v41 = v38;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v39, v67);
      char v43 = v42;
      swift_bridgeObjectRelease();

      if (v43)
      {
LABEL_27:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = qword_1000E46C8;
        uint64_t v46 = v28;
        if (v45 != -1) {
          swift_once();
        }
        uint64_t v47 = (void *)qword_1000EA758;
        unint64_t v48 = (void *)qword_1000EA760;
        uint64_t v49 = qword_1000EA768;
        uint64_t v50 = (void **)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        uint64_t v51 = *(void **)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        id v70 = *(void **)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
        uint64_t v52 = *(void *)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
        *uint64_t v50 = (void *)qword_1000EA758;
        v50[1] = v48;
        v50[2] = (void *)v49;
        id v53 = v47;
        id v54 = v48;
        swift_bridgeObjectRetain_n();
        id v68 = v53;
        id v55 = v54;
        os_log_type_t v56 = *v50;
        id v57 = v50[1];
        uint64_t v58 = (uint64_t)v50[2];
        id v59 = v56;
        id v60 = v57;
        swift_bridgeObjectRetain();
        if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
        {
          sub_10007C1D0(v58, v52);
          char v62 = v61;
          swift_bridgeObjectRelease();

          if (v62) {
            goto LABEL_35;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(void))((swift_isaMask & *(void *)v46) + 0x228))();
LABEL_35:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v21 = v66;
        goto LABEL_36;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v28) + 0x228))(v44);
    goto LABEL_27;
  }
LABEL_36:
  uint64_t v63 = v13;
  sub_10009F8A4();
  [v63 setEnabled:(unint64_t)sub_10007EFFC() < 8];
  sub_10008896C();
  sub_100088B54();

  return v63;
}

void sub_10007F744(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    [a3 setMaxACOn:[a3 maxACOn] ^ 1];
    sub_10009F8A4();
    [v5 setEnabled:(unint64_t)sub_10007EFFC() < 8];
    sub_10008896C();
    sub_100088B54();
  }
}

id sub_10007F874()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateMaxACButton();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateMaxACButton()
{
  return self;
}

uint64_t sub_10007F8CC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007F904()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10007F944(uint64_t a1)
{
  sub_10007F744(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10007F94C()
{
  uint64_t v0 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v0 - 8);
  objc_super v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007FADC();
  CAFPositioned.layoutKey.getter();
  uint64_t v3 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10007FB1C((uint64_t)v2);
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v8 = v7;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v11[2] = CAUVehicleLayoutKey.rawValue.getter();
    v11[3] = v9;
    v11[0] = v6;
    v11[1] = v8;
    sub_10007FB7C();
    char v5 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

unint64_t sub_10007FADC()
{
  unint64_t result = qword_1000E5430;
  if (!qword_1000E5430)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E5430);
  }
  return result;
}

uint64_t sub_10007FB1C(uint64_t a1)
{
  uint64_t v2 = sub_100006730((uint64_t *)&unk_1000E7C60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10007FB7C()
{
  unint64_t result = qword_1000E71B8;
  if (!qword_1000E71B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E71B8);
  }
  return result;
}

uint64_t sub_10007FBD0()
{
  return sub_10001C874();
}

char *sub_10007FBFC(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v3 = objc_allocWithZone((Class)type metadata accessor for ClimateZonesSyncedServiceButton());
  uint64_t v4 = v1;
  id v5 = a1;
  uint64_t v6 = sub_10001C94C(v5, 1u);
  *(void *)&v4[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_syncButton] = v6;
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v4[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_sync] = v5;
  id v7 = v5;

  uint64_t v8 = (char *)sub_100015F7C(0, 0, 1);
  uint64_t v9 = v8;
  uint64_t v10 = OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_syncButton;
  uint64_t v11 = *(unsigned char **)&v8[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_syncButton];
  int v12 = v11[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v11[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v12 == 1)
  {
    uint64_t v13 = v8;
  }
  else
  {
    BOOL v14 = *(void **)&v11[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    id v15 = v8;
    unint64_t v16 = v11;
    [v14 removeFromSuperview];
    sub_100088B54();
  }
  [v7 registerObserver:v9];
  [v9 addSubview:*(void *)&v9[v10]];
  sub_10007FDC0();
  unsigned __int8 v17 = [*(id *)&v9[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_sync] on];
  v9[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn] = v17;
  sub_10009F8A4();
  [v9 setEnabled:(sub_10001C874() & 0x18) == 0];
  sub_100088B54();
  ClimateButton.refreshColorConfig()();

  return v9;
}

void sub_10007FDC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_syncButton];
  id v5 = [v4 leadingAnchor];
  id v6 = [v1 leadingAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 trailingAnchor];
  id v9 = [v1 trailingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [v4 topAnchor];
  id v12 = [v1 topAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  id v14 = [v4 bottomAnchor];
  id v15 = [v1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v3 + 56) = v16;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_100080010()
{
  return sub_100088B54();
}

void sub_10008003C()
{
  unsigned __int8 v1 = [*(id *)&v0[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_sync] on];
  v0[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn] = v1;
  sub_10009F8A4();
  [v0 setEnabled:(sub_10001C874() & 0x18) == 0];
  sub_100088B54();

  ClimateButton.refreshColorConfig()();
}

void sub_1000800C4()
{
  sub_100026DD0(v0 + OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_delegate);

  unsigned __int8 v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_syncButton);
}

id sub_100080114()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSyncIndicator();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateSyncIndicator()
{
  return self;
}

uint64_t sub_1000801CC(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn;
  int v4 = v1[OBJC_IVAR____TtC7Climate16ClimateIndicator_isIndicatorOn];
  if (v4 == [a1 on])
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v9 = qword_1000EA798;
    os_log_type_t v10 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v9, v10);
    if (result)
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      id v12 = "Sync indicator did update with same ON value. Skipping.";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
      return swift_slowDealloc();
    }
  }
  else
  {
    if ([a1 receivedAllValues])
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      id v5 = qword_1000EA798;
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        id v7 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v7 = 67240192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sync indicator did update ON: %{BOOL,public}d", v7, 8u);
        swift_slowDealloc();
      }
      v1[v3] = [*(id *)&v1[OBJC_IVAR____TtC7Climate20ClimateSyncIndicator_sync] on];
      sub_10009F8A4();
      [v1 setEnabled:(sub_10001C874() & 0x18) == 0];
      sub_100088B54();
      ClimateButton.refreshColorConfig()();
      uint64_t result = swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        sub_10005794C();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    id v9 = qword_1000EA798;
    os_log_type_t v10 = static os_log_type_t.default.getter();
    uint64_t result = os_log_type_enabled(v9, v10);
    if (result)
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      id v12 = "Sync service hasn't receivedAllValues.";
      goto LABEL_17;
    }
  }
  return result;
}

double sub_10008052C()
{
  unsigned __int8 v1 = *v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for ClimateSeatHeatingCoolingServiceButton());
  uint64_t v3 = sub_100058C74(v1);
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730(&qword_1000E4B50);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1000B2000;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = &off_1000CBC48;
  return result;
}

void sub_1000805A8()
{
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for ClimateHorizontalQuickActionPopover();
  [super viewDidLayoutSubviews];
  if ((v0[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_isSet] & 1) == 0)
  {
    v0[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_isSet] = 1;
    sub_100023A78();
    sub_100080794(v1);
    swift_bridgeObjectRelease();
    sub_1000812DC();
    sub_100023960();
    id v2 = [v0 view];
    if (v2)
    {
      uint64_t v3 = v2;
      id v4 = [self clearColor];
      [v3 setBackgroundColor:v4];

      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1000B2670;
      id v6 = [v0 view];
      if (v6)
      {
        id v7 = v6;
        id v8 = self;
        id v9 = [v7 widthAnchor];

        id v10 = [v9 constraintEqualToConstant:*(double *)&v0[OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_popoverWidth]];
        *(void *)(v5 + 32) = v10;
        specialized Array._endMutation()();
        sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v8 activateConstraints:isa];

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_100080794(unint64_t a1)
{
  double v3 = *(double *)(v1 + OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_maxWidth);
  v77[0] = 1;
  if (qword_1000E46E8 != -1) {
    goto LABEL_106;
  }
  while (1)
  {
    double v4 = *(double *)&qword_1000EA7A8;
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = sub_100081AB4(0, v5);
    uint64_t v76 = v6;
    uint64_t v73 = v5;
    if (!v5) {
      break;
    }
    double v7 = v3 - (v4 + 40.0);
    uint64_t v71 = OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_popoverWidth;
    unint64_t v68 = a1;
    unint64_t v69 = a1 + 32;
    swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    char v9 = 1;
    while (1)
    {
      uint64_t v10 = *(void *)(v69 + 8 * v8);
      a1 = v8 + 1;
      uint64_t v11 = *(void *)(v10 + 16);
      if (!v11) {
        goto LABEL_5;
      }
      uint64_t v72 = v8;
      unint64_t v70 = v8 + 1;
      double v3 = *(double *)&qword_1000EA7A8;
      *(double *)(v74 + v71) = *(double *)&qword_1000EA7A8 + *(double *)(v74 + v71);
      unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain_n();
      swift_beginAccess();
      if (!*(void *)(v10 + 16)) {
        break;
      }
      objc_super v12 = 0;
      double v7 = v7 - v3;
      a1 = v10 + 40;
      id v13 = (char *)(v11 - 1);
      while (1)
      {
        uint64_t v14 = *(unsigned __int8 *)(a1 - 8);
        id v15 = *(void **)a1;
        if ((((_BYTE)v14 - 1) & 0xFE) != 0) {
          double v3 = 40.0;
        }
        else {
          double v3 = 120.0;
        }
        double v7 = v7 - (*(double *)&qword_1000EA7A8 + v3);
        if (v7 <= 0.0)
        {
          v77[0] = 0;
LABEL_18:
          switch(v14)
          {
            case 9:
              id v17 = v15;
              swift_bridgeObjectRelease();
              char v9 = 0;
              goto LABEL_21;
            default:
              char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
              id v19 = v15;
              swift_bridgeObjectRelease();
              char v9 = 0;
              if (v18) {
                goto LABEL_21;
              }

              char v9 = 0;
              if (v13 != v12) {
                goto LABEL_10;
              }
              goto LABEL_28;
          }
        }
        if ((v9 & 1) == 0) {
          goto LABEL_18;
        }
        id v16 = v15;
        char v9 = 1;
LABEL_21:
        *(double *)(v74 + v71) = *(double *)(v74 + v71) + v3 + *(double *)&qword_1000EA7A8;
        uint64_t v20 = *(char **)(v10 + 16);
        if ((unint64_t)_swiftEmptyArrayStorage >> 62)
        {
          id v23 = v15;
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v21 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v22 = v15;
        }
        sub_100081BA8(v14, v15, v20, v72, v73, v12, v21 == 0, v77);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        if (v13 == v12) {
          break;
        }
LABEL_10:
        ++v12;
        a1 += 16;
        if ((unint64_t)v12 >= *(void *)(v10 + 16)) {
          goto LABEL_97;
        }
      }
LABEL_28:
      swift_bridgeObjectRelease_n();
      unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
      a1 = (unint64_t)_swiftEmptyArrayStorage >> 62;
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v25 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v26 = &selRef_startAnimating;
      if (!v25)
      {
        swift_bridgeObjectRelease();
        a1 = v70;
        goto LABEL_5;
      }
      sub_100025664();
      if (v27)
      {
        if (a1)
        {
          swift_bridgeObjectRetain();
          uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v47)
          {
            swift_bridgeObjectRetain();
            uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v29 = v28 - 1;
            if (__OFSUB__(v28, 1)) {
              goto LABEL_104;
            }
LABEL_35:
            if (v29 >= 1)
            {
              uint64_t v30 = 0;
              a1 = v28 + 0x7FFFFFFFFFFFFFFFLL;
              do
              {
                unint64_t v31 = v28 - 1;
                uint64_t v32 = v75;
                if ((v75 & 0xC000000000000001) != 0)
                {
                  uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  unint64_t v33 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (v30 >= v33) {
                    goto LABEL_98;
                  }
                  id v34 = *(id *)(v75 + 8 * v30 + 32);
                  if (v31 >= v33) {
                    goto LABEL_99;
                  }
                  uint64_t v35 = (uint64_t)v34;
                  id v36 = *(id *)(v75 + 8 * v28 + 24);
                }
                id v37 = v36;
                if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                  || (v75 & 0x8000000000000000) != 0
                  || (v75 & 0x4000000000000000) != 0)
                {
                  uint64_t v32 = sub_100082140(v75);
                  unint64_t v75 = v32;
                }
                unint64_t v38 = *(void **)((v32 & 0xFFFFFFFFFFFFFF8) + 8 * v30 + 0x20);
                *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 8 * v30 + 0x20) = v37;

                specialized Array._endMutation()();
                uint64_t v39 = v75;
                if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                  || (v75 & 0x8000000000000000) != 0
                  || (v75 & 0x4000000000000000) != 0)
                {
                  uint64_t v39 = sub_100082140(v75);
                  unint64_t v75 = v39;
                }
                if (v31 >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_100;
                }
                id v40 = *(void **)((v39 & 0xFFFFFFFFFFFFFF8) + 8 * v28 + 0x18);
                *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 8 * v28 + 0x18) = v35;

                specialized Array._endMutation()();
                if (a1 == v30) {
                  goto LABEL_101;
                }
                ++v30;
                uint64_t v41 = v28 - 2;
                --v28;
              }
              while (v30 < v41);
              unint64_t v24 = v75;
              unint64_t v26 = &selRef_startAnimating;
            }
          }
        }
        else
        {
          uint64_t v28 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v28)
          {
            uint64_t v29 = v28 - 1;
            if (__OFSUB__(v28, 1)) {
              goto LABEL_104;
            }
            goto LABEL_35;
          }
        }
        if (v24 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
          if (v42)
          {
LABEL_56:
            if (v42 < 1) {
              goto LABEL_105;
            }
            uint64_t v43 = 0;
            do
            {
              if ((v24 & 0xC000000000000001) != 0) {
                id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v44 = *(id *)(v24 + 8 * v43 + 32);
              }
              uint64_t v45 = v44;
              ++v43;
              [v44 _touchInsets:v68];
              double v3 = v46;
              [v45 _touchInsets];
              [v45 _touchInsets];
              [v45 v26[282]];
              [v45 _touchInsets];
              [v45 v26[282]];
            }
            while (v42 != v43);
          }
        }
        else
        {
          uint64_t v42 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v42) {
            goto LABEL_56;
          }
        }
        swift_bridgeObjectRelease_n();
      }
      sub_100025664();
      a1 = v70;
      if (v48) {
        uint64_t v49 = v73 - v70;
      }
      else {
        uint64_t v49 = v72;
      }
      id v50 = objc_allocWithZone((Class)UIStackView);
      sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v52 = [v50 initWithArrangedSubviews:isa];

      id v53 = self;
      id v54 = v52;
      id v55 = [v53 clearColor];
      [v54 setBackgroundColor:v55];

      [v54 setDistribution:3];
      [v54 setSpacing:*(double *)&qword_1000EA7A8];
      [v54 setSemanticContentAttribute:3];
      [v54 setTranslatesAutoresizingMaskIntoConstraints:0];
      swift_bridgeObjectRelease();
      if (*(void *)(v76 + 16) < v49) {
        goto LABEL_102;
      }
      if (v49 < 0) {
        goto LABEL_103;
      }
      sub_100081F5C(v49, v49, (uint64_t)v54);
LABEL_5:
      unint64_t v8 = a1;
      if (v73 == a1)
      {
        swift_bridgeObjectRelease();
        uint64_t v56 = v76;
        goto LABEL_77;
      }
    }
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    swift_once();
  }
  uint64_t v56 = v6;
LABEL_77:
  uint64_t v57 = *(void *)(v56 + 16);
  if (v57)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v57; ++i)
    {
      id v59 = *(void **)(v56 + 8 * i + 32);
      if (v59)
      {
        id v60 = v59;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    if (v61)
    {
LABEL_88:
      if (v61 < 1)
      {
        __break(1u);
        JUMPOUT(0x1000812A4);
      }
      uint64_t v62 = 0;
      uint64_t v63 = (void *)(v74 + OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_quickActionContainers);
      do
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
          id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v64 = (id)_swiftEmptyArrayStorage[v62 + 4];
        }
        id v65 = v64;
        swift_beginAccess();
        id v66 = v65;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v62;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
      }
      while (v61 != v62);
    }
  }
  else
  {
    uint64_t v61 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v61) {
      goto LABEL_88;
    }
  }
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

void sub_1000812DC()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7Climate35ClimateHorizontalQuickActionPopover_quickActionContainers];
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)v1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v43 = v0;
    uint64_t v4 = 0;
    id v48 = 0;
    id v41 = self;
    unint64_t v42 = v2 & 0xC000000000000001;
    double height = UILayoutFittingCompressedSize.height;
    uint64_t v39 = v3;
    uint64_t v40 = v2;
    while (1)
    {
      uint64_t v6 = v42
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : (char *)*(id *)(v2 + 8 * v4 + 32);
      uint64_t v0 = v6;
      if (__OFADD__(v4, 1)) {
        break;
      }
      id v7 = [v41 materialViewWithRecipe:20];
      if (!v7)
      {

        swift_bridgeObjectRelease();
        unint64_t v8 = v48;
        goto LABEL_25;
      }
      unint64_t v8 = v7;
      uint64_t v47 = v4 + 1;
      [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
      [v0 systemLayoutSizeFittingSize:UILayoutFittingCompressedSize.width height];
      double v10 = v9;
      uint64_t v11 = qword_1000E46F0;
      objc_super v12 = v0;
      if (v11 != -1) {
        swift_once();
      }
      [v12 _setTouchInsets:*(double *)&qword_1000EA7B0, -12.0, *(double *)&qword_1000EA7B0, -12.0];
      double v46 = v12;

      uint64_t v44 = v4;
      if (v4)
      {
        id v13 = [v8 layer];
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v14 = objc_allocWithZone((Class)CAFilter);
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v16 = [v14 initWithType:v15];

        [v13 setCompositingFilter:v16];
      }
      uint64_t v17 = OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView;
      [*(id *)&v43[OBJC_IVAR____TtC7Climate25ClimateQuickActionPopover_contentView] addSubview:v8];
      sub_100006730((uint64_t *)&unk_1000E4F10);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1000B20F0;
      id v19 = [v8 leftAnchor];
      if (!v48 || (id v20 = [v48 rightAnchor]) == 0) {
        id v20 = [*(id *)&v43[v17] leftAnchor];
      }
      id v45 = self;
      id v21 = [v19 constraintEqualToAnchor:v20];

      *(void *)(v18 + 32) = v21;
      id v22 = [v8 topAnchor];
      id v23 = [*(id *)&v43[v17] topAnchor];
      id v24 = [v22 constraintEqualToAnchor:v23];

      *(void *)(v18 + 40) = v24;
      id v25 = [v8 bottomAnchor];
      id v26 = [*(id *)&v43[v17] bottomAnchor];
      id v27 = [v25 constraintEqualToAnchor:v26];

      *(void *)(v18 + 48) = v27;
      id v28 = [v8 widthAnchor];
      if (qword_1000E46E8 != -1) {
        swift_once();
      }
      id v29 = [v28 constraintEqualToConstant:v10 + *(double *)&qword_1000EA7A8 + *(double *)&qword_1000EA7A8];

      *(void *)(v18 + 56) = v29;
      specialized Array._endMutation()();
      sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v45 activateConstraints:isa];

      [*(id *)&v43[v17] addSubview:v46];
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_1000B1F40;
      id v32 = [v46 centerXAnchor];
      id v33 = [v8 centerXAnchor];
      id v34 = [v32 constraintEqualToAnchor:v33];

      *(void *)(v31 + 32) = v34;
      id v35 = [v46 centerYAnchor];
      id v36 = [v8 centerYAnchor];
      id v37 = [v35 constraintEqualToAnchor:v36];

      *(void *)(v31 + 40) = v37;
      specialized Array._endMutation()();
      Class v38 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v45 activateConstraints:v38];

      uint64_t v4 = v44 + 1;
      id v48 = v8;
      uint64_t v2 = v40;
      if (v47 == v39) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
  unint64_t v8 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
LABEL_25:
}

uint64_t sub_1000819B0()
{
  return swift_bridgeObjectRelease();
}

id sub_1000819C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateHorizontalQuickActionPopover();
  return [super dealloc];
}

uint64_t sub_100081A08()
{
  return type metadata accessor for ClimateHorizontalQuickActionPopover();
}

uint64_t type metadata accessor for ClimateHorizontalQuickActionPopover()
{
  uint64_t result = qword_1000E7230;
  if (!qword_1000E7230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100081A5C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_100081AB4(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_100006730(&qword_1000E7240);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v4[2] = a2;
      double v10 = v4;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v5 = a2 - 2;
        if (v5)
        {
          uint64_t v6 = v4 + 6;
          do
          {
            *v6++ = a1;
            id v7 = a1;
            --v5;
          }
          while (v5);
        }
        id v8 = a1;
      }
    }
    else
    {
      double v10 = _swiftEmptyArrayStorage;
    }
    specialized Array._endMutation()();
    return (uint64_t)v10;
  }
  return result;
}

void sub_100081BA8(char a1, id a2, char *a3, uint64_t a4, uint64_t a5, char *a6, char a7, unsigned char *a8)
{
  uint64_t v11 = a3;
  if ((a1 - 1) < 2u)
  {
    type metadata accessor for ClimateStepper();
    uint64_t v13 = swift_dynamicCastClass();
    if (!v13) {
      return;
    }
    double v9 = v11 - 1;
    if (!__OFSUB__(v11, 1))
    {
      id v8 = (char *)v13;
      id v14 = *(void **)(v13 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
      uint64_t v15 = qword_1000E46F0;
      a2 = a2;
      uint64_t v11 = v14;
      if (v15 == -1)
      {
LABEL_5:
        double v16 = -10.0;
        if (a6) {
          double v17 = -10.0;
        }
        else {
          double v17 = -22.0;
        }
        [v11 _setTouchInsets:*(double *)&qword_1000EA7B0, v17, *(double *)&qword_1000EA7B0, -6.0];

        uint64_t v18 = (id *)&v8[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
        swift_beginAccess();
        double v19 = *(double *)&qword_1000EA7B0;
        [*v18 _setTouchInsets:*(double *)&qword_1000EA7B0 -6.0 *(double *)&qword_1000EA7B0 -6.0];
        if (v9 == a6) {
          double v16 = -22.0;
        }
        [*(id *)&v8[OBJC_IVAR____TtC7Climate14ClimateStepper_upButton] _setTouchInsets:v19, -6.0, v19, v16];
        [v8 _setTouchInsets:v19, v17, v19, v16];

        return;
      }
LABEL_41:
      swift_once();
      goto LABEL_5;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v20 = a5 - 1;
  if (__OFSUB__(a5, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (a3 == (char *)1) {
    goto LABEL_13;
  }
  if (a7)
  {
    swift_beginAccess();
    if ((*a8 & 1) == 0)
    {
      if (v20 == a4)
      {
        if (sub_10004A96C(a1) == 0x6B6E694C70656564 && v26 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0) {
            goto LABEL_18;
          }
        }
      }
LABEL_13:
      if (qword_1000E46F0 != -1) {
        swift_once();
      }
      [a2 _setTouchInsets:*(double *)&qword_1000EA7B0, -12.0, *(double *)&qword_1000EA7B0, -12.0];
      return;
    }
  }
LABEL_18:
  if (a6)
  {
    if (__OFSUB__(v11, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v11 - 1 != a6)
    {
      swift_beginAccess();
      if (*a8)
      {
        if (qword_1000E46F0 == -1)
        {
LABEL_23:
          [a2 _setTouchInsets:*(double *)&qword_1000EA7B0, -6.0, *(double *)&qword_1000EA7B0, -6.0];
          return;
        }
LABEL_43:
        swift_once();
        goto LABEL_23;
      }
    }
  }
  if (qword_1000E46F0 != -1) {
    swift_once();
  }
  double v24 = -12.0;
  if (a6) {
    double v25 = -12.0;
  }
  else {
    double v25 = -6.0;
  }
  if (a6) {
    double v24 = -6.0;
  }
  [a2 _setTouchInsets:*(double *)&qword_1000EA7B0, v24, *(double *)&qword_1000EA7B0, v25];
}

void sub_100081F3C()
{
  qword_1000EA7A8 = 0x4028000000000000;
}

void sub_100081F4C()
{
  qword_1000EA7B0 = 0xC024000000000000;
}

uint64_t sub_100081F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v6 + v9 > *(void *)(v5 + 24) >> 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
  }
  objc_super v12 = (void *)(v5 + 32 + 8 * a1);
  sub_100006730(&qword_1000E7240);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_25;
  }
  if (v15 < 0)
  {
LABEL_27:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  double v16 = (char *)(v12 + 1);
  double v17 = (char *)(v5 + 32 + 8 * a2);
  if (v12 + 1 != (void *)v17 || v16 >= &v17[8 * v15]) {
    memmove(v16, v17, 8 * v15);
  }
  uint64_t v18 = *(void *)(v5 + 16);
  BOOL v14 = __OFADD__(v18, v9);
  uint64_t v19 = v18 + v9;
  if (v14)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)(v5 + 16) = v19;
LABEL_17:
  *objc_super v12 = a3;

  return specialized Array._endMutation()();
}

void *sub_100082118(void *a1)
{
  return sub_1000A2C98(0, a1[2], 0, a1);
}

void *sub_10008212C(void *a1)
{
  return sub_1000A3340(0, a1[2], 0, a1);
}

uint64_t sub_100082140(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void sub_1000821BC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = *(void **)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors);
  uint64_t v8 = *(void **)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 8);
  uint64_t v9 = *(void **)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 16);
  uint64_t v10 = *(void *)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 24);
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v11 = v9;
  swift_bridgeObjectRetain();
  id v12 = v7;
  id v13 = v8;
  BOOL v14 = v12;
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    goto LABEL_6;
  }
  double v25 = v9;
  uint64_t v15 = v10;
  if (!a2)
  {
    double v16 = v13;
    if (!v8) {
      goto LABEL_13;
    }
LABEL_6:
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  double v16 = v13;
  sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
  id v17 = v13;
  id v18 = a2;
  char v19 = static NSObject.== infix(_:_:)();

  if (v19)
  {
LABEL_13:
    if (a3)
    {
      if (v25)
      {
        sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
        id v20 = v11;
        id v21 = a3;
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_16:
          sub_10007BE10(a4, v15);
          char v24 = v23;
          swift_bridgeObjectRelease();

          if (v24) {
            return;
          }
          goto LABEL_9;
        }
      }
    }
    else if (!v25)
    {
      goto LABEL_16;
    }

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();

LABEL_7:
  id v11 = v14;
LABEL_8:

LABEL_9:

  sub_1000833B0();
}

void sub_1000823F0(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = (void *)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors);
  uint64_t v8 = *(void **)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors);
  uint64_t v9 = *(void **)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 8);
  uint64_t v10 = *(void **)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 16);
  uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 24);
  void *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  id v12 = a3;
  swift_bridgeObjectRetain();
  id v14 = a1;
  id v13 = a2;
  sub_1000821BC((uint64_t)v8, v9, v10, v11);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

float sub_100082504()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton____lazy_storage___currentValue);
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton____lazy_storage___currentValue + 4) & 1) == 0) {
    return *(float *)v1;
  }
  id v2 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_fan) fanLevelRange];
  id v3 = [v2 minimum];

  [v3 floatValue];
  float v5 = v4;

  *(float *)uint64_t v1 = v5;
  v1[4] = 0;
  return v5;
}

void sub_1000825B0(float a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton____lazy_storage___currentValue;
  *(float *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 4) = 0;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton_shouldIgnoreCarUpdates) & 1) == 0)
  {
    if ((sub_100082690() & 2) != 0) {
      char v3 = 0;
    }
    else {
      char v3 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton_wasPreviousValueInAutoMode) ^ 1;
    }
    float v4 = *(void **)(v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle);
    float v5 = sub_100082504();
    uint64_t v6 = *(void *)((swift_isaMask & *v4) + 0x70);
    if (*(float *)((char *)v4 + v6) != v5)
    {
      *(float *)((char *)v4 + v6) = v5;
      sub_100083EB0(v3 & 1);
    }
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton_wasPreviousValueInAutoMode) = (sub_100082690() & 2) != 0;
  }
}

uint64_t sub_100082690()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_fan);
  if ([v1 hasOn] && (objc_msgSend(v1, "on") & 1) == 0)
  {
    unsigned __int8 v8 = [v1 autoMode];
    unsigned __int8 v9 = [v1 onRestricted];
    unsigned int v10 = [v1 onInvalid];
    unsigned __int8 v11 = [v1 onDisabled];
    if (v8)
    {
      if (v9)
      {
        uint64_t v12 = 6;
        uint64_t v13 = 14;
      }
      else
      {
        uint64_t v12 = 2;
        uint64_t v13 = 10;
      }
    }
    else
    {
      if ((v9 & 1) == 0)
      {
        uint64_t v12 = 8;
        if (!v10) {
          uint64_t v12 = 0;
        }
        if ((v11 & 1) == 0) {
          return v12;
        }
        return v12 | 0x10;
      }
      uint64_t v12 = 4;
      uint64_t v13 = 12;
    }
    if (v10) {
      uint64_t v12 = v13;
    }
    if ((v11 & 1) == 0) {
      return v12;
    }
    return v12 | 0x10;
  }
  char v2 = CAFFan.isBlowing.getter();
  char v3 = [v1 autoMode];
  char v4 = [v1 fanLevelRestricted];
  char v5 = [v1 fanLevelInvalid];
  char v6 = [v1 fanLevelDisabled];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2 & 1, v3, v4, v5, v6);
}

void sub_100082818(void *a1, unsigned __int8 a2)
{
  int v5 = a2;
  *(void *)&v2[OBJC_IVAR____TtC7Climate16ClimateFanButton_autoModeGlyph] = 0;
  char v6 = v2;
  UUID.init()();
  v6[OBJC_IVAR____TtC7Climate16ClimateFanButton_shouldIgnoreCarUpdates] = 0;
  id v7 = &v6[OBJC_IVAR____TtC7Climate16ClimateFanButton____lazy_storage___currentValue];
  *(_DWORD *)id v7 = 0;
  v7[4] = 1;
  v6[OBJC_IVAR____TtC7Climate16ClimateFanButton_wasPreviousValueInAutoMode] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7Climate16ClimateFanButton_fan] = a1;
  id v8 = a1;
  id v9 = [v8 fanLevelRange];
  id v10 = [v9 minimum];
  [v10 floatValue];
  float v12 = v11;

  id v13 = [v9 maximum];
  [v13 floatValue];
  float v15 = v14;

  id v16 = objc_allocWithZone((Class)sub_100006730(&qword_1000E6358));
  *(void *)&v6[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle] = sub_100083BE0(v12, v15, 31.0, 2.0);
  v6[OBJC_IVAR____TtC7Climate16ClimateFanButton_style] = a2;
  id v17 = self;
  id v18 = v17;
  id v98 = v9;
  if (v5 == 1)
  {
    id v19 = [v17 labelColor];
    if (qword_1000E46A0 != -1) {
      swift_once();
    }
    id v20 = (id)qword_1000EA718;
    id v21 = [v18 labelColor];
  }
  else
  {
    id v19 = [v17 _carSystemFocusPrimaryColor];
    id v22 = [v18 labelColor];
    id v20 = [v22 colorWithAlphaComponent:0.25];

    id v21 = [v18 _carSystemFocusPrimaryColor];
  }
  id v23 = v21;
  char v24 = &v6[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors];
  *(void *)char v24 = v19;
  *((void *)v24 + 1) = v20;
  *((void *)v24 + 2) = v23;
  *((void *)v24 + 3) = &_swiftEmptyDictionarySingleton;

  v99.receiver = v6;
  v99.super_class = (Class)type metadata accessor for ClimateFanButton();
  [super init];
  uint64_t v26 = self;
  char v27 = (char *)v25;
  id v28 = v27;
  if (a2 != 1)
  {
    uint64_t v49 = v27;
    id v50 = [v26 clearColor];
    id v51 = [v26 labelColor];
    id v52 = &v49[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v54 = *(void **)&v49[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v53 = *(void **)&v49[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
    uint64_t v55 = *(void *)&v49[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
    *(void *)id v52 = v50;
    *((void *)v52 + 1) = v51;
    *((void *)v52 + 2) = &_swiftEmptyDictionarySingleton;
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v56 = v50;
    id v57 = v51;
    swift_bridgeObjectRetain();
    id v58 = v56;
    id v59 = v57;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0((uint64_t)&_swiftEmptyDictionarySingleton, v55);
      char v61 = v60;
      swift_bridgeObjectRelease();

      if (v61) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void))((swift_isaMask & *(void *)v49) + 0x230))();
LABEL_22:

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  id v97 = v8;
  id v29 = [v26 clearColor];
  if (qword_1000E46A0 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_1000EA718;
  uint64_t v31 = v28;
  id v32 = v30;
  id v33 = [v26 clearColor];
  id v34 = [v26 labelColor];
  sub_100006730((uint64_t *)&unk_1000E4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B2000;
  *(void *)(inited + 32) = 16;
  *(void *)(inited + 40) = v29;
  *(void *)(inited + 48) = v32;
  *(void *)(inited + 56) = &_swiftEmptyDictionarySingleton;
  unint64_t v36 = sub_100043070(inited);
  swift_setDeallocating();
  id v96 = v32;
  id v37 = v29;
  sub_100006730((uint64_t *)&unk_1000E77A0);
  swift_arrayDestroy();
  Class v38 = &v31[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  uint64_t v39 = *(void **)&v31[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  uint64_t v40 = *(void **)&v31[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  uint64_t v41 = *(void *)&v31[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
  *(void *)Class v38 = v33;
  *((void *)v38 + 1) = v34;
  *((void *)v38 + 2) = v36;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v42 = v33;
  id v43 = v34;
  swift_bridgeObjectRetain_n();
  id v44 = v42;
  id v45 = v43;
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v36, v41);
    char v47 = v46;
    swift_bridgeObjectRelease();

    if (v47) {
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t))((swift_isaMask & *(void *)v31) + 0x230))(v48);
LABEL_19:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v8 = v97;
LABEL_23:
  [v28 _setContinuousCornerRadius:0.0];
  uint64_t v62 = &v28[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(_OWORD *)uint64_t v62 = xmmword_1000B42F0;
  id v65 = v28;
  if (!v63
    || (v64 != 0x6C6C69662E6E6166 || v63 != 0xE800000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  id v66 = self;
  uint64_t v67 = v65;
  id v68 = [v66 configurationWithPointSize:5 weight:14.0];
  id v69 = ClimateButton.imageSymbolConfiguration.getter();
  unint64_t v70 = *(void **)&v67[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v67[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v68;
  id v71 = v68;

  id v72 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  char v73 = static NSObject.== infix(_:_:)();

  if ((v73 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

  uint64_t v74 = OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle;
  unint64_t v75 = *(void **)&v67[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle];
  [v75 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v67 addSubview:v75];
  uint64_t v76 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_1000B20F0;
  id v78 = [v75 centerXAnchor];
  id v79 = [v67 centerXAnchor];
  id v80 = [v78 constraintEqualToAnchor:v79];

  *(void *)(v77 + 32) = v80;
  id v81 = [*(id *)&v67[v74] centerYAnchor];
  id v82 = [v67 centerYAnchor];
  id v83 = [v81 constraintEqualToAnchor:v82];

  *(void *)(v77 + 40) = v83;
  id v84 = [*(id *)&v67[v74] heightAnchor];
  id v85 = [v67 heightAnchor];
  id v86 = [v84 constraintEqualToAnchor:v85];

  *(void *)(v77 + 48) = v86;
  id v87 = [*(id *)&v67[v74] widthAnchor];
  id v88 = [v67 widthAnchor];
  id v89 = [v87 constraintEqualToAnchor:v88];

  *(void *)(v77 + 56) = v89;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v76 activateConstraints:isa];

  id v91 = [self sharedApplication];
  id v92 = [v91 delegate];

  if (v92)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v93 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    uint64_t v94 = *(void *)&v93[OBJC_IVAR____TtC7Climate18ClimateCoordinator_continuousStepperTracker];
    swift_retain();

    id v95 = v67;
    sub_100084498(v95, v94);

    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000833B0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors;
  char v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 16);
  uint64_t v4 = *(void *)((swift_isaMask & *v1) + 0x60);
  int v5 = *(void **)((char *)v1 + v4);
  *(void *)((char *)v1 + v4) = v3;
  id v6 = v3;

  id v7 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x80));
  id v8 = *(void **)((char *)v1 + v4);
  if (v8) {
    id v9 = [v8 CGColor];
  }
  else {
    id v9 = 0;
  }
  [v7 setStrokeColor:v9];

  id v10 = *(void **)(v2 + 8);
  uint64_t v11 = *(void *)((swift_isaMask & *v1) + 0x68);
  float v12 = *(void **)((char *)v1 + v11);
  *(void *)((char *)v1 + v11) = v10;
  id v13 = v10;

  float v14 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x78));
  float v15 = *(void **)((char *)v1 + v11);
  if (v15) {
    id v16 = [v15 CGColor];
  }
  else {
    id v16 = 0;
  }
  id v17 = v16;
  [v14 setStrokeColor:];
}

void sub_10008354C()
{
  sub_10009F8A4();
  [v0 setEnabled:(sub_100082690() & 0x18) == 0];
  ClimateButton.refreshColorConfig()();
  if (v0[OBJC_IVAR____TtC7Climate16ClimateFanButton_style] == 1)
  {
    char v1 = sub_100082690();
    uint64_t v2 = *(void **)(*(void *)&v0[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle]
                  + *(void *)((swift_isaMask & **(void **)&v0[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle])
                              + 0x78));
    if ((v1 & 0x10) != 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v4 = objc_allocWithZone((Class)CAFilter);
      id v5 = v2;
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v7 = [v4 initWithType:v6];

      [v5 setCompositingFilter:v7];
    }
    else
    {
      char v3 = *(void **)(*(void *)&v0[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle]
                    + *(void *)((swift_isaMask & **(void **)&v0[OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle])
                                + 0x78));
      [v3 setCompositingFilter:0];
    }
  }
}

uint64_t sub_1000836C4()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 8);
  char v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressColors + 16);
  swift_bridgeObjectRelease();

  uint64_t v4 = v0 + OBJC_IVAR____TtC7Climate16ClimateFanButton_trackerUUID;
  uint64_t v5 = type metadata accessor for UUID();
  NSString v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

id sub_10008378C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateFanButton();
  return [super dealloc];
}

uint64_t sub_100083890()
{
  return type metadata accessor for ClimateFanButton();
}

uint64_t type metadata accessor for ClimateFanButton()
{
  uint64_t result = qword_1000E72A8;
  if (!qword_1000E72A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000838E4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000839DC(double a1)
{
  char v3 = *(void **)(v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton_fan);
  id v4 = [v3 fanLevelRange];
  id v5 = [v4 maximum];

  [v5 floatValue];
  float v7 = v6;

  id v8 = [v3 fanLevelRange];
  id v9 = [v8 minimum];

  [v9 floatValue];
  float v11 = v10;

  float v12 = a1;
  float v13 = (float)(v7 - v11) * v12;
  float v14 = *(void **)(v1 + OBJC_IVAR____TtC7Climate16ClimateFanButton_progressCircle);
  uint64_t v15 = *(void *)((swift_isaMask & *v14) + 0x70);
  if (*(float *)((char *)v14 + v15) != v13)
  {
    *(float *)((char *)v14 + v15) = v13;
    sub_100083EB0(1);
  }
}

void *sub_100083BE0(float a1, float a2, double a3, double a4)
{
  *(void *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0x60)) = 0;
  *(void *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0x68)) = 0;
  uint64_t v9 = *(void *)((swift_isaMask & *v4) + 0x78);
  id v10 = objc_allocWithZone((Class)CAShapeLayer);
  float v11 = v4;
  id v12 = [v10 init];
  *(void *)((char *)v4 + v9) = v12;
  uint64_t v13 = *(void *)((swift_isaMask & *v11) + 0x80);
  id v14 = [objc_allocWithZone((Class)CAShapeLayer) init];
  *(void *)((char *)v11 + v13) = v14;
  *((unsigned char *)v11 + *(void *)((swift_isaMask & *v11) + 0xA0)) = 0;
  *(float *)((char *)v11 + *(void *)((swift_isaMask & *v11) + 0x88)) = a1;
  *(float *)((char *)v11 + *(void *)((swift_isaMask & *v11) + 0x90)) = a2;
  *(_DWORD *)((char *)v11 + *(void *)((swift_isaMask & *v11) + 0x70)) = 0;
  *(double *)((char *)v11 + *(void *)((swift_isaMask & *v11) + 0x98)) = (a3 - a4) * 0.5;
  [v12 setLineWidth:a4];
  id v15 = v14;
  [v15 setLineWidth:a4];

  v21.receiver = v11;
  v21.super_class = (Class)sub_100006730(&qword_1000E6358);
  id v16 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v17 = self;
  id v18 = v16;
  id v19 = [v17 clearColor];
  [v18 setBackgroundColor:v19];

  [*(id *)((char *)v18 + *(void *)((swift_isaMask & *v18) + 0x80)) setStrokeEnd:0.0];
  sub_1000841A0(0.0);

  return v18;
}

void sub_100083EB0(char a1)
{
  uint64_t v3 = *(void *)((swift_isaMask & *v1) + 0x70);
  float v4 = *(float *)((char *)v1 + v3);
  if (*(float *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x88)) >= 0.0 || v4 <= 0.0) {
    float v6 = *(float *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x88));
  }
  else {
    float v6 = 0.0;
  }
  if (*(float *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x90)) > 0.0 && v4 < 0.0) {
    float v8 = 0.0;
  }
  else {
    float v8 = *(float *)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x90));
  }
  uint64_t v9 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x80));
  [v9 strokeEnd];
  float v10 = *(float *)((char *)v1 + v3);
  if (v10 >= 0.0)
  {
    double v13 = 0.0;
    if (v10 <= 0.0) {
      goto LABEL_18;
    }
    double v11 = (float)(v10 - v6);
    float v12 = v8 - v6;
  }
  else
  {
    double v11 = (float)(v10 - v8);
    float v12 = v6 - v8;
  }
  double v13 = v11 / v12;
LABEL_18:
  id v14 = self;
  [v14 setDisableActions:1];
  [v9 setStrokeEnd:v13];
  [v14 setDisableActions:0];
  if (a1)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [self animationWithKeyPath:v15];

    id v17 = v16;
    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v17 setFromValue:isa];

    Class v19 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v17 setToValue:v19];

    [v17 setMass:2.0];
    [v17 setStiffness:300.0];
    [v17 setDamping:50.0];
    [v17 setDuration:0.8];
    [v9 addAnimation:v17 forKey:0];
  }
  float v20 = *(float *)((char *)v1 + v3);
  if (v20 == 0.0)
  {
    [v9 opacity];
    if (v21 > 0.5)
    {
      float v22 = 0.0;
LABEL_27:
      sub_1000841A0(v22);
      return;
    }
    float v20 = *(float *)((char *)v1 + v3);
  }
  if (v20 != 0.0)
  {
    [v9 opacity];
    if (v23 < 0.5)
    {
      float v22 = 1.0;
      goto LABEL_27;
    }
  }
}

void sub_1000841A0(float a1)
{
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B1F40;
  uint64_t v4 = swift_isaMask;
  id v5 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x80));
  *(void *)(inited + 32) = v5;
  float v6 = *(void **)((char *)v1 + *(void *)((*v1 & v4) + 0x78));
  *(void *)(inited + 40) = v6;
  uint64_t v27 = inited;
  specialized Array._endMutation()();
  unint64_t v7 = v27 & 0xC000000000000001;
  if ((v27 & 0xC000000000000001) != 0 || *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    float v8 = self;
    id v9 = v5;
    id v10 = v6;
    if (v7) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v27 + 32);
    }
    double v13 = v11;
    *(float *)&double v12 = a1;
    [v11 setOpacity:v12];
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v8 animationWithKeyPath:v14];

    id v16 = v15;
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [v16 setFromValue:isa];

    Class v18 = Int._bridgeToObjectiveC()().super.super.isa;
    [v16 setToValue:v18];

    [v16 setCumulative:1];
    [v13 addAnimation:v16 forKey:0];

    if (v7) {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v19 = *(id *)(v27 + 40);
    }
    float v21 = v19;
    *(float *)&double v20 = a1;
    [v19 setOpacity:v20];
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v8 animationWithKeyPath:v22];

    id v24 = v23;
    Class v25 = Int._bridgeToObjectiveC()().super.super.isa;
    [v24 setFromValue:v25];

    Class v26 = Int._bridgeToObjectiveC()().super.super.isa;
    [v24 setToValue:v26];

    [v24 setCumulative:1];
    [v21 addAnimation:v24 forKey:0];
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100084498(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v42 - v9;
  __chkstk_darwin(v11);
  double v13 = (char *)&v42 - v12;
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  id v17 = (char *)&v42 - v16;
  id v43 = a1;
  id v18 = [a1 service:v15];
  id v19 = [v18 uniqueIdentifier];

  double v20 = v17;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  float v21 = (void *)(a2 + 16);
  swift_beginAccess();
  if (*(void *)(*(void *)(a2 + 16) + 16)
    && (swift_bridgeObjectRetain(), sub_10007C4F0((uint64_t)v17), char v23 = v22, swift_bridgeObjectRelease(), (v23 & 1) != 0))
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v20, v4);
    id v24 = sub_10001D220();
    Class v25 = sub_100034280(v45);
    if (*v26)
    {
      id v27 = [v43 trackerUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_unknownObjectWeakInit();
      uint64_t v28 = swift_unknownObjectWeakAssign();
      sub_1000437B4(v28, (uint64_t)v44);
      v44[8] = 0;
      sub_1000653DC((uint64_t)v44, (uint64_t)v13);
    }
    ((void (*)(void *, void))v25)(v45, 0);
    id v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v7, v4);
    ((void (*)(char *, void))v24)(v46, 0);
    uint64_t v30 = v20;
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    id v42 = v20;
    v31(v13, v20, v4);
    sub_100006730(&qword_1000E72B8);
    id v32 = (int *)(sub_100006730(&qword_1000E5DC8) - 8);
    unint64_t v33 = (*(unsigned __int8 *)(*(void *)v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v32 + 80);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1000B2000;
    unint64_t v35 = v34 + v33;
    uint64_t v36 = v35 + v32[14];
    id v37 = [v43 trackerUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v35, v10, v4);
    swift_unknownObjectWeakInit();
    uint64_t v38 = swift_unknownObjectWeakAssign();
    sub_1000437B4(v38, v36);
    unint64_t v39 = sub_100033160(v34);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45[0] = *v21;
    void *v21 = 0x8000000000000000;
    sub_10003F148(v39, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    void *v21 = v45[0];
    swift_bridgeObjectRelease();
    id v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v13, v4);
    swift_endAccess();
    uint64_t v30 = v42;
  }
  return ((uint64_t (*)(char *, uint64_t))v29)(v30, v4);
}

double sub_100084950()
{
  uint64_t v1 = sub_10004B8A0(*v0);
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006730(&qword_1000E4B50);
  uint64_t v2 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v2 + 16) = xmmword_1000B2000;
  *(void *)(v2 + 32) = v1;
  *(void *)(v2 + 40) = &off_1000CB428;
  return result;
}

char *sub_1000849B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ClimateZone();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper] = 0;
  sub_10000ABC4(a1, (uint64_t)v6);
  *(void *)&v1[OBJC_IVAR____TtC7Climate20ClimateStatusBarView_temperatureIndicator] = 0;
  sub_10000ABC4((uint64_t)v6, (uint64_t)&v1[OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone]);
  unint64_t v7 = (objc_class *)type metadata accessor for ClimateStatusBarView();
  v17.receiver = v1;
  v17.super_class = v7;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100057C04((uint64_t)v6);
  uint64_t v9 = (char *)v8;
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v10 = &v9[OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone];
  swift_beginAccess();
  uint64_t v11 = *(void **)&v10[*(int *)(v4 + 36)];
  id v12 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneTargetTemperatureStepper());
  double v13 = sub_10002766C(v11, 0, 0);
  sub_10008BF7C(v13);
  uint64_t v14 = *(void **)&v9[OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper];
  *(void *)&v9[OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper] = v13;

  sub_100057C04(a1);
  return v9;
}

void sub_100084B4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper;
  uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC7Climate27ClimateRegularStatusBarView_stepper);
  if (v3)
  {
    uint64_t v4 = v0 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
    swift_beginAccess();
    uint64_t v5 = *(void **)(v4 + *(int *)(type metadata accessor for ClimateZone() + 28));
    uint64_t v6 = (id *)&v3[OBJC_IVAR____TtC7Climate25ClimateZoneServiceStepper_temperature];
    swift_beginAccess();
    id v7 = *v6;
    id v8 = v3;
    id v9 = v5;
    [v7 unregisterObserver:v8];
    id v10 = *v6;
    id *v6 = v9;
    id v11 = v9;

    [*v6 registerObserver:v8];
  }
  else
  {
    uint64_t v12 = v0 + OBJC_IVAR____TtC7Climate20ClimateStatusBarView_climateZone;
    swift_beginAccess();
    double v13 = *(void **)(v12 + *(int *)(type metadata accessor for ClimateZone() + 28));
    id v14 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneTargetTemperatureStepper());
    double v15 = sub_10002766C(v13, 0, 0);
    sub_10008BF7C(v15);
    id v11 = *(id *)(v1 + v2);
    *(void *)(v1 + v2) = v15;
  }
}

void sub_100084CB0()
{
}

id sub_100084CC0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateRegularStatusBarView();
  return [super dealloc];
}

uint64_t sub_100084D08()
{
  return type metadata accessor for ClimateRegularStatusBarView();
}

uint64_t type metadata accessor for ClimateRegularStatusBarView()
{
  uint64_t result = qword_1000E72E8;
  if (!qword_1000E72E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100084D5C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_100084DA0()
{
  return sub_100082690();
}

uint64_t sub_100084DCC()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue + 1) != 1) {
    return *v1;
  }
  id v2 = *(id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_range);
  CAFRange.minimumValue<A>()();

  uint64_t result = v4;
  *uint64_t v1 = v4;
  v1[1] = 0;
  return result;
}

float sub_100084E50()
{
  return (float)[*(id *)(v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan) fanLevel];
}

char *sub_100084E80(void *a1, unsigned __int8 a2)
{
  *(_WORD *)&v2[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue] = 256;
  uint64_t v5 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton;
  id v6 = objc_allocWithZone((Class)type metadata accessor for ClimateStepperPowerButton());
  id v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  *(void *)&v7[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan] = a1;
  id v8 = objc_allocWithZone((Class)type metadata accessor for ClimateFanButton());
  id v9 = a1;
  sub_100082818(v9, a2);
  uint64_t v10 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fanButton;
  *(void *)&v7[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fanButton] = v11;

  uint64_t v12 = ClimateStepper.init(primaryButton:axis:range:)(*(id *)&v7[v10], 0, [v9 fanLevelRange]);
  [v9 registerObserver:v12];
  sub_100084FF8();
  double v13 = v12;
  ClimateStepper.updatePresentation()();

  unsigned __int8 v14 = sub_100085BD4();
  double v15 = (unsigned __int8 *)&v13[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue];
  *double v15 = v14;
  v15[1] = 0;
  unsigned __int8 v16 = sub_100084DCC();
  sub_1000825B0((float)v16);
  sub_1000858A0();

  return v13;
}

id sub_100084FF8()
{
  uint64_t v1 = *(char **)&v0[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton];
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = (uint64_t *)&v1[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = (uint64_t)sub_10008636C;
  v3[1] = v2;
  sub_100005690(v4);
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v6 = (uint64_t (**)())&v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  id *v6 = sub_100086374;
  v6[1] = (uint64_t (*)())v5;
  sub_100005690(v7);
  [v0 addSubview:v1];
  id v8 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000B20F0;
  id v10 = [v1 leadingAnchor];
  id v11 = [v0 leadingAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v9 + 32) = v12;
  id v13 = [v1 trailingAnchor];
  id v14 = [v0 trailingAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v9 + 40) = v15;
  id v16 = [v1 topAnchor];
  id v17 = [v0 topAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17];

  *(void *)(v9 + 48) = v18;
  id v19 = [v1 bottomAnchor];
  id v20 = [v0 bottomAnchor];
  id v21 = [v19 constraintEqualToAnchor:v20];

  *(void *)(v9 + 56) = v21;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 activateConstraints:isa, v9];

  return [v1 setAlpha:0.0];
}

void sub_100085328()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan;
    unsigned int v3 = [*(id *)(Strong + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan) hasOn];
    uint64_t v4 = *(void **)&v1[v2];
    if (v3)
    {
      [v4 setOn:1];
    }
    else if (![v4 fanLevel])
    {
      id v5 = *(id *)&v1[v2];
      id v6 = [v5 fanLevelRange];
      unsigned int v7 = [v6 minimumValue];

      id v8 = [*(id *)&v1[v2] fanLevelRange];
      unsigned int v9 = [v8 stepValue];

      if (((v7 + v9) >> 8))
      {
        __break(1u);
        return;
      }
      [v5 setFanLevel:(v7 + v9)];
    }
    ClimateStepper.updatePresentation()();
  }
}

uint64_t sub_100085460()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = (void *)Strong;
  uint64_t v2 = sub_100082690();

  return v2;
}

void sub_1000854D0()
{
  uint64_t v0 = sub_100082690() & 0x1A;
  uint64_t v1 = self;
  uint64_t v2 = &selRef_systemGreenColor;
  if (v0 != 2) {
    uint64_t v2 = &selRef_systemWhiteColor;
  }
  id v3 = [v1 *v2];
  id v4 = [self systemWhiteColor];
  id v5 = [v3 colorWithAlphaComponent:0.25];
  id v6 = v3;
  sub_1000823F0(v4, v5, v3, (uint64_t)&_swiftEmptyDictionarySingleton);
}

void sub_1000855BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CAFRange.StepDirection();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  unsigned int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan;
  unsigned int v9 = [*(id *)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan) fanLevel:v5];
  id v10 = [*(id *)(v1 + v8) fanLevelRange];
  unsigned int v11 = [v10 stepValue];

  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v12 == enum case for CAFRange.StepDirection.up(_:))
  {
    id v13 = *(id *)(v1 + v8);
    id v14 = [v13 fanLevelRange];
    unsigned int v15 = [v14 maximumValue];

    if ((((v9 + v11) >> 8) & 1) == 0)
    {
      if ((v9 + v11) >= v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = (v9 + v11);
      }
LABEL_11:
      [v13 setFanLevel:v16];

      return;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  if (v12 == enum case for CAFRange.StepDirection.down(_:))
  {
    id v13 = *(id *)(v1 + v8);
    id v17 = [v13 fanLevelRange];
    unsigned int v18 = [v17 minimumValue];

    if (((v9 - v11) & 0xFFFFFF00) == 0)
    {
      if ((v9 - v11) <= v18) {
        uint64_t v16 = v18;
      }
      else {
        uint64_t v16 = (v9 - v11);
      }
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1000857FC()
{
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(_WORD *)&v1[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue] = 256;
  uint64_t v2 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton;
  *(void *)&v1[v2] = [objc_allocWithZone((Class)type metadata accessor for ClimateStepperPowerButton()) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000858A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fanButton);
  if ((sub_100082690() & 0x18) != 0)
  {
    [*(id *)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton) setAlpha:0.0];
    [v2 setAlpha:1.0];
    uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
    swift_beginAccess();
    uint64_t v4 = *v3;
    *uint64_t v3 = v2;
    id v5 = v2;
  }
  else
  {
    uint64_t v6 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan;
    if ((![*(id *)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan) hasOn]
       || [*(id *)(v1 + v6) on])
      && [*(id *)(v1 + v6) fanLevel])
    {
      [*(id *)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton) setAlpha:0.0];
      [v2 setAlpha:1.0];
      unsigned int v7 = (void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
      swift_beginAccess();
      uint64_t v8 = *v7;
      char *v7 = v2;
      id v9 = v2;

      [*(id *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton) setAlpha:1.0];
      [*(id *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton) setAlpha:1.0];
    }
    else
    {
      id v10 = *(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton);
      [v10 setAlpha:1.0];
      unsigned int v11 = (void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
      swift_beginAccess();
      int v12 = *v11;
      *unsigned int v11 = v10;
      id v13 = v10;

      [v2 setAlpha:0.0];
      [*(id *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton) setAlpha:0.0];
      [*(id *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton) setAlpha:0.0];
    }
  }
}

void sub_100085ACC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_powerButton);
}

id sub_100085B1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateFanServiceStepper();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateFanServiceStepper()
{
  return self;
}

id sub_100085BD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan;
  unsigned int v3 = [*(id *)&v0[OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan] fanLevel];
  uint64_t v4 = OBJC_IVAR____TtC7Climate14ClimateStepper_range;
  id v5 = *(id *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_range];
  CAFRange.maximumValue<A>()();

  if (v24 >= v3)
  {
    unsigned int v11 = [*(id *)&v1[v2] fanLevel];
    id v12 = *(id *)&v1[v4];
    CAFRange.minimumValue<A>()();

    if (v11 >= v23)
    {
      return [*(id *)&v1[v2] fanLevel];
    }
    else
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      id v13 = qword_1000EA798;
      id v14 = v1;
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 16908800;
        [*(id *)&v1[v2] fanLevel];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 5) = 258;
        id v17 = [*(id *)&v1[v4] minimum];
        [v17 unsignedCharValue];

        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v15, "fanLevel value is out of bound. fanLevel: %{public}hhu, min range %{public}hhu", (uint8_t *)v16, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      id v20 = *(id *)&v1[v4];
      CAFRange.minimumValue<A>()();

      return (id)v22;
    }
  }
  else
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v6 = qword_1000EA798;
    unsigned int v7 = v1;
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 16908800;
      [*(id *)&v1[v2] fanLevel];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 5) = 258;
      id v10 = [*(id *)&v1[v4] maximum];
      [v10 unsignedCharValue];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "fanLevel value is out of bound. fanLevel: %{public}hhu, max range %{public}hhu", (uint8_t *)v9, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
    id v18 = *(id *)&v1[v4];
    CAFRange.maximumValue<A>()();

    return (id)v21;
  }
}

void sub_1000860D4()
{
  uint64_t v1 = *(void **)(*v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper_fan);
  sub_100007310(0, (unint64_t *)&unk_1000E7AA0);
  id v2 = v1;
  CAFPositioned.layoutKey.getter();
}

void sub_100086160()
{
  uint64_t v1 = v0;
  ClimateStepper.updatePresentation()();
  if ((sub_100082690() & 0x18) != 0)
  {
    id v2 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_range) minimum];
    unsigned __int8 v3 = [v2 unsignedCharValue];

    uint64_t v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue);
    *uint64_t v4 = v3;
    v4[1] = 0;
    unsigned __int8 v5 = sub_100084DCC();
    sub_1000825B0((float)v5);
  }
  else
  {
    unsigned __int8 v6 = sub_100085BD4();
    unsigned int v7 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue);
    unsigned __int8 *v7 = v6;
    v7[1] = 0;
    unsigned __int8 v8 = sub_100084DCC();
    sub_1000825B0((float)v8);
    sub_1000858A0();
  }

  sub_1000858A0();
}

void sub_10008625C()
{
  uint64_t v1 = v0;
  ClimateStepper.updatePresentation()();
  if ((sub_100082690() & 0x18) != 0)
  {
    id v2 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_range) minimum];
    unsigned __int8 v3 = [v2 unsignedCharValue];
  }
  else
  {
    unsigned __int8 v3 = sub_100085BD4();
  }
  uint64_t v4 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Climate24ClimateFanServiceStepper____lazy_storage___currentValue);
  *uint64_t v4 = v3;
  v4[1] = 0;
  unsigned __int8 v5 = sub_100084DCC();
  sub_1000825B0((float)v5);
  sub_1000858A0();

  sub_1000858A0();
}

uint64_t sub_100086334()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008636C()
{
}

uint64_t sub_100086374()
{
  return sub_100085460();
}

void sub_10008637C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730(&qword_1000E59C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAUBaselineAnchor();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned __int8 v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = self;
  id v10 = (uint64_t *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButtonConstraints];
  swift_beginAccess();
  uint64_t v11 = sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 deactivateConstraints:isa];

  CAUVehicleLayoutInfo.baselineAnchor.getter();
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v47[1] = v11;
  if (v13 == 1)
  {
    sub_10000A404((uint64_t)v4, &qword_1000E59C0);
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1000B1F40;
    os_log_type_t v15 = *(void **)&v1[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton];
    id v16 = [v15 centerYAnchor];
    id v17 = [v1 centerYAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17];

    *(void *)(v14 + 32) = v18;
    id v19 = [v15 centerXAnchor];
    id v20 = [v1 centerXAnchor];
    id v21 = [v19 constraintEqualToAnchor:v20];

    *(void *)(v14 + 40) = v21;
    uint64_t v48 = v14;
    specialized Array._endMutation()();
    uint64_t *v10 = v48;
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v47[0] = v9;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  int v22 = CAUBaselineAnchor.x.getter();
  int v23 = CAUVehicleLayoutInfo.x.getter();
  int v24 = v22 - v23;
  if (__OFSUB__(v22, v23))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v25 = OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale;
  double v26 = *(double *)&v1[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale];
  int v27 = CAUBaselineAnchor.y.getter();
  int v28 = CAUVehicleLayoutInfo.y.getter();
  if (__OFSUB__(v27, v28))
  {
LABEL_17:
    __break(1u);
    return;
  }
  double v29 = v26 * (double)v24 + -32.5;
  double v30 = *(double *)&v1[v25] * (double)(v27 - v28) + -32.5;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1000B1F40;
  os_log_type_t v15 = *(void **)&v1[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton];
  id v32 = [v15 leftAnchor];
  id v33 = [v1 leftAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33 constant:v29];

  *(void *)(v31 + 32) = v34;
  id v35 = [v15 topAnchor];
  id v36 = [v1 topAnchor];
  id v37 = [v35 constraintEqualToAnchor:v36 constant:v30];

  *(void *)(v31 + 40) = v37;
  uint64_t v48 = v31;
  specialized Array._endMutation()();
  uint64_t *v10 = v48;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v9 = (void *)v47[0];
LABEL_6:
  id v38 = [v15 widthAnchor];
  id v39 = [v38 constraintEqualToConstant:65.0];

  id v40 = [v15 heightAnchor];
  id v41 = [v40 constraintEqualToConstant:65.0];

  swift_beginAccess();
  if (!((unint64_t)*v10 >> 62))
  {
    uint64_t v42 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v43 = v42 + 2;
    if (!__OFADD__(v42, 2)) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v43 = v46 + 2;
  if (__OFADD__(v46, 2)) {
    goto LABEL_14;
  }
LABEL_8:
  sub_10009CCD4(v43);
  specialized Array._endMutation()();
  id v39 = v39;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_15:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v44 = v41;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();

  swift_bridgeObjectRetain();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 activateConstraints:v45];
}

uint64_t sub_100086A1C()
{
  return sub_100086A74(&OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___yConstraint, (SEL *)&selRef_topAnchor, (int (*)(void))&CAUVehicleLayoutInfo.y.getter);
}

uint64_t sub_100086A48()
{
  return sub_100086A74(&OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___xConstraint, (SEL *)&selRef_leftAnchor, (int (*)(void))&CAUVehicleLayoutInfo.x.getter);
}

uint64_t sub_100086A74(uint64_t *a1, SEL *a2, int (*a3)(void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)&v3[*a1];
  if (v5)
  {
    id v6 = *(id *)&v3[*a1];
LABEL_5:
    id v16 = v5;
    return (uint64_t)v6;
  }
  uint64_t v9 = v3;
  id v10 = [v3 superview];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [v3 *a2];
    id v13 = [v11 *a2];
    id v14 = [v12 constraintEqualToAnchor:v13 constant:*(double *)&v3[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale] * (double)a3()];

    os_log_type_t v15 = *(void **)&v9[v4];
    *(void *)&v9[v4] = v14;
    id v6 = v14;

    uint64_t v5 = 0;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100086BE4()
{
  return sub_100086C34(&OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___heightConstraint, (SEL *)&selRef_heightAnchor, (int (*)(void))&CAUVehicleLayoutInfo.height.getter);
}

id sub_100086C0C()
{
  return sub_100086C34(&OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___widthConstraint, (SEL *)&selRef_widthAnchor, (int (*)(void))&CAUVehicleLayoutInfo.width.getter);
}

id sub_100086C34(uint64_t *a1, SEL *a2, int (*a3)(void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)&v3[*a1];
  if (v5)
  {
    id v6 = *(id *)&v3[*a1];
  }
  else
  {
    unsigned __int8 v8 = v3;
    id v9 = [v3 *a2];
    id v10 = [v9 constraintEqualToConstant:*(double *)&v3[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale] * (double)a3()];

    uint64_t v11 = *(void **)&v8[v4];
    *(void *)&v8[v4] = v10;
    id v6 = v10;

    uint64_t v5 = 0;
  }
  id v12 = v5;
  return v6;
}

void sub_100086CFC()
{
  uint64_t v0 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (char *)Strong;
    uint64_t v8 = OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton;
    uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton);
    char v10 = *(unsigned char *)(v9 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn);
    uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature);
    [v11 targetTemperatureRestricted];
    [v11 targetTemperatureInvalid];
    [v11 targetTemperatureDisabled];
    if ((v10 & 1) == 0)
    {
      id v12 = *(void **)&v7[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeZoneTracker];
      sub_10000ABC4((uint64_t)&v7[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_zone], (uint64_t)v5);
      uint64_t v13 = type metadata accessor for ClimateZone();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 0, 1, v13);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_10000D070((uint64_t)v5, (uint64_t)v2, (uint64_t *)&unk_1000E5530);
      id v14 = v12;
      static Published.subscript.setter();
      sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E5530);
      os_log_type_t v15 = *(unsigned char **)&v7[v8];
      char v16 = v15[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn];
      v15[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn] = 1;
      id v17 = v15;
      sub_10000D418(v16);
      sub_10000E930();

      uint64_t v7 = v17;
    }
  }
}

void sub_100086F1C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v90 = a3;
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  id v84 = &v71[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v89 = sub_100006730((uint64_t *)&unk_1000E5520);
  __chkstk_darwin(v89);
  uint64_t v8 = &v71[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v11 = &v71[-v10];
  uint64_t v12 = sub_100006730((uint64_t *)&unk_1000E5530);
  __chkstk_darwin(v12 - 8);
  id v87 = &v71[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  char v16 = &v71[-v15];
  uint64_t v17 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v17 - 8);
  id v19 = &v71[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  id v85 = &v71[-v21];
  __chkstk_darwin(v22);
  id v86 = &v71[-v23];
  __chkstk_darwin(v24);
  id v88 = &v71[-v25];
  __chkstk_darwin(v26);
  int v28 = &v71[-v27];
  __chkstk_darwin(v29);
  uint64_t v31 = &v71[-v30];
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_10000D070(a1, (uint64_t)v16, (uint64_t *)&unk_1000E5530);
    uint64_t v32 = type metadata accessor for ClimateZone();
    uint64_t v33 = *(void *)(v32 - 8);
    id v34 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v33 + 48);
    uint64_t v78 = v33 + 48;
    id v79 = v34;
    unsigned int v35 = v34(v16, 1, v32);
    uint64_t v81 = a1;
    id v82 = v8;
    uint64_t v80 = v32;
    if (v35 == 1)
    {
      sub_10000A404((uint64_t)v16, (uint64_t *)&unk_1000E5530);
      id v36 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v5[7];
      unint64_t v37 = (unint64_t)(v5 + 7) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v36(v31, 1, 1, v4);
      id v38 = (void (*)(uint64_t, uint64_t, uint64_t))v5[2];
    }
    else
    {
      id v38 = (void (*)(uint64_t, uint64_t, uint64_t))v5[2];
      v38((uint64_t)v31, (uint64_t)v16, v4);
      sub_100057C04((uint64_t)v16);
      id v36 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v5[7];
      unint64_t v37 = (unint64_t)(v5 + 7) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v36(v31, 0, 1, v4);
    }
    uint64_t v74 = v38;
    v38((uint64_t)v28, (uint64_t)v90, v4);
    unint64_t v75 = v37;
    v36(v28, 0, 1, v4);
    uint64_t v39 = (uint64_t)&v11[*(int *)(v89 + 48)];
    sub_10000D070((uint64_t)v31, (uint64_t)v11, (uint64_t *)&unk_1000E7C60);
    sub_10000D070((uint64_t)v28, v39, (uint64_t *)&unk_1000E7C60);
    id v83 = v5;
    id v40 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v5[6];
    unsigned int v41 = v40(v11, 1, v4);
    uint64_t v76 = (void (*)(uint64_t, void, uint64_t, uint64_t))v36;
    uint64_t v77 = v19;
    if (v41 == 1)
    {
      sub_10000A404((uint64_t)v28, (uint64_t *)&unk_1000E7C60);
      sub_10000A404((uint64_t)v31, (uint64_t *)&unk_1000E7C60);
      if (v40((unsigned char *)v39, 1, v4) == 1)
      {
        sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E7C60);
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v42 = v88;
      sub_10000D070((uint64_t)v11, (uint64_t)v88, (uint64_t *)&unk_1000E7C60);
      if (v40((unsigned char *)v39, 1, v4) != 1)
      {
        char v73 = v40;
        uint64_t v49 = v83;
        id v50 = v84;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v83[4])(v84, v39, v4);
        sub_10000734C();
        int v72 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v51 = v49;
        id v40 = v73;
        id v52 = (void (*)(unsigned char *, uint64_t))v51[1];
        v52(v50, v4);
        sub_10000A404((uint64_t)v28, (uint64_t *)&unk_1000E7C60);
        sub_10000A404((uint64_t)v31, (uint64_t *)&unk_1000E7C60);
        v52(v88, v4);
        sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E7C60);
        if (v72) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
      sub_10000A404((uint64_t)v28, (uint64_t *)&unk_1000E7C60);
      sub_10000A404((uint64_t)v31, (uint64_t *)&unk_1000E7C60);
      ((void (*)(unsigned char *, uint64_t))v83[1])(v42, v4);
    }
    sub_10000A404((uint64_t)v11, (uint64_t *)&unk_1000E5520);
LABEL_11:
    uint64_t v43 = *(unsigned char **)&Strong[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton];
    uint64_t v44 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn;
    int v45 = v43[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn];
    uint64_t v46 = *(void **)&v43[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature];
    [v46 targetTemperatureRestricted];
    [v46 targetTemperatureInvalid];
    [v46 targetTemperatureDisabled];
    if (v45 == 1)
    {
      char v47 = v43[v44];
      v43[v44] = 0;
      uint64_t v48 = v43;
LABEL_26:
      unint64_t v70 = v48;
      sub_10000D418(v47);
      sub_10000E930();

      uint64_t Strong = v70;
      goto LABEL_27;
    }
LABEL_14:
    id v53 = v87;
    sub_10000D070(v81, (uint64_t)v87, (uint64_t *)&unk_1000E5530);
    id v54 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v40;
    if (v79(v53, 1, v80) == 1)
    {
      sub_10000A404((uint64_t)v53, (uint64_t *)&unk_1000E5530);
      uint64_t v55 = v76;
      uint64_t v56 = (uint64_t)v77;
      uint64_t v58 = (uint64_t)v85;
      uint64_t v57 = (uint64_t)v86;
      id v59 = v74;
      v76((uint64_t)v86, 1, 1, v4);
    }
    else
    {
      uint64_t v57 = (uint64_t)v86;
      id v59 = v74;
      v74((uint64_t)v86, (uint64_t)v53, v4);
      sub_100057C04((uint64_t)v53);
      uint64_t v55 = v76;
      uint64_t v56 = (uint64_t)v77;
      uint64_t v58 = (uint64_t)v85;
      v76(v57, 0, 1, v4);
    }
    v59(v58, (uint64_t)v90, v4);
    v55(v58, 0, 1, v4);
    uint64_t v60 = (uint64_t)v82;
    uint64_t v61 = (uint64_t)&v82[*(int *)(v89 + 48)];
    sub_10000D070(v57, (uint64_t)v82, (uint64_t *)&unk_1000E7C60);
    sub_10000D070(v58, v61, (uint64_t *)&unk_1000E7C60);
    if (v54(v60, 1, v4) == 1)
    {
      sub_10000A404(v58, (uint64_t *)&unk_1000E7C60);
      sub_10000A404(v57, (uint64_t *)&unk_1000E7C60);
      if (v54(v61, 1, v4) == 1)
      {
        sub_10000A404(v60, (uint64_t *)&unk_1000E7C60);
LABEL_24:
        id v66 = *(unsigned char **)&Strong[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton];
        uint64_t v67 = OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn;
        char v68 = v66[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_isOn];
        id v69 = *(void **)&v66[OBJC_IVAR____TtC7Climate43ClimateTargetTemperatureZoneSelectionButton_temperature];
        [v69 targetTemperatureRestricted];
        [v69 targetTemperatureInvalid];
        [v69 targetTemperatureDisabled];
        if ((v68 & 1) == 0)
        {
          char v47 = v66[v67];
          v66[v67] = 1;
          uint64_t v48 = v66;
          goto LABEL_26;
        }
LABEL_27:

        return;
      }
    }
    else
    {
      sub_10000D070(v60, v56, (uint64_t *)&unk_1000E7C60);
      if (v54(v61, 1, v4) != 1)
      {
        uint64_t v63 = v83;
        uint64_t v62 = v84;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v83[4])(v84, v61, v4);
        sub_10000734C();
        char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v65 = (void (*)(unsigned char *, uint64_t))v63[1];
        v65(v62, v4);
        sub_10000A404(v58, (uint64_t *)&unk_1000E7C60);
        sub_10000A404(v57, (uint64_t *)&unk_1000E7C60);
        v65((unsigned char *)v56, v4);
        sub_10000A404(v60, (uint64_t *)&unk_1000E7C60);
        if ((v64 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      sub_10000A404(v58, (uint64_t *)&unk_1000E7C60);
      sub_10000A404(v57, (uint64_t *)&unk_1000E7C60);
      ((void (*)(uint64_t, uint64_t))v83[1])(v56, v4);
    }
    sub_10000A404(v60, (uint64_t *)&unk_1000E5520);
    goto LABEL_27;
  }
}

void sub_100087930()
{
  id v1 = sub_100086BE4();
  int v2 = CAUVehicleLayoutInfo.height.getter();
  uint64_t v3 = OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale;
  [v1 setConstant:*(double *)(v0 + OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale) * (double)v2];

  id v4 = sub_100086C0C();
  [v4 setConstant:*(double *)(v0 + v3) * (double)(int)CAUVehicleLayoutInfo.width.getter()];

  uint64_t v5 = (void *)sub_100086A1C();
  [v5 setConstant:*(double *)(v0 + v3) * (double)(int)CAUVehicleLayoutInfo.y.getter()];

  uint64_t v6 = (void *)sub_100086A48();
  [v6 setConstant:*(double *)(v0 + v3) * (double)(int)CAUVehicleLayoutInfo.x.getter()];

  sub_10008637C();
}

id sub_100087A74()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZonePositionView();
  return [super dealloc];
}

uint64_t sub_100087BAC()
{
  return type metadata accessor for ClimateZonePositionView();
}

uint64_t type metadata accessor for ClimateZonePositionView()
{
  uint64_t result = qword_1000E73B0;
  if (!qword_1000E73B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100087C00()
{
  uint64_t result = type metadata accessor for ClimateZone();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CAUVehicleLayoutInfo();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void sub_100087D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for ClimateZone();
  uint64_t v66 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v67 = v10;
  uint64_t v68 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006730((uint64_t *)&unk_1000E5450);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006730(&qword_1000E6CB8);
  uint64_t v71 = *(void *)(v14 - 8);
  uint64_t v72 = v14;
  __chkstk_darwin(v14);
  char v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006730(&qword_1000E6D28);
  uint64_t v61 = *(void *)(v17 - 8);
  uint64_t v62 = v17;
  __chkstk_darwin(v17);
  id v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100006730(&qword_1000E6D30);
  uint64_t v64 = *(void *)(v20 - 8);
  uint64_t v65 = v20;
  __chkstk_darwin(v20);
  uint64_t v63 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v23 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v23 = &_swiftEmptySetSingleton;
  }
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_cancellables] = v23;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButtonConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale] = 0x3FF0000000000000;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___yConstraint] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___xConstraint] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___heightConstraint] = 0;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___widthConstraint] = 0;
  sub_10000ABC4(a1, (uint64_t)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_zone]);
  uint64_t v24 = &v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeZoneTracker];
  *(void *)uint64_t v24 = a2;
  *((void *)v24 + 1) = a3;
  uint64_t v25 = &v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_layoutInfo];
  uint64_t v26 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v27 = *(void *)(v26 - 8);
  int v28 = *(void (**)(char *, uint64_t))(v27 + 16);
  uint64_t v69 = a4;
  uint64_t v60 = v26;
  v28(v25, a4);
  uint64_t v29 = *(int *)(v9 + 28);
  uint64_t v70 = a1;
  uint64_t v30 = *(void **)(a1 + v29);
  id v31 = objc_allocWithZone((Class)type metadata accessor for ClimateTargetTemperatureZoneSelectionButton());
  swift_unknownObjectRetain();
  uint64_t v32 = sub_10000DA28(v30);
  uint64_t v33 = OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton;
  *(void *)&v22[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton] = v32;
  int v34 = *((unsigned __int8 *)v32 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial);
  *((unsigned char *)v32 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial) = 1;
  if (v34 != 1)
  {
    unsigned int v35 = *(void **)((char *)v32 + OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView);
    id v36 = v32;
    [v35 removeFromSuperview];
    sub_10000E710();
  }
  id v37 = *(id *)&v22[v33];
  [v37 _setContinuousCornerRadius:32.5];

  id v38 = (objc_class *)type metadata accessor for ClimateZonePositionView();
  v74.receiver = v22;
  v74.super_class = v38;
  uint64_t v39 = (char *)objc_msgSendSuper2(&v74, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  [v39 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v40 = [v39 layer];
  LODWORD(v41) = 0.5;
  [v40 setShadowOpacity:v41];

  id v42 = [v39 layer];
  [v42 setShadowRadius:10.0];

  uint64_t v43 = *(char **)&v39[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButton];
  [v43 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v39 addSubview:v43];
  uint64_t v44 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int v45 = (uint64_t *)&v43[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v46 = *v45;
  *int v45 = (uint64_t)sub_100088794;
  v45[1] = v44;
  sub_100005690(v46);
  swift_beginAccess();
  sub_100006730((uint64_t *)&unk_1000E5E20);
  Published.projectedValue.getter();
  swift_endAccess();
  id v73 = [self mainRunLoop];
  uint64_t v47 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v13, 1, 1, v47);
  sub_100007310(0, (unint64_t *)&unk_1000E5470);
  sub_10000D02C(&qword_1000E6CD0, &qword_1000E6CB8);
  sub_10000CF84();
  uint64_t v48 = v72;
  Publisher.receive<A>(on:options:)();
  sub_10000A404((uint64_t)v13, (uint64_t *)&unk_1000E5450);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v48);
  id v49 = [self sharedApplication];
  id v50 = [v49 delegate];

  if (v50)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v51 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();

    swift_release();
    swift_release();
    sub_10000D02C(&qword_1000E6D38, &qword_1000E6D28);
    id v52 = v63;
    uint64_t v53 = v62;
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v19, v53);
    uint64_t v54 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v55 = v70;
    uint64_t v56 = v68;
    sub_10000ABC4(v70, v68);
    unint64_t v57 = (*(unsigned __int8 *)(v66 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v54;
    sub_10000D1A0(v56, v58 + v57);
    sub_10000D02C(&qword_1000E6D40, &qword_1000E6D30);
    uint64_t v59 = v65;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v59);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v69, v60);
    sub_100057C04(v55);
  }
  else
  {
    __break(1u);
  }
}

void sub_100088668()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v1 = (void *)sub_100022D90((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    unint64_t v1 = &_swiftEmptySetSingleton;
  }
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_cancellables] = v1;
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_activeButtonConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView_scale] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___yConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___xConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___heightConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Climate23ClimateZonePositionView____lazy_storage___widthConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10008875C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100088794()
{
}

uint64_t sub_1000887A4()
{
  unint64_t v1 = (int *)(type metadata accessor for ClimateZone() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1000888F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ClimateZone() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (unsigned char *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  sub_100086F1C(a1, v4, v5);
}

uint64_t sub_10008896C()
{
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x128))() & 0x1B) == 1) {
    uint64_t v2 = &OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor;
  }
  else {
    uint64_t v2 = &OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor;
  }
  uint64_t v3 = (char *)v0 + *v2;
  uint64_t v5 = (void *)*((void *)v3 + 1);
  uint64_t v4 = *((void *)v3 + 2);
  id v6 = *(id *)v3;
  id v7 = v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v9 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v10 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v11 = *(void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  *uint64_t v8 = v6;
  v8[1] = v7;
  v8[2] = v4;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v12 = v6;
  id v13 = v7;
  swift_bridgeObjectRetain_n();
  id v14 = v12;
  id v15 = v13;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  sub_10007C1D0(v4, v11);
  char v17 = v16;
  swift_bridgeObjectRelease();

  if ((v17 & 1) == 0) {
LABEL_9:
  }
    (*(void (**)(void))((swift_isaMask & *v1) + 0x230))();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_100088B54()
{
  ClimateButton.refreshColorConfig()();
  char v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x128))();
  if ((v1 & 2) != 0
    || (v1 & 0x19) != 1
    || (*((unsigned char *)v0 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial) & 1) != 0)
  {
    id result = *(id *)((char *)v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_highlightedBackgroundView);
    if (!result) {
      return result;
    }
    uint64_t v3 = 1;
  }
  else
  {
    id result = *(id *)((char *)v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_highlightedBackgroundView);
    if (!result) {
      return result;
    }
    uint64_t v3 = 0;
  }

  return [result setHidden:v3];
}

uint64_t sub_100088C1C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void *)((char *)v3 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  uint64_t v9 = *(void **)((char *)v3 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  uint64_t v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
  uint64_t v11 = *(void *)((char *)v3 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16);
  *uint64_t v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v12 = a1;
  id v13 = a2;
  swift_bridgeObjectRetain_n();
  id v14 = v12;
  id v15 = v13;
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  sub_10007C1D0(a3, v11);
  char v17 = v16;
  swift_bridgeObjectRelease();

  if ((v17 & 1) == 0) {
LABEL_6:
  }
    (*(void (**)(void))((swift_isaMask & *v4) + 0x228))();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_100088D90()
{
  char v1 = self;
  uint64_t v2 = v0;
  id result = (char *)[v1 _visualStylingProviderForRecipe:4 andCategory:2];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = OBJC_IVAR____TtC7Climate15ClimateOnButton_highlightedBackgroundView;
    id v6 = [result newAutomaticallyUpdatingViewWithStyle:4];

    *(void *)&v2[v5] = v6;
    id v7 = &v2[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    if (qword_1000E46C0 != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)qword_1000EA740;
    uint64_t v9 = *(void **)algn_1000EA748;
    uint64_t v10 = qword_1000EA750;
    *(void *)id v7 = qword_1000EA740;
    *((void *)v7 + 1) = v9;
    *((void *)v7 + 2) = v10;
    uint64_t v11 = &v2[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
    uint64_t v12 = qword_1000E46B8;
    id v13 = v8;
    id v14 = v9;
    swift_bridgeObjectRetain();
    if (v12 != -1) {
      swift_once();
    }
    id v15 = (void *)qword_1000EA728;
    char v16 = (void *)qword_1000EA730;
    uint64_t v17 = qword_1000EA738;
    *(void *)uint64_t v11 = qword_1000EA728;
    *((void *)v11 + 1) = v16;
    *((void *)v11 + 2) = v17;
    id v18 = v15;
    id v19 = v16;
    swift_bridgeObjectRetain();

    v42.receiver = v2;
    v42.super_class = (Class)type metadata accessor for ClimateOnButton();
    uint64_t v20 = (char *)[v42 init];
    uint64_t v21 = v20;
    uint64_t v22 = *(void **)&v20[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
    if (v22)
    {
      uint64_t v23 = *(void **)&v20[OBJC_IVAR____TtC7Climate15ClimateOnButton_highlightedBackgroundView];
      if (v23)
      {
        uint64_t v24 = v20;
        id v25 = v22;
        id v26 = v23;
        [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
        [v24 insertSubview:v26 aboveSubview:v25];
        uint64_t v27 = self;
        sub_100006730((uint64_t *)&unk_1000E4F10);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_1000B20F0;
        id v29 = [v26 topAnchor];
        id v30 = [v24 topAnchor];
        id v31 = [v29 constraintEqualToAnchor:v30];

        *(void *)(v28 + 32) = v31;
        id v32 = [v26 bottomAnchor];
        id v33 = [v24 bottomAnchor];
        id v34 = [v32 constraintEqualToAnchor:v33];

        *(void *)(v28 + 40) = v34;
        id v35 = [v26 leadingAnchor];
        id v36 = [v24 leadingAnchor];
        id v37 = [v35 constraintEqualToAnchor:v36];

        *(void *)(v28 + 48) = v37;
        id v38 = [v26 trailingAnchor];
        id v39 = [v24 trailingAnchor];
        id v40 = [v38 constraintEqualToAnchor:v39];

        *(void *)(v28 + 56) = v40;
        specialized Array._endMutation()();
        sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v27 activateConstraints:isa];
      }
    }
    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000891C0()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8);
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
  id v4 = *(id *)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  swift_bridgeObjectRelease();
}

id sub_100089250()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateOnButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateOnButton()
{
  return self;
}

void *sub_10008933C()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor);
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8);
  id v3 = v1;
  id v4 = v2;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100089394()
{
  char v1 = v0;
  uint64_t v2 = type metadata accessor for ClimateZone();
  *(void *)&double v3 = __chkstk_darwin(v2 - 8).n128_u64[0];
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews;
  [*(id *)&v1[OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews] removeFromSuperview];
  id v7 = [objc_allocWithZone((Class)type metadata accessor for ClimateGrid()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v8 = *(void **)&v1[v6];
  *(void *)&v1[v6] = v7;

  [v1 addSubview:*(void *)&v1[v6]];
  uint64_t v9 = (uint64_t)&v1[OBJC_IVAR____TtC7Climate19ClimateZoneControls_zone];
  swift_beginAccess();
  sub_10000ABC4(v9, (uint64_t)v5);
  sub_10005C3B4();
  uint64_t v11 = v10;
  sub_100057C04((uint64_t)v5);
  sub_1000894BC(v11);
  swift_bridgeObjectRelease();
  sub_100089D6C();
}

void sub_1000894BC(void *a1)
{
  id v49 = _swiftEmptyArrayStorage;
  id v50 = _swiftEmptyArrayStorage;
  long long v46 = xmmword_1000B20E0;
  id v44 = self;
  id v2 = [v44 sharedApplication];
  id v3 = [v2 delegate];

  if (!v3) {
    goto LABEL_81;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  uint64_t v4 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  int v5 = v4[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  if (v5 == 1) {
    uint64_t v6 = sub_10008A1D0((uint64_t)&off_1000CA3D8);
  }
  else {
    uint64_t v6 = (uint64_t)&off_1000CA3D8;
  }
  id v7 = &off_1000CA400;
  uint64_t v47 = (_UNKNOWN **)v6;
  uint64_t v48 = &off_1000CA400;
  uint64_t v8 = *(char **)(v6 + 16);
  if (!v8)
  {
    uint64_t v11 = 5;
LABEL_11:
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v11; ++i)
    {
      unsigned __int8 v13 = *((unsigned char *)v7 + i + 32);
      v45[0] = v13;
      sub_10008A28C(v45, a1, 1uLL, &v50, 0, 1, &v49);
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  for (uint64_t j = 0; j != v8; ++j)
  {
    unsigned __int8 v10 = j[v6 + 32];
    v45[0] = v10;
    sub_10008A28C(v45, a1, 0, &v50, 0, 1, &v49);
  }
  swift_bridgeObjectRelease();
  id v7 = v48;
  uint64_t v11 = (uint64_t)v48[2];
  if (v11) {
    goto LABEL_11;
  }
LABEL_14:
  sub_100006730(&qword_1000E7440);
  swift_arrayDestroy();
  id v14 = [v44 sharedApplication];
  id v15 = [v14 delegate];

  if (!v15)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  swift_dynamicCastClassUnconditional();
  char v16 = (char *)sub_10008EAA4();
  swift_unknownObjectRelease();
  uint64_t v17 = *(void *)&v16[OBJC_IVAR____TtC7Climate18ClimateCoordinator_requestContentManager];
  swift_retain();

  uint64_t v18 = v43 + OBJC_IVAR____TtC7Climate19ClimateZoneControls_zone;
  swift_beginAccess();
  uint64_t v19 = *(void *)(v18 + *(int *)(type metadata accessor for ClimateZone() + 20));
  if ((unint64_t)v19 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (!v20) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v20) {
      goto LABEL_30;
    }
  }
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_68;
  }
  for (uint64_t k = 0; k != v20; ++k)
  {
    if ((v19 & 0xC000000000000001) != 0) {
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v22 = *(id *)(v19 + 8 * k + 32);
    }
    uint64_t v23 = v22;
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
  }
LABEL_30:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    uint64_t v19 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19) {
      goto LABEL_32;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v17) {
      goto LABEL_73;
    }
LABEL_45:
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0
      && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
    {
      uint64_t v27 = _swiftEmptyArrayStorage[2];
      swift_retain();
      swift_retain();
      if (v27) {
        goto LABEL_48;
      }
      goto LABEL_70;
    }
LABEL_69:
    swift_retain();
    swift_retain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    if (v27)
    {
LABEL_48:
      if (v27 < 1)
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      for (uint64_t m = 0; m != v27; ++m)
      {
        if ((v19 & 0xC000000000000001) != 0) {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v29 = *(id *)(v19 + 8 * m + 32);
        }
        id v30 = v29;
        self;
        if (swift_dynamicCastObjCClass())
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      swift_release();
      if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      {
LABEL_60:
        uint64_t v31 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v31) {
          goto LABEL_61;
        }
        goto LABEL_72;
      }
LABEL_71:
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      if (v31)
      {
LABEL_61:
        if (v31 >= 1)
        {
          uint64_t v32 = 0;
          do
          {
            if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
              id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v33 = (id)_swiftEmptyArrayStorage[v32 + 4];
            }
            id v34 = v33;
            ++v32;
            swift_retain();
            CAFDeepLinkSetting.requestContentManager.setter();
          }
          while (v31 != v32);
          goto LABEL_72;
        }
        goto LABEL_80;
      }
LABEL_72:
      swift_bridgeObjectRelease_n();
      swift_release();
      goto LABEL_73;
    }
LABEL_70:
    swift_release();
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_60;
    }
    goto LABEL_71;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_44;
  }
LABEL_32:
  if (v19 < 1)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  for (uint64_t n = 0; n != v19; ++n)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = (id)_swiftEmptyArrayStorage[n + 4];
    }
    id v26 = v25;
    if ([v25 category] == 2)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = (uint64_t)_swiftEmptyArrayStorage;
  if (v17) {
    goto LABEL_45;
  }
LABEL_73:
  id v35 = v49;
  id v36 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v37 = [v44 sharedApplication];
  id v38 = [v37 delegate];

  if (!v38)
  {
LABEL_83:
    __break(1u);
    return;
  }
  swift_dynamicCastClassUnconditional();
  id v39 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if (_swiftEmptyArrayStorage)
  {
    id v40 = [_swiftEmptyArrayStorage automakerSettings];

    if (v40)
    {
      id v41 = [v40 settingsSections];

      if (v41)
      {
        sub_100007310(0, &qword_1000E6D48);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
    }
  }
  id v42 = *(id *)(v43 + OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews);
  sub_1000108D0((uint64_t)v36, (uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
}

void sub_100089D6C()
{
  char v1 = v0;
  id v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  uint64_t v4 = OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews;
  id v5 = [*(id *)&v1[OBJC_IVAR____TtC7Climate19ClimateZoneControls_zoneViews] topAnchor];
  id v6 = [v1 topAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [*(id *)&v1[v4] bottomAnchor];
  id v9 = [v1 bottomAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [*(id *)&v1[v4] leadingAnchor];
  id v12 = [v1 leadingAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  id v14 = [*(id *)&v1[v4] trailingAnchor];
  id v15 = [v1 trailingAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v3 + 56) = v16;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_10008A05C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZoneControls();
  return [super dealloc];
}

uint64_t sub_10008A0E0()
{
  return type metadata accessor for ClimateZoneControls();
}

uint64_t type metadata accessor for ClimateZoneControls()
{
  uint64_t result = qword_1000E7430;
  if (!qword_1000E7430) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008A134()
{
  uint64_t result = type metadata accessor for ClimateZone();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008A1D0(uint64_t result)
{
  unint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 31; ; --i)
  {
    if (v3 == i - 32) {
      goto LABEL_5;
    }
    unint64_t v6 = v1[2];
    if (v3 >= v6) {
      break;
    }
    if (i - 32 >= v6) {
      goto LABEL_12;
    }
    char v7 = *((unsigned char *)v1 + v3 + 32);
    char v8 = *((unsigned char *)v1 + i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10008212C(v1);
      unint64_t v1 = (void *)result;
    }
    *((unsigned char *)v1 + v3 + 32) = v8;
    *((unsigned char *)v1 + i) = v7;
LABEL_5:
    if (v4 == ++v3) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void sub_10008A28C(unsigned __int8 *a1, void *a2, unint64_t a3, void **a4, uint64_t a5, uint64_t a6, void **a7)
{
  id v90 = a7;
  uint64_t v91 = a6;
  uint64_t v94 = a5;
  id v92 = a4;
  uint64_t v11 = type metadata accessor for CAUFeatureFlag.Climate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CAUFeatureFlag();
  __chkstk_darwin(v15);
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_87;
  }
  if (a2[2] <= a3)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v81 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = v18;
  uint64_t v83 = v16;
  id v84 = v14;
  uint64_t v85 = v12;
  uint64_t v86 = v11;
  uint64_t v87 = v7;
  uint64_t v95 = *a1;
  unint64_t v93 = a3;
  uint64_t v19 = a2[a3 + 4];
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = 0;
    id v22 = _swiftEmptyArrayStorage;
    unint64_t v88 = (unint64_t)"atHeating";
    unint64_t v89 = (unint64_t)"off";
    while (2)
    {
      long long v96 = *(_OWORD *)(v19 + 16 * v21 + 32);
      uint64_t v23 = (void *)v96;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v25 = *((void *)&v96 + 1);
      id v26 = *(uint64_t (**)(uint64_t, uint64_t))(*((void *)&v96 + 1) + 8);
      id v27 = v23;
      unsigned __int8 v28 = v26(ObjectType, v25);
      unint64_t v29 = 0xE400000000000000;
      uint64_t v30 = v28;
      unint64_t v31 = 1953391990;
      switch(v30)
      {
        case 1:
          unint64_t v29 = v89 | 0x8000000000000000;
          unint64_t v31 = 0xD000000000000012;
          break;
        case 2:
          unint64_t v31 = 0x70706574536E6166;
          unint64_t v29 = 0xEA00000000007265;
          break;
        case 3:
          unint64_t v29 = 0xE800000000000000;
          unint64_t v31 = 0x65646F4D6F747561;
          break;
        case 4:
          unint64_t v31 = 0x7461654874616573;
          unint64_t v29 = 0xEB00000000676E69;
          break;
        case 5:
          unint64_t v29 = 0xE700000000000000;
          unint64_t v31 = 0x6E614674616573;
          break;
        case 6:
          unint64_t v31 = 0x7373614D74616573;
          unint64_t v29 = 0xEB00000000656761;
          break;
        case 7:
          unint64_t v31 = 0xD000000000000014;
          unint64_t v29 = v88 | 0x8000000000000000;
          break;
        case 8:
          unint64_t v31 = 0x736C6F72746E6F63;
          unint64_t v29 = 0xEC0000006B636F4CLL;
          break;
        case 9:
          unint64_t v29 = 0xE800000000000000;
          unint64_t v31 = 0x6B6E694C70656564;
          break;
        case 10:
          unint64_t v31 = 0x6C75637269636572;
          unint64_t v29 = 0xED00006E6F697461;
          break;
        case 11:
          unint64_t v29 = 0xE500000000000000;
          unint64_t v31 = 0x434178616DLL;
          break;
        case 12:
          unint64_t v31 = 1668184435;
          break;
        case 13:
          unint64_t v29 = 0xE700000000000000;
          unint64_t v31 = 0x74736F72666564;
          break;
        default:
          break;
      }
      unint64_t v32 = 0xE400000000000000;
      uint64_t v33 = 1953391990;
      switch(v95)
      {
        case 1:
          unint64_t v32 = v89 | 0x8000000000000000;
          if (v31 == 0xD000000000000012) {
            goto LABEL_46;
          }
          goto LABEL_49;
        case 2:
          unint64_t v32 = 0xEA00000000007265;
          if (v31 != 0x70706574536E6166) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 3:
          unint64_t v32 = 0xE800000000000000;
          if (v31 != 0x65646F4D6F747561) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 4:
          uint64_t v34 = 0x7461654874616573;
          uint64_t v35 = 6778473;
          goto LABEL_32;
        case 5:
          unint64_t v32 = 0xE700000000000000;
          if (v31 != 0x6E614674616573) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 6:
          uint64_t v34 = 0x7373614D74616573;
          uint64_t v35 = 6645601;
LABEL_32:
          unint64_t v32 = v35 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          if (v31 != v34) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 7:
          unint64_t v32 = v88 | 0x8000000000000000;
          if (v31 != 0xD000000000000014) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 8:
          unint64_t v32 = 0xEC0000006B636F4CLL;
          if (v31 != 0x736C6F72746E6F63) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 9:
          unint64_t v32 = 0xE800000000000000;
          if (v31 != 0x6B6E694C70656564) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 10:
          unint64_t v32 = 0xED00006E6F697461;
          if (v31 != 0x6C75637269636572) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 11:
          unint64_t v32 = 0xE500000000000000;
          if (v31 != 0x434178616DLL) {
            goto LABEL_49;
          }
          goto LABEL_46;
        case 12:
          uint64_t v33 = 1668184435;
          goto LABEL_45;
        case 13:
          unint64_t v32 = 0xE700000000000000;
          if (v31 != 0x74736F72666564) {
            goto LABEL_49;
          }
          goto LABEL_46;
        default:
LABEL_45:
          if (v31 != v33) {
            goto LABEL_49;
          }
LABEL_46:
          if (v29 == v32)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
LABEL_49:
            char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v36 & 1) == 0)
            {

              goto LABEL_6;
            }
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v97 = v22;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10008AFB0(0, v22[2] + 1, 1);
            id v22 = v97;
          }
          unint64_t v39 = v22[2];
          unint64_t v38 = v22[3];
          if (v39 >= v38 >> 1)
          {
            sub_10008AFB0(v38 > 1, v39 + 1, 1);
            id v22 = v97;
          }
          void v22[2] = v39 + 1;
          *(_OWORD *)&v22[2 * v39 + 4] = v96;
LABEL_6:
          if (v20 != ++v21) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  else
  {
    id v22 = _swiftEmptyArrayStorage;
  }
  if (sub_10004A96C(v95) == 1953391990 && v40 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {
LABEL_70:
      uint64_t v62 = v22[2];
      if (!v62)
      {
LABEL_85:
        swift_release();
        return;
      }
      uint64_t v63 = v22 + 5;
      unint64_t v64 = v93;
      while (1)
      {
        uint64_t v66 = (void *)*(v63 - 1);
        uint64_t v67 = *v63;
        if (v64 == v94) {
          break;
        }
        if (v64 != v91) {
          goto LABEL_74;
        }
        uint64_t v77 = v90;
        uint64_t v69 = *v90;
        id v70 = v66;
        char v78 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v77 = v69;
        if ((v78 & 1) == 0)
        {
          uint64_t v69 = sub_1000A3230(0, v69[2] + 1, 1, v69);
          *id v90 = v69;
        }
        unint64_t v73 = v69[2];
        unint64_t v79 = v69[3];
        unint64_t v74 = v73 + 1;
        if (v73 >= v79 >> 1)
        {
          unint64_t v75 = sub_1000A3230((void *)(v79 > 1), v73 + 1, 1, v69);
          uint64_t v69 = v75;
          uint64_t v76 = v90;
LABEL_72:
          *uint64_t v76 = v75;
        }
LABEL_73:
        v69[2] = v74;
        uint64_t v65 = &v69[2 * v73];
        v65[4] = v70;
        v65[5] = v67;

        unint64_t v64 = v93;
LABEL_74:
        v63 += 2;
        if (!--v62) {
          goto LABEL_85;
        }
      }
      uint64_t v68 = v92;
      uint64_t v69 = *v92;
      id v70 = v66;
      char v71 = swift_isUniquelyReferenced_nonNull_native();
      void *v68 = v69;
      if ((v71 & 1) == 0)
      {
        uint64_t v69 = sub_1000A3230(0, v69[2] + 1, 1, v69);
        *id v92 = v69;
      }
      unint64_t v73 = v69[2];
      unint64_t v72 = v69[3];
      unint64_t v74 = v73 + 1;
      if (v73 < v72 >> 1) {
        goto LABEL_73;
      }
      unint64_t v75 = sub_1000A3230((void *)(v72 > 1), v73 + 1, 1, v69);
      uint64_t v69 = v75;
      uint64_t v76 = v92;
      goto LABEL_72;
    }
  }
  if (v22[2] < 2uLL) {
    goto LABEL_70;
  }
  id v42 = self;
  id v43 = [v42 sharedApplication];
  id v44 = [v43 delegate];

  if (!v44)
  {
    __break(1u);
    goto LABEL_90;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v45 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_retain();

  uint64_t v46 = dispatch thunk of CAUAssetLibraryManager.assetLibrary.getter();
  swift_release();
  uint64_t v47 = v81;
  Optional<A>.featureFlags()();

  uint64_t v48 = v84;
  CAUFeatureFlag.climate.getter();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v83);
  LOBYTE(v46) = CAUFeatureFlag.Climate.groupedVentsLayout.getter();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v48, v86);
  if ((v46 & 1) == 0) {
    goto LABEL_70;
  }
  id v49 = sub_10008AD64((uint64_t)v22);
  if (!v49) {
    goto LABEL_70;
  }
  unint64_t v50 = (unint64_t)v49;
  swift_release();
  id v51 = [v42 sharedApplication];
  id v52 = [v51 delegate];

  if (!v52)
  {
LABEL_90:
    __break(1u);
    JUMPOUT(0x10008ACF4);
  }
  swift_dynamicCastClassUnconditional();
  uint64_t v53 = (unsigned __int8 *)sub_10008EAA4();
  swift_unknownObjectRelease();
  uint64_t v54 = v53[OBJC_IVAR____TtC7Climate18ClimateCoordinator_hasDualStatusBar];

  id v55 = objc_allocWithZone((Class)type metadata accessor for ClimateGroupedVentsButton());
  sub_100016EF0(v50, v54, 2);
  uint64_t v56 = v92;
  a2 = *v92;
  a1 = (unsigned __int8 *)v57;
  char v58 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v56 = a2;
  if ((v58 & 1) == 0)
  {
LABEL_88:
    a2 = sub_1000A3230(0, a2[2] + 1, 1, a2);
    *id v92 = a2;
  }
  unint64_t v60 = a2[2];
  unint64_t v59 = a2[3];
  if (v60 >= v59 >> 1)
  {
    a2 = sub_1000A3230((void *)(v59 > 1), v60 + 1, 1, a2);
    *id v92 = a2;
  }
  a2[2] = v60 + 1;
  uint64_t v61 = &a2[2 * v60];
  v61[4] = a1;
  v61[5] = &off_1000CAAC8;
}

void *sub_10008AD64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v3 = (void **)(a1 + 32);
  type metadata accessor for ClimateVentServiceButton();
  while (1)
  {
    unint64_t v4 = *v3;
    if (!swift_dynamicCastClass()) {
      break;
    }
    id v5 = v4;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v3 += 2;
    if (!--v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  swift_release();
  return 0;
}

uint64_t sub_10008AE3C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10008AEBC(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return static Published.subscript.setter();
}

uint64_t sub_10008AF30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008AFD0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10008AF50(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008B13C(a1, a2, a3, (void *)*v3, &qword_1000E7448, &qword_1000E7B10);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008AF80(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008B13C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1000E7B00, &qword_1000E7450);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008AFB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008B2CC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10008AFD0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006730((uint64_t *)&unk_1000E70D0);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    id v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008B13C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100006730(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    sub_100006730(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008B2CC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006730(&qword_1000E4B50);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    _OWORD v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100006730(&qword_1000E7AE0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008B460(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  *(void *)(v5 + 16) = result + 1;
  uint64_t v6 = v5 + 16 * result;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a5;
  return result;
}

uint64_t sub_10008B478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v42 = a3;
  id v43 = a4;
  uint64_t v44 = a2;
  uint64_t v5 = type metadata accessor for CAUAsset.Seat.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  uint64_t v37 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ClimateZone();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v35 - v18;
  type metadata accessor for ClimateAssets();
  sub_1000320E0(a1, (uint64_t)v19);
  uint64_t v20 = *(void *)(a1 + *(int *)(v10 + 48));
  unint64_t v39 = v12;
  sub_10000ABC4(a1, (uint64_t)v12);
  uint64_t v40 = v14;
  uint64_t v41 = v13;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  unint64_t v38 = v19;
  v21(v16, v19, v13);
  if (v20)
  {
    uint64_t v23 = v36;
    uint64_t v22 = v37;
    uint64_t v24 = *(void (**)(char *, void, uint64_t))(v37 + 104);
    v24(v8, enum case for CAUAsset.Seat.State.heatOn(_:), v36);
    swift_unknownObjectRetain();
    uint64_t v35 = (void *)sub_1000328C4(a1, (uint64_t)v8);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v22 + 8);
    v25(v8, v23);
    v24(v8, enum case for CAUAsset.Seat.State.ventOn(_:), v23);
    id v26 = (void *)sub_1000328C4(a1, (uint64_t)v8);
    v25(v8, v23);
    v24(v8, enum case for CAUAsset.Seat.State.heatAndVentOn(_:), v23);
    id v27 = (void *)sub_1000328C4(a1, (uint64_t)v8);
    v25(v8, v23);
    id v28 = objc_allocWithZone((Class)type metadata accessor for ClimateZoneHeatingCoolingVentingPositionView());
    unint64_t v29 = v35;
    uint64_t v30 = sub_10007722C((uint64_t)v39, v44, v42, (uint64_t)v16, v35, v26, v27);
    swift_unknownObjectRelease();
  }
  else
  {
    id v31 = objc_allocWithZone((Class)type metadata accessor for ClimateZonePositionView());
    uint64_t v32 = v44;
    swift_unknownObjectRetain();
    sub_100087D0C((uint64_t)v39, v32, v42, (uint64_t)v16);
    uint64_t v30 = v33;
    swift_unknownObjectRelease();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v41);
  char *v43 = v30;
  return result;
}

id sub_10008B8AC()
{
  return sub_10008B8FC(&OBJC_IVAR____TtC7Climate20ClimatePositionViews____lazy_storage___heightConstraint, (SEL *)&selRef_heightAnchor, (uint64_t (*)(uint64_t))&CAUVehicleLayoutInfo.height.getter);
}

id sub_10008B8D4()
{
  return sub_10008B8FC(&OBJC_IVAR____TtC7Climate20ClimatePositionViews____lazy_storage___widthConstraint, (SEL *)&selRef_widthAnchor, (uint64_t (*)(uint64_t))&CAUVehicleLayoutInfo.width.getter);
}

id sub_10008B8FC(uint64_t *a1, SEL *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v7 = v3;
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  uint64_t v14 = *(void **)&v3[v13];
  if (v14)
  {
    id v15 = *(id *)&v3[v13];
  }
  else
  {
    id v16 = [v3 *a2 v10];
    type metadata accessor for ClimateAssets();
    uint64_t v17 = CAUVehicleLayout.cabinSeatsImage.getter();
    int v18 = a3(v17);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    id v19 = [v16 constraintEqualToConstant:*(double *)&v7[OBJC_IVAR____TtC7Climate20ClimatePositionViews_scale] * (double)v18];

    uint64_t v20 = *(void **)&v7[v13];
    *(void *)&v7[v13] = v19;
    id v15 = v19;

    uint64_t v14 = 0;
  }
  id v21 = v14;
  return v15;
}

id sub_10008BAB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimatePositionViews();
  return [super dealloc];
}

uint64_t sub_10008BBA4()
{
  return type metadata accessor for ClimatePositionViews();
}

uint64_t type metadata accessor for ClimatePositionViews()
{
  uint64_t result = qword_1000E74A8;
  if (!qword_1000E74A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008BBF8()
{
  uint64_t result = type metadata accessor for ClimateSystemManager();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ClimateAssets();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10008BCF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

Swift::Int sub_10008BD50()
{
  return Hasher._finalize()();
}

Swift::Int sub_10008BE68()
{
  return Hasher._finalize()();
}

void sub_10008BF7C(void *a1)
{
  [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v1 addSubview:a1];
  uint64_t v3 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000B20F0;
  id v5 = [a1 leadingAnchor];
  id v6 = [v1 leadingAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v4 + 32) = v7;
  id v8 = [a1 trailingAnchor];
  id v9 = [v1 trailingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v4 + 40) = v10;
  id v11 = [a1 bottomAnchor];
  id v12 = [v1 bottomAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v4 + 48) = v13;
  id v14 = [a1 topAnchor];
  id v15 = [v1 topAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  *(void *)(v4 + 56) = v16;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 activateConstraints:isa];
}

uint64_t sub_10008C1E4(unsigned __int8 *a1, char *a2)
{
  return sub_100066254(*a1, *a2);
}

Swift::Int sub_10008C1F0()
{
  return sub_10008BD50();
}

uint64_t sub_10008C1F8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10008C2F8()
{
  return sub_10008BE68();
}

unint64_t sub_10008C300@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10008C784(*a1);
  *a2 = result;
  return result;
}

void sub_10008C330(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEB00000000657275;
  uint64_t v3 = 0x74617265706D6574;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 7233894;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x73736572706D6F63;
      *(void *)(a1 + 8) = 0xEA0000000000726FLL;
      break;
    case 3:
      *(void *)a1 = 1668184435;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 4:
      strcpy((char *)a1, "recirculation");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 5:
      *(void *)a1 = 0x65736F6C63;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

id sub_10008C4B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateStatusBarView();
  return [super dealloc];
}

uint64_t sub_10008C53C()
{
  return type metadata accessor for ClimateStatusBarView();
}

uint64_t type metadata accessor for ClimateStatusBarView()
{
  uint64_t result = qword_1000E74E0;
  if (!qword_1000E74E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008C590()
{
  uint64_t result = type metadata accessor for ClimateZone();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClimateStatusBarIndicators(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008C6F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateStatusBarIndicators()
{
  return &type metadata for ClimateStatusBarIndicators;
}

unint64_t sub_10008C730()
{
  unint64_t result = qword_1000E74F0;
  if (!qword_1000E74F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E74F0);
  }
  return result;
}

unint64_t sub_10008C784(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000CA450, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

id sub_10008C7D0()
{
  id result = [self systemFontOfSize:12.0 weight:UIFontWeightSemibold];
  qword_1000EA820 = (uint64_t)result;
  return result;
}

id sub_10008C81C()
{
  id result = [self _preferredFontForTextStyle:UIFontTextStyleBody weight:UIFontWeightSemibold];
  if (result) {
    qword_1000EA828 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

CGFloat sub_10008C878(uint64_t a1)
{
  return sub_10008C8AC(0.01, a1, &xmmword_1000EA830, &xmmword_1000EA840, &xmmword_1000EA850);
}

CGFloat sub_10008C894(uint64_t a1)
{
  return sub_10008C8AC(1.0, a1, &xmmword_1000EA860, algn_1000EA870, &xmmword_1000EA880);
}

CGFloat sub_10008C8AC(CGFloat a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  CGAffineTransformMakeScale(&v11, a1, a1);
  CGFloat result = v11.a;
  long long v9 = *(_OWORD *)&v11.c;
  long long v10 = *(_OWORD *)&v11.tx;
  *a3 = *(_OWORD *)&v11.a;
  *a4 = v9;
  *a5 = v10;
  return result;
}

uint64_t sub_10008C904()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate25ClimateControlsLockButton_controlsLock);
  unsigned int v2 = [v1 lockState];
  unsigned int v3 = [v1 lockStateRestricted];
  unsigned int v4 = [v1 lockStateDisabled];
  if (v2 == 1)
  {
    uint64_t v5 = 5;
    if (!v3) {
      uint64_t v5 = 1;
    }
    if (!v4) {
      return v5;
    }
    return v5 | 0x10;
  }
  uint64_t v5 = 4;
  if (!v3) {
    uint64_t v5 = 0;
  }
  if (v4) {
    return v5 | 0x10;
  }
  return v5;
}

char *sub_10008C9A0(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Climate25ClimateControlsLockButton_controlsLock] = a1;
  v20.receiver = v1;
  v20.super_class = (Class)type metadata accessor for ClimateControlsLockButton();
  id v3 = a1;
  unsigned int v4 = (char *)[super init];
  [v3 registerObserver:v4];
  uint64_t v5 = *(void **)&v4[OBJC_IVAR____TtC7Climate25ClimateControlsLockButton_controlsLock];
  unsigned int v6 = v4;
  unsigned int v7 = [v5 lockState];
  if (v7 == 1) {
    unint64_t v8 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v8 = 0xD00000000000001FLL;
  }
  if (v7 == 1) {
    unint64_t v9 = 0x80000001000B89E0;
  }
  else {
    unint64_t v9 = 0x80000001000B89C0;
  }
  long long v10 = (unint64_t *)&v6[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  unint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  unint64_t *v10 = v8;
  v10[1] = v9;
  if (!v12
    || (v8 == v11 ? (BOOL v13 = v9 == v12) : (BOOL v13 = 0), !v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v3;
  id v16 = (uint64_t *)&v6[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v17 = *v16;
  *id v16 = (uint64_t)sub_10008CEF0;
  v16[1] = v15;
  id v18 = v3;
  sub_100005690(v17);
  sub_10008CC60();

  return v6;
}

void sub_10008CB84(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if ([a3 lockState] == 2) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = 2;
    }
    [a3 setLockState:v6];
  }
}

uint64_t sub_10008CC60()
{
  sub_10009F8A4();
  unint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate25ClimateControlsLockButton_controlsLock];
  [v1 lockState];
  [v1 lockStateRestricted];
  [v0 setEnabled:[v1 lockStateDisabled] ^ 1];
  sub_10008896C();
  sub_100088B54();
  unsigned int v2 = [v1 lockState];
  if (v2 == 1) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0xD00000000000001FLL;
  }
  if (v2 == 1) {
    unint64_t v4 = 0x80000001000B89E0;
  }
  else {
    unint64_t v4 = 0x80000001000B89C0;
  }
  uint64_t v5 = (unint64_t *)&v0[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  unint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  *uint64_t v5 = v3;
  v5[1] = v4;
  if (!v7 || (v3 == v6 ? (BOOL v8 = v4 == v7) : (BOOL v8 = 0), !v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)) {
    ClimateButton.updateClimateConfiguration()();
  }
  return swift_bridgeObjectRelease();
}

void sub_10008CD98()
{
}

id sub_10008CDA8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateControlsLockButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateControlsLockButton()
{
  return self;
}

uint64_t sub_10008CE78()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008CEB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008CEF0(uint64_t a1)
{
  sub_10008CB84(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void *sub_10008CEF8()
{
  v39.receiver = v0;
  v39.super_class = (Class)type metadata accessor for ClimateSettingsButton();
  id v1 = [super init];
  objc_super v2 = self;
  unint64_t v3 = v1;
  id v4 = [v2 mainBundle];
  v40._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0x5445535F45524F4DLL;
  v5._object = (void *)0xED000053474E4954;
  v6.value._uint64_t countAndFlagsBits = 0x6574616D696C43;
  v6.value._object = (void *)0xE700000000000000;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v40._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v40);

  unint64_t v9 = (Swift::String *)((char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
  swift_beginAccess();
  uint64_t countAndFlagsBits = v9->_countAndFlagsBits;
  object = v9->_object;
  *unint64_t v9 = v8;
  if (v8._object)
  {
    if (object)
    {
      BOOL v12 = v8._countAndFlagsBits == countAndFlagsBits && object == v8._object;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
  if (object)
  {
LABEL_10:
    ClimateButton.updateClimateConfiguration()();
LABEL_11:

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

LABEL_12:
  id v13 = [v3 titleLabel];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [self systemFontOfSize:16.0];
    [v14 setFont:v15];
  }
  id v16 = [v3 titleLabel];

  if (v16)
  {
    [v16 setTextAlignment:2];
  }
  int v17 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial);
  *((unsigned char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial) = 1;
  if (v17 != 1)
  {
    id v18 = [*(id *)((char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView) removeFromSuperview];
    (*(void (**)(id))((swift_isaMask & *v3) + 0x230))(v18);
  }
  id v19 = (char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  objc_super v20 = *(void **)((char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  id v21 = *(void **)((char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v22 = *(void *)((char *)v3 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  uint64_t v23 = self;
  id v24 = v20;
  id v25 = v21;
  swift_bridgeObjectRetain();
  id v26 = [v23 clearColor];
  id v27 = [v23 _carSystemFocusColor];
  id v28 = v27;
  if (!v26)
  {
    id v26 = v24;
    if (v28) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!v27) {
LABEL_20:
  }
    id v28 = v25;
LABEL_21:

  unint64_t v29 = *(void **)v19;
  uint64_t v30 = (void *)*((void *)v19 + 1);
  uint64_t v31 = *((void *)v19 + 2);
  *(void *)id v19 = v26;
  *((void *)v19 + 1) = v28;
  *((void *)v19 + 2) = v22;
  swift_bridgeObjectRetain_n();
  sub_1000056A0();
  id v32 = v26;
  id v33 = v28;
  id v34 = v32;
  id v35 = v33;
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v22, v31);
    char v37 = v36;
    swift_bridgeObjectRelease();

    if (v37) {
      goto LABEL_27;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))((swift_isaMask & *v3) + 0x230))();
LABEL_27:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

id sub_10008D354()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSettingsButton();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateSettingsButton()
{
  return self;
}

id sub_10008D3AC()
{
  id v1 = *(unsigned char **)(v0 + OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_primaryButton);
  uint64_t v2 = OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted;
  char v3 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted);
  int v4 = v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted];
  v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = v3;
  id result = [v1 setHighlighted:];
  uint64_t v6 = v1[v2];
  if (v4 != v6)
  {
    Swift::String v7 = &v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate];
    id result = (id)swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v8 = *((void *)v7 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v6, ObjectType, v8);
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id sub_10008D47C(char a1)
{
  v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = a1;
  [v1 setHighlighted:a1 & 1];

  return sub_10008D3AC();
}

char *sub_10008D5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100006730((uint64_t *)&unk_1000E7C60);
  uint64_t v104 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v105 = v8;
  uint64_t v106 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_primaryButton;
  id v10 = objc_allocWithZone((Class)type metadata accessor for ClimateStepperButton());
  unint64_t v11 = v3;
  *(void *)&v3[v9] = [v10 init];

  BOOL v12 = (objc_class *)type metadata accessor for ClimateGroupedVentsAutoModeButton();
  v112.receiver = v11;
  v112.super_class = v12;
  id v13 = [super init];
  uint64_t v14 = OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_primaryButton;
  id v15 = *(char **)&v13[OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_primaryButton];
  id v16 = &v15[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v18 = *(void *)v16;
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)id v16 = a1;
  *((void *)v16 + 1) = a2;
  id v19 = v13;
  objc_super v20 = v15;
  id v21 = v20;
  uint64_t v107 = a3;
  if (a2)
  {
    if (v17)
    {
      BOOL v22 = v18 == a1 && v17 == a2;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
  if (v17)
  {
LABEL_10:
    ClimateButton.updateClimateConfiguration()();
LABEL_11:

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

LABEL_12:
  id v23 = [self systemGreenColor];
  id v24 = &v19[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
  id v25 = *(id *)&v19[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
  [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v109 = v14;
  char v110 = v13;
  id v26 = *(void **)&v13[v14];
  [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v27 = self;
  id v28 = v19;
  unint64_t v29 = v26;
  id result = (char *)[v27 _preferredFontForTextStyle:UIFontTextStyleBody weight:UIFontWeightSemibold];
  if (result)
  {
    uint64_t v31 = result;
    id v32 = self;
    id v33 = [v32 configurationWithFont:v31 scale:3];
    id v103 = v28;

    uint64_t v101 = sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1000B1F40;
    *(void *)(v34 + 32) = v23;
    *(void *)(v34 + 40) = v25;
    uint64_t v111 = v34;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
    id v102 = v25;
    id v108 = v23;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v36 = [v32 configurationWithPaletteColors:isa];

    id v37 = [v33 configurationByApplyingConfiguration:v36];
    id v38 = ClimateButton.imageSymbolConfiguration.getter();
    objc_super v39 = *(void **)&v29[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
    *(void *)&v29[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v37;
    id v40 = v37;

    id v41 = ClimateButton.imageSymbolConfiguration.getter();
    sub_100007310(0, (unint64_t *)&unk_1000E7700);
    LOBYTE(v39) = static NSObject.== infix(_:_:)();

    if ((v39 & 1) == 0) {
      ClimateButton.updateClimateConfiguration()();
    }

    uint64_t v43 = v109;
    uint64_t v42 = v110;
    uint64_t v44 = *(unsigned char **)&v110[v109];
    char v45 = v44[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v44[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if ((v45 & 1) == 0)
    {
      uint64_t v46 = *(void **)&v44[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
      uint64_t v47 = v44;
      [v46 removeFromSuperview];
      ClimateButton.refreshColorConfig()();
    }
    uint64_t v48 = *(char **)&v42[v43];
    id v49 = *(void **)v24;
    unint64_t v50 = (void *)*((void *)v24 + 2);
    id v51 = (void **)&v48[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    id v52 = *(void **)&v48[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
    uint64_t v53 = *(void **)&v48[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
    uint64_t v54 = *(void *)&v48[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
    id v55 = v108;
    *id v51 = v49;
    v51[1] = v55;
    v51[2] = v50;
    id v56 = v55;
    id v57 = v49;
    swift_bridgeObjectRetain_n();
    id v108 = v56;
    id v100 = v57;
    char v58 = v48;
    unint64_t v59 = *v51;
    unint64_t v60 = v51[1];
    uint64_t v61 = (uint64_t)v51[2];
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v62 = v59;
    id v63 = v60;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v61, v54);
      char v65 = v64;
      swift_bridgeObjectRelease();

      if (v65) {
        goto LABEL_23;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    ClimateButton.refreshColorConfig()();
LABEL_23:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = v109;
    uint64_t v66 = v110;
    uint64_t v68 = *(void **)&v110[v109];
    [v68 setUserInteractionEnabled:0];
    uint64_t v69 = v103;
    [v103 addSubview:v68];
    sub_100075058(1);
    double v71 = v70;
    double v73 = v72;
    unint64_t v74 = self;
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_1000B20F0;
    id v76 = [v68 centerXAnchor];
    id v77 = [v69 centerXAnchor];
    id v78 = [v76 constraintEqualToAnchor:v77];

    *(void *)(v75 + 32) = v78;
    id v79 = [*(id *)&v66[v67] centerYAnchor];
    id v80 = [v69 centerYAnchor];
    id v81 = [v79 constraintEqualToAnchor:v80];

    *(void *)(v75 + 40) = v81;
    id v82 = [*(id *)&v66[v67] heightAnchor];
    id v83 = [v82 constraintEqualToConstant:v73];

    *(void *)(v75 + 48) = v83;
    id v84 = [*(id *)&v66[v67] widthAnchor];
    id v85 = [v84 constraintEqualToConstant:v71];

    *(void *)(v75 + 56) = v85;
    uint64_t v111 = v75;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class v86 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v74 activateConstraints:v86];

    uint64_t v87 = *(void *)&v66[v67];
    uint64_t v88 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v90 = v106;
    uint64_t v89 = v107;
    sub_10001C4AC(v107, v106);
    unint64_t v91 = (*(unsigned __int8 *)(v104 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = v88;
    sub_10008E2A8(v90, v92 + v91);
    unint64_t v93 = (uint64_t *)(v87 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
    swift_beginAccess();
    uint64_t v94 = *v93;
    *unint64_t v93 = (uint64_t)sub_10008E310;
    v93[1] = v92;
    sub_100005690(v94);
    uint64_t v95 = swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10001C4AC(v89, v90);
    uint64_t v96 = swift_allocObject();
    *(void *)(v96 + 16) = v95;
    sub_10008E2A8(v90, v96 + v91);
    id v97 = (uint64_t *)&v69[OBJC_IVAR____TtC7Climate13ClimateButton_action];
    swift_beginAccess();
    uint64_t v98 = *v97;
    *id v97 = (uint64_t)sub_10008E310;
    v97[1] = v96;
    swift_retain();
    sub_100005690(v98);

    sub_10007FB1C(v89);
    swift_release();
    return v69;
  }
  __break(1u);
  return result;
}

void sub_10008DEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E7C60);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    BOOL v12 = (void *)Strong;
    sub_10001C4AC(a3, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {

      sub_10007FB1C((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      if (swift_unknownObjectWeakLoadStrong())
      {
        sub_10002D430((uint64_t)v10);
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
    }
  }
}

void sub_10008E188()
{
  sub_100026DD0(v0 + OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_delegate);
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate33ClimateGroupedVentsAutoModeButton_primaryButton);
}

id sub_10008E1C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateGroupedVentsAutoModeButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateGroupedVentsAutoModeButton()
{
  return self;
}

uint64_t sub_10008E26C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008E2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006730((uint64_t *)&unk_1000E7C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008E318()
{
  uint64_t v1 = *(void *)(sub_100006730((uint64_t *)&unk_1000E7C60) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_10008E440(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100006730((uint64_t *)&unk_1000E7C60) - 8);
  sub_10008DEF8(a1, *(void *)(v1 + 16), v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t destroy for ClimateProgressViewColorConfig(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ClimateProgressViewColorConfig(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  id v7 = v3;
  id v8 = v4;
  id v9 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClimateProgressViewColorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  unint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClimateProgressViewColorConfig(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClimateProgressViewColorConfig(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClimateProgressViewColorConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateProgressViewColorConfig()
{
  return &type metadata for ClimateProgressViewColorConfig;
}

void sub_10008E6BC(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10008E6DC()
{
  unint64_t result = qword_1000E75F0;
  if (!qword_1000E75F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E75F0);
  }
  return result;
}

unint64_t sub_10008E730(uint64_t a1)
{
  unint64_t result = sub_10008E6DC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10008E758(void *a1, void *a2, void *a3)
{
  _StringGuts.grow(_:)(73);
  v6._object = (void *)0x80000001000B8AF0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v6);
  id v7 = a1;
  id v8 = [v7 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);

  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x3D6B6361727420;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  id v14 = a2;
  sub_100006730((uint64_t *)&unk_1000E7620);
  v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x736572676F727020;
  v16._object = (void *)0xEA00000000003D73;
  String.append(_:)(v16);
  id v17 = a3;
  v18._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x3D73657461747320;
  v19._object = (void *)0xE800000000000000;
  String.append(_:)(v19);
  sub_100064EB4();
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 0;
}

uint64_t sub_10008E93C()
{
  return sub_10008E758(*v0, v0[1], v0[2]);
}

void sub_10008E948(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  if (static NSObject.== infix(_:_:)())
  {
    if (a2)
    {
      if (!a6) {
        return;
      }
      sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
      id v14 = a6;
      id v15 = a2;
      char v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) == 0) {
        return;
      }
    }
    else if (a6)
    {
      return;
    }
    if (a3)
    {
      if (!a7) {
        return;
      }
      sub_100007310(0, (unint64_t *)&qword_1000E6BE0);
      id v17 = a7;
      id v18 = a3;
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0) {
        return;
      }
    }
    else if (a7)
    {
      return;
    }
    sub_10007BE10(a4, a8);
  }
}

id sub_10008EAA4()
{
  uint64_t v1 = OBJC_IVAR____TtC7Climate18ClimateAppDelegate____lazy_storage___coordinator;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate18ClimateAppDelegate____lazy_storage___coordinator);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Climate18ClimateAppDelegate____lazy_storage___coordinator);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)type metadata accessor for ClimateCoordinator()) init];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_10008EBF0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateAppDelegate();
  [super dealloc];
}

int main(int argc, const char **argv, const char **envp)
{
  type metadata accessor for ClimateAppDelegate();
  static CommandLine.unsafeArgv.getter();
  static CommandLine.argc.getter();
  static CommandLine.argc.getter();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v4 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  LODWORD(v4) = UIApplicationMain(_:_:_:_:)();
  swift_bridgeObjectRelease();
  exit((int)v4);
}

uint64_t type metadata accessor for ClimateAppDelegate()
{
  return self;
}

unint64_t sub_10008ECE4()
{
  unint64_t result = qword_1000E4830;
  if (!qword_1000E4830)
  {
    type metadata accessor for LaunchOptionsKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E4830);
  }
  return result;
}

BOOL sub_10008ED3C()
{
  return (_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0((char)[*(id *)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation) on], (char)[*(id *)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation) autoMode], (char)[*(id *)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation) onRestricted], (char)[*(id *)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation) onInvalid], (char)[*(id *)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation) onDisabled]) & 0x1A) == 2;
}

BOOL sub_10008EDFC()
{
  return (_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0([*(id *)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel) heatingCoolingLevel] != 0, (char)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel), "autoMode"), (char)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel), "heatingCoolingLevelRestricted"), (char)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel), "heatingCoolingLevelInvalid"), (char)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Climate26ClimateSteeringWheelButton_steeringWheel), "heatingCoolingLevelDisabled")) & 0x1A) == 2;
}

void sub_10008EEC4()
{
}

void sub_10008EEE4()
{
}

void sub_10008EF04(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)&v2[*a1];
  if (v4)
  {
    id v6 = v2;
    id v25 = v4;
    [v25 setTranslatesAutoresizingMaskIntoConstraints:0];
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [self _systemImageNamed:v7];

    [v25 setImage:v8];
    if (qword_1000E4680 != -1) {
      swift_once();
    }
    [v25 setTintColor:qword_1000EA6F8];
    [v6 addSubview:v25];
    uint64_t v9 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1000B20F0;
    id v11 = [v25 topAnchor];
    id v12 = [v6 topAnchor];
    id v13 = [v11 constraintEqualToAnchor:v12 constant:5.0];

    *(void *)(v10 + 32) = v13;
    id v14 = [v25 trailingAnchor];
    id v15 = [v6 trailingAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15 constant:-5.0];

    *(void *)(v10 + 40) = v16;
    id v17 = [v25 widthAnchor];
    id v18 = [v17 constraintEqualToConstant:15.0];

    *(void *)(v10 + 48) = v18;
    id v19 = [v25 heightAnchor];
    id v20 = [v19 constraintEqualToConstant:15.0];

    *(void *)(v10 + 56) = v20;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 activateConstraints:isa];

    BOOL v22 = *(void **)&v6[v3];
    if (v22)
    {
      id v23 = v22;
      [v23 setHidden:(a2() & 0x1A) != 2];

      id v24 = v23;
    }
    else
    {
      id v24 = v25;
    }
  }
}

void sub_10008F28C()
{
}

void sub_10008F2AC(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)&v2[*a1];
  if (v4)
  {
    id v6 = v2;
    id v25 = v4;
    [v25 setTranslatesAutoresizingMaskIntoConstraints:0];
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [self _systemImageNamed:v7];

    [v25 setImage:v8];
    if (qword_1000E4680 != -1) {
      swift_once();
    }
    [v25 setTintColor:qword_1000EA6F8];
    [v6 addSubview:v25];
    uint64_t v9 = self;
    sub_100006730((uint64_t *)&unk_1000E4F10);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1000B20F0;
    id v11 = [v25 topAnchor];
    id v12 = [v6 topAnchor];
    id v13 = [v11 constraintEqualToAnchor:v12 constant:5.0];

    *(void *)(v10 + 32) = v13;
    id v14 = [v25 trailingAnchor];
    id v15 = [v6 trailingAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15 constant:-5.0];

    *(void *)(v10 + 40) = v16;
    id v17 = [v25 widthAnchor];
    id v18 = [v17 constraintEqualToConstant:15.0];

    *(void *)(v10 + 48) = v18;
    id v19 = [v25 heightAnchor];
    id v20 = [v19 constraintEqualToConstant:15.0];

    *(void *)(v10 + 56) = v20;
    specialized Array._endMutation()();
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 activateConstraints:isa];

    BOOL v22 = *(void **)&v6[v3];
    if (v22)
    {
      id v23 = v22;
      [v23 setHidden:(a2() & 1) == 0];

      id v24 = v23;
    }
    else
    {
      id v24 = v25;
    }
  }
}

uint64_t sub_10008F62C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation);
  char v2 = [v1 on];
  char v3 = [v1 autoMode];
  char v4 = [v1 onRestricted];
  char v5 = [v1 onInvalid];
  char v6 = [v1 onDisabled];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v2, v3, v4, v5, v6);
}

char *sub_10008F6E8(void *a1, char a2)
{
  uint64_t v5 = OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_autoModeGlyph;
  id v6 = objc_allocWithZone((Class)UIImageView);
  NSString v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  *(void *)&v7[OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation] = a1;
  id v8 = a1;

  v116.receiver = v7;
  v116.super_class = (Class)type metadata accessor for ClimateRecirculationServiceButton();
  uint64_t v9 = (char *)[super init];
  [v8 registerObserver:v9];
  uint64_t v10 = &v9[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v10 = 0xD00000000000001BLL;
  *((void *)v10 + 1) = 0x80000001000B8BE0;
  id v13 = v9;
  if (!v11
    || (v12 != 0xD00000000000001BLL || v11 != 0x80000001000B8BE0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ClimateButton.updateClimateConfiguration()();
  }

  swift_bridgeObjectRelease();
  if (a2 == 1)
  {
    uint64_t v34 = self;
    id v35 = v13;
    id v36 = [v34 configurationWithPointSize:6 weight:14.0];
    id v37 = ClimateButton.imageSymbolConfiguration.getter();
    id v38 = *(void **)&v35[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
    *(void *)&v35[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v36;
    id v39 = v36;

    id v40 = ClimateButton.imageSymbolConfiguration.getter();
    sub_100007310(0, (unint64_t *)&unk_1000E7700);
    char v41 = static NSObject.== infix(_:_:)();

    if ((v41 & 1) == 0) {
      ClimateButton.updateClimateConfiguration()();
    }

    int v42 = v35[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v35[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if (v42 != 1)
    {
      uint64_t v43 = *(void **)&v35[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
      uint64_t v44 = v35;
      [v43 removeFromSuperview];
      sub_100088B54();
    }
    uint64_t v45 = qword_1000E46D0;
    uint64_t v46 = v35;
    if (v45 != -1) {
      swift_once();
    }
    id v115 = v8;
    uint64_t v47 = (void *)qword_1000EA770;
    uint64_t v48 = *(void **)algn_1000EA778;
    uint64_t v49 = qword_1000EA780;
    id v50 = [self systemMintColor];
    if (!v50) {
      id v50 = v48;
    }
    id v51 = (void **)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    id v52 = *(void **)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v107 = *(void *)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
    uint64_t v111 = *(void **)&v46[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
    *id v51 = v47;
    v51[1] = v50;
    v51[2] = (void *)v49;
    id v53 = v47;
    swift_bridgeObjectRetain_n();
    id v105 = v53;
    uint64_t v54 = *v51;
    id v55 = v51[1];
    uint64_t v56 = (uint64_t)v51[2];
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v57 = v54;
    id v58 = v55;
    swift_bridgeObjectRetain();
    id v59 = v50;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v56, v107);
      char v61 = v60;
      swift_bridgeObjectRelease();

      if (v61)
      {
LABEL_40:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v80 = qword_1000E46C8;
        id v81 = v46;
        if (v80 != -1) {
          swift_once();
        }
        id v82 = (void *)qword_1000EA758;
        id v83 = (void *)qword_1000EA760;
        uint64_t v84 = qword_1000EA768;
        id v85 = (void **)&v81[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        Class v86 = *(void **)&v81[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        id v113 = *(void **)&v81[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
        uint64_t v87 = *(void *)&v81[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
        unsigned char *v85 = (void *)qword_1000EA758;
        v85[1] = v83;
        v85[2] = (void *)v84;
        id v88 = v82;
        id v89 = v83;
        swift_bridgeObjectRetain_n();
        id v109 = v88;
        id v90 = v89;
        unint64_t v91 = *v85;
        uint64_t v92 = v85[1];
        uint64_t v93 = (uint64_t)v85[2];
        id v94 = v91;
        id v95 = v92;
        swift_bridgeObjectRetain();
        if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
        {
          sub_10007C1D0(v93, v87);
          char v97 = v96;
          swift_bridgeObjectRelease();

          if (v97) {
            goto LABEL_52;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(void))((swift_isaMask & *(void *)v81) + 0x228))();
LABEL_52:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v8 = v115;
        goto LABEL_53;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void))((swift_isaMask & *(void *)v46) + 0x228))();
    goto LABEL_40;
  }
  if (a2 == 3)
  {
    int v14 = v13[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
    v13[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
    if (v14 != 1)
    {
      id v15 = *(void **)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView];
      id v16 = v13;
      [v15 removeFromSuperview];
      sub_100088B54();
    }
    uint64_t v17 = qword_1000E46D0;
    id v18 = v13;
    if (v17 != -1) {
      swift_once();
    }
    id v114 = v8;
    id v19 = (void *)qword_1000EA770;
    id v20 = *(void **)algn_1000EA778;
    uint64_t v21 = qword_1000EA780;
    id v22 = [self systemMintColor];
    if (!v22) {
      id v22 = v20;
    }
    id v23 = (void **)&v18[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    id v24 = *(void **)&v18[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor];
    uint64_t v106 = *(void *)&v18[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 16];
    char v110 = *(void **)&v18[OBJC_IVAR____TtC7Climate15ClimateOnButton_onColor + 8];
    void *v23 = v19;
    v23[1] = v22;
    v23[2] = (void *)v21;
    id v25 = v19;
    swift_bridgeObjectRetain_n();
    id v104 = v25;
    id v26 = *v23;
    id v27 = v23[1];
    uint64_t v28 = (uint64_t)v23[2];
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v29 = v26;
    id v30 = v27;
    swift_bridgeObjectRetain();
    id v31 = v22;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v28, v106);
      char v33 = v32;
      swift_bridgeObjectRelease();

      if (v33)
      {
LABEL_32:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v62 = qword_1000E46C8;
        id v63 = v18;
        if (v62 != -1) {
          swift_once();
        }
        char v64 = (void *)qword_1000EA758;
        char v65 = (void *)qword_1000EA760;
        uint64_t v66 = qword_1000EA768;
        uint64_t v67 = (void **)&v63[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        uint64_t v68 = *(void **)&v63[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor];
        objc_super v112 = *(void **)&v63[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 8];
        uint64_t v69 = *(void *)&v63[OBJC_IVAR____TtC7Climate15ClimateOnButton_offColor + 16];
        char *v67 = (void *)qword_1000EA758;
        v67[1] = v65;
        v67[2] = (void *)v66;
        id v70 = v64;
        id v71 = v65;
        swift_bridgeObjectRetain_n();
        id v108 = v70;
        id v72 = v71;
        double v73 = *v67;
        unint64_t v74 = v67[1];
        uint64_t v75 = (uint64_t)v67[2];
        id v76 = v73;
        id v77 = v74;
        swift_bridgeObjectRetain();
        if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
        {
          sub_10007C1D0(v75, v69);
          char v79 = v78;
          swift_bridgeObjectRelease();

          if (v79) {
            goto LABEL_48;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(void))((swift_isaMask & *(void *)v63) + 0x228))();
LABEL_48:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v8 = v114;
        goto LABEL_49;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void))((swift_isaMask & *(void *)v18) + 0x228))();
    goto LABEL_32;
  }
LABEL_49:
  uint64_t v98 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = v98;
  *(void *)(v99 + 24) = v8;
  id v100 = (uint64_t *)&v13[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v101 = *v100;
  uint64_t *v100 = (uint64_t)sub_100090904;
  v100[1] = v99;
  id v102 = v8;
  sub_100005690(v101);
LABEL_53:
  sub_10008F2AC(&OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_autoModeGlyph, (uint64_t (*)(void))sub_10008ED3C);
  sub_10009019C();

  return v13;
}

void sub_100090120(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    [a3 setOn:[a3 on] ^ 1];
    sub_10009019C();
  }
}

id sub_10009019C()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_autoModeGlyph];
  if (v1)
  {
    id v2 = v1;
    [v2 setHidden:!sub_10008ED3C()];
  }
  char v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_recirculation];
  unsigned int v4 = [v3 on];
  uint64_t v5 = &v0[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  if (!v4)
  {
    swift_beginAccess();
    uint64_t v8 = *(void *)v5;
    uint64_t v9 = *((void *)v5 + 1);
    *(void *)uint64_t v5 = 0xD000000000000017;
    *((void *)v5 + 1) = 0x80000001000B8BC0;
    if (v9)
    {
      if (v8 == 0xD000000000000017 && v9 == 0x80000001000B8BC0) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
LABEL_12:
    ClimateButton.updateClimateConfiguration()();
    goto LABEL_13;
  }
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *((void *)v5 + 1);
  *(void *)uint64_t v5 = 0xD00000000000001BLL;
  *((void *)v5 + 1) = 0x80000001000B8BE0;
  if (!v7) {
    goto LABEL_12;
  }
  if (v6 == 0xD00000000000001BLL && v7 == 0x80000001000B8BE0) {
    goto LABEL_13;
  }
LABEL_11:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_12;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  sub_10009F8A4();
  objc_msgSend(v0, "setEnabled:", (_s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0((char)objc_msgSend(v3, "on"), (char)objc_msgSend(v3, "autoMode"), (char)objc_msgSend(v3, "onRestricted"), (char)objc_msgSend(v3, "onInvalid"), (char)objc_msgSend(v3, "onDisabled")) & 0x18) == 0);
  sub_100090420();
  return sub_100088B54();
}

uint64_t sub_100090420()
{
  if (sub_10008ED3C())
  {
    uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
    id v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
    char v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
    uint64_t v5 = self;
    id v6 = v2;
    id v7 = v3;
    swift_bridgeObjectRetain();
    id v8 = [v5 systemGreenColor];
    if (v8)
    {
      id v9 = v8;

      id v7 = v9;
    }
    uint64_t v10 = *(void **)v1;
    uint64_t v11 = *(void **)(v1 + 8);
    uint64_t v12 = *(void *)(v1 + 16);
    *(void *)uint64_t v1 = v6;
    *(void *)(v1 + 8) = v7;
    *(void *)(v1 + 16) = v4;
    id v13 = v6;
    swift_bridgeObjectRetain_n();
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v14 = v13;
    id v15 = v7;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v4, v12);
      char v17 = v16;
      swift_bridgeObjectRelease();

      if (v17) {
        goto LABEL_13;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_100088B54();
LABEL_13:

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return sub_10008896C();
}

void sub_1000905DC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate33ClimateRecirculationServiceButton_autoModeGlyph);
}

id sub_10009061C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateRecirculationServiceButton();
  return [super dealloc];
}

uint64_t type metadata accessor for ClimateRecirculationServiceButton()
{
  return self;
}

id sub_10009078C()
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1000EA798;
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    objc_super v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)objc_super v2 = 67240192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Recirculation did update ON: %{BOOL,public}d", v2, 8u);
    swift_slowDealloc();
  }
  return sub_10009019C();
}

uint64_t sub_10009088C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000908C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100090904(uint64_t a1)
{
  sub_100090120(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10009090C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_temperature);
  unsigned __int8 v2 = [v1 targetTemperatureRestricted];
  unsigned int v3 = [v1 targetTemperatureInvalid];
  unsigned __int8 v4 = [v1 targetTemperatureDisabled];
  if (v2)
  {
    uint64_t v5 = 4;
    if (v3) {
      uint64_t v5 = 12;
    }
    if ((v4 & 1) == 0) {
      return v5;
    }
    return v5 | 0x10;
  }
  uint64_t v5 = 8;
  if (!v3) {
    uint64_t v5 = 0;
  }
  if (v4) {
    return v5 | 0x10;
  }
  return v5;
}

void sub_100090A44(void *a1, char a2, uint64_t a3, char a4, char a5)
{
  uint64_t v51 = a3;
  char v9 = a4 & 1;
  uint64_t v10 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v10 - 8);
  id v50 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006730((uint64_t *)&unk_1000E5450);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006730(&qword_1000E5440);
  uint64_t v45 = *(void *)(v15 - 8);
  uint64_t v46 = v15;
  __chkstk_darwin(v15);
  char v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006730(&qword_1000E5448);
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  __chkstk_darwin(v18);
  uint64_t v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v5[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v5[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_upArrow] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_downArrow] = 0;
  id v20 = v5;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v21 = (void *)sub_100022D90((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v21 = &_swiftEmptySetSingleton;
  }
  *(void *)&v20[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_cancellables] = v21;
  id v22 = [self celsius];
  sub_100007310(0, (unint64_t *)&qword_1000E4D10);
  Measurement.init(value:unit:)();
  v20[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_style] = a5;
  *(void *)&v20[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_temperature] = a1;
  id v23 = a1;

  id v24 = sub_100015F7C(a2 & 1, v51, v9);
  id v25 = self;
  id v26 = v24;
  id v27 = [v25 clearColor];
  [v26 setBackgroundColor:v27];

  [v23 registerObserver:v26];
  id v28 = [v23 car];
  if (v28)
  {
    id v29 = v28;
    id v30 = [v28 dimensionManager];

    [v30 registerObserver:v26];
  }
  if (a5 == 5)
  {
    id v31 = [v26 titleLabel];
    if (v31)
    {
      char v32 = v31;
      id v33 = [self monospacedDigitSystemFontOfSize:13.0 weight:UIFontWeightSemibold];
      [v32 setFont:v33];
    }
  }
  else if (a5 == 1)
  {
    sub_100092B9C();
  }
  id v34 = [self sharedApplication];
  id v35 = [v34 delegate];

  if (v35)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v36 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_beginAccess();
    sub_100006730((uint64_t *)&unk_1000E5490);
    Published.projectedValue.getter();
    swift_endAccess();

    id v52 = [self mainRunLoop];
    uint64_t v37 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v14, 1, 1, v37);
    sub_100007310(0, (unint64_t *)&unk_1000E5470);
    sub_10000D02C((unint64_t *)&unk_1000E77B0, &qword_1000E5440);
    sub_10000CF84();
    uint64_t v38 = v46;
    id v39 = v47;
    Publisher.receive<A>(on:options:)();
    sub_10000A404((uint64_t)v14, (uint64_t *)&unk_1000E5450);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v38);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_10000D02C(&qword_1000E54A0, &qword_1000E5448);
    uint64_t v40 = v49;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    id v41 = [v23 targetTemperature];
    uint64_t v42 = (uint64_t)v50;
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = sub_100006730(&qword_1000E5040);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
    sub_100091244(v42);
    sub_10000A404(v42, (uint64_t *)&unk_1000E4D00);
    id v44 = [v26 traitCollection];
    [v26 traitCollectionDidChange:v44];
  }
  else
  {
    __break(1u);
  }
}

void sub_1000911F0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100091504();
  }
}

uint64_t sub_100091244(uint64_t a1)
{
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730(&qword_1000E5040);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v18 - v11;
  sub_100029464(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    return sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E4D00);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  v18[1] = v1;
  uint64_t v14 = v1 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_currentValue;
  swift_beginAccess();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15(v10, v14, v6);
  sub_10000D02C((unint64_t *)&unk_1000E55E0, &qword_1000E5040);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  if ((v16 & 1) == 0)
  {
    v15(v10, (uint64_t)v12, v6);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 24))(v14, v10, v6);
    swift_endAccess();
    sub_100091B6C();
    sub_1000921E0();
    v17(v10, v6);
  }
  return ((uint64_t (*)(char *, uint64_t))v17)(v12, v6);
}

void sub_100091504()
{
  sub_100091B6C();
  sub_10009F8A4();
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_temperature];
  [v1 targetTemperatureRestricted];
  objc_msgSend(v0, "setEnabled:", (objc_msgSend(v1, "targetTemperatureDisabled") | objc_msgSend(v1, "targetTemperatureInvalid")) ^ 1);
  sub_1000921E0();

  sub_1000915A0();
}

void sub_1000915A0()
{
  uint64_t v1 = v0;
  ClimateButton.refreshColorConfig()();
  if (v0[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_style] != 1) {
    return;
  }
  unsigned __int8 v2 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_upArrow];
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_downArrow];
  if (!v3) {
    return;
  }
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_temperature];
  id v5 = v2;
  id v6 = v3;
  unsigned int v7 = [v4 targetTemperatureRestricted];
  unsigned int v8 = [v4 targetTemperatureInvalid];
  unsigned int v9 = [v4 targetTemperatureDisabled];
  id v37 = v5;
  if (v7)
  {
    if (v8) {
      char v10 = 12;
    }
    else {
      char v10 = 4;
    }
    if ((v9 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_14:
    v10 |= 0x10u;
    goto LABEL_15;
  }
  if (v8) {
    char v10 = 8;
  }
  else {
    char v10 = 0;
  }
  if (v9) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v11 = self;
  id v12 = [v11 sharedApplication];
  id v13 = [v12 delegate];

  if (!v13)
  {
    __break(1u);
    goto LABEL_36;
  }
  type metadata accessor for ClimateAppDelegate();
  swift_dynamicCastClassUnconditional();
  id v14 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  id v15 = [v11 sharedApplication];
  id v16 = [v15 delegate];

  if (!v16)
  {
LABEL_36:
    __break(1u);
    return;
  }
  swift_dynamicCastClassUnconditional();
  id v17 = sub_10008EAA4();
  swift_unknownObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if (v38 == 1)
  {
    id v22 = self;
    id v23 = [v22 labelColor];
    id v24 = [v23 colorWithAlphaComponent:0.3];

    id v20 = v37;
    [v37 setTintColor:v24];

    id v25 = [v22 labelColor];
    id v26 = [v25 colorWithAlphaComponent:0.3];
LABEL_26:
    id v28 = v26;

    [v6 setTintColor:v28];
    goto LABEL_27;
  }
  if ((v10 & 0x10) != 0)
  {
    id v20 = v37;
    if (qword_1000E46A0 != -1) {
      swift_once();
    }
    [v37 setTintColor:qword_1000EA718];
    [v6 setTintColor:qword_1000EA718];
    goto LABEL_27;
  }
  uint64_t v18 = self;
  id v19 = [v18 systemRedColor];
  id v20 = v37;
  if ((v10 & 4) != 0)
  {
    id v27 = sub_100064984();

    [v37 setTintColor:v27];
    id v25 = [v18 systemBlueColor];
    id v26 = sub_100064984();
    goto LABEL_26;
  }
  [v37 setTintColor:v19];

  id v21 = [v18 systemBlueColor];
  [v6 setTintColor:v21];

LABEL_27:
  [v1 setEnabled:v38 != 1];
  id v29 = [v20 layer];
  if ((v10 & 0x10) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v31 = objc_allocWithZone((Class)CAFilter);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v30 = [v31 initWithType:v32];
  }
  else
  {
    id v30 = 0;
  }
  [v29 setCompositingFilter:v30, v37];

  id v33 = [v6 layer];
  if ((v10 & 0x10) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v35 = objc_allocWithZone((Class)CAFilter);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v34 = [v35 initWithType:v36];
  }
  else
  {
    id v34 = 0;
  }
  [v33 setCompositingFilter:v34];
}

uint64_t sub_100091B6C()
{
  uint64_t v1 = v0;
  uint64_t v46 = sub_100006730(&qword_1000E5040);
  uint64_t v2 = *(void *)(v46 - 8);
  uint64_t v3 = __chkstk_darwin(v46);
  id v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unsigned int v7 = (char *)&v46 - v6;
  int v8 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_style);
  unsigned int v9 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_temperature);
  [v9 targetTemperatureRestricted];
  unsigned int v10 = [v9 targetTemperatureInvalid];
  unsigned int v11 = [v9 targetTemperatureDisabled];
  if (v8 == 1)
  {
    if (v10)
    {
      id v12 = (void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
      swift_beginAccess();
      uint64_t v13 = v12[1];
      *id v12 = 0;
      v12[1] = 0;
      if (v13)
      {
        ClimateButton.updateClimateConfiguration()();
        swift_bridgeObjectRelease();
      }
      uint64_t v27 = v1 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_currentValue;
      swift_beginAccess();
      uint64_t v28 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v27, v46);
      uint64_t v29 = Measurement<>.invalidString.getter();
      uint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v28);
      NSString v32 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
      uint64_t result = swift_beginAccess();
      uint64_t v33 = *v32;
      uint64_t v23 = v32[1];
      uint64_t *v32 = v29;
      v32[1] = v31;
      if (v31)
      {
        if (v23)
        {
          if (v29 == v33 && v23 == v31) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_41;
        }
LABEL_44:
        ClimateButton.updateClimateConfiguration()();
        return swift_bridgeObjectRelease();
      }
LABEL_43:
      if (!v23) {
        return result;
      }
      goto LABEL_44;
    }
    [v9 targetTemperatureRestricted];
    [v9 targetTemperatureInvalid];
    unsigned int v16 = [v9 targetTemperatureDisabled];
    id v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    if (v16)
    {
      swift_beginAccess();
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      *(_OWORD *)id v17 = xmmword_1000B42F0;
      if (!v19
        || (v18 == 0x6C6C69662E6E6166 ? (BOOL v20 = v19 == 0xE800000000000000) : (BOOL v20 = 0),
            !v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        ClimateButton.updateClimateConfiguration()();
      }
      swift_bridgeObjectRelease();
      id v21 = (void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
      uint64_t result = swift_beginAccess();
      uint64_t v23 = v21[1];
      void *v21 = 0;
      v21[1] = 0;
      goto LABEL_43;
    }
    swift_beginAccess();
    uint64_t v26 = v17[1];
    *id v17 = 0;
    v17[1] = 0;
    if (v26)
    {
      ClimateButton.updateClimateConfiguration()();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if ((v10 | v11) == 1)
    {
      id v14 = (void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
      swift_beginAccess();
      uint64_t v15 = v14[1];
      void *v14 = 0;
      v14[1] = 0;
      if (v15)
      {
        ClimateButton.updateClimateConfiguration()();
        swift_bridgeObjectRelease();
      }
      id v35 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
      swift_beginAccess();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      *id v35 = 0xD000000000000012;
      v35[1] = 0x80000001000B6600;
      if (!v37) {
        goto LABEL_44;
      }
      if (v36 == 0xD000000000000012 && v37 == 0x80000001000B6600) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_41;
    }
    id v24 = (void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
    swift_beginAccess();
    uint64_t v25 = v24[1];
    void *v24 = 0;
    v24[1] = 0;
    if (v25)
    {
      ClimateButton.updateClimateConfiguration()();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v38 = v1 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_currentValue;
  swift_beginAccess();
  uint64_t v39 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v38, v46);
  id v40 = [v9 targetTemperatureRange];
  uint64_t v41 = Measurement<>.readableString(in:)();
  uint64_t v43 = v42;

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v39);
  id v44 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_title);
  uint64_t result = swift_beginAccess();
  uint64_t v45 = *v44;
  uint64_t v23 = v44[1];
  uint64_t *v44 = v41;
  v44[1] = v43;
  if (!v43) {
    goto LABEL_43;
  }
  if (!v23) {
    goto LABEL_44;
  }
  if (v41 == v45 && v43 == v23) {
    return swift_bridgeObjectRelease();
  }
LABEL_41:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_44;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000921E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  unsigned int v9 = (char *)&v100 - v8;
  __chkstk_darwin(v7);
  unsigned int v11 = (char *)&v100 - v10;
  id v12 = *(void **)(v1 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_temperature);
  unsigned int v13 = [v12 targetTemperatureRestricted];
  unsigned int v14 = [v12 targetTemperatureInvalid];
  unsigned int v15 = [v12 targetTemperatureDisabled];
  if (v13)
  {
    char v16 = 4;
    if (v14) {
      char v16 = 12;
    }
    if ((v15 & 1) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    v16 |= 0x10u;
    goto LABEL_10;
  }
  char v16 = 8;
  if (!v14) {
    char v16 = 0;
  }
  if (v15) {
    goto LABEL_9;
  }
LABEL_10:
  int v17 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_style);
  if (v17 == 1)
  {
    uint64_t v18 = self;
    id v19 = [v18 clearColor];
    id v20 = [v18 labelColor];
    uint64_t v107 = v1;
    uint64_t v21 = v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
    id v22 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
    id v23 = *(id *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
    id v24 = v22;
    swift_bridgeObjectRetain();
    id v25 = [v18 labelColor];
    sub_100006730((uint64_t *)&unk_1000E4CE0);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = 8;
    *(_OWORD *)(inited + 16) = xmmword_1000B2000;
    *(void *)(inited + 40) = v19;
    *(void *)(inited + 48) = v20;
    *(void *)(inited + 56) = &_swiftEmptyDictionarySingleton;
    unint64_t v27 = sub_100043070(inited);
    swift_setDeallocating();
    id v28 = v19;
    id v29 = v20;
    sub_100006730((uint64_t *)&unk_1000E77A0);
    swift_arrayDestroy();
    swift_bridgeObjectRelease();

    uint64_t v30 = *(void **)v21;
    uint64_t v31 = *(void **)(v21 + 8);
    uint64_t v32 = *(void *)(v21 + 16);
    *(void *)uint64_t v21 = v23;
    *(void *)(v21 + 8) = v25;
    *(void *)(v21 + 16) = v27;
    id v33 = v23;
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    id v34 = v33;
    id v35 = v25;
    swift_bridgeObjectRetain_n();
    id v36 = v35;
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
    {
      sub_10007C1D0(v27, v32);
      char v38 = v37;
      swift_bridgeObjectRelease();

      if (v38) {
        goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_1000915A0();
LABEL_29:

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if ((v16 & 0x1C) == 0)
  {
    id v60 = [v12 currentTemperature];
    if (v60)
    {
      char v61 = v60;
      uint64_t v104 = sub_100007310(0, (unint64_t *)&qword_1000E4D10);
      static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v9, v2);
      uint64_t v107 = v1;
      uint64_t v62 = v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
      id v105 = (uint64_t (*)(char *, uint64_t))v3;
      id v63 = *(id *)v62;
      char v64 = *(void **)(v62 + 8);
      uint64_t v65 = *(void *)(v62 + 16);
      uint64_t v66 = self;
      id v67 = v63;
      id v68 = v64;
      uint64_t v103 = v65;
      swift_bridgeObjectRetain();
      id v69 = [v66 clearColor];
      BOOL v70 = v17 == 5 || v17 == 0;
      id v71 = &selRef_labelColor;
      if (!v70) {
        id v71 = &selRef_systemWhiteColor;
      }
      id v72 = *v71;
      id v101 = v66;
      id v102 = [v66 v72];
      id v106 = v69;
      if (!v69) {
        id v106 = v67;
      }

      id v73 = [v12 targetTemperature];
      static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000D02C((unint64_t *)&qword_1000E7790, &qword_1000E5040);
      LOBYTE(v73) = dispatch thunk of static Comparable.< infix(_:_:)();
      unint64_t v74 = (void (*)(char *, uint64_t))*((void *)v105 + 1);
      v74(v6, v2);
      id v105 = (uint64_t (*)(char *, uint64_t))v74;
      if (v73)
      {
        uint64_t v75 = *(void **)(v62 + 8);
        uint64_t v76 = *(void *)(v62 + 16);
        id v77 = *(id *)v62;
        id v78 = v75;
        swift_bridgeObjectRetain();
        id v79 = v101;
        id v80 = [v101 clearColor];
        id v81 = [v79 systemBlueColor];
      }
      else
      {
        id v82 = [v12 targetTemperature];
        static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v82) = static Measurement.< infix<A, B>(_:_:)();
        v74(v6, v2);
        if ((v82 & 1) == 0)
        {
          id v87 = v102;
          uint64_t v88 = v103;
          goto LABEL_53;
        }
        id v83 = *(void **)(v62 + 8);
        uint64_t v76 = *(void *)(v62 + 16);
        id v77 = *(id *)v62;
        id v78 = v83;
        swift_bridgeObjectRetain();
        id v84 = v101;
        id v80 = [v101 clearColor];
        id v81 = [v84 systemRedColor];
      }
      id v85 = v81;
      swift_bridgeObjectRelease();

      id v86 = v80;
      if (!v80) {
        id v86 = v77;
      }
      id v106 = v86;
      if (!v85)
      {
        id v78 = v78;
        id v85 = v78;
      }

      id v87 = v85;
      uint64_t v88 = v76;
LABEL_53:
      id v89 = *(id *)v62;
      id v90 = *(void **)(v62 + 8);
      uint64_t v91 = *(void *)(v62 + 16);
      id v92 = v106;
      *(void *)uint64_t v62 = v106;
      *(void *)(v62 + 8) = v87;
      *(void *)(v62 + 16) = v88;
      uint64_t v93 = v87;
      sub_100007310(0, (unint64_t *)&qword_1000E4A20);
      id v94 = v92;
      id v95 = v93;
      swift_bridgeObjectRetain_n();
      id v96 = v94;
      id v97 = v95;
      if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
      {
        sub_10007C1D0(v88, v91);
        char v99 = v98;
        swift_bridgeObjectRelease();

        if (v99) {
          goto LABEL_59;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_1000915A0();
LABEL_59:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v105(v11, v2);
    }
  }
  uint64_t v39 = v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig;
  id v40 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
  uint64_t v41 = *(void **)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
  uint64_t v42 = *(void *)(v1 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
  uint64_t v43 = self;
  id v44 = v40;
  id v45 = v41;
  swift_bridgeObjectRetain();
  id v46 = [v43 clearColor];
  BOOL v47 = v17 == 5 || v17 == 0;
  uint64_t v48 = &selRef_labelColor;
  if (!v47) {
    uint64_t v48 = &selRef_systemWhiteColor;
  }
  id v49 = [v43 *v48];
  if (!v46) {
    id v46 = v44;
  }

  id v50 = *(void **)v39;
  uint64_t v51 = *(void **)(v39 + 8);
  uint64_t v52 = *(void *)(v39 + 16);
  *(void *)uint64_t v39 = v46;
  *(void *)(v39 + 8) = v49;
  *(void *)(v39 + 16) = v42;
  swift_bridgeObjectRetain_n();
  sub_100007310(0, (unint64_t *)&qword_1000E4A20);
  id v53 = v46;
  id v54 = v49;
  id v55 = v53;
  id v56 = v54;
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
  {
    sub_10007C1D0(v42, v52);
    char v58 = v57;
    swift_bridgeObjectRelease();

    if (v58) {
      goto LABEL_32;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1000915A0();
LABEL_32:

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_100092B9C()
{
  uint64_t v1 = v0;
  id v2 = [self configurationWithPointSize:5 weight:12.0];
  id v3 = [objc_allocWithZone((Class)UIImageView) init];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = self;
  id v6 = [v5 systemImageNamed:v4];

  id v38 = v2;
  if (v6)
  {
    id v7 = [v6 imageWithConfiguration:v2];
  }
  else
  {
    id v7 = 0;
  }
  [v3 setImage:v7];

  [v1 addSubview:v3];
  uint64_t v8 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000B1F40;
  id v10 = [v3 topAnchor];
  id v11 = [v1 topAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11 constant:-4.0];

  *(void *)(v9 + 32) = v12;
  id v13 = [v3 centerXAnchor];
  id v14 = [v1 centerXAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v9 + 40) = v15;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v36 = v8;
  [v8 activateConstraints:isa];

  int v17 = *(void **)&v1[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_upArrow];
  *(void *)&v1[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_upArrow] = v3;
  id v18 = v3;

  id v19 = self;
  id v20 = [v19 systemRedColor];
  [v18 setTintColor:v20];

  id v21 = [objc_allocWithZone((Class)UIImageView) init];
  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v5 systemImageNamed:v22];

  if (v23)
  {
    id v24 = v38;
    id v25 = [v23 imageWithConfiguration:v38];
  }
  else
  {
    id v25 = 0;
    id v24 = v38;
  }
  [v21 setImage:v25];

  [v1 addSubview:v21];
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1000B1F40;
  id v27 = [v21 bottomAnchor];
  id v28 = [v1 bottomAnchor];
  id v29 = [v27 constraintEqualToAnchor:v28 constant:4.0];

  *(void *)(v26 + 32) = v29;
  id v30 = [v21 centerXAnchor];
  id v31 = [v1 centerXAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31];

  *(void *)(v26 + 40) = v32;
  specialized Array._endMutation()();
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v36 activateConstraints:v33];

  id v34 = *(void **)&v1[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_downArrow];
  *(void *)&v1[OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_downArrow] = v21;
  id v35 = v21;

  id v37 = [v19 systemBlueColor];
  [v35 setTintColor:v37];
}

uint64_t sub_100093110()
{
  sub_100026DD0(v0 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_delegate);

  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_currentValue;
  uint64_t v2 = sub_100006730(&qword_1000E5040);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_1000931D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateTemperatureIndicator();
  [super dealloc];
}

uint64_t sub_1000932CC()
{
  return type metadata accessor for ClimateTemperatureIndicator();
}

uint64_t type metadata accessor for ClimateTemperatureIndicator()
{
  uint64_t result = qword_1000E7768;
  if (!qword_1000E7768) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100093320()
{
  sub_100028EF0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

id sub_1000933EC(void *a1, uint64_t a2)
{
  id v28 = a1;
  uint64_t v3 = sub_100006730((uint64_t *)&unk_1000E4D00);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006730(&qword_1000E5040);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v27 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)v24 - v10;
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v12 = qword_1000EA798;
  id v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29(v11, a2, v6);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = v5;
    id v15 = (uint8_t *)v14;
    v32[0] = swift_slowAlloc();
    uint64_t v25 = a2;
    *(_DWORD *)id v15 = 136446210;
    v24[1] = v15 + 4;
    sub_10000D02C((unint64_t *)&unk_1000E7780, &qword_1000E5040);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = sub_10000A56C(v16, v17, v32);
    a2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Temperature indicator updated to: %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v26;
    swift_slowDealloc();
  }
  else
  {
    id v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v11, v6);
  }
  uint64_t v19 = v7;
  id result = [v28 receivedAllValues];
  if (result)
  {
    uint64_t v21 = v30;
    sub_100091504();
    uint64_t v22 = v21 + OBJC_IVAR____TtC7Climate27ClimateTemperatureIndicator_currentValue;
    swift_beginAccess();
    id v23 = v27;
    v29(v27, v22, v6);
    sub_10000D02C((unint64_t *)&unk_1000E55E0, &qword_1000E5040);
    LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)();
    v18(v23, v6);
    if ((v22 & 1) == 0)
    {
      if (swift_unknownObjectWeakLoadStrong())
      {
        sub_10005726C();
        swift_unknownObjectRelease();
      }
    }
    v29(v5, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v5, 0, 1, v6);
    sub_100091244((uint64_t)v5);
    return (id)sub_10000A404((uint64_t)v5, (uint64_t *)&unk_1000E4D00);
  }
  return result;
}

void sub_100093BEC()
{
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1000EA798;
  id v2 = v0;
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134349056;
    id v5 = [v2 traitCollection];
    [v5 userInterfaceStyle];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v3, "Temperature indicator updated with user interface style: %{public}ld", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000921E0();
  sub_1000915A0();
}

uint64_t sub_100093D48()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100093D80()
{
}

uint64_t sub_100093D88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100093DB0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_managerQueue);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_10009667C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005FC84;
  aBlock[3] = &unk_1000CCA48;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  unint64_t v17 = _swiftEmptyArrayStorage;
  sub_1000965A4((unint64_t *)&qword_1000E5DD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006730((uint64_t *)&unk_1000E7C80);
  sub_1000965EC(&qword_1000E5DE0, (uint64_t *)&unk_1000E7C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
  swift_release();
  swift_release();
  return sub_100094488();
}

uint64_t sub_1000940AC()
{
  uint64_t v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_managerQueue);
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100096538;
  *(void *)(v3 + 24) = v2;
  v6[4] = sub_10002AF48;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  uint64_t v6[2] = sub_100093D88;
  v6[3] = &unk_1000CC9F8;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100094208()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (unsigned char *)result;
    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_1000EA7A0;
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "reset", v4, 2u);
      swift_slowDealloc();
    }
    v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_climateSystemManagerCreated] = 0;
    uint64_t v5 = &v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingServices];
    uint64_t v6 = swift_beginAccess();
    __chkstk_darwin(v6);
    os_log_type_t v13 = v1;
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_100095F0C(v7, (void (*)(char *, id))sub_100096550, (uint64_t)v12, (uint64_t *)&unk_1000E7840);
    swift_bridgeObjectRelease();
    *uint64_t v5 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v8 = &v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingAccessories];
    uint64_t v9 = swift_beginAccess();
    __chkstk_darwin(v9);
    os_log_type_t v13 = v1;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_100095F0C(v10, (void (*)(char *, id))sub_1000966A4, (uint64_t)v12, &qword_1000E7838);
    swift_bridgeObjectRelease();
    *uint64_t v8 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_overlayViewControllerDidLoad] = 0;
    v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_mainViewControllerDidLoad] = 0;
    uint64_t v11 = &v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_emitted];
    swift_beginAccess();
    *uint64_t v11 = &_swiftEmptyDictionarySingleton;

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100094488()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *(void *)(v0 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_managerQueue);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_100096530;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005FC84;
  aBlock[3] = &unk_1000CC9A8;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v13 = _swiftEmptyArrayStorage;
  sub_1000965A4((unint64_t *)&qword_1000E5DD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006730((uint64_t *)&unk_1000E7C80);
  sub_1000965EC(&qword_1000E5DE0, (uint64_t *)&unk_1000E7C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v12);
  swift_release();
  return swift_release();
}

void sub_100094750()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000947AC();
    sub_100094A2C();
    sub_100094D4C();
  }
}

uint64_t sub_1000947AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_emitted);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (!*(void *)(*v2 + 16)
    || (uint64_t result = sub_10007C94C(0), (v5 & 1) == 0)
    || (*(unsigned char *)(*(void *)(v3 + 56) + result) & 1) == 0)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_climateSystemManagerCreated) == 1)
    {
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_overlayViewControllerDidLoad) == 1)
      {
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v11 = *v2;
        uint64_t *v2 = 0x8000000000000000;
        sub_100040020(1, 0, isUniquelyReferenced_nonNull_native);
        uint64_t *v2 = v11;
        swift_bridgeObjectRelease();
        swift_endAccess();
        CAFSignpostEmit_InstantOn();
        if (qword_1000E46E0 != -1) {
          swift_once();
        }
        uint64_t v7 = qword_1000EA7A0;
        os_log_type_t v8 = static os_log_type_t.default.getter();
        uint64_t result = os_log_type_enabled(v7, v8);
        if (result)
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v9 = 0;
          uint64_t v10 = "emittedInstantOnSignpost";
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
          return swift_slowDealloc();
        }
      }
      else
      {
        if (qword_1000E46E0 != -1) {
          swift_once();
        }
        uint64_t v7 = qword_1000EA7A0;
        os_log_type_t v8 = static os_log_type_t.default.getter();
        uint64_t result = os_log_type_enabled(v7, v8);
        if (result)
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v9 = 0;
          uint64_t v10 = "overlayViewControllerDidLoad false";
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (qword_1000E46E0 != -1) {
        swift_once();
      }
      uint64_t v7 = qword_1000EA7A0;
      os_log_type_t v8 = static os_log_type_t.default.getter();
      uint64_t result = os_log_type_enabled(v7, v8);
      if (result)
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        uint64_t v10 = "climateSystemManagerCreated false";
        goto LABEL_18;
      }
    }
  }
  return result;
}

uint64_t sub_100094A2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_emitted);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (!*(void *)(*v2 + 16)
    || (uint64_t result = sub_10007C94C(1u), (v5 & 1) == 0)
    || (*(unsigned char *)(*(void *)(v3 + 56) + result) & 1) == 0)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_climateSystemManagerCreated) == 1)
    {
      uint64_t v6 = *v2;
      if (*(void *)(*v2 + 16) && (unint64_t v7 = sub_10007C94C(0), (v8 & 1) != 0) && *(unsigned char *)(*(void *)(v6 + 56) + v7) == 1)
      {
        if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_mainViewControllerDidLoad) == 1)
        {
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v14 = *v2;
          uint64_t *v2 = 0x8000000000000000;
          sub_100040020(1, 1u, isUniquelyReferenced_nonNull_native);
          uint64_t *v2 = v14;
          swift_bridgeObjectRelease();
          swift_endAccess();
          CAFSignpostEmit_Rendered();
          if (qword_1000E46E0 != -1) {
            swift_once();
          }
          uint64_t v10 = qword_1000EA7A0;
          os_log_type_t v11 = static os_log_type_t.default.getter();
          uint64_t result = os_log_type_enabled(v10, v11);
          if (result)
          {
            uint64_t v12 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v12 = 0;
            os_log_type_t v13 = "emittedRenderedSignpost";
LABEL_21:
            _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
            return swift_slowDealloc();
          }
        }
        else
        {
          if (qword_1000E46E0 != -1) {
            swift_once();
          }
          uint64_t v10 = qword_1000EA7A0;
          os_log_type_t v11 = static os_log_type_t.default.getter();
          uint64_t result = os_log_type_enabled(v10, v11);
          if (result)
          {
            uint64_t v12 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v12 = 0;
            os_log_type_t v13 = "mainViewControllerDidLoad false";
            goto LABEL_21;
          }
        }
      }
      else
      {
        if (qword_1000E46E0 != -1) {
          swift_once();
        }
        uint64_t v10 = qword_1000EA7A0;
        os_log_type_t v11 = static os_log_type_t.default.getter();
        uint64_t result = os_log_type_enabled(v10, v11);
        if (result)
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          os_log_type_t v13 = "emittedInstantOnSignpost false";
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (qword_1000E46E0 != -1) {
        swift_once();
      }
      uint64_t v10 = qword_1000EA7A0;
      os_log_type_t v11 = static os_log_type_t.default.getter();
      uint64_t result = os_log_type_enabled(v10, v11);
      if (result)
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        os_log_type_t v13 = "climateSystemManagerCreated false";
        goto LABEL_21;
      }
    }
  }
  return result;
}

void sub_100094D4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_emitted];
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  if (*(void *)(*(void *)v2 + 16))
  {
    unint64_t v4 = sub_10007C94C(2u);
    if (v5 & 1) != 0 && (*(unsigned char *)(*(void *)(v3 + 56) + v4)) {
      return;
    }
  }
  if (v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_climateSystemManagerCreated] != 1)
  {
    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1000EA7A0;
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v16)) {
      return;
    }
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    id v18 = "climateSystemManagerCreated false";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
LABEL_22:
    swift_slowDealloc();
    return;
  }
  uint64_t v6 = *(void *)v2;
  if (!*(void *)(*(void *)v2 + 16)
    || (unint64_t v7 = sub_10007C94C(1u), (v8 & 1) == 0)
    || *(unsigned char *)(*(void *)(v6 + 56) + v7) != 1)
  {
    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1000EA7A0;
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v16)) {
      return;
    }
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    id v18 = "emittedRenderedSignpost false";
    goto LABEL_21;
  }
  uint64_t v9 = &v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingServices];
  swift_beginAccess();
  if (*(void *)(*(void *)v9 + 16))
  {
    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_1000EA7A0;
    os_log_type_t v11 = v1;
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v13 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v14 = "observingServices.count=%{public}ld";
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v10, v12, v14, v13, 0xCu);
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  uint64_t v19 = &v1[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingAccessories];
  swift_beginAccess();
  if (*(void *)(*(void *)v19 + 16))
  {
    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_1000EA7A0;
    os_log_type_t v11 = v1;
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v13 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v14 = "observingAccessories.count=%{public}ld";
      goto LABEL_29;
    }
LABEL_30:

    return;
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *(void *)v2;
  *(void *)uint64_t v2 = 0x8000000000000000;
  sub_100040020(1, 2u, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v2 = v21;
  swift_bridgeObjectRelease();
  swift_endAccess();
  CAFSignpostEmit_Finalized();
  if (qword_1000E46E0 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1000EA7A0;
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    id v18 = "emittedFinalizedSignpost";
    goto LABEL_21;
  }
}

id sub_1000951D4()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingServices] = &_swiftEmptyDictionarySingleton;
  *(void *)&v0[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingAccessories] = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = OBJC_IVAR____TtC7Climate22ClimateSignpostManager_managerQueue;
  unint64_t v9 = sub_100096564();
  uint64_t v6 = v0;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v13 = _swiftEmptyArrayStorage;
  sub_1000965A4(&qword_1000E7850, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100006730(&qword_1000E7858);
  sub_1000965EC(qword_1000E7860, &qword_1000E7858);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  *(void *)&v0[v10] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v6[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_emitted] = &_swiftEmptyDictionarySingleton;
  *(void *)&v6[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_car] = 0;
  v6[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_overlayViewControllerDidLoad] = 0;
  v6[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_mainViewControllerDidLoad] = 0;
  v6[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_climateSystemManagerCreated] = 0;

  unint64_t v7 = (objc_class *)type metadata accessor for ClimateSignpostManager();
  v12.receiver = v6;
  v12.super_class = v7;
  return [super init];
}

id sub_1000954D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSignpostManager();
  [super dealloc];
}

uint64_t type metadata accessor for ClimateSignpostManager()
{
  return self;
}

void sub_1000955A4(uint64_t a1, unint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v43 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    if (isUniquelyReferenced_nonNull_native >> 62)
    {
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_4:
        uint64_t v5 = &Strong[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingServices];
        unint64_t v6 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
        uint64_t v37 = v38 + 16;
        uint64_t v39 = (void (**)(uint64_t, uint64_t))(v38 + 8);
        unint64_t v40 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
        uint64_t v7 = 4;
        char v8 = &selRef_startAnimating;
        while (1)
        {
          if (v6) {
            id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v9 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v7);
          }
          uint64_t v10 = v9;
          uint64_t v11 = v7 - 3;
          if (__OFADD__(v7 - 4, 1))
          {
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          if (objc_msgSend(v9, v8[136], v37))
          {

            if (v11 == v4) {
              break;
            }
            goto LABEL_6;
          }
          uint64_t v12 = v4;
          unint64_t v13 = isUniquelyReferenced_nonNull_native;
          id v14 = [v10 uniqueIdentifier];
          uint64_t v15 = v43;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          swift_beginAccess();
          id v16 = v10;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v44 = *(void **)v5;
          unint64_t v17 = v44;
          *(void *)uint64_t v5 = 0x8000000000000000;
          unint64_t v19 = sub_10007C4F0(v15);
          uint64_t v20 = v17[2];
          BOOL v21 = (v18 & 1) == 0;
          uint64_t v22 = v20 + v21;
          if (__OFADD__(v20, v21)) {
            goto LABEL_33;
          }
          char v23 = v18;
          if (v17[3] >= v22)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v26 = v44;
              if ((v18 & 1) == 0) {
                goto LABEL_21;
              }
            }
            else
            {
              sub_100041D08();
              uint64_t v26 = v44;
              if ((v23 & 1) == 0) {
                goto LABEL_21;
              }
            }
          }
          else
          {
            sub_10003D620(v22, isUniquelyReferenced_nonNull_native);
            unint64_t v24 = sub_10007C4F0(v43);
            if ((v23 & 1) != (v25 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            unint64_t v19 = v24;
            uint64_t v26 = v44;
            if ((v23 & 1) == 0)
            {
LABEL_21:
              v26[(v19 >> 6) + 8] |= 1 << v19;
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 16))(v26[6] + *(void *)(v38 + 72) * v19, v43, v42);
              *(void *)(v26[7] + 8 * v19) = v16;
              uint64_t v28 = v26[2];
              BOOL v29 = __OFADD__(v28, 1);
              uint64_t v30 = v28 + 1;
              if (v29) {
                goto LABEL_34;
              }
              long long v26[2] = v30;
              goto LABEL_23;
            }
          }
          uint64_t v27 = v26[7];

          *(void *)(v27 + 8 * v19) = v16;
LABEL_23:
          *(void *)uint64_t v5 = v26;
          swift_bridgeObjectRelease();
          (*v39)(v43, v42);
          swift_endAccess();
          [v16 registerObserver:Strong];

          uint64_t v4 = v12;
          BOOL v31 = v11 == v12;
          char isUniquelyReferenced_nonNull_native = v13;
          unint64_t v6 = v40;
          char v8 = &selRef_startAnimating;
          if (v31) {
            break;
          }
LABEL_6:
          ++v7;
        }
      }
    }
    swift_bridgeObjectRelease();
    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    id v32 = qword_1000EA7A0;
    Class v33 = Strong;
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v35 = 134349056;
      id v36 = &v33[OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingServices];
      swift_beginAccess();
      id v44 = *(void **)(*(void *)v36 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v32, v34, "observingServices.count=%{public}ld", v35, 0xCu);
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_100095ACC(uint64_t a1, void *a2, void *a3, uint64_t (*a4)(char *), const char *a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v14 = (char *)Strong;
    [a2 unregisterObserver:Strong];
    id v15 = [a2 uniqueIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v16 = &v14[*a3];
    swift_beginAccess();
    unint64_t v17 = (void *)a4(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_endAccess();

    if (qword_1000E46E0 != -1) {
      swift_once();
    }
    char v18 = qword_1000EA7A0;
    unint64_t v19 = v14;
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v20))
    {
      BOOL v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v21 = 134349056;
      uint64_t v22 = *(void *)(*(void *)v16 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v18, v20, a5, v21, 0xCu);
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ClimateSignpostManager.Signpost(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100095E7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateSignpostManager.Signpost()
{
  return &type metadata for ClimateSignpostManager.Signpost;
}

unint64_t sub_100095EB8()
{
  unint64_t result = qword_1000E7828;
  if (!qword_1000E7828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E7828);
  }
  return result;
}

uint64_t sub_100095F0C(uint64_t a1, void (*a2)(char *, id), uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = a2;
  uint64_t v6 = sub_100006730(a4);
  __chkstk_darwin(v6);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v14;
    if (!v22)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v22 = *(void *)(v25 + 8 * v14);
      if (!v22)
      {
        int64_t v14 = v21 + 2;
        if (v21 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v22 = *(void *)(v25 + 8 * v14);
        if (!v22)
        {
          int64_t v14 = v21 + 3;
          if (v21 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v22 = *(void *)(v25 + 8 * v14);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_5:
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v8, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v18);
    unint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v16);
    *(void *)&v8[*(int *)(v6 + 48)] = v19;
    id v20 = v19;
    v27(v8, v20);
    uint64_t result = sub_10000A404((uint64_t)v8, a4);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v14 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v14 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100096174(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v4 + OBJC_IVAR____TtC7Climate22ClimateSignpostManager_managerQueue);
  uint64_t v22 = v4;
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005FC84;
  aBlock[3] = v20;
  unint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  id v17 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_1000965A4((unint64_t *)&qword_1000E5DD0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100006730((uint64_t *)&unk_1000E7C80);
  sub_1000965EC(&qword_1000E5DE0, (uint64_t *)&unk_1000E7C80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  swift_release();
  swift_release();
  return sub_100094488();
}

uint64_t sub_100096458()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100096494()
{
  sub_100095ACC(*(void *)(v0 + 16), *(void **)(v0 + 24), &OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingAccessories, (uint64_t (*)(char *))sub_10003AB90, "observingAccessories.count=%{public}ld");
}

uint64_t sub_1000964D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000964E4()
{
  return swift_release();
}

void sub_1000964F0()
{
  sub_100095ACC(*(void *)(v0 + 16), *(void **)(v0 + 24), &OBJC_IVAR____TtC7Climate22ClimateSignpostManager_observingServices, (uint64_t (*)(char *))sub_10003AB84, "observingServices.count=%{public}ld");
}

void sub_100096530()
{
}

uint64_t sub_100096538()
{
  return sub_100094208();
}

uint64_t sub_100096540()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100096550(int a1, id a2)
{
  return [a2 unregisterObserver:*(void *)(v2 + 16)];
}

unint64_t sub_100096564()
{
  unint64_t result = qword_1000E7C70;
  if (!qword_1000E7C70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E7C70);
  }
  return result;
}

uint64_t sub_1000965A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000965EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A4DC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009663C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10009667C()
{
  sub_1000955A4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000966AC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100096778()
{
  return *((unsigned __int8 *)v0 + *(void *)((swift_isaMask & *v0) + 0xA0));
}

uint64_t sub_1000967A4(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((swift_isaMask & *v1) + 0xA0)) = result;
  return result;
}

void sub_1000967D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_100097354();
}

void sub_1000967F8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_100097490();
}

void sub_100096858()
{
  id v1 = [v0 layer];
  [v1 setSublayers:0];

  sub_1000968B8();

  sub_100096B3C();
}

void sub_1000968B8()
{
  double v1 = sub_100096AB4();
  id v3 = [self bezierPathWithArcCenter:1 radius:v1 startAngle:v2 endAngle:*(double *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x98)) clockwise:0.0];
  id v4 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x78));
  id v5 = [v3 CGPath];
  [v4 setPath:v5];

  uint64_t v6 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68));
  if (v6) {
    id v7 = [v6 CGColor];
  }
  else {
    id v7 = 0;
  }
  [v4 setStrokeColor:v7];

  id v8 = [self clearColor];
  id v9 = [v8 CGColor];

  [v4 setFillColor:v9];
  id v10 = [v0 layer];
  [v10 addSublayer:v4];
}

double sub_100096AB4()
{
  [v0 center];
  double v2 = v1;
  double v4 = v3;
  id v5 = [v0 superview];
  [v0 convertPoint:v5 fromView:v2];
  double v7 = v6;

  return v7;
}

void sub_100096B3C()
{
  double v1 = sub_100096AB4();
  id v3 = [self bezierPathWithArcCenter:1 radius:v1 startAngle:v2 endAngle:*(double *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x98)) clockwise:-1.57079633];
  double v4 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x80));
  [v4 setLineCap:kCALineCapRound];
  id v5 = [v3 CGPath];
  [v4 setPath:v5];

  [v4 setShadowOpacity:0.0];
  id v6 = [self clearColor];
  id v7 = [v6 CGColor];

  [v4 setFillColor:v7];
  id v8 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x60));
  if (v8) {
    id v9 = [v8 CGColor];
  }
  else {
    id v9 = 0;
  }
  [v4 setStrokeColor:v9];

  id v10 = [v0 layer];
  [v10 addSublayer:v4];
}

void sub_100096D78(uint64_t a1)
{
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for ClimateProgressCircle();
  [super traitCollectionDidChange:a1];
  id v3 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x80));
  double v4 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x60));
  if (v4) {
    id v5 = [v4 CGColor];
  }
  else {
    id v5 = 0;
  }
  [v3 setStrokeColor:v5];

  id v6 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x78));
  id v7 = *(void **)((char *)v1 + *(void *)((swift_isaMask & *v1) + 0x68));
  if (v7) {
    id v8 = [v7 CGColor];
  }
  else {
    id v8 = 0;
  }
  [v6 setStrokeColor:v8];
}

void sub_100096EF4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_100096D78((uint64_t)a3);
}

id sub_100096F60(uint64_t a1, double a2, double a3)
{
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for ClimateProgressCircle();
  [super hitTest:a1 withEvent:a2];
  if (v7)
  {
    sub_100097530();
    id v8 = v3;
    id v9 = v7;
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {

      return 0;
    }
  }
  return v7;
}

id sub_100097060(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  id v11 = sub_100096F60((uint64_t)a5, a2, a3);

  return v11;
}

void sub_1000970DC()
{
}

id sub_100097120()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateProgressCircle();
  return [super dealloc];
}

uint64_t sub_100097194(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;

  uint64_t v3 = *(void *)(v2 + 80);
  id v6 = *(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8);
  v6(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x70)], v3);

  v6(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x88)], v3);
  double v4 = &a1[*(void *)((swift_isaMask & *(void *)a1) + 0x90)];

  return ((uint64_t (*)(char *, uint64_t))v6)(v4, v3);
}

uint64_t type metadata accessor for ClimateProgressCircle()
{
  return sub_10007EFCC();
}

void sub_100097354()
{
  *(void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x60)) = 0;
  *(void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68)) = 0;
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x78);
  *(void *)((char *)v0 + v1) = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x80);
  *(void *)((char *)v0 + v2) = [objc_allocWithZone((Class)CAShapeLayer) init];
  *((unsigned char *)v0 + *(void *)((swift_isaMask & *v0) + 0xA0)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100097490()
{
  if ((*((unsigned char *)v0 + *(void *)((swift_isaMask & *v0) + 0xA0)) & 1) == 0)
  {
    sub_100096858();
    *((unsigned char *)v0 + *(void *)((swift_isaMask & *v0) + 0xA0)) = 1;
  }
}

void sub_100097500()
{
}

unint64_t sub_100097530()
{
  unint64_t result = qword_1000E7AB0;
  if (!qword_1000E7AB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000E7AB0);
  }
  return result;
}

uint64_t sub_100097570(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10009C674(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_10009773C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native)
  {
    int64_t v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      if (*(void *)(a1 + 16)) {
        goto LABEL_5;
      }
      goto LABEL_18;
    }
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1000A2DA8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  int64_t v8 = v3[3] >> 1;
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if (v8 - v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v2 && v10 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  sub_100006730(&qword_1000E7450);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v2);
  uint64_t v14 = v12 + v2;
  if (!v13)
  {
    v3[2] = v14;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000978A8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_1000A2FC8(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100097A58(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10009C894(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100097C24(uint64_t a1)
{
  unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    sub_10001D4A4(*(void *)(a1 + 56) + 8 * v10, (uint64_t)v16);
    sub_10000D0D4((uint64_t)v16, (uint64_t)v15, &qword_1000E5DB0);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t result = sub_10000A404((uint64_t)v15, &qword_1000E5DB0);
    if (Strong)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return v17;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100097E6C()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state);
}

uint64_t sub_100097E7C(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state) = result;
  return result;
}

uint64_t sub_100097E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v6 = (void **)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  id v7 = *v6;
  int64_t v8 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v7) + 0x168);
  swift_bridgeObjectRetain();
  unint64_t v9 = v7;
  v8(a1, a2);

  unint64_t v10 = (uint64_t *)(*(void *)(v3 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton)
                  + OBJC_IVAR____TtC7Climate13ClimateButton_title);
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *v10;
  uint64_t v13 = v10[1];
  uint64_t *v10 = a1;
  v10[1] = a2;
  if (a2)
  {
    if (v13)
    {
      BOOL v14 = v12 == a1 && v13 == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (!v13)
  {
    return result;
  }
  ClimateButton.updateClimateConfiguration()();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100097FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v6 = (void **)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  id v7 = *v6;
  int64_t v8 = (uint64_t *)((char *)*v6 + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
  swift_beginAccess();
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *int64_t v8 = a1;
  v8[1] = a2;
  id v11 = v7;
  swift_bridgeObjectRetain();
  if (a2)
  {
    if (v9)
    {
      BOOL v12 = v10 == a1 && v9 == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
  if (v9)
  {
LABEL_10:
    ClimateButton.updateClimateConfiguration()();
LABEL_11:

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

LABEL_12:
  uint64_t v13 = (uint64_t *)(*(void *)(v3 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton)
                  + OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName);
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *v13;
  uint64_t v16 = v13[1];
  *uint64_t v13 = a1;
  v13[1] = a2;
  if (a2)
  {
    if (v16)
    {
      BOOL v17 = v15 == a1 && v16 == a2;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (!v16)
  {
    return result;
  }
  ClimateButton.updateClimateConfiguration()();
  return swift_bridgeObjectRelease();
}

void sub_10009813C()
{
  uint64_t v1 = v0;
  char v2 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v0) + 0x140))();
  if ((v2 & 0x18) != 0)
  {
    uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView];
    if (v3) {
      [v3 setAlpha:0.0];
    }
    uint64_t v4 = (id *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
    swift_beginAccess();
    unint64_t v5 = *(void **)((char *)*v4 + OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel);
    if (v5)
    {
      [v5 alpha];
      if (v6 > 0.1) {
        [*v4 updateAutoModeLabelWithIsVisible:0 isAnimated:0 animationDelay:0.0];
      }
    }
    goto LABEL_22;
  }
  char v7 = v2;
  if ((v2 & 2) != 0)
  {
    int64_t v8 = &v1[OBJC_IVAR____TtC7Climate14ClimateStepper_axis];
    swift_beginAccess();
    if (*(void *)v8)
    {
      [v1 frame];
      v45.origin.x = 0.0;
      v45.origin.y = 0.0;
      v45.size.width = 0.0;
      v45.size.double height = 0.0;
      if (CGRectEqualToRect(v44, v45))
      {
        uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView];
        if (v9) {
          [v9 setAlpha:0.0];
        }
        uint64_t v10 = (id *)&v1[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
        swift_beginAccess();
        [*v10 updateAutoModeLabelWithIsVisible:1 isAnimated:0 animationDelay:0.0];
        goto LABEL_22;
      }
      uint64_t v19 = self;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v1;
      uint64_t v42 = sub_10009DD20;
      uint64_t v43 = v20;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v39 = 1107296256;
      unint64_t v40 = sub_10005FC84;
      uint64_t v41 = &unk_1000CCC90;
      uint64_t v16 = _Block_copy(&aBlock);
      BOOL v21 = v1;
      swift_release();
      uint64_t v42 = ClimateStepper.configureColor();
      uint64_t v43 = 0;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v39 = 1107296256;
      unint64_t v40 = sub_10005FCC8;
      uint64_t v41 = &unk_1000CCCB8;
      uint64_t v22 = _Block_copy(&aBlock);
      [v19 _animateUsingSpringWithDuration:4 delay:v16 options:v22 mass:0.6 stiffness:0.0 damping:1.0 initialVelocity:215.0 animations:29.0 completion:0.0];
      _Block_release(v22);
LABEL_21:
      _Block_release(v16);
      goto LABEL_22;
    }
  }
  if ((v7 & 1) == 0) {
    goto LABEL_22;
  }
  id v11 = (id *)&v1[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
  swift_beginAccess();
  BOOL v12 = *(void **)((char *)*v11 + OBJC_IVAR____TtC7Climate13ClimateButton_autoModeLabel);
  if (v12)
  {
    [v12 alpha];
    if (v13 > 0.1)
    {
      [*v11 updateAutoModeLabelWithIsVisible:0 isAnimated:1 animationDelay:0.0];
      BOOL v14 = self;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v1;
      uint64_t v42 = sub_10009DCF8;
      uint64_t v43 = v15;
      CGAffineTransform aBlock = _NSConcreteStackBlock;
      uint64_t v39 = 1107296256;
      unint64_t v40 = sub_10005FC84;
      uint64_t v41 = &unk_1000CCC40;
      uint64_t v16 = _Block_copy(&aBlock);
      BOOL v17 = v1;
      swift_release();
      [v14 animateWithDuration:4 delay:v16 options:0 animations:0.2 completion:0.0];
      goto LABEL_21;
    }
  }
  unint64_t v18 = *(void **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView];
  if (v18) {
    [v18 setAlpha:1.0];
  }
LABEL_22:
  int64_t v23 = *(char **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton];
  sub_10009F8A4();
  uint64_t v24 = *(uint64_t (**)(uint64_t))&v23[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (v24)
  {
    uint64_t v25 = swift_retain();
    char v26 = v24(v25);
    sub_100005690((uint64_t)v24);
    if ((v26 & 0x10) != 0)
    {
      BOOL v27 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    char v26 = 0;
  }
  BOOL v27 = (v26 & 8) == 0;
LABEL_27:
  [v23 setEnabled:v27];
  ClimateButton.refreshColorConfig()();
  uint64_t v28 = *(char **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton];
  sub_10009F8A4();
  BOOL v29 = *(uint64_t (**)(uint64_t))&v28[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (v29)
  {
    uint64_t v30 = swift_retain();
    char v31 = v29(v30);
    sub_100005690((uint64_t)v29);
    if ((v31 & 0x10) != 0)
    {
      BOOL v32 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    char v31 = 0;
  }
  BOOL v32 = (v31 & 8) == 0;
LABEL_32:
  [v28 setEnabled:v32];
  ClimateButton.refreshColorConfig()();
  Class v33 = *(char **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton];
  sub_10009F8A4();
  os_log_type_t v34 = *(uint64_t (**)(uint64_t))&v33[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (!v34)
  {
    char v36 = 0;
    goto LABEL_36;
  }
  uint64_t v35 = swift_retain();
  char v36 = v34(v35);
  sub_100005690((uint64_t)v34);
  if ((v36 & 0x10) == 0)
  {
LABEL_36:
    BOOL v37 = (v36 & 8) == 0;
    goto LABEL_37;
  }
  BOOL v37 = 0;
LABEL_37:
  [v33 setEnabled:v37];
  ClimateButton.refreshColorConfig()();
  ClimateStepper.updatePresentation()();
}

id sub_10009873C(uint64_t a1)
{
  char v2 = *(void **)(a1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView);
  if (v2) {
    [v2 setAlpha:0.0];
  }
  uint64_t v3 = (id *)(a1 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  return [*v3 updateAutoModeLabelWithIsVisible:1 isAnimated:1 animationDelay:0.09];
}

void sub_1000987C8()
{
  uint64_t v4 = (void *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
  uint64_t v1 = swift_beginAccess();
  uint64_t v2 = *v4;
  int v3 = *((unsigned __int8 *)v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_isZeroUIReference);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x3B8))(v1);
  if (v2 != 1)
  {
    if (v3)
    {
      [v0 bounds];
      double Width = CGRectGetWidth(v29);
      id v6 = [*(id *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_range) maximum];
      goto LABEL_6;
    }
    uint64_t v17 = OBJC_IVAR____TtC7Climate14ClimateStepper_range;
    id v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v0
                                                                + OBJC_IVAR____TtC7Climate14ClimateStepper_range), "minimum"));
    unsigned int v19 = [v18 unsignedCharValue];

    LODWORD(v4) = v4 - v19;
    if ((v4 & 0xFFFFFF00) == 0)
    {
      [v0 bounds];
      double Width = CGRectGetWidth(v31);
      id v20 = [*(id *)((char *)v0 + v17) maximum];
      [v20 floatValue];
      float v15 = v21;

      id v16 = [*(id *)((char *)v0 + v17) minimum];
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return;
  }
  if (v3)
  {
    [v0 bounds];
    double Width = CGRectGetHeight(v28);
    id v6 = [*(id *)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_range) maximum];
LABEL_6:
    id v7 = v6;
    [v7 floatValue];
    float v9 = v8;

    goto LABEL_12;
  }
  uint64_t v10 = OBJC_IVAR____TtC7Climate14ClimateStepper_range;
  id v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v0
                                                              + OBJC_IVAR____TtC7Climate14ClimateStepper_range), "minimum"));
  unsigned int v12 = [v11 unsignedCharValue];

  LODWORD(v4) = v4 - v12;
  if ((v4 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  [v0 bounds];
  double Width = CGRectGetHeight(v30);
  id v13 = [*(id *)((char *)v0 + v10) maximum];
  [v13 floatValue];
  float v15 = v14;

  id v16 = [*(id *)((char *)v0 + v10) minimum];
LABEL_11:
  id v22 = v16;
  unsigned int v23 = [v22 unsignedCharValue];

  float v9 = v15 - (float)v23;
LABEL_12:
  double v24 = Width / v9 * (double)v4;
  uint64_t v25 = (id *)((char *)v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint);
  char v26 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint);
  if (v26)
  {
    [v26 constant];
    if (v24 == v27) {
      return;
    }
    goto LABEL_14;
  }
  if (v24 != 0.0)
  {
LABEL_14:
    [*v25 setConstant:v24];
    [v0 layoutIfNeeded];
  }
}

void sub_100098B14()
{
}

uint64_t sub_100098B38()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue);
}

void sub_100098B48(unsigned __int8 a1)
{
  int v2 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue);
  *((unsigned char *)v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue) = a1;
  if (v2 != a1 && !(*(unsigned __int8 (**)(void))((swift_isaMask & *v1) + 0x318))())
  {
    if (*((unsigned char *)v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled) == 1)
    {
      sub_1000987C8();
    }
    else
    {
      int v3 = self;
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v1;
      v7[4] = sub_10009DDA0;
      v7[5] = v4;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1107296256;
      v7[2] = sub_10005FC84;
      v7[3] = &unk_1000CCD08;
      unint64_t v5 = _Block_copy(v7);
      id v6 = v1;
      swift_release();
      [v3 animateWithDuration:2 delay:v5 options:0 animations:0.25 completion:0.0];
      _Block_release(v5);
    }
  }
}

double sub_100098CD0()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsHeight);
}

void sub_100098CE4(double a1)
{
}

double sub_100098CF0()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonHeight);
}

void sub_100098D04(double a1)
{
}

void sub_100098D10(void *a1, double a2)
{
  double v3 = *(double *)(v2 + *a1);
  *(double *)(v2 + *a1) = a2;
  if (v3 != a2)
  {
    uint64_t v4 = (void *)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
    swift_beginAccess();
    if (*v4 == 1) {
      ClimateStepper.updateConstraintsAndArrows()();
    }
  }
  sub_10009A174();
}

double sub_100098D80()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_arrowsWidth);
}

double sub_100098D94()
{
  return *(double *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButtonWidth);
}

void sub_100098DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, char a8)
{
  id v16 = v8;
  UUID.init()();
  v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state] = 0;
  *(void *)&v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView] = 0;
  *(void *)&v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint] = 0;
  *(void *)&v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_lastSlideValue] = 0;
  v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] = 0;
  uint64_t v17 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton;
  *(void *)&v16[v17] = sub_10007D1C8();
  uint64_t v18 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton;
  *(void *)&v16[v18] = sub_10007D1C8();
  *(void *)&v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskConstraints] = _swiftEmptyArrayStorage;
  uint64_t v69 = a1;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  unsigned int v19 = sub_10009D578(a1, a2, a3, a4);
  *(void *)&v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton] = sub_10009D578(a1, a2, a3, a4);
  v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_isZeroUIReference] = a8;
  id v20 = [a6 minimum];
  unsigned __int8 v21 = [v20 unsignedCharValue];

  v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue] = v21;
  *(void *)&v16[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_service] = a7;
  id v64 = a7;

  id v22 = v19;
  id v23 = a6;
  uint64_t v24 = a5;
  id v66 = v23;
  uint64_t v25 = ClimateStepper.init(primaryButton:axis:range:)(v22, v24, v23);
  uint64_t v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v63 = v22;
  double v27 = (uint64_t *)&v22[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  uint64_t v28 = *(void *)&v22[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  *double v27 = (uint64_t)sub_10009DE4C;
  v27[1] = v26;
  CGRect v29 = v25;
  sub_100005690(v28);
  uint64_t v30 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton;
  uint64_t v31 = OBJC_IVAR____TtC7Climate14ClimateStepper_upButton;
  BOOL v32 = (uint64_t *)(*(void *)&v29[OBJC_IVAR____TtC7Climate14ClimateStepper_upButton]
                  + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = (uint64_t *)(*(void *)&v29[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton]
                  + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v36 = *v35;
  *uint64_t v35 = *v32;
  v35[1] = v34;
  sub_10001C6B0(v33);
  sub_100005690(v36);
  uint64_t v37 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton;
  uint64_t v38 = OBJC_IVAR____TtC7Climate14ClimateStepper_downButton;
  uint64_t v39 = (uint64_t *)(*(void *)&v29[OBJC_IVAR____TtC7Climate14ClimateStepper_downButton]
                  + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  uint64_t v42 = (uint64_t *)(*(void *)&v29[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton]
                  + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v43 = *v42;
  uint64_t *v42 = *v39;
  v42[1] = v41;
  sub_10001C6B0(v40);
  sub_100005690(v43);
  uint64_t v44 = *v27;
  uint64_t v45 = v27[1];
  id v46 = (uint64_t *)(*(void *)&v29[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton]
                  + OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock);
  uint64_t v47 = *v46;
  uint64_t *v46 = *v27;
  v46[1] = v45;
  sub_10001C6B0(v44);
  sub_100005690(v47);
  uint64_t v48 = *(void *)&v29[v30];
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v50 = (uint64_t *)(v48 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v51 = *v50;
  *id v50 = (uint64_t)sub_10009DE54;
  v50[1] = v49;
  sub_100005690(v51);
  uint64_t v52 = *(void *)&v29[v37];
  uint64_t v53 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v54 = (uint64_t *)(v52 + OBJC_IVAR____TtC7Climate13ClimateButton_action);
  swift_beginAccess();
  uint64_t v55 = *v54;
  *id v54 = (uint64_t)sub_10009DE78;
  v54[1] = v53;
  sub_100005690(v55);
  uint64_t v56 = *(void *)&v29[v30];
  *(void *)(*(void *)&v29[v31] + OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate + 8) = &off_1000CB260;
  swift_unknownObjectWeakAssign();
  *(void *)(v56 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate + 8) = &off_1000CB260;
  swift_unknownObjectWeakAssign();
  uint64_t v57 = *(void *)&v29[v37];
  *(void *)(*(void *)&v29[v38] + OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate + 8) = &off_1000CB260;
  swift_unknownObjectWeakAssign();
  *(void *)(v57 + OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate + 8) = &off_1000CB260;
  swift_unknownObjectWeakAssign();
  sub_100097E8C(v67, v68);
  sub_100097FD0(v69, a2);
  sub_1000998E0();
  id v58 = [objc_allocWithZone((Class)UIPanGestureRecognizer) initWithTarget:v29 action:"didSlide:"];
  [v29 addGestureRecognizer:v58];
  sub_100099ED4();
  id v59 = [self sharedApplication];
  id v60 = [v59 delegate];

  if (v60)
  {
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v61 = sub_10008EAA4();
    swift_unknownObjectRelease();
    swift_retain();

    uint64_t v62 = v29;
    sub_100084494();

    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000992E4()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *Strong) + 0x140);
  uint64_t v2 = Strong;
  uint64_t v3 = v1();

  return v3;
}

void sub_100099390(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v5 = (void *)Strong;
    id v6 = *(char **)(Strong + *a3);
    id v7 = (void (**)(void))&v6[OBJC_IVAR____TtC7Climate13ClimateButton_action];
    swift_beginAccess();
    float v8 = *v7;
    if (*v7)
    {
      sub_10001C6B0((uint64_t)v8);
      float v9 = v6;
      v8();

      sub_100005690((uint64_t)v8);
      unint64_t v5 = v9;
    }
  }
}

void sub_100099454()
{
  uint64_t v1 = objc_allocWithZone(v0);
  UUID.init()();
  v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_lastSlideValue] = 0;
  v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] = 0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton;
  *(void *)&v1[v2] = sub_10007D1C8();
  uint64_t v3 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton;
  *(void *)&v1[v3] = sub_10007D1C8();
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskConstraints] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_100099544()
{
  uint64_t v1 = v0;
  v31.receiver = v0;
  v31.super_class = (Class)type metadata accessor for ClimateContinuousStepper();
  [super layoutSubviews];
  if (!(*(unsigned __int8 (**)(id))((swift_isaMask & *v0) + 0x318))(v2)) {
    sub_1000987C8();
  }
  uint64_t v3 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton);
  uint64_t v4 = *(char **)((char *)v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
  unint64_t v5 = &v4[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *((void *)v5 + 1);
  float v8 = &v3[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v10 = *(void *)v8;
  uint64_t v9 = *((void *)v8 + 1);
  *(void *)float v8 = v6;
  *((void *)v8 + 1) = v7;
  swift_bridgeObjectRetain();
  if (v7)
  {
    if (v9)
    {
      BOOL v11 = v6 == v10 && v7 == v9;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_13;
      }
    }
  }
  else if (!v9)
  {
    goto LABEL_14;
  }
  ClimateButton.updateClimateConfiguration()();
LABEL_13:
  swift_bridgeObjectRelease();
LABEL_14:
  id v12 = ClimateButton.imageSymbolConfiguration.getter();
  id v13 = ClimateButton.imageSymbolConfiguration.getter();
  float v14 = *(void **)&v3[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v3[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v12;
  id v15 = v12;

  id v16 = ClimateButton.imageSymbolConfiguration.getter();
  sub_100007310(0, (unint64_t *)&unk_1000E7700);
  LOBYTE(v14) = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

  [v4 imageEdgeInsets];
  [v3 setImageEdgeInsets:];
  uint64_t v17 = *(char **)((char *)v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton);
  uint64_t v18 = *(char **)((char *)v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
  unsigned int v19 = &v18[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *((void *)v19 + 1);
  id v22 = &v17[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v24 = *(void *)v22;
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)id v22 = v20;
  *((void *)v22 + 1) = v21;
  swift_bridgeObjectRetain();
  if (v21)
  {
    if (v23 && (v20 == v24 && v21 == v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_24;
    }
  }
  else if (!v23)
  {
    goto LABEL_25;
  }
  ClimateButton.updateClimateConfiguration()();
LABEL_24:
  swift_bridgeObjectRelease();
LABEL_25:
  id v25 = ClimateButton.imageSymbolConfiguration.getter();
  id v26 = ClimateButton.imageSymbolConfiguration.getter();
  double v27 = *(void **)&v17[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration];
  *(void *)&v17[OBJC_IVAR____TtC7Climate13ClimateButton____lazy_storage___imageSymbolConfiguration] = v25;
  id v28 = v25;

  id v29 = ClimateButton.imageSymbolConfiguration.getter();
  LOBYTE(v27) = static NSObject.== infix(_:_:)();

  if ((v27 & 1) == 0) {
    ClimateButton.updateClimateConfiguration()();
  }

  [v18 imageEdgeInsets];
  return [v17 setImageEdgeInsets:];
}

void sub_1000998E0()
{
  uint64_t v1 = v0;
  id v2 = [v0 traitCollection];
  id v3 = [self materialViewWithVisualStyleFromRecipe:4 category:2 style:4 options:0 initialWeighting:v2 compatibleWithTraitCollection:1.0];

  if (!v3) {
    return;
  }
  uint64_t v4 = &v1[OBJC_IVAR____TtC7Climate14ClimateStepper_axis];
  swift_beginAccess();
  unint64_t v5 = &selRef_heightAnchor;
  if (*(void *)v4 != 1) {
    unint64_t v5 = &selRef_widthAnchor;
  }
  id v6 = [v3 *v5];
  id v7 = [v6 constraintEqualToConstant:0.0];

  uint64_t v8 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint;
  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint];
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint] = v7;

  [v1 addSubview:v3];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 setClipsToBounds:1];
  [v3 setUserInteractionEnabled:1];
  uint64_t v10 = *(void *)v4;
  id v11 = [v3 leadingAnchor];
  id v12 = [v1 leadingAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  if (v10 == 1)
  {
    id v14 = [v3 trailingAnchor];
    id v15 = [v1 trailingAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15];

    id v17 = [v3 bottomAnchor];
    id v18 = [v1 bottomAnchor];
    id v19 = [v17 constraintEqualToAnchor:v18];

    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v21 = v35 + 3;
      if (!__OFADD__(v35, 3)) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v21 = v20 + 3;
      if (!__OFADD__(v20, 3)) {
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  id v22 = [v3 topAnchor];
  id v23 = [v1 topAnchor];
  id v16 = [v22 constraintEqualToAnchor:v23];

  id v24 = [v3 bottomAnchor];
  id v25 = [v1 bottomAnchor];
  id v19 = [v24 constraintEqualToAnchor:v25];

  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v21 = v36 + 3;
    if (!__OFADD__(v36, 3)) {
      goto LABEL_11;
    }
LABEL_28:
    __break(1u);
    return;
  }
  uint64_t v26 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v21 = v26 + 3;
  if (__OFADD__(v26, 3)) {
    goto LABEL_28;
  }
LABEL_11:
  sub_10009CCD4(v21);
  specialized Array._endMutation()();
  id v27 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v28 = v16;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v29 = v19;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v30 = *(void **)&v1[v8];
  if (v30)
  {
    id v31 = v30;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  BOOL v32 = self;
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v32 activateConstraints:isa];

  uint64_t v34 = *(void **)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView];
  *(void *)&v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView] = v3;
}

void sub_100099ED4()
{
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B2110;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton);
  *(void *)(inited + 32) = v2;
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton);
  *(void *)(inited + 40) = v3;
  uint64_t v31 = v0;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton);
  *(void *)(inited + 48) = v4;
  uint64_t v32 = inited;
  specialized Array._endMutation()();
  if ((v32 & 0xC000000000000001) != 0 || *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
  {
    id v5 = v2;
    id v6 = v3;
    id v7 = v4;
    id v30 = self;
    sub_100007310(0, (unint64_t *)&qword_1000E4A20);
    uint64_t v8 = 0;
    uint64_t v29 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView;
    while (1)
    {
      if ((v32 & 0xC000000000000001) != 0) {
        uint64_t v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v9 = (char *)*(id *)(v32 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      id v11 = *(void **)(v31 + v29);
      if (v11) {
        [v11 addSubview:v10];
      }
      id v12 = &v10[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
      id v13 = *(void **)&v10[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig];
      id v14 = *(void **)&v10[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8];
      uint64_t v15 = *(void *)&v10[OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16];
      id v16 = v10;
      id v17 = v13;
      id v18 = v14;
      swift_bridgeObjectRetain();
      id v19 = [v30 systemBlackColor];
      if (v19)
      {
        id v20 = v19;

        id v18 = v20;
      }
      uint64_t v21 = *(void **)v12;
      id v22 = (void *)*((void *)v12 + 1);
      uint64_t v23 = *((void *)v12 + 2);
      *(void *)id v12 = v17;
      *((void *)v12 + 1) = v18;
      *((void *)v12 + 2) = v15;
      id v24 = v17;
      swift_bridgeObjectRetain_n();
      id v25 = v24;
      id v26 = v18;
      if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
      {
        sub_10007C1D0(v15, v23);
        char v28 = v27;
        swift_bridgeObjectRelease();

        if (v28) {
          goto LABEL_6;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ClimateButton.refreshColorConfig()();
LABEL_6:
      ++v8;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8 == 3)
      {
        swift_bridgeObjectRelease();
        sub_10009A174();
        return;
      }
    }
  }
  __break(1u);
}

void sub_10009A174()
{
  uint64_t v1 = v0;
  id v2 = self;
  id v3 = (void *)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskConstraints);
  swift_beginAccess();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 deactivateConstraints:isa];

  *id v3 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  unint64_t v5 = ClimateStepper.constraintsForStepButtons(_:direction:)(*(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton), 1);
  swift_beginAccess();
  sub_100097570(v5);
  swift_endAccess();
  unint64_t v6 = ClimateStepper.constraintsForStepButtons(_:direction:)(*(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton), 0);
  swift_beginAccess();
  sub_100097570(v6);
  swift_endAccess();
  unint64_t v7 = ClimateStepper.constraintsForStepButtons(_:direction:)(*(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton), 2);
  swift_beginAccess();
  sub_100097570(v7);
  swift_endAccess();
  swift_bridgeObjectRetain();
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:v8];
}

uint64_t sub_10009A348(char a1)
{
  sub_100006730(&qword_1000E7940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B2BF0;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
  *(void *)(inited + 32) = v4;
  unint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton);
  *(void *)(inited + 40) = v5;
  unint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
  *(void *)(inited + 48) = v6;
  unint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton);
  *(void *)(inited + 56) = v7;
  uint64_t v13 = inited;
  specialized Array._endMutation()();
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  id v11 = v7;
  sub_10009D8F8(a1 & 1, v13);
  return swift_bridgeObjectRelease();
}

void sub_10009A41C(void *a1)
{
  id v2 = v1;
  if (((*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x140))() & 0x18) != 0) {
    return;
  }
  if ((*(unsigned __int8 (**)(void))((swift_isaMask & *v1) + 0x318))() != 2)
  {
    unint64_t v7 = (void *)((char *)v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
    swift_beginAccess();
    uint64_t v8 = *v7;
    [a1 translationInView:v2];
    if (v8 == 1) {
      double v11 = v10;
    }
    else {
      double v11 = v9;
    }
    if ([a1 state] == (id)3)
    {
      sub_10009ACEC(v11 < 0.0);
      char v12 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x3B8))();
      id v13 = *(id *)((char *)v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_range);
      CAFRange.minimumValue<A>()();

      if (v59 == v12) {
        char v14 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x398))();
      }
      else {
        char v14 = 0;
      }
      sub_10009A348(v14 & 1);
      uint64_t v31 = (char *)v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v33 = *((void *)v31 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void, uint64_t, uint64_t))(v33 + 8))(0, ObjectType, v33);
        uint64_t Strong = swift_unknownObjectRelease();
      }
      *(void *)((char *)v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_lastSlideValue) = 0;
      (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x480))(Strong);
      (*(void (**)(void))((swift_isaMask & *v2) + 0x320))(0);
      id v35 = [self sharedApplication];
      id v36 = [v35 delegate];

      if (v36)
      {
        type metadata accessor for ClimateAppDelegate();
        swift_dynamicCastClassUnconditional();
        uint64_t v37 = (char *)sub_10008EAA4();
        swift_unknownObjectRelease();
        uint64_t v38 = *(void *)&v37[OBJC_IVAR____TtC7Climate18ClimateCoordinator_continuousStepperTracker];
        swift_retain();

        sub_10009D2D4(v2, v11 < 0.0, v38);
        swift_release();
        return;
      }
      goto LABEL_48;
    }
    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x320))(1);
    uint64_t v15 = self;
    id v16 = [v15 sharedApplication];
    id v17 = [v16 delegate];

    if (!v17)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return;
    }
    type metadata accessor for ClimateAppDelegate();
    swift_dynamicCastClassUnconditional();
    id v18 = (char *)sub_10008EAA4();
    swift_unknownObjectRelease();
    uint64_t v19 = *(void *)&v18[OBJC_IVAR____TtC7Climate18ClimateCoordinator_continuousStepperTracker];
    swift_retain();

    sub_10009CD94(v2, v19);
    swift_release();
    id v20 = (char *)v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v21 = *((void *)v20 + 1);
      uint64_t v22 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 8))(1, v22, v21);
      swift_unknownObjectRelease();
    }
    sub_10009A348(1);
    uint64_t v23 = *v7;
    double v24 = *(double *)((char *)v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_lastSlideValue);
    [v2 bounds];
    if (v23 == 1)
    {
      double v29 = v24 - v11;
      double Height = CGRectGetHeight(*(CGRect *)&v25);
    }
    else
    {
      double v29 = v11 - v24;
      double Height = CGRectGetWidth(*(CGRect *)&v25);
    }
    double v39 = Height;
    uint64_t v40 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint;
    uint64_t v41 = *(void **)((char *)v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint);
    double v42 = 0.0;
    if (v41) {
      [v41 constant:0.0];
    }
    double v43 = v29 + v42;
    if (v43 >= v39) {
      double v43 = v39;
    }
    char v44 = *((unsigned char *)v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_isZeroUIReference);
    if (v43 > 0.0) {
      double v45 = v43;
    }
    else {
      double v45 = 0.0;
    }
    uint64_t v46 = OBJC_IVAR____TtC7Climate14ClimateStepper_range;
    id v47 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v2
                                                                + OBJC_IVAR____TtC7Climate14ClimateStepper_range), "maximum"));
    unsigned int v48 = [v47 unsignedCharValue];

    if ((v44 & 1) == 0)
    {
      id v49 = [*(id *)((char *)v2 + v46) minimum];
      unsigned int v50 = [v49 unsignedCharValue];

      v48 -= v50;
      if ((v48 & 0xFFFFFF00) != 0)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    double v51 = v45 / v39;
    double v52 = round(v51 * (double)v48);
    if ((~*(void *)&v52 & 0x7FF0000000000000) != 0)
    {
      if (v52 > -1.0)
      {
        if (v52 < 256.0)
        {
          uint64_t v53 = (int)v52;
          if (v53 != (*(unsigned __int8 (**)(void))((swift_isaMask & *v2) + 0x3B8))())
          {
            uint64_t v54 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x3C0))(v53);
            (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x448))(v54);
          }
          [*(id *)((char *)v2 + v40) setConstant:v45];
          [v2 layoutIfNeeded];
          id v55 = [v15 sharedApplication];
          id v56 = [v55 delegate];

          if (v56)
          {
            swift_dynamicCastClassUnconditional();
            uint64_t v57 = (char *)sub_10008EAA4();
            swift_unknownObjectRelease();
            uint64_t v58 = *(void *)&v57[OBJC_IVAR____TtC7Climate18ClimateCoordinator_continuousStepperTracker];
            swift_retain();

            sub_10009D02C(v2, v58, v51);
            swift_release();
            *(double *)((char *)v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_lastSlideValue) = v11;
            return;
          }
          goto LABEL_49;
        }
        goto LABEL_45;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1000EA798;
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "No interaction available when matching sibling", v6, 2u);
    swift_slowDealloc();
  }
}

void sub_10009ACEC(char a1)
{
  id v3 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint);
  if (!v3) {
    goto LABEL_8;
  }
  id v4 = [v3 constant];
  if (v5 <= 0.0) {
    goto LABEL_8;
  }
  unsigned __int8 v6 = (*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x3B8))(v4);
  uint64_t v7 = OBJC_IVAR____TtC7Climate14ClimateStepper_range;
  id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v1
                                                             + OBJC_IVAR____TtC7Climate14ClimateStepper_range), "minimum"));
  unsigned int v9 = [v8 unsignedCharValue];

  id v10 = [*(id *)((char *)v1 + v7) step];
  unsigned int v11 = [v10 unsignedCharValue];

  if (((v9 + v11) >> 8))
  {
    __break(1u);
  }
  else
  {
    if (v6 >= (v9 + v11) || (a1 & 1) == 0) {
      goto LABEL_8;
    }
    id v12 = [*(id *)((char *)v1 + v7) minimum];
    unsigned int v13 = [v12 unsignedCharValue];

    id v14 = [*(id *)((char *)v1 + v7) step];
    unsigned int v15 = [v14 unsignedCharValue];

    if ((((v13 + v15) >> 8) & 1) == 0)
    {
      uint64_t v16 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x3C0))();
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x448))(v16);
LABEL_8:
      id v17 = self;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v1;
      v21[4] = sub_10009DEA8;
      v21[5] = v18;
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 1107296256;
      v21[2] = sub_10005FC84;
      v21[3] = &unk_1000CCBF0;
      uint64_t v19 = _Block_copy(v21);
      id v20 = v1;
      swift_release();
      [v17 animateWithDuration:v19 animations:0.25];
      _Block_release(v19);
      return;
    }
  }
  __break(1u);
}

void sub_10009B020()
{
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B4B50;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
  *(void *)(inited + 32) = v2;
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton);
  *(void *)(inited + 40) = v3;
  id v4 = (void **)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  double v5 = *v4;
  *(void *)(inited + 48) = *v4;
  unsigned __int8 v6 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton);
  *(void *)(inited + 56) = v6;
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
  *(void *)(inited + 64) = v7;
  id v8 = *(void **)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton);
  *(void *)(inited + 72) = v8;
  specialized Array._endMutation()();
  unint64_t v9 = inited & 0xC000000000000001;
  if ((inited & 0xC000000000000001) != 0)
  {
    id v27 = v2;
    id v28 = v3;
    id v29 = v5;
    id v30 = v6;
    id v31 = v7;
    id v32 = v8;
    id v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (*(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10) < 6uLL)
    {
      __break(1u);
      return;
    }
    id v10 = *(id *)(inited + 32);
    id v11 = v2;
    id v12 = v3;
    id v13 = v5;
    id v14 = v6;
    id v15 = v7;
    id v16 = v8;
  }
  (*(void (**)(void))((swift_isaMask & *v10) + 0x240))(0);

  if (v9) {
    id v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v17 = *(id *)(inited + 40);
  }
  uint64_t v18 = v17;
  (*(void (**)(void))((swift_isaMask & *v17) + 0x240))(0);

  if (v9) {
    uint64_t v19 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v19 = *(id *)(inited + 48);
  }
  id v20 = v19;
  (*(void (**)(void))((swift_isaMask & *v19) + 0x240))(0);

  if (v9) {
    uint64_t v21 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v21 = *(id *)(inited + 56);
  }
  uint64_t v22 = v21;
  (*(void (**)(void))((swift_isaMask & *v21) + 0x240))(0);

  if (v9) {
    uint64_t v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v23 = *(id *)(inited + 64);
  }
  double v24 = v23;
  (*(void (**)(void))((swift_isaMask & *v23) + 0x240))(0);

  if (v9) {
    uint64_t v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v25 = *(id *)(inited + 72);
  }
  id v26 = v25;
  (*(void (**)(void))((swift_isaMask & *v25) + 0x240))(0);
  swift_bridgeObjectRelease();
}

uint64_t sub_10009B3A0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_trackerUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_bridgeObjectRelease();
}

id sub_10009B47C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateContinuousStepper();
  return [super dealloc];
}

uint64_t sub_10009B594()
{
  return type metadata accessor for ClimateContinuousStepper();
}

uint64_t type metadata accessor for ClimateContinuousStepper()
{
  uint64_t result = qword_1000E7928;
  if (!qword_1000E7928) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009B5E8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

id sub_10009B770(double a1)
{
  id result = (id)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x318))();
  if (result == 2)
  {
    id v4 = (void *)((char *)v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
    swift_beginAccess();
    uint64_t v5 = *v4;
    [v1 bounds];
    if (v5 == 1) {
      double Height = CGRectGetHeight(*(CGRect *)&v6);
    }
    else {
      double Height = CGRectGetWidth(*(CGRect *)&v6);
    }
    [*(id *)((char *)v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillViewProgressConstraint) setConstant:Height * a1];
    return [v1 layoutIfNeeded];
  }
  return result;
}

uint64_t sub_10009B8B8(char a1)
{
  objc_super v2 = v1;
  (*(void (**)(void))((swift_isaMask & *v1) + 0x320))(0);
  sub_10009ACEC(a1);
  char v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x3B8))();
  id v5 = *(id *)((char *)v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_range);
  CAFRange.minimumValue<A>()();

  char v6 = 0;
  if (v11 == v4) {
    char v6 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x398))(0);
  }
  sub_10009A348(v6 & 1);
  uint64_t v7 = (char *)v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_popoverDelegate;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v9 = *((void *)v7 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v9 + 8))(0, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClimateContinuousStepper.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009BB84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateContinuousStepper.State()
{
  return &type metadata for ClimateContinuousStepper.State;
}

unint64_t sub_10009BBC0()
{
  unint64_t result = qword_1000E7938;
  if (!qword_1000E7938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E7938);
  }
  return result;
}

uint64_t sub_10009BC14(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (uint64_t (*)(char *, char *))isStackAllocationSafe;
  char v7 = *(unsigned char *)(a3 + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    sub_10009BD8C((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a3, v6);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    char v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    sub_10009BD8C((unint64_t *)v11, v8, a3, v6);
    a2 = v12;
    swift_slowDealloc();
  }
  return a2;
}

void sub_10009BD8C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *))
{
  id v32 = a4;
  uint64_t v25 = a2;
  id v26 = a1;
  uint64_t v33 = type metadata accessor for UUID();
  __n128 v7 = __chkstk_darwin(v33);
  size_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v34 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v29 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v30 = v6 + 16;
  uint64_t v31 = v6;
  id v15 = (void (**)(char *, uint64_t))(v6 + 8);
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_17:
    uint64_t v21 = v33;
    uint64_t v22 = v34;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v31 + 16))(v9, v34[6] + *(void *)(v31 + 72) * v17, v33, v7);
    sub_10001D4A4(v22[7] + 8 * v17, (uint64_t)v35);
    char v23 = v32(v9, v35);
    if (v4)
    {
      sub_10000A404((uint64_t)v35, &qword_1000E5DB0);
      (*v15)(v9, v21);
      return;
    }
    char v24 = v23;
    sub_10000A404((uint64_t)v35, &qword_1000E5DB0);
    (*v15)(v9, v21);
    if (v24)
    {
      *(unint64_t *)((char *)v26 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      BOOL v18 = __OFADD__(v27++, 1);
      if (v18) {
        goto LABEL_30;
      }
    }
  }
  BOOL v18 = __OFADD__(v10++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v29) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v10);
  if (v19)
  {
LABEL_16:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_17;
  }
  int64_t v20 = v10 + 1;
  if (v10 + 1 >= v29) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 2;
  if (v10 + 2 >= v29) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 3;
  if (v10 + 3 >= v29)
  {
LABEL_27:
    sub_10009C084(v26, v25, v27, v34);
    return;
  }
  unint64_t v19 = *(void *)(v28 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v10 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v28 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_10009C084(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  double v45 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100006730(&qword_1000E5DB8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  id v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = v42 + 32;
  uint64_t v40 = v42 + 16;
  uint64_t v15 = result + 64;
  uint64_t v38 = a4;
  uint64_t v16 = v44;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v43 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v37) {
        return v12;
      }
      unint64_t v20 = v36[v19];
      uint64_t v21 = v14 + 1;
      if (!v20)
      {
        uint64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          return v12;
        }
        unint64_t v20 = v36[v21];
        if (!v20)
        {
          uint64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            return v12;
          }
          unint64_t v20 = v36[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37) {
              return v12;
            }
            unint64_t v20 = v36[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v37) {
                  return v12;
                }
                unint64_t v20 = v36[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      uint64_t v43 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    char v24 = v41;
    uint64_t v23 = v42;
    uint64_t v25 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v25 * v18, v16);
    sub_10001D4A4(a4[7] + 8 * v18, (uint64_t)v47);
    id v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v45, v24, v16);
    sub_10000D0D4((uint64_t)v47, (uint64_t)v46, &qword_1000E5DB0);
    sub_10009DD48();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v26((char *)(*(void *)(v12 + 48) + v30 * v25), v45, v44);
    uint64_t result = sub_10000D0D4((uint64_t)v46, *(void *)(v12 + 56) + 8 * v30, &qword_1000E5DB0);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v38;
    uint64_t v14 = v43;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t (*sub_10009C450(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10009C56C(v6, a2, a3);
  return sub_10009C4B8;
}

uint64_t (*sub_10009C4BC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10009C5EC(v6, a2, a3);
  return sub_10009C4B8;
}

void sub_10009C524(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_10009C56C(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_10009DECC;
  }
  __break(1u);
  return result;
}

void (*sub_10009C5EC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_10009C66C;
  }
  __break(1u);
  return result;
}

void sub_10009C66C(id *a1)
{
}

uint64_t sub_10009C674(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10009DDC4(&qword_1000E7950, &qword_1000E7948);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100006730(&qword_1000E7948);
          uint64_t v12 = sub_10009C450(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009C894(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10009DDC4(&qword_1000E7970, &qword_1000E7968);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100006730(&qword_1000E7968);
          uint64_t v12 = sub_10009C450(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100007310(0, &qword_1000E66E0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009CAB4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10009DDC4(&qword_1000E7960, &qword_1000E7958);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100006730(&qword_1000E7958);
          uint64_t v12 = sub_10009C4BC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100007310(0, &qword_1000E5540);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009CCD4(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *unint64_t v1 = result;
  }
  return result;
}

uint64_t sub_10009CD94(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 service:v6];
  id v10 = [v9 uniqueIdentifier];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  swift_beginAccess();
  uint64_t v11 = *(void *)(a2 + 16);
  if (!*(void *)(v11 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10007C4F0((uint64_t)v8);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRelease();
  __chkstk_darwin(v15);
  *(&v22 - 2) = (uint64_t)a1;
  uint64_t v16 = sub_10009BC14((uint64_t)sub_10009DD28, (uint64_t)(&v22 - 4), v14);
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_100097C24(v16);
  swift_release();
  if (!(v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v18 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_5:
  if (v18 >= 1)
  {
    for (uint64_t i = 0; i != v18; ++i)
    {
      if ((v17 & 0xC000000000000001) != 0)
      {
        uint64_t v21 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v21 = *(void **)(v17 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v21 siblingDidStartSliding];
      swift_unknownObjectRelease();
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009D02C(void *a1, uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  id v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 service:v8];
  id v12 = [v11 uniqueIdentifier];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  swift_beginAccess();
  uint64_t v13 = *(void *)(a2 + 16);
  if (!*(void *)(v13 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_10007C4F0((uint64_t)v10);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRelease();
  __chkstk_darwin(v17);
  *(&v24 - 2) = (uint64_t)a1;
  uint64_t v18 = sub_10009BC14((uint64_t)sub_10009DD28, (uint64_t)(&v24 - 4), v16);
  swift_bridgeObjectRelease();
  unint64_t v19 = sub_100097C24(v18);
  swift_release();
  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_5:
  if (v20 >= 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v23 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v23 = *(void **)(v19 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v23 siblingDidUpdateWithProgress:a3];
      swift_unknownObjectRelease();
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009D2D4(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  id v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 service:v8];
  id v12 = [v11 uniqueIdentifier];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  swift_beginAccess();
  uint64_t v13 = *(void *)(a3 + 16);
  if (!*(void *)(v13 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_10007C4F0((uint64_t)v10);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRelease();
  __chkstk_darwin(v17);
  *(&v25 - 2) = (uint64_t)a1;
  uint64_t v18 = sub_10009BC14((uint64_t)sub_10009DD28, (uint64_t)(&v25 - 4), v16);
  swift_bridgeObjectRelease();
  unint64_t v19 = sub_100097C24(v18);
  swift_release();
  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_5:
  if (v20 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = a2 & 1;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v24 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v24 = *(void **)(v19 + 8 * v22 + 32);
        swift_unknownObjectRetain();
      }
      ++v22;
      [v24 siblingDidStopSlidingWithWasIncreasing:v23];
      swift_unknownObjectRelease();
    }
    while (v20 != v22);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

char *sub_10009D578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8 = (char *)[objc_allocWithZone((Class)type metadata accessor for ClimateStepperButton()) init];
  uint64_t v9 = v8;
  int v10 = v8[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial];
  v8[OBJC_IVAR____TtC7Climate13ClimateButton_disableSelectedBackgroundMaterial] = 1;
  if (v10 != 1)
  {
    [*(id *)&v8[OBJC_IVAR____TtC7Climate13ClimateButton_backgroundView] removeFromSuperview];
    ClimateButton.refreshColorConfig()();
  }
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v9 setUserInteractionEnabled:0];
  id v11 = [v9 layer];
  [v11 setCornerRadius:0.0];

  id v12 = &v9[OBJC_IVAR____TtC7Climate13ClimateButton_title];
  swift_beginAccess();
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)id v12 = a3;
  *((void *)v12 + 1) = a4;
  char v15 = v9;
  swift_bridgeObjectRetain();
  if (a4)
  {
    if (v13)
    {
      BOOL v16 = v14 == a3 && v13 == a4;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
  if (v13)
  {
LABEL_12:
    ClimateButton.updateClimateConfiguration()();
LABEL_13:

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }

LABEL_14:
  uint64_t v17 = &v15[OBJC_IVAR____TtC7Climate13ClimateButton_imageSystemName];
  swift_beginAccess();
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v17 = a1;
  *((void *)v17 + 1) = a2;
  uint64_t v20 = v15;
  swift_bridgeObjectRetain();
  if (a2)
  {
    if (v18 && (v19 == a1 && v18 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      goto LABEL_22;
    }
  }
  else if (!v18)
  {

    return v20;
  }
  ClimateButton.updateClimateConfiguration()();
LABEL_22:

  swift_bridgeObjectRelease();
  return v20;
}

id sub_10009D798(double a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self animationWithKeyPath:v2];

  id v4 = v3;
  [v4 setBeginTime:CACurrentMediaTime()];

  [v4 setDuration:a1];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  [v4 setFromValue:isa];

  Class v6 = Int._bridgeToObjectiveC()().super.super.isa;
  [v4 setToValue:v6];

  id v7 = objc_allocWithZone((Class)CAMediaTimingFunction);
  id v8 = v4;
  LODWORD(v9) = 1051260355;
  LODWORD(v10) = 1.0;
  id v11 = [v7 initWithControlPoints:v9 :0.0 :0.0 :v10];
  [v8 setTimingFunction:v11];

  return v8;
}

void sub_10009D8F8(char a1, uint64_t a2)
{
  if (a1) {
    double v3 = 0.25;
  }
  else {
    double v3 = 0.3;
  }
  id v4 = sub_10009D798(v3);
  if ([v4 toValue])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_10000D0D4((uint64_t)v23, (uint64_t)v24, (uint64_t *)&unk_1000E5420);
  if (!v24[3])
  {

    sub_10000A404((uint64_t)v24, (uint64_t *)&unk_1000E5420);
    return;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_44;
  }
  v24[0] = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      id v7 = *(void **)(a2 + 8 * i + 32);
      if (v7)
      {
        id v8 = v7;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v24[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v9 = v24[0];
  }
  else
  {
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
  }
  v24[0] = _swiftEmptyArrayStorage;
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_21;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_33;
  }
LABEL_21:
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_46;
  }
  for (uint64_t j = 0; j != v10; ++j)
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v9 + 8 * j + 32);
    }
    uint64_t v13 = v12;
    [v12 alpha];
    if (v14 == v22)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v15 = v24[0];
  if ((v24[0] & 0x8000000000000000) != 0) {
    goto LABEL_42;
  }
LABEL_34:
  if ((v15 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = *(void *)(v15 + 16);
    swift_retain();
    if (!v16)
    {
LABEL_43:
      swift_release_n();
LABEL_44:

      return;
    }
    goto LABEL_36;
  }
LABEL_42:
  swift_retain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_43;
  }
LABEL_36:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v15 + 8 * v17 + 32);
      }
      uint64_t v19 = v18;
      ++v17;
      id v20 = [v18 layer];
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 addAnimation:v4 forKey:v21];

      [v19 setAlpha:v22];
    }
    while (v16 != v17);
    goto LABEL_43;
  }
LABEL_46:
  __break(1u);
}

uint64_t sub_10009DCA8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009DCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009DCF0()
{
  return swift_release();
}

id sub_10009DCF8()
{
  id result = *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView);
  if (result) {
    return [result setAlpha:1.0];
  }
  return result;
}

id sub_10009DD20()
{
  return sub_10009873C(*(void *)(v0 + 16));
}

BOOL sub_10009DD28(uint64_t a1, uint64_t a2)
{
  return sub_10001D278(a1, a2, *(void **)(v2 + 16));
}

unint64_t sub_10009DD48()
{
  unint64_t result = qword_1000E5760;
  if (!qword_1000E5760)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000E5760);
  }
  return result;
}

void sub_10009DDA0()
{
}

uint64_t sub_10009DDC4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000A4DC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009DE14()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009DE4C()
{
  return sub_1000992E4();
}

void sub_10009DE54(uint64_t a1)
{
  sub_100099390(a1, v1, &OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
}

void sub_10009DE78(uint64_t a1)
{
  sub_100099390(a1, v1, &OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
}

void sub_10009DED0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClimateZone();
  __chkstk_darwin(v2 - 8);
  id v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_zoneLabel);
  uint64_t v6 = v1 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_zone;
  swift_beginAccess();
  sub_10000ABC4(v6, (uint64_t)v4);
  id v7 = v5;
  sub_10005C244();
  sub_100057C04((uint64_t)v4);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setText:v8];

  unint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_servicesGrid);
  sub_10000ABC4(v6, (uint64_t)v4);
  uint64_t v10 = (uint64_t)v9 + OBJC_IVAR____TtC7Climate19ClimateZoneControls_zone;
  swift_beginAccess();
  id v11 = v9;
  sub_100023198((uint64_t)v4, v10);
  swift_endAccess();
  sub_100089394();
  sub_100057C04((uint64_t)v4);
}

void sub_10009E044(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    a3();
  }
}

void sub_10009E0AC()
{
  id v20 = [objc_allocWithZone((Class)UIView) init];
  id v1 = [self systemFillColor];
  [v20 setBackgroundColor:v1];

  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 addSubview:v20];
  uint64_t v2 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000B20F0;
  id v4 = [v20 leftAnchor];
  id v5 = [v0 leftAnchor];
  id v6 = [v4 constraintEqualToAnchor:v5];

  *(void *)(v3 + 32) = v6;
  id v7 = [v20 topAnchor];
  id v8 = [v0 topAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8];

  *(void *)(v3 + 40) = v9;
  id v10 = [v20 bottomAnchor];
  id v11 = [v0 bottomAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v3 + 48) = v12;
  id v13 = [v20 rightAnchor];
  id v14 = [v0 rightAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  sub_100006774();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];

  id v17 = [v20 layer];
  [v17 setCornerRadius:18.0];

  id v18 = [v20 layer];
  [v18 setCornerCurve:kCACornerCurveContinuous];

  id v19 = [v20 layer];
  [v19 setMaskedCorners:3];

  [v20 setClipsToBounds:1];
}

id sub_10009E4A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateZoneCard();
  return [super dealloc];
}

uint64_t sub_10009E534()
{
  return type metadata accessor for ClimateZoneCard();
}

uint64_t type metadata accessor for ClimateZoneCard()
{
  uint64_t result = qword_1000E79B0;
  if (!qword_1000E79B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009E588()
{
  uint64_t result = type metadata accessor for ClimateZone();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009E628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7Climate15ClimateZoneCard_zone;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v3, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

uint64_t sub_10009E6F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (int *)type metadata accessor for ClimateDefrost();
  uint64_t v11 = *((void *)v10 - 1);
  __n128 v12 = __chkstk_darwin(v10);
  uint64_t v45 = v8;
  uint64_t v46 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(void (**)(__n128))(v8 + 16);
  uint64_t v47 = a2;
  uint64_t v48 = v7;
  uint64_t v41 = v14;
  uint64_t v42 = v8 + 16;
  v14(v12);
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_22;
  }
LABEL_3:
  if (v15 < 1)
  {
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_28;
  }
  uint64_t v43 = v11;
  uint64_t v39 = v10;
  uint64_t v40 = a3;
  uint64_t v17 = 0;
  *(void *)&long long v16 = 138543362;
  long long v49 = v16;
  uint64_t v50 = v15;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(a1 + 8 * v17 + 32);
    }
    id v19 = v18;
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v20 = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v21 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      double v22 = qword_1000EA798;
      id v23 = v19;
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        id v26 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = v49;
        *(void *)(v25 + 4) = v23;
        *id v26 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, v24, "unknown service: %{public}@", (uint8_t *)v25, 0xCu);
        sub_100006730(&qword_1000E4F30);
        swift_arrayDestroy();
        uint64_t v15 = v50;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    ++v17;
  }
  while (v15 != v17);
  swift_bridgeObjectRelease();
  unint64_t v27 = v54;
  id v10 = v39;
  a3 = v40;
  uint64_t v11 = v43;
LABEL_23:
  uint64_t v3 = v47;
  uint64_t v15 = (uint64_t)v44;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_25;
    }
  }
  else if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v3, v48);
    uint64_t v28 = (uint64_t)v46;
    *(void *)&v46[v10[5]] = a1;
    *(void *)(v28 + v10[6]) = v53;
    *(void *)(v28 + v10[7]) = v54;
    sub_10009EE18(v28, a3);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v11 + 56))(a3, 0, 1, v10);
    return sub_10009EE7C(v28);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1000E46D8 != -1) {
    goto LABEL_33;
  }
LABEL_28:
  char v31 = qword_1000EA798;
  uint64_t v32 = v48;
  ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v15, v3, v48);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v43 = v11;
    id v35 = (uint8_t *)v34;
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)id v35 = 136446210;
    uint64_t v36 = CAUVehicleLayoutKey.rawValue.getter();
    uint64_t v51 = sub_10000A56C(v36, v37, &v52);
    uint64_t v32 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v38(v15, v32);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "ClimateDefrostServices requires defrosts key=%{public}s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v43;
    swift_slowDealloc();
    v38(v47, v32);
  }
  else
  {
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v38(v15, v32);
    v38(v3, v32);
  }
  v38((uint64_t)v46, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v11 + 56))(a3, 1, 1, v10);
}

uint64_t type metadata accessor for ClimateDefrost()
{
  uint64_t result = qword_1000E7A18;
  if (!qword_1000E7A18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009EE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClimateDefrost();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009EE7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClimateDefrost();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10009EED8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CAUVehicleLayoutKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10009EFCC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10009F058(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10009F0FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009F1C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10009F250(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009F2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F310);
}

uint64_t sub_10009F310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10009F3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F3E4);
}

uint64_t sub_10009F3E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10009F4A0()
{
  uint64_t result = type metadata accessor for CAUVehicleLayoutKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10009F53C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = v4 + 1;
          unint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
          id v6 = v10;
          sub_100006730(&qword_1000E7AB8);
          swift_dynamicCast();
          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = v5;
        }
        while (v2 != v5);
      }
      else
      {
        uint64_t v7 = (void **)(a1 + 32);
        sub_100007310(0, (unint64_t *)&qword_1000E7AB0);
        do
        {
          uint64_t v8 = *v7++;
          id v9 = v8;
          sub_100006730(&qword_1000E7AB8);
          swift_dynamicCast();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v2;
        }
        while (v2);
      }
      return _swiftEmptyArrayStorage;
    }
  }
  return result;
}

void *sub_10009F74C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10008AF50(0, v1, 0);
    uint64_t v3 = (id *)(a1 + 40);
    do
    {
      id v4 = *v3;
      sub_100006730(&qword_1000E7450);
      sub_100006730(&qword_1000E7B10);
      swift_dynamicCast();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10008AF50(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1) {
        sub_10008AF50(v5 > 1, v6 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v7 = &_swiftEmptyArrayStorage[2 * v6];
      *((unsigned char *)v7 + 32) = v9;
      v7[5] = v10;
      v3 += 2;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_10009F8A4()
{
  int64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x288);
  uint64_t v3 = v2();
  unint64_t v5 = v4;
  uint64_t v6 = swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v8 = ((uint64_t (*)(uint64_t))v2)(v6);
    uint64_t v10 = v9;
    uint64_t v11 = sub_1000A28D8(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
    unint64_t v13 = *((void *)v11 + 2);
    unint64_t v12 = *((void *)v11 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v11 = sub_1000A28D8((char *)(v12 > 1), v13 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v13 + 1;
    id v14 = &v11[16 * v13];
    *((void *)v14 + 4) = v8;
    *((void *)v14 + 5) = v10;
  }
  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelModifier + 8);
  if (v15)
  {
    uint64_t v16 = *(void *)((char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelModifier);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1000A28D8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v18 = *((void *)v11 + 2);
    unint64_t v17 = *((void *)v11 + 3);
    if (v18 >= v17 >> 1) {
      uint64_t v11 = sub_1000A28D8((char *)(v17 > 1), v18 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v18 + 1;
    id v19 = &v11[16 * v18];
    *((void *)v19 + 4) = v16;
    *((void *)v19 + 5) = v15;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC7Climate13ClimateButton_accessibilityLabelShouldIncludeStates) == 1)
  {
    char v20 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x128))();
    uint64_t v21 = ClimatePresentation.accessibilityLabel.getter(v20);
    uint64_t v23 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1000A28D8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v25 = *((void *)v11 + 2);
    unint64_t v24 = *((void *)v11 + 3);
    if (v25 >= v24 >> 1) {
      uint64_t v11 = sub_1000A28D8((char *)(v24 > 1), v25 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v25 + 1;
    id v26 = &v11[16 * v25];
    *((void *)v26 + 4) = v21;
    *((void *)v26 + 5) = v23;
  }
  sub_100006730((uint64_t *)&unk_1000E70E0);
  sub_10007D4F0();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setAccessibilityLabel:v27];
}

uint64_t sub_10009FB80()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan;
  if ([*(id *)(v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan) hasOn]
    && ([*(id *)(v0 + v2) on] & 1) == 0)
  {
    unsigned __int8 v10 = [*(id *)(v0 + v2) autoMode];
    unsigned __int8 v11 = [*(id *)(v0 + v2) onRestricted];
    unsigned int v12 = [*(id *)(v1 + v2) onInvalid];
    unsigned __int8 v13 = [*(id *)(v1 + v2) onDisabled];
    if (v10)
    {
      if (v11)
      {
        uint64_t v14 = 6;
        uint64_t v15 = 14;
      }
      else
      {
        uint64_t v14 = 2;
        uint64_t v15 = 10;
      }
    }
    else
    {
      if ((v11 & 1) == 0)
      {
        uint64_t v14 = 8;
        if (!v12) {
          uint64_t v14 = 0;
        }
        if ((v13 & 1) == 0) {
          return v14;
        }
        return v14 | 0x10;
      }
      uint64_t v14 = 4;
      uint64_t v15 = 12;
    }
    if (v12) {
      uint64_t v14 = v15;
    }
    if ((v13 & 1) == 0) {
      return v14;
    }
    return v14 | 0x10;
  }
  id v3 = *(id *)(v0 + v2);
  char v4 = CAFFan.isBlowing.getter();

  char v5 = [*(id *)(v1 + v2) autoMode];
  char v6 = [*(id *)(v1 + v2) fanLevelRestricted];
  char v7 = [*(id *)(v1 + v2) fanLevelInvalid];
  char v8 = [*(id *)(v1 + v2) fanLevelDisabled];

  return _s7Climate0A12PresentationV2on4auto10restricted7invalid8disabledACSb_S4btcfC_0(v4 & 1, v5, v6, v7, v8);
}

float sub_10009FD18()
{
  return (float)[*(id *)(v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan) fanLevel];
}

BOOL sub_10009FD48()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_range) minimum];
  unsigned int v2 = [v1 unsignedCharValue];

  return v2 == 0;
}

uint64_t sub_10009FDA8()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue);
}

uint64_t sub_10009FDBC(unsigned __int8 a1)
{
  int v2 = v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue];
  v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue] = a1;
  if (v2 != a1 && !v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state])
  {
    if (v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] == 1)
    {
      sub_1000987C8();
    }
    else
    {
      id v3 = self;
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v1;
      v9[4] = sub_1000A3E58;
      v9[5] = v4;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = sub_10005FC84;
      v9[3] = &unk_1000CCE60;
      char v5 = _Block_copy(v9);
      char v6 = v1;
      swift_release();
      [v3 animateWithDuration:2 delay:v5 options:0 animations:0.25 completion:0.0];
      _Block_release(v5);
    }
  }
  uint64_t v7 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled;
  sub_1000A035C((v1[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] & 1) == 0);
  uint64_t result = sub_10009FB80();
  v1[v7] = (result & 0x18) != 0;
  return result;
}

void sub_10009FF30()
{
  id v1 = *(char **)(v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton);
  sub_10009F8A4();
  int v2 = *(uint64_t (**)(uint64_t))&v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (v2)
  {
    uint64_t v3 = swift_retain();
    char v4 = v2(v3);
    sub_100005690((uint64_t)v2);
    if ((v4 & 0x10) != 0)
    {
      BOOL v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    char v4 = 0;
  }
  BOOL v5 = (v4 & 8) == 0;
LABEL_6:
  [v1 setEnabled:v5];
  ClimateButton.refreshColorConfig()();

  sub_10009813C();
}

uint64_t sub_10009FFF4()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state);
}

id sub_1000A0008(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state) = a1;
  return sub_1000A035C((*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled) & 1) == 0);
}

char *sub_1000A0038(void *a1, uint64_t a2, char a3)
{
  uint64_t v7 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton;
  id v8 = objc_allocWithZone((Class)type metadata accessor for ClimateStepperPowerButton());
  uint64_t v9 = v3;
  *(void *)&v3[v7] = [v8 init];
  v9[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_style] = a3;
  *(void *)&v9[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan] = a1;
  id v10 = a1;

  if ([v10 hasOn])
  {
    char v11 = 0;
  }
  else
  {
    id v12 = [v10 fanLevelRange];
    id v13 = [v12 minimum];

    LODWORD(v12) = [v13 unsignedCharValue];
    char v11 = v12 != 0;
  }
  id v14 = [v10 fanLevelRange];
  id v15 = v10;
  sub_100098DA8(0x6C6C69662E6E6166, 0xE800000000000000, 0, 0, a2, v14, v15, v11);
  unint64_t v17 = (char *)v16;
  [v15 registerObserver:v17];
  sub_1000A0884();
  sub_1000A035C(0);
  unint64_t v18 = (id *)&v17[OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton];
  swift_beginAccess();
  id v19 = *v18;
  char v20 = *(uint64_t (**)(void))((swift_isaMask & *(void *)*v18) + 0x128);
  uint64_t v21 = v17;
  uint64_t v22 = v19;
  LOBYTE(v19) = v20();

  [v22 updateAutoModeLabelWithIsVisible:(v19 & 0x1A) == 2 isAnimated:0 animationDelay:0.0];
  if (a3 == 4)
  {
    id v23 = [*v18 layer];
    [v23 setMasksToBounds:0];
  }
  sub_1000A1784();
  unint64_t v24 = *(char **)&v21[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton];
  sub_10009F8A4();
  unint64_t v25 = *(uint64_t (**)(uint64_t))&v24[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (!v25)
  {
    char v27 = 0;
    goto LABEL_10;
  }
  uint64_t v26 = swift_retain();
  char v27 = v25(v26);
  sub_100005690((uint64_t)v25);
  if ((v27 & 0x10) == 0)
  {
LABEL_10:
    BOOL v28 = (v27 & 8) == 0;
    goto LABEL_11;
  }
  BOOL v28 = 0;
LABEL_11:
  [v24 setEnabled:v28];
  ClimateButton.refreshColorConfig()();
  sub_10009813C();

  return v21;
}

id sub_1000A035C(char a1)
{
  uint64_t v2 = v1;
  if ((sub_10009FB80() & 0x18) != 0 || *(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state))
  {
    [*(id *)(v1 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton) setAlpha:0.0];
    char v4 = (id *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
    swift_beginAccess();
    return [*v4 setAlpha:1.0];
  }
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000B2100;
  uint64_t v7 = (id *)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  id v8 = *v7;
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_upButton);
  *(void *)(v6 + 32) = *v7;
  *(void *)(v6 + 40) = v9;
  id v10 = *(void **)(v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskUpButton);
  char v11 = *(void **)(v2 + OBJC_IVAR____TtC7Climate14ClimateStepper_downButton);
  *(void *)(v6 + 48) = v10;
  *(void *)(v6 + 56) = v11;
  id v12 = *(void **)(v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskDownButton);
  *(void *)(v6 + 64) = v12;
  specialized Array._endMutation()();
  unint64_t v46 = v6;
  uint64_t v13 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan;
  id v14 = *(void **)(v2 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan);
  id v15 = v8;
  id v16 = v9;
  id v17 = v10;
  id v18 = v11;
  id v19 = v12;
  if ([v14 hasOn])
  {
    char v20 = *(void **)(v2 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_fillView);
    if (v20)
    {
      id v21 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  id v22 = *(id *)(v2 + v13);
  char v23 = CAFFan.isBlowing.getter();

  if (v23)
  {
    [*v7 alpha];
    if (v24 < 0.5)
    {
      if (a1)
      {
        sub_100006730(&qword_1000E7940);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1000B2000;
        uint64_t v26 = *(void **)(v2 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton);
        *(void *)(inited + 32) = v26;
        uint64_t v44 = inited;
        specialized Array._endMutation()();
        id v27 = v26;
        sub_10009D8F8(1, v44);
        swift_bridgeObjectRelease();
        BOOL v28 = sub_10009F53C(v46);
        swift_bridgeObjectRelease();
LABEL_18:
        sub_10009D8F8(0, (uint64_t)v28);
        return (id)swift_bridgeObjectRelease();
      }
      [*(id *)(v2 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton) setAlpha:0.0];
      if (v46 >> 62)
      {
        swift_bridgeObjectRetain_n();
        id result = (id)_CocoaArrayWrapper.endIndex.getter();
        uint64_t v36 = (uint64_t)result;
        if (result) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v36 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id result = (id)swift_bridgeObjectRetain_n();
        if (v36)
        {
LABEL_22:
          if (v36 >= 1)
          {
            for (uint64_t i = 0; i != v36; ++i)
            {
              if ((v46 & 0xC000000000000001) != 0) {
                id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v38 = *(id *)(v46 + 8 * i + 32);
              }
              uint64_t v39 = v38;
              [v38 setAlpha:1.0];
            }
            return (id)swift_bridgeObjectRelease_n();
          }
          __break(1u);
          goto LABEL_41;
        }
      }
      return (id)swift_bridgeObjectRelease_n();
    }
  }
  id v29 = *(id *)(v2 + v13);
  char v30 = CAFFan.isBlowing.getter();

  if (v30) {
    return (id)swift_bridgeObjectRelease();
  }
  char v31 = *(void **)(v2 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton);
  [v31 alpha];
  if (v32 >= 0.5) {
    return (id)swift_bridgeObjectRelease();
  }
  if (a1)
  {
    os_log_type_t v33 = sub_10009F53C(v46);
    swift_bridgeObjectRelease();
    sub_10009D8F8(1, (uint64_t)v33);
    swift_bridgeObjectRelease();
    sub_100006730(&qword_1000E7940);
    uint64_t v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_1000B2000;
    *(void *)(v34 + 32) = v31;
    uint64_t v45 = (void *)v34;
    specialized Array._endMutation()();
    BOOL v28 = v45;
    id v35 = v31;
    goto LABEL_18;
  }
  if (!(v46 >> 62))
  {
    uint64_t v40 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain_n();
    if (v40) {
      goto LABEL_30;
    }
LABEL_39:
    swift_bridgeObjectRelease_n();
    return [v31 setAlpha:1.0];
  }
  swift_bridgeObjectRetain_n();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v40 = (uint64_t)result;
  if (!result) {
    goto LABEL_39;
  }
LABEL_30:
  if (v40 >= 1)
  {
    for (uint64_t j = 0; j != v40; ++j)
    {
      if ((v46 & 0xC000000000000001) != 0) {
        id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v42 = *(id *)(v46 + 8 * j + 32);
      }
      uint64_t v43 = v42;
      [v42 setAlpha:0.0];
    }
    goto LABEL_39;
  }
LABEL_41:
  __break(1u);
  return result;
}

id sub_1000A0884()
{
  uint64_t v1 = *(char **)&v0[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton];
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = (uint64_t *)&v1[OBJC_IVAR____TtC7Climate13ClimateButton_action];
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = (uint64_t)sub_1000A3E30;
  v3[1] = v2;
  sub_100005690(v4);
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = (uint64_t (**)())&v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  unsigned char *v6 = sub_1000A3E38;
  v6[1] = (uint64_t (*)())v5;
  sub_100005690(v7);
  [v0 addSubview:v1];
  id v8 = self;
  sub_100006730((uint64_t *)&unk_1000E4F10);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000B20F0;
  id v10 = [v1 leadingAnchor];
  id v11 = [v0 leadingAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v9 + 32) = v12;
  id v13 = [v1 trailingAnchor];
  id v14 = [v0 trailingAnchor];
  id v15 = [v13 constraintEqualToAnchor:v14];

  *(void *)(v9 + 40) = v15;
  id v16 = [v1 topAnchor];
  id v17 = [v0 topAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17];

  *(void *)(v9 + 48) = v18;
  id v19 = [v1 bottomAnchor];
  id v20 = [v0 bottomAnchor];
  id v21 = [v19 constraintEqualToAnchor:v20];

  *(void *)(v9 + 56) = v21;
  specialized Array._endMutation()();
  sub_100007310(0, (unint64_t *)&qword_1000E4CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 activateConstraints:isa, v9];

  return [v1 setAlpha:0.0];
}

void sub_1000A0BB4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan;
    unsigned int v3 = [*(id *)(Strong + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan) hasOn];
    uint64_t v4 = *(void **)&v1[v2];
    if (v3)
    {
      [v4 setOn:1];
    }
    else if (![v4 fanLevel])
    {
      id v5 = *(id *)&v1[v2];
      id v6 = [v5 fanLevelRange];
      unsigned int v7 = [v6 minimumValue];

      id v8 = [*(id *)&v1[v2] fanLevelRange];
      unsigned int v9 = [v8 stepValue];

      if (((v7 + v9) >> 8))
      {
        __break(1u);
        return;
      }
      [v5 setFanLevel:(v7 + v9)];
    }
    id v10 = *(char **)&v1[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton];
    sub_10009F8A4();
    id v11 = *(uint64_t (**)(uint64_t))&v10[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
    if (v11)
    {
      uint64_t v12 = swift_retain();
      char v13 = v11(v12);
      sub_100005690((uint64_t)v11);
      if ((v13 & 0x10) != 0)
      {
        BOOL v14 = 0;
LABEL_12:
        [v10 setEnabled:v14];
        ClimateButton.refreshColorConfig()();
        sub_10009813C();

        return;
      }
    }
    else
    {
      char v13 = 0;
    }
    BOOL v14 = (v13 & 8) == 0;
    goto LABEL_12;
  }
}

uint64_t sub_1000A0D74()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = (void *)Strong;
  uint64_t v2 = sub_10009FB80();

  return v2;
}

id sub_1000A0DD8()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue);
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan;
  id result = [*(id *)(v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan) fanLevel];
  if (v1 != result)
  {
    uint64_t v4 = *(void **)(v0 + v2);
    return [v4 setFanLevel:v1];
  }
  return result;
}

void sub_1000A0E5C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CAFRange.StepDirection();
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)&double v5 = __chkstk_darwin(v3).n128_u64[0];
  unsigned int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan;
  unsigned int v9 = [*(id *)(v1 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan) fanLevel:v5];
  id v10 = [*(id *)(v1 + v8) fanLevelRange];
  unsigned int v11 = [v10 stepValue];

  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v12 == enum case for CAFRange.StepDirection.up(_:))
  {
    id v13 = *(id *)(v1 + v8);
    id v14 = [v13 fanLevelRange];
    unsigned int v15 = [v14 maximumValue];

    if ((((v9 + v11) >> 8) & 1) == 0)
    {
      if ((v9 + v11) >= v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = (v9 + v11);
      }
LABEL_11:
      [v13 setFanLevel:v16];

      return;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  if (v12 == enum case for CAFRange.StepDirection.down(_:))
  {
    id v13 = *(id *)(v1 + v8);
    id v17 = [v13 fanLevelRange];
    unsigned int v18 = [v17 minimumValue];

    if (((v9 - v11) & 0xFFFFFF00) == 0)
    {
      if ((v9 - v11) <= v18) {
        uint64_t v16 = v18;
      }
      else {
        uint64_t v16 = (v9 - v11);
      }
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1000A109C()
{
  if (v0[OBJC_IVAR____TtC7Climate14ClimateStepper_disableSelectedBackgroundMaterial] == 1)
  {
    uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8];
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16];
    id v3 = *(id *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig];
    id v4 = v1;
    swift_bridgeObjectRetain();
    char v5 = sub_10009FB80();
    id v6 = sub_10006511C(v5, v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = [self clearColor];
  }
  [v0 setBackgroundColor:v6];

  sub_1000A1184();
}

void sub_1000A1184()
{
  uint64_t v1 = v0;
  uint64_t v2 = (id *)(v0 + OBJC_IVAR____TtC7Climate14ClimateStepper_primaryButton);
  swift_beginAccess();
  id v3 = *(uint64_t (**)(void))((swift_isaMask & *(void *)*v2) + 0x128);
  id v4 = *v2;
  char v5 = v3();

  uint64_t v6 = v5 & 0x1A;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_style) == 2)
  {
    unsigned int v7 = (void *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_axis);
    swift_beginAccess();
    if (!*v7)
    {
      id v16 = *v2;
      uint64_t v17 = v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig;
      unsigned int v18 = *(void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig);
      uint64_t v19 = *(void **)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 8);
      uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC7Climate14ClimateStepper_colorConfig + 16);
      id v21 = self;
      id v22 = v16;
      id v23 = v18;
      id v24 = v19;
      swift_bridgeObjectRetain();
      unint64_t v25 = &selRef_systemWhiteColor;
      if (v6 == 2) {
        unint64_t v25 = &selRef_systemGreenColor;
      }
      id v26 = [v21 *v25];
      if (v26)
      {
        id v27 = v26;

        id v24 = v27;
      }
      BOOL v28 = (void *)((char *)v22 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
      id v29 = *(void **)((char *)v22 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
      unint64_t v54 = *(void **)((char *)v22 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
      uint64_t v55 = *(void *)((char *)v22 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
      void *v28 = v23;
      v28[1] = v24;
      void v28[2] = v20;
      id v30 = v23;
      swift_bridgeObjectRetain_n();
      sub_100007310(0, (unint64_t *)&qword_1000E4A20);
      id v31 = v30;
      id v32 = v24;
      if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
      {
        sub_10007C1D0(v20, v55);
        char v34 = v33;
        swift_bridgeObjectRelease();

        if (v34)
        {
LABEL_20:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v35 = *(void *)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton);
          uint64_t v36 = *(void **)v17;
          unint64_t v37 = *(void **)(v17 + 8);
          uint64_t v38 = *(void *)(v17 + 16);
          uint64_t v39 = self;
          id v40 = v36;
          id v41 = v37;
          swift_bridgeObjectRetain();
          id v42 = &selRef_systemBlackColor;
          if (v6 == 2) {
            id v42 = &selRef_systemGreenColor;
          }
          id v43 = [v39 *v42];
          if (v43)
          {
            id v44 = v43;

            id v41 = v44;
          }
          uint64_t v45 = (void *)(v35 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
          unint64_t v46 = *(void **)(v35 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig);
          uint64_t v47 = *(void **)(v35 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 8);
          uint64_t v48 = *(void *)(v35 + OBJC_IVAR____TtC7Climate13ClimateButton_colorConfig + 16);
          *uint64_t v45 = v40;
          v45[1] = v41;
          v45[2] = v38;
          id v49 = v40;
          swift_bridgeObjectRetain_n();
          id v50 = v49;
          id v51 = v41;
          if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)())
          {
            sub_10007C1D0(v38, v48);
            char v53 = v52;
            swift_bridgeObjectRelease();

            if (v53) {
              goto LABEL_30;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          ClimateButton.refreshColorConfig()();
LABEL_30:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      (*(void (**)(void))((swift_isaMask & *v22) + 0x230))();
      goto LABEL_20;
    }
  }
  if (v6 == 2)
  {
    char v8 = sub_10009FB80();
    id v9 = [self systemGreenColor];
    if ((v8 & 4) != 0)
    {
      id v10 = sub_100064984();

      id v9 = v10;
    }
    [*v2 setTitleColor:v9 forState:0];
    [*(id *)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton) setTitleColor:v9 forState:0];
  }
  else
  {
    id v11 = *v2;
    int v12 = self;
    id v13 = v11;
    id v14 = [v12 systemWhiteColor];
    [v13 setTitleColor:v14 forState:0];

    unsigned int v15 = *(void **)(v1 + OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_maskPrimaryButton);
    id v9 = [v12 systemBlackColor];
    [v15 setTitleColor:v9 forState:0];
  }
}

id sub_1000A16B0()
{
  sub_10009B020();
  uint64_t v1 = *(unsigned char **)(v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton);
  uint64_t v2 = OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted;
  int v3 = v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted];
  v1[OBJC_IVAR____TtC7Climate13ClimateButton_shouldBeHighlighted] = 0;
  id result = [v1 setHighlighted:0];
  uint64_t v5 = v1[v2];
  if (v3 != v5)
  {
    uint64_t v6 = &v1[OBJC_IVAR____TtC7Climate20ClimateStepperButton_delegate];
    id result = (id)swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, ObjectType, v7);
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000A1784()
{
  if ((sub_10009FB80() & 0x18) != 0)
  {
    id v1 = [*(id *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_range] minimum];
    unsigned __int8 v2 = [v1 unsignedCharValue];
  }
  else
  {
    unsigned __int8 v2 = sub_1000A194C();
  }
  int v3 = v0[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue];
  v0[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue] = v2;
  if (v3 != v2 && !v0[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state])
  {
    if (v0[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] == 1)
    {
      sub_1000987C8();
    }
    else
    {
      id v4 = self;
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v0;
      v10[4] = sub_1000A3E58;
      v10[5] = v5;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1107296256;
      _OWORD v10[2] = sub_10005FC84;
      void v10[3] = &unk_1000CCEB0;
      uint64_t v6 = _Block_copy(v10);
      uint64_t v7 = v0;
      swift_release();
      [v4 animateWithDuration:2 delay:v6 options:0 animations:0.25 completion:0.0];
      _Block_release(v6);
    }
  }
  uint64_t v8 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled;
  sub_1000A035C((v0[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] & 1) == 0);
  uint64_t result = sub_10009FB80();
  v0[v8] = (result & 0x18) != 0;
  return result;
}

id sub_1000A194C()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan;
  unsigned int v3 = [*(id *)&v0[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan] fanLevel];
  uint64_t v4 = OBJC_IVAR____TtC7Climate14ClimateStepper_range;
  id v5 = *(id *)&v0[OBJC_IVAR____TtC7Climate14ClimateStepper_range];
  CAFRange.maximumValue<A>()();

  if (v24 >= v3)
  {
    unsigned int v11 = [*(id *)&v1[v2] fanLevel];
    id v12 = *(id *)&v1[v4];
    CAFRange.minimumValue<A>()();

    if (v11 >= v23)
    {
      return [*(id *)&v1[v2] fanLevel];
    }
    else
    {
      if (qword_1000E46D8 != -1) {
        swift_once();
      }
      id v13 = qword_1000EA798;
      id v14 = v1;
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 16908800;
        [*(id *)&v1[v2] fanLevel];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 5) = 258;
        id v17 = [*(id *)&v1[v4] minimum];
        [v17 unsignedCharValue];

        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v15, "fanLevel value is out of bound. fanLevel: %{public}hhu, min range %{public}hhu", (uint8_t *)v16, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      id v20 = *(id *)&v1[v4];
      CAFRange.minimumValue<A>()();

      return (id)v22;
    }
  }
  else
  {
    if (qword_1000E46D8 != -1) {
      swift_once();
    }
    uint64_t v6 = qword_1000EA798;
    uint64_t v7 = v1;
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 16908800;
      [*(id *)&v1[v2] fanLevel];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 5) = 258;
      id v10 = [*(id *)&v1[v4] maximum];
      [v10 unsignedCharValue];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "fanLevel value is out of bound. fanLevel: %{public}hhu, max range %{public}hhu", (uint8_t *)v9, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
    id v18 = *(id *)&v1[v4];
    CAFRange.maximumValue<A>()();

    return (id)v21;
  }
}

void sub_1000A1D28()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton);
}

id sub_1000A1D68()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateFanContinuousStepper();
  return [super dealloc];
}

uint64_t sub_1000A1DEC()
{
  return type metadata accessor for ClimateFanContinuousStepper();
}

uint64_t type metadata accessor for ClimateFanContinuousStepper()
{
  uint64_t result = qword_1000E7A90;
  if (!qword_1000E7A90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A1E40()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1000A1E98(void *a1, int a2)
{
  unsigned int v3 = v2;
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v10 = qword_1000EA798;
  id v11 = a1;
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    unint64_t v37 = (void **)swift_slowAlloc();
    CGAffineTransform aBlock = v37;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v36 = v13 + 4;
    sub_100007310(0, (unint64_t *)&unk_1000E7AA0);
    CAFPositionedRequired.layoutKey.getter();
    uint64_t v14 = CAUVehicleLayoutKey.rawValue.getter();
    HIDWORD(v35) = a2;
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v38 = sub_10000A56C(v14, v16, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 258;
    LOBYTE(v38) = BYTE4(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Fan %{public}s did update level to: %{public}hhu", (uint8_t *)v13, 0xFu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v17 = *(char **)&v3[OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton];
  sub_10009F8A4();
  id v18 = *(uint64_t (**)(uint64_t))&v17[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (v18)
  {
    uint64_t v19 = swift_retain();
    char v20 = v18(v19);
    sub_100005690((uint64_t)v18);
    if ((v20 & 0x10) != 0)
    {
      BOOL v21 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    char v20 = 0;
  }
  BOOL v21 = (v20 & 8) == 0;
LABEL_11:
  [v17 setEnabled:v21];
  ClimateButton.refreshColorConfig()();
  sub_10009813C();
  if ((sub_10009FB80() & 0x18) != 0)
  {
    id v22 = [*(id *)&v3[OBJC_IVAR____TtC7Climate14ClimateStepper_range] minimum];
    unsigned int v23 = [v22 unsignedCharValue];

    int v24 = v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue];
    v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue] = v23;
    if (v24 != v23 && !v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state])
    {
      if (v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] != 1)
      {
        unint64_t v25 = self;
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v3;
        id v43 = (void (*)())sub_1000A3E58;
        uint64_t v44 = v26;
        CGAffineTransform aBlock = _NSConcreteStackBlock;
        uint64_t v40 = 1107296256;
        id v27 = &unk_1000CCE10;
LABEL_21:
        id v41 = sub_10005FC84;
        id v42 = v27;
        id v31 = _Block_copy(&aBlock);
        id v32 = v3;
        swift_release();
        [v25 animateWithDuration:2 delay:v31 options:0 animations:0.25 completion:0.0];
        _Block_release(v31);
        goto LABEL_22;
      }
LABEL_19:
      sub_1000987C8();
    }
  }
  else
  {
    unsigned __int8 v28 = sub_1000A194C();
    int v29 = v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue];
    v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_currentValue] = v28;
    if (v29 != v28 && !v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_state])
    {
      if (v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] != 1)
      {
        unint64_t v25 = self;
        uint64_t v30 = swift_allocObject();
        *(void *)(v30 + 16) = v3;
        id v43 = sub_1000A3DD8;
        uint64_t v44 = v30;
        CGAffineTransform aBlock = _NSConcreteStackBlock;
        uint64_t v40 = 1107296256;
        id v27 = &unk_1000CCDC0;
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
LABEL_22:
  uint64_t v33 = OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled;
  sub_1000A035C((v3[OBJC_IVAR____TtC7Climate24ClimateContinuousStepper_wasPreviousValueDisabled] & 1) == 0);
  uint64_t result = sub_10009FB80();
  v3[v33] = (result & 0x18) != 0;
  return result;
}

void sub_1000A2464(void *a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CAUVehicleLayoutKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000E46D8 != -1) {
    swift_once();
  }
  id v10 = qword_1000EA798;
  id v11 = a1;
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = v3;
    uint64_t v14 = v13;
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v25 = v14 + 4;
    sub_100007310(0, (unint64_t *)&unk_1000E7AA0);
    CAFPositionedRequired.layoutKey.getter();
    uint64_t v15 = CAUVehicleLayoutKey.rawValue.getter();
    int v24 = a2;
    unint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v27 = sub_10000A56C(v15, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 1026;
    LODWORD(v27) = v24 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Fan %{public}s did update ON: %{BOOL,public}d", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v26;
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000A1784();
  id v18 = *(char **)(v3 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_powerButton);
  sub_10009F8A4();
  uint64_t v19 = *(uint64_t (**)(uint64_t))&v18[OBJC_IVAR____TtC7Climate20ClimateStepperButton_presentationStatesBlock];
  if (!v19)
  {
    char v21 = 0;
    goto LABEL_10;
  }
  uint64_t v20 = swift_retain();
  char v21 = v19(v20);
  sub_100005690((uint64_t)v19);
  if ((v21 & 0x10) == 0)
  {
LABEL_10:
    BOOL v22 = (v21 & 8) == 0;
    goto LABEL_11;
  }
  BOOL v22 = 0;
LABEL_11:
  [v18 setEnabled:v22];
  ClimateButton.refreshColorConfig()();
  sub_10009813C();
}

void sub_1000A284C()
{
  id v1 = *(void **)(*v0 + OBJC_IVAR____TtC7Climate27ClimateFanContinuousStepper_fan);
  sub_100007310(0, (unint64_t *)&unk_1000E7AA0);
  id v2 = v1;
  CAFPositioned.layoutKey.getter();
}

char *sub_1000A28D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006730((uint64_t *)&unk_1000E70D0);
      id v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000A343C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A29E8(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006730(&qword_1000E7AD8);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || (unint64_t)v13 >= a4 + 32 + 8 * v8)
        {
          sub_100006730((uint64_t *)&unk_1000E5780);
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          sub_100006730((uint64_t *)&unk_1000E5780);
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    sub_1000A3888(0, v8, (unint64_t)v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A2B40(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006730(&qword_1000E7AC8);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || (unint64_t)v13 >= a4 + 32 + 8 * v8)
        {
          sub_100006730(&qword_1000E7AD0);
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          sub_100006730(&qword_1000E7AD0);
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    sub_1000A3994(0, v8, (unint64_t)v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A2C98(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006730(&qword_1000E7AE8);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A3AA0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A2DA8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006730((uint64_t *)&unk_1000E7B00);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A3624(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000A2EB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006730(&qword_1000E7B18);
      id v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000A3530(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A2FC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006730((uint64_t *)&unk_1000E59D0);
  uint64_t v10 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000A3730(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}