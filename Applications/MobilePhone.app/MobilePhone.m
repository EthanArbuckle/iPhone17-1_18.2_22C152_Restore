uint64_t static ApplicationServicesActor.shared.getter()
{
  return swift_initStaticObject();
}

uint64_t type metadata accessor for CachedVoicemailManager()
{
  return self;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5(uint64_t a1, int *a2)
{
  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA_65(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v8(a1, v4, v5, v6);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v6(v2, v3, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t objectdestroy_45Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t *, uint64_t *, void **, uint64_t *))
{
  uint64_t v6 = v5;
  if (a3 != a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = *a4;
    uint64_t v9 = *a4 + 16 * a3 - 16;
LABEL_3:
    long long v10 = *(_OWORD *)(v8 + 16 * a3);
    uint64_t v19 = v9;
    uint64_t v20 = a3;
    while (1)
    {
      v11 = *(void **)v9;
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v25 = *((void *)&v10 + 1);
      uint64_t v26 = v10;
      uint64_t v23 = v12;
      v24 = v11;
      id v22 = (id)v10;
      swift_unknownObjectRetain();
      id v13 = v11;
      swift_unknownObjectRetain();
      uint64_t v14 = v6;
      char v15 = a5(&v26, &v25, &v24, &v23);
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      if (v14) {
        break;
      }
      if ((v15 & 1) == 0)
      {
        uint64_t v16 = v20;
        uint64_t v6 = 0;
LABEL_10:
        a3 = v16 + 1;
        uint64_t v9 = v19 + 16;
        uint64_t v7 = a1;
        if (a3 != a2) {
          goto LABEL_3;
        }
        return;
      }
      if (!v8)
      {
        __break(1u);
        return;
      }
      long long v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = v10;
      v9 -= 16;
      ++v7;
      uint64_t v16 = v20;
      uint64_t v6 = 0;
      if (v20 == v7) {
        goto LABEL_10;
      }
    }
  }
}

uint64_t closure #1 in CachedVoicemailManager.Cache.sort()(uint64_t a1, id *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - v11;
  id v13 = *a4;
  id v14 = [*a2 date];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = [v13 date];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v15) = static Date.> infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v16(v12, v6);
  return v15 & 1;
}

uint64_t FTMessage.messageType.getter()
{
  LOWORD(result) = dispatch thunk of Message.messageType.getter();
  if ((unsigned __int16)result < 3u) {
    return (unsigned __int16)result;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  dispatch thunk of Message.messageType.getter();
  MessageType.rawValue.getter();
  v1._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = (uint64_t *)v0[2];
  static TaskPriority.userInitiated.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  swift_retain();
  *uint64_t v3 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSay20FaceTimeMessageStore0F0CG_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore(), (uint64_t)v5);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSay20FaceTimeMessageStore0F0CG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of Locale?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Message]);
  return swift_task_create();
}

uint64_t implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore(), 0, 0);
}

uint64_t FaceTimeVoicemailManager.fetchMessagesFromDataStore()()
{
  *(void *)(v0 + 832) = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetching Messages from FTMS", v3, 2u);
    swift_slowDealloc();
  }

  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Task<[Message], Error>);
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 16, v0 + 696, FaceTimeVoicemailManager.fetchMessagesFromDataStore(), v0 + 704);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[87];
  v0[105] = v1;
  swift_retain();
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[106] = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Message]);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *os_log_type_t v2 = v0;
  v2[1] = FaceTimeVoicemailManager.fetchMessagesFromDataStore();
  return Task.value.getter(v0 + 99, v1, v3, v4, &protocol self-conformance witness table for Error);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1[101] = v0;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[102] = v3;
  v1[103] = v2;
  return _swift_task_switch(FaceTimeVoicemailManager.fetchMessagesFromDataStore(), v3, v2);
}

{
  void *v0;
  unint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[99];
  swift_bridgeObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134349056;
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v0[100] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetched %{public}ld message(s) from FTMS", v4, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v0[108] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20FaceTimeMessageStore0F0CG_11MobilePhoneAG_ps5NeverOTg504_s20def11Store0C0C11h30Phone9FTMessageCIeggo_AcdB_ps5J120OIegnrzr_TR04_s11e7Phone24ab40VoicemailManagerC26fetchMessagesFromDatad6SayAA7c11_pGyYaKFAA9G15C0cdlK0AECcfu1_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 2, v0 + 87, FaceTimeVoicemailManager.fetchMessagesFromDataStore(), v0 + 94);
}

{
  uint64_t v0;

  return _swift_task_switch(FaceTimeVoicemailManager.fetchMessagesFromDataStore(), *(void *)(v0 + 816), *(void *)(v0 + 824));
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release_n();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  os_log_type_t v2 = *(void *)(v0 + 864);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  os_log_type_t v2 = *v1;
  *(void *)(*v1 + 856) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 824);
  uint64_t v4 = *(void *)(v2 + 816);
  if (v0) {
    uint64_t v5 = FaceTimeVoicemailManager.fetchMessagesFromDataStore();
  }
  else {
    uint64_t v5 = FaceTimeVoicemailManager.fetchMessagesFromDataStore();
  }
  return _swift_task_switch(v5, v4, v3);
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 16, v0 + 696, FaceTimeVoicemailManager.fetchMessagesFromDataStore(), v0 + 656);
}

{
  uint64_t v0;

  return _swift_task_switch(FaceTimeVoicemailManager.fetchMessagesFromDataStore(), *(void *)(v0 + 816), *(void *)(v0 + 824));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata completion function for MessageID()
{
  uint64_t result = type metadata accessor for MessageID.Value(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t one-time initialization function for queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue_serial);
  static DispatchQoS.userInteractive.getter();
  v5[1] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type OS_dispatch_queue_serial.Attributes and conformance OS_dispatch_queue_serial.Attributes, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue_serial.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue_serial.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue_serial.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  uint64_t result = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static ApplicationServicesActor.queue = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  void v5[2];

  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  type metadata accessor for OS_dispatch_queue_serial();
  static DispatchQoS.userInteractive.getter();
  v5[1] = &_swiftEmptyArrayStorage;
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_0(&lazy protocol witness table cache variable for type OS_dispatch_queue_serial.Attributes and conformance OS_dispatch_queue_serial.Attributes, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue_serial.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue_serial.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  uint64_t result = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static VoicemailActor.queue = result;
  return result;
}

unint64_t type metadata accessor for OS_dispatch_queue_serial()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue_serial;
  if (!lazy cache variable for type metadata for OS_dispatch_queue_serial)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue_serial);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue_serial.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue_serial.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue_serial.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue_serial.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue_serial.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t @objc closure #1 in CachedVoicemailManager.fetchMessages()()
{
  uint64_t v1 = *(void (***)(void, void))(*v0 + 32);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  *(void *)(v0 + 32) = _Block_copy(*(const void **)(v0 + 16));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  NSObject *v1 = v0;
  v1[1] = @objc closure #1 in CachedVoicemailManager.fetchMessages();
  return CachedVoicemailManager.fetchMessages()();
}

uint64_t closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 48);
  FaceTimeVoicemailManager.allMessagesQuery.getter(*(uint64_t **)(v0 + 96));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for MessageStoreFetchRequest.QuerySearchType.unsorted(_:), v3);
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type MessageFetchOptions and conformance MessageFetchOptions, (void (*)(uint64_t))&type metadata accessor for MessageFetchOptions);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MessageFetchOptions]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [MessageFetchOptions] and conformance [A], &demangling cache variable for type metadata for [MessageFetchOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MessageStoreFetchRequest.init(query:sortType:options:pageSize:page:originatingBundleID:)();
  uint64_t v5 = (void *)(v4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 24);
  uint64_t v7 = v5[4];
  __swift_project_boxed_opaque_existential_0(v5, v6);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 40) + **(int **)(v7 + 40));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore();
  uint64_t v9 = *(void *)(v0 + 120);
  return v11(v9, v6, v7);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error loading FTMessages %@", v3, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  unint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[17];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v0[4] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Loading FTMessages gave us %{public}ld message(s).", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = v0[17];
  uint64_t v8 = (void *)v0[5];
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s11MobilePhone14VoicemailActorCACScAAAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s11MobilePhone14VoicemailActorCACScAAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t FaceTimeVoicemailManager.allMessagesQuery.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MessageStoreQuery>);
  uint64_t v4 = type metadata accessor for MessageStoreQuery();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002060A0;
  uint64_t v9 = (uint64_t *)(v8 + v7);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_providers);
  *uint64_t v9 = v10;
  uint64_t v11 = *(void (**)(uint64_t *, void, uint64_t))(v5 + 104);
  v11(v9, enum case for MessageStoreQuery.providers(_:), v4);
  uint64_t v12 = (uint64_t *)((char *)v9 + v6);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes);
  *uint64_t v12 = v13;
  v11(v12, enum case for MessageStoreQuery.types(_:), v4);
  *(void *)(v3 + 16) = v8;
  *a1 = v3;
  v11(a1, enum case for MessageStoreQuery.and(_:), v4);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in CachedVoicemailManager.fetchMessages()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a1;
  v4[8] = a4;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[9] = v6;
  v4[10] = v5;
  return _swift_task_switch(closure #1 in CachedVoicemailManager.fetchMessages(), v6, v5);
}

uint64_t CachedVoicemailManager.fetchMessages()()
{
  v1[12] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[13] = swift_task_alloc();
  v1[14] = type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  v1[15] = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[16] = v3;
  v1[17] = v2;
  return _swift_task_switch(CachedVoicemailManager.fetchMessages(), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t *);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(void *);
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  void *v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;

  v35 = v0;
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.mobilePhone);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x73654D6863746566, 0xEF29287365676173, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CachedVoicemailManager: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[12];
  uint64_t v6 = *(void *)(v5 + 16);
  v0[19] = v6;
  if (v6 >> 62)
  {
    if (v6 >> 62 == 1)
    {
      unint64_t v7 = (void *)(v6 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v8 = (void *)(v5 + 24);
      swift_retain();
      swift_beginAccess();
      uint64_t v9 = *(void *)(v5 + 24);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = v9 + 40;
        do
        {
          uint64_t v12 = *(void (**)(unint64_t *))(v11 - 8);
          v34 = v6 & 0x3FFFFFFFFFFFFFFFLL;
          swift_retain();
          v12(&v34);
          swift_release();
          v11 += 16;
          --v10;
        }
        while (v10);
        swift_bridgeObjectRelease();
      }
      *uint64_t v8 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      uint64_t v13 = Logger.logObject.getter();
      id v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        *(_DWORD *)id v15 = 136315138;
        v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x73654D6863746566, 0xEF29287365676173, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "CachedVoicemailManager: %s returning voicemails", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v16 = v7[2];
      v17 = v7[3];
      uint64_t v18 = v7[4];
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(v16, v17, v18);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void *))v0[1];
      return v20(v19);
    }
    uint64_t v26 = v0[15];
    v27 = v0[13];
    v28 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
    v29 = swift_allocObject();
    swift_weakInit();
    inited = swift_initStaticObject();
    v31 = (void *)swift_allocObject();
    v31[2] = inited;
    v31[3] = v26;
    v31[4] = v29;
    v32 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_Tgm5Tm(v27, (uint64_t)&async function pointer to partial apply for closure #1 in CachedVoicemailManager.fetchMessages(), (uint64_t)v31, (uint64_t)&unk_100280AB0, (void (*)(void))type metadata accessor for CachedVoicemailManager.Cache);
    v0[21] = v32;
    *(void *)(v5 + 16) = v32;
    swift_retain();
    swift_release();
    v33 = (void *)swift_task_alloc();
    v0[22] = v33;
    uint64_t v23 = type metadata accessor for CachedVoicemailManager.Cache();
    *v33 = v0;
    v33[1] = CachedVoicemailManager.fetchMessages();
    v24 = v0 + 10;
    uint64_t v25 = v32;
  }
  else
  {
    swift_retain();
    id v22 = (void *)swift_task_alloc();
    v0[20] = v22;
    uint64_t v23 = type metadata accessor for CachedVoicemailManager.Cache();
    *id v22 = v0;
    v22[1] = CachedVoicemailManager.fetchMessages();
    v24 = v0 + 8;
    uint64_t v25 = v6;
  }
  return Task<>.value.getter(v24, v25, v23);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 128);
  return _swift_task_switch(CachedVoicemailManager.fetchMessages(), v3, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void **);
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void *);
  void *v16;
  void *v17;
  uint64_t v18;

  v17 = v0;
  swift_release();
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v0[12] + 24;
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 40;
    do
    {
      uint64_t v6 = *(void (**)(void **))(v5 - 8);
      uint64_t v16 = v1;
      swift_retain();
      v6(&v16);
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  *(void *)uint64_t v2 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  unint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x73654D6863746566, 0xEF29287365676173, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CachedVoicemailManager: %s returning voicemails", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, v11, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  id v14 = (uint64_t (*)(void *))v0[1];
  return v14(v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 128);
  return _swift_task_switch(CachedVoicemailManager.fetchMessages(), v3, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void **);
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void *);
  void *v16;
  void *v17;
  uint64_t v18;

  v17 = v0;
  swift_release();
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v0[12] + 24;
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 40;
    do
    {
      uint64_t v6 = *(void (**)(void **))(v5 - 8);
      uint64_t v16 = v1;
      swift_retain();
      v6(&v16);
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  *(void *)uint64_t v2 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  unint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x73654D6863746566, 0xEF29287365676173, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CachedVoicemailManager: %s returning voicemails", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, v11, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  id v14 = (uint64_t (*)(void *))v0[1];
  return v14(v13);
}

unint64_t lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor()
{
  unint64_t result = lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor;
  if (!lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor)
  {
    type metadata accessor for VoicemailActor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor);
  }
  return result;
}

uint64_t @objc closure #1 in CachedVoicemailManager.fetchMessages()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in CachedVoicemailManager.fetchMessages(), v4, v3);
}

uint64_t type metadata accessor for VoicemailActor()
{
  return self;
}

uint64_t VoicemailActor.unownedExecutor.getter()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

void type metadata completion function for FTMessage()
{
  type metadata accessor for URL??(319, &lazy cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL??(319, &lazy cache variable for type metadata for Transcript??, &demangling cache variable for type metadata for Transcript?);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for URL??(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t Throttle.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<DispatchWorkItem, Never>, OS_dispatch_queue>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_throttleTime) = 0x3FB999999999999ALL;
  uint64_t v12 = OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_subject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<DispatchWorkItem, Never>);
  swift_allocObject();
  uint64_t v13 = PassthroughSubject.init()();
  *(void *)(v0 + v12) = v13;
  uint64_t v14 = OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_inputCancellable;
  *(void *)(v0 + OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_inputCancellable) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_scheduledWorkItem) = 0;
  uint64_t v24 = v13;
  swift_retain();
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v23 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<DispatchWorkItem, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<DispatchWorkItem, Never>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of Locale?((uint64_t)v4, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<DispatchWorkItem, Never>, OS_dispatch_queue> and conformance Publishers.Debounce<A, B>, &demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<DispatchWorkItem, Never>, OS_dispatch_queue>);
  uint64_t v16 = v21;
  uint64_t v17 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v16);
  *(void *)(v1 + v14) = v17;
  swift_release();
  return v1;
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    type metadata accessor for VMAccount(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

void specialized MPAnalyticsLogger.logEvent(_:withCoreAnalyticsDictionary:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002060A0;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
  *(void *)(v6 + 104) = lazy protocol witness table accessor for type [String : NSObject] and conformance [A : B]();
  *(void *)(v6 + 72) = a3;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v7 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  NSString v8 = String._bridgeToObjectiveC()();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  v11[4] = partial apply for closure #1 in VoiceMailAnalyticsLogger.logEvent(_:withCoreAnalyticsDictionary:);
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v11[3] = &block_descriptor_7_0;
  uint64_t v10 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v10);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t ApplicationServicesActor.unownedExecutor.getter()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20FaceTimeMessageStore0F0CG_11MobilePhoneAG_ps5NeverOTg504_s20def11Store0C0C11h30Phone9FTMessageCIeggo_AcdB_ps5J120OIegnrzr_TR04_s11e7Phone24ab40VoicemailManagerC26fetchMessagesFromDatad6SayAA7c11_pGyYaKFAA9G15C0cdlK0AECcfu1_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = &_swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    unint64_t v13 = v1;
    uint64_t v4 = 0;
    unint64_t v14 = v1 & 0xC000000000000001;
    while (v2 != v4)
    {
      if (v14) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      id v6 = v5;
      ++v4;
      type metadata accessor for FTMessage(0);
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 24) = 0;
      *(unsigned char *)(v7 + 32) = 1;
      *(_WORD *)(v7 + 33) = 514;
      uint64_t v8 = v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
      v10(v8, 1, 1, v9);
      v10(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, 1, 1, v9);
      v10(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, 1, 1, v9);
      uint64_t v11 = v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
      *(void *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = 1;
      *(unsigned char *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) = 0;
      *(unsigned char *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 0;
      *(void *)(v7 + 16) = v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v1 = v13;
      if (v2 == v4) {
        return &_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for FTMessage(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for FTMessage);
}

uint64_t specialized static MessageID.Value.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MessageID.Value(0);
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v21 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MessageID.Value, MessageID.Value));
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v16[*(int *)(v14 + 56)];
  outlined init with copy of MessageID.Value(a1, (uint64_t)v16);
  outlined init with copy of MessageID.Value(a2, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of MessageID.Value((uint64_t)v16, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      char v18 = *v12 == *(void *)v17;
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for (MessageID.Value, MessageID.Value));
    char v18 = 0;
    return v18 & 1;
  }
  outlined init with copy of MessageID.Value((uint64_t)v16, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v17, v4);
  char v18 = static UUID.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  v19(v10, v4);
LABEL_6:
  outlined destroy of MessageID.Value((uint64_t)v16);
  return v18 & 1;
}

Swift::Int MessageID.Value.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MessageID.Value(0);
  __chkstk_darwin();
  uint64_t v7 = (Swift::UInt *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of MessageID.Value(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v5, v7, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    Swift::UInt v8 = *v7;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v8);
  }
  return Hasher._finalize()();
}

uint64_t outlined init with copy of MessageID.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessageID.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RecentCallView(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for MessageID.Value(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for MessageID.Value);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t MessageID.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v6);
  if (!v7)
  {
    outlined destroy of Locale?((uint64_t)v6, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  char v3 = specialized static MessageID.Value.__derived_enum_equals(_:_:)((uint64_t)v5 + OBJC_IVAR___MPMessageID_value, v1 + OBJC_IVAR___MPMessageID_value);

  return v3 & 1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MessageID.Value(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessageID.Value(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10000FAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000112C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000115D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void PhoneBadgeChanged(void *a1)
{
  id v1 = a1;
  uint64_t v2 = PHDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received badge changed notification: %@", buf, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    char v3 = +[NSNotificationCenter defaultCenter];
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t)v1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      +[NSException raise:@"PhoneBadgeChanged called with invalid object", @"PhoneBadgeChanged called with invalid object: %@", v1 format];
      goto LABEL_9;
    }
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    uint64_t v5 = objc_opt_class();
    char v3 = v4;
  }
  [v3 postNotificationName:@"com.apple.mobilephone.BadgeChanged" object:v5];

LABEL_9:
}

__CFString *PhoneStringForBadgeValue(char a1, unint64_t a2)
{
  uint64_t v2 = (__CFString *)a2;
  if (a2 >= 0x7FFFFFFF)
  {
    uint64_t v4 = PHDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[WARN] Found unexpected badge count (%llu). Defaulting to zero.", buf, 0xCu);
    }

    if (a1)
    {
      uint64_t v2 = 0;
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v2 = @" ";
    goto LABEL_12;
  }
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      uint64_t v5 = [(id)objc_opt_class() sharedNumberFormatter];
      uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:v2];
      id v7 = [v5 stringFromNumber:v6];

      uint64_t v2 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"%@+", v7];
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (a2)
  {
    Swift::UInt v8 = [(id)objc_opt_class() sharedNumberFormatter];
    uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:v2];
    uint64_t v2 = [v8 stringFromNumber:v9];
  }
LABEL_12:

  return v2;
}

void sub_100012910(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id PHDefaultLog()
{
  if (PHDefaultLog_onceToken != -1) {
    dispatch_once(&PHDefaultLog_onceToken, &__block_literal_global_36);
  }
  uint64_t v0 = (void *)PHDefaultLog_PHDefaultLog;

  return v0;
}

uint64_t type metadata accessor for VMAccount(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t FTMessage.folder.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) == 1)
  {
    return FTMessage.dirtyFolder.getter();
  }
  else
  {
    int v2 = (unsigned __int16)dispatch thunk of Message.mailboxType.getter();
    uint64_t v3 = 1;
    if (v2 == 2) {
      uint64_t v3 = 2;
    }
    if (v2 == 1) {
      return 3;
    }
    else {
      return v3;
    }
  }
}

void sub_100013380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

void sub_1000153A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for MPAnalyticsLogger()
{
  return self;
}

void PHPreferencesSetValueInDomain(void *a1, void *a2, void *a3)
{
  key = a1;
  id v5 = a2;
  uint64_t v6 = a3;
  if (!v6)
  {
    id v7 = +[NSBundle mainBundle];
    uint64_t v6 = [v7 bundleIdentifier];
  }
  if ([(__CFString *)key length] && [(__CFString *)v6 length])
  {
    CFPreferencesSetValue(key, v5, v6, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
    CFPreferencesSynchronize(v6, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  }
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

unint64_t type metadata accessor for TUMetadataDestinationID()
{
  unint64_t result = lazy cache variable for type metadata for TUMetadataDestinationID;
  if (!lazy cache variable for type metadata for TUMetadataDestinationID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUMetadataDestinationID);
  }
  return result;
}

void *static TUMetadataDestinationID.metadataDestinationIDs(for:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)((unint64_t)&_swiftEmptyArrayStorage);
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_44;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v5) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      id v6 = [(id)swift_unknownObjectRetain() senderDestinationID];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v10 = v9;
        swift_unknownObjectRelease();

        uint64_t v11 = HIBYTE(v10) & 0xF;
        if ((v10 & 0x2000000000000000) == 0) {
          uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
        }
        if (!v11)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
        id v12 = [(id)swift_unknownObjectRetain() senderISOCountryCode];
        if (v12)
        {
          uint64_t v13 = v12;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          swift_unknownObjectRelease();

          uint64_t v14 = self;
          NSString v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v17 = [v14 normalizedPhoneNumberHandleForValue:v15 isoCountryCode:v16];

          if (v17)
          {
            id v18 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithHandle:v17];
            swift_unknownObjectRelease();

            unint64_t v5 = a1 & 0xC000000000000001;
            if (v18)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          else
          {
            swift_unknownObjectRelease();
            unint64_t v5 = a1 & 0xC000000000000001;
          }
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease_n();
LABEL_7:
      if (v2 == ++v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        uint64_t v20 = &selRef_previouslyFocusedItem;
        while (1)
        {
          if (v5) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_unknownObjectRetain();
          }
          id v21 = [(id)swift_unknownObjectRetain() v20[41]];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v25 = v24;
            swift_unknownObjectRelease();

            uint64_t v26 = HIBYTE(v25) & 0xF;
            if ((v25 & 0x2000000000000000) == 0) {
              uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
            }
            if (!v26)
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
            id v27 = [(id)swift_unknownObjectRetain() receiverISOCountryCode];
            if (v27)
            {
              v28 = v27;
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              swift_unknownObjectRelease();

              v29 = self;
              NSString v30 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              NSString v31 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              id v32 = [v29 normalizedPhoneNumberHandleForValue:v30 isoCountryCode:v31];

              if (v32)
              {
                id v33 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithHandle:v32];
                swift_unknownObjectRelease();

                unint64_t v5 = a1 & 0xC000000000000001;
                uint64_t v20 = &selRef_previouslyFocusedItem;
                if (v33)
                {
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  }
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
              }
              else
              {
                swift_unknownObjectRelease();
                unint64_t v5 = a1 & 0xC000000000000001;
                uint64_t v20 = &selRef_previouslyFocusedItem;
              }
              goto LABEL_26;
            }
            swift_bridgeObjectRelease();
          }
          swift_unknownObjectRelease_n();
LABEL_26:
          if (v2 == ++v19) {
            goto LABEL_44;
          }
        }
      }
    }
  }
  __break(1u);
  return result;
}

id @objc FTMessage.senderDestinationID.getter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_retain();
  a3();
  uint64_t v5 = v4;
  swift_release();
  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }

  return v6;
}

uint64_t FTMessage.senderDestinationID.getter(SEL *a1)
{
  if (dispatch thunk of Message.isFromUnknown.getter()) {
    return 0;
  }
  dispatch thunk of Message.from.getter();
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 normalizedHandleWithDestinationID:v3];

  if (!v4) {
    return 0;
  }
  id v5 = [v4 *a1];
  if (!v5)
  {

    return 0;
  }
  NSString v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t FTMessage.senderDestinationID.getter()
{
  return FTMessage.senderDestinationID.getter((SEL *)&selRef_normalizedValue);
}

uint64_t FTMessage.receiverDestinationID.getter(SEL *a1)
{
  dispatch thunk of Message.recipient.getter();
  if (!v2) {
    return 0;
  }
  NSString v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 normalizedHandleWithDestinationID:v4];

  if (!v5) {
    return 0;
  }
  id v6 = [v5 *a1];
  if (!v6)
  {

    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

uint64_t FTMessage.receiverDestinationID.getter()
{
  return FTMessage.receiverDestinationID.getter((SEL *)&selRef_normalizedValue);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    NSString v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    NSString v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  NSString v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  id v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  void *v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    void *v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    unint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    id v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    NSString v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    NSString v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  NSString v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  id v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  void *v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    void *v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    unint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    id v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SearchController] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [TUMetadataDestinationID] and conformance [A], &demangling cache variable for type metadata for [TUMetadataDestinationID]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUMetadataDestinationID]);
          id v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for TUMetadataDestinationID);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SearchController] and conformance [A](&lazy protocol witness table cache variable for type [CSSuggestion] and conformance [A], &demangling cache variable for type metadata for [CSSuggestion]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CSSuggestion]);
          id v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CSSuggestion);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SearchController] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [MessageID] and conformance [A], &demangling cache variable for type metadata for [MessageID]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MessageID]);
          id v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MessageID(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SearchController] and conformance [A](&lazy protocol witness table cache variable for type [NSLayoutConstraint] and conformance [A], &demangling cache variable for type metadata for [NSLayoutConstraint]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSLayoutConstraint]);
          id v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, &demangling cache variable for type metadata for CNKeyDescriptor, &lazy protocol witness table cache variable for type [CNKeyDescriptor] and conformance [A], &demangling cache variable for type metadata for [CNKeyDescriptor], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

void ___defaultContactsKeyDescriptors_block_invoke(id a1)
{
  v4[0] = CNContactPhoneNumbersKey;
  v4[1] = CNContactEmailAddressesKey;
  uint64_t v1 = +[CNContactFormatter descriptorForRequiredKeysForStyle:0];
  v4[2] = v1;
  v4[3] = CNContactSocialProfilesKey;
  uint64_t v2 = +[NSArray arrayWithObjects:v4 count:4];
  NSString v3 = (void *)_defaultContactsKeyDescriptors_keyDescriptors;
  _defaultContactsKeyDescriptors_keyDescriptors = v2;
}

uint64_t ObjC metadata update function for SearchViewController()
{
  return type metadata accessor for SearchViewController(0);
}

uint64_t closure #1 in ApplicationServices.init()()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in ApplicationServicesActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor((unint64_t *)&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, a2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
}

uint64_t partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:), a1);
}

{
  return partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:), a1);
}

{
  return partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:), a1);
}

{
  return partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(a1);
}

{
  return partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  uint64_t result = specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(*(void *)(v1 + 16), *(void *)(v1 + 24));
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t closure #1 in ApplicationServices.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for ApplicationServicesActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor((unint64_t *)&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v5, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in ApplicationServices.init(), v7, v6);
}

id ApplicationServices.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR___MPApplicationServices____lazy_storage___favoritesController] = 0;
  *(void *)&v0[OBJC_IVAR___MPApplicationServices____lazy_storage___voicemailController] = 0;
  *(void *)&v0[OBJC_IVAR___MPApplicationServices____lazy_storage___accountManager] = 0;
  uint64_t v4 = (uint64_t *)&v0[OBJC_IVAR___MPApplicationServices_voicemailManager];
  type metadata accessor for MessageStoreController();
  uint64_t v5 = v0;
  uint64_t v6 = static MessageStoreController.shared.getter();
  type metadata accessor for FaceTimeVoicemailManager(0);
  uint64_t v7 = swift_allocObject();
  uint64_t *v4 = specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)((uint64_t)closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager, 0, v6, v7);
  v4[1] = (uint64_t)&protocol witness table for FaceTimeVoicemailManager;
  *(void *)&v5[OBJC_IVAR___MPApplicationServices____lazy_storage___badgeCalculator] = 0;

  uint64_t v8 = (objc_class *)type metadata accessor for ApplicationServices();
  v17.receiver = v5;
  v17.super_class = v8;
  id v9 = [super init];
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
  type metadata accessor for ApplicationServicesActor();
  id v11 = v9;
  uint64_t inited = swift_initStaticObject();
  uint64_t v14 = lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor((unint64_t *)&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v13, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  BOOL v15 = (void *)swift_allocObject();
  v15[2] = inited;
  v15[3] = v14;
  v15[4] = v11;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ApplicationServices.init(), (uint64_t)v15);
  swift_release();

  return v11;
}

uint64_t specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(uint64_t a1, uint64_t a2)
{
  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for ApplicationServicesActor();
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  static GlobalActor.preconditionIsolated(_:file:line:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:);
  *(void *)(v3 + 24) = v7;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(&v8);
  uint64_t v4 = v8;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void v7[5];
  uint64_t v8;

  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for ApplicationServicesActor();
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  static GlobalActor.preconditionIsolated(_:file:line:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:);
  *(void *)(v3 + 24) = v7;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(&v8);
  uint64_t v4 = v8;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void v7[5];
  uint64_t v8;

  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for ApplicationServicesActor();
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  static GlobalActor.preconditionIsolated(_:file:line:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:);
  *(void *)(v3 + 24) = v7;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(&v8);
  uint64_t v4 = v8;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void v7[4];
  long long v8;

  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for ApplicationServicesActor();
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  static GlobalActor.preconditionIsolated(_:file:line:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:);
  *(void *)(v3 + 24) = v7;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(&v8);
  uint64_t v4 = v8;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void v7[5];
  uint64_t v8;

  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for ApplicationServicesActor();
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, v2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  static GlobalActor.preconditionIsolated(_:file:line:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:);
  *(void *)(v3 + 24) = v7;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(&v8);
  uint64_t v4 = v8;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)@<X0>(uint64_t (*a1)(void, void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16), *(void *)(v2 + 24));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t type metadata accessor for ApplicationServicesActor()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)@<X0>(void *a1@<X8>)
{
  return partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void *partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)@<X0>(void *a1@<X8>)
{
  return partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)(a1);
}

{
  uint64_t v1;
  void *result;
  uint64_t v4;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

uint64_t partial apply for closure #1 in ApplicationServices.voicemailController_Objc.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0xA0))();
  *a1 = result;
  return result;
}

id ApplicationServices.voicemailController.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    uint64_t v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id ApplicationServices.voicemailController.getter()
{
  return ApplicationServices.voicemailController.getter(&OBJC_IVAR___MPApplicationServices____lazy_storage___voicemailController, (uint64_t (*)(uint64_t))closure #1 in ApplicationServices.voicemailController.getter);
}

uint64_t partial apply for closure #1 in ApplicationServices.accountManager_objc.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0xC0))();
  *a1 = result;
  return result;
}

id ApplicationServices.accountManager.getter()
{
  uint64_t v1 = OBJC_IVAR___MPApplicationServices____lazy_storage___accountManager;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPApplicationServices____lazy_storage___accountManager);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPApplicationServices____lazy_storage___accountManager);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)VMVoicemailManager) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t type metadata accessor for ApplicationServices()
{
  return self;
}

uint64_t partial apply for closure #1 in ApplicationServices.favoritesController_Objc.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0x80))();
  *a1 = result;
  return result;
}

id ApplicationServices.favoritesController.getter()
{
  uint64_t v1 = OBJC_IVAR___MPApplicationServices____lazy_storage___favoritesController;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___MPApplicationServices____lazy_storage___favoritesController];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR___MPApplicationServices____lazy_storage___favoritesController];
  }
  else
  {
    id v4 = [v0 contactStore];
    id v5 = [objc_allocWithZone((Class)TPFavoritesController) initWithContactStore:v4 prefetchCount:12];

    id v6 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

void sub_10001B66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t closure #1 in CachedVoicemailManager.fetchMessages()()
{
  uint64_t v9 = v0;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = specialized CachedVoicemailManager.Cache.__allocating_init(voicemails:shouldSort:)(*(void *)(v0 + 120), (void *)1);
  *(void *)(v1 + 16) = v2 | 0x4000000000000000;
  swift_retain();
  swift_release();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x73654D6863746566, 0xEF29287365676173, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CachedVoicemailManager: %s returning cache from a task", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  **(void **)(v0 + 56) = v2;
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t Strong;
  void *v6;
  uint64_t (*v7)(void);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = v0;
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 88) = __swift_project_value_buffer(v1, (uint64_t)static Logger.mobilePhone);
  uint64_t v2 = Logger.logObject.getter();
  id v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x73654D6863746566, 0xEF29287365676173, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CachedVoicemailManager: %s inside of a task", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(void *)(v0 + 96) = Strong;
  if (Strong)
  {
    id v12 = (uint64_t (*)(void))(*(void *)(*(void *)Strong + 144) + **(int **)(*(void *)Strong + 144));
    id v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v6;
    void *v6 = v0;
    v6[1] = closure #1 in CachedVoicemailManager.fetchMessages();
    id v7 = v12;
  }
  else
  {
    type metadata accessor for CachedVoicemailManager.Cache();
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)((uint64_t)_swiftEmptyArrayStorage);
    v9[3] = v10;
    v9[4] = v11;
    **(void **)(v0 + 56) = v9;
    id v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  type metadata accessor for CachedVoicemailManager.Cache();
  uint64_t v1 = (void *)swift_allocObject();
  v1[2] = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)((uint64_t)_swiftEmptyArrayStorage);
  v1[3] = v2;
  v1[4] = v3;
  swift_errorRelease();
  swift_release();
  **(void **)(v0 + 56) = v1;
  os_log_type_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t specialized CachedVoicemailManager.Cache.__allocating_init(voicemails:shouldSort:)(unint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 >> 62)
  {
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    char v96 = (char)v3;
    if (v5) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    id v7 = _swiftEmptyArrayStorage;
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  char v96 = (char)a2;
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  v100[0] = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    swift_once();
    goto LABEL_51;
  }
  uint64_t v6 = 0;
  id v7 = (void *)v100[0];
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v8 = *(void **)(a1 + 8 * v6 + 32);
      swift_unknownObjectRetain();
    }
    id v9 = [v8 identifier];
    v100[0] = (uint64_t)v7;
    unint64_t v11 = v7[2];
    unint64_t v10 = v7[3];
    if (v11 >= v10 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      id v7 = (void *)v100[0];
    }
    ++v6;
    v7[2] = v11 + 1;
    id v12 = &v7[2 * v11];
    v12[4] = v9;
    v12[5] = v8;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
LABEL_14:
  id v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = v7[2];
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t)(v7 + 5);
    v97 = v7;
    while (1)
    {
      uint64_t v2 = *(void *)v5;
      uint64_t v15 = v3[2];
      id v16 = *(id *)(v5 - 8);
      objc_super v17 = v16;
      if (v15)
      {
        id v18 = v16;
        swift_unknownObjectRetain_n();
        id v19 = v18;
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
        if (v21)
        {
          uint64_t v22 = *(void *)(v3[7] + 8 * v20);
          swift_bridgeObjectRetain();

          v100[0] = v22;
          swift_unknownObjectRetain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v100[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v100[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v23 = v100[0];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v99 = v3;
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
          uint64_t v27 = v3[2];
          BOOL v28 = (v25 & 1) == 0;
          uint64_t v29 = v27 + v28;
          if (__OFADD__(v27, v28)) {
            goto LABEL_75;
          }
          char v30 = v25;
          if (v3[3] >= v29)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v33 = 8 * v26;
              if ((v25 & 1) == 0) {
                goto LABEL_45;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              id v3 = v99;
              uint64_t v33 = 8 * v26;
              if ((v30 & 1) == 0) {
                goto LABEL_45;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
            id v3 = v99;
            unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
            if ((v30 & 1) != (v32 & 1)) {
              goto LABEL_81;
            }
            unint64_t v26 = v31;
            uint64_t v33 = 8 * v31;
            if ((v30 & 1) == 0)
            {
LABEL_45:
              v3[(v26 >> 6) + 8] |= 1 << v26;
              *(void *)(v3[6] + v33) = v19;
              *(void *)(v3[7] + v33) = v23;
              uint64_t v53 = v3[2];
              BOOL v49 = __OFADD__(v53, 1);
              uint64_t v54 = v53 + 1;
              if (v49) {
                goto LABEL_76;
              }
              v3[2] = v54;
              id v55 = v19;
              goto LABEL_47;
            }
          }
          uint64_t v52 = v3[7];
          swift_bridgeObjectRelease();
          *(void *)(v52 + v33) = v100[0];
LABEL_47:
          swift_bridgeObjectRelease();

          goto LABEL_18;
        }
      }
      else
      {
        swift_unknownObjectRetain_n();
        id v34 = v17;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1002053A0;
      *(void *)(v35 + 32) = v2;
      v100[0] = v35;
      specialized Array._endMutation()();
      uint64_t v36 = v100[0];
      id v37 = v17;
      swift_unknownObjectRetain();
      char v38 = swift_isUniquelyReferenced_nonNull_native();
      v100[0] = (uint64_t)v3;
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37);
      uint64_t v41 = v3[2];
      BOOL v42 = (v39 & 1) == 0;
      uint64_t v43 = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      char v44 = v39;
      if (v3[3] >= v43)
      {
        if (v38)
        {
          if ((v39 & 1) == 0) {
            goto LABEL_37;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          id v3 = (void *)v100[0];
          if ((v44 & 1) == 0) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v38);
        id v3 = (void *)v100[0];
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37);
        if ((v44 & 1) != (v46 & 1))
        {
LABEL_81:
          type metadata accessor for MessageID(0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_82:
          swift_release();
          swift_release();
          swift_release();
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        unint64_t v40 = v45;
        if ((v44 & 1) == 0)
        {
LABEL_37:
          v3[(v40 >> 6) + 8] |= 1 << v40;
          uint64_t v47 = 8 * v40;
          *(void *)(v3[6] + v47) = v37;
          *(void *)(v3[7] + v47) = v36;
          uint64_t v48 = v3[2];
          BOOL v49 = __OFADD__(v48, 1);
          uint64_t v50 = v48 + 1;
          if (v49) {
            goto LABEL_74;
          }
          v3[2] = v50;
          id v51 = v37;
          goto LABEL_17;
        }
      }
      uint64_t v14 = v3[7];
      swift_bridgeObjectRelease();
      *(void *)(v14 + 8 * v40) = v36;
LABEL_17:
      swift_bridgeObjectRelease();

LABEL_18:
      swift_unknownObjectRelease_n();
      id v7 = v97;
      v5 += 16;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v5 = 0;
  specialized Sequence.compactMap<A>(_:)((uint64_t)v3);
  uint64_t v2 = v56;
  if (!*(void *)(v56 + 16))
  {
    v74 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1) {
      goto LABEL_62;
    }
    goto LABEL_80;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1) {
    goto LABEL_78;
  }
LABEL_51:
  uint64_t v57 = type metadata accessor for Logger();
  __swift_project_value_buffer(v57, (uint64_t)logger);
  swift_bridgeObjectRetain_n();
  v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v98 = v5;
    uint64_t v60 = swift_slowAlloc();
    v100[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 136315394;
    int64_t v61 = *(void *)(v2 + 16);
    if (v61)
    {
      v99 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      v62 = (void **)(v2 + 32);
      int64_t v63 = v61;
      do
      {
        v64 = *v62;
        v62 += 2;
        id v65 = v64;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v63;
      }
      while (v63);
    }
    type metadata accessor for MessageID(0);
    uint64_t v66 = Array.description.getter();
    unint64_t v68 = v67;
    swift_bridgeObjectRelease();
    v99 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v60 + 12) = 2080;
    if (v61)
    {
      v95 = v58;
      v99 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
      v69 = _swiftEmptyArrayStorage;
      unint64_t v70 = _swiftEmptyArrayStorage[2];
      v71 = (uint64_t *)(v2 + 40);
      do
      {
        uint64_t v72 = *v71;
        v99 = v69;
        unint64_t v73 = v69[3];
        swift_bridgeObjectRetain();
        if (v70 >= v73 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v70 + 1, 1);
          v69 = v99;
        }
        v69[2] = v70 + 1;
        v69[v70 + 4] = v72;
        v71 += 2;
        ++v70;
        --v61;
      }
      while (v61);
      v58 = v95;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Message]);
    uint64_t v80 = Array.description.getter();
    unint64_t v82 = v81;
    swift_bridgeObjectRelease();
    v99 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "CachedVoicemailManager.Cache.init(voicemails:) with duplicate keys: %s, voicemails: %s", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = v98;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v79 = specialized Sequence.compactMap<A>(_:)((uint64_t)v3);
  swift_bridgeObjectRelease();
  while (1)
  {
    uint64_t v83 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v79);
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    swift_bridgeObjectRelease();
    type metadata accessor for CachedVoicemailManager.Cache();
    v88 = (uint64_t *)swift_allocObject();
    v88[2] = v83;
    v88[3] = v85;
    v88[4] = v87;
    if ((v96 & 1) == 0) {
      return (uint64_t)v88;
    }
    swift_beginAccess();
    uint64_t v90 = v88[2];
    uint64_t v89 = v88[3];
    uint64_t v91 = v88[4];
    swift_retain();
    swift_retain();
    swift_retain();
    specialized _copySequenceToContiguousArray<A>(_:)(v90, v89, v91);
    v99 = v92;
    specialized MutableCollection<>.sort(by:)(&v99, (uint64_t (*)(uint64_t *, uint64_t *, void **, uint64_t *))closure #1 in CachedVoicemailManager.Cache.sort());
    if (v5) {
      goto LABEL_82;
    }
    swift_release();
    swift_release();
    swift_release();
    v74 = v99;
    uint64_t v93 = v99[2];
    if (v93 == *(void *)(v91 + 16))
    {
      specialized closure #1 in OrderedDictionary.sort(by:)((uint64_t)(v99 + 4), v93, v88 + 2);
      swift_release();
      swift_endAccess();
      return (uint64_t)v88;
    }
    __break(1u);
LABEL_80:
    swift_once();
LABEL_62:
    uint64_t v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)logger);
    v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "CachedVoicemailManager.Cache.init(voicemails:) without duplicate keys", v78, 2u);
      swift_slowDealloc();
    }

    uint64_t v79 = (uint64_t)v74;
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (void (*)(void))type metadata accessor for MessageID);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for TPTipsHelper.Entry.Kind();
  lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName((unint64_t *)&lazy protocol witness table cache variable for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind, (void (*)(uint64_t))&type metadata accessor for TPTipsHelper.Entry.Kind);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (void (*)(void))type metadata accessor for CHHandle);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    a3(0);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t type metadata accessor for MessageID(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for MessageID);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MessageID, [Message]>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    unint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    unint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v25 = 0;
      char v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        BOOL v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  BOOL v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  unint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    int64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      uint64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      int64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        char v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            int64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    unint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    id v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    id v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, NSDate>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    if (v10 < 64) {
      int64_t v11 = ~(-1 << v10);
    }
    else {
      int64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    unint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = v3;
    id v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v33);
              }
              else {
                *uint64_t v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v12 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      BOOL v28 = *(void **)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        uint64_t v29 = v28;
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          int64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          char v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, [String : NSObject]>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    uint64_t v30 = v10;
    if (v10 < 64) {
      int64_t v11 = ~(-1 << v10);
    }
    else {
      int64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v5 + 64);
    unint64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          uint64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if (a2)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  *uint64_t v9 = v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v12 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      BOOL v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          int64_t v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          char v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  long long v38;
  long long v39;
  uint64_t v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    unint64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      uint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            uint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    int64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      char v26 = *(_OWORD *)v25;
      unint64_t v27 = *(_OWORD *)(v25 + 16);
      unint64_t v40 = *(void *)(v25 + 32);
      char v38 = v26;
      char v39 = v27;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    BOOL v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        id v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      uint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    unint64_t v17 = v38;
    unint64_t v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t type metadata accessor for CachedVoicemailManager.Cache()
{
  return self;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (!v3)
  {
    unint64_t v10 = &_swiftEmptyArrayStorage[2];
    unint64_t v20 = _swiftEmptyArrayStorage[3];
    a2 = v20 >> 1;
    if (v20 < 2) {
      return;
    }
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: MessageID, value: Message)>);
  uint64_t v6 = (unint64_t *)swift_allocObject();
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 17;
  }
  uint64_t v9 = v8 >> 4;
  v6[2] = v3;
  unint64_t v10 = v6 + 2;
  v6[3] = 2 * v9;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(a2 + 32);
    uint64_t v13 = (uint64_t *)(a3 + 32);
    unint64_t v14 = v3 - 1;
    a2 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v15 = 4;
    while (1)
    {
      unint64_t v16 = (uint64_t *)&v6[v15];
      uint64_t v9 = *v12;
      uint64_t v17 = *v13;
      *unint64_t v16 = *v12;
      v16[1] = v17;
      if (!v14) {
        break;
      }
      id v18 = (id)v9;
      swift_unknownObjectRetain();
      ++v12;
      ++v13;
      --v14;
      v15 += 2;
      --a2;
      if (!--v11) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    __break(1u);
  }
  id v19 = (id)v9;
  swift_unknownObjectRetain();
  unint64_t v20 = v6[3];
  if (v20 >= 2)
  {
LABEL_12:
    unint64_t v21 = v20 >> 1;
    BOOL v22 = __OFSUB__(v21, a2);
    unint64_t v23 = v21 - a2;
    if (v22) {
      __break(1u);
    }
    else {
      *unint64_t v10 = v23;
    }
  }
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(MessageID, Message)>, &demangling cache variable for type metadata for (MessageID, Message));
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v11 < v6)
    {
      unint64_t v12 = *(void *)(v2 + 8 * v11);
      ++v7;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 2;
      if (v11 + 2 >= v6) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v7 = v11 + 3;
      if (v11 + 3 >= v6) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (v12)
      {
LABEL_22:
        unint64_t v5 = (v12 - 1) & v12;
        for (unint64_t i = __clz(__rbit64(v12)) + (v7 << 6); ; unint64_t i = v9 | (v7 << 6))
        {
          uint64_t v14 = 8 * i;
          uint64_t v15 = *(void **)(*(void *)(a1 + 48) + v14);
          unint64_t v16 = *(void *)(*(void *)(a1 + 56) + v14);
          if (v16 >> 62)
          {
            swift_bridgeObjectRetain_n();
            id v24 = v15;
            uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v25 < 2)
            {
LABEL_5:
              swift_bridgeObjectRelease();

              if (!v5) {
                goto LABEL_7;
              }
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            id v18 = v15;
            if (v17 < 2) {
              goto LABEL_5;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          }
          id v19 = v8;
          unint64_t v20 = v8[2];
          unint64_t v21 = v19;
          unint64_t v22 = v19[3];
          if (v20 >= v22 >> 1) {
            unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v20 + 1, 1, v21);
          }
          v21[2] = v20 + 1;
          unint64_t v23 = &v21[2 * v20];
          uint64_t v8 = v21;
          v23[4] = v15;
          v23[5] = v16;
          if (!v5) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v9 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v13 = v11 + 4;
      if (v13 < v6)
      {
        unint64_t v12 = *(void *)(v2 + 8 * v13);
        if (v12)
        {
          int64_t v7 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v7 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_35;
          }
          if (v7 >= v6) {
            break;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v7);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_33:
    swift_release();
    return;
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    char v26 = v28;
    uint64_t v3 = v29;
    uint64_t v2 = v30;
    uint64_t v4 = v31;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    char v26 = a1 + 56;
    uint64_t v3 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  unint64_t v23 = v3;
  uint64_t v25 = (unint64_t)(v3 + 64) >> 6;
  id v24 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v8 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    int64_t v11 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    uint64_t v15 = [v11 normalizedValue:v23];
    if (v15)
    {
      unint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v19 = v18;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      unint64_t v21 = v24[2];
      unint64_t v20 = v24[3];
      if (v21 >= v20 >> 1) {
        id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v24);
      }
      v24[2] = v21 + 1;
      unint64_t v22 = &v24[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    int64_t v10 = v9 | (v2 << 6);
LABEL_30:
    int64_t v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  unint64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v25) {
      goto LABEL_38;
    }
    int64_t v13 = *(void *)(v26 + 8 * v12);
    ++v2;
    if (!v13)
    {
      uint64_t v2 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_38;
      }
      int64_t v13 = *(void *)(v26 + 8 * v2);
      if (!v13)
      {
        uint64_t v2 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_38;
        }
        int64_t v13 = *(void *)(v26 + 8 * v2);
        if (!v13)
        {
          uint64_t v2 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_38;
          }
          int64_t v13 = *(void *)(v26 + 8 * v2);
          if (!v13)
          {
            uint64_t v2 = v8 + 5;
            if (v8 + 5 >= v25) {
              goto LABEL_38;
            }
            int64_t v13 = *(void *)(v26 + 8 * v2);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v25 != v14)
              {
                int64_t v13 = *(void *)(v26 + 8 * v14++);
                if (v13)
                {
                  uint64_t v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of Set<CHHandle>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v4 = (v13 - 1) & v13;
    int64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  id v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  id v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    id v19 = v22;
    uint64_t v2 = v23;
    uint64_t v3 = v24;
    uint64_t v4 = v25;
  }
  else
  {
    unint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    id v19 = a1 + 56;
    uint64_t v2 = ~v5;
    int64_t v6 = -v5;
    if (v6 < 64) {
      int64_t v7 = ~(-1 << v6);
    }
    else {
      int64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  id v18 = v2;
  uint64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v12 = v20;
    swift_unknownObjectRelease();
    int64_t v11 = v3;
    unint64_t v9 = v4;
    if (!v20) {
      goto LABEL_36;
    }
LABEL_26:
    uint64_t v15 = [v12 normalizedValue];
    unint64_t v16 = (id)TUHandleForIDSCanonicalAddress();

    uint64_t v3 = v11;
    uint64_t v4 = v9;
    if (v16)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v3 = v11;
      uint64_t v4 = v9;
    }
  }
  if (v4)
  {
    unint64_t v9 = (v4 - 1) & v4;
    int64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v11 = v3;
LABEL_25:
    unint64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  int64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v8) {
      goto LABEL_36;
    }
    int64_t v13 = *(void *)(v19 + 8 * v11);
    if (!v13)
    {
      uint64_t v14 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_36;
      }
      int64_t v13 = *(void *)(v19 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v14 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_36;
      }
      int64_t v13 = *(void *)(v19 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      uint64_t v14 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_36;
      }
      int64_t v13 = *(void *)(v19 + 8 * v14);
      if (v13)
      {
LABEL_23:
        int64_t v11 = v14;
      }
      else
      {
        int64_t v11 = v3 + 5;
        if (v3 + 5 >= v8) {
          goto LABEL_36;
        }
        int64_t v13 = *(void *)(v19 + 8 * v11);
        if (!v13)
        {
          uint64_t v17 = v3 + 6;
          while (v8 != v17)
          {
            int64_t v13 = *(void *)(v19 + 8 * v17++);
            if (v13)
            {
              int64_t v11 = v17 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          outlined consume of Set<CHHandle>.Iterator._Variant();
          return;
        }
      }
    }
LABEL_24:
    unint64_t v9 = (v13 - 1) & v13;
    int64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

void specialized MutableCollection<>.sort(by:)(void **a1, uint64_t (*a2)(uint64_t *, uint64_t *, void **, uint64_t *))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = v4[2];
  v6[0] = (uint64_t)(v4 + 4);
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6, a2);
  *a1 = v4;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t *, uint64_t *, void **, uint64_t *))
{
  uint64_t v3 = v2;
  Swift::Int v5 = a1[1];
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_138;
    }
    if (v5) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
    }
    return;
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_147;
  }
  Swift::Int v118 = v5;
  Swift::Int v114 = v6;
  v110 = a1;
  if (v5 < 2)
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
    __dst = (void **)&_swiftEmptyArrayStorage[4];
    v115 = _swiftEmptyArrayStorage;
    if (v5 != 1)
    {
      unint64_t v41 = _swiftEmptyArrayStorage[2];
      goto LABEL_102;
    }
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: MessageID, value: Message));
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v8;
    v115 = (void *)v9;
    __dst = (void **)(v9 + 32);
  }
  Swift::Int v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v111 = *a1 + 40;
  uint64_t v109 = *a1 - 16;
  int64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v13 = v118;
  uint64_t v122 = *a1;
  while (1)
  {
    Swift::Int v14 = v11;
    Swift::Int v15 = v11 + 1;
    if (v11 + 1 < v13)
    {
      v116 = v10;
      uint64_t v16 = v12 + 16 * v15;
      uint64_t v17 = *(void **)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t v19 = v12 + 16 * v14;
      unint64_t v20 = *(void **)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      id v127 = v17;
      v125 = v20;
      v126[0] = v18;
      uint64_t v124 = v21;
      id v22 = v17;
      swift_unknownObjectRetain();
      id v23 = v20;
      swift_unknownObjectRetain();
      int v24 = a2((uint64_t *)&v127, v126, &v125, &v124);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
LABEL_116:
        v115[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
      int v25 = v24;
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      Swift::Int v15 = v14 + 2;
      if (v14 + 2 < v118)
      {
        Swift::Int v112 = v14;
        char v26 = (uint64_t *)(v111 + 16 * v14);
        while (1)
        {
          Swift::Int v27 = v15;
          uint64_t v28 = *v26;
          uint64_t v29 = (void *)*(v26 - 3);
          uint64_t v30 = *(v26 - 2);
          id v127 = (id)*(v26 - 1);
          v125 = v29;
          v126[0] = v28;
          uint64_t v124 = v30;
          id v31 = v127;
          swift_unknownObjectRetain();
          id v32 = v29;
          swift_unknownObjectRetain();
          LODWORD(v29) = a2((uint64_t *)&v127, v126, &v125, &v124);
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          if ((v25 ^ v29)) {
            break;
          }
          Swift::Int v15 = v27 + 1;
          v26 += 2;
          if (v118 == v27 + 1)
          {
            Swift::Int v15 = v118;
            goto LABEL_21;
          }
        }
        Swift::Int v15 = v27;
LABEL_21:
        Swift::Int v14 = v112;
      }
      uint64_t v12 = v122;
      if (v25)
      {
        int64_t v10 = v116;
        if (v15 < v14) {
          goto LABEL_142;
        }
        if (v14 < v15)
        {
          id v33 = (long long *)(v109 + 16 * v15);
          Swift::Int v34 = v15;
          Swift::Int v35 = v14;
          uint64_t v36 = (long long *)(v122 + 16 * v14);
          do
          {
            if (v35 != --v34)
            {
              if (!v122) {
                goto LABEL_145;
              }
              long long v37 = *v36;
              *uint64_t v36 = *v33;
              *id v33 = v37;
            }
            ++v35;
            --v33;
            ++v36;
          }
          while (v35 < v34);
        }
      }
      else
      {
        int64_t v10 = v116;
      }
    }
    if (v15 >= v118) {
      goto LABEL_40;
    }
    if (__OFSUB__(v15, v14)) {
      goto LABEL_139;
    }
    if (v15 - v14 >= v114)
    {
LABEL_40:
      if (v15 < v14) {
        goto LABEL_137;
      }
      goto LABEL_41;
    }
    if (__OFADD__(v14, v114)) {
      goto LABEL_140;
    }
    Swift::Int v38 = v118;
    if (v14 + v114 < v118) {
      Swift::Int v38 = v14 + v114;
    }
    if (v38 < v14) {
      break;
    }
    if (v15 == v38) {
      goto LABEL_40;
    }
    uint64_t v120 = v3;
    v117 = v10;
    uint64_t v89 = v109 + 16 * v15;
    Swift::Int v113 = v14;
    Swift::Int v107 = v38;
    do
    {
      long long v90 = *(_OWORD *)(v12 + 16 * v15);
      Swift::Int v91 = v14;
      uint64_t v108 = v89;
      uint64_t v92 = v89;
      while (1)
      {
        Swift::Int v93 = v15;
        v94 = *(void **)v92;
        uint64_t v95 = *(void *)(v92 + 8);
        v126[0] = *((void *)&v90 + 1);
        id v127 = (id)v90;
        uint64_t v124 = v95;
        v125 = v94;
        id v96 = (id)v90;
        swift_unknownObjectRetain();
        id v97 = v94;
        swift_unknownObjectRetain();
        char v98 = a2((uint64_t *)&v127, v126, &v125, &v124);
        if (v120)
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          goto LABEL_116;
        }
        char v99 = v98;
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        if ((v99 & 1) == 0) {
          break;
        }
        uint64_t v12 = v122;
        if (!v122) {
          goto LABEL_144;
        }
        Swift::Int v15 = v93;
        long long v90 = *(_OWORD *)(v92 + 16);
        *(_OWORD *)(v92 + 16) = *(_OWORD *)v92;
        *(_OWORD *)uint64_t v92 = v90;
        v92 -= 16;
        if (v93 == ++v91) {
          goto LABEL_98;
        }
      }
      uint64_t v12 = v122;
      Swift::Int v15 = v93;
LABEL_98:
      ++v15;
      uint64_t v89 = v108 + 16;
      Swift::Int v14 = v113;
    }
    while (v15 != v107);
    Swift::Int v15 = v107;
    int64_t v10 = v117;
    uint64_t v3 = 0;
    if (v107 < v113) {
      goto LABEL_137;
    }
LABEL_41:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v40 = *((void *)v10 + 2);
    unint64_t v39 = *((void *)v10 + 3);
    unint64_t v41 = v40 + 1;
    uint64_t v12 = v122;
    Swift::Int v119 = v15;
    if (v40 >= v39 >> 1)
    {
      v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v10);
      uint64_t v12 = v122;
      int64_t v10 = v100;
    }
    *((void *)v10 + 2) = v41;
    BOOL v42 = v10 + 32;
    uint64_t v43 = &v10[16 * v40 + 32];
    *(void *)uint64_t v43 = v14;
    *((void *)v43 + 1) = v119;
    if (v40)
    {
LABEL_46:
      unint64_t v44 = v41 - 1;
      if (v41 >= 4)
      {
        BOOL v49 = &v42[16 * v41];
        uint64_t v50 = *((void *)v49 - 8);
        uint64_t v51 = *((void *)v49 - 7);
        BOOL v55 = __OFSUB__(v51, v50);
        uint64_t v52 = v51 - v50;
        if (v55) {
          goto LABEL_122;
        }
        uint64_t v54 = *((void *)v49 - 6);
        uint64_t v53 = *((void *)v49 - 5);
        BOOL v55 = __OFSUB__(v53, v54);
        uint64_t v47 = v53 - v54;
        char v48 = v55;
        if (v55) {
          goto LABEL_123;
        }
        unint64_t v56 = v41 - 2;
        uint64_t v57 = &v42[16 * v41 - 32];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v55 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v55) {
          goto LABEL_125;
        }
        BOOL v55 = __OFADD__(v47, v60);
        uint64_t v61 = v47 + v60;
        if (v55) {
          goto LABEL_128;
        }
        if (v61 >= v52)
        {
          uint64_t v79 = &v42[16 * v44];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v55 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v55) {
            goto LABEL_132;
          }
          BOOL v72 = v47 < v82;
        }
        else
        {
LABEL_59:
          if (v48) {
            goto LABEL_124;
          }
          unint64_t v56 = v41 - 2;
          v62 = &v42[16 * v41 - 32];
          uint64_t v64 = *(void *)v62;
          uint64_t v63 = *((void *)v62 + 1);
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v66 = v63 - v64;
          char v67 = v65;
          if (v65) {
            goto LABEL_127;
          }
          unint64_t v68 = &v42[16 * v44];
          uint64_t v70 = *(void *)v68;
          uint64_t v69 = *((void *)v68 + 1);
          BOOL v55 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          if (v55) {
            goto LABEL_130;
          }
          if (__OFADD__(v66, v71)) {
            goto LABEL_131;
          }
          if (v66 + v71 < v47) {
            goto LABEL_71;
          }
          BOOL v72 = v47 < v71;
        }
        if (v72) {
          unint64_t v44 = v56;
        }
      }
      else
      {
        if (v41 == 3)
        {
          uint64_t v46 = *((void *)v10 + 4);
          uint64_t v45 = *((void *)v10 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
          goto LABEL_59;
        }
        uint64_t v73 = *((void *)v10 + 4);
        uint64_t v74 = *((void *)v10 + 5);
        BOOL v55 = __OFSUB__(v74, v73);
        uint64_t v66 = v74 - v73;
        char v67 = v55;
LABEL_71:
        if (v67) {
          goto LABEL_126;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_129;
        }
        if (v78 < v66) {
          goto LABEL_88;
        }
      }
      unint64_t v83 = v44 - 1;
      if (v44 - 1 >= v41)
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        break;
      }
      if (!v12) {
        goto LABEL_143;
      }
      uint64_t v84 = &v42[16 * v83];
      uint64_t v85 = *(void *)v84;
      uint64_t v86 = &v42[16 * v44];
      uint64_t v87 = *((void *)v86 + 1);
      specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v12 + 16 * *(void *)v84), (void **)(v12 + 16 * *(void *)v86), v12 + 16 * v87, __dst, (uint64_t (*)(void **, void **, void **, uint64_t *))a2);
      if (v3) {
        goto LABEL_113;
      }
      if (v87 < v85) {
        goto LABEL_119;
      }
      if (v44 > *((void *)v10 + 2)) {
        goto LABEL_120;
      }
      *(void *)uint64_t v84 = v85;
      *(void *)&v42[16 * v83 + 8] = v87;
      unint64_t v88 = *((void *)v10 + 2);
      if (v44 >= v88) {
        goto LABEL_121;
      }
      unint64_t v41 = v88 - 1;
      memmove(&v42[16 * v44], v86 + 16, 16 * (v88 - 1 - v44));
      *((void *)v10 + 2) = v88 - 1;
      uint64_t v12 = v122;
      if (v88 <= 2) {
        goto LABEL_88;
      }
      goto LABEL_46;
    }
    unint64_t v41 = 1;
LABEL_88:
    Swift::Int v13 = v118;
    Swift::Int v11 = v119;
    if (v119 >= v118)
    {
LABEL_102:
      if (v41 >= 2)
      {
        uint64_t v101 = *v110;
        do
        {
          unint64_t v102 = v41 - 2;
          if (v41 < 2) {
            goto LABEL_133;
          }
          if (!v101) {
            goto LABEL_146;
          }
          uint64_t v103 = *(void *)&v10[16 * v102 + 32];
          uint64_t v104 = *(void *)&v10[16 * v41 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v101 + 16 * v103), (void **)(v101 + 16 * *(void *)&v10[16 * v41 + 16]), v101 + 16 * v104, __dst, (uint64_t (*)(void **, void **, void **, uint64_t *))a2);
          if (v3) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          if (v102 >= *((void *)v10 + 2)) {
            goto LABEL_135;
          }
          v105 = &v10[16 * v102 + 32];
          *(void *)v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v10 + 2);
          if (v41 > v106) {
            goto LABEL_136;
          }
          memmove(&v10[16 * v41 + 16], &v10[16 * v41 + 32], 16 * (v106 - v41));
          *((void *)v10 + 2) = v106 - 1;
          unint64_t v41 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      goto LABEL_116;
    }
  }
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MessageID, [Message]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (NSAttributedStringKey, Any));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    id v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    char v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    char *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    Swift::Int v13 = __OFADD__(v12, 1);
    Swift::Int v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    id v6 = *(v4 - 2);
    char v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    char *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    Swift::Int v13 = v2[2];
    Swift::Int v14 = __OFADD__(v13, 1);
    Swift::Int v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    char v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    char *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    Swift::Int v13 = __OFADD__(v12, 1);
    Swift::Int v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CHHandle, CNContact>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    uint64_t v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    BOOL v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    Swift::Int v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  id v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    uint64_t v10 = v15[0];
    BOOL v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    Swift::Int v13 = __OFADD__(v12, 1);
    Swift::Int v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MobilePhoneAppDeepLinks, DisplayRepresentation));
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (unsigned __int8 *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MobilePhoneAppDeepLinks, DisplayRepresentation>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  char v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  BOOL v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  Swift::Int v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (MobilePhoneAppDeepLinks, DisplayRepresentation));
    Swift::Int v14 = *v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = type metadata accessor for DisplayRepresentation();
    unint64_t result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    unint64_t v20 = v7[2];
    uint64_t v21 = __OFADD__(v20, 1);
    id v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MobilePhoneAppDeepLinks, _EnumURLRepresentation<MobilePhoneAppDeepLinks>.EnumSingleURLRepresentation));
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (unsigned __int8 *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MobilePhoneAppDeepLinks, _EnumURLRepresentation<MobilePhoneAppDeepLinks>.EnumSingleURLRepresentation>);
  id v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  char v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  BOOL v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  Swift::Int v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (MobilePhoneAppDeepLinks, _EnumURLRepresentation<MobilePhoneAppDeepLinks>.EnumSingleURLRepresentation));
    Swift::Int v14 = *v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnumURLRepresentation<MobilePhoneAppDeepLinks>.EnumSingleURLRepresentation);
    unint64_t result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    unint64_t v20 = v7[2];
    uint64_t v21 = __OFADD__(v20, 1);
    id v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  int v4;
  void *v5;
  unint64_t result;
  char v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, NSDate>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    uint64_t v16 = v5;
    return (unint64_t)v3;
  }
  char v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    uint64_t v10 = __OFADD__(v9, 1);
    BOOL v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    uint64_t v4 = *((_DWORD *)v8 - 2);
    Swift::Int v13 = (void *)*v8;
    Swift::Int v14 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    char v8 = v12;
    uint64_t v5 = v13;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  int v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, [String : NSObject]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  char v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    uint64_t v10 = __OFADD__(v9, 1);
    BOOL v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    uint64_t v4 = *((_DWORD *)v8 - 2);
    Swift::Int v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    char v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  specialized _copySequenceToContiguousArray<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr, id *))specialized closure #1 in closure #1 in OrderedDictionary.sort(by:));
  uint64_t v7 = v6;
  uint64_t v8 = MPRTTTranscriptionMessage.confidenceRating.getter();
  uint64_t v9 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v7, 0, 1, v8);
  if (*(void *)(v7 + 16) <= 0xFuLL)
  {
    swift_release();
    uint64_t v9 = 0;
  }
  *a3 = v9;
  a3[1] = v7;
  swift_release();
  swift_release();
  specialized _copySequenceToContiguousArray<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr, id *))specialized closure #2 in closure #1 in OrderedDictionary.sort(by:));
  a3[2] = v10;
  return swift_release();
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, id *))
{
  uint64_t v8 = a2;
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = (void *)swift_allocObject();
    int64_t v10 = _swift_stdlib_malloc_size(v4);
    uint64_t v11 = v10 - 32;
    if (v10 < 32) {
      uint64_t v11 = v10 - 25;
    }
    uint64_t i = v11 >> 3;
    v4[2] = v8;
    v4[3] = (2 * (v11 >> 3)) | 1;
    if (a1) {
      uint64_t v5 = a1 + 16 * v8;
    }
    else {
      uint64_t v5 = 0;
    }
    swift_retain();
    if (!a1) {
      goto LABEL_16;
    }
    uint64_t v6 = (i & 0x7FFFFFFFFFFFFFFFLL) - v8;
    uint64_t v12 = v8 - 1;
    uint64_t v7 = v4 + 5;
    for (uint64_t i = (uint64_t)a3; a1 != v5; a1 += 16)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      id v33 = *(id *)a1;
      uint64_t v34 = v8;
      id v13 = v33;
      swift_unknownObjectRetain();
      a3(&v32, &v33);
      swift_unknownObjectRelease();

      *(v7 - 1) = v32;
      if (!v12) {
        goto LABEL_17;
      }
      --v12;
      ++v7;
    }
    __break(1u);
  }
  if (v8 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = _swiftEmptyArrayStorage[3] >> 1;
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (a1)
  {
    uint64_t i = (uint64_t)a3;
    uint64_t v5 = a1 + 16 * v8;
    swift_retain();
    uint64_t v7 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if (a1 == v5)
      {
        swift_release();
        goto LABEL_35;
      }
      uint64_t v14 = *(void *)(a1 + 8);
      id v33 = *(id *)a1;
      uint64_t v34 = v14;
      id v15 = v33;
      swift_unknownObjectRetain();
      ((void (*)(uint64_t *__return_ptr, id *))i)(&v32, &v33);
      swift_unknownObjectRelease();

      uint64_t v16 = v32;
      if (!v6)
      {
        unint64_t v17 = v4[3];
        if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_40;
        }
        int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
        if (v18 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v18;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        unint64_t v20 = (void *)swift_allocObject();
        int64_t v21 = _swift_stdlib_malloc_size(v20);
        uint64_t v22 = v21 - 32;
        if (v21 < 32) {
          uint64_t v22 = v21 - 25;
        }
        uint64_t v23 = v22 >> 3;
        v20[2] = v19;
        v20[3] = (2 * (v22 >> 3)) | 1;
        unint64_t v24 = (unint64_t)(v20 + 4);
        uint64_t v25 = v4[3] >> 1;
        if (v4[2])
        {
          char v26 = v4 + 4;
          if (v20 != v4 || v24 >= (unint64_t)v26 + 8 * v25) {
            memmove(v20 + 4, v26, 8 * v25);
          }
          v4[2] = 0;
        }
        uint64_t v7 = (void *)(v24 + 8 * v25);
        uint64_t v6 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - v25;
        swift_release();
        uint64_t v4 = v20;
        uint64_t i = (uint64_t)a3;
      }
      BOOL v27 = __OFSUB__(v6--, 1);
      if (v27) {
        break;
      }
      *v7++ = v16;
LABEL_17:
      a1 += 16;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_35:
  unint64_t v28 = v4[3];
  if (v28 >= 2)
  {
    unint64_t v29 = v28 >> 1;
    BOOL v27 = __OFSUB__(v29, v6);
    unint64_t v30 = v29 - v6;
    if (v27)
    {
LABEL_41:
      __break(1u);
      return;
    }
    v4[2] = v30;
  }
}

id specialized closure #1 in closure #1 in OrderedDictionary.sort(by:)@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t specialized closure #2 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_unknownObjectRetain();
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 - 25;
  }
  v7[2] = v3;
  v7[3] = (2 * (v9 >> 3)) | 1;
  int64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v12, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  if (v10 != (void *)v3)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v7;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = result;
  if (!a2)
  {
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_14:
    *uint64_t v7 = a4;
    v7[1] = a5;
    v7[2] = a6;
    v7[3] = v8;
    return (void *)v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a6 + 16);
    if (v9)
    {
      uint64_t v14 = a4;
      uint64_t v15 = a5;
      uint64_t v11 = 0;
      uint64_t v12 = a3 - 1;
      while (1)
      {
        *(void *)(a2 + 8 * v11) = *(void *)(a6 + 32 + 8 * v11);
        if (v12 == v11) {
          break;
        }
        if (v9 - 1 == v11)
        {
          uint64_t v8 = v9;
          break;
        }
        unint64_t v13 = *(void *)(a6 + 16);
        swift_unknownObjectRetain();
        if (++v11 >= v13)
        {
          __break(1u);
          goto LABEL_10;
        }
      }
      swift_unknownObjectRetain();
      a4 = v14;
      a5 = v15;
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = static _HashTable.scale(forCapacity:)();
  uint64_t v9 = 0;
  if (a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = _HashTable.init(scale:reservedScale:)();
    specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v9 + 16, v9 + 32, a1);
  }
  return v9;
}

Swift::Int specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    unint64_t v4 = (Swift::Int *)result;
    uint64_t v5 = 0;
    uint64_t v9 = a3 + 32;
    while (1)
    {
      Swift::Int v6 = *v4;
      id v7 = *(id *)(v9 + 8 * v5);
      uint64_t result = NSObject._rawHashValue(seed:)(v6);
      if (__OFSUB__(1 << *v4, 1)) {
        break;
      }
      uint64_t v8 = _HashTable.UnsafeHandle._startIterator(bucket:)();

      if (v8)
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v5 == v3) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t MPRTTTranscriptionMessage.confidenceRating.getter()
{
  return 0;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  a5(0);
  return swift_task_create();
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)((unint64_t)_swiftEmptyArrayStorage);
    specialized _copyCollectionToContiguousArray<A>(_:)((unint64_t)_swiftEmptyArrayStorage, (uint64_t *)&demangling cache variable for type metadata for Message, (unint64_t *)&lazy protocol witness table cache variable for type [Message] and conformance [A], &demangling cache variable for type metadata for [Message], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
  }
  uint64_t v17 = 0;
  uint64_t v18 = (uint64_t)v2;
  uint64_t v3 = *(void *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = a1 + 40;
    while (1)
    {
      id v6 = *(id *)(v4 - 8);
      swift_unknownObjectRetain();
      uint64_t result = specialized OrderedSet._find(_:)((uint64_t)v6, v17, v18);
      if ((v9 & 1) == 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = v8;
      id v10 = v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v11 = v17;
      unint64_t v12 = *(void *)(v18 + 16);
      if (v17)
      {
        swift_beginAccess();
        if (static _HashTable.maximumCapacity(forScale:)() >= (uint64_t)v12)
        {
          if ((swift_isUniquelyReferenced_native() & 1) == 0)
          {
            uint64_t v16 = _HashTable.copy()();
            swift_release();
            uint64_t v17 = v16;
            uint64_t v11 = v16;
            if (!v16)
            {
              __break(1u);
LABEL_21:
              swift_bridgeObjectRelease();
              return v5;
            }
          }
          _HashTable.UnsafeHandle.subscript.setter();
          uint64_t v5 = v11;
        }
        else
        {
          uint64_t v13 = *(void *)(v17 + 24) & 0x3FLL;
          if (v12 > 0xF || v13)
          {
LABEL_14:
            uint64_t v14 = static _HashTable.scale(forCapacity:)();
            if (v13 <= v14) {
              uint64_t v15 = v14;
            }
            else {
              uint64_t v15 = v13;
            }
            uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v18, v15, 0, v13);
            swift_release();
            uint64_t v17 = v5;
            goto LABEL_6;
          }
          swift_release();
          uint64_t v5 = 0;
          uint64_t v17 = 0;
        }
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v5 = 0;
        if (v12 > 0xF) {
          goto LABEL_14;
        }
      }
LABEL_6:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();

      v4 += 16;
      if (!--v3) {
        goto LABEL_21;
      }
    }
  }
  return 0;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (id *)(a3 + 32);
  uint64_t v5 = *(void *)(a3 + 16);
  if (!a2)
  {
    if (v5)
    {
      type metadata accessor for MessageID(0);
      id v9 = *v4;
      char v10 = static NSObject.== infix(_:_:)();

      if (v10) {
        return 0;
      }
      if (v5 == 1) {
        return 0;
      }
      id v11 = *(id *)(a3 + 40);
      char v12 = static NSObject.== infix(_:_:)();

      if (v12) {
        return 1;
      }
      if (v5 != 2)
      {
        id v14 = *(id *)(a3 + 48);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          return 2;
        }
        if (v5 != 3)
        {
          id v16 = *(id *)(a3 + 56);
          char v17 = static NSObject.== infix(_:_:)();

          if (v17) {
            return 3;
          }
          uint64_t v18 = 0;
          uint64_t v19 = a3 + 64;
          while (v5 - 4 != v18)
          {
            id v20 = *(id *)(v19 + 8 * v18);
            char v21 = static NSObject.== infix(_:_:)();

            ++v18;
            if (v21) {
              return v18 + 3;
            }
          }
          return 0;
        }
      }
    }
    return 0;
  }
  id v6 = (Swift::Int *)(a2 + 16);
  swift_retain();
  Swift::Int v7 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, (uint64_t)v4, v5, v6);
  swift_release();
  return v7;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4)
{
  Swift::Int result = NSObject._rawHashValue(seed:)(*a4);
  if (__OFSUB__(1 << *a4, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    uint64_t v7 = _HashTable.BucketIterator.currentValue.getter();
    if ((v8 & 1) == 0)
    {
      type metadata accessor for MessageID(0);
      do
      {
        id v9 = *(id *)(a2 + 8 * v7);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v7 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v11 & 1) == 0);
    }
    return v7;
  }
  return result;
}

uint64_t specialized OrderedSet._reserveCapacity(_:persistent:)(uint64_t result, char a2)
{
  if (result < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v3 = v2;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  if (*v2)
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(v6 + 16) & 0x3FLL;
    uint64_t v8 = static _HashTable.scale(forCapacity:)();
    uint64_t v9 = v8;
    if (a2)
    {
      uint64_t v10 = v8;
      if (v7 >= v8) {
        goto LABEL_14;
      }
    }
    else
    {
      swift_beginAccess();
      uint64_t v10 = *(void *)(v6 + 24) & 0x3FLL;
      if (v7 >= v9) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if (v10 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v10;
    }
    goto LABEL_23;
  }
  uint64_t v11 = static _HashTable.scale(forCapacity:)();
  uint64_t v9 = v11;
  uint64_t v7 = 0;
  if (a2) {
    uint64_t v10 = v11;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v11 > 0) {
    goto LABEL_10;
  }
LABEL_14:
  if (v10 > v9) {
    uint64_t v9 = v10;
  }
  Swift::Int result = static _HashTable.scale(forCapacity:)();
  if (result <= v9) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = result;
  }
  if (v13 < v7)
  {
    if (v10 <= v13) {
      uint64_t v12 = v13;
    }
    else {
      uint64_t v12 = v10;
    }
LABEL_23:
    uint64_t v14 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v5, v12, 0, v10);
    Swift::Int result = swift_release();
    *uint64_t v3 = v14;
    return result;
  }
  if (!v6 || (Swift::Int result = swift_isUniquelyReferenced_native(), result))
  {
    uint64_t v15 = *v3;
    if (*v3) {
      goto LABEL_28;
    }
LABEL_32:
    if (!v10) {
      return result;
    }
    __break(1u);
    goto LABEL_34;
  }
  Swift::Int result = *v3;
  if (!*v3)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  uint64_t v15 = _HashTable.copy()();
  Swift::Int result = swift_release();
  *uint64_t v3 = v15;
  if (!v15) {
    goto LABEL_32;
  }
LABEL_28:
  Swift::Int result = swift_beginAccess();
  if ((*(void *)(v15 + 24) & 0x3FLL) != v10) {
    *(void *)(v15 + 24) = *(void *)(v15 + 24) & 0xFFFFFFFFFFFFFFC0 | v10 & 0x3F;
  }
  return result;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)logger);
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.mobilePhone);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static OrientationMonitorComposer.logger);
  __swift_project_value_buffer(v0, (uint64_t)static OrientationMonitorComposer.logger);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t one-time initialization function for mobilePhone()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.mobilePhone);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.mobilePhone);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  Swift::Int result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.mobilePhone = result;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

ValueMetadata *type metadata accessor for VoicemailManagerMessageChanges()
{
  return &type metadata for VoicemailManagerMessageChanges;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t partial apply for @objc closure #1 in CachedVoicemailManager.fetchMessages()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in CachedVoicemailManager.fetchMessages()
                                                + async function pointer to @objc closure #1 in CachedVoicemailManager.fetchMessages());
  return v5(v2, v3);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v6(a1, v4);
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return v7();
}

uint64_t type metadata accessor for FaceTimeSpamReportManager()
{
  return self;
}

void FaceTimeSpamReportManager.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v1 = objc_allocWithZone((Class)IDSService);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithService:v2];

  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  id v4 = [self sharedInstance];
  if (!v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v5 = v4;
  id v6 = [self sharedInstance];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = (char *)objc_allocWithZone(ObjectType);
    *(void *)&v8[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_idsService] = v3;
    *(void *)&v8[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imAccountController] = v5;
    *(void *)&v8[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imDaemonController] = v7;
    v9.receiver = v8;
    v9.super_class = ObjectType;
    [super init];
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return;
  }
LABEL_7:
  __break(1u);
}

void specialized CallReportingViewModel.init(featureFlags:spamReportManager:carrierVoiceSpamReportHelper:)(void *a1, void *a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v4 = self;
  id v5 = v3;
  id v6 = [v4 sharedApplication];
  self;
  id v7 = [(id)swift_dynamicCastObjCClassUnconditional() recentsController];

  if (v7)
  {
    *(void *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_recentsController] = v7;
    uint64_t v8 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportAlertTitle];
    objc_super v9 = self;
    id v10 = [v9 mainBundle];
    v11._countAndFlagsBits = 0xD000000000000020;
    v100._object = (void *)0xE000000000000000;
    v11._object = (void *)0x800000010023D530;
    v12.value._countAndFlagsBits = 0x746E656365524850;
    v12.value._object = (void *)0xE900000000000073;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v100._countAndFlagsBits = 0;
    Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v100);

    *uint64_t v8 = v14;
    uint64_t v15 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportAlertCancel];
    id v16 = [v9 mainBundle];
    v101._object = (void *)0xE000000000000000;
    v17._countAndFlagsBits = 0xD00000000000001CLL;
    v17._object = (void *)0x800000010023D560;
    v18.value._countAndFlagsBits = 0x746E656365524850;
    v18.value._object = (void *)0xE900000000000073;
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v101._countAndFlagsBits = 0;
    Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v101);

    *uint64_t v15 = v20;
    char v21 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportAlertReport];
    id v22 = [v9 mainBundle];
    v102._object = (void *)0xE000000000000000;
    v23._object = (void *)0x800000010023D580;
    v23._countAndFlagsBits = 0xD00000000000001CLL;
    v24.value._countAndFlagsBits = 0x746E656365524850;
    v24.value._object = (void *)0xE900000000000073;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v102._countAndFlagsBits = 0;
    Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v102);

    *char v21 = v26;
    BOOL v27 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertTitle];
    id v28 = [v9 mainBundle];
    v29._countAndFlagsBits = 0xD000000000000026;
    v103._object = (void *)0xE000000000000000;
    v29._object = (void *)0x800000010023D5A0;
    v30.value._countAndFlagsBits = 0x746E656365524850;
    v30.value._object = (void *)0xE900000000000073;
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v103._countAndFlagsBits = 0;
    Swift::String v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v103);

    *BOOL v27 = v32;
    id v33 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertCancel];
    id v34 = [v9 mainBundle];
    v104._object = (void *)0xE000000000000000;
    v35._countAndFlagsBits = 0xD00000000000001CLL;
    v35._object = (void *)0x800000010023D560;
    v36.value._countAndFlagsBits = 0x746E656365524850;
    v36.value._object = (void *)0xE900000000000073;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v104._countAndFlagsBits = 0;
    Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v104);

    *id v33 = v38;
    unint64_t v39 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertBlock];
    id v40 = [v9 mainBundle];
    v41._countAndFlagsBits = 0xD000000000000021;
    v105._object = (void *)0xE000000000000000;
    v41._object = (void *)0x800000010023D5D0;
    v42.value._countAndFlagsBits = 0x746E656365524850;
    v42.value._object = (void *)0xE900000000000073;
    v43._countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    v105._countAndFlagsBits = 0;
    Swift::String v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, (NSBundle)v40, v43, v105);

    *unint64_t v39 = v44;
    uint64_t v45 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertReportBlock];
    id v46 = [v9 mainBundle];
    v47._countAndFlagsBits = 0xD000000000000028;
    v106._object = (void *)0xE000000000000000;
    v47._object = (void *)0x800000010023D600;
    v48.value._countAndFlagsBits = 0x746E656365524850;
    v48.value._object = (void *)0xE900000000000073;
    v49._countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    v106._countAndFlagsBits = 0;
    Swift::String v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v47, v48, (NSBundle)v46, v49, v106);

    *uint64_t v45 = v50;
    uint64_t v51 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockAllButtonTitle];
    id v52 = [v9 mainBundle];
    v107._object = (void *)0xE000000000000000;
    v53._object = (void *)0x800000010023D630;
    v53._countAndFlagsBits = 0xD000000000000025;
    v54.value._countAndFlagsBits = 0x746E656365524850;
    v54.value._object = (void *)0xE900000000000073;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    v107._countAndFlagsBits = 0;
    Swift::String v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, (NSBundle)v52, v55, v107);

    *uint64_t v51 = v56;
    uint64_t v57 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockAllAlertTitle];
    id v58 = [v9 mainBundle];
    v59._countAndFlagsBits = 0xD000000000000034;
    v108._object = (void *)0xE000000000000000;
    v59._object = (void *)0x800000010023D660;
    v60.value._countAndFlagsBits = 0x746E656365524850;
    v60.value._object = (void *)0xE900000000000073;
    v61._countAndFlagsBits = 0;
    v61._object = (void *)0xE000000000000000;
    v108._countAndFlagsBits = 0;
    Swift::String v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v59, v60, (NSBundle)v58, v61, v108);

    *uint64_t v57 = v62;
    uint64_t v63 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockUnknownButtonTitle];
    id v64 = [v9 mainBundle];
    v65._countAndFlagsBits = 0xD000000000000029;
    v109._object = (void *)0xE000000000000000;
    v65._object = (void *)0x800000010023D6A0;
    v66.value._countAndFlagsBits = 0x746E656365524850;
    v66.value._object = (void *)0xE900000000000073;
    v67._countAndFlagsBits = 0;
    v67._object = (void *)0xE000000000000000;
    v109._countAndFlagsBits = 0;
    Swift::String v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v65, v66, (NSBundle)v64, v67, v109);

    *uint64_t v63 = v68;
    uint64_t v69 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportInitiatorAlertTitle];
    id v70 = [v9 mainBundle];
    v71._countAndFlagsBits = 0xD00000000000002CLL;
    v110._object = (void *)0xE000000000000000;
    v71._object = (void *)0x800000010023D6D0;
    v72.value._countAndFlagsBits = 0x746E656365524850;
    v72.value._object = (void *)0xE900000000000073;
    v73._countAndFlagsBits = 0;
    v73._object = (void *)0xE000000000000000;
    v110._countAndFlagsBits = 0;
    Swift::String v74 = NSLocalizedString(_:tableName:bundle:value:comment:)(v71, v72, (NSBundle)v70, v73, v110);

    Swift::String *v69 = v74;
    uint64_t v75 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportInitiatorAlert];
    id v76 = [v9 mainBundle];
    v111._object = (void *)0xE000000000000000;
    v77._object = (void *)0x800000010023D700;
    v77._countAndFlagsBits = 0xD000000000000025;
    v78.value._countAndFlagsBits = 0x746E656365524850;
    v78.value._object = (void *)0xE900000000000073;
    v79._countAndFlagsBits = 0;
    v79._object = (void *)0xE000000000000000;
    v111._countAndFlagsBits = 0;
    Swift::String v80 = NSLocalizedString(_:tableName:bundle:value:comment:)(v77, v78, (NSBundle)v76, v79, v111);

    *uint64_t v75 = v80;
    uint64_t v81 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportGroupInitiatorAlertTitle];
    id v82 = [v9 mainBundle];
    v83._countAndFlagsBits = 0xD000000000000022;
    v112._object = (void *)0xE000000000000000;
    v83._object = (void *)0x800000010023D730;
    v84.value._countAndFlagsBits = 0x746E656365524850;
    v84.value._object = (void *)0xE900000000000073;
    v85._countAndFlagsBits = 0;
    v85._object = (void *)0xE000000000000000;
    v112._countAndFlagsBits = 0;
    Swift::String v86 = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, v84, (NSBundle)v82, v85, v112);

    *uint64_t v81 = v86;
    uint64_t v87 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportLocalizedTitle];
    id v88 = [v9 mainBundle];
    v113._object = (void *)0xE000000000000000;
    v89._countAndFlagsBits = 0x54524F504552;
    v89._object = (void *)0xE600000000000000;
    v90.value._countAndFlagsBits = 0x746E656365524850;
    v90.value._object = (void *)0xE900000000000073;
    v91._countAndFlagsBits = 0;
    v91._object = (void *)0xE000000000000000;
    v113._countAndFlagsBits = 0;
    Swift::String v92 = NSLocalizedString(_:tableName:bundle:value:comment:)(v89, v90, (NSBundle)v88, v91, v113);

    *uint64_t v87 = v92;
    *(void *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_featureFlags] = a1;
    *(void *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager] = a2;
    *(void *)&v5[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_carrierVoiceSpamReportHelper] = a3;
    id v93 = a1;
    id v94 = a2;
    swift_retain();

    v99.receiver = v5;
    v99.super_class = ObjectType;
    [super init];
  }
  else
  {
    __break(1u);
  }
}

uint64_t PHShouldOptimisticallyHideVoicemailUI(void *a1)
{
  id v1 = a1;
  if ([UIApp showsPhoneVoicemail])
  {
    NSString v2 = PHPreferencesGetValue(@"VoicemailShouldBeHidden");
    id v3 = v2;
    if (v2)
    {
      uint64_t ShouldBeHidden = (uint64_t)[v2 BOOLValue];
      id v5 = _voicemailCheckQueue();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = __PHShouldOptimisticallyHideVoicemailUI_block_invoke;
      v7[3] = &unk_10027DD30;
      char v9 = ShouldBeHidden;
      id v8 = v1;
      dispatch_async(v5, v7);
    }
    else
    {
      uint64_t ShouldBeHidden = _voicemailShouldBeHidden();
    }
  }
  else
  {
    uint64_t ShouldBeHidden = 1;
  }

  return ShouldBeHidden;
}

void PHHasEnhancedVoicemailAsync(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = [UIApp launchedToTest];
  id v3 = _voicemailCheckQueue();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = __PHHasEnhancedVoicemailAsync_block_invoke;
  v5[3] = &unk_10027DD30;
  unsigned __int8 v7 = v2;
  id v6 = v1;
  id v4 = v1;
  dispatch_async(v3, v5);
}

id _voicemailCheckQueue()
{
  if (_voicemailCheckQueue_s_voicemailOnceToken != -1) {
    dispatch_once(&_voicemailCheckQueue_s_voicemailOnceToken, &__block_literal_global_19);
  }
  uint64_t v0 = (void *)_voicemailCheckQueue_s_voicemailQueue;

  return v0;
}

id PHPreferencesGetValue(void *a1)
{
  return PHPreferencesGetValueInDomain(a1, 0);
}

id PHPreferencesGetValueInDomain(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    id v5 = +[NSBundle mainBundle];
    id v4 = [v5 bundleIdentifier];
  }
  if ([(__CFString *)v3 length] && [(__CFString *)v4 length]) {
    id v6 = (void *)CFPreferencesCopyValue(v3, v4, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  }
  else {
    id v6 = 0;
  }

  return v6;
}

id closure #1 in ApplicationServices.voicemailController.getter(void *a1)
{
  uint64_t v2 = *(void *)((char *)a1 + OBJC_IVAR___MPApplicationServices_voicemailManager);
  id v3 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xC0);
  uint64_t v4 = swift_unknownObjectRetain();
  id v5 = (void *)v3(v4);
  id v6 = [a1 callProviderManager];
  id v7 = [a1 contactStore];
  id v8 = [a1 suggestedContactStore];
  id v9 = [a1 metadataCache];
  id v10 = [objc_allocWithZone((Class)MPVoicemailController) initWithVoicemailManager:v2 accountManager:v5 callProviderManager:v6 contactStore:v7 suggestedContactStore:v8 metadataCache:v9];
  swift_unknownObjectRelease();

  return v10;
}

void sub_1000235A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000237A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000239AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ApplicationServices.voicemailManager.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for FaceTimeVoicemailManager(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for FaceTimeVoicemailManager);
}

uint64_t __PHHasEnhancedVoicemailAsync_block_invoke(uint64_t a1)
{
  _PHHasEnhancedVoicemail(*(unsigned __int8 *)(a1 + 40));
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t _PHHasEnhancedVoicemail(int a1)
{
  uint64_t v2 = +[PHApplicationServices sharedInstance];
  id v3 = [v2 accountManager];
  unsigned int v4 = [v3 isSubscribed];

  return a1 | v4;
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  id v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  id v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *id v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id createPHPhoneTabBarControllerTabViewDidAppearNotificationInfo(uint64_t a1, void *a2)
{
  v7[0] = @"PHPhoneTabBarControllerTabViewDidAppearNotificationSenderKey";
  v7[1] = @"PHPhoneTabBarControllerTabViewDidAppearNotificationTabTypeKey";
  v8[0] = a2;
  id v3 = a2;
  uint64_t v4 = +[NSNumber numberWithInt:a1];
  v8[1] = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:2];

  return v5;
}

Swift::Bool __swiftcall MPRecentsTableViewController.canDisplaySearchBarPopover()()
{
  uint64_t v1 = v0;
  id v2 = [v0 tabBarController];
  id v3 = [v2 selectedViewController];

  id v4 = [v1 navigationController];
  id v5 = v4;
  if (!v3)
  {
    if (!v4)
    {
LABEL_7:
      id v8 = [v1 navigationController];
      id v9 = [v8 visibleViewController];

      if (v9)
      {
        type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        id v5 = v1;
        id v10 = v9;
        char v11 = static NSObject.== infix(_:_:)();

        if (v11)
        {
          id v12 = [v5 searchController];
          unsigned __int8 v13 = [v12 isActive];

          LOBYTE(v5) = v13 ^ 1;
          goto LABEL_12;
        }
      }
      goto LABEL_10;
    }

LABEL_10:
    LOBYTE(v5) = 0;
    goto LABEL_12;
  }
  if (v4)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    id v6 = v3;
    char v7 = static NSObject.== infix(_:_:)();

    if (v7) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }

LABEL_12:
  id v14 = [v1 searchController];
  id v15 = [v14 searchBar];

  [v15 frame];
  double v17 = v16;

  if (v17 > 0.0) {
    return (char)v5;
  }
  else {
    return 0;
  }
}

id SearchViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = v3;
  Logger.init(subsystem:category:)();
  swift_unknownObjectWeakInit();
  uint64_t v7 = OBJC_IVAR___MPSearchViewController_tableView;
  *(void *)&v6[v7] = [objc_allocWithZone((Class)UITableView) initWithFrame:0 style:0.0];
  *(void *)&v6[OBJC_IVAR___MPSearchViewController____lazy_storage___footerView] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR___MPSearchViewController____lazy_storage___contactAvatarCardController] = 0;
  *(void *)&v6[OBJC_IVAR___MPSearchViewController____lazy_storage___datasource] = 0;
  id v8 = &v6[OBJC_IVAR___MPSearchViewController_searchText];
  *(void *)id v8 = 0;
  *((void *)v8 + 1) = 0;
  *(void *)&v6[OBJC_IVAR___MPSearchViewController_searchTokens] = &_swiftEmptyArrayStorage;
  uint64_t v9 = OBJC_IVAR___MPSearchViewController_throttle;
  type metadata accessor for Throttle(0);
  swift_allocObject();
  *(void *)&v6[v9] = Throttle.init()();
  id v10 = &v6[OBJC_IVAR___MPSearchViewController_searchControllerProvider];
  *(void *)id v10 = 0;
  *((void *)v10 + 1) = 0;

  if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for SearchViewController(0);
  id v12 = [super initWithNibName:v11 bundle:a3];

  return v12;
}

uint64_t type metadata accessor for SearchViewController(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for SearchViewController);
}

uint64_t type metadata accessor for Throttle(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for Throttle);
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t SearchViewController.hostingNavigationController.didset()
{
  unint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x168))();
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  id v5 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD8);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void **)(v2 + 8 * v6 + 32);
        swift_unknownObjectRetain();
      }
      ++v6;
      id v8 = (void *)v5();
      [v7 setHostingNavigationController:v8];
      swift_unknownObjectRelease();
    }
    while (v3 != v6);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t SearchViewController.searchControllers.getter()
{
  unint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x108))();
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x170))();

  return v2;
}

uint64_t SearchTableViewDiffableDataSource.searchControllers.getter()
{
  return CallsSearchController.resultIDs.getter();
}

void *SearchViewController.datasource.getter()
{
  uint64_t v1 = OBJC_IVAR___MPSearchViewController____lazy_storage___datasource;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___MPSearchViewController____lazy_storage___datasource];
  if (v2)
  {
    uint64_t v3 = *(void **)&v0[OBJC_IVAR___MPSearchViewController____lazy_storage___datasource];
  }
  else
  {
    id v4 = v0;
    id v5 = *(void **)&v0[OBJC_IVAR___MPSearchViewController_tableView];
    id v6 = objc_allocWithZone((Class)type metadata accessor for SearchTableViewDiffableDataSource());
    uint64_t v7 = SearchTableViewDiffableDataSource.init(tableView:)(v5);
    id v8 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v7) + 0x100);
    uint64_t v9 = v4;
    v8(v4, &protocol witness table for SearchViewController);
    id v10 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v7;
    uint64_t v3 = v7;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

void SearchTableViewDiffableDataSource.delegate.setter(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_delegate;
  swift_beginAccess();
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
}

void *SearchTableViewDiffableDataSource.init(tableView:)(void *a1)
{
  uint64_t v3 = v1;
  Logger.init(subsystem:category:)();
  *(_OWORD *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_text] = xmmword_100208320;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchTokens] = _swiftEmptyArrayStorage;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_lastSearchStartTime] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableViewReloadTask] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource____lazy_storage___datasource] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchTask] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchControllers] = _swiftEmptyArrayStorage;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchControllersWithResults] = _swiftEmptyArrayStorage;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchCompleteControllerSet] = &_swiftEmptySetSingleton;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableView] = a1;
  id v4 = a1;

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for SearchTableViewDiffableDataSource();
  uint64_t v5 = [super init];
  id v6 = *(void (**)(void))((swift_isaMask & *v5) + 0x1D0);
  uint64_t v7 = v5;
  v6();

  return v7;
}

uint64_t type metadata accessor for SearchTableViewDiffableDataSource()
{
  uint64_t result = type metadata singleton initialization cache for SearchTableViewDiffableDataSource;
  if (!type metadata singleton initialization cache for SearchTableViewDiffableDataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall SearchTableViewDiffableDataSource.reloadData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for IndexPath();
  unint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::String v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v46 = (char *)&v41 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<String, String>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  objc_super v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x1D8))(v12);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    double v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "SearchTableDataSource: Reloading table view", v17, 2u);
    swift_slowDealloc();
  }

  id v18 = SearchTableViewDiffableDataSource.datasource.getter();
  dispatch thunk of UITableViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)();

  uint64_t v19 = OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableView;
  id v20 = [*(id *)((char *)v1 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableView) window];

  if (v20)
  {
    uint64_t v51 = v19;
    id v21 = [*(id *)((char *)v1 + v19) visibleCells];
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for UITableViewCell);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v52 = v1;
    uint64_t v43 = v11;
    uint64_t v44 = v10;
    Swift::String_optional v42 = v14;
    if (v22 >> 62) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v23; uint64_t v23 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v48 = v23;
      unint64_t v49 = v22;
      unint64_t v50 = v22 & 0xC000000000000001;
      Swift::String_optional v24 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
      Swift::String v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      Swift::String v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      uint64_t v45 = (void (**)(char *, uint64_t))(v6 + 8);
      for (uint64_t i = 4; ; ++i)
      {
        id v28 = v50 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v22 + 8 * i);
        Swift::String v29 = v28;
        unint64_t v22 = i - 3;
        if (__OFADD__(i - 4, 1)) {
          break;
        }
        id v30 = [*(id *)((char *)v52 + v51) indexPathForCell:v28];
        if (!v30)
        {
          (*v25)(v4, 1, 1, v5);
LABEL_19:
          outlined destroy of Locale?((uint64_t)v4, &demangling cache variable for type metadata for IndexPath?);
          goto LABEL_20;
        }
        Swift::String v31 = v30;
        unint64_t v6 = (unint64_t)v47;
        static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::String v32 = *v24;
        (*v24)(v4, v6, v5);
        (*v25)(v4, 0, 1, v5);
        if ((*v26)(v4, 1, v5) == 1) {
          goto LABEL_19;
        }
        v32(v46, (unint64_t)v4, v5);
        unint64_t v6 = IndexPath.section.getter();
        uint64_t v33 = (*(uint64_t (**)(void))((swift_isaMask & *v52) + 0x188))();
        if ((v33 & 0xC000000000000001) != 0)
        {
          unint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_24;
          }
          if (v6 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_25;
          }
          unint64_t v6 = *(void *)(v33 + 8 * v6 + 32);
          swift_unknownObjectRetain();
        }
        swift_bridgeObjectRelease();
        [(id)v6 highlightMatchedTextIn:v29];
        swift_unknownObjectRelease();
        (*v45)(v46, v5);
LABEL_20:

        BOOL v34 = v22 == v48;
        unint64_t v22 = v49;
        if (v34) {
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      swift_bridgeObjectRetain();
    }
LABEL_27:
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v52;
    uint64_t v11 = v43;
    uint64_t v10 = v44;
    objc_super v14 = v42;
  }
  uint64_t v35 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xF8))();
  if (v35)
  {
    Swift::String v37 = (void *)v35;
    uint64_t v38 = v36;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(ObjectType, v38);
  }
  uint64_t v40 = OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableViewReloadTask;
  if (*(void *)((char *)v1 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableViewReloadTask))
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    Task.cancel()();
    swift_release();
  }
  *(void *)((char *)v1 + v40) = 0;
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t SearchTableViewDiffableDataSource.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

unint64_t SearchTableViewDiffableDataSource.createSnapshot()()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SearchTableDataSource: Creating snapshot", v4, 2u);
    swift_slowDealloc();
  }

  unint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x170))();
  unint64_t v6 = v1;
  uint64_t v7 = specialized Sequence.compactMap<A>(_:)(v5, (uint64_t)v6);
  swift_bridgeObjectRelease();

  uint64_t v8 = (void *)((char *)v6
                + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchControllersWithResults);
  swift_beginAccess();
  *uint64_t v8 = (uint64_t)v7;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized MutableCollection<>.sort(by:)(v8);
  swift_endAccess();
  uint64_t v9 = NSDiffableDataSourceSnapshot.init()();
  uint64_t v10 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x188);
  unint64_t v11 = v10(v9);
  unint64_t v12 = v11;
  if (v11 >> 62)
  {
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13) {
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v13) {
    goto LABEL_15;
  }
LABEL_5:
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v36 = v10;
  uint64_t v15 = 0;
  do
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      os_log_type_t v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      os_log_type_t v16 = *(void **)(v12 + 8 * v15 + 32);
      swift_unknownObjectRetain();
    }
    id v17 = [v16 sectionTitle];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    swift_unknownObjectRelease();

    unint64_t v22 = _swiftEmptyArrayStorage[2];
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    }
    ++v15;
    _swiftEmptyArrayStorage[2] = v22 + 1;
    uint64_t v23 = &_swiftEmptyArrayStorage[2 * v22];
    v23[4] = v18;
    v23[5] = v20;
  }
  while (v13 != v15);
  swift_bridgeObjectRelease();
  uint64_t v10 = v36;
LABEL_16:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<String, String>);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)_swiftEmptyArrayStorage);
  uint64_t v24 = swift_bridgeObjectRelease();
  unint64_t result = v10(v24);
  unint64_t v25 = result;
  if (result >> 62) {
    goto LABEL_37;
  }
  uint64_t v26 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v26) {
    return swift_bridgeObjectRelease();
  }
  while (v26 >= 1)
  {
    uint64_t v27 = 0;
    while (1)
    {
      if ((v25 & 0xC000000000000001) != 0)
      {
        Swift::String v29 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        Swift::String v29 = *(void **)(v25 + 8 * v27 + 32);
        swift_unknownObjectRetain();
      }
      unint64_t v30 = (unint64_t)[v29 numberOfRowsInConsolidatedView];
      id v31 = [v29 resultIDs];
      uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v30 & 0x8000000000000000) != 0) {
        break;
      }
      if (v30)
      {
        if (*(void *)(v32 + 16) >= v30) {
          unint64_t v33 = v30;
        }
        else {
          unint64_t v33 = *(void *)(v32 + 16);
        }
      }
      else
      {
        unint64_t v33 = 0;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      BOOL v34 = (void *)swift_dynamicCastClass();
      if (!v34)
      {
        swift_bridgeObjectRelease();
        BOOL v34 = _swiftEmptyArrayStorage;
      }
      uint64_t v35 = v34[2];
      swift_release();
      if (v35 == v33)
      {
        if (!swift_dynamicCastClass()) {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        specialized _copyCollectionToContiguousArray<A>(_:)(v32, v32 + 32, 0, (2 * v33) | 1);
      }
      ++v27;
      swift_bridgeObjectRelease();
      id v28 = [v29 sectionTitle];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      if (v26 == v27) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_37:
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v26 = result;
    if (!result) {
      return swift_bridgeObjectRelease();
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t CallsSearchController.resultIDs.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return CallsSearchController.resultIDs.getter();
}

uint64_t SearchTableViewDiffableDataSource.searchControllersWithResults.getter()
{
  return CallsSearchController.resultIDs.getter();
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v13 = (unint64_t)&_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v6 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v8 = i - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v7 = *(void **)(a1 + 8 * i);
          swift_unknownObjectRetain();
          uint64_t v8 = i - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        unint64_t v12 = v7;
        closure #1 in SearchTableViewDiffableDataSource.createSnapshot()(&v12, a2, &v11);
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return (void *)swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();
        if (v11)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v8 == v4)
        {
          swift_bridgeObjectRelease();
          return (void *)v13;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyArrayStorage;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

{
  return specialized MutableCollection<>.sort(by:)(a1, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_132;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_140;
  }
  Swift::Int v100 = result;
  uint64_t v95 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v107 = (uint64_t)&_swiftEmptyArrayStorage;
    Swift::String v106 = (char *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_98:
      if (v11 >= 2)
      {
        uint64_t v89 = *v95;
        do
        {
          unint64_t v90 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_127;
          }
          if (!v89) {
            goto LABEL_139;
          }
          uint64_t v91 = *(void *)&v8[16 * v90 + 32];
          uint64_t v92 = *(void *)&v8[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v89 + 8 * v91), (void **)(v89 + 8 * *(void *)&v8[16 * v11 + 16]), v89 + 8 * v92, v106);
          if (v1) {
            break;
          }
          if (v92 < v91) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
          }
          if (v90 >= *((void *)v8 + 2)) {
            goto LABEL_129;
          }
          id v93 = &v8[16 * v90 + 32];
          *(void *)id v93 = v91;
          *((void *)v93 + 1) = v92;
          unint64_t v94 = *((void *)v8 + 2);
          if (v11 > v94) {
            goto LABEL_130;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v94 - v11));
          *((void *)v8 + 2) = v94 - 1;
          unint64_t v11 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_109:
      swift_bridgeObjectRelease();
      *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchController);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    Swift::String v106 = (char *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v107 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v96 = *a1 - 8;
  uint64_t v97 = *a1 + 16;
  uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
  Swift::Int v103 = v3;
  while (1)
  {
    Swift::Int v12 = v9++;
    Swift::Int v104 = v12;
    if (v9 < v3)
    {
      unint64_t v13 = *(void **)(v10 + 8 * v9);
      objc_super v14 = *(void **)(v10 + 8 * v12);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v101 = [v13 sectionIndex];
      id v15 = [v14 sectionIndex];
      swift_unknownObjectRelease();
      Swift::Int v3 = v103;
      swift_unknownObjectRelease();
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v103)
      {
        char v98 = v8;
        os_log_type_t v16 = (void **)(v97 + 8 * v12);
        while (1)
        {
          uint64_t v18 = *(v16 - 1);
          id v17 = *v16;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v19 = [v17 sectionIndex];
          id v20 = [v18 sectionIndex];
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if ((uint64_t)v101 < (uint64_t)v15 == (uint64_t)v19 >= (uint64_t)v20) {
            break;
          }
          ++v9;
          ++v16;
          Swift::Int v3 = v103;
          if (v103 == v9)
          {
            Swift::Int v9 = v103;
            uint64_t v8 = v98;
            goto LABEL_22;
          }
        }
        uint64_t v8 = v98;
        Swift::Int v3 = v103;
LABEL_22:
        Swift::Int v12 = v104;
      }
      if ((uint64_t)v101 < (uint64_t)v15)
      {
        if (v9 < v12) {
          goto LABEL_133;
        }
        if (v12 < v9)
        {
          unint64_t v21 = (uint64_t *)(v96 + 8 * v9);
          Swift::Int v22 = v9;
          Swift::Int v23 = v12;
          uint64_t v24 = (uint64_t *)(v10 + 8 * v12);
          do
          {
            if (v23 != --v22)
            {
              if (!v10) {
                goto LABEL_138;
              }
              uint64_t v25 = *v24;
              uint64_t *v24 = *v21;
              *unint64_t v21 = v25;
            }
            ++v23;
            --v21;
            ++v24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_131;
      }
      if (v9 - v12 < v100) {
        break;
      }
    }
LABEL_48:
    if (v9 < v12) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    unint64_t v36 = *((void *)v8 + 2);
    unint64_t v35 = *((void *)v8 + 3);
    unint64_t v11 = v36 + 1;
    if (v36 >= v35 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v11;
    Swift::String v37 = v8 + 32;
    uint64_t v38 = &v8[16 * v36 + 32];
    *(void *)uint64_t v38 = v12;
    *((void *)v38 + 1) = v9;
    if (v36)
    {
      Swift::Int v105 = v9;
      while (1)
      {
        unint64_t v39 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v44 = &v37[16 * v11];
          uint64_t v45 = *((void *)v44 - 8);
          uint64_t v46 = *((void *)v44 - 7);
          BOOL v50 = __OFSUB__(v46, v45);
          uint64_t v47 = v46 - v45;
          if (v50) {
            goto LABEL_115;
          }
          uint64_t v49 = *((void *)v44 - 6);
          uint64_t v48 = *((void *)v44 - 5);
          BOOL v50 = __OFSUB__(v48, v49);
          uint64_t v42 = v48 - v49;
          char v43 = v50;
          if (v50) {
            goto LABEL_116;
          }
          unint64_t v51 = v11 - 2;
          id v52 = &v37[16 * v11 - 32];
          uint64_t v54 = *(void *)v52;
          uint64_t v53 = *((void *)v52 + 1);
          BOOL v50 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          if (v50) {
            goto LABEL_118;
          }
          BOOL v50 = __OFADD__(v42, v55);
          uint64_t v56 = v42 + v55;
          if (v50) {
            goto LABEL_121;
          }
          if (v56 >= v47)
          {
            Swift::String v74 = &v37[16 * v39];
            uint64_t v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            BOOL v50 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v50) {
              goto LABEL_125;
            }
            BOOL v67 = v42 < v77;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v68 = *((void *)v8 + 4);
            uint64_t v69 = *((void *)v8 + 5);
            BOOL v50 = __OFSUB__(v69, v68);
            uint64_t v61 = v69 - v68;
            char v62 = v50;
            goto LABEL_80;
          }
          uint64_t v41 = *((void *)v8 + 4);
          uint64_t v40 = *((void *)v8 + 5);
          BOOL v50 = __OFSUB__(v40, v41);
          uint64_t v42 = v40 - v41;
          char v43 = v50;
        }
        if (v43) {
          goto LABEL_117;
        }
        unint64_t v51 = v11 - 2;
        uint64_t v57 = &v37[16 * v11 - 32];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v60 = __OFSUB__(v58, v59);
        uint64_t v61 = v58 - v59;
        char v62 = v60;
        if (v60) {
          goto LABEL_120;
        }
        uint64_t v63 = &v37[16 * v39];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v50 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v50) {
          goto LABEL_123;
        }
        if (__OFADD__(v61, v66)) {
          goto LABEL_124;
        }
        if (v61 + v66 >= v42)
        {
          BOOL v67 = v42 < v66;
LABEL_86:
          if (v67) {
            unint64_t v39 = v51;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v62) {
          goto LABEL_119;
        }
        id v70 = &v37[16 * v39];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v50 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v50) {
          goto LABEL_122;
        }
        if (v73 < v61) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v78 = v39 - 1;
        if (v39 - 1 >= v11)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v79 = v10;
        if (!v10) {
          goto LABEL_137;
        }
        Swift::String v80 = v8;
        uint64_t v81 = &v37[16 * v78];
        uint64_t v82 = *(void *)v81;
        Swift::String v83 = v37;
        unint64_t v84 = v39;
        Swift::String v85 = &v37[16 * v39];
        uint64_t v86 = *((void *)v85 + 1);
        uint64_t v87 = v79;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v79 + 8 * *(void *)v81), (void **)(v79 + 8 * *(void *)v85), v79 + 8 * v86, v106);
        if (v1) {
          goto LABEL_109;
        }
        if (v86 < v82) {
          goto LABEL_112;
        }
        if (v84 > *((void *)v80 + 2)) {
          goto LABEL_113;
        }
        *(void *)uint64_t v81 = v82;
        *(void *)&v83[16 * v78 + 8] = v86;
        unint64_t v88 = *((void *)v80 + 2);
        if (v84 >= v88) {
          goto LABEL_114;
        }
        uint64_t v8 = v80;
        unint64_t v11 = v88 - 1;
        memmove(v85, v85 + 16, 16 * (v88 - 1 - v84));
        Swift::String v37 = v83;
        *((void *)v80 + 2) = v88 - 1;
        uint64_t v10 = v87;
        Swift::Int v9 = v105;
        if (v88 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    Swift::Int v3 = v103;
    if (v9 >= v103) {
      goto LABEL_98;
    }
  }
  if (__OFADD__(v12, v100)) {
    goto LABEL_134;
  }
  if (v12 + v100 >= v3) {
    Swift::Int v26 = v3;
  }
  else {
    Swift::Int v26 = v12 + v100;
  }
  if (v26 >= v12)
  {
    if (v9 != v26)
    {
      objc_super v99 = v8;
      uint64_t v27 = v96 + 8 * v9;
      Swift::Int v102 = v26;
      do
      {
        id v28 = *(void **)(v10 + 8 * v9);
        Swift::Int v29 = v12;
        uint64_t v30 = v27;
        do
        {
          id v31 = *(void **)v30;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v32 = [v28 sectionIndex];
          id v33 = [v31 sectionIndex];
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if ((uint64_t)v32 >= (uint64_t)v33) {
            break;
          }
          if (!v10) {
            goto LABEL_136;
          }
          BOOL v34 = *(void **)v30;
          id v28 = *(void **)(v30 + 8);
          *(void *)uint64_t v30 = v28;
          *(void *)(v30 + 8) = v34;
          v30 -= 8;
          ++v29;
        }
        while (v9 != v29);
        ++v9;
        v27 += 8;
        Swift::Int v12 = v104;
      }
      while (v9 != v102);
      Swift::Int v9 = v102;
      uint64_t v8 = v99;
    }
    goto LABEL_48;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v19;
  Swift::Int v20;
  void *v21;
  Swift::Int v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  void *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  void *v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  Swift::Int v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      Swift::Int v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      unint64_t v94 = v11;
      Swift::Int v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          uint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          char v98 = *(void *)&v94[16 * v96 + 32];
          objc_super v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          Swift::Int v100 = &v97[16 * v96 + 32];
          *(void *)Swift::Int v100 = v98;
          *((void *)v100 + 1) = v99;
          id v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          unint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          Swift::Int v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    Swift::Int v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  Swift::Int v103 = v10 + 8;
  unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::String v106 = v3;
  while (1)
  {
    unint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    objc_super v14 = (uint64_t *)(v10 + 16 * v9);
    id v15 = *v14;
    os_log_type_t v16 = v14[1];
    id v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      id v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      id v19 = 0;
    }
    else
    {
      id v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    unint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      Swift::Int v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      id v20 = v22;
    }
    while (v22 < v3);
    id v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        Swift::Int v26 = 16 * v13;
        uint64_t v27 = v20;
        id v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            Swift::Int v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            id v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    uint64_t v41 = *((void *)v11 + 2);
    uint64_t v40 = *((void *)v11 + 3);
    Swift::Int v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    char v43 = &v11[16 * v41 + 32];
    *(void *)char v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        uint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          BOOL v50 = *((void *)v49 - 8);
          unint64_t v51 = *((void *)v49 - 7);
          uint64_t v55 = __OFSUB__(v51, v50);
          id v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          uint64_t v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          uint64_t v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          uint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          uint64_t v55 = __OFSUB__(v58, v59);
          BOOL v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          uint64_t v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            Swift::String v80 = *((void *)v79 + 1);
            uint64_t v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            uint64_t v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            Swift::String v74 = *((void *)v11 + 5);
            uint64_t v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            BOOL v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          uint64_t v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          uint64_t v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        uint64_t v56 = v12 - 2;
        char v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        uint64_t v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        BOOL v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        id v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        uint64_t v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          uint64_t v72 = v47 < v71;
LABEL_105:
          if (v72) {
            uint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        uint64_t v55 = __OFSUB__(v76, v77);
        unint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        Swift::String v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        unint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        Swift::String v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        unint64_t v88 = v42;
        uint64_t v89 = v44;
        unint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        id v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        unint64_t v11 = v85;
        Swift::Int v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    id v32 = v3;
  }
  else {
    id v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      id v33 = (void *)(v10 + 16 * v9);
      do
      {
        BOOL v34 = (uint64_t *)(v10 + 16 * v9);
        unint64_t v35 = *v34;
        unint64_t v36 = v34[1];
        Swift::String v37 = v13;
        uint64_t v38 = v33;
        do
        {
          unint64_t v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          unint64_t v35 = *v38;
          unint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id SearchTableViewDiffableDataSource.datasource.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource____lazy_storage___datasource;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource____lazy_storage___datasource];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource____lazy_storage___datasource];
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableView];
    *(void *)(swift_allocObject() + 16) = v0;
    objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UITableViewDiffableDataSource<String, String>));
    id v6 = v5;
    uint64_t v7 = v0;
    uint64_t v8 = (void *)UITableViewDiffableDataSource.init(tableView:cellProvider:)();
    Swift::Int v9 = *(void **)&v0[v1];
    *(void *)&v4[v1] = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

id one-time initialization function for serialQueue()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VoicemailActor.queue;
  static VoicemailQueueManager.serialQueue = static VoicemailActor.queue;

  return v0;
}

void ___voicemailCheckQueue_block_invoke(id a1)
{
  id v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mobilephone.PHVoicemailUtilities.voicemailCheck", v3);
  uint64_t v2 = (void *)_voicemailCheckQueue_s_voicemailQueue;
  _voicemailCheckQueue_s_voicemailQueue = (uint64_t)v1;
}

int main(int argc, const char **argv, const char **envp)
{
  id v6 = +[PHApplicationServices sharedInstance];
  LODWORD(argv) = UIApplicationMain(argc, (char **)argv, 0, 0);
  return (int)argv;
}

void one-time initialization function for nicknamesDefaults()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = (objc_class *)[v0 initWithSuiteName:v1];

  nicknamesDefaults.value.super.Class isa = v2;
}

uint64_t type metadata completion function for MessageID.Value()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(a1, v1);
}

uint64_t partial apply for closure #1 in CachedVoicemailManager.fetchMessages()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in CachedVoicemailManager.fetchMessages()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ApplicationServices.init()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in ApplicationServices.init()(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_TG5Tu);
  return v6(a1, v4);
}

uint64_t type metadata completion function for Throttle()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void __PHShouldOptimisticallyHideVoicemailUI_block_invoke(uint64_t a1)
{
  int ShouldBeHidden = _voicemailShouldBeHidden();
  if (*(unsigned __int8 *)(a1 + 40) != ShouldBeHidden)
  {
    char v3 = ShouldBeHidden;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = __PHShouldOptimisticallyHideVoicemailUI_block_invoke_2;
    v4[3] = &unk_10027DD30;
    id v5 = *(id *)(a1 + 32);
    char v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
  }
}

BOOL _voicemailShouldBeHidden()
{
  if (TUCallScreeningEnabled())
  {
    BOOL v0 = 0;
  }
  else
  {
    unint64_t v1 = +[PHApplicationServices sharedInstance];
    uint64_t v2 = [v1 accountManager];

    char v3 = [v2 accounts];
    if ([v3 count])
    {
      BOOL v0 = 0;
    }
    else
    {
      uint64_t v4 = [v2 allVoicemails];
      BOOL v0 = [v4 count] == 0;
    }
  }
  id v5 = +[NSNumber numberWithBool:v0];
  PHPreferencesSetValue(@"VoicemailShouldBeHidden", v5);

  return v0;
}

uint64_t partial apply for closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(a1, v4, v5, v6);
}

uint64_t type metadata completion function for FaceTimeVoicemailManager()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *char v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t type metadata completion function for SearchViewController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in SearchViewController.prewarmSearchControllers(after:)()
{
  ContinuousClock.init()();
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in SearchViewController.prewarmSearchControllers(after:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[8];
  uint64_t v6 = v2[7];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[11];
    uint64_t v8 = v3[12];
    uint64_t v9 = closure #1 in SearchViewController.prewarmSearchControllers(after:);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[11];
    uint64_t v8 = v3[12];
    uint64_t v9 = closure #1 in SearchViewController.prewarmSearchControllers(after:);
  }
  return _swift_task_switch(v9, v7, v8);
}

{
  uint64_t v0;
  uint64_t Strong;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  swift_release();
  swift_beginAccess();
  Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Prewarming SearchViewController", v5, 2u);
      swift_slowDealloc();
    }

    uint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x168))();
    if (v6 >> 62) {
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v8 = swift_bridgeObjectRelease();
    if (!v7)
    {
      uint64_t v9 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x150))(v8);
      if (v9)
      {
        id v10 = (uint64_t)v9;
        unint64_t v11 = (void *)v9();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v10);
      }
      else
      {
        unint64_t v11 = _swiftEmptyArrayStorage;
      }
      (*(void (**)(void *))((swift_isaMask & *v2) + 0x170))(v11);
    }
  }
  swift_task_dealloc();
  Swift::Int v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t closure #1 in SearchViewController.prewarmSearchControllers(after:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  *(void *)(v5 + 56) = v6;
  *(void *)(v5 + 64) = *(void *)(v6 - 8);
  *(void *)(v5 + 72) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v5 + 80) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 88) = v8;
  *(void *)(v5 + 96) = v7;
  return _swift_task_switch(closure #1 in SearchViewController.prewarmSearchControllers(after:), v8, v7);
}

uint64_t closure #1 in SearchViewController.prewarmSearchControllers(after:)partial apply(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in SearchViewController.prewarmSearchControllers(after:)(v6, a1, v4, v5, v7);
}

id @objc static VoicemailActor.queue.getter(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;

  return v5;
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t type metadata completion function for SearchTableViewDiffableDataSource()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in CachedVoicemailManager.fetchMessages()(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[10];
    uint64_t v7 = closure #1 in CachedVoicemailManager.fetchMessages();
  }
  else
  {
    v4[15] = a1;
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[10];
    uint64_t v7 = closure #1 in CachedVoicemailManager.fetchMessages();
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  v4[6] = a4;
  v4[7] = type metadata accessor for MessageFetchOptions();
  v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MessageStoreFetchRequest.QuerySearchType();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  type metadata accessor for MessageStoreQuery();
  v4[12] = swift_task_alloc();
  uint64_t Request = type metadata accessor for MessageStoreFetchRequest();
  v4[13] = Request;
  v4[14] = *(void *)(Request - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore(), 0, 0);
}

void PHPreferencesSetValue(void *a1, void *a2)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t uiDeviceOrientationForBSInterfaceOrientation(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return 0;
  }
  else {
    return qword_100203B58[a1 - 1];
  }
}

void sub_10002CB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_10002CED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSBSGetScreenLockStatusSymbolLoc_block_invoke(uint64_t a1)
{
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = off_10027C880;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v2 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary) {
    __getSBSGetScreenLockStatusSymbolLoc_block_invoke_cold_1(v4);
  }
  if (v4[0]) {
    free(v4[0]);
  }
  uint64_t result = dlsym(v2, "SBSGetScreenLockStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSGetScreenLockStatusSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100032F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
}

id _NewSIMInsertionHandler(uint64_t a1, void *a2)
{
  return [a2 _handleSIMInsertionOrRemoval];
}

id _inCallServiceDidAppear(uint64_t a1, void *a2)
{
  uint64_t v3 = PHDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TUCallCenterInCallServiceDidAppearNotification: Received in ", buf, 2u);
  }

  uint64_t v4 = PHDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "DialerAnimation: Calling _resetButtonAnimation in ", v6, 2u);
  }

  return [a2 _resetButtonAnimation];
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100044638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_100044884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v16 = objc_begin_catch(exception_object);
  id v17 = *(void **)(v15 + 40);
  uint64_t v18 = __CurrentTestName;
  id v19 = [v16 name];
  [v17 failedTest:v18 withFailure:v19];

  objc_end_catch();
}

id PHFaceTimeApplicationIsRemoved()
{
  uint64_t v0 = TUPreferredFaceTimeBundleIdentifier();
  id v7 = 0;
  id v1 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v0 allowPlaceholder:0 error:&v7];
  id v2 = v7;
  uint64_t v3 = v2;
  if (v1)
  {
    uint64_t v4 = [v1 applicationState];
    id v5 = [v4 isRemovedSystemApp];
  }
  else
  {
    if (!v2)
    {
      id v5 = 0;
      goto LABEL_8;
    }
    uint64_t v4 = PHDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      PHFaceTimeApplicationIsRemoved_cold_1((uint64_t)v0, (uint64_t)v3, v4);
    }
    id v5 = 0;
  }

LABEL_8:
  return v5;
}

void sub_10004D470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100056F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100058010(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100059278(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_1000593F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000594C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100059718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100059D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005A080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005A5F4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10005A87C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10005B64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL PHUIInCallControlAlignmentIs(void *a1)
{
  return (void *)+[PHUIConfiguration inCallControlAlignment] == a1;
}

id PHFormatDialerLCDViewText(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    unsigned int v2 = [v1 characterAtIndex:0];
    if (v2 == 59 || v2 == 44)
    {
      uint64_t v3 = [v1 substringFromIndex:1];

      id v1 = (id)v3;
    }
  }
  uint64_t v4 = TUNetworkCountryCode();

  if (v4)
  {
    id v5 = TUNetworkCountryCode();
    uint64_t v6 = UIFormattedPhoneNumberFromStringWithCountry();
  }
  else
  {
    uint64_t v6 = UIFormattedPhoneNumberFromString();
  }

  return v6;
}

BOOL PHShouldShowWifiCallingAlert()
{
  unint64_t v0 = _wifiCallingAlertShowCount();
  id v1 = PHDefaultLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    if (v0 >= 3) {
      CFStringRef v2 = @"NO";
    }
    else {
      CFStringRef v2 = @"YES";
    }
    int v4 = 138412546;
    CFStringRef v5 = v2;
    __int16 v6 = 2048;
    uint64_t v7 = _wifiCallingAlertShowCount();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Showing wifi calling alert: %@, shown count is %ld", (uint8_t *)&v4, 0x16u);
  }

  return v0 < 3;
}

uint64_t _wifiCallingAlertShowCount()
{
  unint64_t v0 = PHPreferencesGetValue(@"WifiCallingCallFailureAlertShowCount");
  if (v0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v1 = (uint64_t)[v0 unsignedIntegerValue];
    }
    else {
      uint64_t v1 = 3;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }

  return v1;
}

void PHIncrementWifiCallingAlertShowCount()
{
  uint64_t v0 = _wifiCallingAlertShowCount();
  if (v0 != -1)
  {
    uint64_t v1 = +[NSNumber numberWithUnsignedInteger:v0 + 1];
    PHPreferencesSetValue(@"WifiCallingCallFailureAlertShowCount", v1);
    CFStringRef v2 = PHDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 138412290;
      int v4 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Incrementing wifi calling alert show count to %@", (uint8_t *)&v3, 0xCu);
    }
  }
}

BOOL PHStringShouldAutoDialGivenLastCharacter(void *a1, int a2)
{
  id v3 = a1;
  int v4 = v3;
  if (a2 != 35) {
    goto LABEL_21;
  }
  CFStringRef v5 = (char *)[v3 rangeOfString:@"**0" options:8];
  if (v5 == (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    if ([v4 isEqualToString:@"*#06#"])
    {
      BOOL v7 = 1;
      goto LABEL_22;
    }
LABEL_21:
    BOOL v7 = 0;
    goto LABEL_22;
  }
  uint64_t v8 = &v5[v6];
  uint64_t v9 = (char *)[v4 length];
  uint64_t v10 = v8 + 1;
  if ((uint64_t)v9 <= (uint64_t)(v8 + 1)) {
    goto LABEL_21;
  }
  unint64_t v11 = v9;
  if (([v4 characterAtIndex:v8] & 0xFFFE) != 0x34) {
    goto LABEL_21;
  }
  unsigned int v12 = [v4 characterAtIndex:v8 + 1];
  if (v12 == 50)
  {
    uint64_t v10 = v8 + 2;
    if ((uint64_t)v11 <= (uint64_t)(v8 + 2)) {
      goto LABEL_21;
    }
    unsigned int v12 = [v4 characterAtIndex:v8 + 2];
  }
  if (v12 != 42) {
    goto LABEL_21;
  }
  unint64_t v13 = v11 - 2;
  if ((uint64_t)v10 >= (uint64_t)(v11 - 2)) {
    goto LABEL_21;
  }
  do
  {
    unsigned int v14 = [v4 characterAtIndex:v10];
    BOOL v7 = v14 == 42 || v14 - 48 < 0xA;
    if (v13 == v10) {
      break;
    }
    ++v10;
  }
  while (v7);
LABEL_22:

  return v7;
}

uint64_t PHShouldAttemptCallWithDialRequest(void *a1)
{
  id v1 = a1;
  CFStringRef v2 = [v1 provider];
  unsigned int v3 = [v2 isTelephonyProvider];

  if (v3)
  {
    id v4 = [v1 dialType];
    CFStringRef v5 = [v1 localSenderIdentityUUID];
    uint64_t v6 = PHShouldAttemptTelephonyCallWithDialTypeAndSenderIdentityUUID((uint64_t)v4, v5);
  }
  else
  {
    BOOL v7 = [v1 provider];
    int v8 = [v7 isSuperboxProvider];

    if (v8) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = PHShouldAttemptFaceTimeCall();
    }
  }

  return v6;
}

uint64_t PHShouldAttemptTelephonyCallWithDialTypeAndSenderIdentityUUID(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [(id)CUTWeakLinkClass() sharedInstance];
  id v5 = objc_alloc_init((Class)RadiosPreferences);
  unsigned int v6 = [v5 airplaneMode];

  if (!v6)
  {
    uint64_t v10 = 1;
    goto LABEL_21;
  }
  if (v3)
  {
    BOOL v7 = +[TUCallCapabilities senderIdentityCapabilitiesWithUUID:v3];
    int v8 = v7;
    if (a1 == 1) {
      unsigned __int8 v9 = [v7 canAttemptEmergencyCallsWithoutCellularConnection];
    }
    else {
      unsigned __int8 v9 = [v7 canAttemptTelephonyCallsWithoutCellularConnection];
    }
    unsigned __int8 v11 = v9;

    if (v11)
    {
LABEL_11:
      uint64_t v10 = 1;
      if ([v4 networkReachable]) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
  }
  else if (a1 == 1)
  {
    if (+[TUCallCapabilities canAttemptEmergencyCallsWithoutCellularConnection])goto LABEL_11; {
  }
    }
  else if (+[TUCallCapabilities canAttemptTelephonyCallsWithoutCellularConnection])
  {
    goto LABEL_11;
  }
  LODWORD(v10) = 0;
LABEL_12:
  unsigned int v12 = PHDefaultLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (v10) {
      CFStringRef v13 = @"NO";
    }
    else {
      CFStringRef v13 = @"YES";
    }
    if ([v4 networkReachable]) {
      CFStringRef v14 = @"NO";
    }
    else {
      CFStringRef v14 = @"YES";
    }
    int v16 = 138412546;
    CFStringRef v17 = v13;
    __int16 v18 = 2112;
    CFStringRef v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[WARN] Aborting telephony call, the device is in airplane mode and, cannot make telephony calls while in airplane mode (%@) or is not connected to an active Wi-Fi network (%@).", (uint8_t *)&v16, 0x16u);
  }

  uint64_t v10 = 0;
LABEL_21:

  return v10;
}

uint64_t PHShouldAttemptFaceTimeCall()
{
  uint64_t v0 = [(id)CUTWeakLinkClass() sharedInstance];
  id v1 = [(id)CUTWeakLinkClass() sharedInstance];
  CFStringRef v2 = +[TUCallCenter sharedInstance];
  id v3 = [v2 frontmostCall];
  if ([v0 validNetworkReachable])
  {
    uint64_t v4 = 1;
  }
  else
  {
    if ([v2 hasCurrentAudioCalls]
      && ([v3 supportsSimultaneousVoiceAndData] & 1) == 0
      && (TUPreferredFaceTimeBundleIdentifier(),
          id v5 = objc_claimAutoreleasedReturnValue(),
          unsigned int v6 = [v1 wifiAllowedForBundleId:v5],
          v5,
          v6))
    {
      BOOL v7 = PHDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting FaceTime call because a telephone call is in progress and the carrier does not support simultaneous voice and data.", buf, 2u);
      }
      uint64_t v4 = 1;
    }
    else
    {
      BOOL v7 = PHDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned __int8 v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[WARN] Aborting FaceTime call because the network is unavailable.", v9, 2u);
      }
      uint64_t v4 = 0;
    }
  }
  return v4;
}

id PHIsInAirplaneMode()
{
  id v0 = objc_alloc_init((Class)RadiosPreferences);
  id v1 = [v0 airplaneMode];

  return v1;
}

uint64_t _emergencyDialerPresenceToken()
{
  if (!byte_1002C9894) {
    byte_1002C9894 = notify_register_check("com.apple.InCallService.emergencydialerpresence", &_emergencyDialerPresenceToken_notifyToken) == 0;
  }
  return *(void *)&_emergencyDialerPresenceToken_notifyToken;
}

BOOL PHGetEmergencyDialerPresenceTokenValue()
{
  if (!byte_1002C9894) {
    byte_1002C9894 = notify_register_check("com.apple.InCallService.emergencydialerpresence", &_emergencyDialerPresenceToken_notifyToken) == 0;
  }
  uint64_t state64 = 0;
  if ((*(void *)&_emergencyDialerPresenceToken_notifyToken & 0x100000000) == 0) {
    return 0;
  }
  notify_get_state(_emergencyDialerPresenceToken_notifyToken, &state64);
  return state64 != 0;
}

uint64_t PHSetEmergencyDialerPresenceTokenValue(uint64_t state64)
{
  unsigned int v1 = state64;
  if (!byte_1002C9894) {
    byte_1002C9894 = notify_register_check("com.apple.InCallService.emergencydialerpresence", &_emergencyDialerPresenceToken_notifyToken) == 0;
  }
  uint64_t result = *(void *)&_emergencyDialerPresenceToken_notifyToken;
  if ((*(void *)&_emergencyDialerPresenceToken_notifyToken & 0x100000000) != 0)
  {
    notify_set_state(_emergencyDialerPresenceToken_notifyToken, v1);
    return notify_post("com.apple.InCallService.emergencydialerpresence");
  }
  return result;
}

BOOL PHShouldUseFieldTestBundleIdentifier(void *a1)
{
  id v1 = a1;
  BOOL v2 = 1;
  if ([v1 compare:@"mav10" options:1])
  {
    BOOL v2 = 1;
    if ([v1 compare:@"mav13" options:1])
    {
      BOOL v2 = 1;
      if ([v1 compare:@"mav16" options:1]) {
        BOOL v2 = [v1 compare:@"mav17" options:1] == 0;
      }
    }
  }

  return v2;
}

BOOL PHLaunchFieldTestApplicationIfNecessaryForDestinationID(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"*3001#12345#*"])
  {
    uint64_t v2 = CUTWeakLinkClass();
    BOOL v3 = v2 != 0;
    if (v2)
    {
      uint64_t v4 = (void *)v2;
      id v5 = MGGetStringAnswer();
      CFStringRef v6 = @"com.apple.FTMInternal";
      if (([v5 hasPrefix:@"ice"] & 1) == 0
        && PHShouldUseFieldTestBundleIdentifier(v5))
      {
        CFStringRef v6 = @"com.apple.fieldtest";
      }
      BOOL v7 = PHDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412546;
        id v11 = v1;
        __int16 v12 = 2112;
        CFStringRef v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ matches the field test code, launching the legacy field test app %@", (uint8_t *)&v10, 0x16u);
      }

      int v8 = [v4 sharedService];
      [v8 openApplication:v6 options:&__NSDictionary0__struct withResult:0];
    }
    else
    {
      id v5 = PHDefaultLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        PHLaunchFieldTestApplicationIfNecessaryForDestinationID_cold_1(v5);
      }
    }
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

void CTCarrierSettingsNewCarrierNotificationCallback(uint64_t a1, void *a2)
{
  id v2 = a2;
  PHVoicemailUIRequirementDidChange();
  [v2 _updateBottomTabs];
}

void sub_10006D52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006ECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000708A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007236C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100077F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007806C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10007BE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007D16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id RTTUIConversationViewControllerClass()
{
  if (RTTUIConversationViewControllerClass_onceToken != -1) {
    dispatch_once(&RTTUIConversationViewControllerClass_onceToken, &__block_literal_global_12);
  }
  id v0 = (void *)RTTUIConversationViewControllerClass_sRTTUIConversationViewControllerClass;

  return v0;
}

id RTTUIUtilitiesClass()
{
  if (RTTUIUtilitiesClass_onceToken != -1) {
    dispatch_once(&RTTUIUtilitiesClass_onceToken, &__block_literal_global_48);
  }
  id v0 = (void *)RTTUIUtilitiesClass_sRTTUIUtilitiesClass;

  return v0;
}

void sub_100088324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_100088B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _PHVoicemailNavigationController_HandleCTIndicatorsVoicemailNotification(uint64_t a1, void *a2)
{
  +[NSNotification notificationWithName:object:userInfo:](NSNotification, "notificationWithName:object:userInfo:");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [a2 _handleCTIndicatorsVoicemailNotification:v3];
}

uint64_t PhoneShouldShowBadge(unsigned __int8 a1, uint64_t a2)
{
  if (a1) {
    return a1 & (a2 != 0);
  }
  else {
    return 1;
  }
}

unint64_t PhoneAggregateBadges(uint64_t a1, uint64_t a2, int a3)
{
  return a1 & 0xFFFFFFFFFFFFFF00 | (a1 & (a3 << 31 >> 31));
}

void sub_10008ADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_10008BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100091008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000915EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

Class __getPSSimStatusCacheClass_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  if (!SettingsCellularLibraryCore_frameworkLibrary)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = __SettingsCellularLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = off_10027DBF0;
    uint64_t v5 = 0;
    SettingsCellularLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SettingsCellularLibraryCore_frameworkLibrary) {
    __getPSSimStatusCacheClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PSSimStatusCache");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getPSSimStatusCacheClass_block_invoke_cold_2();
  }
  getPSSimStatusCacheClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SettingsCellularLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SettingsCellularLibraryCore_frameworkLibrary = result;
  return result;
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t PHHasEnhancedVoicemail()
{
  int v0 = [UIApp launchedToTest];

  return _PHHasEnhancedVoicemail(v0);
}

BOOL PHShouldHideVoicemailUI()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 1;
  if ([UIApp showsPhoneVoicemail])
  {
    int v0 = _voicemailCheckQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = __PHShouldHideVoicemailUI_block_invoke;
    block[3] = &unk_10027C860;
    block[4] = &v4;
    dispatch_sync(v0, block);

    BOOL v1 = *((unsigned char *)v5 + 24) != 0;
  }
  else
  {
    BOOL v1 = 1;
    *((unsigned char *)v5 + 24) = 1;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A0BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __PHShouldHideVoicemailUI_block_invoke(uint64_t a1)
{
  BOOL result = _voicemailShouldBeHidden();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __PHShouldOptimisticallyHideVoicemailUI_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

id PHVoicemailCellDateFormatter()
{
  int v0 = (void *)__PHVoicemailUtilities_CellDateFormatter;
  if (!__PHVoicemailUtilities_CellDateFormatter)
  {
    id v1 = objc_alloc_init((Class)NSDateFormatter);
    uint64_t v2 = (void *)__PHVoicemailUtilities_CellDateFormatter;
    __PHVoicemailUtilities_CellDateFormatter = (uint64_t)v1;

    [(id)__PHVoicemailUtilities_CellDateFormatter setTimeStyle:1];
    [(id)__PHVoicemailUtilities_CellDateFormatter setDateStyle:3];
    int v0 = (void *)__PHVoicemailUtilities_CellDateFormatter;
  }

  return v0;
}

id PHVoicemailDetailPageDateFormatter()
{
  int v0 = (void *)__PHVoicemailUtilities_DetailPageDateFormatter;
  if (!__PHVoicemailUtilities_DetailPageDateFormatter)
  {
    id v1 = objc_alloc_init((Class)NSDateFormatter);
    uint64_t v2 = (void *)__PHVoicemailUtilities_DetailPageDateFormatter;
    __PHVoicemailUtilities_DetailPageDateFormatter = (uint64_t)v1;

    [(id)__PHVoicemailUtilities_DetailPageDateFormatter setTimeStyle:2];
    [(id)__PHVoicemailUtilities_DetailPageDateFormatter setDateStyle:3];
    int v0 = (void *)__PHVoicemailUtilities_DetailPageDateFormatter;
  }

  return v0;
}

id PHVoicemailDurationFormatter()
{
  if (PHVoicemailDurationFormatter_onceToken != -1) {
    dispatch_once(&PHVoicemailDurationFormatter_onceToken, &__block_literal_global_63);
  }
  int v0 = (void *)PHVoicemailDurationFormatter_voicemailDurationFormatter;

  return v0;
}

id PHVoicemailFormatTime(double a1)
{
  id v1 = &stru_100285990;
  if (a1 >= 0.0)
  {
    double v2 = a1;
  }
  else
  {
    id v1 = @"-";
    double v2 = -a1;
  }
  id v3 = v1;
  uint64_t v4 = PHVoicemailDurationFormatter();
  uint64_t v5 = [v4 stringFromTimeInterval:v2];

  uint64_t v6 = +[NSString stringWithFormat:@"%@%@", v3, v5];

  return v6;
}

UIColor *PHVoicemailTranscriptionColor()
{
  return +[UIColor colorWithRed:0.572549045 green:0.572549045 blue:0.572549045 alpha:1.0];
}

float PHVoicemailLowQualityConfidenceThresholdForTranscript()
{
  int v0 = PHPreferencesGetValue(@"VoicemailTranscriptionLowQualityConfidenceThreshold");
  id v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.6878;
  }

  return v3;
}

float PHVoicemailConfidenceThresholdForTranscript()
{
  int v0 = PHPreferencesGetValue(@"VoicemailTranscriptionConfidenceThreshold");
  id v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.45096;
  }

  return v3;
}

float PHVoicemailConfidenceThresholdForSegment()
{
  int v0 = PHPreferencesGetValue(@"VoicemailTranscriptionSegmentConfidenceThreshold");
  id v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.3;
  }

  return v3;
}

id PHVoicemailTranscriptAttributedPrefix()
{
  if (PHVoicemailTranscriptAttributedPrefix_onceToken != -1) {
    dispatch_once(&PHVoicemailTranscriptAttributedPrefix_onceToken, &__block_literal_global_86);
  }
  int v0 = (void *)PHVoicemailTranscriptAttributedPrefix_attributedPrefix;

  return v0;
}

id PHVoicemailTranscriptAttributedSuffix()
{
  if (PHVoicemailTranscriptAttributedSuffix_onceToken != -1) {
    dispatch_once(&PHVoicemailTranscriptAttributedSuffix_onceToken, &__block_literal_global_101);
  }
  int v0 = (void *)PHVoicemailTranscriptAttributedSuffix_attributedSuffix;

  return v0;
}

id PHVoicemailFormatTranscript(void *a1, int a2)
{
  id v3 = a1;
  id v4 = objc_alloc((Class)NSMutableAttributedString);
  uint64_t v5 = [v3 transcriptionString];
  uint64_t v6 = (void *)v5;
  if (v5) {
    CFStringRef v7 = (const __CFString *)v5;
  }
  else {
    CFStringRef v7 = &stru_100285990;
  }
  id v8 = [v4 initWithString:v7];

  uint64_t v9 = +[UIColor colorWithRed:0.572549045 green:0.572549045 blue:0.572549045 alpha:1.0];
  [v8 addAttribute:NSForegroundColorAttributeName value:v9 range:0, [v8 length]];

  int v10 = +[NSBundle mainBundle];
  uint64_t v44 = [v10 localizedStringForKey:@"VOICEMAIL_TRANSCRIPTION_LOW_CONFIDENCE_WORD_REPLACEMENT" value:&stru_100285990 table:@"General"];

  id v11 = +[NSBundle mainBundle];
  uint64_t v40 = [v11 localizedStringForKey:@"VOICEMAIL_TRANSCRIPTION_LOW_CONFIDENCE_WORD_REPLACEMENT_CHARACTER" value:&stru_100285990 table:@"General"];

  if (a2 == 1) {
    +[UIColor colorWithWhite:0.92 alpha:1.0];
  }
  else {
  char v43 = +[UIColor colorWithRed:0.572549045 green:0.572549045 blue:0.572549045 alpha:1.0];
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  unint64_t v39 = v3;
  id obj = [v3 segments];
  id v12 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = 0;
    char v15 = 0;
    uint64_t v16 = *(void *)v48;
    int v42 = a2;
    uint64_t v41 = v8;
    do
    {
      CFStringRef v17 = 0;
      id v45 = v13;
      do
      {
        if (*(void *)v48 != v16) {
          objc_enumerationMutation(obj);
        }
        __int16 v18 = *(void **)(*((void *)&v47 + 1) + 8 * (void)v17);
        if ([v18 confidenceRating])
        {
          if ([v18 confidenceRating] != (id)1) {
            goto LABEL_22;
          }
        }
        else
        {
          [v18 confidence];
          if (v30 >= PHVoicemailConfidenceThresholdForSegment())
          {
LABEL_22:
            char v15 = 0;
            goto LABEL_28;
          }
        }
        CFStringRef v19 = (char *)[v18 substringRange];
        uint64_t v21 = v20;
        uint64_t v22 = v14;
        Swift::Int v23 = &v19[-v14];
        if (((a2 != 1) & v15) != 0)
        {
          if (v23 && &v23[v20 + 1] < [v8 length])
          {
            uint64_t v24 = [v8 string];
            uint64_t v25 = [v24 substringWithRange:v23 - 1, 1];
            unsigned int v26 = [v25 isEqualToString:@" "];

            id v8 = v41;
            uint64_t v27 = [v41 string];
            id v28 = [v27 substringWithRange:&v23[v21]];

            unsigned int v29 = [v28 isEqualToString:@" "];
            v21 += v29 & v26;
            if ((v29 & v26) != 0) {
              --v23;
            }
            a2 = v42;
          }
          [v8 replaceCharactersInRange:v23 withString:v21];
        }
        else
        {
          if (a2 == 1)
          {
            id v32 = +[NSString string];
            id v33 = [v32 stringByPaddingToLength:v21 withString:v40 startingAtIndex:0];

            BOOL v34 = +[NSString stringWithFormat:@"%@⁠", v40];
            unint64_t v35 = [v33 stringByReplacingOccurrencesOfString:v40 withString:v34];
            id v31 = [v35 stringByTrimmingLastCharacter];

            id v8 = v41;
            a2 = v42;
          }
          else
          {
            id v31 = v44;
          }
          [v8 replaceCharactersInRange:v23 withString:v21];
          [v8 addAttribute:NSForegroundColorAttributeName value:v43 range:v23 length:[v31 length]];
          [v18 substringRange];
          uint64_t v44 = v31;
          uint64_t v21 = v36 - (void)[v31 length];
        }
        uint64_t v14 = v21 + v22;
        char v15 = 1;
        id v13 = v45;
LABEL_28:
        CFStringRef v17 = (char *)v17 + 1;
      }
      while (v13 != v17);
      id v13 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
    }
    while (v13);
  }

  id v37 = v8;
  return v37;
}

uint64_t PHVoicemailFeedbackReportingAvailable()
{
  int v0 = +[NSLocale currentLocale];
  id v1 = [v0 localeIdentifier];

  if ([v1 isEqualToString:@"en_CA"]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:@"en_US"];
  }

  return v2;
}

void sub_1000A1E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A2530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A3080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000ABED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ACCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000ACF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AD228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_1000AD3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AD908(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1000B1B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

uint64_t _pressesContainSelect(void *a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = a1;
  uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        if (objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * i), "type", (void)v6) == (id)4)
        {
          uint64_t v2 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v2;
}

void PHRecentCallDetailsViewResetFormattersBlock_block_invoke(id a1, NSNotification *a2)
{
  uint64_t v2 = (void *)sPHRecentCallDetailsViewCalendar;
  sPHRecentCallDetailsViewCalendar = 0;

  uint64_t v3 = (void *)sPHRecentCallDetailsViewDateFormatter;
  sPHRecentCallDetailsViewDateFormatter = 0;

  id v4 = (void *)sPHRecentCallDetailsViewTimeFormatter;
  sPHRecentCallDetailsViewTimeFormatter = 0;

  uint64_t v5 = (void *)sPHRecentCallDetailsViewNumberFormatter;
  sPHRecentCallDetailsViewNumberFormatter = 0;

  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &__block_literal_global_46);
}

void PHRecentCallDetailsViewResetFormattersBlock_block_invoke_2(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"PHRecentCallDetailsViewFormattersDidChangeNotification" object:0];
}

void sub_1000C00D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000C05E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C0D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C11C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C13BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C2158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_1000C2608(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C2A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v7);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_1000CF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CFD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D1528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PHOversizedLog()
{
  if (PHOversizedLog_onceToken != -1) {
    dispatch_once(&PHOversizedLog_onceToken, &__block_literal_global_44_0);
  }
  int v0 = (void *)PHOversizedLog_PHOversizedLog;

  return v0;
}

id PHOversizedLogQueue()
{
  if (PHOversizedLogQueue_onceToken != -1) {
    dispatch_once(&PHOversizedLogQueue_onceToken, &__block_literal_global_47_1);
  }
  int v0 = (void *)PHOversizedLogQueue_PHOversizedLogQueue;

  return v0;
}

uint64_t MPVoicemailTableViewController.isAccountProvisioningRequired.getter()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Defaults.isInternalInstall == 1)
  {
    char v1 = specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD000000000000014, 0x800000010023D360, 0, 0);
    if (v1) {
      return 1;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(void *)(v2 + 64) = 0;
    *(unsigned char *)(v2 + 72) = 2;
    swift_willThrow();
    swift_errorRelease();
  }
  id v3 = [v0 voicemailController];
  if (!v3) {
    goto LABEL_21;
  }
  id v4 = v3;
  id v5 = [v3 accountManager];

  id v6 = [v5 accounts];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMAccount);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62)) {
    goto LABEL_8;
  }
  while (2)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (!result) {
      goto LABEL_23;
    }
LABEL_9:
    if (v8 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      id v12 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v7 + 8 * v10 + 32);
      id v13 = v12;
      id v14 = [v12 handle];

      if (v14) {
        break;
      }

LABEL_12:
      if (v8 == ++v10) {
        goto LABEL_24;
      }
    }
    unsigned __int8 v15 = [v13 isProvisioned];

    if (v15) {
      goto LABEL_12;
    }
    if (!__OFADD__(v11++, 1)) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_21:
    unint64_t v7 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
      continue;
    }
    break;
  }
LABEL_8:
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v8) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v11 = 0;
LABEL_24:
  swift_bridgeObjectRelease_n();
  return v11 != 0;
}

Swift::Void __swiftcall MPVoicemailTableViewController.startObservingPreferences()()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Defaults.isInternalInstall == 1)
  {
    char v1 = (void *)swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    id v2 = specialized Defaults.subscribe(to:onChange:)(2u, (uint64_t)partial apply for closure #1 in MPVoicemailTableViewController.startObservingPreferences(), v1);
    swift_release_n();
    id v3 = v2;
    id v4 = [v0 observations];
    [v4 insertObject:v3 atIndex:0];
  }
}

void closure #1 in MPVoicemailTableViewController.startObservingPreferences()()
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v1 = Strong;
    [Strong loadTableHeaderView];
  }
}

Swift::Void __swiftcall PHVoicemailNavigationController.stopObservingPreferences()()
{
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableArray);
  id v1 = (id)NSArray.init(arrayLiteral:)();
  [v0 setObservations:v1];
}

Swift::Void __swiftcall MPVoicemailTableViewController.voicemailMessageTableViewCell(tableViewCell:dialRequestButtonTappedForRowWithIndexPath:)(PHVoicemailMessageTableViewCell *tableViewCell, NSIndexPath dialRequestButtonTappedForRowWithIndexPath)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [v3 messageAtIndex:[objc_class row](dialRequestButtonTappedForRowWithIndexPath.super.isa, "row")];
  if (!v13)
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.mobilePhone);
    uint64_t v54 = dialRequestButtonTappedForRowWithIndexPath.super.isa;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 134217984;
      aBlock[0] = (uint64_t)[(objc_class *)v54 row];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to get the voicemail message at index: %ld", v38, 0xCu);
      swift_slowDealloc();

      return;
    }

    goto LABEL_23;
  }
  id v14 = v13;
  id v15 = [v3 voicemailController];
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = [v15 callProviderManager];

    if (v17)
    {
      uint64_t v52 = v7;
      id v53 = [objc_allocWithZone((Class)TUFeatureFlags) init];
      uint64_t v18 = one-time initialization token for mobilePhone;
      uint64_t v54 = (objc_class *)v17;
      swift_unknownObjectRetain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.mobilePhone);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Requesting to stop playback to initiate call", v22, 2u);
        swift_slowDealloc();
      }

      [v3 voicemailMessageTableViewCell:tableViewCell didRequestPlayState:0];
      id v23 = VoicemailTableViewModel.dialRequest.getter(v53, v54, v14);
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          uint64_t v50 = swift_slowAlloc();
          uint64_t v55 = (uint64_t)v24;
          aBlock[0] = v50;
          *(_DWORD *)uint64_t v27 = 136315138;
          v49[1] = v27 + 4;
          type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for TUDialRequest);
          id v28 = v24;
          id v51 = v24;
          id v29 = v28;
          uint64_t v30 = String.init<A>(reflecting:)();
          uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v24 = v51;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Initiating voicemail call with dial request: %s", v27, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v43 = v52;
        id v44 = [self sharedApplication];
        id v45 = [v24 URL];
        if (v45)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v12, v9, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v12, 0, 1, v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v12, 1, v6) == 1)
          {
            id v45 = 0;
          }
          else
          {
            URL._bridgeToObjectiveC()(v46);
            id v45 = v47;
            (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v6);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v12, 1, 1, v6);
        }
        aBlock[4] = (uint64_t)PHVoicemailInboxListViewController.refreshTableHeaderView();
        aBlock[5] = 0;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        aBlock[3] = (uint64_t)&block_descriptor;
        long long v48 = _Block_copy(aBlock);
        [v44 openURL:v45 withCompletionHandler:v48];
        _Block_release(v48);
        swift_unknownObjectRelease_n();

        return;
      }
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        int v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to dial back, dialRequest is nil", v42, 2u);
        swift_slowDealloc();

        swift_unknownObjectRelease_n();
        unint64_t v39 = (objc_class *)v53;
        goto LABEL_24;
      }

      swift_unknownObjectRelease_n();
LABEL_23:
      unint64_t v39 = v54;
LABEL_24:

      return;
    }
  }
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.mobilePhone);
  uint64_t v54 = (objc_class *)Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v54, v33))
  {
    BOOL v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v54, v33, "Failed to dial back, callProviderManager is nil", v34, 2u);
    swift_slowDealloc();
    swift_unknownObjectRelease();
    goto LABEL_23;
  }

  swift_unknownObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

Swift::Void __swiftcall MPVoicemailTableViewController.scrollViewDidEndDecelerating(_:)(UIScrollView a1)
{
  [v1 reloadDataIfNeeded];
}

Swift::Void __swiftcall MPVoicemailTableViewController.scrollViewDidEndDragging(_:willDecelerate:)(UIScrollView _, Swift::Bool willDecelerate)
{
  if (!willDecelerate) {
    [v2 reloadDataIfNeeded];
  }
}

uint64_t closure #1 in MPVoicemailTableViewController.configureLegacyVoicemailCell(_:for:showLabel:onCallTapped:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for LegacyVoicemailCellView();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  id v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v13 = a1;
  v13[8] = a2;
  *((void *)v13 + 2) = a3;
  *((void *)v13 + 3) = a4;
  id v14 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  *id v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  outlined init with take of LegacyVoicemailCellView((uint64_t)v13, a5);
  id v15 = a1;
  return swift_retain();
}

uint64_t variable initialization expression of SuggestionsSearchTableViewController.logger()
{
  return Logger.init(subsystem:category:)();
}

id variable initialization expression of VoicemailSearchViewCell.metadataView()
{
  return variable initialization expression of VoicemailSearchViewCell.metadataView((uint64_t (*)(void))type metadata accessor for VoicemailSearchMetadataView);
}

uint64_t variable initialization expression of SuggestionsSearchTableViewController.searchText()
{
  return 0;
}

id variable initialization expression of VoicemailSearchViewCell.contactStore()
{
  id v0 = objc_allocWithZone((Class)CNContactStore);

  return [v0 init];
}

char *variable initialization expression of VoicemailSearchViewCell.unreadIndicatorImageView()
{
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  double v0 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
  id v1 = objc_allocWithZone((Class)type metadata accessor for VoicemailUnreadIndicator());
  return VoicemailUnreadIndicator.init(diameter:)(v0);
}

id variable initialization expression of VoicemailSearchMetadataView.titleStack()
{
  id v0 = objc_allocWithZone((Class)UIStackView);

  return [v0 init];
}

id variable initialization expression of VoicemailSearchMetadataView.dateLabel()
{
  id v0 = objc_allocWithZone((Class)UIDateLabel);

  return [v0 init];
}

id variable initialization expression of VoicemailSearchMetadataView.badgeView()
{
  id v0 = objc_allocWithZone((Class)TPBadgeView);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithTitle:v1];

  return v2;
}

char *variable initialization expression of VoicemailSearchMetadataView.unreadIndicatorImageView()
{
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  double v0 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
  if (one-time initialization token for unreadIndicatorBorderWidth != -1) {
    swift_once();
  }
  double v1 = v0
     - (*(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth
      + *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth);
  id v2 = objc_allocWithZone((Class)type metadata accessor for VoicemailUnreadIndicator());
  return VoicemailUnreadIndicator.init(diameter:)(v1);
}

uint64_t variable initialization expression of RecentsCellConfigurator.cellIdentifier()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t variable initialization expression of FTMessage.isDirty()
{
  return 0;
}

id variable initialization expression of OrientationMonitorAccelerometer.accelerometer()
{
  id v0 = objc_allocWithZone((Class)BKSAccelerometer);

  return [v0 init];
}

unint64_t lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Defaults.Error and conformance Defaults.Error;
  if (!lazy protocol witness table cache variable for type Defaults.Error and conformance Defaults.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Defaults.Error and conformance Defaults.Error);
  }
  return result;
}

uint64_t variable initialization expression of RecentCallsListView._editMode@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of RecentCallView._editMode(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content, a1);
}

uint64_t key path getter for EnvironmentValues.editMode : EnvironmentValues()
{
  return EnvironmentValues.editMode.getter();
}

uint64_t key path setter for EnvironmentValues.editMode : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
  __chkstk_darwin(v2 - 8);
  outlined init with copy of (String, Any)(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Binding<EditMode>?);
  return EnvironmentValues.editMode.setter();
}

uint64_t variable initialization expression of RecentCallView._sizeCategory@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of RecentCallView._editMode((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content, a1);
}

uint64_t key path getter for EnvironmentValues.sizeCategory : EnvironmentValues()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t key path setter for EnvironmentValues.sizeCategory : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentSizeCategory();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.sizeCategory.setter();
}

void *variable initialization expression of SuggestionsSearchTableViewController.suggestions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of SearchManager.serialQueue()
{
  return variable initialization expression of SearchManager.serialQueue((void (*)(void))&static DispatchQoS.userInteractive.getter, 0xD000000000000023, 0x800000010023D490);
}

uint64_t variable initialization expression of SearchManager.kCSQueryFlags()
{
  return 1952741219;
}

id variable initialization expression of SearchManager.featureFlags()
{
  id v0 = objc_allocWithZone((Class)TUFeatureFlags);

  return [v0 init];
}

id variable initialization expression of SearchManager.userQueryContext()
{
  id v0 = objc_allocWithZone((Class)CSUserQueryContext);

  return [v0 init];
}

unint64_t variable initialization expression of SearchManager.subscriptionsLabelIDByLabel()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

id variable initialization expression of SearchManager.suggestion()
{
  id v0 = [self emptySuggestion];

  return v0;
}

id variable initialization expression of SearchManager.callProviderManager()
{
  type metadata accessor for ApplicationServices();
  id v0 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v1 = [v0 callProviderManager];

  return v1;
}

uint64_t variable initialization expression of ObservableRecentsController._contactsChangedDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of ObservableRecentsController._contactsChangedDate((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of ObservableRecentsController.localizedRecentCallInfoCache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValueCache<String, ObservableRecentsController.LocalizedRecentCallInfo>);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)NSCache) init];
  return v0;
}

double MPRTTTranscriptionMessage.confidence.getter()
{
  return 1.0;
}

uint64_t variable initialization expression of FTMessage.$__lazy_storage_$_dirtyFolder()
{
  return 0;
}

uint64_t variable initialization expression of FTMessage.$__lazy_storage_$_isDeleted()
{
  return 2;
}

uint64_t variable initialization expression of FTMessage.$__lazy_storage_$_transcriptURL@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of FTMessage.$__lazy_storage_$_dataURL(&demangling cache variable for type metadata for URL?, a1);
}

uint64_t variable initialization expression of FTMessage.$__lazy_storage_$_transcriptData@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of FTMessage.$__lazy_storage_$_dataURL(&demangling cache variable for type metadata for Transcript?, a1);
}

uint64_t variable initialization expression of FTMessage.$__lazy_storage_$_dataURL@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of FTMessage.$__lazy_storage_$_transcript()
{
  return 1;
}

unint64_t variable initialization expression of CachedVoicemailManager.state()
{
  return 0x8000000000000000;
}

uint64_t variable initialization expression of AccelerometerOrientationMonitorWrapper.sourceName()
{
  return 0x6F72656C65636341;
}

uint64_t variable initialization expression of OpenMobilePhoneAppDeepLinks._target()
{
  uint64_t v17 = type metadata accessor for InputConnectionBehavior();
  uint64_t v0 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<MobilePhoneAppDeepLinks>);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  char v18 = 5;
  uint64_t v14 = type metadata accessor for IntentDialog();
  id v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  v15(v6, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v17);
  lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t variable initialization expression of ContactSearchTableViewController.idsQueryPageSize()
{
  return 20;
}

uint64_t variable initialization expression of ContactSearchTableViewController.currentIDSStatusPage()
{
  return -1;
}

uint64_t variable initialization expression of ContactSearchTableViewController.contactIDSQuerySubject()
{
  return variable initialization expression of ContactSearchTableViewController.contactIDSQuerySubject(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
}

uint64_t variable initialization expression of LegacyVoicemailCellView._colorScheme@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of RecentCallView._editMode(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, a1);
}

uint64_t variable initialization expression of ReportTableViewCell.$__lazy_storage_$_cellContentConfiguration@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of ObservableRecentsController._contactsChangedDate((uint64_t (*)(void))&type metadata accessor for UIListContentConfiguration, a1);
}

id variable initialization expression of ValueCache.cache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCache);
  type metadata accessor for BoxedKey();
  type metadata accessor for BoxedValue();
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v0 init];
}

id NSCache.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v0 init];
}

uint64_t variable initialization expression of CallsSearchController.sectionTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x534C4C4143;
  v1._object = (void *)0xE500000000000000;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of SuggestionsSearchController.sectionIndex()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t SuggestionsSearchController.maximumNumberOfRowsInSection.getter()
{
  return 5;
}

uint64_t variable initialization expression of RecentCallView._editMode@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(a1);

  return swift_storeEnumTagMultiPayload();
}

id variable initialization expression of DialerContactResultButtonView.horizontalPadding()
{
  id v0 = self;

  return [v0 horizontalPadding];
}

uint64_t variable initialization expression of DialerContactResultButtonView.logger()
{
  return Logger.init(subsystem:category:)();
}

unint64_t variable initialization expression of SearchMetrics.startTimeDict()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of SearchMetrics.searchLatencyDict()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of SearchMetrics.searchLatencyDictQueue()
{
  return variable initialization expression of SearchManager.serialQueue((void (*)(void))&static DispatchQoS.unspecified.getter, 0xD000000000000023, 0x800000010023D500);
}

id variable initialization expression of SearchMetrics.analyticsLogger()
{
  return variable initialization expression of VoicemailSearchViewCell.metadataView((uint64_t (*)(void))type metadata accessor for MPAnalyticsLogger);
}

id variable initialization expression of VoicemailSearchViewCell.metadataView(uint64_t (*a1)(void))
{
  id v1 = objc_allocWithZone((Class)a1(0));

  return [v1 init];
}

uint64_t variable initialization expression of VoicemailSearchTableViewController.folderName()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x49414D4543494F56;
  v1._object = (void *)0xEA0000000000534CLL;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t VoicemailsSearchController.maximumNumberOfRowsInSection.getter()
{
  return 3;
}

uint64_t variable initialization expression of FaceTimeVoicemailManager.messagesChangedPublisher()
{
  return variable initialization expression of ContactSearchTableViewController.contactIDSQuerySubject(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
}

_UNKNOWN **variable initialization expression of FaceTimeVoicemailManager.providers()
{
  return &outlined read-only object #0 of variable initialization expression of FaceTimeVoicemailManager.providers;
}

_UNKNOWN **variable initialization expression of FaceTimeVoicemailManager.messageTypes()
{
  return &outlined read-only object #0 of variable initialization expression of FaceTimeVoicemailManager.messageTypes;
}

uint64_t variable initialization expression of FaceTimeVoicemailManager.operationQueue()
{
  uint64_t v0 = type metadata accessor for TaskPriority();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for TaskQueue();
  static TaskPriority.high.getter();
  return TaskQueue.__allocating_init(priority:)();
}

uint64_t default argument 1 of FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MessageStoreController();
  uint64_t result = static MessageStoreController.shared.getter();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for MessageStoreController;
  *a1 = result;
  return result;
}

void variable initialization expression of CallReportingViewModel.recentsController()
{
  id v0 = [self sharedApplication];
  self;
  id v1 = [(id)swift_dynamicCastObjCClassUnconditional() recentsController];

  if (!v1) {
    __break(1u);
  }
}

uint64_t variable initialization expression of CallReportingViewModel.reportAlertTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D530;
  v1._uint64_t countAndFlagsBits = 0xD000000000000020;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportAlertReport()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D580;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportBlockFTAlertTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D5A0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000026;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportAlertCancel()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D560;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportBlockFTAlertBlock()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D5D0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000021;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportBlockFTAlertReportBlock()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D600;
  v1._uint64_t countAndFlagsBits = 0xD000000000000028;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.blockAllButtonTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D630;
  v1._uint64_t countAndFlagsBits = 0xD000000000000025;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.blockAllAlertTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D660;
  v1._uint64_t countAndFlagsBits = 0xD000000000000034;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.blockUnknownButtonTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D6A0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000029;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportInitiatorAlertTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D6D0;
  v1._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportInitiatorAlert()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D700;
  v1._uint64_t countAndFlagsBits = 0xD000000000000025;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportGroupInitiatorAlertTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D730;
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t variable initialization expression of CallReportingViewModel.reportLocalizedTitle()
{
  id v0 = [self mainBundle];
  v6._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x54524F504552;
  v1._object = (void *)0xE600000000000000;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

id variable initialization expression of ContactSearchViewCell.contactSummarizer()
{
  id v0 = objc_allocWithZone((Class)CNContactMatchSummarizer);

  return [v0 init];
}

id variable initialization expression of VoicemailSearchViewCell.avatarViewControllerSettings()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 contactStore];

  id v2 = [self settingsWithContactStore:v1 threeDTouchEnabled:0];
  return v2;
}

id variable initialization expression of ContactSearchViewCell.callButton()
{
  id v0 = objc_allocWithZone((Class)TPAccessoryButton);

  return [v0 init];
}

id variable initialization expression of ContactSearchViewCell.contact()
{
  id v0 = objc_allocWithZone((Class)CNContact);

  return [v0 init];
}

_UNKNOWN **variable initialization expression of SuggestionsSearchController.RecentsSupportedSuggestionTypes()
{
  return &outlined read-only object #0 of variable initialization expression of SuggestionsSearchController.RecentsSupportedSuggestionTypes;
}

uint64_t variable initialization expression of SearchTableViewDiffableDataSource.text()
{
  return 0;
}

uint64_t variable initialization expression of ObservableRecentsController._contactsChangedDate@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of VoicemailBadgeCalculator.currentBadge()
{
  return CurrentValueSubject.init(_:)();
}

id variable initialization expression of SearchHeaderCell.titleStackView()
{
  id v0 = [objc_allocWithZone((Class)UIStackView) init];
  [v0 setSpacing:0.0];
  [v0 setDistribution:3];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v0;
}

id variable initialization expression of SearchHeaderCell.titleLabel()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return [v0 init];
}

uint64_t variable initialization expression of VVMVoicemailCountSource.count()
{
  return 0;
}

uint64_t variable initialization expression of ContactSearchTableViewController.contactIDSQuerySubject(uint64_t *a1)
{
  return PassthroughSubject.init()();
}

void *variable initialization expression of SearchTableViewDiffableDataSource.searchCompleteControllerSet()
{
  return &_swiftEmptySetSingleton;
}

uint64_t static Color.tertiary.getter()
{
  id v0 = [self tertiaryLabelColor];

  return Color.init(_:)();
}

double variable initialization expression of SearchFooterCell.footerHeight()
{
  return 0.0;
}

double variable initialization expression of PHRingLayer.lineWidth()
{
  return 8.0;
}

id variable initialization expression of PHRingLayer.fillColor()
{
  return variable initialization expression of PHRingLayer.fillColor((SEL *)&selRef_systemDarkGreenColor);
}

id variable initialization expression of PHRingLayer.strokeColor()
{
  return variable initialization expression of PHRingLayer.fillColor((SEL *)&selRef_systemGreenColor);
}

id variable initialization expression of PHRingLayer.fillColor(SEL *a1)
{
  id v1 = [self *a1];
  id v2 = [v1 CGColor];

  return v2;
}

uint64_t VoiceMailAnalyticsLogger.init()@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhone);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t variable initialization expression of VMDVoicemailCountSource.countChangedPublisher()
{
  return PassthroughSubject.init()();
}

uint64_t variable initialization expression of SpringBoardOrientationObserverWrapper.sourceName()
{
  return 0x6F42676E69727053;
}

uint64_t variable initialization expression of PHCFNotifyObserver.token()
{
  return 0x100000000;
}

uint64_t variable initialization expression of ContactSearchManager.accessQueue()
{
  return variable initialization expression of SearchManager.serialQueue((void (*)(void))&static DispatchQoS.userInitiated.getter, 0xD00000000000002ALL, 0x800000010023D760);
}

uint64_t variable initialization expression of SearchManager.serialQueue(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  v11[1] = a2;
  v11[2] = a3;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  a1();
  v11[3] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of ContactSearchManager.logger()
{
  return Logger.init(subsystem:category:)();
}

uint64_t variable initialization expression of RecentCallView._recentsController()
{
  type metadata accessor for ObservableRecentsController(0);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);

  return EnvironmentObject.init()();
}

id variable initialization expression of SearchViewController.tableView()
{
  id v0 = objc_allocWithZone((Class)UITableView);

  return [v0 initWithFrame:0.0 style:0.0];
}

uint64_t variable initialization expression of SearchViewController.throttle()
{
  return Throttle.init()();
}

uint64_t variable initialization expression of ApplicationServices.voicemailManager()
{
  type metadata accessor for MessageStoreController();
  uint64_t v0 = static MessageStoreController.shared.getter();
  type metadata accessor for FaceTimeVoicemailManager(0);
  uint64_t v1 = swift_allocObject();
  return specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)((uint64_t)closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager, 0, v0, v1);
}

id variable initialization expression of SearchFooterCell.footerLabel()
{
  id v0 = [self mainScreen];
  [v0 bounds];
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;

  v19.origin.x = v2;
  v19.origin.y = v4;
  v19.size.width = v6;
  v19.size.height = v8;
  CGRectGetWidth(v19);
  double v9 = CGRectMake();
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  id v16 = objc_allocWithZone((Class)UILabel);

  return [v16 initWithFrame:v9, v11, v13, v15];
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _CSSuggestionTokenKind(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PHTabViewType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PHTabViewType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIFontWeight()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIFontWeight@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIContentSizeCategory(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIContentSizeCategory(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIContentSizeCategory@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CHHandleType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIContentSizeCategory()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController((unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UIFontTextStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontTextStyle()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance UIFontWeight@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double protocol witness for RawRepresentable.rawValue.getter in conformance UIFontWeight@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontWeight()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorAttributeName()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UIContentSizeCategory@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorTraitKey()
{
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontTextStyle(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontWeight()
{
  return Double.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UIFontWeight()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIFontWeight()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributedStringKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIFontWeight(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    double v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    double v10 = (char *)&_swiftEmptyArrayStorage;
  }
  double v12 = v10 + 32;
  double v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a4)
  {
    id v8 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 initWithSuiteName:v9];

    if (!v10)
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      swift_allocError();
      *(void *)uint64_t v13 = a3;
      *(void *)(v13 + 8) = v4;
      *(unsigned char *)(v13 + 72) = 0;
      swift_willThrow();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = [objc_allocWithZone((Class)NSUserDefaults) init];
  }
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v18, (uint64_t)v20);
  outlined init with copy of (String, Any)((uint64_t)v20, (uint64_t)&v18, &demangling cache variable for type metadata for Any?);
  if (*((void *)&v19 + 1))
  {
    if ((swift_dynamicCast() & 1) == 0)
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      swift_allocError();
      double v15 = v14;
      *double v14 = a1;
      v14[1] = a2;
      v14[2] = a3;
      v14[3] = v4;
      outlined init with copy of (String, Any)((uint64_t)v20, (uint64_t)(v14 + 4), &demangling cache variable for type metadata for Any?);
      v15[8] = &type metadata for Bool;
      *((unsigned char *)v15 + 72) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();

      outlined destroy of Any?((uint64_t)v20);
      return v4;
    }
    uint64_t v4 = v17 & 1;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v18);
    uint64_t v4 = 2;
  }

  outlined destroy of Any?((uint64_t)v20);
  return v4;
}

{
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  long long v18;
  long long v19;
  unsigned char v20[32];

  uint64_t v4 = a4;
  if (a4)
  {
    id v8 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 initWithSuiteName:v9];

    if (!v10)
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      swift_allocError();
      *(void *)uint64_t v13 = a3;
      *(void *)(v13 + 8) = v4;
      *(unsigned char *)(v13 + 72) = 0;
      swift_willThrow();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = [objc_allocWithZone((Class)NSUserDefaults) init];
  }
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v18, (uint64_t)v20);
  outlined init with copy of (String, Any)((uint64_t)v20, (uint64_t)&v18, &demangling cache variable for type metadata for Any?);
  if (*((void *)&v19 + 1))
  {
    if ((swift_dynamicCast() & 1) == 0)
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      swift_allocError();
      double v15 = v14;
      *double v14 = a1;
      v14[1] = a2;
      v14[2] = a3;
      v14[3] = v4;
      outlined init with copy of (String, Any)((uint64_t)v20, (uint64_t)(v14 + 4), &demangling cache variable for type metadata for Any?);
      v15[8] = &type metadata for String;
      *((unsigned char *)v15 + 72) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();

      outlined destroy of Any?((uint64_t)v20);
      return v4;
    }
    uint64_t v4 = v17;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v18);
    uint64_t v4 = 0;
  }

  outlined destroy of Any?((uint64_t)v20);
  return v4;
}

uint64_t sub_1000D91D8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MPVoicemailTableViewController.startObservingPreferences()()
{
}

uint64_t specialized MPVoicemailTableViewController.configureLegacyVoicemailCell(_:for:showLabel:onCallTapped:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingConfiguration<LegacyVoicemailCellView, EmptyView>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  double v15 = &v18[-v14];
  uint64_t v19 = a2;
  char v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  type metadata accessor for LegacyVoicemailCellView();
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type LegacyVoicemailCellView and conformance LegacyVoicemailCellView, (void (*)(uint64_t))type metadata accessor for LegacyVoicemailCellView);
  UIHostingConfiguration<>.init(content:)();
  static Edge.Set.leading.getter();
  UIHostingConfiguration.margins(_:_:)();
  id v16 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  static Edge.Set.trailing.getter();
  v23[3] = v9;
  v23[4] = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type UIHostingConfiguration<LegacyVoicemailCellView, EmptyView> and conformance UIHostingConfiguration<A, B>, &demangling cache variable for type metadata for UIHostingConfiguration<LegacyVoicemailCellView, EmptyView>);
  __swift_allocate_boxed_opaque_existential_1(v23);
  UIHostingConfiguration.margins(_:_:)();
  v16(v15, v9);
  return UITableViewCell.contentConfiguration.setter();
}

uint64_t lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks()
{
  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks);
  }
  return result;
}

double CGRectMake()
{
  return 0.0;
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

void type metadata accessor for _CSSuggestionTokenKind(uint64_t a1)
{
}

void type metadata accessor for UIFontTextStyle(uint64_t a1)
{
}

void type metadata accessor for UIImageSymbolScale(uint64_t a1)
{
}

void type metadata accessor for VMTranscriptConfidenceRating(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneBadge(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneBadge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for PhoneBadge(uint64_t a1)
{
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
}

void type metadata accessor for PHTabViewType(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in UIContentSizeCategory()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIContentSizeCategory()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
}

uint64_t base witness table accessor for Equatable in UIContentSizeCategory()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in UIFontTextStyle()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontTextStyle()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
}

uint64_t base witness table accessor for Equatable in UIFontTextStyle()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000D9AE4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()(*(void *)(v0 + 16));
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  unsigned int v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in MPVoicemailTableViewController.configureLegacyVoicemailCell(_:for:showLabel:onCallTapped:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in MPVoicemailTableViewController.configureLegacyVoicemailCell(_:for:showLabel:onCallTapped:)(*(void **)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of LegacyVoicemailCellView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyVoicemailCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for UIFontWeight(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorTraitKey(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorAttributeName(uint64_t a1)
{
}

void type metadata accessor for CGColorRef(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, type metadata accessor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for RawRepresentable in UIFontWeight()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontWeight()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in UIFontWeight()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void AccelerometerOrientationMonitorWrapper.wrapped.setter()
{
}

void *VoicemailSearchViewCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static VoicemailSearchViewCell.reuseIdentifier;
}

unint64_t static VoicemailSearchViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000017;
}

uint64_t key path getter for VoicemailSearchViewCell.callButtonTapHandler : VoicemailSearchViewCell@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  char v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    int64_t v7 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    int64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for VoicemailSearchViewCell.callButtonTapHandler : VoicemailSearchViewCell(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  int64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *int64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t VoicemailSearchViewCell.callButtonTapHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1);
  return v2;
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t VoicemailSearchViewCell.callButtonTapHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

uint64_t (*VoicemailSearchViewCell.callButtonTapHandler.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t VoicemailSearchViewCell.commonConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___commonConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___commonConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___commonConstraints];
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_100205390;
    uint64_t v4 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarView];
    id v5 = [v4 topAnchor];
    id v6 = [v3 contentView];
    id v7 = [v6 topAnchor];

    if (one-time initialization token for verticalLayoutMargin != -1) {
      swift_once();
    }
    id v8 = [v5 constraintGreaterThanOrEqualToAnchor:v7 constant:*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];

    *(void *)(v2 + 32) = v8;
    id v9 = [v4 heightAnchor];
    if (one-time initialization token for avatarRadius != -1) {
      swift_once();
    }
    id v10 = [v9 constraintEqualToConstant:*(double *)&static SearchLayout.CellSpacingConstants.avatarRadius];

    *(void *)(v2 + 40) = v10;
    uint64_t v11 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView];
    id v12 = [v11 topAnchor];
    id v13 = [v3 contentView];
    id v14 = [v13 topAnchor];

    id v15 = [v12 constraintEqualToAnchor:v14 constant:*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];
    *(void *)(v2 + 48) = v15;
    id v16 = [v11 trailingAnchor];
    id v17 = [v3 contentView];
    id v18 = [v17 layoutMarginsGuide];

    id v19 = [v18 trailingAnchor];
    id v20 = [v16 constraintEqualToAnchor:v19];

    *(void *)(v2 + 56) = v20;
    uint64_t v21 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView];
    id v22 = [v21 leadingAnchor];
    id v23 = [v11 leadingAnchor];
    id v24 = [v22 constraintEqualToAnchor:v23];

    *(void *)(v2 + 64) = v24;
    id v25 = [v21 trailingAnchor];
    id v26 = [v11 trailingAnchor];
    id v27 = [v25 constraintEqualToAnchor:v26];

    *(void *)(v2 + 72) = v27;
    specialized Array._endMutation()();
    *(void *)&v3[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VoicemailSearchViewCell.axConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___axConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___axConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___axConstraints];
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1002053A0;
    id v4 = [*(id *)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView] leadingAnchor];
    id v5 = [v3 contentView];
    id v6 = [v5 layoutMarginsGuide];

    id v7 = [v6 leadingAnchor];
    id v8 = [v4 constraintEqualToAnchor:v7];

    *(void *)(v2 + 32) = v8;
    specialized Array._endMutation()();
    *(void *)&v3[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VoicemailSearchViewCell.nonAXConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___nonAXConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___nonAXConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___nonAXConstraints];
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_100205390;
    id v4 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarView];
    id v5 = [v4 leadingAnchor];
    id v6 = [v3 contentView];
    id v7 = [v6 layoutMarginsGuide];

    id v8 = [v7 leadingAnchor];
    id v9 = [v5 constraintEqualToAnchor:v8];

    *(void *)(v2 + 32) = v9;
    id v10 = [v4 widthAnchor];
    if (one-time initialization token for avatarRadius != -1) {
      swift_once();
    }
    id v11 = [v10 constraintEqualToConstant:*(double *)&static SearchLayout.CellSpacingConstants.avatarRadius];

    *(void *)(v2 + 40) = v11;
    id v12 = [v4 centerYAnchor];
    id v26 = *(id *)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView];
    id v13 = [v26 centerYAnchor];
    id v14 = [v12 constraintEqualToAnchor:v13];

    *(void *)(v2 + 48) = v14;
    id v15 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView];
    id v16 = [v15 leadingAnchor];
    id v17 = [v4 leadingAnchor];
    if (one-time initialization token for unreadIndicatorBorderWidth != -1) {
      swift_once();
    }
    id v18 = [v16 constraintEqualToAnchor:v17 constant:-*(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth];

    *(void *)(v2 + 56) = v18;
    id v19 = [v15 bottomAnchor];
    id v20 = [v4 bottomAnchor];
    id v21 = [v19 constraintEqualToAnchor:v20 constant:*(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth];

    *(void *)(v2 + 64) = v21;
    id v22 = [v26 leadingAnchor];
    id v23 = [v4 trailingAnchor];
    if (one-time initialization token for gridColumnSpacing != -1) {
      swift_once();
    }
    id v24 = [v22 constraintEqualToAnchor:v23 constant:*(double *)&static SearchLayout.CellSpacingConstants.gridColumnSpacing];

    *(void *)(v2 + 72) = v24;
    specialized Array._endMutation()();
    *(void *)&v3[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VoicemailSearchViewCell.transcriptViewVisibleConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewVisibleConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewVisibleConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewVisibleConstraints];
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1002053B0;
    id v4 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView];
    id v5 = [v4 bottomAnchor];
    id v6 = [v3 contentView];
    id v7 = [v6 bottomAnchor];

    if (one-time initialization token for verticalLayoutMargin != -1) {
      swift_once();
    }
    id v8 = [v5 constraintEqualToAnchor:v7 constant:-*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];

    *(void *)(v2 + 32) = v8;
    id v9 = [v4 topAnchor];
    id v10 = [*(id *)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView] bottomAnchor];
    id v11 = [v9 constraintEqualToAnchor:v10 constant:4.0];

    *(void *)(v2 + 40) = v11;
    specialized Array._endMutation()();
    *(void *)&v3[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VoicemailSearchViewCell.transcriptViewHiddenConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewHiddenConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewHiddenConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewHiddenConstraints];
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1002053A0;
    id v4 = [*(id *)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView] bottomAnchor];
    id v5 = [v3 contentView];
    id v6 = [v5 bottomAnchor];

    if (one-time initialization token for verticalLayoutMargin != -1) {
      swift_once();
    }
    id v7 = [v4 constraintEqualToAnchor:v6 constant:-*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];

    *(void *)(v2 + 32) = v7;
    specialized Array._endMutation()();
    *(void *)&v3[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

BOOL VoicemailSearchViewCell.shouldShowTranscriptView.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  id v3 = [v2 transcriptViewModel];
  if (!v3)
  {
LABEL_6:

    return 0;
  }
  id v4 = v3;
  if (([v2 showsTranscriptionView] & 1) == 0
    || ([v2 showsRestrictedAlertView] & 1) != 0)
  {

    goto LABEL_6;
  }
  id v6 = [v4 confidence];

  return v6 != 0;
}

id SuggestionsSearchViewCell.__allocating_init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (a3)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithStyle:a1 reuseIdentifier:v6];

  return v7;
}

id VoicemailSearchViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v7 = v3;
  Logger.init(subsystem:category:)();
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView;
  *(void *)&v7[v8] = [objc_allocWithZone((Class)type metadata accessor for VoicemailSearchMetadataView()) init];
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView;
  *(void *)&v7[v9] = [objc_allocWithZone((Class)UILabel) init];
  id v10 = &v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler];
  *(void *)id v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item] = 0;
  uint64_t v11 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarViewControllerSettings;
  id v12 = [self sharedInstance];
  id v13 = [v12 contactStore];

  id v14 = [self settingsWithContactStore:v13 threeDTouchEnabled:0];
  *(void *)&v7[v11] = v14;
  uint64_t v15 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_contactStore;
  *(void *)&v7[v15] = [objc_allocWithZone((Class)CNContactStore) init];
  uint64_t v16 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView;
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  double v17 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
  id v18 = objc_allocWithZone((Class)type metadata accessor for VoicemailUnreadIndicator());
  *(void *)&v7[v16] = VoicemailUnreadIndicator.init(diameter:)(v17);
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___commonConstraints] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___axConstraints] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___nonAXConstraints] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewVisibleConstraints] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewHiddenConstraints] = 0;
  id v19 = [objc_allocWithZone((Class)CNAvatarViewController) initWithSettings:*(void *)&v7[v11]];
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarViewController] = v19;
  id v20 = [v19 view];
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarView] = v20;

  if (a3)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v21 = 0;
  }
  v27.receiver = v7;
  v27.super_class = ObjectType;
  [super initWithStyle:a1 reuseIdentifier:v21];

  id v23 = v22;
  VoicemailSearchViewCell.setupViews()();
  [v23 setPreservesSuperviewLayoutMargins:1];
  id v24 = [v23 contentView];
  [v24 setPreservesSuperviewLayoutMargins:1];

  id v25 = [self defaultCenter];
  [v25 addObserver:v23 selector:"handleContentSizeCategoryDidChange:" name:UIContentSizeCategoryDidChangeNotification object:0];

  return v23;
}

void VoicemailSearchViewCell.setupViews()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarView];
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v3 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v4 = self;
  id v5 = [v4 clearColor];
  [v3 setBackgroundColor:v5];

  [v3 setNumberOfLines:2];
  [v3 setLineBreakMode:4];
  id v6 = [self telephonyUISubheadlineShortFont];
  [v3 setFont:v6];

  id v7 = [v4 secondaryLabelColor];
  [v3 setTextColor:v7];

  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView];
  if (one-time initialization token for unreadIndicatorBorderWidth != -1) {
    swift_once();
  }
  double v9 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth;
  id v10 = [v4 systemBackgroundColor];
  id v11 = [v10 CGColor];

  id v12 = [v8 layer];
  [v12 setBorderWidth:v9];

  id v13 = [v8 layer];
  [v13 setBorderColor:v11];

  id v14 = [v0 contentView];
  [v14 setClipsToBounds:1];

  id v15 = [v0 contentView];
  [v15 addSubview:v1];

  id v16 = [v0 contentView];
  [v16 addSubview:v8];

  id v17 = [v0 contentView];
  [v17 addSubview:v2];

  id v18 = [v0 contentView];
  [v18 addSubview:v3];

  id v19 = self;
  VoicemailSearchViewCell.commonConstraints.getter();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 activateConstraints:isa];

  VoicemailSearchViewCell.layoutForAccessibility()();
}

id SuggestionsSearchTableViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

void VoicemailSearchViewCell.layoutForAccessibility()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarView];
  id v2 = [v0 traitCollection];
  id v3 = [v2 preferredContentSizeCategory];

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter();
  [v1 setHidden:v2 & 1];
  id v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView];
  id v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item];
  if (v5)
  {
    id v6 = v5;
    if ([v6 isRead])
    {
      char v7 = 1;
    }
    else
    {
      id v8 = [v0 traitCollection];
      id v9 = [v8 preferredContentSizeCategory];

      char v7 = UIContentSizeCategory.isAccessibilityCategory.getter();
      id v6 = v9;
    }
  }
  else
  {
    char v7 = 1;
  }
  [v4 setHidden:v7 & 1];

  VoicemailSearchViewCell.updateConstraintsForAccessibility()();
}

Swift::Void __swiftcall VoicemailSearchViewCell.configureWithVoicemailMessageViewModel(item:contact:)(MPVoicemailMessageViewModel *item, CNContact contact)
{
  id v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item;
  char v7 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item];
  *(void *)&v2[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item] = item;

  id v8 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarViewController];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1002053A0;
  *(CNContact *)(v9 + 32) = contact;
  specialized Array._endMutation()();
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  id v10 = item;
  id v11 = contact.super.isa;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setContacts:isa];

  VoicemailSearchMetadataView.configure(with:)(v10);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  id v13 = *(void **)&v2[v6];
  if (v13 && (id v14 = [v13 transcriptViewModel]) != 0)
  {
    id v15 = v14;
    id v16 = [v14 localizedAttributedText];

    if (v16)
    {
      id v17 = [v16 string];

      id v16 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v19 = v18;

      goto LABEL_7;
    }
  }
  else
  {
    id v16 = 0;
  }
  id v19 = (void *)0xE000000000000000;
LABEL_7:
  specialized VoicemailSearchViewCell.numberOfCharsLabelCanHold(text:)();
  Swift::Int v21 = v20;
  v22._uint64_t countAndFlagsBits = (uint64_t)v16;
  v22._object = v19;
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  VoicemailSearchViewCell.truncate(text:with:for:)(v22, v23, v21);
  swift_bridgeObjectRelease();
  id v24 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView];
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 setText:v25];

  [v24 setUserInteractionEnabled:0];
  id v26 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView];
  objc_super v27 = *(void **)&v3[v6];
  if (v27)
  {
    id v28 = v27;
    if ([v28 isRead])
    {
      char v29 = 1;
    }
    else
    {
      id v30 = [v3 traitCollection];
      id v31 = [v30 preferredContentSizeCategory];

      char v29 = UIContentSizeCategory.isAccessibilityCategory.getter();
      id v28 = v31;
    }
  }
  else
  {
    char v29 = 1;
  }
  [v26 setHidden:v29 & 1];
  VoicemailSearchViewCell.loadConstraintsForTranscriptView()();
}

Swift::String __swiftcall VoicemailSearchViewCell.truncate(text:with:for:)(Swift::String text, Swift::String with, Swift::Int a3)
{
  object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  unint64_t v6 = (unint64_t)text._object;
  uint64_t v7 = text._countAndFlagsBits;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (String.count.getter() <= a3)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v54 = v7;
    unint64_t v55 = v6;
    lazy protocol witness table accessor for type String and conformance String();
    Swift::String_optional v11 = StringProtocol.applyingTransform(_:reverse:)(NSStringTransformStripDiacritics, 0);
    if (v11.value._object)
    {
      uint64_t v7 = v11.value._countAndFlagsBits;
      unint64_t v6 = (unint64_t)v11.value._object;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v54 = countAndFlagsBits;
    unint64_t v55 = (unint64_t)object;
    Swift::String_optional v12 = StringProtocol.applyingTransform(_:reverse:)(NSStringTransformStripDiacritics, 0);
    if (v12.value._object)
    {
      uint64_t countAndFlagsBits = v12.value._countAndFlagsBits;
      object = v12.value._object;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v54 = 25180;
    unint64_t v55 = 0xE200000000000000;
    v13._uint64_t countAndFlagsBits = countAndFlagsBits;
    v13._object = object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0x625C2A775CLL;
    v14._object = (void *)0xE500000000000000;
    String.append(_:)(v14);
    uint64_t v15 = v54;
    unint64_t v16 = v55;
    uint64_t v54 = v7;
    unint64_t v55 = v6;
    uint64_t v60 = v15;
    unint64_t v61 = v16;
    uint64_t v17 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
    uint64_t v18 = StringProtocol.range<A>(of:options:range:locale:)();
    uint64_t v20 = v19;
    char v22 = v21;
    outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = v18;
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        id v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        uint64_t v53 = v20;
        uint64_t v60 = v52;
        id v51 = v26;
        *(_DWORD *)id v26 = 136315138;
        uint64_t v50 = v26 + 4;
        uint64_t v58 = v23;
        uint64_t v54 = 0;
        unint64_t v55 = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)();
        v27._uint64_t countAndFlagsBits = 3943982;
        v27._object = (void *)0xE300000000000000;
        String.append(_:)(v27);
        _print_unlocked<A, B>(_:_:)();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "VoicemailSearchViewCell: searchTextRange: %s", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v28 = String.distance(from:to:)();
      unint64_t v29 = String.distance(from:to:)();
      unint64_t v31 = v29 - v28;
      if (__OFSUB__(v29, v28))
      {
        __break(1u);
      }
      else
      {
        BOOL v32 = __OFSUB__(a3, v31);
        uint64_t v33 = a3 - v31;
        if (!v32)
        {
          unint64_t v34 = v29;
          unint64_t v29 = String.count.getter();
          uint64_t v35 = v29 - v34;
          if (!__OFSUB__(v29, v34))
          {
            if (v33 >= 0) {
              uint64_t v36 = v33;
            }
            else {
              uint64_t v36 = v33 + 1;
            }
            uint64_t v37 = v36 >> 1;
            if (v35 < v37)
            {
              BOOL v32 = __OFSUB__(v33, v35);
              uint64_t v38 = v33 - v35;
              if (v32)
              {
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
              uint64_t v39 = v28 - v38;
              if (!__OFSUB__(v28, v38)) {
                goto LABEL_24;
              }
              __break(1u);
            }
            uint64_t v39 = v28 - v37;
            if (__OFSUB__(v28, v37))
            {
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
LABEL_24:
            uint64_t v60 = 0;
            unint64_t v61 = 0xE000000000000000;
            unint64_t v29 = String.index(_:offsetBy:)();
            uint64_t v40 = HIBYTE(v6) & 0xF;
            if ((v6 & 0x2000000000000000) == 0) {
              uint64_t v40 = v7 & 0xFFFFFFFFFFFFLL;
            }
            if (4 * v40 >= v29 >> 14)
            {
              String.subscript.getter();
              swift_bridgeObjectRelease();
              uint64_t v41 = static String._fromSubstring(_:)();
              uint64_t v43 = v42;
              swift_bridgeObjectRelease();
              if (v39 >= 1)
              {
                v44._uint64_t countAndFlagsBits = 0xA680E29C80E2;
                v44._object = (void *)0xA600000000000000;
                String.append(_:)(v44);
                uint64_t v54 = v41;
                unint64_t v55 = (unint64_t)v43;
                uint64_t v58 = 32;
                unint64_t v59 = 0xE100000000000000;
                uint64_t v45 = StringProtocol.components<A>(separatedBy:)();
                swift_bridgeObjectRelease();
                uint64_t v46 = *(void *)(v45 + 16);
                uint64_t v54 = v45;
                unint64_t v55 = v45 + 32;
                BOOL v56 = v46 != 0;
                uint64_t v57 = (2 * v46) | 1;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<String>);
                lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>();
                uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
                uint64_t v43 = v47;
                swift_bridgeObjectRelease();
              }
              v48._uint64_t countAndFlagsBits = v41;
              v48._object = v43;
              String.append(_:)(v48);
              swift_bridgeObjectRelease();
              uint64_t v7 = v60;
              unint64_t v6 = v61;
              goto LABEL_30;
            }
            goto LABEL_34;
          }
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
      }
      __break(1u);
      goto LABEL_33;
    }
  }
LABEL_30:
  unint64_t v29 = v7;
  id v30 = (void *)v6;
LABEL_37:
  result._object = v30;
  result._uint64_t countAndFlagsBits = v29;
  return result;
}

void VoicemailSearchViewCell.loadConstraintsForTranscriptView()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView) setHidden:!VoicemailSearchViewCell.shouldShowTranscriptView.getter()];
  BOOL v1 = VoicemailSearchViewCell.shouldShowTranscriptView.getter();
  id v2 = self;
  if (v1)
  {
    VoicemailSearchViewCell.transcriptViewVisibleConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v2 activateConstraints:isa];

    VoicemailSearchViewCell.transcriptViewHiddenConstraints.getter();
  }
  else
  {
    VoicemailSearchViewCell.transcriptViewHiddenConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class v4 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v2 activateConstraints:v4];

    VoicemailSearchViewCell.transcriptViewVisibleConstraints.getter();
  }
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 deactivateConstraints:v5];
}

void VoicemailSearchViewCell.updateConstraintsForAccessibility()()
{
  id v1 = [v0 traitCollection];
  id v2 = [v1 preferredContentSizeCategory];

  char v3 = UIContentSizeCategory.isAccessibilityCategory.getter();
  Class v4 = self;
  if (v3)
  {
    VoicemailSearchViewCell.axConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 activateConstraints:isa];

    VoicemailSearchViewCell.nonAXConstraints.getter();
  }
  else
  {
    VoicemailSearchViewCell.nonAXConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class v6 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 activateConstraints:v6];

    VoicemailSearchViewCell.axConstraints.getter();
  }
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 deactivateConstraints:v7];
}

double static VoicemailSearchViewCell.separatorInset(for:)()
{
  if (UIContentSizeCategory.isAccessibilityCategory.getter())
  {
    if (one-time initialization token for leftSeperatorInsetWithAX == -1) {
      return 0.0;
    }
    goto LABEL_6;
  }
  if (one-time initialization token for leftSeperatorInsetWithoutAX != -1) {
LABEL_6:
  }
    swift_once();
  return 0.0;
}

Swift::Void __swiftcall VoicemailSearchViewCell.highlight(text:)(Swift::String text)
{
  uint64_t v2 = v1;
  object = text._object;
  uint64_t countAndFlagsBits = text._countAndFlagsBits;
  VoicemailSearchMetadataView.highlight(text:)(text);
  Class v5 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item);
  if (v5)
  {
    id v6 = [v5 transcriptViewModel];
    if (v6)
    {
      Class v7 = v6;
      id v8 = [v6 localizedAttributedText];

      if (v8)
      {
        id v9 = [v8 string];

        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String_optional v12 = v11;

        specialized VoicemailSearchViewCell.numberOfCharsLabelCanHold(text:)();
        Swift::Int v14 = v13;
        v15._uint64_t countAndFlagsBits = v10;
        v15._object = v12;
        v16._uint64_t countAndFlagsBits = countAndFlagsBits;
        v16._object = object;
        VoicemailSearchViewCell.truncate(text:with:for:)(v15, v16, v14);
        swift_bridgeObjectRelease();
        if (String.count.getter() < 1)
        {
          uint64_t v19 = *(void **)(v2 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView);
          id v20 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v19 setText:v20];
        }
        else
        {
          NSString v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v18 = String._bridgeToObjectiveC()();
          id v20 = [v17 attributedStringToHighlightText:v18];

          [*(id *)(v2 + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView) setAttributedText:v20];
        }
      }
    }
  }
}

Swift::Void __swiftcall VoicemailSearchViewCell.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v7.receiver = v1;
  v7.super_class = (Class)swift_getObjectType();
  [super traitCollectionDidChange:isa];
  id v3 = [v1 traitCollection];
  LODWORD(isa) = [v3 hasDifferentColorAppearanceComparedToTraitCollection:isa];

  if (isa)
  {
    id v4 = [*(id *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView] layer];
    id v5 = [self systemBackgroundColor];
    id v6 = [v5 CGColor];

    [v4 setBorderColor:v6];
  }
}

id MessageID.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  [super dealloc];
}

void specialized VoicemailSearchViewCell.init(coder:)()
{
  uint64_t v1 = v0;
  Logger.init(subsystem:category:)();
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_metadataView;
  *(void *)&v1[v2] = [objc_allocWithZone((Class)type metadata accessor for VoicemailSearchMetadataView()) init];
  uint64_t v3 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_transcriptView;
  *(void *)&v1[v3] = [objc_allocWithZone((Class)UILabel) init];
  id v4 = &v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_item] = 0;
  uint64_t v5 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_avatarViewControllerSettings;
  id v6 = [self sharedInstance];
  id v7 = [v6 contactStore];

  id v8 = [self settingsWithContactStore:v7 threeDTouchEnabled:0];
  *(void *)&v1[v5] = v8;
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_contactStore;
  *(void *)&v1[v9] = [objc_allocWithZone((Class)CNContactStore) init];
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_unreadIndicatorImageView;
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  double v11 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
  id v12 = objc_allocWithZone((Class)type metadata accessor for VoicemailUnreadIndicator());
  *(void *)&v1[v10] = VoicemailUnreadIndicator.init(diameter:)(v11);
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___commonConstraints] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___axConstraints] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___nonAXConstraints] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewVisibleConstraints] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell____lazy_storage___transcriptViewHiddenConstraints] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized VoicemailSearchViewCell.numberOfCharsLabelCanHold(text:)()
{
  uint64_t v0 = String.count.getter();
  uint64_t v1 = v0 + 1;
  if (__OFADD__(v0, 1))
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (v1 >= 1)
  {
    id v32 = self;
    id v31 = self;
    uint64_t v2 = 0;
    while (!__OFADD__(v2, v1))
    {
      uint64_t v3 = (v2 + v1) / 2;
      String.index(_:offsetBy:)();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
      id v4 = [v32 mainScreen];
      [v4 bounds];
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;

      v33.origin.x = v6;
      v33.origin.y = v8;
      v33.size.width = v10;
      v33.size.height = v12;
      double Width = CGRectGetWidth(v33);
      id v14 = [v31 telephonyUISubheadlineShortFont];
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002053C0;
      *(void *)(inited + 32) = NSFontAttributeName;
      *(void *)(inited + 64) = type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for UIFont);
      *(void *)(inited + 40) = v14;
      NSString v17 = NSFontAttributeName;
      id v18 = v14;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v15 boundingRectWithSize:3 options:isa context:Width];
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      CGFloat v25 = v24;
      CGFloat v27 = v26;

      v34.origin.x = v21;
      v34.origin.y = v23;
      v34.size.width = v25;
      v34.size.height = v27;
      double v28 = ceil(CGRectGetHeight(v34));
      [v18 lineHeight];
      double v30 = v29;

      if (v28 / v30 <= 2.0) {
        uint64_t v2 = v3 + 1;
      }
      else {
        uint64_t v1 = v3 - 1;
      }
      if (v2 >= v1) {
        return;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
}

unint64_t lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>);
  }
  return result;
}

uint64_t ObjC metadata update function for VoicemailSearchViewCell()
{
  return type metadata accessor for VoicemailSearchViewCell();
}

uint64_t type metadata accessor for VoicemailSearchViewCell()
{
  uint64_t result = type metadata singleton initialization cache for VoicemailSearchViewCell;
  if (!type metadata singleton initialization cache for VoicemailSearchViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for VoicemailSearchViewCell()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1000DD940()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return thunk for @escaping @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

char *ContactAvatarCardController.__allocating_init(tableViewController:tableView:)(void *a1, uint64_t a2, void *a3)
{
  double v7 = (char *)objc_allocWithZone(v3);
  uint64_t ObjectType = swift_getObjectType();
  double v9 = specialized ContactAvatarCardController.init(tableViewController:tableView:)((uint64_t)a1, (uint64_t)a3, v7, ObjectType, a2);

  return v9;
}

char *ContactAvatarCardController.init(tableViewController:tableView:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  CGFloat v8 = specialized ContactAvatarCardController.init(tableViewController:tableView:)((uint64_t)a1, (uint64_t)a3, v3, ObjectType, a2);

  return v8;
}

uint64_t ContactAvatarCardController.presentingViewController(for:)()
{
  return swift_unknownObjectWeakLoadStrong();
}

id ContactAvatarCardController.cardController.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)CNAvatarCardController) init];
    [v4 setDelegate:v0];
    double v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t ContactAvatarCardController.cardController.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController) = a1;
  return _objc_release_x1();
}

void (*ContactAvatarCardController.cardController.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = ContactAvatarCardController.cardController.getter();
  return ContactAvatarCardController.cardController.modify;
}

void ContactAvatarCardController.cardController.modify(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController);
  *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController) = v2;
}

uint64_t ContactAvatarCardController.avatarCardController(_:presentationResultForLocation:)(void *a1, double a2, double a3)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  CGFloat v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  id v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  NSString v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v20 = v3 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 1;
  }
  double v22 = (void *)Strong;
  uint64_t v55 = *(void *)(v20 + 8);
  CGFloat v23 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v23)
  {

    return 1;
  }
  double v24 = v23;
  if (([v23 isDecelerating] & 1) != 0
    || ([v24 isDragging] & 1) != 0
    || ([v24 isEditing] & 1) != 0)
  {

    return 1;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (uint64_t)[v22 view];
  if (result)
  {
    CGFloat v27 = (void *)result;
    [result convertPoint:v24 toCoordinateSpace:a2];
    double v29 = v28;
    double v31 = v30;

    id v32 = [v24 indexPathForRowAtPoint:v29, v31];
    if (v32)
    {
      CGRect v33 = v32;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v17, 1, 1, v7);
    }
    outlined init with take of IndexPath?((uint64_t)v17, (uint64_t)v19);
    outlined init with copy of IndexPath?((uint64_t)v19, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v35 = [v24 cellForRowAtIndexPath:isa];

      if (v35)
      {
        [a1 setHighlightView:v35];
        [v35 frame];
        double v37 = v36;
        double v39 = v38;
        double v41 = v40;
        double v43 = v42;
        id v44 = [a1 sourceView];
        [v24 convertRect:v44 toView:v37];
        double v46 = v45;
        double v48 = v47;
        double v50 = v49;
        double v52 = v51;

        [a1 setSourceRect:v46, v48, v50, v52];
        BOOL v56 = v22;
        uint64_t v25 = (*(uint64_t (**)(void *, char *, uint64_t))(v55 + 8))(a1, v10, ObjectType);

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        outlined destroy of IndexPath?((uint64_t)v19);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        outlined destroy of IndexPath?((uint64_t)v19);
        return 2;
      }
      return v25;
    }
    outlined destroy of IndexPath?((uint64_t)v19);

    outlined destroy of IndexPath?((uint64_t)v14);
    return 1;
  }
  __break(1u);
  return result;
}

id MessageID.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void ContactAvatarCardController.init()()
{
}

char *specialized ContactAvatarCardController.init(tableViewController:tableView:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a3[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&a3[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController] = 0;
  v10.receiver = a3;
  v10.super_class = ObjectType;
  uint64_t v8 = (char *)[super init];
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = a5;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  return v8;
}

uint64_t outlined init with take of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexPath?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexPath?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000DE3D4@<X0>(void *a1@<X8>)
{
  id result = ContactAvatarCardController.cardController.getter();
  *a1 = result;
  return result;
}

void sub_1000DE400(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController);
  *(void *)(*a2 + OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController) = *a1;
  id v3 = v2;
}

uint64_t type metadata accessor for ContactAvatarCardController()
{
  return self;
}

uint64_t outlined destroy of weak (UIViewController & ContactAvatarCardControllerProtocol)?(uint64_t a1)
{
  return a1;
}

uint64_t Logger.mobilePhone.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for mobilePhone, (uint64_t)static Logger.mobilePhone);
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = __chkstk_darwin(v6);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v8, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, a2);
    uint64_t v15 = String.init<A>(reflecting:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a2);
  }
  return v15;
}

uint64_t one-time initialization function for inCallService()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.inCallService);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.inCallService);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  id result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.inCallService = result;
  return result;
}

uint64_t Logger.inCallService.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for inCallService, (uint64_t)static Logger.inCallService);
}

uint64_t static Logger.inCallService.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for inCallService, (uint64_t)static Logger.inCallService, a1);
}

uint64_t one-time initialization function for nickname()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.nickname);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.nickname);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.nickname.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for nickname, (uint64_t)static Logger.nickname);
}

uint64_t static Logger.nickname.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for nickname, (uint64_t)static Logger.nickname, a1);
}

uint64_t static Logger.mobilePhone.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for mobilePhone, (uint64_t)static Logger.mobilePhone, a1);
}

uint64_t one-time initialization function for mobilePhoneTips()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.mobilePhoneTips);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.mobilePhoneTips);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.mobilePhoneTips.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for mobilePhoneTips, (uint64_t)static Logger.mobilePhoneTips);
}

uint64_t static Logger.mobilePhoneTips.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for mobilePhoneTips, (uint64_t)static Logger.mobilePhoneTips, a1);
}

uint64_t one-time initialization function for spamReport()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.spamReport);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.spamReport);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.spamReport.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for spamReport, (uint64_t)static Logger.spamReport);
}

uint64_t static Logger.spamReport.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for spamReport, (uint64_t)static Logger.spamReport, a1);
}

uint64_t one-time initialization function for recordingSession()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.recordingSession);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.recordingSession);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.recordingSession.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for recordingSession, (uint64_t)static Logger.recordingSession);
}

uint64_t static Logger.recordingSession.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for recordingSession, (uint64_t)static Logger.recordingSession, a1);
}

uint64_t *OS_os_log.mobilePhone.unsafeMutableAddressor()
{
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  return &static OS_os_log.mobilePhone;
}

id static OS_os_log.mobilePhone.getter()
{
  return static OS_os_log.mobilePhone.getter(&one-time initialization token for mobilePhone, (void **)&static OS_os_log.mobilePhone);
}

uint64_t one-time initialization function for faceTime()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.faceTime = result;
  return result;
}

uint64_t *OS_os_log.faceTime.unsafeMutableAddressor()
{
  if (one-time initialization token for faceTime != -1) {
    swift_once();
  }
  return &static OS_os_log.faceTime;
}

id static OS_os_log.faceTime.getter()
{
  return static OS_os_log.mobilePhone.getter(&one-time initialization token for faceTime, (void **)&static OS_os_log.faceTime);
}

uint64_t *OS_os_log.inCallService.unsafeMutableAddressor()
{
  if (one-time initialization token for inCallService != -1) {
    swift_once();
  }
  return &static OS_os_log.inCallService;
}

id static OS_os_log.inCallService.getter()
{
  return static OS_os_log.mobilePhone.getter(&one-time initialization token for inCallService, (void **)&static OS_os_log.inCallService);
}

id static OS_os_log.mobilePhone.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  id v3 = *a2;

  return v3;
}

uint64_t one-time initialization function for cameraState()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.cameraState);
  __swift_project_value_buffer(v0, (uint64_t)static Log.cameraState);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.cameraState.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for cameraState, (uint64_t)static Log.cameraState);
}

uint64_t static Log.cameraState.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for cameraState, (uint64_t)static Log.cameraState, a1);
}

uint64_t one-time initialization function for pillState()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.pillState);
  __swift_project_value_buffer(v0, (uint64_t)static Log.pillState);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.pillState.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for pillState, (uint64_t)static Log.pillState);
}

uint64_t static Log.pillState.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for pillState, (uint64_t)static Log.pillState, a1);
}

uint64_t one-time initialization function for ambientScene()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.ambientScene);
  __swift_project_value_buffer(v0, (uint64_t)static Log.ambientScene);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.ambientScene.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for ambientScene, (uint64_t)static Log.ambientScene);
}

uint64_t static Log.ambientScene.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for ambientScene, (uint64_t)static Log.ambientScene, a1);
}

uint64_t one-time initialization function for clarityUI()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.clarityUI);
  __swift_project_value_buffer(v0, (uint64_t)static Log.clarityUI);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.clarityUI.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for clarityUI, (uint64_t)static Log.clarityUI);
}

uint64_t static Log.clarityUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for clarityUI, (uint64_t)static Log.clarityUI, a1);
}

uint64_t one-time initialization function for screenSharing()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.screenSharing);
  __swift_project_value_buffer(v0, (uint64_t)static Log.screenSharing);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.screenSharing.unsafeMutableAddressor()
{
  return Logger.mobilePhone.unsafeMutableAddressor(&one-time initialization token for screenSharing, (uint64_t)static Log.screenSharing);
}

uint64_t Logger.mobilePhone.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Log.screenSharing.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.inCallService.getter(&one-time initialization token for screenSharing, (uint64_t)static Log.screenSharing, a1);
}

uint64_t static Logger.inCallService.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t String.init(namedPropertyValues:for:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    double v36 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = a1 + 32;
    do
    {
      outlined init with copy of (String, Any)(v5, (uint64_t)&v33, &demangling cache variable for type metadata for (name: String, value: Any?));
      uint64_t v31 = v33;
      unint64_t v32 = v34;
      swift_bridgeObjectRetain();
      v6._uint64_t countAndFlagsBits = 61;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      outlined init with copy of (String, Any)((uint64_t)&v35, (uint64_t)&v28, &demangling cache variable for type metadata for Any?);
      if (v29)
      {
        outlined init with take of Any(&v28, v30);
        outlined init with copy of Any((uint64_t)v30, (uint64_t)&v28);
        uint64_t v7 = String.init<A>(reflecting:)();
        uint64_t v9 = v8;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
      }
      else
      {
        outlined destroy of Locale?((uint64_t)&v28, &demangling cache variable for type metadata for Any?);
        uint64_t v9 = (void *)0xE300000000000000;
        uint64_t v7 = 7104878;
      }
      v10._uint64_t countAndFlagsBits = v7;
      v10._object = v9;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 41;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      uint64_t v12 = v31;
      unint64_t v13 = v32;
      outlined destroy of Locale?((uint64_t)&v33, &demangling cache variable for type metadata for (name: String, value: Any?));
      id v14 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1);
        id v14 = v36;
      }
      unint64_t v16 = v14[2];
      unint64_t v15 = v14[3];
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        id v14 = v36;
      }
      v14[2] = v16 + 1;
      uint64_t v17 = &v14[2 * v16];
      v17[4] = v12;
      v17[5] = v13;
      v5 += 48;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v2 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v33 = (uint64_t)v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v33 = 60;
  unint64_t v34 = 0xE100000000000000;
  __swift_project_boxed_opaque_existential_0(v2, v2[3]);
  swift_getDynamicType();
  v21._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = v18;
  v23._object = v20;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  uint64_t v25 = String.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v25;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    Swift::String v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    Swift::String v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    Swift::String v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: MessageID, value: Message)>, &demangling cache variable for type metadata for (key: MessageID, value: Message));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Message]>);
    Swift::String v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    Swift::String v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  id v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Message]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  Swift::String v10 = *(void *)(type metadata accessor for UUID() - 8);
  int64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  id v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  unint64_t v16 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  Swift::String v21 = &v18[v20];
  Swift::String v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t closure #1 in variable initialization expression of static SpringBoardOrientationObserver.springBoardLockedNotify(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t closure #2 in variable initialization expression of static SpringBoardOrientationObserver.springBoardLockedNotify@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t closure #1 in variable initialization expression of static SpringBoardOrientationObserver.springBoardOrientationNotify(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t closure #2 in variable initialization expression of static SpringBoardOrientationObserver.springBoardOrientationNotify@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t SpringBoardOrientationObserver.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

Swift::Void (__swiftcall *variable initialization expression of SpringBoardOrientationObserver.onOrientationLock())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t key path getter for SpringBoardOrientationObserver.onOrientationLock : SpringBoardOrientationObserver@<X0>(void *a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  swift_beginAccess();
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned SpringBoardOrientationObserver.OrientationStatus) -> ();
  a2[1] = (uint64_t (*)(uint64_t))v6;
  return swift_retain();
}

uint64_t key path setter for SpringBoardOrientationObserver.onOrientationLock : SpringBoardOrientationObserver(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = (uint64_t (**)(uint64_t, char))(*a2
                                              + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  swift_beginAccess();
  char *v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed SpringBoardOrientationObserver.OrientationStatus) -> (@out ());
  v6[1] = (uint64_t (*)(uint64_t, char))v5;
  swift_retain();
  return swift_release();
}

uint64_t SpringBoardOrientationObserver.onOrientationLock.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t SpringBoardOrientationObserver.onOrientationLock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*SpringBoardOrientationObserver.onOrientationLock.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t SpringBoardOrientationObserverWrapper.isLocked.getter()
{
  return specialized PHCFNotifyObserver.getCurrentValue()() & 1;
}

uint64_t SpringBoardOrientationObserverWrapper.currentOrientation.getter()
{
  return specialized PHCFNotifyObserver.getCurrentValue()();
}

uint64_t SpringBoardOrientationObserver.__allocating_init(logger:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (Swift::Void (__swiftcall **)())(v2
                                      + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  *uint64_t v3 = PHVoicemailInboxListViewController.refreshTableHeaderView();
  v3[1] = 0;
  *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver____lazy_storage___cfObserver) = 0;
  uint64_t v4 = v2 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_logger;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  return v2;
}

uint64_t SpringBoardOrientationObserver.init(logger:)(uint64_t a1)
{
  uint64_t v3 = (Swift::Void (__swiftcall **)())(v1
                                      + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  *uint64_t v3 = PHVoicemailInboxListViewController.refreshTableHeaderView();
  v3[1] = 0;
  *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver____lazy_storage___cfObserver) = 0;
  uint64_t v4 = v1 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_logger;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  return v1;
}

uint64_t specialized PHCFNotifyObserver.getCurrentValue()()
{
  if (*(unsigned char *)(v0 + 20) == 1)
  {
    out_token[0] = -1;
    uint64_t v1 = String.utf8CString.getter();
    uint32_t v2 = notify_register_check((const char *)(v1 + 32), out_token);
    swift_release();
    if (v2)
    {
      if (*(unsigned char *)(v0 + 20)) {
        return *(unsigned __int8 *)(v0 + 40);
      }
    }
    else
    {
      *(_DWORD *)(v0 + 16) = out_token[0];
      *(unsigned char *)(v0 + 20) = 0;
    }
  }
  int v4 = *(_DWORD *)(v0 + 16);
  *(void *)out_token = (*(uint64_t (**)(uint64_t))(v0 + 48))(v0 + 40);
  notify_get_state(v4, (uint64_t *)out_token);
  (*(void (**)(uint64_t *__return_ptr, void))(v0 + 64))(&v6, *(void *)out_token);
  if (v6 == 2) {
    return *(unsigned __int8 *)(v0 + 40);
  }
  else {
    return v6 & 1;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint32_t v2;
  int v4;
  uint64_t *p_out_token;
  uint64_t v6;
  uint64_t out_token;
  char v8;

  if (*(unsigned char *)(v0 + 20) == 1)
  {
    LODWORD(out_token) = -1;
    uint64_t v1 = String.utf8CString.getter();
    uint32_t v2 = notify_register_check((const char *)(v1 + 32), (int *)&out_token);
    swift_release();
    if (v2)
    {
      if (*(unsigned char *)(v0 + 20)) {
        return *(void *)(v0 + 40);
      }
    }
    else
    {
      *(_DWORD *)(v0 + 16) = out_token;
      *(unsigned char *)(v0 + 20) = 0;
    }
  }
  int v4 = *(_DWORD *)(v0 + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v0 + 48))(v0 + 40);
  notify_get_state(v4, (uint64_t *)&v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 64))(&out_token, v6);
  if (v8) {
    p_out_token = (uint64_t *)(v0 + 40);
  }
  else {
    p_out_token = &out_token;
  }
  return *p_out_token;
}

uint64_t SpringBoardOrientationObserver.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t SpringBoardOrientationObserver.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SpringBoardOrientationObserver()
{
  return type metadata accessor for SpringBoardOrientationObserver();
}

uint64_t type metadata accessor for SpringBoardOrientationObserver()
{
  uint64_t result = type metadata singleton initialization cache for SpringBoardOrientationObserver;
  if (!type metadata singleton initialization cache for SpringBoardOrientationObserver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SpringBoardOrientationObserver()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringBoardOrientationObserver.OrientationStatus(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpringBoardOrientationObserver.OrientationStatus(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for SpringBoardOrientationObserver.OrientationStatus(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for SpringBoardOrientationObserver.OrientationStatus(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpringBoardOrientationObserver.OrientationStatus()
{
  return &type metadata for SpringBoardOrientationObserver.OrientationStatus;
}

uint64_t sub_1000E08F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed SpringBoardOrientationObserver.OrientationStatus) -> (@out ())(uint64_t a1, char a2)
{
  char v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned SpringBoardOrientationObserver.OrientationStatus) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

Swift::Void __swiftcall VoicemailSearchMetadataView.configure(with:)(MPVoicemailMessageViewModel *with)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel];
  uint64_t v9 = [(MPVoicemailMessageViewModel *)with localizedTitle];
  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v8 setText:v9];

  id v10 = [self dynamicLabelColor];
  [v8 setTextColor:v10];

  int64_t v11 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleLabel];
  uint64_t v12 = [(MPVoicemailMessageViewModel *)with localizedDuration];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v37[0] = v13;
  v37[1] = v15;
  v16._uint64_t countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  uint64_t v17 = [(MPVoicemailMessageViewModel *)with localizedSubtitle];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setText:v22];

  Swift::String v23 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_dateLabel];
  Swift::String v24 = [(MPVoicemailMessageViewModel *)with date];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v23 setDate:isa];

  double v26 = [(MPVoicemailMessageViewModel *)with localizedSenderIdentityTitle];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v27)
  {
    long long v28 = [(MPVoicemailMessageViewModel *)with localizedSenderIdentityTitle];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v29 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView;
    id v30 = *(id *)&v2[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView];
    NSString v31 = String._bridgeToObjectiveC()();
    [v30 setTitle:v31];

    [*(id *)&v2[v29] setHidden:0];
    swift_bridgeObjectRelease();
  }
  else
  {
    [*(id *)&v2[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView] setHidden:1];
  }
  id v32 = [v2 traitCollection];
  id v33 = [v32 preferredContentSizeCategory];

  char v34 = UIContentSizeCategory.isAccessibilityCategory.getter();
  uint64_t v35 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_unreadIndicatorImageView];
  BOOL v36 = (v34 & 1) == 0 || [(MPVoicemailMessageViewModel *)with isRead];
  [v35 setHidden:v36];
}

Swift::Void __swiftcall VoicemailSearchMetadataView.highlight(text:)(Swift::String text)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel);
  id v3 = [v2 text];
  if (v3)
  {
    uint64_t v4 = v3;
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 attributedStringToHighlightText:v5];

    [v2 setAttributedText:v6];
  }
  int64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleLabel);
  id v8 = [v7 text];
  if (v8)
  {
    uint64_t v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 attributedStringToHighlightText:v10];

    [v7 setAttributedText:v11];
  }
}

uint64_t VoicemailSearchMetadataView.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void VoicemailSearchMetadataView.delegate.setter(void *a1)
{
}

void (*VoicemailSearchMetadataView.delegate.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return VoicemailSearchMetadataView.delegate.modify;
}

void VoicemailSearchMetadataView.delegate.modify(id **a1, char a2)
{
  id v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t VoicemailSearchMetadataView.commonConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView____lazy_storage___commonConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView____lazy_storage___commonConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView____lazy_storage___commonConstraints];
  }
  else
  {
    id v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1002054F0;
    id v4 = [*(id *)&v3[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView] centerYAnchor];
    NSString v5 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleStack];
    id v6 = [v5 centerYAnchor];
    id v7 = [v4 constraintEqualToAnchor:v6];

    *(void *)(v2 + 32) = v7;
    id v8 = [*(id *)&v3[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleLabel] centerYAnchor];
    id v9 = [v5 centerYAnchor];
    id v10 = [v8 constraintEqualToAnchor:v9];

    *(void *)(v2 + 40) = v10;
    id v11 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_metadataContainer];
    id v12 = [v11 topAnchor];
    id v13 = [v3 topAnchor];
    id v14 = [v12 constraintEqualToAnchor:v13];

    *(void *)(v2 + 48) = v14;
    id v15 = [v11 bottomAnchor];
    id v16 = [v3 bottomAnchor];
    id v17 = [v15 constraintEqualToAnchor:v16];

    *(void *)(v2 + 56) = v17;
    id v18 = [v11 leadingAnchor];
    id v19 = [v3 leadingAnchor];
    id v20 = [v18 constraintEqualToAnchor:v19];

    *(void *)(v2 + 64) = v20;
    id v21 = [v11 trailingAnchor];
    NSString v22 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_callButton];
    id v23 = [v22 leadingAnchor];
    if (one-time initialization token for accessoryButtonSpacing != -1) {
      swift_once();
    }
    id v24 = [v21 constraintEqualToAnchor:v23 constant:-*(double *)&static SearchLayout.CellSpacingConstants.accessoryButtonSpacing];

    *(void *)(v2 + 72) = v24;
    id v25 = [v22 trailingAnchor];
    id v26 = [v3 trailingAnchor];
    id v27 = [v25 constraintEqualToAnchor:v26];

    *(void *)(v2 + 80) = v27;
    id v28 = [v22 centerYAnchor];
    id v29 = [v3 centerYAnchor];
    id v30 = [v28 constraintEqualToAnchor:v29];

    *(void *)(v2 + 88) = v30;
    specialized Array._endMutation()();
    *(void *)&v3[v1] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id VoicemailSearchMetadataView.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_callButton;
  id v3 = objc_allocWithZone((Class)TPAccessoryButton);
  id v4 = v0;
  *(void *)&v0[v2] = [v3 init];
  uint64_t v5 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_metadataContainer;
  *(void *)&v4[v5] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_textContainer;
  *(void *)&v4[v6] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v7 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel;
  *(void *)&v4[v7] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleStack;
  *(void *)&v4[v8] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleStack;
  *(void *)&v4[v9] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleLabel;
  *(void *)&v4[v10] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v11 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_dateLabel;
  *(void *)&v4[v11] = [objc_allocWithZone((Class)UIDateLabel) init];
  uint64_t v12 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView;
  id v13 = objc_allocWithZone((Class)TPBadgeView);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 initWithTitle:v14];

  *(void *)&v4[v12] = v15;
  swift_unknownObjectWeakInit();
  uint64_t v16 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_unreadIndicatorImageView;
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  double v17 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
  if (one-time initialization token for unreadIndicatorBorderWidth != -1) {
    swift_once();
  }
  double v18 = v17
      - (*(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth
       + *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth);
  id v19 = objc_allocWithZone((Class)type metadata accessor for VoicemailUnreadIndicator());
  *(void *)&v4[v16] = VoicemailUnreadIndicator.init(diameter:)(v18);
  *(void *)&v4[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView____lazy_storage___commonConstraints] = 0;

  v22.receiver = v4;
  v22.super_class = ObjectType;
  id v20 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  VoicemailSearchMetadataView.setupViews()();

  return v20;
}

void VoicemailSearchMetadataView.setupViews()()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v25 = [self systemImageNamed:v1];

  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_callButton];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v2 configureForImage:v25];
  [v2 addTarget:v0 action:"didTapCall" forControlEvents:64];
  LODWORD(v3) = 1148846080;
  [v2 setContentCompressionResistancePriority:0 forAxis:v3];
  [v0 addSubview:v2];
  id v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v5 = self;
  id v6 = [v5 telephonyUIBodyShortEmphasizedFont];
  [v4 setFont:v6];

  uint64_t v7 = self;
  id v8 = [v7 dynamicLabelColor];
  [v4 setTextColor:v8];

  LODWORD(v9) = 1148846080;
  [v4 setContentCompressionResistancePriority:1 forAxis:v9];
  uint64_t v10 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleStack];
  [v10 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v10 setAxis:0];
  [v10 setAlignment:3];
  if (one-time initialization token for gridColumnSpacing != -1) {
    swift_once();
  }
  [v10 setSpacing:*(double *)&static SearchLayout.CellSpacingConstants.gridColumnSpacing];
  [v10 addArrangedSubview:*(void *)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_unreadIndicatorImageView]];
  [v10 addArrangedSubview:v4];
  uint64_t v11 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleLabel];
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v12 = [v5 telephonyUISubheadlineShortFont];
  [v11 setFont:v12];

  id v13 = [v7 secondaryLabelColor];
  [v11 setTextColor:v13];

  uint64_t v14 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView;
  id v15 = *(id *)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView];
  id v16 = [v7 dynamicTertiaryLabelColor];
  [v15 setTintColor:v16];

  [*(id *)&v0[v14] setTranslatesAutoresizingMaskIntoConstraints:0];
  double v17 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleStack];
  [v17 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v17 setAxis:0];
  [v17 setAlignment:3];
  [v17 setSpacing:4.0];
  [v11 effectiveFirstBaselineOffsetFromTop];
  [v17 setCustomFirstBaselineOffsetFromTop:];
  [v17 addArrangedSubview:*(void *)&v0[v14]];
  [v17 addArrangedSubview:v11];
  double v18 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_dateLabel];
  [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v19 = [v5 telephonyUISubheadlineShortFont];
  [v18 setFont:v19];

  id v20 = [v7 dynamicSecondaryLabelColor];
  [v18 setTextColor:v20];

  id v21 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_textContainer];
  [v21 addArrangedSubview:v10];
  [v21 addArrangedSubview:v17];
  [v21 setAxis:1];
  if (one-time initialization token for gridRowSpacing != -1) {
    swift_once();
  }
  [v21 setSpacing:*(double *)&static SearchLayout.CellSpacingConstants.gridRowSpacing];
  [v21 setAlignment:1];
  [v21 setDistribution:0];
  [v21 setTranslatesAutoresizingMaskIntoConstraints:0];
  objc_super v22 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_metadataContainer];
  [v22 addArrangedSubview:v21];
  [v22 addArrangedSubview:v18];
  [v22 setDistribution:0];
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 addSubview:v22];
  id v23 = self;
  VoicemailSearchMetadataView.commonConstraints.getter();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 activateConstraints:isa];

  VoicemailSearchMetadataView.updateLayoutForAccessibility()();
}

id VoicemailSearchMetadataView.updateLayoutForAccessibility()()
{
  id v1 = [v0 traitCollection];
  id v2 = [v1 preferredContentSizeCategory];

  char v3 = UIContentSizeCategory.isAccessibilityCategory.getter();
  id v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel];
  if (v3)
  {
    [*(id *)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel] setNumberOfLines:0];
    uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_metadataContainer];
    [v5 setAxis:1];
    [v5 setAlignment:1];
    if (one-time initialization token for gridRowSpacing != -1) {
      swift_once();
    }
    id v6 = &static SearchLayout.CellSpacingConstants.gridRowSpacing;
  }
  else
  {
    id v7 = [v0 traitCollection];
    unsigned int v8 = [v7 preferredContentSizeCategoryAllowsMultilineTitleForDoubleLineCells];

    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 2;
    }
    [v4 setNumberOfLines:v9];
    uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_metadataContainer];
    [v5 setAxis:0];
    [v5 setAlignment:3];
    if (one-time initialization token for dateLabelSpacing != -1) {
      swift_once();
    }
    id v6 = &static SearchLayout.CellSpacingConstants.dateLabelSpacing;
  }
  double v10 = *(double *)v6;

  return [v5 setSpacing:v10];
}

Swift::Void __swiftcall VoicemailSearchMetadataView.showSimLineBadgeView(simLabel:)(Swift::String simLabel)
{
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView;
  id v3 = *(id *)(v1 + OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView);
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setTitle:v4];

  uint64_t v5 = *(void **)(v1 + v2);

  [v5 setHidden:0];
}

Swift::Void __swiftcall VoicemailSearchMetadataView.hideSimLinebadgeView()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView) setHidden:1];
}

Swift::Void __swiftcall VoicemailSearchMetadataView.didTapCall()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = (uint64_t *)(Strong + OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler);
    swift_beginAccess();
    id v3 = (void (*)(void))*v2;
    outlined copy of (@escaping @callee_guaranteed () -> ())?(*v2);

    if (v3)
    {
      v3();
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
    }
  }
}

id DialerContactResultButtonView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return [v9 initWithFrame:a1, a2, a3, a4];
}

void VoicemailSearchMetadataView.init(frame:)()
{
}

void specialized VoicemailSearchMetadataView.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_callButton;
  *(void *)&v0[v2] = [objc_allocWithZone((Class)TPAccessoryButton) init];
  uint64_t v3 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_metadataContainer;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_textContainer;
  *(void *)&v0[v4] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v5 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleLabel;
  *(void *)&v0[v5] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_titleStack;
  *(void *)&v0[v6] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v7 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleStack;
  *(void *)&v0[v7] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_subtitleLabel;
  *(void *)&v0[v8] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_dateLabel;
  *(void *)&v0[v9] = [objc_allocWithZone((Class)UIDateLabel) init];
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_badgeView;
  id v11 = objc_allocWithZone((Class)TPBadgeView);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 initWithTitle:v12];

  *(void *)&v1[v10] = v13;
  swift_unknownObjectWeakInit();
  uint64_t v14 = OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView_unreadIndicatorImageView;
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  double v15 = *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
  if (one-time initialization token for unreadIndicatorBorderWidth != -1) {
    swift_once();
  }
  double v16 = v15
      - (*(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth
       + *(double *)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth);
  id v17 = objc_allocWithZone((Class)type metadata accessor for VoicemailUnreadIndicator());
  *(void *)&v1[v14] = VoicemailUnreadIndicator.init(diameter:)(v16);
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone27VoicemailSearchMetadataView____lazy_storage___commonConstraints] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000E26D0@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1000E2728()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for VoicemailSearchMetadataView()
{
  return self;
}

uint64_t outlined destroy of Notification?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

uint64_t RecentsCellConfigurator.tableView.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void RecentsCellConfigurator.tableView.setter(void *a1)
{
  specialized RecentsCellConfigurator.tableView.setter();
}

void (*RecentsCellConfigurator.tableView.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPRecentsCellConfigurator_tableView;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return RecentsCellConfigurator.tableView.modify;
}

void RecentsCellConfigurator.tableView.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for MPLegacyRecentsTableViewCell);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v8 = String._bridgeToObjectiveC()();
      [v6 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v8];
    }
  }

  free(v3);
}

id RecentsCellConfigurator.__allocating_init(tableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:)(void *a1, void *a2, void *a3, char a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v18 = objc_allocWithZone(v12);
  id v19 = specialized RecentsCellConfigurator.init(tableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:)(a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12);

  swift_release();
  swift_release();

  return v19;
}

id RecentsCellConfigurator.init(tableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:)(void *a1, void *a2, void *a3, char a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v19 = specialized RecentsCellConfigurator.init(tableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:)(a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12);

  swift_release();
  swift_release();

  return v19;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexPath();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

id RecentsCellConfigurator.cell(for:recentCall:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return [objc_allocWithZone((Class)MPLegacyRecentsTableViewCell) init];
  }
  uint64_t v6 = (void *)Strong;
  NSString v7 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v9 = [v6 dequeueReusableCellWithIdentifier:v7 forIndexPath:isa];

  if (!v9) {
    return [objc_allocWithZone((Class)MPLegacyRecentsTableViewCell) init];
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {

    return [objc_allocWithZone((Class)MPLegacyRecentsTableViewCell) init];
  }
  id v11 = (void *)v10;
  if ([*(id *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_featureFlags) phoneRecentsAvatarsEnabled])
  {
    id v12 = [v11 avatarViewController];
    if (!v12)
    {
      id v12 = [objc_allocWithZone((Class)CNAvatarViewController) initWithSettings:*(void *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_avatarViewControllerSettings)];
      [v11 setAvatarViewController:v12];
      id v13 = [v12 view];
      self;
      uint64_t v14 = (void *)swift_dynamicCastObjCClass();
      if (v14) {
        [v14 setAllowStaleRendering:1];
      }
    }
    ContactsService.avatarContacts(for:)(a2);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    Class v15 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 setContacts:v15];

    id v16 = [v12 view];
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17)
    {
      id v18 = (void *)v17;
      NSString v19 = [a2 uniqueId];
      if (!v19)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v18 setContextToken:v19];
    }
    else
    {
      NSString v19 = v12;
      id v12 = v16;
    }
  }
  int v21 = *(unsigned __int8 *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_tapTargets);
  [v11 setTapTargets:*(unsigned __int8 *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_tapTargets)];
  id v22 = [*(id *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_recentsController) itemForRecentCall:a2 presentationStyle:0];
  [v11 configureWithRecentsItem:v22 recentCall:a2];
  if (v21 == 1)
  {
    id v23 = [a2 validRemoteParticipantHandles];
    BOOL v27 = 1;
    if (v23)
    {
      id v24 = v23;
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      lazy protocol witness table accessor for type CHHandle and conformance NSObject();
      uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = (v25 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v25 + 16);
      swift_bridgeObjectRelease();
      if (!v26) {
        BOOL v27 = 0;
      }
    }
    [v11 enableCallButton:v27];
    uint64_t v29 = *(void *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_placeCallAction);
    uint64_t v28 = *(void *)(v3 + OBJC_IVAR___MPRecentsCellConfigurator_placeCallAction + 8);
    id v30 = (void *)swift_allocObject();
    _OWORD v30[2] = v29;
    v30[3] = v28;
    v30[4] = a2;
    aBlock[4] = partial apply for closure #2 in RecentsCellConfigurator.cell(for:recentCall:);
    aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_0;
    NSString v31 = _Block_copy(aBlock);
    swift_retain();
    id v32 = a2;
    swift_release();
    [v11 setCallButtonTappedHandler:v31];

    _Block_release(v31);
  }
  else
  {
  }
  return v11;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id RecentsCellConfigurator.trailingSwipeActionsConfigurationForRow(at:recentCall:)(uint64_t a1, void *a2)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
  id v7 = [self mainBundle];
  v30._object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0x4554454C4544;
  v8._object = (void *)0xE600000000000000;
  v9.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v9.value._object = (void *)0xE900000000000073;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v30._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v30)._countAndFlagsBits;

  uint64_t v27 = v2;
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR___MPRecentsCellConfigurator_removeCallsAtIndexPaths);
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR___MPRecentsCellConfigurator_removeCallsAtIndexPaths + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&countAndFlagsBits - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&countAndFlagsBits - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = partial apply for closure #1 in RecentsCellConfigurator.trailingSwipeActionsConfigurationForRow(at:recentCall:);
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
  aBlock[3] = &block_descriptor_6;
  id v16 = _Block_copy(aBlock);
  id v17 = [self contextualActionWithStyle:1 title:v15 handler:v16 countAndFlagsBits];

  _Block_release(v16);
  swift_release();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [self systemImageNamed:v18];

  [v17 setImage:v19];
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v20 = (void *)RecentsCellConfigurator.reportSwipeAction(for:)(v26);
  if (v20)
  {
    id v21 = v20;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIContextualAction);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [self configurationWithActions:isa];

  return v23;
}

uint64_t closure #1 in RecentsCellConfigurator.trailingSwipeActionsConfigurationForRow(at:recentCall:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002053C0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v12 + v11, a7, v9);
  a5(v12);

  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ()(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  id v7 = _Block_copy(aBlock);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  id v10 = a2;
  id v9 = a3;
  v6(v10, v9, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> (), v8);
  swift_release();
  swift_release();
}

uint64_t RecentsCellConfigurator.reportSwipeAction(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  id v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR___MPRecentsCellConfigurator_callReportingViewModel);
  id v9 = 0;
  if ((CallReportingViewModel.shouldShowReportAction(for:)(a1) & 1) == 0) {
    return (uint64_t)v9;
  }
  unint64_t v10 = CallReportingViewModel.reportingFlow(for:)(a1);
  unint64_t v11 = v10;
  if (v10 <= 6)
  {
    if (((1 << v10) & 0x67) != 0)
    {
      if (v10 == 6) {
        return 0;
      }
      uint64_t v12 = &OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertReportBlock;
    }
    else if (v10 == 3)
    {
      uint64_t v12 = &OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockAllButtonTitle;
    }
    else
    {
      uint64_t v12 = &OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockUnknownButtonTitle;
    }
    uint64_t v13 = *(void *)(v8 + *v12);
    v26[0] = *(void *)(v2 + OBJC_IVAR___MPRecentsCellConfigurator_reportFlowPresenter);
    v26[1] = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2 + OBJC_IVAR___MPRecentsCellConfigurator_logger, v4);
    unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v15 = (v6 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v11;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v16 + v14, v7, v4);
    id v17 = (void *)v26[0];
    *(void *)(v16 + v15) = v26[0];
    *(void *)(v16 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = a1;
    swift_bridgeObjectRetain();
    id v18 = v17;
    id v19 = a1;
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock[4] = partial apply for closure #1 in RecentsCellConfigurator.reportSwipeAction(for:);
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
    aBlock[3] = &block_descriptor_20;
    id v21 = _Block_copy(aBlock);
    id v9 = [self contextualActionWithStyle:0 title:v20 handler:v21];

    _Block_release(v21);
    swift_release();
    id v22 = [self systemOrangeColor];
    [v9 setBackgroundColor:v22];

    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [self systemImageNamed:v23];

    [v9 setImage:v24];
    return (uint64_t)v9;
  }
  aBlock[0] = v10;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

id @objc RecentsCellConfigurator.cell(for:recentCall:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(char *, id))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a4;
  id v13 = a1;
  unint64_t v14 = (void *)a5(v11, v12);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  return v14;
}

uint64_t RecentsCellConfigurator.configure(cardController:for:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR___MPRecentsCellConfigurator_recentsController);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002053A0;
  *(void *)(v6 + 32) = [self descriptorForRequiredKeys];
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [v5 contactForRecentCall:a2 keyDescriptors:isa];

  if (!v8) {
    return 2;
  }
  [a1 setContact:v8];
  id v9 = [v5 itemForRecentCall:a2];
  id v10 = [v9 localizedSubtitle];

  [a1 setMessage:v10];
  return 0;
}

uint64_t closure #1 in RecentsCellConfigurator.reportSwipeAction(for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8)
{
  switch(a5)
  {
    case 0:
      id v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "MPRecentsTableViewController: we are showing the native spam reporting and blocking for facetime", v12, 2u);
        swift_slowDealloc();
      }

      ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(a8);
      break;
    case 1:
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "MPRecentsTableViewController: we are showing the carrier reporting and blocking option", v18, 2u);
        swift_slowDealloc();
      }

      ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(a8);
      break;
    case 2:
      id v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "MPRecentsTableViewController: we are showing the third party reporting and blocking option", v15, 2u);
        swift_slowDealloc();
      }

      ReportFlowPresenter.showReportingExtension(for:)(a8);
      break;
    case 3:
      ReportFlowPresenter.presentBlockAllAlert(for:)(a8);
      break;
    case 4:
      ReportFlowPresenter.presentBlockUnknownAlert(for:)(a8);
      break;
    case 5:
      ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(a8);
      break;
    case 6:
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        id v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "MPRecentsTableViewController: we are showing none flow", v21, 2u);
        swift_slowDealloc();
      }

      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000E41D4);
  }
  return a3(1);
}

void RecentsCellConfigurator.init()()
{
}

id TUHandle.init(_:)(void *a1)
{
  unint64_t v2 = (unint64_t)[a1 type];
  if (v2 > 3) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = qword_100205598[v2];
  }
  NSString v4 = [a1 value];
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithType:v3 value:v4];

  return v5;
}

void specialized RecentsCellConfigurator.tableView.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for MPLegacyRecentsTableViewCell);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v3 = String._bridgeToObjectiveC()();
    [v1 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v3];
  }
}

id specialized RecentsCellConfigurator.init(tableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:)(void *a1, void *a2, void *a3, char a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  os_log_type_t v17 = (uint64_t *)&v11[OBJC_IVAR___MPRecentsCellConfigurator_cellIdentifier];
  *os_log_type_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17[1] = v18;
  uint64_t v19 = OBJC_IVAR___MPRecentsCellConfigurator_logger;
  uint64_t v20 = one-time initialization token for mobilePhone;
  id v21 = v11;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(&v21[v19], v23, v22);
  swift_unknownObjectWeakInit();
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for MPLegacyRecentsTableViewCell);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v25];

  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(void *)&v21[OBJC_IVAR___MPRecentsCellConfigurator_recentsController] = a2;
  *(void *)&v21[OBJC_IVAR___MPRecentsCellConfigurator_featureFlags] = a3;
  v21[OBJC_IVAR___MPRecentsCellConfigurator_tapTargets] = a4 & 1;
  *(void *)&v21[OBJC_IVAR___MPRecentsCellConfigurator_callReportingViewModel] = a5;
  *(void *)&v21[OBJC_IVAR___MPRecentsCellConfigurator_reportFlowPresenter] = a6;
  *(void *)&v21[OBJC_IVAR___MPRecentsCellConfigurator_contactsService] = a7;
  uint64_t v26 = self;
  id v27 = a2;
  id v28 = a3;
  id v29 = a5;
  id v30 = a6;
  id v31 = a7;
  id v32 = [v26 sharedInstance];
  id v33 = [v32 contactStore];

  id v34 = [self settingsWithContactStore:v33 threeDTouchEnabled:1];
  *(void *)&v21[OBJC_IVAR___MPRecentsCellConfigurator_avatarViewControllerSettings] = v34;
  uint64_t v35 = &v21[OBJC_IVAR___MPRecentsCellConfigurator_placeCallAction];
  *(void *)uint64_t v35 = a8;
  *((void *)v35 + 1) = a9;
  BOOL v36 = &v21[OBJC_IVAR___MPRecentsCellConfigurator_removeCallsAtIndexPaths];
  *(void *)BOOL v36 = a10;
  *((void *)v36 + 1) = a11;
  swift_retain();
  swift_retain();

  v42.receiver = v21;
  v42.super_class = ObjectType;
  return [super init];
}

uint64_t sub_1000E4858()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #2 in RecentsCellConfigurator.cell(for:recentCall:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

unint64_t lazy protocol witness table accessor for type CHHandle and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type CHHandle and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CHHandle and conformance NSObject)
  {
    type metadata accessor for VMAccount(255, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject);
  }
  return result;
}

uint64_t sub_1000E4930()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in RecentsCellConfigurator.trailingSwipeActionsConfigurationForRow(at:recentCall:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for IndexPath() - 8);
  id v10 = *(void (**)(uint64_t))(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in RecentsCellConfigurator.trailingSwipeActionsConfigurationForRow(at:recentCall:)(a1, a2, a3, a4, v10, v11, v12);
}

uint64_t sub_1000E4A98@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

void sub_1000E4AF0(id *a1)
{
  id v1 = *a1;
  specialized RecentsCellConfigurator.tableView.setter();
}

uint64_t ObjC metadata update function for RecentsCellConfigurator()
{
  return type metadata accessor for RecentsCellConfigurator();
}

uint64_t type metadata accessor for RecentsCellConfigurator()
{
  uint64_t result = type metadata singleton initialization cache for RecentsCellConfigurator;
  if (!type metadata singleton initialization cache for RecentsCellConfigurator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RecentsCellConfigurator()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E4C68()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned CHRecentCall) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000E4CBC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t partial apply for closure #1 in RecentsCellConfigurator.reportSwipeAction(for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v4 + 16);
  uint64_t v13 = *(void *)(v4 + v11);
  os_log_type_t v14 = *(NSObject **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in RecentsCellConfigurator.reportSwipeAction(for:)(a1, a2, a3, a4, v12, v4 + v10, v13, v14);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t key path getter for OrientationMonitorAccelerometer.onOrientationChange : OrientationMonitorAccelerometer@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    unint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UIDeviceOrientation) -> ();
  }
  else
  {
    unint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for OrientationMonitorAccelerometer.onOrientationChange : OrientationMonitorAccelerometer(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UIDeviceOrientation) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(void **)a2 + 112);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return v7(v6, v5);
}

uint64_t OrientationMonitorAccelerometer.onOrientationChange.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v1);
  return v1;
}

uint64_t OrientationMonitorAccelerometer.onOrientationChange.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*OrientationMonitorAccelerometer.onOrientationChange.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

id OrientationMonitorAccelerometer.orientationEventsEnabled.getter()
{
  return [*(id *)(v0 + 32) orientationEventsEnabled];
}

id OrientationMonitorAccelerometer.orientationEventsEnabled.setter(char a1)
{
  return [*(id *)(v1 + 32) setOrientationEventsEnabled:a1 & 1];
}

id (*OrientationMonitorAccelerometer.orientationEventsEnabled.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = [v3 orientationEventsEnabled];
  return OrientationMonitorAccelerometer.orientationEventsEnabled.modify;
}

id OrientationMonitorAccelerometer.orientationEventsEnabled.modify(uint64_t a1, uint64_t a2)
{
  return OrientationMonitorAccelerometer.orientationEventsEnabled.modify(a1, a2, (SEL *)&selRef_setOrientationEventsEnabled_);
}

id OrientationMonitorAccelerometer.passiveOrientationEvents.getter()
{
  return [*(id *)(v0 + 32) passiveOrientationEvents];
}

id OrientationMonitorAccelerometer.passiveOrientationEvents.setter(char a1)
{
  return [*(id *)(v1 + 32) setPassiveOrientationEvents:a1 & 1];
}

id (*OrientationMonitorAccelerometer.passiveOrientationEvents.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = [v3 passiveOrientationEvents];
  return OrientationMonitorAccelerometer.passiveOrientationEvents.modify;
}

id OrientationMonitorAccelerometer.passiveOrientationEvents.modify(uint64_t a1, uint64_t a2)
{
  return OrientationMonitorAccelerometer.orientationEventsEnabled.modify(a1, a2, (SEL *)&selRef_setPassiveOrientationEvents_);
}

id OrientationMonitorAccelerometer.orientationEventsEnabled.modify(uint64_t a1, uint64_t a2, SEL *a3)
{
  return [*(id *)a1 *a3:*(unsigned __int8 *)(a1 + 8)];
}

unint64_t OrientationMonitorAccelerometer.currentDeviceOrientation.getter()
{
  unint64_t result = (unint64_t)[*(id *)(v0 + 32) currentDeviceOrientation];
  if (result >= 7) {
    return 1;
  }
  return result;
}

uint64_t OrientationMonitorAccelerometer.__allocating_init(onOrientationChange:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  OrientationMonitorAccelerometer.init(onOrientationChange:)(a1, a2);
  return v4;
}

void *OrientationMonitorAccelerometer.init(onOrientationChange:)(uint64_t a1, uint64_t a2)
{
  v2[3] = 0;
  v2[2] = 0;
  v2[4] = [objc_allocWithZone((Class)BKSAccelerometer) init];
  v2[5] = 0;
  swift_beginAccess();
  uint64_t v5 = v2[2];
  v2[2] = a1;
  v2[3] = a2;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
  uint64_t v6 = (void *)v2[4];
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  id v8 = (objc_class *)type metadata accessor for AccelerometerDelegate();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  unint64_t v10 = (uint64_t (**)(uint64_t))&v9[OBJC_IVAR____TtC11MobilePhoneP33_4C1B1F2DAAC46834EA132CE9DCD273E421AccelerometerDelegate_onOrientationChange];
  *unint64_t v10 = partial apply for closure #1 in OrientationMonitorAccelerometer.init(onOrientationChange:);
  v10[1] = (uint64_t (*)(uint64_t))v7;
  *(void *)&v9[OBJC_IVAR____TtC11MobilePhoneP33_4C1B1F2DAAC46834EA132CE9DCD273E421AccelerometerDelegate_accelerometer] = v6;
  v16.receiver = v9;
  v16.super_class = v8;
  id v11 = v6;
  swift_retain_n();
  [super init];
  id v13 = v12;
  [v11 setDelegate:v13];

  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  swift_release();
  os_log_type_t v14 = (void *)v2[5];
  v2[5] = v12;

  return v2;
}

uint64_t sub_1000E5414()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t closure #1 in OrientationMonitorAccelerometer.init(onOrientationChange:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = (void (*)(uint64_t))(*(uint64_t (**)(void))(*(void *)result + 104))();
    uint64_t result = swift_release();
    if (v3)
    {
      v3(a1);
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v3);
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in OrientationMonitorAccelerometer.init(onOrientationChange:)(uint64_t a1)
{
  return closure #1 in OrientationMonitorAccelerometer.init(onOrientationChange:)(a1);
}

uint64_t type metadata accessor for AccelerometerDelegate()
{
  return self;
}

uint64_t OrientationMonitorAccelerometer.deinit()
{
  uint64_t v1 = *(void **)(v0 + 32);
  [v1 setOrientationEventsEnabled:0];
  [v1 setPassiveOrientationEvents:1];
  [v1 setDelegate:0];
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 16));

  return v0;
}

uint64_t OrientationMonitorAccelerometer.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 32);
  [v1 setOrientationEventsEnabled:0];
  [v1 setPassiveOrientationEvents:1];
  [v1 setDelegate:0];
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t sub_1000E5634@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000E5684(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_1000E56CC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000E571C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 160))(*a1);
}

uint64_t type metadata accessor for OrientationMonitorAccelerometer()
{
  return self;
}

id AccelerometerDelegate.__deallocating_deinit()
{
  [*(id *)&v0[OBJC_IVAR____TtC11MobilePhoneP33_4C1B1F2DAAC46834EA132CE9DCD273E421AccelerometerDelegate_accelerometer] setDelegate:0];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccelerometerDelegate();
  [super dealloc];
}

uint64_t specialized AccelerometerDelegate.accelerometer(_:didChange:)(unint64_t a1)
{
  if (a1 >= 7) {
    a1 = 1;
  }
  return (*(uint64_t (**)(unint64_t))(v1
                                                     + OBJC_IVAR____TtC11MobilePhoneP33_4C1B1F2DAAC46834EA132CE9DCD273E421AccelerometerDelegate_onOrientationChange))(a1);
}

uint64_t sub_1000E5970()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UIDeviceOrientation) -> (@out ())(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed UIDeviceOrientation) -> (@out ())(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned UIDeviceOrientation) -> ()(void *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned UIDeviceOrientation) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t Defaults.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t Defaults.showCallProvisioning.getter()
{
  return Defaults.showCallProvisioning.getter(0xD000000000000014, 0x800000010023D360);
}

uint64_t static Defaults.isInternalInstall.getter()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static Defaults.isInternalInstall;
}

id Defaults.subscribe(to:onChange:)(unsigned __int8 a1, uint64_t a2, void *a3)
{
  return specialized Defaults.subscribe(to:onChange:)(a1, a2, a3);
}

id one-time initialization function for featureFlags()
{
  id result = [objc_allocWithZone((Class)TUFeatureFlags) init];
  featureFlags = (uint64_t)result;
  return result;
}

{
  id result;

  id result = [objc_allocWithZone((Class)TUFeatureFlags) init];
  featureFlags = (uint64_t)result;
  return result;
}

BOOL Defaults.Key.requiresInternal.getter(char a1)
{
  return (a1 & 0xFE) == 2;
}

uint64_t Defaults.Key.suiteName.getter(unsigned __int8 a1)
{
  uint64_t result = 0;
  if (a1 <= 4u && ((1 << a1) & 0x13) != 0) {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Defaults.Key.throwIfInUnsupportedEnvironment()()
{
  if ((v0 & 0xFE) == 2)
  {
    if (one-time initialization token for isInternalInstall != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (static Defaults.isInternalInstall != 1)
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      swift_allocError();
      *(_OWORD *)uint64_t v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
      *(_OWORD *)(v1 + 32) = 0u;
      *(_OWORD *)(v1 + 48) = 0u;
      *(void *)(v1 + 64) = 0;
      *(unsigned char *)(v1 + 72) = 2;
      swift_willThrow();
    }
  }
}

char *Defaults.isInternalInstall.unsafeMutableAddressor()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  return &static Defaults.isInternalInstall;
}

unint64_t Defaults.Key.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000029;
      break;
    case 6:
      unint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Defaults.Key(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = Defaults.Key.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == Defaults.Key.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Defaults.Key()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Defaults.Key.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Defaults.Key()
{
  Defaults.Key.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Defaults.Key()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Defaults.Key.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Defaults.Key@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Defaults.Key.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Defaults.Key@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = Defaults.Key.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance Defaults.Error()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance Defaults.Error()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance Defaults.Error()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance Defaults.Error()
{
  return Error._getEmbeddedNSError()();
}

id Defaults.Observation.__allocating_init(userDefault:key:onChange:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = (char *)objc_allocWithZone(v5);
  id v12 = &v11[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_key];
  *(void *)id v12 = a2;
  *((void *)v12 + 1) = a3;
  *(void *)&v11[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_userDefault] = a1;
  id v13 = &v11[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_onChange];
  *(void *)id v13 = a4;
  *((void *)v13 + 1) = a5;
  v18.receiver = v11;
  v18.super_class = v5;
  swift_bridgeObjectRetain();
  id v14 = a1;
  swift_retain();
  id v15 = [super init];
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 addObserver:v15 forKeyPath:v16 options:0 context:v18];

  swift_release();
  return v15;
}

id Defaults.Observation.init(userDefault:key:onChange:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = &v5[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_key];
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  *(void *)&v5[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_userDefault] = a1;
  char v8 = &v5[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_onChange];
  *(void *)char v8 = a4;
  *((void *)v8 + 1) = a5;
  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for Defaults.Observation();
  swift_bridgeObjectRetain();
  id v9 = a1;
  swift_retain();
  [super init];
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 addObserver:v10 forKeyPath:v11 options:0 context:v13];

  swift_release();
  return v10;
}

id Defaults.Observation.__deallocating_deinit()
{
  id v1 = *(id *)&v0[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_userDefault];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 removeObserver:v0 forKeyPath:v2];

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for Defaults.Observation();
  return [super dealloc];
}

uint64_t Defaults.Observation.observeValue(forKeyPath:of:change:context:)()
{
  return (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_onChange))();
}

void Defaults.Observation.init()()
{
}

uint64_t Defaults.deinit()
{
  return v0;
}

uint64_t Defaults.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Defaults.liveVoiceMailAccountUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  objc_super v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD000000000000018, 0x800000010023D340, v5, v6);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    UUID.init(uuidString:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    UUID.init()();
    uint64_t v10 = UUID.uuidString.getter();
    uint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v31);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    id v16 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [v16 initWithSuiteName:v17];

    if (v18)
    {
      swift_bridgeObjectRelease();
      v32[0] = v10;
      v32[1] = v12;
      swift_bridgeObjectRetain();
      uint64_t v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v20 = String._bridgeToObjectiveC()();
      [v18 setObject:v19 forKey:v20];
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      UUID.init(uuidString:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      uint64_t v21 = swift_allocError();
      *(void *)uint64_t v22 = v13;
      *(void *)(v22 + 8) = v15;
      *(unsigned char *)(v22 + 72) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for mobilePhone != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.mobilePhone);
      swift_errorRetain();
      swift_errorRetain();
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v30 = v2;
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        v32[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        uint64_t v33 = v21;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v27 = String.init<A>(reflecting:)();
        uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v32);
        uint64_t v2 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Defaults error: %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(a1, 1, 1, v31);
    }
  }
}

uint64_t Defaults.value<A>(of:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a1 & 0xFE) != 2) {
    goto LABEL_18;
  }
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Defaults.isInternalInstall & 1) == 0)
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(void *)(v14 + 64) = 0;
    *(unsigned char *)(v14 + 72) = 2;
    return swift_willThrow();
  }
  else
  {
LABEL_18:
    uint64_t v6 = a1;
    uint64_t v7 = 0xD000000000000014;
    unint64_t v8 = 0xD000000000000015;
    unint64_t v9 = 0x800000010023D360;
    unint64_t v10 = 0x800000010023D320;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    switch(v6)
    {
      case 1:
        unint64_t v8 = 0xD000000000000018;
        uint64_t v13 = "LiveVoiceMailAccountUUID";
        goto LABEL_10;
      case 2:
        break;
      case 3:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v7 = 0xD00000000000001CLL;
        id v16 = "ShowCallProvisioningRequired";
        goto LABEL_14;
      case 4:
        unint64_t v8 = 0xD00000000000001BLL;
        uint64_t v13 = "ShowLiveVoicemailOnboarding";
LABEL_10:
        unint64_t v10 = (unint64_t)(v13 - 32) | 0x8000000000000000;
        goto LABEL_11;
      case 5:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v7 = 0xD000000000000029;
        id v16 = "DonatedBiomeSignalForFavoriteKnownContact";
        goto LABEL_14;
      case 6:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v7 = 0xD000000000000027;
        id v16 = "DonatedBiomeSignalForSaveUnknownContact";
LABEL_14:
        unint64_t v9 = (unint64_t)(v16 - 32) | 0x8000000000000000;
        break;
      default:
LABEL_11:
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v17;
        uint64_t v7 = v8;
        unint64_t v9 = v10;
        break;
    }
    Defaults.getValueFromUserDefaults<A>(key:suiteName:)(v7, v9, v11, v12, a2, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t Defaults.set<A>(_:for:suiteName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  if (!a3)
  {
    id v12 = [objc_allocWithZone((Class)NSUserDefaults) init];
    goto LABEL_5;
  }
  id v10 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithSuiteName:v11];

  if (v12)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    NSString v14 = String._bridgeToObjectiveC()();
    [v12 setObject:v13 forKey:v14];
    swift_unknownObjectRelease();

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, a1, a4);
  }
  lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
  swift_allocError();
  *(void *)uint64_t v16 = a2;
  *(void *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 72) = 0;
  return swift_willThrow();
}

Swift::Bool __swiftcall VMGreetingChangeViewController.liveVoicemailEnabled()()
{
  if (one-time initialization token for featureFlags != -1) {
    swift_once();
  }
  return TUCallScreeningEnabled();
}

uint64_t Defaults.showCallProvisioningRequired.getter()
{
  return Defaults.showCallProvisioning.getter(0xD00000000000001CLL, 0x800000010023D380);
}

uint64_t Defaults.showCallProvisioning.getter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Defaults.isInternalInstall) {
    return specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(a1, a2, 0, 0) & 1;
  }
  lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
  swift_allocError();
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(void *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 72) = 2;
  swift_willThrow();
  swift_errorRelease();
  return 0;
}

uint64_t Defaults.showLiveVoicemailOnboarding.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v2 = specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD00000000000001BLL, 0x800000010023D3A0, v0, v1);
  swift_bridgeObjectRelease();
  return (v2 == 2) | (v2 & 1);
}

uint64_t key path getter for Defaults.showLiveVoicemailOnboarding : Defaults@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v4 = specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD00000000000001BLL, 0x800000010023D3A0, v2, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = (v4 == 2) | v4 & 1;
  return result;
}

void (*Defaults.showLiveVoicemailOnboarding.modify(unsigned char *a1))(char *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v4 = specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD00000000000001BLL, 0x800000010023D3A0, v2, v3);
  swift_bridgeObjectRelease();
  *a1 = (v4 == 2) | v4 & 1;
  return Defaults.showLiveVoicemailOnboarding.modify;
}

void Defaults.showLiveVoicemailOnboarding.modify(char *a1)
{
}

uint64_t Defaults.getValueFromUserDefaults<A>(key:suiteName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v50 = a6;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)&v43 - v13;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = (char *)&v43 - v17;
  uint64_t v48 = v16;
  double v49 = v14;
  uint64_t v47 = v19;
  if (a4)
  {
    double v46 = (char *)&v43 - v17;
    uint64_t v20 = a1;
    uint64_t v21 = v11;
    uint64_t v22 = a5;
    uint64_t v23 = v12;
    uint64_t v24 = a2;
    id v25 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    uint64_t v26 = a4;
    NSString v27 = String._bridgeToObjectiveC()();
    unint64_t v28 = (char *)[v25 initWithSuiteName:v27];

    if (!v28)
    {
      lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
      swift_allocError();
      *(void *)uint64_t v38 = a3;
      *(void *)(v38 + 8) = v26;
      *(unsigned char *)(v38 + 72) = 0;
      return swift_willThrow();
    }
    uint64_t v29 = v28;
    uint64_t v44 = v26;
    uint64_t v45 = a3;
    swift_bridgeObjectRelease();
    a2 = v24;
    uint64_t v12 = v23;
    a5 = v22;
    uint64_t v11 = v21;
    a1 = v20;
    id v18 = v46;
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = a3;
    uint64_t v30 = (char *)[objc_allocWithZone((Class)NSUserDefaults) init];
  }
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v30 objectForKey:v31];

  if (v32)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v51, (uint64_t)v53);
  outlined init with copy of Any?((uint64_t)v53, (uint64_t)&v51);
  if (!*((void *)&v52 + 1))
  {
    outlined destroy of Any?((uint64_t)&v51);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v18, 1, 1, a5);
    goto LABEL_12;
  }
  double v46 = v30;
  uint64_t v43 = a2;
  uint64_t v33 = v49;
  int v34 = swift_dynamicCast();
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56);
  if (v34)
  {
    uint64_t v36 = *(void *)(a5 - 8);
    v35(v33, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v18, v33, a5);
    v35(v18, 0, 1, a5);
    uint64_t v30 = v46;
LABEL_12:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);

    outlined destroy of Any?((uint64_t)v53);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v50, v18, v11);
  }
  v35(v33, 1, 1, a5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v18, 1, 1, v11);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v48);
  lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
  swift_allocError();
  double v40 = v39;
  *double v39 = a1;
  uint64_t v41 = v44;
  uint64_t v42 = v45;
  v39[1] = v43;
  v39[2] = v42;
  v39[3] = v41;
  outlined init with copy of Any?((uint64_t)v53, (uint64_t)(v39 + 4));
  v40[8] = a5;
  *((unsigned char *)v40 + 72) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_willThrow();

  return outlined destroy of Any?((uint64_t)v53);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Defaults.BOOL(for:)(MobilePhone::Defaults::Key a1)
{
  return specialized Defaults.BOOL(for:)(a1) & 1;
}

uint64_t Defaults.set<A>(_:for:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v10 & 0xFE) != 2) {
    goto LABEL_16;
  }
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Defaults.isInternalInstall & 1) == 0)
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(void *)(v14 + 64) = 0;
    *(unsigned char *)(v14 + 72) = 2;
    return swift_willThrow();
  }
  else
  {
LABEL_16:
    uint64_t v18 = v7;
    uint64_t v11 = a2;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    switch(v11)
    {
      case 2:
        break;
      case 3:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        break;
      case 5:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        break;
      case 6:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        break;
      default:
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v16;
        break;
    }
    Defaults.set<A>(_:for:suiteName:)(a1, v12, v13, a3, (uint64_t)v9);
    if (!v3) {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v9, a3);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void one-time initialization function for isInternalInstall()
{
  id v0 = [self sharedInstance];
  if (v0)
  {
    uint64_t v1 = v0;
    unsigned __int8 v2 = [v0 isInternalInstall];
  }
  else
  {
    unsigned __int8 v2 = 0;
  }
  static Defaults.isInternalInstall = v2;
}

uint64_t static Defaults.isInternalInstall.setter(char a1)
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static Defaults.isInternalInstall = a1 & 1;
  return result;
}

uint64_t (*static Defaults.isInternalInstall.modify())()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

id specialized Defaults.subscribe(to:onChange:)(unsigned __int8 a1, uint64_t a2, id a3)
{
  if ((a1 & 0xFE) != 2) {
    goto LABEL_5;
  }
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Defaults.isInternalInstall & 1) == 0)
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(void *)(v16 + 64) = 0;
    *(unsigned char *)(v16 + 72) = 2;
    swift_willThrow();
  }
  else
  {
LABEL_5:
    int v6 = a1;
    if (((1 << a1) & 0x13) == 0)
    {
LABEL_11:
      unint64_t v13 = 0xD000000000000029;
      unint64_t v14 = 0x800000010023D3C0;
      id v12 = [objc_allocWithZone((Class)NSUserDefaults) init];
      switch(v6)
      {
        case 3:
          goto LABEL_13;
        case 4:
          __break(1u);
          JUMPOUT(0x1000E7EA8);
        case 5:
          goto LABEL_17;
        case 6:
          unint64_t v13 = 0xD000000000000027;
          uint64_t v15 = "DonatedBiomeSignalForSaveUnknownContact";
          goto LABEL_16;
        default:
          goto LABEL_12;
      }
    }
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    id v10 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 initWithSuiteName:v11];

    if (v12)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v13 = 0xD000000000000015;
      unint64_t v14 = 0x800000010023D320;
      switch(v6)
      {
        case 0:
          goto LABEL_17;
        case 1:
          unint64_t v13 = 0xD000000000000018;
          uint64_t v15 = "LiveVoiceMailAccountUUID";
          goto LABEL_16;
        case 2:
LABEL_12:
          unint64_t v14 = 0x800000010023D360;
          unint64_t v13 = 0xD000000000000014;
          goto LABEL_17;
        case 3:
LABEL_13:
          unint64_t v13 = 0xD00000000000001CLL;
          uint64_t v15 = "ShowCallProvisioningRequired";
          goto LABEL_16;
        case 4:
          unint64_t v13 = 0xD00000000000001BLL;
          uint64_t v15 = "ShowLiveVoicemailOnboarding";
LABEL_16:
          unint64_t v14 = (unint64_t)(v15 - 32) | 0x8000000000000000;
LABEL_17:
          uint64_t v18 = (objc_class *)type metadata accessor for Defaults.Observation();
          uint64_t v19 = (char *)objc_allocWithZone(v18);
          uint64_t v20 = (unint64_t *)&v19[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_key];
          *uint64_t v20 = v13;
          v20[1] = v14;
          *(void *)&v19[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_userDefault] = v12;
          uint64_t v21 = &v19[OBJC_IVAR____TtCC11MobilePhone8Defaults11Observation_onChange];
          *(void *)uint64_t v21 = a2;
          *((void *)v21 + 1) = a3;
          v25.receiver = v19;
          v25.super_class = v18;
          swift_retain();
          swift_bridgeObjectRetain();
          id v22 = v12;
          a3 = [super init];
          NSString v23 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v22 addObserver:a3 forKeyPath:v23 options:0 context:0];

          return a3;
        default:
          goto LABEL_11;
      }
    }
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(void *)uint64_t v17 = v7;
    *(void *)(v17 + 8) = v9;
    *(unsigned char *)(v17 + 72) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  return a3;
}

unint64_t specialized Defaults.Key.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Defaults.Key.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for Defaults.Observation()
{
  return self;
}

void specialized Defaults.showLiveVoicemailOnboarding.setter(char a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  id v5 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithSuiteName:v6];

  if (v7)
  {
    swift_bridgeObjectRelease();
    LOBYTE(v17) = a1 & 1;
    uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    [v7 setObject:v8 forKey:v9];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(void *)uint64_t v10 = v2;
    *(void *)(v10 + 8) = v4;
    *(unsigned char *)(v10 + 72) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhone);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Error setting showLiveVoicemailOnboarding: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t specialized Defaults.BOOL(for:)(char a1)
{
  if ((a1 & 0xFE) != 2) {
    goto LABEL_17;
  }
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Defaults.isInternalInstall & 1) == 0)
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(void *)(v3 + 64) = 0;
    *(unsigned char *)(v3 + 72) = 2;
    swift_willThrow();
  }
  else
  {
LABEL_17:
    unsigned __int8 v1 = 21;
    switch(a1)
    {
      case 1:
        unsigned __int8 v1 = 24;
        goto LABEL_9;
      case 2:
      case 3:
      case 5:
      case 6:
        id v9 = [objc_allocWithZone((Class)NSUserDefaults) init];
        goto LABEL_13;
      case 4:
        unsigned __int8 v1 = 27;
        goto LABEL_9;
      default:
LABEL_9:
        uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v6 = v5;
        id v7 = objc_allocWithZone((Class)NSUserDefaults);
        swift_bridgeObjectRetain();
        NSString v8 = String._bridgeToObjectiveC()();
        id v9 = [v7 initWithSuiteName:v8];

        if (v9)
        {
          swift_bridgeObjectRelease();
LABEL_13:
          NSString v11 = String._bridgeToObjectiveC()();
          unsigned __int8 v1 = [v9 BOOLForKey:v11];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
          swift_allocError();
          *(void *)uint64_t v10 = v4;
          *(void *)(v10 + 8) = v6;
          *(unsigned char *)(v10 + 72) = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
    }
  }
  return v1 & 1;
}

unint64_t lazy protocol witness table accessor for type Defaults.Key and conformance Defaults.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type Defaults.Key and conformance Defaults.Key;
  if (!lazy protocol witness table cache variable for type Defaults.Key and conformance Defaults.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Defaults.Key and conformance Defaults.Key);
  }
  return result;
}

void sub_1000E8580(char *a1)
{
}

uint64_t type metadata accessor for Defaults()
{
  return self;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Defaults.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Defaults.Key(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E8714);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for Defaults.Key(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Defaults.Key()
{
  return &type metadata for Defaults.Key;
}

uint64_t initializeBufferWithCopyOfBuffer for Defaults.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for Defaults.Error(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 72);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (v2 == 1)
  {
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v1 + 56))
    {
      return __swift_destroy_boxed_opaque_existential_0(v1 + 32);
    }
  }
  else if (!v2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Defaults.Error(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    int v8 = (_OWORD *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(void *)(a1 + 56) = v9;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32, v9);
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *v8;
      *(_OWORD *)(a1 + 48) = v12;
    }
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = 1;
  }
  else if (v4)
  {
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 72) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for Defaults.Error(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_0(a1 + 32);
      }
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v6 = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v6)
      {
        *(void *)(a1 + 56) = v6;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32, v6);
      }
      else
      {
        long long v10 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v10;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = 1;
    }
    else if (v5)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v7 = *(_OWORD *)(a2 + 16);
      long long v8 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 16) = v7;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Defaults.Error(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_0(a1 + 32);
      }
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 72) = 1;
    }
    else if (v5)
    {
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 72) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Defaults.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Defaults.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Defaults.Error(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Defaults.Error(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Defaults.Error()
{
  return &type metadata for Defaults.Error;
}

unint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
  }
  return result;
}

id LegacyVoicemailCellView.voicemail.getter()
{
  return *v0;
}

uint64_t property wrapper backing initializer of RecentCallView.isPresentingContactDetails()
{
  State.init(wrappedValue:)();
  return v1;
}

uint64_t RecentCallView.isPresentingContactDetails.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t RecentCallView.isPresentingContactDetails.setter()
{
  return State.wrappedValue.setter();
}

void (*RecentCallView.isPresentingContactDetails.modify(void *a1))(uint64_t a1)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  char v4 = *(unsigned char *)(v1 + 8);
  v3[34] = v4;
  uint64_t v5 = *(void *)(v1 + 16);
  *unsigned int v3 = v4;
  *((void *)v3 + 1) = v5;
  *((void *)v3 + 2) = v5;
  swift_retain();
  *((void *)v3 + 3) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return RecentCallView.isPresentingContactDetails.modify;
}

void RecentCallView.isPresentingContactDetails.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  *(unsigned char *)uint64_t v1 = *(unsigned char *)(*(void *)a1 + 34);
  v1[1] = v3;
  *((unsigned char *)v1 + 33) = v2;
  State.wrappedValue.setter();
  swift_release();

  free(v1);
}

uint64_t RecentCallView.$isPresentingContactDetails.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  return v1;
}

id RecentCallView.recentsController.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    return v1;
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
    id result = (id)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController()
{
  unint64_t result = lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController;
  if (!lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController)
  {
    type metadata accessor for ObservableRecentsController(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController);
  }
  return result;
}

uint64_t RecentCallView.$recentsController.getter()
{
  type metadata accessor for ObservableRecentsController(0);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();

  return EnvironmentObject.projectedValue.getter();
}

uint64_t RecentCallView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = type metadata accessor for RecentCallView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  long long v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>>);
  __chkstk_darwin(v37);
  long long v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>.0);
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  __chkstk_darwin(v9);
  long long v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = *(void **)(v1 + 24);
  if (v15)
  {
    uint64_t v16 = *(void **)v1;
    id v17 = v15;
    ObservableRecentsController.localizedRecentCallInfo(for:)(v16, (uint64_t)v14);

    closure #1 in RecentCallView.body.getter(v2, v14, (uint64_t)v8);
    uint64_t v18 = *(void *)(v2 + 16);
    char v45 = *(unsigned char *)(v2 + 8);
    uint64_t v46 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
    State.projectedValue.getter();
    uint64_t v29 = v41;
    int v30 = v43;
    uint64_t v35 = type metadata accessor for RecentCallView;
    uint64_t v36 = v14;
    outlined init with copy of RecentCallView(v2, (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RecentCallView);
    uint64_t v19 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v33 = v19 | 7;
    uint64_t v34 = v20 + v5;
    uint64_t v21 = swift_allocObject();
    outlined init with take of RecentCallView((uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>>);
    uint64_t v32 = lazy protocol witness table accessor for type Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>> and conformance <A> Group<A>, &demangling cache variable for type metadata for Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>>, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>);
    uint64_t v22 = (uint64_t)v8;
    unint64_t v23 = lazy protocol witness table accessor for type ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>> and conformance <> ModifiedContent<A, B>();
    uint64_t v24 = v37;
    View.sheet<A>(isPresented:onDismiss:content:)();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of Locale?(v22, &demangling cache variable for type metadata for Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>>);
    outlined init with copy of RecentCallView(v2, (uint64_t)v6, v35);
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = outlined init with take of RecentCallView((uint64_t)v6, v25 + v20);
    __chkstk_darwin(v26);
    uint64_t v41 = v24;
    uint64_t v42 = v31;
    uint64_t v43 = v32;
    unint64_t v44 = v23;
    swift_getOpaqueTypeConformance2();
    uint64_t v27 = v39;
    Button.init(action:label:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v27);
    return outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v36, type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo);
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RecentCallView(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for RecentCallView);
}

uint64_t closure #1 in RecentCallView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v47 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v42 = (uint64_t)&v42 - v10;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>.Storage);
  __chkstk_darwin(v44);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>);
  __chkstk_darwin(v45);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ContentSizeCategory();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v42 - v20;
  type metadata accessor for RecentCallView(0);
  specialized Environment.wrappedValue.getter((uint64_t)v21);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v15);
  if (v22 == enum case for ContentSizeCategory.extraSmall(_:)
    || v22 == enum case for ContentSizeCategory.small(_:)
    || v22 == enum case for ContentSizeCategory.medium(_:)
    || v22 == enum case for ContentSizeCategory.large(_:)
    || v22 == enum case for ContentSizeCategory.extraLarge(_:)
    || v22 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v22 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
    *(void *)long long v6 = static VerticalAlignment.center.getter();
    *((void *)v6 + 1) = 0;
    uint8_t v6[16] = 1;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>);
    closure #1 in RecentCallView.regularBody(for:)(v43, a1, (uint64_t)&v6[*(int *)(v27 + 44)]);
    unsigned __int8 v28 = static Edge.Set.top.getter();
    unsigned __int8 v29 = static Edge.Set.bottom.getter();
    char v30 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v28) {
      char v30 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v29) {
      char v30 = Edge.Set.init(rawValue:)();
    }
    if (one-time initialization token for internalVertical != -1) {
      swift_once();
    }
    EdgeInsets.init(_all:)();
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    outlined init with copy of (String, Any)((uint64_t)v6, (uint64_t)v9, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>);
    uint64_t v39 = &v9[*(int *)(v46 + 36)];
    *uint64_t v39 = v30;
    *((void *)v39 + 1) = v32;
    *((void *)v39 + 2) = v34;
    *((void *)v39 + 3) = v36;
    *((void *)v39 + 4) = v38;
    v39[40] = 0;
    outlined destroy of Locale?((uint64_t)v6, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>);
    uint64_t v40 = v42;
    outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v9, v42, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>);
    outlined init with copy of (String, Any)(v40, (uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    uint64_t v25 = v40;
    uint64_t v26 = &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>;
  }
  else
  {
    unint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
    if (v22 != enum case for ContentSizeCategory.accessibilityMedium(_:)
      && v22 != enum case for ContentSizeCategory.accessibilityLarge(_:)
      && v22 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
      && v22 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
      && v22 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v23(v19, v15);
    }
    v23(v21, v15);
    *(void *)uint64_t v14 = static VerticalAlignment.center.getter();
    *((void *)v14 + 1) = 0;
    v14[16] = 1;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>);
    closure #1 in RecentCallView.accessibleBody(for:)((uint64_t)v43, a1, (uint64_t)&v14[*(int *)(v24 + 44)]);
    outlined init with copy of (String, Any)((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>);
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    _ConditionalContent<>.init(storage:)();
    uint64_t v25 = (uint64_t)v14;
    uint64_t v26 = &demangling cache variable for type metadata for HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>;
  }
  return outlined destroy of Locale?(v25, v26);
}

uint64_t closure #2 in RecentCallView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  type metadata accessor for ObservableRecentsController(0);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
  id v5 = v4;
  uint64_t v6 = EnvironmentObject.init()();
  uint64_t v8 = *(void **)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v7;
    id v11 = v8;
    uint64_t result = static ObservableObject.environmentStore.getter();
    *a2 = v9;
    a2[1] = v10;
    a2[2] = (uint64_t)v5;
    a2[3] = result;
    a2[4] = (uint64_t)v8;
  }
  else
  {
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t outlined init with take of RecentCallView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentCallView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in RecentCallView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for RecentCallView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in RecentCallView.body.getter(v4, a1);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>>);
    lazy protocol witness table accessor for type RecentCallContactView and conformance RecentCallContactView();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ObservableRecentsController?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ObservableRecentsController?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<RecentCallContactView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RecentCallContactView and conformance RecentCallContactView()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentCallContactView and conformance RecentCallContactView;
  if (!lazy protocol witness table cache variable for type RecentCallContactView and conformance RecentCallContactView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentCallContactView and conformance RecentCallContactView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RecentCallContactView and conformance RecentCallContactView;
  if (!lazy protocol witness table cache variable for type RecentCallContactView and conformance RecentCallContactView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentCallContactView and conformance RecentCallContactView);
  }
  return result;
}

id closure #3 in RecentCallView.body.getter(uint64_t *a1)
{
  uint64_t v1 = a1[3];
  if (v1)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController);
    return [v3 performDialRequestForRecentCall:v2];
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
    id result = (id)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for RecentCallView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);

  swift_release();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_release();
      swift_release();
      uint64_t v7 = v5 + *(int *)(v6 + 32);
      uint64_t v8 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v0 + v3 + *(int *)(v1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

id partial apply for closure #3 in RecentCallView.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for RecentCallView(0) - 8);
  uint64_t v2 = (uint64_t *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return closure #3 in RecentCallView.body.getter(v2);
}

uint64_t partial apply for closure #4 in RecentCallView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>.0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t closure #1 in RecentCallView.regularBody(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RecentCallView(0);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v43 + 64);
  __chkstk_darwin(v6);
  uint64_t v44 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v47 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for RecentCallView.FormattedDateView(0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v46 = (uint64_t)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v48 = static VerticalAlignment.firstTextBaseline.getter();
  closure #1 in closure #1 in RecentCallView.regularBody(for:)(a1, (uint64_t)v67);
  char v70 = 1;
  *(_OWORD *)&v69[167] = v67[10];
  *(_OWORD *)&v69[183] = v67[11];
  *(_OWORD *)&v69[199] = v67[12];
  *(_OWORD *)&v69[215] = v68;
  *(_OWORD *)&v69[103] = v67[6];
  *(_OWORD *)&v69[119] = v67[7];
  *(_OWORD *)&v69[135] = v67[8];
  *(_OWORD *)&v69[151] = v67[9];
  *(_OWORD *)&v69[39] = v67[2];
  *(_OWORD *)&v69[55] = v67[3];
  *(_OWORD *)&v69[71] = v67[4];
  *(_OWORD *)&v69[87] = v67[5];
  *(_OWORD *)&v69[7] = v67[0];
  *(_OWORD *)&v69[23] = v67[1];
  int v45 = 1;
  long long v83 = *(_OWORD *)&v69[192];
  v84[0] = *(_OWORD *)&v69[208];
  *(void *)((char *)v84 + 15) = *((void *)&v68 + 1);
  long long v79 = *(_OWORD *)&v69[128];
  long long v80 = *(_OWORD *)&v69[144];
  long long v82 = *(_OWORD *)&v69[176];
  long long v81 = *(_OWORD *)&v69[160];
  long long v75 = *(_OWORD *)&v69[64];
  long long v76 = *(_OWORD *)&v69[80];
  long long v78 = *(_OWORD *)&v69[112];
  long long v77 = *(_OWORD *)&v69[96];
  long long v71 = *(_OWORD *)v69;
  long long v72 = *(_OWORD *)&v69[16];
  long long v74 = *(_OWORD *)&v69[48];
  long long v73 = *(_OWORD *)&v69[32];
  uint64_t v21 = (char *)a1 + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0) + 32);
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  specialized Environment.wrappedValue.getter((uint64_t)v10);
  char v23 = Optional<A>.isEditing.getter();
  outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for Binding<EditMode>?);
  if (v23)
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<RecentCallView.InfoButton>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v15, 1, 1, v24);
  }
  else
  {
    uint64_t v25 = v44;
    outlined init with copy of RecentCallView(a2, v44, type metadata accessor for RecentCallView);
    unint64_t v26 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v27 = swift_allocObject();
    outlined init with take of RecentCallView(v25, v27 + v26);
    lazy protocol witness table accessor for type RecentCallView.InfoButton and conformance RecentCallView.InfoButton();
    Button.init(action:label:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<RecentCallView.InfoButton>);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v15, 0, 1, v28);
  }
  uint64_t v29 = v46;
  outlined init with copy of RecentCallView((uint64_t)v20, v46, type metadata accessor for RecentCallView.FormattedDateView);
  uint64_t v30 = v47;
  outlined init with copy of (String, Any)((uint64_t)v15, v47, &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  *(_OWORD *)&v50[177] = v82;
  *(_OWORD *)&v50[193] = v83;
  *(_OWORD *)&v50[209] = v84[0];
  *(_OWORD *)&v50[113] = v78;
  *(_OWORD *)&v50[129] = v79;
  *(_OWORD *)&v50[145] = v80;
  *(_OWORD *)&v50[161] = v81;
  *(_OWORD *)&v50[49] = v74;
  *(_OWORD *)&v50[65] = v75;
  *(_OWORD *)&v50[81] = v76;
  *(_OWORD *)&v50[97] = v77;
  *(_OWORD *)&v50[1] = v71;
  uint64_t v31 = v48;
  long long v49 = (unint64_t)v48;
  char v32 = v45;
  v50[0] = v45;
  uint64_t v33 = *(void *)((char *)v84 + 15);
  *(void *)&v50[224] = *(void *)((char *)v84 + 15);
  *(_OWORD *)&v50[17] = v72;
  *(_OWORD *)&v50[33] = v73;
  long long v34 = *(_OWORD *)&v50[192];
  *(_OWORD *)(a3 + 192) = *(_OWORD *)&v50[176];
  *(_OWORD *)(a3 + 208) = v34;
  *(_OWORD *)(a3 + 224) = *(_OWORD *)&v50[208];
  *(void *)(a3 + 240) = v33;
  long long v35 = *(_OWORD *)&v50[128];
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&v50[112];
  *(_OWORD *)(a3 + 144) = v35;
  long long v36 = *(_OWORD *)&v50[160];
  *(_OWORD *)(a3 + 160) = *(_OWORD *)&v50[144];
  *(_OWORD *)(a3 + 176) = v36;
  long long v37 = *(_OWORD *)&v50[64];
  *(_OWORD *)(a3 + 64) = *(_OWORD *)&v50[48];
  *(_OWORD *)(a3 + 80) = v37;
  long long v38 = *(_OWORD *)&v50[96];
  *(_OWORD *)(a3 + 96) = *(_OWORD *)&v50[80];
  *(_OWORD *)(a3 + 112) = v38;
  long long v39 = *(_OWORD *)v50;
  *(_OWORD *)a3 = v49;
  *(_OWORD *)(a3 + 16) = v39;
  long long v40 = *(_OWORD *)&v50[32];
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v50[16];
  *(_OWORD *)(a3 + 48) = v40;
  *(void *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 256) = 1;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?));
  outlined init with copy of RecentCallView(v29, a3 + *(int *)(v41 + 64), type metadata accessor for RecentCallView.FormattedDateView);
  outlined init with copy of (String, Any)(v30, a3 + *(int *)(v41 + 80), &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  outlined retain of HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>((uint64_t)&v49);
  outlined retain of TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>((uint64_t)v67);
  outlined destroy of Locale?((uint64_t)v15, &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v20, type metadata accessor for RecentCallView.FormattedDateView);
  outlined release of TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>((uint64_t)v67);
  outlined destroy of Locale?(v30, &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo(v29, type metadata accessor for RecentCallView.FormattedDateView);
  long long v64 = v82;
  long long v65 = v83;
  *(_OWORD *)uint64_t v66 = v84[0];
  long long v60 = v78;
  long long v61 = v79;
  long long v62 = v80;
  long long v63 = v81;
  long long v56 = v74;
  long long v57 = v75;
  long long v58 = v76;
  long long v59 = v77;
  long long v53 = v71;
  long long v54 = v72;
  v51[0] = v31;
  v51[1] = 0;
  char v52 = v32;
  *(void *)&v66[15] = *(void *)((char *)v84 + 15);
  long long v55 = v73;
  return outlined release of HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>((uint64_t)v51);
}

uint64_t closure #1 in closure #1 in RecentCallView.regularBody(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v29 = *((unsigned char *)a1
        + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0) + 36));
  id v4 = [self tertiaryLabelColor];
  uint64_t v5 = Color.init(_:)();
  char v6 = static Edge.Set.trailing.getter();
  if (one-time initialization token for iconViewTrailing != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = static HorizontalAlignment.leading.getter();
  closure #1 in closure #1 in closure #1 in RecentCallView.regularBody(for:)(a1, (uint64_t)v30);
  char v33 = 0;
  *(_OWORD *)&v32[39] = v30[2];
  *(_OWORD *)&v32[23] = v30[1];
  *(_OWORD *)&v32[103] = v30[6];
  *(_OWORD *)&v32[87] = v30[5];
  *(_OWORD *)&v32[119] = v30[7];
  *(void *)&v32[135] = v31;
  *(_OWORD *)&v32[55] = v30[3];
  *(_OWORD *)&v32[71] = v30[4];
  *(_OWORD *)&v32[7] = v30[0];
  v34[0] = v15;
  v34[1] = 0;
  v35[0] = 0;
  long long v16 = *(_OWORD *)&v32[16];
  *(_OWORD *)&v35[33] = *(_OWORD *)&v32[32];
  long long v17 = *(_OWORD *)v32;
  *(_OWORD *)&v35[17] = *(_OWORD *)&v32[16];
  long long v18 = *(_OWORD *)&v32[64];
  *(_OWORD *)&v35[81] = *(_OWORD *)&v32[80];
  long long v19 = *(_OWORD *)&v32[80];
  *(_OWORD *)&v35[97] = *(_OWORD *)&v32[96];
  long long v20 = *(_OWORD *)&v32[96];
  *(_OWORD *)&v35[113] = *(_OWORD *)&v32[112];
  *(_OWORD *)&v35[128] = *(_OWORD *)&v32[127];
  long long v21 = *(_OWORD *)&v32[32];
  *(_OWORD *)&v35[49] = *(_OWORD *)&v32[48];
  long long v22 = *(_OWORD *)&v32[48];
  *(_OWORD *)&v35[65] = *(_OWORD *)&v32[64];
  *(_OWORD *)&v35[1] = *(_OWORD *)v32;
  *(_OWORD *)&v36[119] = *(_OWORD *)&v35[96];
  *(_OWORD *)&v36[103] = *(_OWORD *)&v35[80];
  *(_OWORD *)&v36[55] = *(_OWORD *)&v35[32];
  *(_OWORD *)&v36[39] = *(_OWORD *)&v35[16];
  *(_OWORD *)&v36[135] = *(_OWORD *)&v35[112];
  *(_OWORD *)&v36[151] = *(_OWORD *)&v32[127];
  *(_OWORD *)&v36[71] = *(_OWORD *)&v35[48];
  *(_OWORD *)&v36[87] = *(_OWORD *)&v35[64];
  *(_OWORD *)&v36[7] = (unint64_t)v15;
  *(_OWORD *)&v36[23] = *(_OWORD *)v35;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v14;
  long long v23 = *(_OWORD *)&v36[96];
  *(_OWORD *)(a2 + 169) = *(_OWORD *)&v36[112];
  long long v24 = *(_OWORD *)&v36[144];
  *(_OWORD *)(a2 + 185) = *(_OWORD *)&v36[128];
  *(_OWORD *)(a2 + 201) = v24;
  long long v25 = *(_OWORD *)&v36[32];
  *(_OWORD *)(a2 + 105) = *(_OWORD *)&v36[48];
  long long v26 = *(_OWORD *)&v36[80];
  *(_OWORD *)(a2 + 121) = *(_OWORD *)&v36[64];
  *(_OWORD *)(a2 + 137) = v26;
  *(_OWORD *)(a2 + 153) = v23;
  long long v27 = *(_OWORD *)&v36[16];
  *(_OWORD *)(a2 + 57) = *(_OWORD *)v36;
  *(_OWORD *)(a2 + 73) = v27;
  *(_OWORD *)(a2 + 89) = v25;
  long long v45 = v19;
  long long v46 = v20;
  v47[0] = *(_OWORD *)&v32[112];
  *(_OWORD *)((char *)v47 + 15) = *(_OWORD *)&v32[127];
  char v37 = 0;
  *(unsigned char *)a2 = v29;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 216) = *(void *)&v36[159];
  v38[0] = v15;
  v38[1] = 0;
  char v39 = 0;
  long long v41 = v16;
  long long v42 = v21;
  long long v43 = v22;
  long long v44 = v18;
  long long v40 = v17;
  swift_retain();
  outlined retain of VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>((uint64_t)v34);
  outlined release of VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>((uint64_t)v38);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in RecentCallView.regularBody(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  int v8 = *((unsigned __int8 *)a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 1) {
    uint64_t v9 = static Color.red.getter();
  }
  else {
    uint64_t v9 = static Color.primary.getter();
  }
  uint64_t v10 = v9;
  char v11 = static Edge.Set.bottom.getter();
  if (one-time initialization token for interLabelVertical != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = a1[2];
  uint64_t v20 = a1[3];
  uint64_t v22 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  char v23 = *((unsigned char *)a1 + *(int *)(v22 + 40));
  long long v24 = (uint64_t *)((char *)a1 + *(int *)(v22 + 44));
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v19;
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = v23;
  *(void *)(a2 + 120) = v25;
  *(void *)(a2 + 128) = v26;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t RecentCallView.TitleAndCountView.init(title:count:color:lineLimit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

void __swiftcall RecentCallView.SubtitleView.init(subtitle:isVerified:lineName:)(MobilePhone::RecentCallView::SubtitleView *__return_ptr retstr, Swift::String subtitle, Swift::Bool isVerified, Swift::String_optional lineName)
{
  retstr->subtitle = subtitle;
  retstr->isVerified = isVerified;
  retstr->lineName = lineName;
}

uint64_t RecentCallView.FormattedDateView.init(date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t closure #1 in RecentCallView.accessibleBody(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v39 = a3;
  uint64_t v4 = type metadata accessor for RecentCallView(0);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v36 + 64);
  __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v36 - v20;
  __chkstk_darwin(v19);
  char v23 = (char *)&v36 - v22;
  *(void *)uint64_t v21 = static HorizontalAlignment.leading.getter();
  *((void *)v21 + 1) = 0;
  v21[16] = 0;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
  closure #1 in closure #1 in RecentCallView.accessibleBody(for:)(v38, (uint64_t)&v21[*(int *)(v24 + 44)]);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v21, (uint64_t)v23, &demangling cache variable for type metadata for VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
  specialized Environment.wrappedValue.getter((uint64_t)v8);
  char v25 = Optional<A>.isEditing.getter();
  outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for Binding<EditMode>?);
  if (v25)
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<RecentCallView.InfoButton>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v14, 1, 1, v26);
  }
  else
  {
    uint64_t v27 = a2;
    uint64_t v28 = v37;
    outlined init with copy of RecentCallView(v27, v37, type metadata accessor for RecentCallView);
    unint64_t v29 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v30 = swift_allocObject();
    outlined init with take of RecentCallView(v28, v30 + v29);
    lazy protocol witness table accessor for type RecentCallView.InfoButton and conformance RecentCallView.InfoButton();
    Button.init(action:label:)();
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<RecentCallView.InfoButton>);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 0, 1, v31);
  }
  outlined init with copy of (String, Any)((uint64_t)v23, (uint64_t)v18, &demangling cache variable for type metadata for VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
  outlined init with copy of (String, Any)((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  uint64_t v32 = v39;
  outlined init with copy of (String, Any)((uint64_t)v18, v39, &demangling cache variable for type metadata for VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?));
  uint64_t v34 = v32 + *(int *)(v33 + 48);
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8) = 1;
  outlined init with copy of (String, Any)((uint64_t)v12, v32 + *(int *)(v33 + 64), &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  outlined destroy of Locale?((uint64_t)v14, &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  outlined destroy of Locale?((uint64_t)v23, &demangling cache variable for type metadata for VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
  outlined destroy of Locale?((uint64_t)v12, &demangling cache variable for type metadata for Button<RecentCallView.InfoButton>?);
  return outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>);
}

uint64_t closure #1 in closure #1 in RecentCallView.accessibleBody(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v24[-v8];
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v28 = v10;
  int v13 = *(unsigned __int8 *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13 == 1) {
    uint64_t v14 = static Color.red.getter();
  }
  else {
    uint64_t v14 = static Color.primary.getter();
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v17 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  uint64_t v18 = *(int *)(v17 + 44);
  int v25 = *(unsigned __int8 *)(a1 + *(int *)(v17 + 40));
  uint64_t v20 = *(void *)(a1 + v18);
  uint64_t v19 = *(void *)(a1 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  uint8_t v9[16] = 1;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>);
  closure #1 in closure #1 in closure #1 in RecentCallView.accessibleBody(for:)(a1, (uint64_t)&v9[*(int *)(v21 + 44)]);
  outlined init with copy of (String, Any)((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>);
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v27;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = 2;
  *(void *)(a2 + 48) = v26;
  *(void *)(a2 + 56) = v16;
  *(unsigned char *)(a2 + 64) = v25;
  *(void *)(a2 + 72) = v20;
  *(void *)(a2 + 80) = v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>));
  outlined init with copy of (String, Any)((uint64_t)v7, a2 + *(int *)(v22 + 64), &demangling cache variable for type metadata for HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of Locale?((uint64_t)v9, &demangling cache variable for type metadata for HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>);
  outlined destroy of Locale?((uint64_t)v7, &demangling cache variable for type metadata for HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #1 in RecentCallView.accessibleBody(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RecentCallView.FormattedDateView(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  uint64_t v11 = a1 + *(int *)(v10 + 32);
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v11, v12);
  LOBYTE(v11) = *(unsigned char *)(a1 + *(int *)(v10 + 36));
  id v13 = [self tertiaryLabelColor];
  uint64_t v14 = Color.init(_:)();
  outlined init with copy of RecentCallView((uint64_t)v9, (uint64_t)v7, type metadata accessor for RecentCallView.FormattedDateView);
  outlined init with copy of RecentCallView((uint64_t)v7, a2, type metadata accessor for RecentCallView.FormattedDateView);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RecentCallView.FormattedDateView, Spacer, RecentCallIconView));
  uint64_t v16 = a2 + *(int *)(v15 + 48);
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a2 + *(int *)(v15 + 64);
  *(unsigned char *)uint64_t v17 = v11;
  *(void *)(v17 + 8) = v14;
  swift_retain();
  outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v9, type metadata accessor for RecentCallView.FormattedDateView);
  swift_release();
  return outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v7, type metadata accessor for RecentCallView.FormattedDateView);
}

uint64_t closure #2 in closure #1 in RecentCallView.regularBody(for:)()
{
  return State.wrappedValue.setter();
}

void one-time initialization function for internalVertical()
{
  static RecentCallView.RegularPadding.internalVertical = 0x4010000000000000;
}

void one-time initialization function for iconViewTrailing()
{
  static RecentCallView.RegularPadding.iconViewTrailing = 0x4028000000000000;
}

void one-time initialization function for interLabelVertical()
{
  static RecentCallView.RegularPadding.interLabelVertical = 0x4000000000000000;
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.localizedTitle.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.localizedSubtitle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RecentCallView.TitleAndCountView.color.getter()
{
  return swift_retain();
}

uint64_t RecentCallView.TitleAndCountView.lineLimit.getter()
{
  return *(void *)(v0 + 40);
}

double RecentCallView.TitleAndCountView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = static VerticalAlignment.center.getter();
  closure #1 in RecentCallView.TitleAndCountView.body.getter(v2, (uint64_t)v11);
  *(_OWORD *)&v12[71] = v11[4];
  *(_OWORD *)&v12[55] = v11[3];
  *(_OWORD *)&v12[119] = v11[7];
  *(_OWORD *)&v12[135] = v11[8];
  *(_OWORD *)&v12[151] = v11[9];
  *(_OWORD *)&v12[167] = v11[10];
  *(_OWORD *)&v12[87] = v11[5];
  *(_OWORD *)&v12[103] = v11[6];
  *(_OWORD *)&v12[7] = v11[0];
  *(_OWORD *)&v12[23] = v11[1];
  *(_OWORD *)&v12[39] = v11[2];
  long long v5 = *(_OWORD *)&v12[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v12[128];
  *(_OWORD *)(a1 + 161) = v5;
  *(_OWORD *)(a1 + 177) = *(_OWORD *)&v12[160];
  long long v6 = *(_OWORD *)&v12[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v12[64];
  *(_OWORD *)(a1 + 97) = v6;
  long long v7 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a1 + 129) = v7;
  long long v8 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 33) = v8;
  double result = *(double *)&v12[32];
  long long v10 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v12[32];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 192) = *(void *)&v12[175];
  *(_OWORD *)(a1 + 65) = v10;
  return result;
}

uint64_t closure #1 in RecentCallView.TitleAndCountView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v23 = v7;
  uint64_t v27 = v8;
  uint64_t v9 = a1[5];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = static Font.headline.getter();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = a1[4];
  uint64_t v28 = swift_getKeyPath();
  if (a1[3])
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v25 = Text.init<A>(_:)();
    uint64_t v26 = v12;
    uint64_t v24 = v13;
    uint64_t v15 = v14 & 1;
    uint64_t v22 = swift_getKeyPath();
    uint64_t v20 = static Font.headline.getter();
    uint64_t v21 = swift_getKeyPath();
    uint64_t v19 = swift_getKeyPath();
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v16 = 1;
    uint64_t v17 = v11;
  }
  else
  {
    swift_retain();
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v15 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v16 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v23 & 1;
  *(void *)(a2 + 24) = v27;
  *(void *)(a2 + 32) = KeyPath;
  *(void *)(a2 + 40) = v9;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v10;
  *(void *)(a2 + 64) = v29;
  *(void *)(a2 + 72) = v28;
  *(void *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v25;
  *(void *)(a2 + 96) = v26;
  *(void *)(a2 + 104) = v15;
  *(void *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v22;
  *(void *)(a2 + 128) = v16;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = v21;
  *(void *)(a2 + 152) = v20;
  *(void *)(a2 + 160) = v19;
  *(void *)(a2 + 168) = v17;
  outlined copy of Text.Storage(v4, v6, v23 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>?(v25, v26, v15, v24);
  outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>?(v25, v26, v15, v24);
  outlined consume of Text.Storage(v4, v6, v23 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RecentCallView.TitleAndCountView()
{
  return static View._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RecentCallView.TitleAndCountView()
{
  return static View._makeViewList(view:inputs:)();
}

double protocol witness for View.body.getter in conformance RecentCallView.TitleAndCountView@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  v11[0] = *v1;
  v11[1] = v3;
  v11[2] = v1[2];
  uint64_t v4 = static VerticalAlignment.center.getter();
  closure #1 in RecentCallView.TitleAndCountView.body.getter(v11, (uint64_t)v12);
  *(_OWORD *)&v13[71] = v12[4];
  *(_OWORD *)&v13[55] = v12[3];
  *(_OWORD *)&v13[119] = v12[7];
  *(_OWORD *)&v13[135] = v12[8];
  *(_OWORD *)&v13[151] = v12[9];
  *(_OWORD *)&v13[167] = v12[10];
  *(_OWORD *)&v13[87] = v12[5];
  *(_OWORD *)&v13[103] = v12[6];
  *(_OWORD *)&v13[7] = v12[0];
  *(_OWORD *)&v13[23] = v12[1];
  *(_OWORD *)&v13[39] = v12[2];
  long long v5 = *(_OWORD *)&v13[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v13[128];
  *(_OWORD *)(a1 + 161) = v5;
  *(_OWORD *)(a1 + 177) = *(_OWORD *)&v13[160];
  long long v6 = *(_OWORD *)&v13[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v13[64];
  *(_OWORD *)(a1 + 97) = v6;
  long long v7 = *(_OWORD *)&v13[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v13[96];
  *(_OWORD *)(a1 + 129) = v7;
  long long v8 = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 33) = v8;
  double result = *(double *)&v13[32];
  long long v10 = *(_OWORD *)&v13[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v13[32];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 192) = *(void *)&v13[175];
  *(_OWORD *)(a1 + 65) = v10;
  return result;
}

uint64_t RecentCallView.SubtitleView.isVerified.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t AccelerometerOrientationMonitorWrapper.sourceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 RecentCallView.SubtitleView.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = static VerticalAlignment.center.getter();
  closure #1 in RecentCallView.SubtitleView.body.getter(v1, (uint64_t)v11);
  char v4 = v12;
  __n128 result = v13;
  long long v6 = v11[0];
  long long v7 = v11[1];
  long long v8 = v11[2];
  long long v9 = v11[3];
  long long v10 = v11[4];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = v10;
  *(unsigned char *)(a1 + 104) = v4;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t closure #1 in RecentCallView.SubtitleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    unint64_t v32 = *(void *)(a1 + 24);
    unint64_t v33 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v4 = Text.init<A>(_:)();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    uint64_t v10 = v9 & 1;
    id v11 = [self tertiaryLabelColor];
    uint64_t v12 = Color.init(_:)();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v30 = v12;
  uint64_t v31 = v8;
  uint64_t v29 = v6;
  uint64_t v13 = v4;
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v32 = 0xD000000000000015;
    unint64_t v33 = 0x800000010023ED70;
    uint64_t v34 = 1;
    UIFontTextStyle v35 = UIFontTextStyleFootnote;
    UIContentSizeCategory v36 = UIContentSizeCategoryAccessibilityLarge;
    uint64_t v15 = UIFontTextStyleFootnote;
    uint64_t v16 = UIContentSizeCategoryAccessibilityLarge;
    uint64_t v28 = specialized Image.init(symbolDescription:)(&v32);

    id v17 = [self tertiaryLabelColor];
    uint64_t v27 = Color.init(_:)();
    uint64_t KeyPath = swift_getKeyPath();
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t KeyPath = 0;
  }
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  uint64_t v25 = static Color.secondary.getter();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v29;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v31;
  *(void *)(a2 + 32) = v30;
  *(void *)(a2 + 40) = v28;
  *(void *)(a2 + 48) = KeyPath;
  *(void *)(a2 + 56) = v27;
  *(void *)(a2 + 64) = v18;
  *(void *)(a2 + 72) = v20;
  *(unsigned char *)(a2 + 80) = v24;
  *(void *)(a2 + 88) = v22;
  *(void *)(a2 + 96) = v25;
  outlined copy of ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?(v13, v29, v10, v31);
  outlined copy of ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>?(v28);
  outlined copy of Text.Storage(v18, v20, v24);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of Text.Storage(v18, v20, v24);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>?(v28);
  return outlined consume of ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?(v13, v29, v10, v31);
}

__n128 protocol witness for View.body.getter in conformance RecentCallView.SubtitleView@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v15[0] = *(_OWORD *)v1;
  v15[1] = v3;
  uint64_t v16 = *(void *)(v1 + 32);
  uint64_t v4 = static VerticalAlignment.center.getter();
  closure #1 in RecentCallView.SubtitleView.body.getter((uint64_t)v15, (uint64_t)v12);
  char v5 = v13;
  __n128 result = v14;
  long long v7 = v12[0];
  long long v8 = v12[1];
  long long v9 = v12[2];
  long long v10 = v12[3];
  long long v11 = v12[4];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 104) = v5;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t RecentCallView.FormattedDateView.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

id RecentCallView.FormattedDateView.body.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for formattingDateLabel != -1) {
    swift_once();
  }
  id v2 = (id)static RecentCallView.FormattedDateView.formattingDateLabel;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v2 setDate:isa];

  id result = [(id)static RecentCallView.FormattedDateView.formattingDateLabel text];
  char v5 = result;
  if (result)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    char v5 = (void *)Text.init<A>(_:)();
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10 & 1;
    uint64_t v12 = static Color.secondary.getter();
    id result = (id)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v12 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  a1[2] = v11;
  a1[3] = v9;
  a1[4] = v12;
  return result;
}

id one-time initialization function for formattingDateLabel()
{
  id result = [objc_allocWithZone((Class)UIDateLabel) init];
  static RecentCallView.FormattedDateView.formattingDateLabel = (uint64_t)result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance RecentCallView.FormattedDateView()
{
  return static View._viewListCount(inputs:)();
}

uint64_t RecentCallView.InfoButton.body.getter@<X0>(uint64_t *a1@<X8>)
{
  v7[0] = 0x7269632E6F666E69;
  v7[1] = 0xEB00000000656C63;
  void v7[2] = -1;
  v7[3] = UIFontTextStyleHeadline;
  void v7[4] = UIContentSizeCategoryAccessibilityLarge;
  id v2 = UIFontTextStyleHeadline;
  uint64_t v3 = UIContentSizeCategoryAccessibilityLarge;
  uint64_t v4 = specialized Image.init(symbolDescription:)(v7);

  uint64_t v5 = static Color.accentColor.getter();
  uint64_t result = swift_getKeyPath();
  *a1 = v4;
  a1[1] = result;
  a1[2] = v5;
  return result;
}

uint64_t RecentCallView.SecondaryTextModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  char v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<RecentCallView.SecondaryTextModifier>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v9, a1, v15);
  uint64_t v16 = &v9[*(int *)(v7 + 44)];
  *(void *)uint64_t v16 = KeyPath;
  *((void *)v16 + 1) = 1;
  v16[16] = 0;
  uint64_t v17 = static Font.subheadline.getter();
  uint64_t v18 = swift_getKeyPath();
  outlined init with copy of (String, Any)((uint64_t)v9, (uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>);
  uint64_t v19 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  *uint64_t v19 = v18;
  v19[1] = v17;
  outlined destroy of Locale?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>);
  uint64_t v20 = swift_getKeyPath();
  outlined init with copy of (String, Any)((uint64_t)v13, a3, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v21 = (uint64_t *)(a3
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
                           + 36));
  *uint64_t v21 = v20;
  v21[1] = a2;
  swift_retain();
  return outlined destroy of Locale?((uint64_t)v13, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RecentCallView.SecondaryTextModifier()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RecentCallView.SecondaryTextModifier()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance RecentCallView.SecondaryTextModifier()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance RecentCallView.SecondaryTextModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RecentCallView.SecondaryTextModifier.body(content:)(a1, *v2, a2);
}

uint64_t default argument 0 of RecentCallContactView.init(recentsController:recentCall:)()
{
  type metadata accessor for ObservableRecentsController(0);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();

  return EnvironmentObject.init()();
}

uint64_t RecentCallView.init(recentCall:isPresentingContactDetails:recentsController:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  State.init(wrappedValue:)();
  *(unsigned char *)(a4 + 8) = v11;
  *(void *)(a4 + 16) = v12;
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  uint64_t v7 = type metadata accessor for RecentCallView(0);
  uint64_t v8 = (uint64_t *)(a4 + *(int *)(v7 + 28));
  *uint64_t v8 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (uint64_t *)(a4 + *(int *)(v7 + 32));
  *uint64_t v9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  return swift_storeEnumTagMultiPayload();
}

__n128 one-time initialization function for configurations()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TitleAndCountView_Preview.Configuration>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100205720;
  uint64_t v1 = static Color.primary.getter();
  strcpy((char *)(v0 + 32), "(408) 239-3118");
  *(unsigned char *)(v0 + 47) = -18;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = v1;
  *(void *)(v0 + 72) = 1;
  uint64_t v2 = static Color.primary.getter();
  *(void *)(v0 + 80) = 0xD000000000000020;
  *(void *)(v0 + 88) = 0x800000010023ED40;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = v2;
  *(void *)(v0 + 120) = 1;
  uint64_t v3 = static Color.primary.getter();
  strcpy((char *)(v0 + 128), "(408) 239-3118");
  *(unsigned char *)(v0 + 143) = -18;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = v3;
  *(void *)(v0 + 168) = 2;
  uint64_t v4 = static Color.primary.getter();
  *(void *)(v0 + 176) = 0xD000000000000020;
  *(void *)(v0 + 184) = 0x800000010023ED40;
  *(void *)(v0 + 192) = 0;
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = v4;
  *(void *)(v0 + 216) = 2;
  uint64_t v5 = static Color.primary.getter();
  strcpy((char *)(v0 + 224), "(408) 239-3118");
  *(unsigned char *)(v0 + 239) = -18;
  *(_OWORD *)(v0 + 240) = xmmword_100205730;
  *(void *)(v0 + 256) = v5;
  *(void *)(v0 + 264) = 1;
  uint64_t v6 = static Color.primary.getter();
  *(void *)(v0 + 272) = 0xD000000000000020;
  *(void *)(v0 + 280) = 0x800000010023ED40;
  *(_OWORD *)(v0 + 288) = xmmword_100205730;
  *(void *)(v0 + 304) = v6;
  *(void *)(v0 + 312) = 1;
  uint64_t v7 = static Color.primary.getter();
  strcpy((char *)(v0 + 320), "(408) 239-3118");
  *(unsigned char *)(v0 + 335) = -18;
  *(_OWORD *)(v0 + 336) = xmmword_100205730;
  *(void *)(v0 + 352) = v7;
  *(void *)(v0 + 360) = 2;
  uint64_t v8 = static Color.primary.getter();
  *(void *)(v0 + 368) = 0xD000000000000020;
  *(void *)(v0 + 376) = 0x800000010023ED40;
  __n128 result = (__n128)xmmword_100205730;
  *(_OWORD *)(v0 + 384) = xmmword_100205730;
  *(void *)(v0 + 400) = v8;
  *(void *)(v0 + 408) = 2;
  static TitleAndCountView_Preview.configurations = (_UNKNOWN *)v0;
  return result;
}

uint64_t static TitleAndCountView_Preview.previews.getter()
{
  if (one-time initialization token for configurations != -1) {
    swift_once();
  }
  uint64_t v0 = *((void *)static TitleAndCountView_Preview.configurations + 2);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>);
  uint64_t v2 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>);

  return ForEach<>.init(_:content:)(0, v0, partial apply for closure #1 in closure #1 in static TitleAndCountView_Preview.previews.getter, 0, v1, v2);
}

uint64_t closure #1 in closure #1 in static TitleAndCountView_Preview.previews.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PreviewLayout();
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (_OWORD *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
  uint64_t v11 = __chkstk_darwin(v10);
  char v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (unint64_t *)((char *)&v41 - v15);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (uint64_t *)((char *)&v41 - v18);
  uint64_t result = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v41 - v21;
  if (one-time initialization token for configurations == -1)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = swift_once();
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if (*((void *)static TitleAndCountView_Preview.configurations + 2) <= a1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v48 = v13;
  uint64_t v23 = (void *)((char *)static TitleAndCountView_Preview.configurations + 48 * a1);
  uint64_t v24 = v23[4];
  uint64_t v25 = v23[5];
  uint64_t v50 = (void (*)(_OWORD *, uint64_t))v23[6];
  uint64_t v51 = v24;
  long long v54 = v22;
  unint64_t v52 = a1;
  uint64_t v27 = v23[7];
  uint64_t v26 = v23[8];
  uint64_t v49 = v23[9];
  *uint64_t v9 = xmmword_100205740;
  long long v45 = (void (*)(_OWORD *, void, uint64_t))v7[13];
  long long v46 = v7 + 13;
  v45(v9, enum case for PreviewLayout.fixed(_:), v6);
  long long v43 = (void (*)(char *, _OWORD *, uint64_t))v7[2];
  long long v44 = v7 + 2;
  v43(v5, v9, v6);
  uint64_t v47 = v10;
  outlined init with copy of (String, Any)((uint64_t)v5, (uint64_t)v19 + *(int *)(v10 + 36), &demangling cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>);
  *uint64_t v19 = v51;
  v19[1] = v25;
  v19[2] = (uint64_t)v50;
  v19[3] = v27;
  uint64_t v28 = v49;
  v19[4] = v26;
  v19[5] = v28;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined destroy of Locale?((uint64_t)v5, &demangling cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>);
  uint64_t v50 = (void (*)(_OWORD *, uint64_t))v7[1];
  uint64_t v51 = v6;
  v50(v9, v6);
  unint64_t v29 = v52;
  swift_release();
  uint64_t v30 = (uint64_t)v54;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v19, v30, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
  if (*((void *)static TitleAndCountView_Preview.configurations + 2) > v29)
  {
    uint64_t v31 = (void *)((char *)static TitleAndCountView_Preview.configurations + 48 * v29);
    unint64_t v32 = v31[5];
    unint64_t v52 = v31[4];
    unint64_t v33 = v31[7];
    uint64_t v49 = v31[6];
    unint64_t v34 = v31[8];
    unint64_t v42 = v31[9];
    uint64_t v35 = v51;
    v45(v9, enum case for PreviewLayout.sizeThatFits(_:), v51);
    v43(v5, v9, v35);
    outlined init with copy of (String, Any)((uint64_t)v5, (uint64_t)v16 + *(int *)(v47 + 36), &demangling cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>);
    *uint64_t v16 = v52;
    v16[1] = v32;
    v16[2] = v49;
    v16[3] = v33;
    unint64_t v36 = v42;
    v16[4] = v34;
    v16[5] = v36;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined destroy of Locale?((uint64_t)v5, &demangling cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>);
    v50(v9, v35);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v16, (uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    uint64_t v37 = (uint64_t)v54;
    outlined init with copy of (String, Any)((uint64_t)v54, (uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    uint64_t v38 = (uint64_t)v48;
    outlined init with copy of (String, Any)((uint64_t)v19, (uint64_t)v48, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    uint64_t v39 = v53;
    outlined init with copy of (String, Any)((uint64_t)v16, v53, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>));
    outlined init with copy of (String, Any)(v38, v39 + *(int *)(v40 + 48), &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    outlined destroy of Locale?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    outlined destroy of Locale?(v37, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    outlined destroy of Locale?(v38, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
    return outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t protocol witness for static PreviewProvider.platform.getter in conformance TitleAndCountView_Preview()
{
  return static PreviewProvider.platform.getter();
}

uint64_t protocol witness for static _PreviewProvider._previews.getter in conformance TitleAndCountView_Preview(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview();

  return static PreviewProvider._previews.getter(a1, v2);
}

uint64_t protocol witness for static _PreviewProvider._platform.getter in conformance TitleAndCountView_Preview(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview();

  return static PreviewProvider._platform.getter(a1, v2);
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  return EnvironmentValues.font.setter();
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000ECDB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000ECDE4()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000ECE10@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000ECE44()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1000ECE74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000ECEA0()
{
  return EnvironmentValues.font.setter();
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallView.TitleAndCountView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallView.SubtitleView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallView.FormattedDateView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallView.InfoButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RecentCallView.SecondaryTextModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview()
{
  unint64_t result = lazy protocol witness table cache variable for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview;
  if (!lazy protocol witness table cache variable for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview;
  if (!lazy protocol witness table cache variable for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TitleAndCountView_Preview and conformance TitleAndCountView_Preview);
  }
  return result;
}

uint64_t associated type witness table accessor for PreviewProvider.Previews : View in TitleAndCountView_Preview()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000ECFFC@<X0>(unsigned char *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  uint64_t result = State.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1000ED054()
{
  return State.wrappedValue.setter();
}

char *initializeBufferWithCopyOfBuffer for RecentCallView(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    a1[8] = *((unsigned char *)a2 + 8);
    uint64_t v8 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v8;
    *((void *)a1 + 4) = a2[4];
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (char **)((char *)a2 + v9);
    uint64_t v12 = v5;
    swift_retain();
    char v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
        memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v17 = v11[1];
        *(void *)uint64_t v10 = *v11;
        *((void *)v10 + 1) = v17;
        uint64_t v18 = *(int *)(v14 + 32);
        uint64_t v26 = (char *)v11 + v18;
        uint64_t v27 = &v10[v18];
        uint64_t v19 = type metadata accessor for EditMode();
        uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_retain();
        swift_retain();
        v25(v27, v26, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    else
    {
      *(void *)uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = *(int *)(a3 + 32);
    uint64_t v21 = &a1[v20];
    uint64_t v22 = (char **)((char *)a2 + v20);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *(void *)uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RecentCallView(id *a1, uint64_t a2)
{
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = &v4[*(int *)(v5 + 32)];
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = (char *)a1 + *(int *)(a2 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ContentSizeCategory();
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8);
    return v10(v8, v9);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for RecentCallView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  id v11 = v6;
  swift_retain();
  id v12 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v16;
      uint64_t v17 = *(int *)(v13 + 32);
      uint64_t v25 = (char *)v10 + v17;
      uint64_t v26 = (char *)v9 + v17;
      uint64_t v18 = type metadata accessor for EditMode();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_retain();
      swift_retain();
      v24(v26, v25, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
    }
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = *(int *)(a3 + 32);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  else
  {
    *uint64_t v20 = *v21;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for RecentCallView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v10;
  id v11 = v10;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    outlined destroy of Locale?(a1 + v12, &demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        uint64_t v18 = *(int *)(v15 + 32);
        uint64_t v26 = (char *)v14 + v18;
        uint64_t v27 = (char *)v13 + v18;
        uint64_t v19 = type metadata accessor for EditMode();
        uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_retain();
        swift_retain();
        v25(v27, v26, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = *(int *)(a3 + 32);
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(a2 + v20);
    outlined destroy of Locale?(a1 + v20, (uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for RecentCallView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v13;
      uint64_t v14 = *(int *)(v10 + 32);
      uint64_t v15 = (char *)v7 + v14;
      uint64_t v16 = (char *)v8 + v14;
      uint64_t v17 = type metadata accessor for EditMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v18 = *(int *)(a3 + 32);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for RecentCallView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (void *)(a2 + v8);
    outlined destroy of Locale?(a1 + v8, &demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        uint64_t v15 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v15;
        uint64_t v16 = *(int *)(v12 + 32);
        uint64_t v17 = (char *)v9 + v16;
        uint64_t v18 = (char *)v10 + v16;
        uint64_t v19 = type metadata accessor for EditMode();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v20 = *(int *)(a3 + 32);
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    outlined destroy of Locale?(a1 + v20, (uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE01C);
}

uint64_t sub_1000EE01C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ContentSizeCategory>);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for RecentCallView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE164);
}

void *sub_1000EE164(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ContentSizeCategory>);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for RecentCallView()
{
  type metadata accessor for Environment<Binding<EditMode>?>.Content();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<ContentSizeCategory>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Environment<Binding<EditMode>?>.Content()
{
  if (!lazy cache variable for type metadata for Environment<Binding<EditMode>?>.Content)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Binding<EditMode>?);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    }
  }
}

void type metadata accessor for Environment<ContentSizeCategory>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ContentSizeCategory>.Content)
  {
    type metadata accessor for ContentSizeCategory();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    }
  }
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for RecentCallView.TitleAndCountView()
{
  return &type metadata for RecentCallView.TitleAndCountView;
}

uint64_t destroy for RecentCallView.SubtitleView()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RecentCallView.SubtitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RecentCallView.SubtitleView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RecentCallView.SubtitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallView.SubtitleView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecentCallView.SubtitleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallView.SubtitleView()
{
  return &type metadata for RecentCallView.SubtitleView;
}

uint64_t initializeBufferWithCopyOfBuffer for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for RecentCallView.FormattedDateView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE8E0);
}

uint64_t sub_1000EE8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RecentCallView.FormattedDateView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE960);
}

uint64_t sub_1000EE960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RecentCallView.FormattedDateView(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for RecentCallView.FormattedDateView);
}

uint64_t type metadata completion function for RecentCallView.FormattedDateView()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallView.InfoButton()
{
  return &type metadata for RecentCallView.InfoButton;
}

ValueMetadata *type metadata accessor for RecentCallView.SecondaryTextModifier()
{
  return &type metadata for RecentCallView.SecondaryTextModifier;
}

ValueMetadata *type metadata accessor for TitleAndCountView_Preview()
{
  return &type metadata for TitleAndCountView_Preview;
}

uint64_t sub_1000EEAAC()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Button<<<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>.0> and conformance Button<A>, &demangling cache variable for type metadata for Button<<<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>.0>);
}

uint64_t sub_1000EEAE8()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>?)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>?)>>);
}

uint64_t sub_1000EEB24()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>?, ModifiedContent<Text, RecentCallView.SecondaryTextModifier>)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?, ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>?, ModifiedContent<Text, RecentCallView.SecondaryTextModifier>)>>);
}

uint64_t sub_1000EEB60()
{
  return lazy protocol witness table accessor for type Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type ModifiedContent<Text, RecentCallView.SecondaryTextModifier>? and conformance <A> A?, &demangling cache variable for type metadata for ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Text, RecentCallView.SecondaryTextModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>> and conformance <A> Group<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, RecentCallView.SecondaryTextModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, RecentCallView.SecondaryTextModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, RecentCallView.SecondaryTextModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, RecentCallView.SecondaryTextModifier>);
    lazy protocol witness table accessor for type RecentCallView.SecondaryTextModifier and conformance RecentCallView.SecondaryTextModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, RecentCallView.SecondaryTextModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RecentCallView.SecondaryTextModifier and conformance RecentCallView.SecondaryTextModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentCallView.SecondaryTextModifier and conformance RecentCallView.SecondaryTextModifier;
  if (!lazy protocol witness table cache variable for type RecentCallView.SecondaryTextModifier and conformance RecentCallView.SecondaryTextModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentCallView.SecondaryTextModifier and conformance RecentCallView.SecondaryTextModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _ViewModifier_Content<RecentCallView.SecondaryTextModifier> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<RecentCallView.SecondaryTextModifier>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RecentCallView.SecondaryTextModifier>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1000EEF98()
{
  return lazy protocol witness table accessor for type Group<_ConditionalContent<HStack<TupleView<(VStack<TupleView<(RecentCallView.TitleAndCountView, RecentCallView.SubtitleView, HStack<TupleView<(RecentCallView.FormattedDateView, Spacer, RecentCallIconView)>>)>>, Spacer, Button<RecentCallView.InfoButton>?)>>, ModifiedContent<HStack<TupleView<(HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>, Spacer, RecentCallView.FormattedDateView, Button<RecentCallView.InfoButton>?)>>, _PaddingLayout>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>>> and conformance <A> Group<A>, &demangling cache variable for type metadata for Group<ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>>>, (void (*)(void))lazy protocol witness table accessor for type ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>> and conformance <> ForEach<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>, ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>)>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined copy of ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined consume of ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<Text, RecentCallView.SecondaryTextModifier>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in RecentCallView.regularBody(for:)()
{
  return closure #2 in closure #1 in RecentCallView.regularBody(for:)();
}

unint64_t lazy protocol witness table accessor for type RecentCallView.InfoButton and conformance RecentCallView.InfoButton()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentCallView.InfoButton and conformance RecentCallView.InfoButton;
  if (!lazy protocol witness table cache variable for type RecentCallView.InfoButton and conformance RecentCallView.InfoButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentCallView.InfoButton and conformance RecentCallView.InfoButton);
  }
  return result;
}

uint64_t outlined init with copy of RecentCallView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined retain of HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of HStack<TupleView<(ModifiedContent<RecentCallIconView, _PaddingLayout>, VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of VStack<TupleView<(ModifiedContent<RecentCallView.TitleAndCountView, _PaddingLayout>, RecentCallView.SubtitleView)>>(uint64_t a1)
{
  return a1;
}

uint64_t destroy for RecentCallView.TitleAndCountView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for RecentCallView.TitleAndCountView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RecentCallView.TitleAndCountView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for RecentCallView.TitleAndCountView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallView.TitleAndCountView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecentCallView.TitleAndCountView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for TitleAndCountView_Preview.Configuration()
{
  return &unk_10027FAD0;
}

uint64_t SuggestionsSearchTableViewController.suggestionsDelegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t SuggestionsSearchTableViewController.suggestionsDelegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*SuggestionsSearchTableViewController.suggestionsDelegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestionsDelegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchTableViewController.suggestionsDelegate.modify;
}

void SuggestionsSearchTableViewController.suggestionsDelegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t SuggestionsSearchTableViewController.suggestions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SuggestionsSearchTableViewController.suggestions.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SuggestionsSearchTableViewController.suggestions.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t SuggestionsSearchTableViewController.searchText.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SuggestionsSearchTableViewController.searchText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SuggestionsSearchTableViewController.searchText.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t SuggestionsSearchTableViewController.tableView(_:cellForRowAt:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AttributedString();
  __chkstk_darwin(v4 - 8);
  NSString v5 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v7 = [a1 dequeueReusableCellWithIdentifier:v5 forIndexPath:isa];

  type metadata accessor for SuggestionsSearchViewCell();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "SuggestionsSearchTableViewController: Cell not of type suggestion", v31, 2u);
      swift_slowDealloc();
    }

    return (uint64_t)v7;
  }
  uint64_t v9 = v8;
  id v10 = v7;
  unint64_t v11 = IndexPath.row.getter();
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions);
  uint64_t result = swift_beginAccess();
  uint64_t v14 = *v12;
  if ((*v12 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v14 + 8 * v11 + 32);
LABEL_6:
    uint64_t v16 = v15;
    swift_endAccess();
    id v17 = specialized static SuggestionsSearchViewCell.imageForSuggestion(suggestion:)(v16);
    uint64_t v18 = *(void **)(v9 + OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage);
    *(void *)(v9 + OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage) = v17;

    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    CSSuggestion.localizedAttributedSuggestion.getter();
    uint64_t v19 = NSAttributedString.init(_:)();
    id v20 = [v19 string];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    uint64_t v24 = (uint64_t *)(v9 + OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionText);
    uint64_t *v24 = v21;
    v24[1] = v23;

    swift_bridgeObjectRelease();
    uint64_t v25 = (uint64_t *)(v2 + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText);
    swift_beginAccess();
    uint64_t v26 = *v25;
    uint64_t v27 = (void *)v25[1];
    swift_bridgeObjectRetain();
    v28.value._uint64_t countAndFlagsBits = v26;
    v28.value._object = v27;
    SuggestionsSearchViewCell.configure(withSearchText:)(v28);

    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

void SuggestionsSearchTableViewController.tableView(_:didSelectRowAt:)()
{
}

Swift::Void __swiftcall SuggestionsSearchTableViewController.highlightMatchedText(in:)(UITableViewCell in)
{
  type metadata accessor for SuggestionsSearchViewCell();
  if (swift_dynamicCastClass())
  {
    uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText);
    swift_beginAccess();
    uint64_t v4 = (void *)v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      uint64_t v6 = in.super.super.super.isa;
      v7.value._uint64_t countAndFlagsBits = v5;
      v7.value._object = v4;
      SuggestionsSearchViewCell.configure(withSearchText:)(v7);

      swift_bridgeObjectRelease();
    }
  }
}

id SuggestionsSearchTableViewController.__allocating_init(style:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);

  return [v3 initWithStyle:a1];
}

id SuggestionsSearchTableViewController.init(style:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = v1;
  Logger.init(subsystem:category:)();
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions] = _swiftEmptyArrayStorage;
  uint64_t v5 = &v4[OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;

  v7.receiver = v4;
  v7.super_class = ObjectType;
  return [super initWithStyle:a1];
}

id SuggestionsSearchTableViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithNibName:v6 bundle:a3];

  return v7;
}

id SuggestionsSearchTableViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = v4;
  Logger.init(subsystem:category:)();
  swift_unknownObjectWeakInit();
  *(void *)&v8[OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions] = _swiftEmptyArrayStorage;
  uint64_t v9 = &v8[OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;

  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  v13.receiver = v8;
  v13.super_class = ObjectType;
  [super initWithNibName:v10 bundle:a3];

  return v11;
}

id SuggestionsSearchTableViewController.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = v1;
  Logger.init(subsystem:category:)();
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions] = _swiftEmptyArrayStorage;
  uint64_t v5 = &v4[OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;

  v8.receiver = v4;
  v8.super_class = ObjectType;
  id v6 = [super initWithCoder:a1];

  return v6;
}

id specialized static SuggestionsSearchTableViewController.searchToken(suggestion:)(void *a1)
{
  uint64_t v2 = type metadata accessor for AttributedString();
  __chkstk_darwin(v2 - 8);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for NSMutableAttributedString);
  CSSuggestion.localizedAttributedSuggestion.getter();
  id v3 = NSAttributedString.init(_:)();
  id v4 = [v3 string];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = specialized static SuggestionsSearchViewCell.imageForSuggestion(suggestion:)(a1);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [self tokenWithIcon:v5 text:v6];

  [v7 setRepresentedObject:a1];
  return v7;
}

void specialized SuggestionsSearchTableViewController.tableView(_:didSelectRowAt:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    uint64_t v4 = IndexPath.row.getter();
    id v5 = (uint64_t *)(v0 + OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions);
    swift_beginAccess();
    if ((unint64_t)*v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4 < v18)
      {
LABEL_4:
        unint64_t v6 = IndexPath.row.getter();
        swift_beginAccess();
        uint64_t v7 = *v5;
        if ((*v5 & 0xC000000000000001) == 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v6 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v8 = *(id *)(v7 + 8 * v6 + 32);
            goto LABEL_8;
          }
          __break(1u);
LABEL_25:
          swift_once();
LABEL_9:
          NSString v10 = (void *)static SearchMetrics.shared;
          unint64_t v11 = IndexPath.row.getter();
          swift_beginAccess();
          uint64_t v12 = *v5;
          if ((*v5 & 0xC000000000000001) == 0)
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v11 < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v13 = *(id *)(v12 + 8 * v11 + 32);
LABEL_13:
              uint64_t v14 = v13;
              swift_endAccess();
              uint64_t v15 = v1 + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText;
              swift_beginAccess();
              uint64_t v16 = *(void *)(v15 + 8);
              if (v16)
              {
                swift_bridgeObjectRetain();
                uint64_t v17 = String.count.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v17 = 0;
              }
              (*(void (**)(void *, uint64_t, BOOL))((swift_isaMask & *v10) + 0xD8))(v14, v17, v16 == 0);

LABEL_20:
              swift_unknownObjectRelease();

              return;
            }
            __break(1u);
            return;
          }
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_13;
        }
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
        uint64_t v9 = v8;
        swift_endAccess();
        unint64_t v6 = (unint64_t)specialized static SuggestionsSearchTableViewController.searchToken(suggestion:)(v9);

        [v3 didSelectSuggestedSearchWithToken:v6];
        if (one-time initialization token for shared == -1) {
          goto LABEL_9;
        }
        goto LABEL_25;
      }
    }
    else if (v4 < *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_4;
    }
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v6, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, v19, "SuggestionsSearchTableViewController: Suggestions in UI were not updated as per the datasource (due to the 0.5 s delay)", v20, 2u);
      swift_slowDealloc();
    }
    goto LABEL_20;
  }
}

uint64_t sub_1000F0E60@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1000F0EB8()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t ObjC metadata update function for SuggestionsSearchTableViewController()
{
  return type metadata accessor for SuggestionsSearchTableViewController();
}

uint64_t type metadata accessor for SuggestionsSearchTableViewController()
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsSearchTableViewController;
  if (!type metadata singleton initialization cache for SuggestionsSearchTableViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsSearchTableViewController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Swift::Void __swiftcall MPRecentsTableViewController.didSelectSuggestedSearch(token:)(UISearchToken token)
{
  uint64_t v3 = type metadata accessor for AttributedString();
  __chkstk_darwin(v3 - 8);
  if ([(objc_class *)token.super.isa representedObject])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v18, &v19);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CSSuggestion);
    swift_dynamicCast();
    id v4 = [v1 searchController];
    id v5 = [v4 searchBar];

    id v6 = [v5 searchTextField];
    id v7 = [v17 currentToken];
    if (v7 && (id v8 = v7, v9 = [v7 tokenKind], v8, !v9))
    {
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      id v15 = v6;
      CSSuggestion.localizedAttributedSuggestion.getter();
      uint64_t v16 = NSAttributedString.init(_:)();
      NSString v14 = [v16 string];

      if (!v14)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v14 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      id v10 = [v6 tokens];
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
      unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      [v6 insertToken:token.super.isa atIndex:v12];
      id v13 = v6;
      NSString v14 = String._bridgeToObjectiveC()();
    }
    [v6 setText:v14];
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[46] = a5;
  v6[47] = a6;
  v6[45] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[48] = v7;
  v6[49] = *(void *)(v7 - 8);
  v6[50] = swift_task_alloc();
  v6[51] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LiveVoicemailTip();
  v6[52] = v8;
  v6[53] = *(void *)(v8 - 8);
  v6[54] = swift_task_alloc();
  v6[55] = swift_task_alloc();
  v6[56] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[57] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[58] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[59] = v9;
  v6[60] = *(void *)(v9 - 8);
  v6[61] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[62] = v10;
  v6[63] = *(void *)(v10 - 8);
  v6[64] = swift_task_alloc();
  v6[65] = type metadata accessor for MainActor();
  v6[66] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[67] = v12;
  v6[68] = v11;
  return _swift_task_switch(specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v12, v11);
}

uint64_t specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 472);
  *(void *)(v0 + 552) = lazy protocol witness table accessor for type LiveVoicemailTip and conformance LiveVoicemailTip();
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 640) = enum case for TPTipsHelper.Entry.Kind.voicemailDetail(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 560) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v5;
  *id v5 = v0;
  v5[1] = specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 336);
}

{
  uint64_t v0;
  void *Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *boxed_opaque_existential_1;
  void (*v42)(uint64_t *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  long long v59 = v0;
  if (*(unsigned char *)(v0 + 644) == 2
    || (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(), (*(void *)(v0 + 576) = Strong) == 0))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 504) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 496));
    swift_release();
  }
  else
  {
    if ((*(unsigned char *)(v0 + 644) & 1) == 0)
    {
      if (one-time initialization token for mobilePhoneTips != -1) {
        swift_once();
      }
      uint64_t v2 = *(void *)(v0 + 440);
      uint64_t v3 = *(void *)(v0 + 416);
      uint64_t v4 = *(void *)(v0 + 424);
      id v5 = *(void *)(v0 + 360);
      id v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.mobilePhoneTips);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
      uint64_t v7 = Logger.logObject.getter();
      uint64_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        long long v54 = *(void *)(v0 + 440);
        uint64_t v10 = *(void *)(v0 + 416);
        uint64_t v9 = *(void *)(v0 + 424);
        uint64_t v11 = swift_slowAlloc();
        long long v58 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315394;
        uint64_t v12 = _typeName(_:qualified:)();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2080;
        uint64_t v14 = dispatch thunk of Tip.id.getter();
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v54, v10);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: Stopping observation of tip %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 440), *(void *)(v0 + 416));
      }

      type metadata accessor for TPTipsHelper();
      unint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 624) = v34;
      *unint64_t v34 = v0;
      uint64_t v35 = specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
      goto LABEL_20;
    }
    long long v18 = Strong;
    long long v19 = [Strong voicemailTipView];

    if (!v19)
    {
      unint64_t v36 = *(void *)(v0 + 552);
      uint64_t v37 = *(void *)(v0 + 416);
      uint64_t v38 = *(void *)(v0 + 424);
      uint64_t v39 = *(void *)(v0 + 376);
      uint64_t v40 = *(void *)(v0 + 360);
      *(void *)(v0 + 200) = v37;
      *(void *)(v0 + 208) = v36;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
      unint64_t v42 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v38 + 16);
      *(void *)(v0 + 584) = v42;
      *(void *)(v0 + 592) = (v38 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v42(boxed_opaque_existential_1, v40, v37);
      long long v43 = swift_allocObject();
      swift_unknownObjectWeakInit();
      long long v44 = swift_allocObject();
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = v39;
      long long v45 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
      long long v46 = (void *)TipUIView.init(_:arrowEdge:actionHandler:)();
      *(void *)(v0 + 600) = v46;
      [v46 setTranslatesAutoresizingMaskIntoConstraints:0];
      type metadata accessor for TPTipsHelper();
      unint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 608) = v34;
      *unint64_t v34 = v0;
      uint64_t v35 = specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
LABEL_20:
      v34[1] = v35;
      return static TPTipsHelper.shared.getter();
    }
    swift_release();
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v21 = *(void *)(v0 + 424);
    id v20 = *(void *)(v0 + 432);
    uint64_t v22 = *(void *)(v0 + 416);
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.mobilePhoneTips);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
    uint64_t v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      long long v55 = *(void *)(v0 + 504);
      long long v56 = *(void *)(v0 + 496);
      long long v57 = *(void *)(v0 + 512);
      uint64_t v27 = *(void *)(v0 + 424);
      uint64_t v53 = *(void *)(v0 + 432);
      Swift::String_optional v28 = *(void *)(v0 + 416);
      unint64_t v29 = swift_slowAlloc();
      long long v58 = swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 136315394;
      os_log_type_t v30 = _typeName(_:qualified:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      unint64_t v32 = dispatch thunk of Tip.id.getter();
      *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v53, v28);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s: Already tracking tip %s, ignoring to add new one.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
    }
    else
    {
      uint64_t v48 = *(void *)(v0 + 504);
      uint64_t v47 = *(void *)(v0 + 512);
      uint64_t v49 = *(void *)(v0 + 496);
      uint64_t v51 = *(void *)(v0 + 424);
      uint64_t v50 = *(void *)(v0 + 432);
      unint64_t v52 = *(void *)(v0 + 416);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  void (*v6)(uint64_t, void);
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  void (*v18)(unint64_t, void);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 360);
  (*(void (**)(void, void, void))(*(void *)(v0 + 392) + 104))(*(void *)(v0 + 408), *(unsigned int *)(v0 + 640), *(void *)(v0 + 384));
  *(void *)(v0 + 240) = v3;
  *(void *)(v0 + 248) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 216));
  v1(boxed_opaque_existential_1, v4, v3);
  id v6 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  uint64_t v8 = v7;
  if (*(void *)(v0 + 240))
  {
    uint64_t v9 = *(void *)(v0 + 408);
    uint64_t v10 = *(void *)(v0 + 384);
    uint64_t v11 = *(void *)(v0 + 392);
    outlined init with take of Tip((long long *)(v0 + 216), v0 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::String_optional v28 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 16), v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v8 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  else
  {
    id v13 = *(void *)(v0 + 408);
    outlined destroy of Tip?(v0 + 216);
    swift_bridgeObjectRetain();
    uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    LOBYTE(v13) = v15;
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 344) = *v8;
      *uint64_t v8 = 0x8000000000000000;
      if ((v16 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v17 = *(void *)(v0 + 392);
      long long v18 = *(void (**)(unint64_t, void))(v17 + 8);
      v18(*(void *)(*(void *)(v0 + 344) + 48) + *(void *)(v17 + 72) * v14, *(void *)(v0 + 384));
      long long v19 = *(void *)(v0 + 344);
      outlined init with take of Tip((long long *)(*(void *)(v19 + 56) + 40 * v14), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v14, v19);
      *uint64_t v8 = v19;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v20 = *(void *)(v0 + 392);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      long long v18 = *(void (**)(unint64_t, void))(v20 + 8);
    }
    v18(*(void *)(v0 + 408), *(void *)(v0 + 384));
    outlined destroy of Tip?(v0 + 56);
  }
  uint64_t v21 = *(void **)(v0 + 616);
  uint64_t v22 = *(void **)(v0 + 600);
  uint64_t v23 = *(void **)(v0 + 576);
  v6(v0 + 256, 0);

  [v23 setVoicemailTipView:v22];
  uint64_t v24 = static MainActor.shared.getter();
  *(void *)(v0 + 560) = v24;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v25;
  *uint64_t v25 = v0;
  v25[1] = specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return v27(v24, (uint64_t)&protocol witness table for MainActor);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t (*v24)(void);
  uint64_t v26;

  uint64_t v1 = *(void **)(v0 + 632);
  uint64_t v2 = *(unsigned int *)(v0 + 640);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 400);
  id v5 = *(void *)(v0 + 384);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  id v6 = dispatch thunk of TPTipsHelper.currentTip.getter();

  if (*(void *)(v6 + 16)
    && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 400)), (v8 & 1) != 0))
  {
    outlined init with copy of Tip(*(void *)(v6 + 56) + 40 * v7, v0 + 136);
  }
  else
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 400);
  uint64_t v11 = *(void *)(v0 + 384);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  if (!*(void *)(v0 + 160))
  {
    uint64_t v16 = *(void **)(v0 + 576);
    (*(void (**)(void, void))(*(void *)(v0 + 504) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 496));

    outlined destroy of Tip?(v0 + 136);
    goto LABEL_14;
  }
  outlined init with take of Tip((long long *)(v0 + 136), v0 + 96);
  __swift_project_boxed_opaque_existential_0((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v12 = dispatch thunk of Tip.id.getter();
  uint64_t v14 = v13;
  if (v12 == dispatch thunk of Tip.id.getter() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v23 = *(void **)(v0 + 576);
      (*(void (**)(void, void))(*(void *)(v0 + 504) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 496));

      goto LABEL_13;
    }
  }
  long long v18 = *(void **)(v0 + 576);
  id v20 = *(void *)(v0 + 504);
  long long v19 = *(void *)(v0 + 512);
  uint64_t v21 = *(void *)(v0 + 496);
  uint64_t v22 = [v18 voicemailTipView];
  [v22 removeFromSuperview];

  [v18 setVoicemailTipView:0];
  [v18 loadExpandedViewsIfNecessary];

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
LABEL_13:
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 644) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 544);
  uint64_t v4 = *(void *)(v2 + 536);
  return _swift_task_switch(specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v4, v3);
}

uint64_t specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 616) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 544);
  uint64_t v4 = *(void *)(v2 + 536);
  return _swift_task_switch(specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 632) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 544);
  uint64_t v4 = *(void *)(v2 + 536);
  return _swift_task_switch(specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v4, v3);
}

void closure #1 in closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)id v5 = 136315138;
      uint64_t v6 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Calling voicemailMessageTableViewCellShouldPresentWelcomeViewController", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v8 = [v1 delegate];
    if (v8)
    {
      uint64_t v9 = v8;
      if ([v8 respondsToSelector:"voicemailMessageTableViewCellShouldPresentWelcomeViewController:"])[v9 voicemailMessageTableViewCellShouldPresentWelcomeViewController:v1]; {

      }
      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall PHVoicemailMessageTableViewCell.tipKitStartObservation()()
{
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for mobilePhoneTips != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.mobilePhoneTips);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    uint64_t v5 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: Starting observation of tips", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for TPTipsHelper();
  static TPTipsHelper.taskQueue.getter();
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = ObjectType;
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_1000F2CB4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation()(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  uint64_t v3 = type metadata accessor for LiveVoicemailTip();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  type metadata accessor for TPTipsHelper();
  os_log_type_t v4 = (void *)swift_task_alloc();
  v2[12] = v4;
  void *v4 = v2;
  v4[1] = closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return static TPTipsHelper.shared.getter();
}

uint64_t closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation(), 0, 0);
}

uint64_t closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation()()
{
  *(void *)(v0 + 112) = type metadata accessor for MainActor();
  *(void *)(v0 + 120) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 104);
  swift_release();
  dispatch thunk of TPTipsHelper.setup()();

  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  uint64_t Strong;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  long long v19 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[16] = Strong;
  if (Strong)
  {
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      long long v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v6 = _typeName(_:qualified:)();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Observing LiveVoicemailTip", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    LiveVoicemailTip.init()();
    v0[17] = static MainActor.shared.getter();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[18] = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
    uint64_t v9 = v0[11];
    return specialized PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(v9);
  }
  else
  {
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v12 = Logger.logObject.getter();
    id v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      long long v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      id v15 = _typeName(_:qualified:)();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: Observing tip failed because self is nil", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation(), v1, v0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation()(v2, v3);
}

Swift::Void __swiftcall PHVoicemailMessageTableViewCell.tipKitStopObservation()()
{
  swift_getObjectType();
  if (one-time initialization token for mobilePhoneTips != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.mobilePhoneTips);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: Stopping observation of tips", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for TPTipsHelper();
  static TPTipsHelper.taskQueue.getter();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
}

uint64_t closure #1 in PHVoicemailMessageTableViewCell.tipKitStopObservation()()
{
  uint64_t v1 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  type metadata accessor for TPTipsHelper();
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *os_log_type_t v2 = v0;
  v2[1] = closure #1 in PHVoicemailMessageTableViewCell.tipKitStopObservation();
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for TPTipsHelper.Entry.Kind.voicemailDetail(_:), v0[2]);
  type metadata accessor for MainActor();
  v0[7] = static MainActor.shared.getter();
  os_log_type_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStopObservation(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[6];
  uint64_t v3 = v0[3];
  os_log_type_t v2 = v0[4];
  uint64_t v4 = v0[2];
  swift_release();
  dispatch thunk of TPTipsHelper.removeEntries(_:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t closure #1 in PHVoicemailMessageTableViewCell.tipKitStopObservation()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in PHVoicemailMessageTableViewCell.tipKitStopObservation(), 0, 0);
}

uint64_t specialized PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LiveVoicemailTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  os_log_type_t v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v4, v3);
}

uint64_t specialized PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)()
{
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.voicemailDetail(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type LiveVoicemailTip and conformance LiveVoicemailTip();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000F4338()
{
  uint64_t v1 = type metadata accessor for LiveVoicemailTip();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LiveVoicemailTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

uint64_t partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t lazy protocol witness table accessor for type LiveVoicemailTip and conformance LiveVoicemailTip()
{
  unint64_t result = lazy protocol witness table cache variable for type LiveVoicemailTip and conformance LiveVoicemailTip;
  if (!lazy protocol witness table cache variable for type LiveVoicemailTip and conformance LiveVoicemailTip)
  {
    type metadata accessor for LiveVoicemailTip();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiveVoicemailTip and conformance LiveVoicemailTip);
  }
  return result;
}

uint64_t outlined init with copy of Tip(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>;
  if (!lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>);
  }
  return result;
}

uint64_t outlined destroy of Tip?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Tip?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Tip(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000F47E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:)()
{
}

MobilePhone::PersonalNicknameMenuViewDisplayContext_optional __swiftcall PersonalNicknameMenuViewDisplayContext.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (MobilePhone::PersonalNicknameMenuViewDisplayContext_optional)rawValue;
}

uint64_t PersonalNicknameMenuViewDisplayContext.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchItemType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchItemType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SearchItemType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchItemType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance SearchItemType@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SearchItemType(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static OrientationMonitorLockedStatus.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void OrientationMonitorLockedStatus.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int OrientationMonitorLockedStatus.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchManager.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SearchManager.kCSQueryFlags.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MPSearchManager_kCSQueryFlags);
  swift_bridgeObjectRetain();
  return v1;
}

void closure #1 in SearchManager.query.willset(void *a1@<X0>, BOOL *a2@<X8>)
{
  long long v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB0))();
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 cancel];
  }
  *a2 = v4 == 0;
}

void *SearchManager.query.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MPSearchManager_query);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void SearchManager.query.setter(void *a1)
{
}

void partial apply for closure #1 in SearchManager.query.willset(BOOL *a1@<X8>)
{
  closure #1 in SearchManager.query.willset(*(void **)(v1 + 16), a1);
}

void (*SearchManager.query.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSearchManager_query;
  v3[4] = v1;
  v3[5] = v4;
  unint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  unint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return SearchManager.query.modify;
}

void SearchManager.query.modify(uint64_t a1, char a2)
{
}

{
  void *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;

  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  id v3 = *v4;
  unint64_t v6 = *(void *)(*(void *)a1 + 32);
  unint64_t v5 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    id v7 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v8 = *(void **)(v6 + v5);
    *(void *)(v6 + v5) = v3;

    uint64_t v9 = *v4;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v9 = *(void **)(v6 + v5);
    *(void *)(v6 + v5) = v3;
  }

  free(v2);
}

void closure #1 in SearchManager.userQuery.willset(void *a1@<X0>, BOOL *a2@<X8>)
{
  id v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xC8))();
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 cancel];
  }
  *a2 = v4 == 0;
}

void *SearchManager.userQuery.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MPSearchManager_userQuery);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void SearchManager.userQuery.setter(void *a1)
{
}

void SearchManager.query.setter(void *a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v6 = (void **)(v3 + *a3);
  swift_beginAccess();
  id v7 = *v6;
  void *v6 = a1;
}

void partial apply for closure #1 in SearchManager.userQuery.willset(BOOL *a1@<X8>)
{
  closure #1 in SearchManager.userQuery.willset(*(void **)(v1 + 16), a1);
}

void (*SearchManager.userQuery.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSearchManager_userQuery;
  v3[4] = v1;
  v3[5] = v4;
  unint64_t v5 = (void **)(v1 + v4);
  swift_beginAccess();
  unint64_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return SearchManager.userQuery.modify;
}

void SearchManager.userQuery.modify(uint64_t a1, char a2)
{
}

id SearchManager.featureFlags.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MPSearchManager_featureFlags);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void SearchManager.featureFlags.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___MPSearchManager_featureFlags);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*SearchManager.featureFlags.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

id SearchManager.queryContext.getter()
{
  id v0 = [objc_allocWithZone((Class)CSSearchQueryContext) init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1002053C0;
  *(void *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v1 + 40) = v2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setBundleIDs:isa];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v7;
  v8._uint64_t countAndFlagsBits = 540884256;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v4;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1002053C0;
  *(void *)(v10 + 32) = v13;
  *(void *)(v10 + 40) = v14;
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 setFilterQueries:v11];

  return v0;
}

uint64_t SearchManager.text.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___MPSearchManager_text);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SearchManager.text.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + OBJC_IVAR___MPSearchManager_text);
  swift_beginAccess();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SearchManager.text.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

char *SearchManager.__allocating_init(itemType:)(int a1)
{
  id v3 = objc_allocWithZone(v1);
  return SearchManager.init(itemType:)(a1);
}

char *SearchManager.init(itemType:)(int a1)
{
  int v27 = a1;
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v25 = OBJC_IVAR___MPSearchManager_serialQueue;
  v24[0] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v7 = v1;
  static DispatchQoS.userInteractive.getter();
  unint64_t v29 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  *(void *)(v24[1] + v25) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  Swift::String v8 = &v7[OBJC_IVAR___MPSearchManager_kCSQueryFlags];
  *Swift::String v8 = 1952741219;
  v8[1] = 0xE400000000000000;
  *(void *)&v7[OBJC_IVAR___MPSearchManager_query] = 0;
  *(void *)&v7[OBJC_IVAR___MPSearchManager_userQuery] = 0;
  Logger.init(subsystem:category:)();
  uint64_t v9 = OBJC_IVAR___MPSearchManager_featureFlags;
  *(void *)&v7[v9] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  uint64_t v10 = OBJC_IVAR___MPSearchManager_userQueryContext;
  *(void *)&v7[v10] = [objc_allocWithZone((Class)CSUserQueryContext) init];
  Class v11 = &v7[OBJC_IVAR___MPSearchManager_text];
  void *v11 = 0;
  v11[1] = 0;
  uint64_t v12 = OBJC_IVAR___MPSearchManager_subscriptionsLabelIDByLabel;
  *(void *)&v7[v12] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = OBJC_IVAR___MPSearchManager_suggestion;
  *(void *)&v7[v13] = [self emptySuggestion];
  uint64_t v14 = OBJC_IVAR___MPSearchManager_callProviderManager;
  type metadata accessor for ApplicationServices();
  id v15 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v16 = [v15 callProviderManager];

  *(void *)&v7[v14] = v16;
  v7[OBJC_IVAR___MPSearchManager_searchItemType] = v27;

  uint64_t v17 = (objc_class *)type metadata accessor for SearchManager();
  v28.receiver = v7;
  v28.super_class = v17;
  long long v18 = (char *)[super init];
  *(void *)&v18[OBJC_IVAR___MPSearchManager_subscriptionsLabelIDByLabel] = SearchManager.fetchSubscriptionsInUseMap()();
  swift_bridgeObjectRelease();
  long long v19 = *(void **)&v18[OBJC_IVAR___MPSearchManager_callProviderManager];
  id v20 = v18;
  id v21 = v19;
  uint64_t v22 = (void *)static OS_dispatch_queue.main.getter();
  [v21 addDelegate:v20 queue:v22];

  return v20;
}

uint64_t type metadata accessor for SearchManager()
{
  uint64_t result = type metadata singleton initialization cache for SearchManager;
  if (!type metadata singleton initialization cache for SearchManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SearchManager.search(with:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = type metadata accessor for MainActor();
  v3[7] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[8] = v5;
  v3[9] = v4;
  return _swift_task_switch(SearchManager.search(with:), v5, v4);
}

uint64_t SearchManager.search(with:)()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 40)) + 0xE0))();
  unsigned int v2 = [v1 callHistorySearchEnabled];

  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
    id v6 = SearchManager.queryContext.getter();
    id v7 = objc_allocWithZone((Class)CSSearchQuery);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v7 initWithQueryString:v8 queryContext:v6];
    *(void *)(v0 + 80) = v9;

    uint64_t v10 = *(void (**)(id))((swift_isaMask & *v3) + 0xB8);
    id v11 = v9;
    v10(v9);
    uint64_t v12 = static MainActor.shared.getter();
    *(void *)(v0 + 88) = v12;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v13;
    v13[2] = v11;
    v13[3] = v3;
    v13[4] = v5;
    v13[5] = v4;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v14;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *uint64_t v14 = v0;
    v14[1] = SearchManager.search(with:);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v12, &protocol witness table for MainActor, 0x7728686372616573, 0xED0000293A687469, partial apply for closure #1 in SearchManager.search(with:), v13, v15);
  }
  else
  {
    swift_release();
    id v16 = *(uint64_t (**)(void *))(v0 + 8);
    return v16(_swiftEmptyArrayStorage);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  unsigned int v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    uint64_t v5 = SearchManager.search(with:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    uint64_t v5 = SearchManager.search(with:);
  }
  return _swift_task_switch(v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 80);
  swift_release();

  swift_release();
  swift_task_dealloc();
  unsigned int v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in SearchManager.search(with:)(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v42 = a3;
  unint64_t v43 = a5;
  uint64_t v44 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  __chkstk_darwin(v9);
  long long v45 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = _swiftEmptyArrayStorage;
  long long v56 = partial apply for closure #1 in closure #1 in SearchManager.search(with:searchTokens:);
  long long v57 = (void *)v15;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v53 = 1107296256;
  uint64_t v41 = &v54;
  long long v54 = thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ();
  long long v55 = &block_descriptor_118;
  id v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [a2 setFoundItemsHandler:v16];
  _Block_release(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v44, v11);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = (char *)swift_allocObject();
  id v20 = v42;
  *((void *)v19 + 2) = a2;
  *((void *)v19 + 3) = v20;
  uint64_t v40 = a4;
  *((void *)v19 + 4) = a4;
  unint64_t v21 = v43;
  *((void *)v19 + 5) = v43;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v19[v17], v14, v11);
  *(void *)&v19[v18] = v15;
  long long v56 = partial apply for closure #2 in closure #1 in SearchManager.search(with:);
  long long v57 = v19;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v53 = 1107296256;
  long long v54 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  long long v55 = &block_descriptor_124;
  uint64_t v22 = _Block_copy(&aBlock);
  uint64_t v44 = v15;
  swift_retain();
  id v23 = a2;
  id v24 = v20;
  swift_bridgeObjectRetain();
  swift_release();
  [v23 setCompletionHandler:v22];
  _Block_release(v22);
  id v25 = v24;
  swift_bridgeObjectRetain_n();
  uint64_t v26 = v25;
  int v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v51 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315394;
    if (v26[OBJC_IVAR___MPSearchManager_searchItemType])
    {
      if (v26[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
      {
        uint64_t aBlock = 0x616D6563696F565BLL;
        unint64_t v30 = 0xED0000205D736C69;
      }
      else
      {
        uint64_t aBlock = 0x747365676775535BLL;
        unint64_t v30 = 0xEE00205D736E6F69;
      }
    }
    else
    {
      uint64_t aBlock = 0x205D736C6C61435BLL;
      unint64_t v30 = 0xE800000000000000;
    }
    unint64_t v53 = v30;
    v31._uint64_t countAndFlagsBits = 0x614D686372616553;
    v31._object = (void *)0xEE003A726567616ELL;
    String.append(_:)(v31);
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(aBlock, v53, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v21, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s Beginning search query for queryString %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v26;
  long long v56 = partial apply for closure #3 in closure #1 in SearchManager.search(with:);
  long long v57 = (void *)v32;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v53 = 1107296256;
  long long v54 = thunk for @escaping @callee_guaranteed () -> ();
  long long v55 = &block_descriptor_130;
  unint64_t v33 = _Block_copy(&aBlock);
  unint64_t v34 = v26;
  uint64_t v35 = v45;
  static DispatchQoS.unspecified.getter();
  uint64_t v51 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  unint64_t v36 = v48;
  uint64_t v37 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v47);
  swift_release();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(a1, a2, &lazy cache variable for type metadata for CSSearchableItem);
}

uint64_t @objc closure #1 in SearchManager.search(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in SearchManager.search(with:), v5, v4);
}

uint64_t @objc closure #1 in SearchManager.search(with:)()
{
  uint64_t v1 = (void *)v0[4];
  unsigned int v2 = (const void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v2);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  v0[7] = v4;
  id v6 = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = @objc closure #1 in SearchManager.search(with:);
  return SearchManager.search(with:)(v3, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  void (**v9)(void, void, void);
  uint64_t (*v10)(void);
  uint64_t v12;

  unsigned int v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 32);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    id v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 48);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t SearchManager.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[17] = type metadata accessor for MainActor();
  v4[18] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[19] = v6;
  v4[20] = v5;
  return _swift_task_switch(SearchManager.search(with:searchTokens:), v6, v5);
}

uint64_t SearchManager.search(with:searchTokens:)()
{
  uint64_t v1 = &swift_isaMask;
  unsigned int v2 = (void *)(*(uint64_t (**)(void))((swift_isaMask & **((void **)v0 + 16)) + 0xE0))();
  unsigned int v3 = [v2 callHistorySearchEnabled];

  if (!v3)
  {
    swift_release();
    uint64_t v26 = (uint64_t (*)(void *))*((void *)v0 + 1);
    return v26(_swiftEmptyArrayStorage);
  }
  unint64_t v4 = *((void *)v0 + 15);
  *((void *)v0 + 10) = _swiftEmptyArrayStorage;
  unint64_t v74 = v4 >> 62;
  if (v4 >> 62)
  {
LABEL_56:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = *((void *)v0 + 15);
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v6 = swift_bridgeObjectRetain();
  }
  long long v77 = v0;
  if (v5)
  {
    unint64_t v7 = 0;
    long long v80 = v0 + 48;
    long long v81 = v0 + 16;
    uint64_t v8 = v0 + 80;
    long long v79 = (id *)(v0 + 88);
    unint64_t v83 = v4 & 0xC000000000000001;
    long long v73 = (char **)v4;
    uint64_t v75 = v6 + 32;
    uint64_t v76 = v4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v78 = v5;
    unint64_t v4 = (unint64_t)&selRef_HIDEventMonitor;
    while (1)
    {
      if (v83)
      {
        uint64_t v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v7 >= *(void *)(v76 + 16)) {
          goto LABEL_55;
        }
        uint64_t v9 = (char *)*(id *)(v75 + 8 * v7);
      }
      uint64_t v10 = v9;
      if (__OFADD__(v7++, 1))
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      id v12 = [v9 representedObject];
      if (!v12)
      {
        __break(1u);
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(v80, v81);
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CSSuggestion);
      swift_dynamicCast();
      id v20 = *v79;
      id v21 = [*v79 suggestionTokens];
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for _CSSuggestionToken);
      unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v85 = v10;
      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v0 = (char *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v0)
        {
LABEL_16:
          uint64_t v23 = 0;
          while (1)
          {
            if ((v22 & 0xC000000000000001) != 0) {
              id v24 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v24 = *(id *)(v22 + 8 * v23 + 32);
            }
            uint64_t v1 = v24;
            id v25 = (char *)(v23 + 1);
            if (__OFADD__(v23, 1))
            {
              __break(1u);
              goto LABEL_54;
            }
            if ([v24 tokenKind]) {
              break;
            }

            ++v23;
            if (v25 == v0) {
              goto LABEL_6;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v0 = v1;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          id v20 = v85;
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v0 = *(char **)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v0) {
          goto LABEL_16;
        }
      }
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v0 = v85;
LABEL_7:

      if (v7 == v78)
      {
        uint64_t v0 = v77;
        uint64_t v1 = &swift_isaMask;
        unint64_t v4 = (unint64_t)v73;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = *((void *)v0 + 13);
  uint64_t v29 = *((void *)v0 + 14);
  unint64_t v30 = *(void (**)(uint64_t, uint64_t))((*v1 & **((void **)v0 + 16)) + 0x120);
  swift_bridgeObjectRetain();
  v30(v28, v29);
  uint64_t v31 = swift_allocObject();
  *((void *)v0 + 21) = v31;
  *(void *)(v31 + 16) = _swiftEmptyArrayStorage;
  uint64_t v32 = SearchManager.queryStringForSimSearch(searchText:)(v28, v29);
  uint64_t v34 = v33;
  if (v33)
  {
    uint64_t v35 = v32;
    if (v74)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_36;
      }
    }
    else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_36:
      v30(0, 0xE000000000000000);
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    unint64_t v43 = (void *)swift_task_alloc();
    *((void *)v0 + 22) = v43;
    *unint64_t v43 = v0;
    v43[1] = SearchManager.search(with:searchTokens:);
    uint64_t v45 = *((void *)v0 + 13);
    uint64_t v44 = *((void *)v0 + 14);
    return SearchManager.fetchResultsForSimSearch(searchText:)(v45, v44);
  }
  uint64_t v35 = 0;
LABEL_38:
  unint64_t v36 = (void *)*((void *)v0 + 16);
  uint64_t v37 = OBJC_IVAR___MPSearchManager_suggestion;
  uint64_t v38 = *(void (**)(void))((*v1 & *v36) + 0x118);
  id v39 = *(id *)((char *)v36 + OBJC_IVAR___MPSearchManager_suggestion);
  uint64_t v86 = v38;
  v38();
  uint64_t v82 = v35;
  if (v40)
  {
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v41 = 0;
  }
  uint64_t v46 = *((void *)v0 + 16);
  uint64_t v47 = self;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for _CSSuggestionToken);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v49 = [v47 updatedSuggestionWithCurrentSuggestion:v39 userString:v41 tokens:isa];

  uint64_t v50 = *(void **)((char *)v36 + v37);
  *(void *)((char *)v36 + v37) = v49;

  id v51 = *(id *)((char *)v36 + v37);
  id v52 = SearchManager.userQueryContext(for:)((uint64_t)v51);

  uint64_t v53 = OBJC_IVAR___MPSearchManager_userQueryContext;
  long long v54 = *(void **)(v46 + OBJC_IVAR___MPSearchManager_userQueryContext);
  *(void *)(v46 + OBJC_IVAR___MPSearchManager_userQueryContext) = v52;

  if (v34)
  {
    long long v55 = *(void **)(v46 + v53);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1002053C0;
    *(void *)(v56 + 32) = v82;
    *(void *)(v56 + 40) = v34;
    id v57 = v55;
    Class v58 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v57 setFilterQueries:v58];
  }
  v86();
  long long v59 = *(void **)(v46 + v53);
  if (v60)
  {
    id v61 = v59;
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v63 = v59;
    NSString v62 = 0;
  }
  uint64_t v84 = *((void *)v77 + 21);
  long long v64 = (void *)*((void *)v77 + 16);
  uint64_t v66 = *((void *)v77 + 13);
  uint64_t v65 = *((void *)v77 + 14);
  id v67 = [objc_allocWithZone((Class)CSUserQuery) initWithUserQueryString:v62 userQueryContext:v59];
  *((void *)v77 + 25) = v67;

  long long v68 = *(void (**)(id))((swift_isaMask & *v64) + 0xD0);
  id v69 = v67;
  v68(v67);
  uint64_t v70 = static MainActor.shared.getter();
  *((void *)v77 + 26) = v70;
  long long v71 = (void *)swift_task_alloc();
  *((void *)v77 + 27) = v71;
  v71[2] = v69;
  v71[3] = v84;
  v71[4] = v64;
  v71[5] = v66;
  v71[6] = v65;
  long long v72 = (void *)swift_task_alloc();
  *((void *)v77 + 28) = v72;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *long long v72 = v77;
  v72[1] = SearchManager.search(with:searchTokens:);
  unint64_t v16 = 0x800000010023EE70;
  uint64_t v14 = &protocol witness table for MainActor;
  unint64_t v17 = partial apply for closure #1 in SearchManager.search(with:searchTokens:);
  id v12 = v77 + 96;
  uint64_t v13 = v70;
  unint64_t v15 = 0xD00000000000001ALL;
  unint64_t v18 = v71;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void);
  id v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  void *v8;
  Class isa;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void (*v25)(id);
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  specialized Array.append<A>(contentsOf:)(v0[24]);
  uint64_t v1 = (void *)v0[16];
  unsigned int v2 = OBJC_IVAR___MPSearchManager_suggestion;
  unsigned int v3 = *(void (**)(void))((swift_isaMask & *v1) + 0x118);
  unint64_t v4 = *(id *)((char *)v1 + OBJC_IVAR___MPSearchManager_suggestion);
  v3();
  if (v5)
  {
    uint64_t v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v7 = v0[16];
  uint64_t v8 = self;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for _CSSuggestionToken);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v10 = [v8 updatedSuggestionWithCurrentSuggestion:v4 userString:v6 tokens:isa];

  uint64_t v11 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = v10;

  id v12 = *(id *)((char *)v1 + v2);
  uint64_t v13 = SearchManager.userQueryContext(for:)((uint64_t)v12);

  uint64_t v14 = OBJC_IVAR___MPSearchManager_userQueryContext;
  unint64_t v15 = *(void **)(v7 + OBJC_IVAR___MPSearchManager_userQueryContext);
  *(void *)(v7 + OBJC_IVAR___MPSearchManager_userQueryContext) = v13;

  v3();
  unint64_t v16 = *(void **)(v7 + v14);
  if (v17)
  {
    unint64_t v18 = v16;
    uint64_t v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v20 = v16;
    uint64_t v19 = 0;
  }
  uint64_t v32 = v0[21];
  id v21 = (void *)v0[16];
  uint64_t v23 = v0[13];
  unint64_t v22 = v0[14];
  id v24 = [objc_allocWithZone((Class)CSUserQuery) initWithUserQueryString:v19 userQueryContext:v16];
  v0[25] = v24;

  id v25 = *(void (**)(id))((swift_isaMask & *v21) + 0xD0);
  uint64_t v26 = v24;
  v25(v24);
  int v27 = static MainActor.shared.getter();
  v0[26] = v27;
  uint64_t v28 = (void *)swift_task_alloc();
  v0[27] = v28;
  v28[2] = v26;
  v28[3] = v32;
  v28[4] = v21;
  v28[5] = v23;
  v28[6] = v22;
  uint64_t v29 = (void *)swift_task_alloc();
  v0[28] = v29;
  unint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  void *v29 = v0;
  v29[1] = SearchManager.search(with:searchTokens:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 12, v27, &protocol witness table for MainActor, 0xD00000000000001ALL, 0x800000010023EE70, partial apply for closure #1 in SearchManager.search(with:searchTokens:), v28, v30);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  unsigned int v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v3 = *(void *)(v2 + 152);
    unint64_t v4 = *(void *)(v2 + 160);
    uint64_t v5 = SearchManager.search(with:searchTokens:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    unsigned int v3 = *(void *)(v2 + 152);
    unint64_t v4 = *(void *)(v2 + 160);
    uint64_t v5 = SearchManager.search(with:searchTokens:);
  }
  return _swift_task_switch(v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 200);
  swift_release();

  swift_release();
  swift_release();
  swift_task_dealloc();
  unsigned int v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t SearchManager.search(with:searchTokens:)(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[19];
    uint64_t v6 = v4[20];
    unint64_t v7 = SearchManager.search(with:searchTokens:);
  }
  else
  {
    v4[24] = a1;
    uint64_t v5 = v4[19];
    uint64_t v6 = v4[20];
    unint64_t v7 = SearchManager.search(with:searchTokens:);
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t closure #1 in SearchManager.search(with:searchTokens:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v42 = a1;
  unint64_t v43 = a6;
  uint64_t v50 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v49 = v9;
  __chkstk_darwin(v9);
  uint64_t v47 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v46 = v11;
  __chkstk_darwin(v11);
  uint64_t v44 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = partial apply for closure #1 in closure #1 in SearchManager.search(with:searchTokens:);
  id v57 = a3;
  NSString v41 = a3;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v53 = 1107296256;
  long long v54 = thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ();
  long long v55 = &block_descriptor_102;
  unint64_t v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  unint64_t v18 = a2;
  [a2 setFoundItemsHandler:v17];
  _Block_release(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v42, v13);
  unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v20 = (v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  id v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = a2;
  *((void *)v21 + 3) = a4;
  unint64_t v22 = a4;
  unint64_t v23 = v43;
  *((void *)v21 + 4) = v50;
  *((void *)v21 + 5) = v23;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v21[v19], v16, v13);
  *(void *)&v21[v20] = v41;
  uint64_t v56 = partial apply for closure #2 in closure #1 in SearchManager.search(with:searchTokens:);
  id v57 = v21;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v53 = 1107296256;
  long long v54 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  long long v55 = &block_descriptor_108;
  id v24 = _Block_copy(&aBlock);
  swift_retain();
  id v25 = v18;
  id v26 = v22;
  swift_bridgeObjectRetain();
  swift_release();
  [v25 setCompletionHandler:v24];
  _Block_release(v24);
  id v27 = v26;
  swift_bridgeObjectRetain_n();
  uint64_t v28 = v27;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    id v51 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315394;
    if (v28[OBJC_IVAR___MPSearchManager_searchItemType])
    {
      if (v28[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
      {
        uint64_t aBlock = 0x616D6563696F565BLL;
        unint64_t v32 = 0xED0000205D736C69;
      }
      else
      {
        uint64_t aBlock = 0x747365676775535BLL;
        unint64_t v32 = 0xEE00205D736E6F69;
      }
    }
    else
    {
      uint64_t aBlock = 0x205D736C6C61435BLL;
      unint64_t v32 = 0xE800000000000000;
    }
    unint64_t v53 = v32;
    v33._uint64_t countAndFlagsBits = 0x614D686372616553;
    v33._object = (void *)0xEE003A726567616ELL;
    String.append(_:)(v33);
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(aBlock, v53, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v23, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s Beginning search query for text %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v28;
  uint64_t v56 = partial apply for closure #3 in closure #1 in SearchManager.search(with:searchTokens:);
  id v57 = (void *)v34;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v53 = 1107296256;
  long long v54 = thunk for @escaping @callee_guaranteed () -> ();
  long long v55 = &block_descriptor_114;
  uint64_t v35 = _Block_copy(&aBlock);
  unint64_t v36 = v28;
  uint64_t v37 = v44;
  static DispatchQoS.unspecified.getter();
  id v51 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v38 = v47;
  uint64_t v39 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
  return swift_release();
}

uint64_t closure #1 in closure #1 in SearchManager.search(with:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v4)
  {
LABEL_12:
    swift_beginAccess();
    uint64_t v16 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v16);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = a2;
    uint64_t v6 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      id v9 = [v7 uniqueIdentifier:v17];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      ++v6;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
    }
    while (v4 != v6);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in SearchManager.search(with:)(uint64_t a1, id a2, void *a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, const char *a8, const char *a9)
{
  if ([a2 isCancelled])
  {
    id v15 = a3;
    swift_bridgeObjectRetain_n();
    uint64_t v16 = v15;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      if (v16[OBJC_IVAR___MPSearchManager_searchItemType])
      {
        if (v16[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
        {
          uint64_t v47 = 0x616D6563696F565BLL;
          unint64_t v20 = 0xED0000205D736C69;
        }
        else
        {
          uint64_t v47 = 0x747365676775535BLL;
          unint64_t v20 = 0xEE00205D736E6F69;
        }
      }
      else
      {
        uint64_t v47 = 0x205D736C6C61435BLL;
        unint64_t v20 = 0xE800000000000000;
      }
      unint64_t v48 = v20;
      v34._uint64_t countAndFlagsBits = 0x614D686372616553;
      v34._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v34);
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, a8, (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type SearchManager.Errors and conformance SearchManager.Errors();
    uint64_t v35 = swift_allocError();
    *unint64_t v36 = 1;
    uint64_t v47 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else if (a1)
  {
    swift_errorRetain();
    id v21 = a3;
    swift_errorRetain();
    unint64_t v22 = v21;
    swift_errorRetain();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      id v26 = (void *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      if (v22[OBJC_IVAR___MPSearchManager_searchItemType])
      {
        if (v22[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
        {
          uint64_t v47 = 0x616D6563696F565BLL;
          unint64_t v27 = 0xED0000205D736C69;
        }
        else
        {
          uint64_t v47 = 0x747365676775535BLL;
          unint64_t v27 = 0xEE00205D736E6F69;
        }
      }
      else
      {
        uint64_t v47 = 0x205D736C6C61435BLL;
        unint64_t v27 = 0xE800000000000000;
      }
      unint64_t v48 = v27;
      v38._uint64_t countAndFlagsBits = 0x614D686372616553;
      v38._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v38);
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v25 + 12) = 2112;
      swift_errorRetain();
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v47 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v26 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s Fetching search results from Spotlight failed with error: %@", (uint8_t *)v25, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    lazy protocol witness table accessor for type SearchManager.Errors and conformance SearchManager.Errors();
    uint64_t v40 = swift_allocError();
    *NSString v41 = 0;
    uint64_t v47 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>);
    CheckedContinuation.resume(throwing:)();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v44 = a4;
    id v28 = a3;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v29 = v28;
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315650;
      if (v29[OBJC_IVAR___MPSearchManager_searchItemType])
      {
        if (v29[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
        {
          uint64_t v47 = 0x616D6563696F565BLL;
          unint64_t v33 = 0xED0000205D736C69;
        }
        else
        {
          uint64_t v47 = 0x747365676775535BLL;
          unint64_t v33 = 0xEE00205D736E6F69;
        }
      }
      else
      {
        uint64_t v47 = 0x205D736C6C61435BLL;
        unint64_t v33 = 0xE800000000000000;
      }
      unint64_t v48 = v33;
      v42._uint64_t countAndFlagsBits = 0x614D686372616553;
      v42._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v42);
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v32 + 12) = 2048;
      swift_beginAccess();
      uint64_t v43 = *(void *)(*(void *)(a7 + 16) + 16);
      swift_release();
      uint64_t v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v32 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, a5, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, a9, (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    uint64_t v46 = *(void *)(a7 + 16);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t @objc closure #1 in SearchManager.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in SearchManager.search(with:searchTokens:), v6, v5);
}

uint64_t @objc closure #1 in SearchManager.search(with:searchTokens:)()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (const void *)v0[4];
  swift_release();
  v0[7] = _Block_copy(v2);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  v0[8] = v4;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v6;
  id v7 = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in SearchManager.search(with:searchTokens:);
  return SearchManager.search(with:searchTokens:)(v3, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  void (**v9)(void, void, void);
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 40);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  id v9 = *(void (***)(void, void, void))(v3 + 56);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t SearchManager.searchSuggestions(with:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = type metadata accessor for MainActor();
  v3[7] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[8] = v5;
  v3[9] = v4;
  return _swift_task_switch(SearchManager.searchSuggestions(with:), v5, v4);
}

uint64_t SearchManager.searchSuggestions(with:)()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 40)) + 0xE0))();
  unsigned int v2 = [v1 callHistorySearchEnabled];

  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v4 = self;
    id v5 = *(id *)(v3 + OBJC_IVAR___MPSearchManager_suggestion);
    NSString v6 = String._bridgeToObjectiveC()();
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for _CSSuggestionToken);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v8 = [v4 updatedSuggestionWithCurrentSuggestion:v5 userString:v6 tokens:isa];
    *(void *)(v0 + 80) = v8;

    uint64_t v9 = v3 + OBJC_IVAR___MPSearchManager_logger;
    id v10 = SearchManager.userQueryContext(for:)((uint64_t)v8);
    *(void *)(v0 + 88) = v10;
    id v11 = objc_allocWithZone((Class)CSUserQuery);
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v13 = [v11 initWithUserQueryString:v12 userQueryContext:v10];
    *(void *)(v0 + 96) = v13;

    uint64_t v14 = static MainActor.shared.getter();
    *(void *)(v0 + 104) = v14;
    id v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v15;
    _OWORD v15[2] = v13;
    v15[3] = v9;
    v15[4] = v3;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v16;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CSSuggestion]);
    *uint64_t v16 = v0;
    v16[1] = SearchManager.searchSuggestions(with:);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v14, &protocol witness table for MainActor, 0xD000000000000018, 0x800000010023EE90, partial apply for closure #1 in SearchManager.searchSuggestions(with:), v15, v17);
  }
  else
  {
    swift_release();
    os_log_type_t v18 = *(uint64_t (**)(void *))(v0 + 8);
    return v18(_swiftEmptyArrayStorage);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  unsigned int v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    id v5 = SearchManager.searchSuggestions(with:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    id v5 = SearchManager.searchSuggestions(with:);
  }
  return _swift_task_switch(v5, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 96);
  unsigned int v2 = *(void **)(v0 + 80);

  swift_release();
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 96);
  unsigned int v2 = *(void **)(v0 + 80);

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #1 in SearchManager.searchSuggestions(with:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  id v46 = a2;
  uint64_t v37 = a1;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  NSString v41 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v40 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v36 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v36);
  unint64_t v33 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSuggestion], Error>);
  uint64_t v32 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  NSString v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _swiftEmptyArrayStorage;
  id v52 = partial apply for closure #1 in closure #1 in SearchManager.searchSuggestions(with:);
  uint64_t v53 = v13;
  uint64_t v34 = v13;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v49 = 1107296256;
  uint64_t v35 = &v50;
  uint64_t v50 = thunk for @escaping @callee_guaranteed (@guaranteed [CSSuggestion]) -> ();
  id v51 = &block_descriptor_1;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v15 = v46;
  [v46 setFoundSuggestionsHandler:v14];
  _Block_release(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v37, v9);
  uint64_t v16 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v36);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + *(unsigned __int8 *)(v7 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v20 + v17, v12, v32);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v20 + v18, v33, v16);
  id v21 = v39;
  *(void *)(v20 + v19) = v39;
  *(void *)(v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8)) = v34;
  id v52 = partial apply for closure #2 in closure #1 in SearchManager.searchSuggestions(with:);
  uint64_t v53 = v20;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v49 = 1107296256;
  uint64_t v50 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  id v51 = &block_descriptor_91;
  unint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  id v23 = v46;
  v21;
  swift_release();
  [v23 setCompletionHandler:v22];
  _Block_release(v22);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  id v52 = partial apply for closure #3 in closure #1 in SearchManager.searchSuggestions(with:);
  uint64_t v53 = v24;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v49 = 1107296256;
  uint64_t v50 = thunk for @escaping @callee_guaranteed () -> ();
  id v51 = &block_descriptor_97;
  uint64_t v25 = _Block_copy(&aBlock);
  id v26 = v23;
  unint64_t v27 = v40;
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  id v28 = v41;
  uint64_t v29 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v44);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in SearchManager.searchSuggestions(with:)()
{
  swift_beginAccess();
  unint64_t v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CSSuggestion]) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(a1, a2, &lazy cache variable for type metadata for CSSuggestion);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for VMAccount(0, a3);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v3(v4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in SearchManager.searchSuggestions(with:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  if ([a2 isCancelled])
  {
    lazy protocol witness table accessor for type SearchManager.Errors and conformance SearchManager.Errors();
    uint64_t v9 = swift_allocError();
    *uint64_t v10 = 1;
    uint64_t v24 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSuggestion], Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    id v12 = a5;
    swift_errorRetain();
    uint64_t v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      unint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      if (v13[OBJC_IVAR___MPSearchManager_searchItemType])
      {
        if (v13[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
        {
          uint64_t v24 = 0x616D6563696F565BLL;
          unint64_t v18 = 0xED0000205D736C69;
        }
        else
        {
          uint64_t v24 = 0x747365676775535BLL;
          unint64_t v18 = 0xEE00205D736E6F69;
        }
      }
      else
      {
        uint64_t v24 = 0x205D736C6C61435BLL;
        unint64_t v18 = 0xE800000000000000;
      }
      unint64_t v25 = v18;
      v19._uint64_t countAndFlagsBits = 0x614D686372616553;
      v19._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v19);
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v16 + 12) = 2112;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v17 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s Fetching suggestions failed with error: %@", (uint8_t *)v16, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    lazy protocol witness table accessor for type SearchManager.Errors and conformance SearchManager.Errors();
    uint64_t v21 = swift_allocError();
    *unint64_t v22 = 0;
    uint64_t v24 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSuggestion], Error>);
    CheckedContinuation.resume(throwing:)();
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t v23 = *(void *)(a6 + 16);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSuggestion], Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t @objc closure #1 in SearchManager.searchSuggestions(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in SearchManager.searchSuggestions(with:), v5, v4);
}

uint64_t @objc closure #1 in SearchManager.searchSuggestions(with:)()
{
  uint64_t v1 = (void *)v0[4];
  unsigned int v2 = (const void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v2);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  v0[7] = v4;
  id v6 = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = @objc closure #1 in SearchManager.searchSuggestions(with:);
  return SearchManager.searchSuggestions(with:)(v3, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  void (**v9)(void, void, void);
  uint64_t (*v10)(void);
  uint64_t v12;

  unsigned int v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 32);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    id v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CSSuggestion);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 48);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

Swift::Void __swiftcall SearchManager.cancelPreviousSearch()()
{
  uint64_t v1 = v0;
  unsigned int v2 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE0))();
  unsigned int v3 = [v2 callHistorySearchEnabled];

  if (v3)
  {
    uint64_t v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      if (*((unsigned char *)v4 + OBJC_IVAR___MPSearchManager_searchItemType))
      {
        if (*((unsigned char *)v4 + OBJC_IVAR___MPSearchManager_searchItemType) == 1)
        {
          uint64_t v10 = 0x616D6563696F565BLL;
          unint64_t v8 = 0xED0000205D736C69;
        }
        else
        {
          uint64_t v10 = 0x747365676775535BLL;
          unint64_t v8 = 0xEE00205D736E6F69;
        }
      }
      else
      {
        uint64_t v10 = 0x205D736C6C61435BLL;
        unint64_t v8 = 0xE800000000000000;
      }
      unint64_t v11 = v8;
      v9._uint64_t countAndFlagsBits = 0x614D686372616553;
      v9._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v9);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Cancelling current search query", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(void))((swift_isaMask & *v4) + 0xB8))(0);
    (*(void (**)(void))((swift_isaMask & *v4) + 0xD0))(0);
  }
}

id SearchManager.userQueryContext(for:)(uint64_t a1)
{
  id v1 = [self userQueryContextWithCurrentSuggestion:a1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1002053C0;
  *(void *)(v2 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v2 + 40) = v3;
  id v4 = v1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 setBundleIDs:isa];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v9;
  v10._uint64_t countAndFlagsBits = 540884256;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = v6;
  v11._object = v8;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002053C0;
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v17;
  id v13 = v4;
  Class v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setFilterQueries:v14];

  [v13 setEnableSuggestionTokens:1];
  return v13;
}

unint64_t SearchManager.fetchSubscriptionsInUseMap()()
{
  uint64_t v67 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v67 - 8);
  uint64_t v2 = __chkstk_darwin(v67);
  uint64_t v66 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xE0))(v2);
  unsigned int v5 = [v4 callHistorySearchEnabled];

  if (v5)
  {
    uint64_t countAndFlagsBits = &_swiftEmptyDictionarySingleton;
    id v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v0
                                                               + OBJC_IVAR___MPSearchManager_callProviderManager), "telephonyProvider"));
    id v7 = [v6 prioritizedSenderIdentities];

    id v8 = [v7 array];
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v10 = specialized _arrayConditionalCast<A, B>(_:)(v9);
    swift_bridgeObjectRelease();
    if (v10) {
      unint64_t v11 = (unint64_t)v10;
    }
    else {
      unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    }
    long long v64 = (void *)v11;
    if (!(v11 >> 62))
    {
      unint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v12 > 1)
      {
LABEL_7:
        id v62 = v0;
        uint64_t v13 = 0;
        unint64_t v68 = v11 & 0xC000000000000001;
        uint64_t v65 = (void (**)(char *, uint64_t))(v1 + 8);
        NSStringTransform v63 = NSStringTransformStripDiacritics;
        Class v14 = &selRef_labeledValueForEmailAddress_;
        while (1)
        {
          if (v68) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v15 = *(id *)(v11 + 8 * v13 + 32);
          }
          uint64_t v16 = v15;
          id v17 = [v15 v14[94]];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v20 = v19;

          swift_bridgeObjectRelease();
          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (v21) {
            break;
          }

LABEL_9:
          if (v12 == ++v13) {
            goto LABEL_34;
          }
        }
        id v22 = [v16 v14[94]];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        id v26 = [v16 accountUUID];
        unint64_t v27 = v66;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v28 = UUID.uuidString.getter();
        uint64_t v30 = v29;
        uint64_t v31 = *v65;
        (*v65)(v27, v67);
        uint64_t v32 = (uint64_t)countAndFlagsBits;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70.value._uint64_t countAndFlagsBits = v32;
        uint64_t countAndFlagsBits = (void *)0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, v23, v25, isUniquelyReferenced_nonNull_native);
        uint64_t countAndFlagsBits = (void *)v70.value._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v34 = [v16 v14[94]];
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        v70.value._uint64_t countAndFlagsBits = v35;
        v70.value._object = v37;
        if (one-time initialization token for transform != -1) {
          swift_once();
        }
        uint64_t v38 = (NSString *)static SearchUtilities.transform;
        lazy protocol witness table accessor for type String and conformance String();
        Swift::String_optional v39 = StringProtocol.applyingTransform(_:reverse:)(v38, 0);
        if (v39.value._object)
        {
          Swift::String_optional v70 = v39;
          Swift::String_optional v40 = StringProtocol.applyingTransform(_:reverse:)(v63, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v40.value._object)
          {

            goto LABEL_24;
          }
          id v41 = [v16 accountUUID];
          uint64_t v42 = v66;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v43 = UUID.uuidString.getter();
          uint64_t v45 = v44;
          v31(v42, v67);
          uint64_t v46 = (uint64_t)countAndFlagsBits;
          char v47 = swift_isUniquelyReferenced_nonNull_native();
          v70.value._uint64_t countAndFlagsBits = v46;
          uint64_t countAndFlagsBits = (void *)0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, v45, v40.value._countAndFlagsBits, (uint64_t)v40.value._object, v47);
          uint64_t countAndFlagsBits = (void *)v70.value._countAndFlagsBits;

          swift_bridgeObjectRelease();
        }
        else
        {
        }
        swift_bridgeObjectRelease();
LABEL_24:
        unint64_t v11 = (unint64_t)v64;
        Class v14 = &selRef_labeledValueForEmailAddress_;
        goto LABEL_9;
      }
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v49 < 2)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      return v51;
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50)
    {
      if (v50 >= 1)
      {
        unint64_t v12 = v50;
        unint64_t v11 = (unint64_t)v64;
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_32;
    }
    id v62 = v0;
LABEL_34:
    swift_bridgeObjectRelease();
    id v52 = v62;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315394;
      if (v52[OBJC_IVAR___MPSearchManager_searchItemType])
      {
        if (v52[OBJC_IVAR___MPSearchManager_searchItemType] == 1)
        {
          v70.value._uint64_t countAndFlagsBits = 0x616D6563696F565BLL;
          uint64_t v56 = (void *)0xED0000205D736C69;
        }
        else
        {
          v70.value._uint64_t countAndFlagsBits = 0x747365676775535BLL;
          uint64_t v56 = (void *)0xEE00205D736E6F69;
        }
      }
      else
      {
        v70.value._uint64_t countAndFlagsBits = 0x205D736C6C61435BLL;
        uint64_t v56 = (void *)0xE800000000000000;
      }
      v70.value._object = v56;
      v57._uint64_t countAndFlagsBits = 0x614D686372616553;
      v57._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v57);
      v70.value._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70.value._countAndFlagsBits, (unint64_t)v70.value._object, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2080;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v58 = Dictionary.description.getter();
      unint64_t v60 = v59;
      swift_bridgeObjectRelease();
      v70.value._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s Updating subscriptions to %s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_beginAccess();
    return (unint64_t)countAndFlagsBits;
  }
  else
  {
    return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t partial apply for closure #1 in SearchManager.search(with:)(uint64_t a1)
{
  return closure #1 in SearchManager.search(with:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t SearchManager.fetchResultsForSimSearch(searchText:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[7] = v5;
  v3[8] = v4;
  return _swift_task_switch(SearchManager.fetchResultsForSimSearch(searchText:), v5, v4);
}

uint64_t SearchManager.fetchResultsForSimSearch(searchText:)()
{
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v1 = SearchManager.queryStringForSimSearch(searchText:)(*(void *)(v0 + 24), *(void *)(v0 + 32));
  *(void *)(v0 + 72) = v2;
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    id v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)((swift_isaMask & **(void **)(v0 + 40)) + 0x168)
                                                  + **(int **)((swift_isaMask & **(void **)(v0 + 40)) + 0x168));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v5;
    *uint64_t v5 = v0;
    v5[1] = SearchManager.fetchResultsForSimSearch(searchText:);
    return v8(v3, v4);
  }
  else
  {
    swift_release();
    uint64_t v7 = *(uint64_t (**)(void *))(v0 + 8);
    return v7(_swiftEmptyArrayStorage);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = v0[12];
  swift_release();
  specialized Array.append<A>(contentsOf:)(v1);
  uint64_t v2 = v0[2];
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SearchManager.fetchResultsForSimSearch(searchText:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = SearchManager.fetchResultsForSimSearch(searchText:);
  }
  else
  {
    v4[12] = a1;
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = SearchManager.fetchResultsForSimSearch(searchText:);
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t SearchManager.queryStringForSimSearch(searchText:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = 0;
  uint64_t v11 = OBJC_IVAR___MPSearchManager_subscriptionsLabelIDByLabel;
  if (*(void *)(*(void *)(v3 + OBJC_IVAR___MPSearchManager_subscriptionsLabelIDByLabel) + 16) < 2uLL) {
    return result;
  }
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v15 = *(void *)(v3 + v11);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v41 = v3;
  uint64_t v42 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v43 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  if (!v19) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v21 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    uint64_t v26 = 16 * i;
    unint64_t v27 = (uint64_t *)(*(void *)(v15 + 48) + v26);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = (uint64_t *)(*(void *)(v15 + 56) + v26);
    uint64_t v32 = *v30;
    uint64_t v31 = (void *)v30[1];
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    uint64_t v44 = v12;
    uint64_t v45 = v14;
    swift_bridgeObjectRetain();
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)())
    {
      swift_bridgeObjectRelease();
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v33;
      v34._uint64_t countAndFlagsBits = 8765;
      v34._object = (void *)0xE200000000000000;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = v32;
      v35._object = v31;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = 34;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      uint64_t v37 = *(void *)(v41 + OBJC_IVAR___MPSearchManager_kCSQueryFlags);
      uint64_t v38 = *(void **)(v41 + OBJC_IVAR___MPSearchManager_kCSQueryFlags + 8);
      swift_bridgeObjectRetain();
      v39._uint64_t countAndFlagsBits = v37;
      v39._object = v38;
      String.append(_:)(v39);
      swift_release();
      swift_bridgeObjectRelease();
      return v46;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v43) {
      goto LABEL_24;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v43) {
        goto LABEL_24;
      }
      unint64_t v24 = *(void *)(v42 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v43) {
          goto LABEL_24;
        }
        unint64_t v24 = *(void *)(v42 + 8 * v20);
        if (!v24) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v19 = (v24 - 1) & v24;
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v43)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  unint64_t v24 = *(void *)(v42 + 8 * v25);
  if (v24)
  {
    int64_t v20 = v25;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v43) {
      goto LABEL_24;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_19;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void SearchManager.init()()
{
}

id SearchManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchManager();
  return [super dealloc];
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FC12C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in SearchManager.search(with:searchTokens:)(uint64_t a1)
{
  return closure #1 in SearchManager.search(with:searchTokens:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t partial apply for closure #1 in SearchManager.searchSuggestions(with:)(uint64_t a1)
{
  return closure #1 in SearchManager.searchSuggestions(with:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

void specialized SearchManager.providersChanged(for:)()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE0))();
  unsigned int v2 = [v1 callHistorySearchEnabled];

  if (v2)
  {
    uint64_t v3 = v0;
    int64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      if (*((unsigned char *)v3 + OBJC_IVAR___MPSearchManager_searchItemType))
      {
        if (*((unsigned char *)v3 + OBJC_IVAR___MPSearchManager_searchItemType) == 1)
        {
          uint64_t v9 = 0x616D6563696F565BLL;
          unint64_t v7 = 0xED0000205D736C69;
        }
        else
        {
          uint64_t v9 = 0x747365676775535BLL;
          unint64_t v7 = 0xEE00205D736E6F69;
        }
      }
      else
      {
        uint64_t v9 = 0x205D736C6C61435BLL;
        unint64_t v7 = 0xE800000000000000;
      }
      unint64_t v10 = v7;
      v8._uint64_t countAndFlagsBits = 0x614D686372616553;
      v8._object = (void *)0xEE003A726567616ELL;
      String.append(_:)(v8);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Processing providers changed", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    *(void *)((char *)v3 + OBJC_IVAR___MPSearchManager_subscriptionsLabelIDByLabel) = SearchManager.fetchSubscriptionsInUseMap()();
    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type SearchItemType and conformance SearchItemType()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchItemType and conformance SearchItemType;
  if (!lazy protocol witness table cache variable for type SearchItemType and conformance SearchItemType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchItemType and conformance SearchItemType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchManager.Errors and conformance SearchManager.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchManager.Errors and conformance SearchManager.Errors;
  if (!lazy protocol witness table cache variable for type SearchManager.Errors and conformance SearchManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchManager.Errors and conformance SearchManager.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchManager.Errors and conformance SearchManager.Errors;
  if (!lazy protocol witness table cache variable for type SearchManager.Errors and conformance SearchManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchManager.Errors and conformance SearchManager.Errors);
  }
  return result;
}

uint64_t sub_1000FC4A0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB0))();
  *a2 = result;
  return result;
}

uint64_t sub_1000FC4FC(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0xB8);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1000FC564@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t sub_1000FC5C0(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0xD0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1000FC628@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_1000FC684(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xE8))(*a1);
}

uint64_t sub_1000FC6E8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x118))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000FC74C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x120);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t getEnumTagSinglePayload for SearchItemType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchItemType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FC928);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchItemType()
{
  return &type metadata for SearchItemType;
}

uint64_t ObjC metadata update function for SearchManager()
{
  return type metadata accessor for SearchManager();
}

uint64_t type metadata completion function for SearchManager()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SearchManager.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchManager.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FCBA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for SearchManager.Errors(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SearchManager.Errors()
{
  return &type metadata for SearchManager.Errors;
}

uint64_t partial apply for @objc closure #1 in SearchManager.searchSuggestions(with:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  unsigned int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in SearchManager.searchSuggestions(with:)
                                                         + async function pointer to @objc closure #1 in SearchManager.searchSuggestions(with:));
  return v6(v2, v3, v4);
}

uint64_t sub_1000FCCA8()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in SearchManager.search(with:searchTokens:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  unsigned int v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  BOOL v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in SearchManager.search(with:searchTokens:)
                                                                  + async function pointer to @objc closure #1 in SearchManager.search(with:searchTokens:));
  return v7(v2, v3, v5, v4);
}

uint64_t objectdestroy_41Tm()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in SearchManager.search(with:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  unsigned int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in SearchManager.search(with:)
                                                         + async function pointer to @objc closure #1 in SearchManager.search(with:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in SearchManager.searchSuggestions(with:)()
{
  return closure #1 in closure #1 in SearchManager.searchSuggestions(with:)();
}

uint64_t sub_1000FCED0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSuggestion], Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  swift_release();

  return _swift_deallocObject(v0, ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v12);
}

uint64_t partial apply for closure #2 in closure #1 in SearchManager.searchSuggestions(with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSuggestion], Error>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void **)(v1 + 16);
  unint64_t v10 = *(void **)(v1 + v8);
  uint64_t v11 = *(void *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in closure #1 in SearchManager.searchSuggestions(with:)(a1, v9, v1 + v4, v1 + v7, v10, v11);
}

id partial apply for closure #3 in closure #1 in SearchManager.searchSuggestions(with:)()
{
  return [*(id *)(v0 + 16) start];
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SearchManager.search(with:searchTokens:)(unint64_t a1)
{
  return closure #1 in closure #1 in SearchManager.search(with:)(a1, v1);
}

uint64_t partial apply for closure #2 in closure #1 in SearchManager.search(with:searchTokens:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in SearchManager.search(with:searchTokens:)(a1, "%s search query is cancelled for text %s", "%s Got %ld search results for text %s");
}

uint64_t sub_1000FD250()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #3 in closure #1 in SearchManager.search(with:searchTokens:)()
{
  id v1 = (id)(*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xC8))();
  [v1 start];
}

uint64_t objectdestroy_104Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t partial apply for closure #2 in closure #1 in SearchManager.search(with:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in SearchManager.search(with:searchTokens:)(a1, "%s search query is cancelled for queryString %s", "%s Got %ld search results for queryString %s");
}

uint64_t partial apply for closure #2 in closure #1 in SearchManager.search(with:searchTokens:)(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String], Error>)
                 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #2 in closure #1 in SearchManager.search(with:)(a1, *(id *)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), (int)v3 + (int)v8, *(void *)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8)), a2, a3);
}

void partial apply for closure #3 in closure #1 in SearchManager.search(with:)()
{
  id v1 = (id)(*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xB0))();
  [v1 start];
}

void closure #1 in SearchManager.query.willsetpartial apply(BOOL *a1@<X8>)
{
}

void closure #1 in SearchManager.userQuery.willsetpartial apply(BOOL *a1@<X8>)
{
}

char *static VisualVoicemailManagerFactory.getVisualVoiceMail(visualVoicemailManager:onVoicemailsChanged:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for VisualVoicemailManager());
  id v7 = a1;
  swift_retain();
  return VisualVoicemailManager.init(visualVoicemailManager:onVoicemailsChanged:)(v7, a2, a3);
}

id VisualVoicemailManagerFactory.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VisualVoicemailManagerFactory();
  return [super init];
}

id VisualVoicemailManagerFactory.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VisualVoicemailManagerFactory();
  return [super dealloc];
}

uint64_t type metadata accessor for VisualVoicemailManagerFactory()
{
  return self;
}

uint64_t sub_1000FD7BC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t static SearchUtilities.convertPinyinToLatin(_:)()
{
  if (one-time initialization token for transform != -1) {
    swift_once();
  }
  uint64_t v0 = (NSString *)static SearchUtilities.transform;
  lazy protocol witness table accessor for type String and conformance String();
  Swift::String_optional v1 = StringProtocol.applyingTransform(_:reverse:)(v0, 0);
  uint64_t countAndFlagsBits = v1.value._countAndFlagsBits;
  if (v1.value._object)
  {
    uint64_t countAndFlagsBits = StringProtocol.applyingTransform(_:reverse:)(NSStringTransformStripDiacritics, 0).value._countAndFlagsBits;
    swift_bridgeObjectRelease();
  }
  return countAndFlagsBits;
}

uint64_t static SearchUtilities.matchedProperties(_:contains:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_bridgeObjectRetain();
  id v6 = (void *)specialized Sequence.compactMap<A>(_:)(v5);
  swift_bridgeObjectRelease();
  LOBYTE(a3) = specialized Sequence<>.contains(_:)(a2, a3, v6);
  swift_bridgeObjectRelease();
  return a3 & 1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & v2;
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v6) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_30;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_30;
          }
          unint64_t v13 = *(void *)(v27 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_22:
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v25);
    v23[0] = v25[0];
    v23[1] = v25[1];
    uint64_t v24 = v26;
    outlined init with copy of AnyHashable((uint64_t)v23, (uint64_t)v20);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    uint64_t result = outlined destroy of AnyHashable((uint64_t)v23);
    uint64_t v15 = v22;
    if (v22)
    {
      uint64_t v16 = v21;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        uint64_t v9 = (void *)result;
      }
      unint64_t v18 = v9[2];
      unint64_t v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v9);
        uint64_t v9 = (void *)result;
      }
      v9[2] = v18 + 1;
      unint64_t v19 = &v9[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_30:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  void *v24;
  id v25;

  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 < v6)
    {
      unint64_t v13 = *(void *)(v2 + 8 * v12);
      ++v8;
      if (v13) {
        goto LABEL_22;
      }
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_37;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v8 = v12 + 2;
      if (v12 + 2 >= v6) {
        goto LABEL_37;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v8 = v12 + 3;
      if (v12 + 3 >= v6) {
        goto LABEL_37;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (v13)
      {
LABEL_22:
        unint64_t v5 = (v13 - 1) & v13;
        for (unint64_t i = __clz(__rbit64(v13)) + (v8 << 6); ; unint64_t i = v10 | (v8 << 6))
        {
          uint64_t v15 = 8 * i;
          uint64_t v16 = *(void **)(*(void *)(a1 + 48) + v15);
          unint64_t v17 = *(void *)(*(void *)(a1 + 56) + v15);
          if (v17 >> 62)
          {
            swift_bridgeObjectRetain_n();
            int64_t v25 = v16;
            uint64_t result = _CocoaArrayWrapper.endIndex.getter();
            if (!result)
            {
LABEL_5:

              uint64_t result = swift_bridgeObjectRelease_n();
              if (!v5) {
                goto LABEL_7;
              }
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            uint64_t result = v16;
            if (!v18) {
              goto LABEL_5;
            }
          }
          if ((v17 & 0xC000000000000001) != 0)
          {
            unint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_40;
            }
            unint64_t v19 = *(void *)(v17 + 32);
            swift_unknownObjectRetain();
          }
          swift_bridgeObjectRelease_n();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            uint64_t v9 = (void *)result;
          }
          int64_t v20 = v9;
          uint64_t v21 = v9[2];
          uint64_t v22 = v20;
          int64_t v23 = v20[3];
          if (v21 >= v23 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v21 + 1, 1, v22);
            uint64_t v22 = (void *)result;
          }
          v22[2] = v21 + 1;
          uint64_t v24 = &v22[2 * v21];
          uint64_t v9 = v22;
          unsigned char v24[4] = v16;
          v24[5] = v19;
          if (!v5) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v10 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v14 = v12 + 4;
      if (v14 < v6)
      {
        unint64_t v13 = *(void *)(v2 + 8 * v14);
        if (v13)
        {
          int64_t v8 = v14;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v8 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            goto LABEL_39;
          }
          if (v8 >= v6) {
            break;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          ++v14;
          if (v13) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_37:
    swift_release();
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

NSString one-time initialization function for transform()
{
  NSString result = String._bridgeToObjectiveC()();
  static SearchUtilities.transform = (uint64_t)result;
  return result;
}

id SearchUtilities.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

char *specialized static SearchUtilities.matchedPhoneNumber(for:searchText:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v36 = type metadata accessor for IndexSet();
  int64_t v6 = *(char **)(v36 - 8);
  __chkstk_darwin(v36);
  Swift::String v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexSet?);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = HIBYTE(a3) & 0xF;
  uint64_t v37 = a2;
  unint64_t v38 = a3;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    id v12 = [a1 phoneNumbers];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >> 62) {
      goto LABEL_19;
    }
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v14)
    {
      unint64_t v35 = v13 & 0xC000000000000001;
      uint64_t v15 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      uint64_t v32 = (uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
      uint64_t v33 = (void (**)(char *, char *, uint64_t))(v6 + 32);
      uint64_t v16 = 4;
      while (1)
      {
        unint64_t v17 = v35
            ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (char *)*(id *)(v13 + 8 * v16);
        int64_t v6 = v17;
        uint64_t v18 = v16 - 3;
        if (__OFADD__(v16 - 4, 1)) {
          break;
        }
        unint64_t v19 = v13;
        id v20 = [v17 value];
        id v21 = [v20 formattedInternationalStringValue];

        if (!v21)
        {
          id v22 = [v6 value];
          id v21 = [v22 stringValue];
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v24 = String._bridgeToObjectiveC()();
        id v25 = [v23 indexSetToHighlightDigitsInText:v24];

        if (v25)
        {
          uint64_t v26 = v34;
          static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v27 = v26;
          uint64_t v28 = v36;
          (*v33)(v10, v27, v36);
          (*v15)(v10, 0, 1, v28);
          int v29 = (*v32)(v10, 1, v28);
          unint64_t v13 = v19;
          if (v29 != 1)
          {
            outlined destroy of IndexSet?((uint64_t)v10);
            swift_bridgeObjectRelease();
            return v6;
          }
        }
        else
        {
          (*v15)(v10, 1, 1, v36);
          unint64_t v13 = v19;
        }

        outlined destroy of IndexSet?((uint64_t)v10);
        ++v16;
        if (v18 == v14) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_20:
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t type metadata accessor for SearchUtilities()
{
  return self;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of IndexSet?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexSet?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ObservableRecentsController.localizedRecentCallInfo(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v42 = a2;
  uint64_t v5 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v41 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObservableRecentsController.LocalizedRecentCallInfo?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v39 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_localizedRecentCallInfoCache);
  id v39 = a1;
  id v18 = [a1 uniqueId];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  uint64_t v43 = v19;
  unint64_t v44 = v21;
  (*(void (**)(uint64_t *))(*(void *)v17 + 128))(&v43);
  swift_bridgeObjectRelease();
  uint64_t v40 = v6;
  id v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v22(v16, 1, v5) != 1) {
    return outlined init with take of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v16, v42);
  }
  outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for ObservableRecentsController.LocalizedRecentCallInfo?);
  NSString v23 = *(void **)(v3 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController);
  id v24 = v39;
  ObservableRecentsController.LocalizedRecentCallInfo.init(call:recentsItem:)(v24, [v23 itemForRecentCall:v24], (uint64_t)v14);
  if (v22(v14, 1, v5) == 1)
  {
    outlined destroy of Locale?((uint64_t)v14, &demangling cache variable for type metadata for ObservableRecentsController.LocalizedRecentCallInfo?);
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    v33._object = (void *)0x800000010023F140;
    v33._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
    String.append(_:)(v33);
    id v34 = [v24 description];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    v38._uint64_t countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v25 = (uint64_t)v14;
    uint64_t v26 = v41;
    outlined init with take of ObservableRecentsController.LocalizedRecentCallInfo(v25, v41);
    uint64_t v27 = v42;
    outlined init with copy of ObservableRecentsController.LocalizedRecentCallInfo(v26, v42);
    id v28 = [v24 uniqueId];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    outlined init with copy of ObservableRecentsController.LocalizedRecentCallInfo(v27, (uint64_t)v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v11, 0, 1, v5);
    uint64_t v43 = v29;
    unint64_t v44 = v31;
    (*(void (**)(char *, uint64_t *))(*(void *)v17 + 136))(v11, &v43);
    return outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo(v26);
  }
  return result;
}

uint64_t type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for ObservableRecentsController.LocalizedRecentCallInfo);
}

id ObservableRecentsController.dial(_:)(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) performDialRequestForRecentCall:a1];
}

uint64_t property wrapper backing initializer of ObservableRecentsController.recentCalls()
{
  return Published.init(initialValue:)();
}

uint64_t ObservableRecentsController.recentCalls.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for ObservableRecentsController.recentCalls : ObservableRecentsController@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ObservableRecentsController.recentCalls : ObservableRecentsController(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t ObservableRecentsController.$recentCalls.getter()
{
  return ObservableRecentsController.$recentCalls.getter((uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__recentCalls, &demangling cache variable for type metadata for Published<[CHRecentCall]>);
}

uint64_t property wrapper backing initializer of ObservableRecentsController.filter()
{
  return Published.init(initialValue:)();
}

uint64_t ObservableRecentsController.filter.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for ObservableRecentsController.filter : ObservableRecentsController@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ObservableRecentsController.filter : ObservableRecentsController(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v2;
  static Published.subscript.setter();
  return ObservableRecentsController.filter.didset(v4);
}

uint64_t ObservableRecentsController.filter.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  static Published.subscript.setter();
  return ObservableRecentsController.filter.didset(v3);
}

uint64_t ObservableRecentsController.filter.didset(char a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  if (((((a1 & 1) == 0) ^ v9) & 1) == 0)
  {
    id v4 = [*(id *)&v1[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController] recentCalls];
    if (v4)
    {
      uint64_t v5 = v4;
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
      uint64_t v6 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v6 = _swiftEmptyArrayStorage;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    specialized ObservableRecentsController.filteredRecentCalls(from:filter:)((unint64_t)v6, v8);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v7 = v1;
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t (*ObservableRecentsController.filter.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return ObservableRecentsController.filter.modify;
}

uint64_t ObservableRecentsController.filter.modify(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  char v3 = *(void **)a1;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v4 = *(unsigned char *)(a1 + 9);
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(a1 + 9) = v2;
  id v5 = v3;
  static Published.subscript.setter();
  return ObservableRecentsController.filter.didset(v4);
}

uint64_t ObservableRecentsController.$filter.getter()
{
  return ObservableRecentsController.$recentCalls.getter((uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__filter, &demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>);
}

uint64_t ObservableRecentsController.$filter.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*ObservableRecentsController.$filter.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__filter;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ObservableRecentsController.$filter.modify;
}

void ObservableRecentsController.$filter.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  size_t v6 = (void *)v3[12];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);

  free(v3);
}

id ObservableRecentsController.unreadCallCount.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) unreadCallCount];
}

uint64_t property wrapper backing initializer of ObservableRecentsController.contactsChangedDate(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v2);
  outlined init with copy of Date?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return outlined destroy of Locale?(a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t ObservableRecentsController.contactsChangedDate.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t key path getter for ObservableRecentsController.contactsChangedDate : ObservableRecentsController()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t key path setter for ObservableRecentsController.contactsChangedDate : ObservableRecentsController(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with copy of Date?(a1, (uint64_t)&v13 - v8);
  uint64_t v10 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  outlined init with copy of Date?((uint64_t)v9, (uint64_t)v7);
  id v11 = v10;
  static Published.subscript.setter();
  return outlined destroy of Locale?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t ObservableRecentsController.$contactsChangedDate.getter()
{
  return ObservableRecentsController.$recentCalls.getter((uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__contactsChangedDate, &demangling cache variable for type metadata for Published<Date?>);
}

uint64_t ObservableRecentsController.$recentCalls.getter(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t key path getter for ObservableRecentsController.$recentCalls : ObservableRecentsController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return swift_endAccess();
}

uint64_t key path setter for ObservableRecentsController.$recentCalls : ObservableRecentsController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v18 - v14, a1, v9);
  v16(v13, (uint64_t)v15, v9);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a7);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.localizedTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

Swift::Void (__swiftcall *RecentCallsListViewPreferenceData.isEditing.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.localizedSubtitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.localizedSubtitle.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.localizedCount.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.localizedCount.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.localizedCount.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.isMissedCall.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.isMissedCall.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.isMissedCall.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0) + 32);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.date.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0) + 32);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.date.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.icon.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0)
                                     + 36));
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.icon.setter(char a1)
{
  uint64_t result = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.icon.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.isVerified.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0)
                                     + 40));
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.isVerified.setter(char a1)
{
  uint64_t result = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.isVerified.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.lineName.getter()
{
  uint64_t v1 = *(void *)(v0
                 + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.lineName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0) + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

Swift::Void (__swiftcall *ObservableRecentsController.LocalizedRecentCallInfo.lineName.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.init(localizedTitle:localizedSubtitle:localizedCount:isMissedCall:date:icon:isVerified:lineName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = a7;
  uint64_t v15 = (int *)type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  uint64_t v16 = a9 + v15[8];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a8, v17);
  *(unsigned char *)(a9 + v15[9]) = a10;
  *(unsigned char *)(a9 + v15[10]) = a11;
  uint64_t v19 = (void *)(a9 + v15[11]);
  *uint64_t v19 = a12;
  v19[1] = a13;
  return result;
}

MobilePhone::ObservableRecentsController::Filter_optional __swiftcall ObservableRecentsController.Filter.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    v1.value = MobilePhone_ObservableRecentsController_Filter_missed;
  }
  else {
    v1.value = MobilePhone_ObservableRecentsController_Filter_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static ObservableRecentsController.Filter.allCases.getter()
{
  return &outlined read-only object #0 of static ObservableRecentsController.Filter.allCases.getter;
}

uint64_t ObservableRecentsController.Filter.rawValue.getter(char a1)
{
  return a1 & 1;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance ObservableRecentsController.Filter@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ObservableRecentsController.Filter(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ObservableRecentsController.Filter;
}

char *ObservableRecentsController.__allocating_init(recentsController:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ObservableRecentsController.init(recentsController:)(a1);
}

char *ObservableRecentsController.init(recentsController:)(void *a1)
{
  char v2 = v1;
  uint64_t v49 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Date?>);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v5 = __chkstk_darwin(v45);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[CHRecentCall]>);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v2[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__recentCalls];
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v19 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CHRecentCall]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  unint64_t v20 = &v19[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__filter];
  LOBYTE(aBlock[0]) = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v13, v10);
  unint64_t v21 = &v19[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__contactsChangedDate];
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
  outlined init with copy of Date?((uint64_t)v9, (uint64_t)v7);
  NSString v23 = v46;
  id v24 = _swiftEmptyArrayStorage;
  Published.init(initialValue:)();
  outlined destroy of Locale?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v21, v23, v48);
  uint64_t v25 = OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_localizedRecentCallInfoCache;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ValueCache<String, ObservableRecentsController.LocalizedRecentCallInfo>);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = [objc_allocWithZone((Class)NSCache) init];
  *(void *)&v19[v25] = v26;
  *(void *)&v19[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_observers] = _swiftEmptyArrayStorage;
  uint64_t v27 = v49;
  *(void *)&v19[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController] = v49;
  id v28 = v27;

  v52.receiver = v19;
  v52.super_class = ObjectType;
  id v29 = [super init];
  id v30 = [v28 recentCalls];
  if (v30)
  {
    unint64_t v31 = v30;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    id v24 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v32 = specialized ObservableRecentsController.filteredRecentCalls(from:filter:)((unint64_t)v24, aBlock[0]);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  aBlock[0] = v32;
  Swift::String v33 = (char *)v29;
  static Published.subscript.setter();
  id v34 = *(void **)&v33[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v35 = v33;
  id v36 = v34;
  uint64_t v37 = (void *)static OS_dispatch_queue.main.getter();
  [v36 addDelegate:v35 queue:v37];

  id v38 = [self defaultCenter];
  id v39 = [self mainQueue];
  uint64_t v40 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in ObservableRecentsController.init(recentsController:);
  aBlock[5] = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = &block_descriptor_2;
  uint64_t v41 = _Block_copy(aBlock);
  swift_release();
  id v42 = [v38 addObserverForName:CNContactStoreDidChangeNotification object:0 queue:v39 usingBlock:v41];
  _Block_release(v41);

  uint64_t v43 = &v35[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_observers];
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(*(void *)v43 + 16) >= *(void *)(*(void *)v43 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();

  return v35;
}

void closure #1 in ObservableRecentsController.init(recentsController:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v12 - v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void (**)(uint64_t))(**(void **)(Strong
                                                      + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_localizedRecentCallInfoCache)
                                        + 152);
    uint64_t v9 = swift_retain();
    v8(v9);
    swift_release();
    Date.init()();
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
    swift_getKeyPath();
    swift_getKeyPath();
    outlined init with copy of Date?((uint64_t)v5, (uint64_t)v3);
    id v11 = v7;
    static Published.subscript.setter();
    outlined destroy of Locale?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id ObservableRecentsController.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v13 = v0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_observers];
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)(v2 + 8 * i + 32))
      {
        swift_unknownObjectRetain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_12;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v14.receiver = v13;
    v14.super_class = ObjectType;
    [super dealloc];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_19;
  }
LABEL_12:
  id result = self;
  if (v6 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }
      ++v9;
      id v11 = [v8 defaultCenter];
      [v11 removeObserver:v10];
      swift_unknownObjectRelease();
    }
    while (v6 != v9);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void ObservableRecentsController.delete(at:)(uint64_t a1)
{
  uint64_t v3 = v1;
  specialized Sequence.compactMap<A>(_:)(a1, (uint64_t)v3);

  uint64_t v4 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 deleteRecentCalls:isa];
}

Swift::Void __swiftcall ObservableRecentsController.delete(at:)(Swift::Int at)
{
  uint64_t v2 = type metadata accessor for IndexSet();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexSet.init(integer:)();
  uint64_t v6 = v1;
  specialized Sequence.compactMap<A>(_:)((uint64_t)v5, (uint64_t)v6);

  uint64_t v7 = *(void **)&v6[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 deleteRecentCalls:isa];

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall ObservableRecentsController.deleteAll()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) deleteAllRecentCalls];
}

Swift::Void __swiftcall ObservableRecentsController.markCallsAsRead()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) markRecentCallsAsRead];
}

uint64_t ObservableRecentsController.LocalizedRecentCallInfo.init(call:recentsItem:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v54 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v51 = (char *)&v49 - v13;
  objc_super v14 = (int *)type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v18 + 4) = 0;
  *((void *)v18 + 5) = 0;
  uint64_t v19 = (uint64_t *)&v18[*(int *)(v16 + 44)];
  *uint64_t v19 = 0;
  v19[1] = 0;
  id v53 = a1;
  id v20 = [a1 date];
  uint64_t v52 = a3;
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_6;
  }
  unint64_t v21 = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v22(v7, v12, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_6:

    outlined destroy of Locale?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v15 + 56))(v52, 1, 1, v14);
  }
  v22(v51, v7, v8);
  id v23 = v54;
  id v24 = [v54 localizedTitle];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0xE000000000000000;
  }
  *(void *)uint64_t v18 = v26;
  *((void *)v18 + 1) = v28;
  id v30 = [v23 localizedSubtitle];
  if (v30)
  {
    unint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v34 = 0xE000000000000000;
  }
  *((void *)v18 + 2) = v32;
  *((void *)v18 + 3) = v34;
  id v35 = [v23 localizedCount];
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v39 = 0;
  }
  uint64_t v50 = v15;
  *((void *)v18 + 4) = v37;
  *((void *)v18 + 5) = v39;
  id v40 = v53;
  unsigned int v41 = [v53 callStatus];
  v18[48] = v41 == kCHCallStatusMissed;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v18[v14[8]], v51, v8);
  v18[v14[9]] = CHRecentCall.icon.getter();
  id v42 = v54;
  v18[v14[10]] = [v54 verified];
  id v43 = [v42 localizedSenderIdentityTitle];
  if (v43)
  {
    unint64_t v44 = v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;
  }
  else
  {

    uint64_t v45 = 0;
    uint64_t v47 = 0;
  }
  uint64_t v48 = v52;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v51, v8);
  swift_bridgeObjectRelease();
  *uint64_t v19 = v45;
  v19[1] = v47;
  outlined init with copy of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v18, v48);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v50 + 56))(v48, 0, 1, v14);
  return outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo((uint64_t)v18);
}

uint64_t outlined init with take of ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObservableRecentsController.LocalizedRecentCallInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id ObservableRecentsController.contact(for:)(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002053A0;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for PHContactViewController);
  *(void *)(v4 + 32) = [(id)swift_getObjCClassFromMetadata() descriptorForRequiredKeys];
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [v3 contactForRecentCall:a1 keyDescriptors:isa];

  if (v6) {
    return v6;
  }
  id v8 = objc_allocWithZone((Class)CNContact);

  return [v8 init];
}

Swift::Void __swiftcall ObservableRecentsController.recentsController(_:didChange:)(PHRecentsController *_, Swift::OpaquePointer didChange)
{
}

void ObservableRecentsController.init()()
{
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance ObservableRecentsController@<X0>(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CHRecentCall.icon.getter()
{
  id v1 = [v0 ttyType];
  unsigned int v2 = [v0 callStatus];
  if (v2 == kCHCallStatusConnectedOutgoing)
  {
    BOOL v3 = 1;
  }
  else
  {
    unsigned int v4 = [v0 callStatus];
    BOOL v3 = v4 == kCHCallStatusCancelled;
  }
  id v5 = [v0 mediaType];
  if (v1 == (id)1) {
    return 3;
  }
  if (v1 == (id)2) {
    return 4;
  }
  if (!v3) {
    return 0;
  }
  if (v5 == (id)1) {
    return 1;
  }
  return 2 * (v5 == (id)2);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  v28[1] = a2;
  uint64_t v33 = type metadata accessor for IndexSet.Index();
  uint64_t v3 = *(void *)(v33 - 8);
  uint64_t v4 = __chkstk_darwin(v33);
  id v36 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)v28 - v6;
  uint64_t v7 = type metadata accessor for IndexSet();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  objc_super v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  id v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v30(v10, a1, v7);
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (void (*)(uint64_t))&type metadata accessor for IndexSet);
  unint64_t v31 = v10;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v16 = &v14[*(int *)(v12 + 44)];
  uint64_t v37 = v3 + 16;
  unint64_t v34 = (void (**)(char *, uint64_t))(v3 + 8);
  id v35 = v15;
  uint64_t v32 = v8 + 16;
  id v29 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v17 = v33;
  uint64_t v18 = v36;
  while (1)
  {
    while (1)
    {
      v35(v38, v16, v17);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (void (*)(uint64_t))&type metadata accessor for IndexSet);
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (void (*)(uint64_t))&type metadata accessor for IndexSet.Index);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v20 = *v34;
      (*v34)(v18, v17);
      v20(v38, v17);
      if (v19)
      {
        outlined destroy of Locale?((uint64_t)v14, &demangling cache variable for type metadata for IndexingIterator<IndexSet>);
        return v40;
      }
      unint64_t v21 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v23 = *v22;
      v21(v39, 0);
      id v24 = v31;
      v30(v31, (uint64_t)v14, v7);
      dispatch thunk of Collection.formIndex(after:)();
      (*v29)(v24, v7);
      if ((v23 & 0x8000000000000000) == 0)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        if (v39[0] >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v25 = *(void *)((v39[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v23 < v25) {
          break;
        }
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t result = swift_release();
    if ((v39[0] & 0xC000000000000001) == 0) {
      break;
    }
    specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
    swift_bridgeObjectRelease();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if ((unint64_t)v23 < *(void *)((v39[0] & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v27 = *(id *)(v39[0] + 8 * v23 + 32);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void *specialized ObservableRecentsController.filteredRecentCalls(from:filter:)(unint64_t a1, char a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_15;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = kCHCallStatusMissed;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        if ((a2 & 1) == 0) {
          goto LABEL_5;
        }
      }
      else
      {
        id v8 = *(id *)(a1 + 8 * v6 + 32);
        if ((a2 & 1) == 0) {
          goto LABEL_5;
        }
      }
      if ([v8 callStatus] != v7)
      {

        goto LABEL_6;
      }
LABEL_5:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_6:
      if (v4 == ++v6)
      {
        swift_bridgeObjectRelease();
        return _swiftEmptyArrayStorage;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100101D68()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in ObservableRecentsController.init(recentsController:)()
{
}

uint64_t specialized ObservableRecentsController.recentsController(_:didChange:)(unint64_t a1)
{
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  static os_log_type_t.default.getter();
  uint64_t v3 = os_log(_:dso:log:type:_:)();
  (*(void (**)(uint64_t))(**(void **)&v1[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_localizedRecentCallInfoCache]
                                  + 152))(v3);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  specialized ObservableRecentsController.filteredRecentCalls(from:filter:)(a1, v6);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v4 = v1;
  return static Published.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter()
{
  unint64_t result = lazy protocol witness table cache variable for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter;
  if (!lazy protocol witness table cache variable for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter;
  if (!lazy protocol witness table cache variable for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ObservableRecentsController.Filter] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ObservableRecentsController.Filter] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ObservableRecentsController.Filter] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ObservableRecentsController.Filter]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ObservableRecentsController.Filter] and conformance [A]);
  }
  return result;
}

void *associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in ObservableRecentsController()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100101FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for ObservableRecentsController.$recentCalls : ObservableRecentsController(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__recentCalls, &demangling cache variable for type metadata for Published<[CHRecentCall]>);
}

uint64_t sub_100101FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ObservableRecentsController.$recentCalls : ObservableRecentsController(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CHRecentCall]>.Publisher, (uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__recentCalls, &demangling cache variable for type metadata for Published<[CHRecentCall]>);
}

uint64_t sub_100102024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for ObservableRecentsController.$recentCalls : ObservableRecentsController(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__filter, &demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>);
}

uint64_t sub_10010204C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ObservableRecentsController.$recentCalls : ObservableRecentsController(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>.Publisher, (uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__filter, &demangling cache variable for type metadata for Published<ObservableRecentsController.Filter>);
}

uint64_t sub_10010207C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for ObservableRecentsController.$recentCalls : ObservableRecentsController(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__contactsChangedDate, &demangling cache variable for type metadata for Published<Date?>);
}

uint64_t sub_1001020A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ObservableRecentsController.$recentCalls : ObservableRecentsController(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<Date?>.Publisher, (uint64_t)&OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController__contactsChangedDate, &demangling cache variable for type metadata for Published<Date?>);
}

uint64_t ObjC metadata update function for ObservableRecentsController()
{
  return type metadata accessor for ObservableRecentsController(0);
}

uint64_t type metadata accessor for ObservableRecentsController(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for ObservableRecentsController);
}

void type metadata completion function for ObservableRecentsController()
{
  type metadata accessor for Published<[CHRecentCall]>(319, &lazy cache variable for type metadata for Published<[CHRecentCall]>, &demangling cache variable for type metadata for [CHRecentCall]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<ObservableRecentsController.Filter>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<[CHRecentCall]>(319, &lazy cache variable for type metadata for Published<Date?>, (uint64_t *)&demangling cache variable for type metadata for Date?);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void type metadata accessor for Published<ObservableRecentsController.Filter>()
{
  if (!lazy cache variable for type metadata for Published<ObservableRecentsController.Filter>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<ObservableRecentsController.Filter>);
    }
  }
}

void type metadata accessor for Published<[CHRecentCall]>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v11 = a3[8];
    uint64_t v22 = a1 + v11;
    uint64_t v12 = (uint64_t)a2 + v11;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v13 = type metadata accessor for Date();
    objc_super v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v22, v12, v13);
    uint64_t v15 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v15) = *((unsigned char *)a2 + v15);
    uint64_t v16 = a3[11];
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v10 = a3[8];
  uint64_t v20 = a1 + v10;
  uint64_t v11 = a2 + v10;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v20, v11, v12);
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[11];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001028DC);
}

uint64_t sub_1001028DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ObservableRecentsController.LocalizedRecentCallInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001029A0);
}

uint64_t sub_1001029A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ObservableRecentsController.LocalizedRecentCallInfo()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ObservableRecentsController.Filter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100102BD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservableRecentsController.Filter()
{
  return &type metadata for ObservableRecentsController.Filter;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[44] = a5;
  v6[45] = a6;
  v6[43] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[46] = v7;
  v6[47] = *(void *)(v7 - 8);
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LiveVoicemailTip();
  v6[50] = v8;
  v6[51] = *(void *)(v8 - 8);
  v6[52] = swift_task_alloc();
  v6[53] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[55] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[56] = v9;
  v6[57] = *(void *)(v9 - 8);
  v6[58] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[59] = v10;
  v6[60] = *(void *)(v10 - 8);
  v6[61] = swift_task_alloc();
  v6[62] = type metadata accessor for MainActor();
  v6[63] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[64] = v12;
  v6[65] = v11;
  return _swift_task_switch(specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:), v12, v11);
}

uint64_t specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 448);
  *(void *)(v0 + 528) = lazy protocol witness table accessor for type LiveVoicemailTip and conformance LiveVoicemailTip();
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 616) = enum case for TPTipsHelper.Entry.Kind.voicemail(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 536) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 328);
}

{
  uint64_t v0;
  void *Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_1;
  void (*v31)(uint64_t *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v37 = v0;
  if (*(unsigned char *)(v0 + 620) != 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 552) = Strong;
    if (Strong)
    {
      if ((*(unsigned char *)(v0 + 620) & 1) == 0)
      {
        if (one-time initialization token for mobilePhoneTips != -1) {
          swift_once();
        }
        uint64_t v3 = *(void *)(v0 + 408);
        uint64_t v2 = *(void *)(v0 + 416);
        uint64_t v4 = *(void *)(v0 + 400);
        uint64_t v5 = *(void *)(v0 + 344);
        unsigned int v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)static Logger.mobilePhoneTips);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
        uint64_t v7 = Logger.logObject.getter();
        uint64_t v8 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = *(void *)(v0 + 408);
          id v35 = *(void *)(v0 + 416);
          uint64_t v10 = *(void *)(v0 + 400);
          uint64_t v11 = swift_slowAlloc();
          id v36 = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136315394;
          uint64_t v12 = _typeName(_:qualified:)();
          *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v11 + 12) = 2080;
          uint64_t v14 = dispatch thunk of Tip.id.getter();
          *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v35, v10);
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: Stoping observation of tip %s", (uint8_t *)v11, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(void, void))(*(void *)(v0 + 408) + 8))(*(void *)(v0 + 416), *(void *)(v0 + 400));
        }

        type metadata accessor for TPTipsHelper();
        uint64_t v23 = (void *)swift_task_alloc();
        *(void *)(v0 + 600) = v23;
        *uint64_t v23 = v0;
        id v24 = specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:);
        goto LABEL_21;
      }
      uint64_t v18 = Strong;
      uint64_t v19 = [Strong tableView];
      if (!v19)
      {
        __break(1u);
        return static TPTipsHelper.shared.getter();
      }
      uint64_t v20 = v19;
      unint64_t v21 = [v19 tableHeaderView];

      if (v21)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v22 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

          if (v22)
          {
            (*(void (**)(void, void))(*(void *)(v0 + 480) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 472));

            goto LABEL_9;
          }
        }
        else
        {
        }
      }
      uint64_t v25 = *(void *)(v0 + 528);
      uint64_t v26 = *(void *)(v0 + 400);
      id v27 = *(void *)(v0 + 408);
      unint64_t v28 = *(void *)(v0 + 360);
      id v29 = *(void *)(v0 + 344);
      *(void *)(v0 + 40) = v26;
      *(void *)(v0 + 48) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
      unint64_t v31 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16);
      *(void *)(v0 + 560) = v31;
      *(void *)(v0 + 568) = (v27 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v31(boxed_opaque_existential_1, v29, v26);
      uint64_t v32 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = v28;
      unint64_t v34 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
      *(void *)(v0 + 576) = TipUIView.init(_:arrowEdge:actionHandler:)();
      type metadata accessor for TPTipsHelper();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v23;
      *uint64_t v23 = v0;
      id v24 = specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:);
LABEL_21:
      v23[1] = v24;
      return static TPTipsHelper.shared.getter();
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 480) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 472));
LABEL_9:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  void (*v6)(uint64_t, void);
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  void (*v18)(unint64_t, void);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 560);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 344);
  (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 104))(*(void *)(v0 + 392), *(unsigned int *)(v0 + 616), *(void *)(v0 + 368));
  *(void *)(v0 + 200) = v3;
  *(void *)(v0 + 208) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
  v1(boxed_opaque_existential_1, v4, v3);
  unsigned int v6 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  uint64_t v8 = v7;
  if (*(void *)(v0 + 200))
  {
    uint64_t v9 = *(void *)(v0 + 392);
    uint64_t v10 = *(void *)(v0 + 368);
    uint64_t v11 = *(void *)(v0 + 376);
    outlined init with take of Tip((long long *)(v0 + 176), v0 + 216);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v29 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 216), v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v8 = v29;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 392);
    outlined destroy of Tip?(v0 + 176);
    swift_bridgeObjectRetain();
    uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    LOBYTE(v13) = v15;
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 336) = *v8;
      *uint64_t v8 = 0x8000000000000000;
      if ((v16 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v17 = *(void *)(v0 + 376);
      uint64_t v18 = *(void (**)(unint64_t, void))(v17 + 8);
      v18(*(void *)(*(void *)(v0 + 336) + 48) + *(void *)(v17 + 72) * v14, *(void *)(v0 + 368));
      uint64_t v19 = *(void *)(v0 + 336);
      outlined init with take of Tip((long long *)(*(void *)(v19 + 56) + 40 * v14), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v14, v19);
      *uint64_t v8 = v19;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)(v0 + 376);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      uint64_t v18 = *(void (**)(unint64_t, void))(v20 + 8);
    }
    v18(*(void *)(v0 + 392), *(void *)(v0 + 368));
    outlined destroy of Tip?(v0 + 56);
  }
  unint64_t v21 = *(void **)(v0 + 592);
  uint64_t v22 = *(void **)(v0 + 576);
  uint64_t v23 = *(void **)(v0 + 552);
  v6(v0 + 256, 0);

  id v24 = v22;
  PHVoicemailInboxListViewController.setTipView(_:)(v22);

  uint64_t v25 = static MainActor.shared.getter();
  *(void *)(v0 + 536) = v25;
  unint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v26;
  *uint64_t v26 = v0;
  v26[1] = specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:);
  return v28(v25, (uint64_t)&protocol witness table for MainActor);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void);
  uint64_t v25;

  uint64_t v1 = *(void **)(v0 + 608);
  uint64_t v2 = *(unsigned int *)(v0 + 616);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 368);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  unsigned int v6 = dispatch thunk of TPTipsHelper.currentTip.getter();

  if (*(void *)(v6 + 16)
    && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 384)), (v8 & 1) != 0))
  {
    outlined init with copy of Tip(*(void *)(v6 + 56) + 40 * v7, v0 + 136);
  }
  else
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 368);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  if (!*(void *)(v0 + 160))
  {
    uint64_t v16 = *(void **)(v0 + 552);
    (*(void (**)(void, void))(*(void *)(v0 + 480) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 472));

    outlined destroy of Tip?(v0 + 136);
    goto LABEL_14;
  }
  outlined init with take of Tip((long long *)(v0 + 136), v0 + 96);
  __swift_project_boxed_opaque_existential_0((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v12 = dispatch thunk of Tip.id.getter();
  uint64_t v14 = v13;
  if (v12 == dispatch thunk of Tip.id.getter() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v22 = *(void **)(v0 + 552);
      (*(void (**)(void, void))(*(void *)(v0 + 480) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 472));

      goto LABEL_13;
    }
  }
  uint64_t v18 = *(void **)(v0 + 552);
  uint64_t v20 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 488);
  unint64_t v21 = *(void *)(v0 + 472);
  PHVoicemailInboxListViewController.setTipView(_:)(0);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
LABEL_13:
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 620) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 520);
  uint64_t v4 = *(void *)(v2 + 512);
  return _swift_task_switch(specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:), v4, v3);
}

uint64_t specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 592) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 520);
  uint64_t v4 = *(void *)(v2 + 512);
  return _swift_task_switch(specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 608) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 520);
  uint64_t v4 = *(void *)(v2 + 512);
  return _swift_task_switch(specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:), v4, v3);
}

void PHVoicemailInboxListViewController.setTipView(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &selRef_sharedUtilityProvider;
  id v5 = [v1 tableView];
  if (!v5)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v6 = v5;
  uint64_t v7 = &selRef_sharedUtilityProvider;
  id v8 = [v5 tableHeaderView];

  if (!v8) {
    goto LABEL_7;
  }
  type metadata accessor for TPTipHeaderView();
  if (!swift_dynamicCastClass())
  {

LABEL_7:
    if (!a1) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v9 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

  if ((a1 != 0) != (v9 == 0)) {
    return;
  }
LABEL_8:
  if (one-time initialization token for mobilePhoneTips != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.mobilePhoneTips);
  id v11 = v2;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_getObjectType();
    uint64_t v15 = _typeName(_:qualified:)();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &aBlock);
    uint64_t v4 = &selRef_sharedUtilityProvider;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Showing Tip in %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = &selRef_sharedUtilityProvider;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v17 = [v11 v4[258]];
  if (!v17)
  {
    id v18 = v11;
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_getObjectType();
      uint64_t v27 = _typeName(_:qualified:)();
      uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to show tip since tableView is nil. %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_44;
  }
  id v18 = v17;
  if (a1) {
    goto LABEL_15;
  }
  id v29 = [v11 v4[258]];
  if (!v29)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  id v30 = v29;
  id v31 = [v29 v7[257]];

  if (!v31) {
    goto LABEL_15;
  }
  type metadata accessor for TPTipHeaderView();
  uint64_t v32 = swift_dynamicCastClass();
  BOOL v19 = v32 != 0;
  if (v32)
  {
    uint64_t v33 = dispatch thunk of TPTipHeaderView.hostingView.getter();

    if (v33)
    {
      id v31 = (id)v33;
      goto LABEL_26;
    }
LABEL_15:
    BOOL v19 = 0;
    goto LABEL_16;
  }
LABEL_26:

LABEL_16:
  [v18 contentOffset];
  double v21 = v20;
  double v23 = v22;
  if (!a1)
  {
    if (!v19) {
      goto LABEL_44;
    }
LABEL_28:
    id v34 = [v11 v4[258]];
    if (v34)
    {
      id v35 = v34;
      id v36 = [v34 v7[257]];

      if (v36)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v37 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

LABEL_35:
          id v38 = [v37 superview];

          if (v38) {
            goto LABEL_36;
          }
          [v18 setContentOffset:v21, v23];
          [v18 setTableHeaderView:0];
LABEL_44:

          return;
        }
      }
      uint64_t v37 = 0;
      goto LABEL_35;
    }
    goto LABEL_47;
  }
  if (v19) {
    goto LABEL_28;
  }
LABEL_36:
  uint64_t v39 = (objc_class *)type metadata accessor for TPTipHeaderView();
  static TPTipHeaderView.verticalInsetTotal.getter();
  if (!a1)
  {
    id v61 = [v18 v7[257]];
    if (v61)
    {
      id v62 = v61;
      CGFloat height = CGSizeZero.height;
      [v61 setAlpha:1.0];
      long long v64 = self;
      uint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = v62;
      *(void *)(v65 + 24) = v18;
      *(double *)(v65 + 32) = v21;
      *(double *)(v65 + 40) = v23;
      *(CGFloat *)(v65 + 48) = CGSizeZero.width;
      *(CGFloat *)(v65 + 56) = height;
      long long v77 = partial apply for specialized closure #1 in PHVoicemailInboxListViewController.setTipView(_:);
      uint64_t v78 = v65;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v74 = 1107296256;
      uint64_t v75 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v76 = &block_descriptor_3;
      uint64_t v66 = _Block_copy(&aBlock);
      id v67 = v62;
      id v68 = v18;
      swift_release();
      uint64_t v69 = swift_allocObject();
      *(unsigned char *)(v69 + 16) = v19;
      *(void *)(v69 + 24) = v68;
      *(double *)(v69 + 32) = v21;
      *(double *)(v69 + 40) = v23;
      long long v77 = partial apply for closure #2 in PHVoicemailInboxListViewController.setTipView(_:);
      uint64_t v78 = v69;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v74 = 1107296256;
      uint64_t v75 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v76 = &block_descriptor_31;
      Swift::String_optional v70 = _Block_copy(&aBlock);
      id v71 = v68;
      swift_release();
      [v64 animateWithDuration:v66 animations:v70 completion:0.33];

      _Block_release(v70);
      _Block_release(v66);

      return;
    }
    goto LABEL_44;
  }
  double v72 = v21;
  id v40 = a1;
  id v41 = [v11 view];
  if (!v41)
  {
LABEL_49:
    __break(1u);
    return;
  }
  id v42 = v41;
  CGFloat y = CGRectZero.origin.y;
  CGFloat v44 = CGRectZero.size.height;
  [v41 bounds];
  CGFloat v46 = v45;
  CGFloat v48 = v47;
  CGFloat v50 = v49;
  CGFloat v52 = v51;

  v80.origin.x = v46;
  v80.origin.CGFloat y = v48;
  v80.size.width = v50;
  v80.size.CGFloat height = v52;
  CGFloat Width = CGRectGetWidth(v80);
  [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
  v81.origin.x = CGRectZero.origin.x;
  v81.origin.CGFloat y = y;
  v81.size.width = Width;
  v81.size.CGFloat height = v44;
  CGRectGetWidth(v81);
  PHVoicemailInboxListViewController.refreshTableHeaderView()();
  double v55 = v54;
  [v40 bounds];
  if (v55 != CGRectGetWidth(v82))
  {
    [v40 bounds];
    [v40 setBounds:];
  }
  LODWORD(v56) = 1148846080;
  LODWORD(v57) = 1132068864;
  [v40 systemLayoutSizeFittingSize:v55 withHorizontalFittingPriority:0.0 verticalFittingPriority:v57];
  [v18 separatorInset];
  id v58 = objc_allocWithZone(v39);
  unint64_t v59 = (void *)TPTipHeaderView.init(frame:separatorInset:)();
  id v60 = v40;
  dispatch thunk of TPTipHeaderView.hostingView.setter();
  TPTipHeaderView.displaysBottomSeparator.setter();
  [v18 setTableHeaderView:v59];
  [v18 setContentOffset:v72, v23];
}

void closure #1 in closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)id v5 = 136315138;
      uint64_t v6 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Presenting LiveVoicemailWelcomeViewController", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v8 = objc_allocWithZone((Class)type metadata accessor for LiveVoicemailWelcomeViewController());
    id v9 = v1;
    uint64_t v10 = (void *)specialized LiveVoicemailWelcomeViewController.init(delegate:)();
    [v9 presentViewController:v10 animated:1 completion:0];
  }
}

Swift::Void __swiftcall PHVoicemailInboxListViewController.tipKitStartObservation()()
{
  uint64_t ObjectType = swift_getObjectType();
  if (TUCallScreeningEnabledM3())
  {
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v4 = 136315138;
      uint64_t v5 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: Starting observation of tips", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for TPTipsHelper();
    static TPTipsHelper.taskQueue.getter();
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = ObjectType;
    swift_retain();
    dispatch thunk of TaskQueue.async(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100104BC8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation()(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  uint64_t v3 = type metadata accessor for LiveVoicemailTip();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  type metadata accessor for TPTipsHelper();
  os_log_type_t v4 = (void *)swift_task_alloc();
  v2[12] = v4;
  void *v4 = v2;
  v4[1] = closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation();
  return static TPTipsHelper.shared.getter();
}

uint64_t closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation(), 0, 0);
}

uint64_t closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation()()
{
  *(void *)(v0 + 112) = type metadata accessor for MainActor();
  *(void *)(v0 + 120) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 104);
  swift_release();
  dispatch thunk of TPTipsHelper.setup()();

  return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  uint64_t Strong;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  BOOL v19 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[16] = Strong;
  if (Strong)
  {
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      id v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v6 = _typeName(_:qualified:)();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Observing LiveVoicemailTip", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    LiveVoicemailTip.init()();
    v0[17] = static MainActor.shared.getter();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[18] = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
    uint64_t v9 = v0[11];
    return specialized PHVoicemailInboxListViewController.observeTip<A>(_:action:)(v9);
  }
  else
  {
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      id v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v15 = _typeName(_:qualified:)();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: Observing tip failed because self is nil", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    id v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1001052D0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in PHVoicemailInboxListViewController.tipKitStartObservation()(v2, v3);
}

Swift::Void __swiftcall PHVoicemailInboxListViewController.tipKitStopObservation()()
{
  swift_getObjectType();
  if (one-time initialization token for mobilePhoneTips != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.mobilePhoneTips);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: Stoping observation of tips", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for TPTipsHelper();
  static TPTipsHelper.taskQueue.getter();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  swift_release_n();
}

uint64_t closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation()(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation(), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation(), 0, 0);
}

uint64_t closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    v0[10] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation(), v3, v2);
  }
  else
  {
    type metadata accessor for TPTipsHelper();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    void *v4 = v0;
    v4[1] = closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation();
    return static TPTipsHelper.shared.getter();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 72);
  swift_release();
  uint64_t v2 = (uint64_t (*)())[v1 tableView];
  if (v2)
  {
    unint64_t v5 = v2;
    [v2 setTableHeaderView:0];

    uint64_t v2 = closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation();
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  type metadata accessor for TPTipsHelper();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  void *v1 = v0;
  v1[1] = closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation();
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for TPTipsHelper.Entry.Kind.voicemail(_:), v0[6]);
  type metadata accessor for MainActor();
  v0[13] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[12];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  swift_release();
  dispatch thunk of TPTipsHelper.removeEntries(_:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

id PHVoicemailInboxListViewController.didTapContinue(viewController:)()
{
  return [v0 dismissViewControllerAnimated:1 completion:0];
}

uint64_t partial apply for closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in PHVoicemailInboxListViewController.tipKitStopObservation()(v0);
}

uint64_t specialized PHVoicemailInboxListViewController.observeTip<A>(_:action:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LiveVoicemailTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized PHVoicemailInboxListViewController.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized PHVoicemailInboxListViewController.observeTip<A>(_:action:), v4, v3);
}

uint64_t specialized PHVoicemailInboxListViewController.observeTip<A>(_:action:)()
{
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized PHVoicemailInboxListViewController.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.voicemail(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type LiveVoicemailTip and conformance LiveVoicemailTip();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100106388()
{
  uint64_t v1 = type metadata accessor for LiveVoicemailTip();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LiveVoicemailTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return specialized closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

void partial apply for closure #1 in closure #1 in PHVoicemailInboxListViewController.observeTip<A>(_:action:)()
{
}

uint64_t sub_1001065B4()
{
  return _swift_deallocObject(v0, 64, 7);
}

id partial apply for specialized closure #1 in PHVoicemailInboxListViewController.setTipView(_:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  [*(id *)(v0 + 16) setAlpha:0.0];
  PHVoicemailInboxListViewController.refreshTableHeaderView()();

  return [v1 setContentOffset:];
}

uint64_t sub_100106664()
{
  return _swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #2 in PHVoicemailInboxListViewController.setTipView(_:)()
{
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 24);
    [v1 setContentOffset:*(double *)(v0 + 32), *(double *)(v0 + 40)];
    [v1 setTableHeaderView:0];
  }
}

id RecentCallsListContainerView.recentsController.getter()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    return v1;
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
    id result = (id)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t RecentCallsListContainerView.$recentsController.getter()
{
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);

  return EnvironmentObject.projectedValue.getter();
}

uint64_t RecentCallsListContainerView.isEditing.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t RecentCallsListContainerView.isEditing.setter()
{
  return State.wrappedValue.setter();
}

uint64_t (*RecentCallsListContainerView.isEditing.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = *(_OWORD *)(v1 + 16);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v3 + 24, (uint64_t)(v3 + 2), &demangling cache variable for type metadata for AnyLocation<Bool>?);
  *uint64_t v3 = v3[1];
  outlined retain of AnyLocation<Bool>?((uint64_t)(v3 + 2));
  *((void *)v3 + 5) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return RecentCallsListContainerView.isEditing.modify;
}

uint64_t outlined retain of AnyLocation<Bool>?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of State<Bool>(uint64_t a1)
{
  return a1;
}

uint64_t RecentCallsListContainerView.$isEditing.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  return v1;
}

uint64_t RecentCallsListContainerView.isShowingDeleteAllSheet.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t RecentCallsListContainerView.isShowingDeleteAllSheet.setter()
{
  return State.wrappedValue.setter();
}

uint64_t (*RecentCallsListContainerView.isShowingDeleteAllSheet.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = *(_OWORD *)(v1 + 32);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v3 + 24, (uint64_t)(v3 + 2), &demangling cache variable for type metadata for AnyLocation<Bool>?);
  *uint64_t v3 = v3[1];
  outlined retain of AnyLocation<Bool>?((uint64_t)(v3 + 2));
  *((void *)v3 + 5) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return RecentCallsListContainerView.isEditing.modify;
}

void RecentCallsListContainerView.isEditing.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  uint64_t v2 = (_OWORD *)(*(void *)a1 + 16);
  char v3 = *(unsigned char *)(*(void *)a1 + 49);
  *(_OWORD *)uint64_t v1 = *v2;
  v1[48] = v3;
  State.wrappedValue.setter();
  outlined release of State<Bool>((uint64_t)v2);

  free(v1);
}

uint64_t RecentCallsListContainerView.$isShowingDeleteAllSheet.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  return v1;
}

uint64_t RecentCallsListContainerView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>);
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>();
  return NavigationView.init(content:)();
}

uint64_t closure #1 in RecentCallsListContainerView.body.getter@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EditButton?);
  __chkstk_darwin(v3 - 8);
  id v62 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>?);
  __chkstk_darwin(v5 - 8);
  id v60 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v7 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  CGFloat v50 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarBanner<A>(_:)>>.0);
  uint64_t v55 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  double v49 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarTitle(_:displayMode:)>>.0);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  id v53 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.actionSheet(isPresented:content:)>>.0);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  id v61 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>);
  __chkstk_darwin(v58);
  unint64_t v59 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v52 = a1;
  closure #1 in closure #1 in RecentCallsListContainerView.body.getter(a1);
  uint64_t v66 = a1;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.pickerStyle<A>(_:)>>.0);
  unint64_t v48 = lazy protocol witness table accessor for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
  uint64_t v18 = type metadata accessor for SegmentedPickerStyle();
  uint64_t v19 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>> and conformance Picker<A, B, C>, &demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
  *(void *)&long long v69 = v17;
  *((void *)&v69 + 1) = v18;
  unint64_t v70 = v19;
  id v71 = &protocol witness table for SegmentedPickerStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v21 = v16;
  View.navigationBarBanner<A>(_:)();
  outlined destroy of Locale?((uint64_t)v11, &demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
  LocalizedStringKey.init(stringLiteral:)();
  double v22 = v50;
  uint64_t v23 = v51;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v50, enum case for NavigationBarItem.TitleDisplayMode.large(_:), v51);
  *(void *)&long long v69 = v9;
  *((void *)&v69 + 1) = v21;
  id v24 = v53;
  unint64_t v70 = v48;
  id v71 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v54;
  uint64_t v26 = v49;
  View.navigationBarTitle(_:displayMode:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v23;
  unint64_t v28 = v52;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v27);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v26, v25);
  long long v75 = *((_OWORD *)v28 + 1);
  long long v69 = *((_OWORD *)v28 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  if (v74 == 1)
  {
    id v29 = (_OWORD *)swift_allocObject();
    long long v30 = *(_OWORD *)v28;
    long long v31 = *((_OWORD *)v28 + 1);
    v29[1] = *(_OWORD *)v28;
    v29[2] = v31;
    long long v32 = *((_OWORD *)v28 + 2);
    v29[3] = v32;
    long long v73 = v32;
    long long v74 = v30;
    outlined retain of EnvironmentObject<ObservableRecentsController>((id *)&v74);
    outlined retain of State<Bool>((uint64_t)&v75);
    outlined retain of State<Bool>((uint64_t)&v73);
    uint64_t v33 = (uint64_t)v60;
    Button.init(action:label:)();
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
  }
  else
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
    uint64_t v33 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v60, 1, 1, v35);
  }
  uint64_t v36 = (uint64_t)v62;
  EditButton.init()();
  uint64_t v37 = type metadata accessor for EditButton();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 0, 1, v37);
  uint64_t v38 = specialized View.optionalNavigationBarItems<A, B>(leading:trailing:)(v33, v36);
  outlined destroy of Locale?(v36, &demangling cache variable for type metadata for EditButton?);
  outlined destroy of Locale?(v33, &demangling cache variable for type metadata for Button<Text>?);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v57);
  uint64_t v68 = v38;
  long long v72 = *((_OWORD *)v28 + 2);
  long long v67 = *((_OWORD *)v28 + 2);
  uint64_t v39 = State.projectedValue.getter();
  __chkstk_darwin(v39);
  *(&v48 - 2) = (unint64_t)v28;
  id v40 = v61;
  View.actionSheet(isPresented:content:)();
  swift_release();
  swift_release();
  swift_release();
  long long v69 = *(_OWORD *)v28;
  id v41 = (uint64_t (*)())swift_allocObject();
  long long v42 = *((_OWORD *)v28 + 1);
  *((_OWORD *)v41 + 1) = *(_OWORD *)v28;
  *((_OWORD *)v41 + 2) = v42;
  *((_OWORD *)v41 + 3) = *((_OWORD *)v28 + 2);
  uint64_t v43 = v63;
  uint64_t v44 = (uint64_t)v59;
  uint64_t v45 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v59, v40, v64);
  CGFloat v46 = (uint64_t (**)())(v44 + *(int *)(v58 + 36));
  *CGFloat v46 = partial apply for closure #4 in closure #1 in RecentCallsListContainerView.body.getter;
  v46[1] = v41;
  outlined retain of State<Bool>((uint64_t)&v75);
  outlined retain of EnvironmentObject<ObservableRecentsController>((id *)&v69);
  outlined retain of State<Bool>((uint64_t)&v72);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v45);
  return outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>(v44, v65, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>);
}

uint64_t partial apply for closure #1 in RecentCallsListContainerView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in RecentCallsListContainerView.body.getter(*(void ***)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _PreferenceActionModifier<RecentCallsListViewPreferenceKey> and conformance _PreferenceActionModifier<A>, &demangling cache variable for type metadata for _PreferenceActionModifier<RecentCallsListViewPreferenceKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t closure #1 in closure #1 in RecentCallsListContainerView.body.getter(void **a1)
{
  uint64_t v2 = type metadata accessor for RecentCallsListView();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<EmptyContentView, RecentCallsListView>.Storage);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *a1;
  if (*a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v12 = v11;
    static Published.subscript.getter();

    swift_release();
    swift_release();
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v13)
    {
      type metadata accessor for ObservableRecentsController(0);
      _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
      *uint64_t v5 = EnvironmentObject.init()();
      v5[1] = v14;
      uint64_t v15 = (uint64_t *)((char *)v5 + *(int *)(v2 + 20));
      *uint64_t v15 = swift_getKeyPath();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
      swift_storeEnumTagMultiPayload();
      outlined init with take of RecentCallsListView((uint64_t)v5, (uint64_t)v7);
      outlined init with copy of RecentCallsListView((uint64_t)v7, (uint64_t)v10);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type EmptyContentView and conformance EmptyContentView();
      _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0(&lazy protocol witness table cache variable for type RecentCallsListView and conformance RecentCallsListView, (void (*)(uint64_t))type metadata accessor for RecentCallsListView);
      _ConditionalContent<>.init(storage:)();
      return outlined destroy of RecentCallsListView((uint64_t)v7);
    }
    else
    {
      *uint64_t v10 = 0x6E65636552206F4ELL;
      v10[1] = 0xEA00000000007374;
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type EmptyContentView and conformance EmptyContentView();
      _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0(&lazy protocol witness table cache variable for type RecentCallsListView and conformance RecentCallsListView, (void (*)(uint64_t))type metadata accessor for RecentCallsListView);
      return _ConditionalContent<>.init(storage:)();
    }
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in closure #1 in RecentCallsListContainerView.body.getter@<X0>(uint64_t a1@<X8>)
{
  v14[0] = a1;
  uint64_t v1 = type metadata accessor for SegmentedPickerStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
  uint64_t v9 = (void *)EnvironmentObject.projectedValue.getter();
  swift_getKeyPath();
  EnvironmentObject.Wrapper.subscript.getter();
  swift_release();

  uint64_t v17 = v20;
  uint64_t v18 = v21;
  char v19 = v22;
  LocalizedStringKey.init(stringLiteral:)();
  v14[1] = Text.init(_:tableName:bundle:comment:)();
  v14[2] = v10;
  char v15 = v11 & 1;
  uint64_t v16 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>);
  lazy protocol witness table accessor for type ObservableRecentsController.Filter and conformance ObservableRecentsController.Filter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>);
  Picker.init(selection:label:content:)();
  SegmentedPickerStyle.init()();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>> and conformance Picker<A, B, C>, &demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
  View.pickerStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t closure #1 in closure #2 in closure #1 in RecentCallsListContainerView.body.getter@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  char v13 = v12 & 1;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v12 & 1;
  *(void *)(a1 + 64) = v14;
  *(_WORD *)(a1 + 72) = 257;
  outlined copy of Text.Storage(v2, v4, v8);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v9, v11, v13);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v9, v11, v13);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v2, v4, v8);

  return swift_bridgeObjectRelease();
}

uint64_t RecentCallsListContainerView.deleteAllButton()()
{
  uint64_t v1 = (_OWORD *)swift_allocObject();
  long long v2 = *v0;
  long long v3 = v0[1];
  v1[1] = *v0;
  v1[2] = v3;
  long long v4 = v0[2];
  v1[3] = v4;
  long long v7 = v3;
  long long v8 = v2;
  long long v6 = v4;
  outlined retain of EnvironmentObject<ObservableRecentsController>((id *)&v8);
  outlined retain of State<Bool>((uint64_t)&v7);
  outlined retain of State<Bool>((uint64_t)&v6);
  return Button.init(action:label:)();
}

uint64_t specialized View.optionalNavigationBarItems<A, B>(leading:trailing:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarItems<A, B>(leading:trailing:)>>.0);
  uint64_t v110 = *(void *)(v4 - 8);
  uint64_t v111 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  Swift::String v108 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  Swift::String v109 = (char *)&v98 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarItems<A, B>(leading:trailing:)>>.0);
  uint64_t v106 = *(void *)(v8 - 8);
  uint64_t v107 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::Int v104 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::Int v105 = (char *)&v98 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v116 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarItems<A, B>(leading:trailing:)>>.0);
  uint64_t v102 = *(void *)(v15 - 8);
  uint64_t v103 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  Swift::Int v100 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v101 = (char *)&v98 - v18;
  uint64_t v19 = type metadata accessor for EditButton();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  Swift::String v113 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarTitle(_:displayMode:)>>.0);
  uint64_t v22 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  id v24 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Text>?, EditButton?));
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  unint64_t v28 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (uint64_t)&v28[*(int *)(v26 + 56)];
  outlined init with copy of (String, Any)(a1, (uint64_t)v28, &demangling cache variable for type metadata for Button<Text>?);
  outlined init with copy of (String, Any)(a2, v29, &demangling cache variable for type metadata for EditButton?);
  long long v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v112 = v12;
  LODWORD(a1) = v30(v28, 1, v12);
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v29, 1, v19);
  int v32 = v31;
  if (a1 == 1)
  {
    if (v31 == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v115, v114);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarBanner<A>(_:)>>.0);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.pickerStyle<A>(_:)>>.0);
      unint64_t v36 = lazy protocol witness table accessor for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>();
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v38 = type metadata accessor for SegmentedPickerStyle();
      uint64_t v39 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>> and conformance Picker<A, B, C>, &demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v117 = v37;
      Swift::Int v118 = (void *)v38;
      Swift::Int v119 = (void *)v39;
      uint64_t v120 = &protocol witness table for SegmentedPickerStyle;
      uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v34;
      Swift::Int v118 = (void *)v35;
      Swift::Int v119 = (void *)v36;
      uint64_t v120 = (void *)OpaqueTypeConformance2;
      uint64_t v41 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v33;
      Swift::Int v118 = (void *)v41;
      swift_getOpaqueTypeConformance2();
      return AnyView.init<A>(_:)();
    }
    else
    {
      id v60 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
      uint64_t v99 = v19;
      v60(v113, v29, v19);
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarBanner<A>(_:)>>.0);
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.pickerStyle<A>(_:)>>.0);
      unint64_t v64 = lazy protocol witness table accessor for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>();
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v66 = type metadata accessor for SegmentedPickerStyle();
      uint64_t v67 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>> and conformance Picker<A, B, C>, &demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v117 = v65;
      Swift::Int v118 = (void *)v66;
      Swift::Int v119 = (void *)v67;
      uint64_t v120 = &protocol witness table for SegmentedPickerStyle;
      uint64_t v68 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v62;
      Swift::Int v118 = (void *)v63;
      Swift::Int v119 = (void *)v64;
      uint64_t v120 = (void *)v68;
      uint64_t v69 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v61;
      Swift::Int v118 = (void *)v69;
      uint64_t v70 = swift_getOpaqueTypeConformance2();
      uint64_t v71 = _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0(&lazy protocol witness table cache variable for type EditButton and conformance EditButton, (void (*)(uint64_t))&type metadata accessor for EditButton);
      long long v72 = v101;
      uint64_t v73 = v114;
      long long v74 = (void *)v99;
      View.navigationBarItems<A, B>(leading:trailing:)();
      uint64_t v76 = v102;
      uint64_t v75 = v103;
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v100, v72, v103);
      uint64_t v117 = v73;
      Swift::Int v118 = &type metadata for EmptyView;
      Swift::Int v119 = v74;
      uint64_t v120 = (void *)v70;
      v121 = &protocol witness table for EmptyView;
      uint64_t v122 = (void *)v71;
      swift_getOpaqueTypeConformance2();
      uint64_t v42 = AnyView.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v75);
      (*(void (**)(char *, void *))(v20 + 8))(v113, v74);
    }
  }
  else
  {
    uint64_t v103 = v13;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v116, v28, v112);
    if (v32 == 1)
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarBanner<A>(_:)>>.0);
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.pickerStyle<A>(_:)>>.0);
      unint64_t v46 = lazy protocol witness table accessor for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>();
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v48 = type metadata accessor for SegmentedPickerStyle();
      uint64_t v49 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>> and conformance Picker<A, B, C>, &demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v117 = v47;
      Swift::Int v118 = (void *)v48;
      Swift::Int v119 = (void *)v49;
      uint64_t v120 = &protocol witness table for SegmentedPickerStyle;
      uint64_t v50 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v44;
      Swift::Int v118 = (void *)v45;
      Swift::Int v119 = (void *)v46;
      uint64_t v120 = (void *)v50;
      uint64_t v51 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v43;
      Swift::Int v118 = (void *)v51;
      uint64_t v52 = swift_getOpaqueTypeConformance2();
      uint64_t v53 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
      uint64_t v54 = v105;
      uint64_t v55 = v116;
      uint64_t v56 = v114;
      uint64_t v57 = (void *)v112;
      View.navigationBarItems<A, B>(leading:trailing:)();
      uint64_t v59 = v106;
      uint64_t v58 = v107;
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v104, v54, v107);
      uint64_t v117 = v56;
      Swift::Int v118 = v57;
      Swift::Int v119 = &type metadata for EmptyView;
      uint64_t v120 = (void *)v52;
      v121 = (void *)v53;
      uint64_t v122 = &protocol witness table for EmptyView;
      swift_getOpaqueTypeConformance2();
      uint64_t v42 = AnyView.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v58);
      (*(void (**)(char *, void *))(v103 + 8))(v55, v57);
    }
    else
    {
      long long v77 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
      uint64_t v99 = v19;
      v77(v113, v29, v19);
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.navigationBarBanner<A>(_:)>>.0);
      uint64_t v79 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.pickerStyle<A>(_:)>>.0);
      uint64_t v107 = v20;
      CGRect v81 = (void *)v80;
      unint64_t v82 = lazy protocol witness table accessor for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>();
      uint64_t v83 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v84 = type metadata accessor for SegmentedPickerStyle();
      uint64_t v85 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>> and conformance Picker<A, B, C>, &demangling cache variable for type metadata for Picker<Text, ObservableRecentsController.Filter, TupleView<(ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>, ModifiedContent<ModifiedContent<Text, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter>>>, _TraitWritingModifier<TagValueTraitKey<ObservableRecentsController.Filter?>>>)>>);
      uint64_t v117 = v83;
      Swift::Int v118 = (void *)v84;
      Swift::Int v119 = (void *)v85;
      uint64_t v120 = &protocol witness table for SegmentedPickerStyle;
      uint64_t v86 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v79;
      Swift::Int v118 = v81;
      Swift::Int v119 = (void *)v82;
      uint64_t v120 = (void *)v86;
      uint64_t v87 = swift_getOpaqueTypeConformance2();
      uint64_t v117 = v78;
      Swift::Int v118 = (void *)v87;
      uint64_t v88 = swift_getOpaqueTypeConformance2();
      uint64_t v106 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
      uint64_t v89 = _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0(&lazy protocol witness table cache variable for type EditButton and conformance EditButton, (void (*)(uint64_t))&type metadata accessor for EditButton);
      unint64_t v90 = v109;
      uint64_t v91 = v114;
      uint64_t v92 = (void *)v112;
      id v93 = (void *)v99;
      View.navigationBarItems<A, B>(leading:trailing:)();
      uint64_t v95 = v110;
      uint64_t v94 = v111;
      uint64_t v96 = v103;
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, v90, v111);
      uint64_t v117 = v91;
      Swift::Int v118 = v92;
      Swift::Int v119 = v93;
      uint64_t v120 = (void *)v88;
      v121 = (void *)v106;
      uint64_t v122 = (void *)v89;
      swift_getOpaqueTypeConformance2();
      uint64_t v42 = AnyView.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v90, v94);
      (*(void (**)(char *, void *))(v107 + 8))(v113, v93);
      (*(void (**)(char *, void *))(v96 + 8))(v116, v92);
    }
  }
  return v42;
}

uint64_t closure #3 in closure #1 in RecentCallsListContainerView.body.getter(long long *a1)
{
  LocalizedStringKey.init(stringLiteral:)();
  Text.init(_:tableName:bundle:comment:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Alert.Button>);
  type metadata accessor for Alert.Button();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1002060A0;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  long long v7 = a1[1];
  long long v18 = *a1;
  long long v16 = a1[2];
  long long v17 = v7;
  uint64_t v8 = (_OWORD *)swift_allocObject();
  long long v9 = a1[1];
  v8[1] = *a1;
  void v8[2] = v9;
  v8[3] = a1[2];
  outlined retain of EnvironmentObject<ObservableRecentsController>((id *)&v18);
  outlined retain of State<Bool>((uint64_t)&v17);
  outlined retain of State<Bool>((uint64_t)&v16);
  static Alert.Button.destructive(_:action:)();
  swift_release();
  outlined consume of Text.Storage(v2, v4, v6);
  swift_bridgeObjectRelease();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Alert.Button.default(_:action:)();
  outlined consume of Text.Storage(v10, v12, v14);
  swift_bridgeObjectRelease();
  return ActionSheet.init(title:message:buttons:)();
}

id closure #1 in closure #3 in closure #1 in RecentCallsListContainerView.body.getter(void *a1)
{
  if (*a1)
  {
    uint64_t v1 = *(void **)(*a1 + OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController);
    return [v1 deleteAllRecentCalls];
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
    id result = (id)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in RecentCallsListContainerView.deleteAllButton()@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

id *outlined retain of EnvironmentObject<ObservableRecentsController>(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t outlined retain of State<Bool>(uint64_t a1)
{
  return a1;
}

uint64_t RecentCallsListContainerView.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
  uint64_t v2 = EnvironmentObject.init()();
  uint64_t v4 = v3;
  State.init(wrappedValue:)();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  return result;
}

uint64_t default argument 0 of RecentCallsListContainerView.init(recentsController:isEditing:isShowingDeleteAllSheet:)()
{
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);

  return EnvironmentObject.init()();
}

uint64_t RecentCallsListContainerView.init(recentsController:isEditing:isShowingDeleteAllSheet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  State.init(wrappedValue:)();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  *(unsigned char *)(a3 + 32) = v7;
  *(void *)(a3 + 40) = v8;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallsListContainerView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance RecentCallsListContainerView()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>);
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>();
  return NavigationView.init(content:)();
}

uint64_t sub_100109320@<X0>(unsigned char *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  uint64_t result = State.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100109378()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1001093D0@<X0>(unsigned char *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  uint64_t result = State.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100109428()
{
  return State.wrappedValue.setter();
}

uint64_t destroy for RecentCallsListContainerView(id *a1)
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for RecentCallsListContainerView(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  id v5 = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RecentCallsListContainerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RecentCallsListContainerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallsListContainerView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecentCallsListContainerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallsListContainerView()
{
  return &type metadata for RecentCallsListContainerView;
}

uint64_t sub_1001096F4()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type NavigationView<ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>> and conformance NavigationView<A>, &demangling cache variable for type metadata for NavigationView<ModifiedContent<<<opaque return type of View.actionSheet(isPresented:content:)>>.0, _PreferenceActionModifier<RecentCallsListViewPreferenceKey>>>);
}

uint64_t sub_100109730()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
}

uint64_t partial apply for closure #2 in closure #1 in RecentCallsListContainerView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in RecentCallsListContainerView.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Group<_ConditionalContent<EmptyContentView, RecentCallsListView>>);
    lazy protocol witness table accessor for type _ConditionalContent<EmptyContentView, RecentCallsListView> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<_ConditionalContent<EmptyContentView, RecentCallsListView>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<EmptyContentView, RecentCallsListView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<EmptyContentView, RecentCallsListView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<EmptyContentView, RecentCallsListView> and conformance <> _ConditionalContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ConditionalContent<EmptyContentView, RecentCallsListView>);
    lazy protocol witness table accessor for type EmptyContentView and conformance EmptyContentView();
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0(&lazy protocol witness table cache variable for type RecentCallsListView and conformance RecentCallsListView, (void (*)(uint64_t))type metadata accessor for RecentCallsListView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<EmptyContentView, RecentCallsListView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyContentView and conformance EmptyContentView()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyContentView and conformance EmptyContentView;
  if (!lazy protocol witness table cache variable for type EmptyContentView and conformance EmptyContentView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyContentView and conformance EmptyContentView);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in RecentCallsListContainerView.body.getter()
{
  return closure #3 in closure #1 in RecentCallsListContainerView.body.getter(*(long long **)(v0 + 16));
}

uint64_t partial apply for closure #4 in closure #1 in RecentCallsListContainerView.body.getter()
{
  return State.wrappedValue.setter();
}

uint64_t partial apply for closure #1 in RecentCallsListContainerView.deleteAllButton()()
{
  return State.wrappedValue.setter();
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

id partial apply for closure #1 in closure #3 in closure #1 in RecentCallsListContainerView.body.getter()
{
  return closure #1 in closure #3 in closure #1 in RecentCallsListContainerView.body.getter((void *)(v0 + 16));
}

uint64_t _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of RecentCallsListView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentCallsListView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of RecentCallsListView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentCallsListView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RecentCallsListView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecentCallsListView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL GreetingAccount.AccountType.isLiveVoiceMail.getter(uint64_t a1, char a2)
{
  return !a1 && a2 == 2;
}

uint64_t GreetingAccount.AccountType.uuid.getter@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = __chkstk_darwin(*(void *)(v9 - 8));
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a2 != 1)
    {
      type metadata accessor for Defaults();
      swift_initStackObject();
      return Defaults.liveVoiceMailAccountUUID.getter(a3);
    }
    uint64_t v30 = v10;
    id v13 = a1;
    id v14 = [v13 labelID];
    if (v14)
    {
      uint64_t v15 = v14;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v9) != 1)
      {

        uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
        v29(v12, v8, v9);
        v29((char *)a3, v12, v9);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(a3, 0, 1, v9);
      }
      outlined destroy of UUID?((uint64_t)v8);
    }
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.mobilePhone);
    id v17 = v13;
    long long v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v33 = v21;
      uint64_t v31 = (uint64_t)a1;
      char v32 = 1;
      id v22 = v17;
      uint64_t v23 = String.init<A>(reflecting:)();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to get uuid for account %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(a3, 1, 1, v9);
  }
  else
  {
    uint64_t v30 = v10;
    id v25 = a1;
    id v26 = [v25 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56);
    return v27(a3, 0, 1, v9);
  }
}

BOOL GreetingAccount.customGreetingSupported.getter()
{
  if (*(void *)(v0 + OBJC_IVAR___MPGreetingAccount_accountType)) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = *(unsigned char *)(v0 + OBJC_IVAR___MPGreetingAccount_accountType + 8) == 2;
  }
  return !v1;
}

void *GreetingAccount.accountType.getter()
{
  BOOL v1 = *(void **)(v0 + OBJC_IVAR___MPGreetingAccount_accountType);
  id v2 = v1;
  return v1;
}

uint64_t GreetingAccount.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___MPGreetingAccount_uuid;
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id GreetingAccount.__allocating_init(account:)(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)objc_allocWithZone(v1);
  uint64_t v8 = &v7[OBJC_IVAR___MPGreetingAccount_accountType];
  *(void *)uint64_t v8 = a1;
  v8[8] = 0;
  uint64_t v9 = v7;
  id v10 = a1;
  id v11 = [v10 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v9[OBJC_IVAR___MPGreetingAccount_uuid], v6, v3);
  v14.receiver = v9;
  v14.super_class = v1;
  [super init];

  return v12;
}

id GreetingAccount.init(account:)(void *a1)
{
  id v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v2[OBJC_IVAR___MPGreetingAccount_accountType];
  *(void *)uint64_t v9 = a1;
  v9[8] = 0;
  id v10 = v2;
  id v11 = a1;
  id v12 = [v11 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v10[OBJC_IVAR___MPGreetingAccount_uuid], v8, v5);
  v15.receiver = v10;
  v15.super_class = ObjectType;
  id v13 = [super init];

  return v13;
}

id GreetingAccount.__allocating_init(subscription:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return GreetingAccount.init(subscription:)(a1);
}

id GreetingAccount.init(subscription:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = &v1[OBJC_IVAR___MPGreetingAccount_accountType];
  *(void *)id v11 = a1;
  v11[8] = 1;
  id v12 = v1;
  id v13 = a1;
  GreetingAccount.AccountType.uuid.getter(a1, 1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    outlined destroy of UUID?((uint64_t)v6);
    objc_super v14 = *(void **)v11;

    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v10, v6, v7);
    v16(&v12[OBJC_IVAR___MPGreetingAccount_uuid], v10, v7);

    v18.receiver = v12;
    v18.super_class = ObjectType;
    [super init];
  }
  return v15;
}

id GreetingAccount.__allocating_init(accountType:)(void *a1, char a2)
{
  id v5 = objc_allocWithZone(v2);
  return GreetingAccount.init(accountType:)(a1, a2);
}

id GreetingAccount.init(accountType:)(void *a1, char a2)
{
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_super v14 = &v3[OBJC_IVAR___MPGreetingAccount_accountType];
  *(void *)objc_super v14 = a1;
  v14[8] = a2;
  id v15 = a1;
  uint64_t v16 = v3;
  GreetingAccount.AccountType.uuid.getter(a1, a2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {

    outlined destroy of UUID?((uint64_t)v9);
    id v17 = *(void **)v14;

    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    os_log_type_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v13, v9, v10);
    v19(&v16[OBJC_IVAR___MPGreetingAccount_uuid], v13, v10);

    v21.receiver = v16;
    v21.super_class = ObjectType;
    [super init];
  }
  return v18;
}

Swift::String_optional __swiftcall GreetingAccount.accountDescription()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___MPGreetingAccount_accountType);
  if (*(unsigned char *)(v0 + OBJC_IVAR___MPGreetingAccount_accountType + 8))
  {
    if (*(unsigned char *)(v0 + OBJC_IVAR___MPGreetingAccount_accountType + 8) != 1)
    {
      id v2 = [self mainBundle];
      v15._object = (void *)0xE000000000000000;
      v8._uint64_t countAndFlagsBits = 0x494F565F4556494CLL;
      v8._object = (void *)0xEE004C49414D4543;
      v9.value._uint64_t countAndFlagsBits = 0x6C6172656E6547;
      v9.value._object = (void *)0xE700000000000000;
      v10._uint64_t countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      v15._uint64_t countAndFlagsBits = 0;
      Swift::String v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v2, v10, v15);
      uint64_t countAndFlagsBits = v11._countAndFlagsBits;
      object = v11._object;
      goto LABEL_8;
    }
    id v2 = v1;
    id v3 = [v2 label];
    if (v3)
    {
LABEL_4:
      uint64_t v4 = v3;
      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      object = v6;

LABEL_8:
      goto LABEL_9;
    }
  }
  else
  {
    id v2 = v1;
    id v3 = [v2 accountDescription];
    if (v3) {
      goto LABEL_4;
    }
  }

  uint64_t countAndFlagsBits = 0;
  object = 0;
LABEL_9:
  uint64_t v12 = countAndFlagsBits;
  id v13 = object;
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

id static GreetingAccount.liveVoicemailAccount()()
{
  id v1 = objc_allocWithZone(v0);
  return GreetingAccount.init(accountType:)(0, 2);
}

void GreetingAccount.init()()
{
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ObjC metadata update function for GreetingAccount()
{
  return type metadata accessor for GreetingAccount();
}

uint64_t type metadata accessor for GreetingAccount()
{
  uint64_t result = type metadata singleton initialization cache for GreetingAccount;
  if (!type metadata singleton initialization cache for GreetingAccount) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GreetingAccount()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GreetingAccount.AccountType(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

void destroy for GreetingAccount.AccountType(id *a1)
{
}

uint64_t assignWithCopy for GreetingAccount.AccountType(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t assignWithTake for GreetingAccount.AccountType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for GreetingAccount.AccountType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GreetingAccount.AccountType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GreetingAccount.AccountType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for GreetingAccount.AccountType(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GreetingAccount.AccountType()
{
  return &type metadata for GreetingAccount.AccountType;
}

void *one-time initialization function for springBoardOrientationObserver()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned int v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static OrientationMonitorComposer.logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  type metadata accessor for SpringBoardOrientationObserver();
  uint64_t v5 = swift_allocObject();
  id v6 = (Swift::Void (__swiftcall **)())(v5
                                      + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  void *v6 = PHVoicemailInboxListViewController.refreshTableHeaderView();
  v6[1] = 0;
  *(void *)(v5 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver____lazy_storage___cfObserver) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_logger, v3, v0);
  type metadata accessor for SpringBoardOrientationObserverWrapper();
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0x6F42676E69727053;
  result[4] = 0xEB00000000647261;
  result[5] = PHVoicemailInboxListViewController.refreshTableHeaderView();
  result[6] = 0;
  result[2] = v5;
  static OrientationMonitorComposer.springBoardOrientationObserver = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned int v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static OrientationMonitorComposer.logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  if (one-time initialization token for springBoardOrientationObserver != -1) {
    swift_once();
  }
  uint64_t v5 = static OrientationMonitorComposer.springBoardOrientationObserver;
  type metadata accessor for AccelerometerOrientationMonitorWrapper();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100206210;
  *(void *)(v6 + 32) = 0xED0000726574656DLL;
  *(void *)(v6 + 40) = PHVoicemailInboxListViewController.refreshTableHeaderView();
  *(void *)(v6 + 48) = 0;
  swift_retain();
  AccelerometerOrientationMonitorWrapper.wrapped.getter();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrientationMonitor<SpringBoardOrientationObserverWrapper, AccelerometerOrientationMonitorWrapper>);
  swift_allocObject();
  uint64_t v7 = specialized OrientationMonitor.init(logger:lockSource:orientationSource:)((uint64_t)v3, v5, v6);
  swift_release();
  uint64_t result = swift_release();
  static OrientationMonitorComposer.shared = v7;
  return result;
}

{
  uint64_t result;

  type metadata accessor for VoicemailActor();
  uint64_t result = swift_initStaticObject();
  static VoicemailActor.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for ApplicationServicesActor();
  uint64_t result = swift_initStaticObject();
  static ApplicationServicesActor.shared = result;
  return result;
}

uint64_t OrientationMonitorComposer.compose()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

id OrientationMonitorComposer.compose_OBJC()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x50))();
  uint64_t v2 = (objc_class *)type metadata accessor for PHOrientationMonitor_OBJC();
  unsigned int v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped] = v1;
  v5.receiver = v3;
  v5.super_class = v2;
  return [super init];
}

id PHOrientationMonitor_OBJC.__allocating_init(_:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized PHOrientationMonitor_OBJC.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for PHOrientationMonitor_OBJC()
{
  return self;
}

id OrientationMonitorComposer.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OrientationMonitorComposer();
  return [super init];
}

id OrientationMonitorComposer.__deallocating_deinit()
{
  return OrientationMonitorComposer.__deallocating_deinit(type metadata accessor for OrientationMonitorComposer);
}

id PHOrientationMonitor_OBJC.deviceOrientation.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped) deviceOrientation];
}

id PHOrientationMonitor_OBJC.interfaceOrientation.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped) interfaceOrientation];
}

id PHOrientationMonitor_OBJC.lastValidInterfaceOrientation.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped) lastValidInterfaceOrientation];
}

id PHOrientationMonitor_OBJC.orientationEventsEnabled.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped) orientationEventsEnabled];
}

id PHOrientationMonitor_OBJC.orientationEventsEnabled.setter(char a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped) setOrientationEventsEnabled:a1 & 1];
}

id (*PHOrientationMonitor_OBJC.orientationEventsEnabled.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = [*(id *)(v1 + v2) orientationEventsEnabled];
  return PHOrientationMonitor_OBJC.orientationEventsEnabled.modify;
}

id PHOrientationMonitor_OBJC.orientationEventsEnabled.modify(uint64_t a1)
{
  return [*(id *)(*(void *)a1 + *(void *)(a1 + 8)) setOrientationEventsEnabled:*(unsigned __int8 *)(a1 + 16)];
}

id PHOrientationMonitor_OBJC.init(_:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized PHOrientationMonitor_OBJC.init(_:)(a1, v1);
}

uint64_t UIInterfaceOrientation.init(_:default:)(uint64_t result, uint64_t a2)
{
  if ((unint64_t)(result - 1) >= 4) {
    return a2;
  }
  return result;
}

void PHOrientationMonitor_OBJC.init()()
{
}

id PHOrientationMonitor_OBJC.__deallocating_deinit()
{
  return OrientationMonitorComposer.__deallocating_deinit(type metadata accessor for PHOrientationMonitor_OBJC);
}

id OrientationMonitorComposer.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

void specialized OrientationMonitor.isOrientationLocked.didset(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  swift_beginAccess();
  if (v2[40] != v3)
  {
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 8) = 2080;
      uint64_t v7 = *(void *)&v2[*(void *)(*(void *)v2 + 168)];
      swift_release();
      uint64_t v8 = v7 - 1;
      unint64_t v9 = 0xE800000000000000;
      uint64_t v10 = 0x7469617274726F70;
      switch(v8)
      {
        case 0:
          break;
        case 1:
          unint64_t v9 = 0x800000010023F420;
          uint64_t v10 = 0xD000000000000012;
          break;
        case 2:
          unint64_t v9 = 0xED00007466654C65;
          goto LABEL_9;
        case 3:
          unint64_t v9 = 0xEE00746867695265;
LABEL_9:
          uint64_t v10 = 0x70616373646E616CLL;
          break;
        case 4:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x705565636166;
          break;
        case 5:
          uint64_t v10 = 0x6E776F4465636166;
          break;
        default:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x6E776F6E6B6E75;
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "set orientation locked: %{BOOL}d to orientation: %s", (uint8_t *)v6, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if ((v2[40] & 1) == 0)
    {
      id v11 = [self defaultCenter];
      if (one-time initialization token for inCallOrientationMonitorEvent != -1) {
        swift_once();
      }
      uint64_t v12 = static NSNotificationName.inCallOrientationMonitorEvent;
      unint64_t v13 = OrientationMonitor.notificationInfo.getter();
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v11 postNotificationName:v12 object:0 userInfo:isa];
    }
  }
}

unint64_t OrientationMonitor.notificationInfo.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSNumber)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100206220;
  *(void *)(inited + 32) = 0xD00000000000001FLL;
  *(void *)(inited + 40) = 0x800000010023F440;
  (*(void (**)(void))(*(void *)v0 + 232))();
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0xD000000000000023;
  *(void *)(inited + 64) = 0x800000010023F460;
  (*(void (**)(void))(*(void *)v0 + 224))();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 80) = 0xD000000000000020;
  *(void *)(inited + 88) = 0x800000010023F490;
  (*(void (**)(void))(*(void *)v0 + 200))();
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

void specialized closure #1 in OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 208))(a1);
    int v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000010023F4C0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v6 = a1 - 1;
      unint64_t v7 = 0xE800000000000000;
      uint64_t v8 = 0x7469617274726F70;
      switch(v6)
      {
        case 0:
          break;
        case 1:
          unint64_t v7 = 0x800000010023F420;
          uint64_t v8 = 0xD000000000000012;
          break;
        case 2:
          unint64_t v7 = 0xED00007466654C65;
          goto LABEL_8;
        case 3:
          unint64_t v7 = 0xEE00746867695265;
LABEL_8:
          uint64_t v8 = 0x70616373646E616CLL;
          break;
        case 4:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x705565636166;
          break;
        case 5:
          uint64_t v8 = 0x6E776F4465636166;
          break;
        default:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x6E776F6E6B6E75;
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "posting %s for orientation: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v9 = [self defaultCenter];
    if (one-time initialization token for inCallOrientationMonitorEvent != -1) {
      swift_once();
    }
    uint64_t v10 = static NSNotificationName.inCallOrientationMonitorEvent;
    unint64_t v11 = OrientationMonitor.notificationInfo.getter();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 postNotificationName:v10 object:0 userInfo:isa];
    swift_release();
  }
}

uint64_t specialized closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:)(char a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int v3 = (unsigned char *)result;
    if (a1)
    {
      swift_beginAccess();
      char v12 = v3[40];
      v3[40] = 0;
LABEL_36:
      specialized OrientationMonitor.isOrientationLocked.didset(v12);
      return swift_release();
    }
    swift_beginAccess();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PHCFNotifyObserver<UIDeviceOrientation>);
    swift_initStaticObject();
    uint64_t v4 = specialized PHCFNotifyObserver.getCurrentValue()();
    swift_release();
    id v5 = [self currentDevice];
    id v6 = [v5 userInterfaceIdiom];

    if (v6 == (id)1)
    {
      unint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v7, v8))
      {
        id v9 = (uint8_t *)swift_slowAlloc();
        v27[0] = swift_slowAlloc();
        *(_DWORD *)id v9 = 136315138;
        uint64_t v10 = 0x7469617274726F70;
        unint64_t v11 = 0xE800000000000000;
        switch(v4)
        {
          case 1:
            break;
          case 2:
            unint64_t v11 = 0x800000010023F420;
            uint64_t v10 = 0xD000000000000012;
            break;
          case 3:
            uint64_t v10 = 0x70616373646E616CLL;
            unint64_t v11 = 0xED00007466654C65;
            break;
          case 4:
            uint64_t v10 = 0x70616373646E616CLL;
            unint64_t v11 = 0xEE00746867695265;
            break;
          case 5:
            unint64_t v11 = 0xE600000000000000;
            uint64_t v10 = 0x705565636166;
            break;
          case 6:
            uint64_t v10 = 0x6E776F4465636166;
            break;
          default:
            unint64_t v11 = 0xE700000000000000;
            uint64_t v10 = 0x6E776F6E6B6E75;
            break;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "SpringBoardOrientationLockChangedNotification: SpringBoard is locked to %s", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      *(void *)&v3[*(void *)(*(void *)v3 + 168)] = v4;
      if ((unint64_t)(v4 - 1) > 3) {
        goto LABEL_35;
      }
    }
    else
    {
      swift_retain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = 0x7469617274726F70;
        uint64_t v16 = swift_slowAlloc();
        v27[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315394;
        unint64_t v17 = 0xE800000000000000;
        uint64_t v18 = 0x7469617274726F70;
        switch(v4)
        {
          case 1:
            break;
          case 2:
            unint64_t v17 = 0x800000010023F420;
            uint64_t v18 = 0xD000000000000012;
            break;
          case 3:
            uint64_t v18 = 0x70616373646E616CLL;
            unint64_t v17 = 0xED00007466654C65;
            break;
          case 4:
            uint64_t v18 = 0x70616373646E616CLL;
            unint64_t v17 = 0xEE00746867695265;
            break;
          case 5:
            unint64_t v17 = 0xE600000000000000;
            uint64_t v18 = 0x705565636166;
            break;
          case 6:
            uint64_t v18 = 0x6E776F4465636166;
            break;
          default:
            unint64_t v17 = 0xE700000000000000;
            uint64_t v18 = 0x6E776F6E6B6E75;
            break;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2080;
        os_log_type_t v19 = &v3[*(void *)(*(void *)v3 + 160)];
        swift_beginAccess();
        uint64_t v20 = *(uint64_t (**)(uint64_t))(**(void **)v19 + 152);
        uint64_t v21 = swift_retain();
        uint64_t v22 = v20(v21);
        swift_release();
        swift_release();
        unint64_t v23 = 0xE800000000000000;
        switch(v22)
        {
          case 1:
            break;
          case 2:
            unint64_t v23 = 0x800000010023F420;
            uint64_t v15 = 0xD000000000000012;
            break;
          case 3:
            uint64_t v15 = 0x70616373646E616CLL;
            unint64_t v23 = 0xED00007466654C65;
            break;
          case 4:
            uint64_t v15 = 0x70616373646E616CLL;
            unint64_t v23 = 0xEE00746867695265;
            break;
          case 5:
            unint64_t v23 = 0xE600000000000000;
            uint64_t v15 = 0x705565636166;
            break;
          case 6:
            uint64_t v15 = 0x6E776F4465636166;
            break;
          default:
            unint64_t v23 = 0xE700000000000000;
            uint64_t v15 = 0x6E776F6E6B6E75;
            break;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v23, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "SpringBoardOrientationLockChangedNotification: SpringBoard is locked to %s, but using %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      unint64_t v24 = &v3[*(void *)(*(void *)v3 + 160)];
      swift_beginAccess();
      id v25 = *(uint64_t (**)(uint64_t))(**(void **)v24 + 152);
      uint64_t v26 = swift_retain();
      uint64_t v4 = v25(v26);
      swift_release();
      *(void *)&v3[*(void *)(*(void *)v3 + 168)] = v4;
      if ((unint64_t)(v4 - 1) >= 4) {
        goto LABEL_35;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 240))(v4);
LABEL_35:
    swift_beginAccess();
    char v12 = v3[40];
    v3[40] = 1;
    goto LABEL_36;
  }
  return result;
}

void specialized OrientationMonitor.updateCachedOrientationValues()()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 160)];
  swift_beginAccess();
  int v3 = *(uint64_t (**)(uint64_t))(**(void **)v2 + 152);
  uint64_t v4 = swift_retain();
  uint64_t v5 = v3(v4);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 208))(v5);
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PHCFNotifyObserver<Bool>);
  swift_initStaticObject();
  LOBYTE(v2) = specialized PHCFNotifyObserver.getCurrentValue()();
  swift_release();
  if (v2)
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PHCFNotifyObserver<UIDeviceOrientation>);
    swift_initStaticObject();
    uint64_t v6 = specialized PHCFNotifyObserver.getCurrentValue()();
    swift_release();
    *(void *)&v1[*(void *)(*(void *)v1 + 168)] = v6;
    if ((unint64_t)(v6 - 1) <= 3) {
      (*(void (**)(uint64_t))(*(void *)v1 + 240))(v6);
    }
    swift_beginAccess();
    char v7 = v1[40];
    v1[40] = 1;
    specialized OrientationMonitor.isOrientationLocked.didset(v7);
  }
}

id specialized PHOrientationMonitor_OBJC.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = (objc_class *)type metadata accessor for PHOrientationMonitor_OBJC();
  int v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped] = a1;
  v5.receiver = v3;
  v5.super_class = v2;
  return [super init];
}

uint64_t type metadata accessor for OrientationMonitorComposer()
{
  return self;
}

id specialized PHOrientationMonitor_OBJC.init(_:)(uint64_t a1, char *a2)
{
  *(void *)&a2[OBJC_IVAR____TtC11MobilePhone25PHOrientationMonitor_OBJC_wrapped] = a1;
  v3.receiver = a2;
  v3.super_class = (Class)type metadata accessor for PHOrientationMonitor_OBJC();
  return [super init];
}

BOOL UIDeviceOrientationIsValidInterfaceOrientation(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

uint64_t sub_10010CCA0@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10010CD00(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x90))(*a1);
}

uint64_t specialized OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = 0;
  *(void *)(v4 + *(void *)(*(void *)v4 + 168)) = 0;
  uint64_t v8 = v4 + direct field offset for OrientationMonitor.logger;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  unint64_t v11 = (void *)(v4 + *(void *)(*(void *)v4 + 152));
  void *v11 = a2;
  uint64_t v12 = v4 + *(void *)(*(void *)v4 + 160);
  *(void *)uint64_t v12 = a3;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  os_log_type_t v14 = *(void (**)(void (*)(uint64_t), uint64_t))(**(void **)v12 + 136);
  swift_retain();
  swift_retain();
  swift_retain();
  v14(partial apply for specialized closure #1 in OrientationMonitor.init(logger:lockSource:orientationSource:), v13);
  swift_endAccess();
  swift_release();
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  uint64_t v16 = (void *)*v11;
  swift_beginAccess();
  v16[5] = partial apply for specialized closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:);
  v16[6] = v15;
  swift_retain_n();
  swift_release();
  uint64_t v17 = v16[2];
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v19 = (uint64_t (**)(uint64_t, char))(v17
                                               + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  swift_beginAccess();
  *os_log_type_t v19 = partial apply for closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didset;
  v19[1] = (uint64_t (*)(uint64_t, char))v18;
  swift_endAccess();
  swift_release_n();
  swift_release();
  specialized OrientationMonitor.updateCachedOrientationValues()();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return v4;
}

uint64_t sub_10010D030()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for specialized closure #1 in OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1)
{
}

uint64_t partial apply for specialized closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:)(char a1)
{
  return specialized closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:)(a1 & 1);
}

uint64_t partial apply for closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didset(uint64_t a1, char a2)
{
  return closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didset(a1, a2 & 1);
}

id FTTranscriptionMessage.attributedText.getter()
{
  Transcript.text.getter();
  id v0 = objc_allocWithZone((Class)NSAttributedString);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

uint64_t FTTranscriptionMessage.text.getter()
{
  return Transcript.text.getter();
}

uint64_t FTTranscriptionMessage.confidenceRating.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidenceRating);
}

id FTTranscriptionMessage.__allocating_init(transcriptData:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidenceRating] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidence] = 0x3FF0000000000000;
  uint64_t v4 = &v3[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_transcriptData];
  uint64_t v5 = type metadata accessor for Transcript();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v3;
  v9.super_class = v1;
  [super init];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

id FTTranscriptionMessage.init(transcriptData:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidenceRating] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidence] = 0x3FF0000000000000;
  uint64_t v4 = &v1[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_transcriptData];
  uint64_t v5 = type metadata accessor for Transcript();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v1;
  v9.super_class = ObjectType;
  [super init];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

void FTTranscriptionMessage.init()()
{
}

id MPRTTTranscriptionMessage.attributedText.getter()
{
  id v1 = [v0 text];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v2 = objc_allocWithZone((Class)NSAttributedString);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithString:v3];

  return v4;
}

uint64_t MPRTTTranscriptionMessage.isEmpty.getter()
{
  uint64_t v1 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [v0 conversation];
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v5;
  uint64_t result = (uint64_t)[v5 utterances];
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v8 = (id)result;
  NSArray.makeIterator()();

  lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  if (!v13)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);

    return 1;
  }
  while (1)
  {
    outlined init with take of Any(&v12, v11);
    outlined init with copy of Any((uint64_t)v11, (uint64_t)v10);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for RTTUtterance);
    if (swift_dynamicCast()) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
    dispatch thunk of IteratorProtocol.next()();
    if (!v13) {
      goto LABEL_6;
    }
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);

  return 0;
}

uint64_t MPRTTTranscriptionMessage.text.getter()
{
  id v1 = [v0 makeTranscriptMessage];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

BOOL static RecentCallIconView.IconType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void RecentCallIconView.IconType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int RecentCallIconView.IconType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

id FTMessage.ftMessage.getter()
{
  return *(id *)(v0 + 16);
}

id FTMessage.id.getter()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - v5;
  dispatch thunk of Message.recordUUID.getter();
  id v7 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v7(v4, v6, v0);
  id v8 = (objc_class *)type metadata accessor for MessageID(0);
  objc_super v9 = (char *)objc_allocWithZone(v8);
  v7(&v9[OBJC_IVAR___MPMessageID_value], v4, v0);
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v13.receiver = v9;
  v13.super_class = v8;
  [super init];
  unint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v6, v0);
  return v10;
}

uint64_t FTMessage.provider.getter()
{
  return dispatch thunk of Message.provider.getter();
}

uint64_t FTMessage.callUUID.getter@<X0>(uint64_t a1@<X8>)
{
  dispatch thunk of Message.callUUID.getter();
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

id FTMessage.senderHandle.getter()
{
  if (dispatch thunk of Message.isFromUnknown.getter()) {
    return 0;
  }
  dispatch thunk of Message.from.getter();
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v0 = [v1 normalizedHandleWithDestinationID:v2];

  return v0;
}

uint64_t FTMessage.senderISOCountryCode.getter()
{
  return FTMessage.senderDestinationID.getter((SEL *)&selRef_isoCountryCode);
}

uint64_t FTMessage.receiverISOCountryCode.getter()
{
  return FTMessage.receiverDestinationID.getter((SEL *)&selRef_isoCountryCode);
}

uint64_t FTMessage.callbackDestinationID.getter()
{
  if (dispatch thunk of Message.isFromUnknown.getter()) {
    return 0;
  }
  else {
    return dispatch thunk of Message.from.getter();
  }
}

uint64_t FTMessage.dirtyFolder.getter()
{
  if (*(unsigned char *)(v0 + 32) != 1) {
    return *(void *)(v0 + 24);
  }
  int v1 = (unsigned __int16)dispatch thunk of Message.mailboxType.getter();
  uint64_t v2 = 1;
  if (v1 == 2) {
    uint64_t v2 = 2;
  }
  if (v1 == 1) {
    uint64_t result = 3;
  }
  else {
    uint64_t result = v2;
  }
  *(void *)(v0 + 24) = result;
  *(unsigned char *)(v0 + 32) = 0;
  return result;
}

uint64_t MessageFolder.init(_:)(__int16 a1)
{
  uint64_t v1 = 1;
  if (a1 == 2) {
    uint64_t v1 = 2;
  }
  if (a1 == 1) {
    return 3;
  }
  else {
    return v1;
  }
}

uint64_t FTMessage.folder.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(void *)(v1 + 24) = result;
  *(unsigned char *)(v1 + 32) = 0;
  return result;
}

uint64_t *(*FTMessage.folder.modify(uint64_t *a1))(uint64_t *result)
{
  uint64_t v3 = OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty;
  a1[1] = v1;
  a1[2] = v3;
  if (*(unsigned char *)(v1 + v3) == 1)
  {
    uint64_t v4 = FTMessage.dirtyFolder.getter();
  }
  else
  {
    int v5 = (unsigned __int16)dispatch thunk of Message.mailboxType.getter();
    uint64_t v6 = 1;
    if (v5 == 2) {
      uint64_t v6 = 2;
    }
    if (v5 == 1) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = v6;
    }
  }
  *a1 = v4;
  return FTMessage.folder.modify;
}

uint64_t *FTMessage.folder.modify(uint64_t *result)
{
  uint64_t v1 = result[1];
  uint64_t v2 = *result;
  *(unsigned char *)(v1 + result[2]) = 1;
  *(void *)(v1 + 24) = v2;
  *(unsigned char *)(v1 + 32) = 0;
  return result;
}

uint64_t FTMessage.dirtyRead.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 33);
  if (v1 == 2)
  {
    char v2 = dispatch thunk of Message.isRead.getter();
    *(unsigned char *)(v0 + 33) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t FTMessage.read.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) != 1) {
    return dispatch thunk of Message.isRead.getter() & 1;
  }

  return FTMessage.dirtyRead.getter();
}

uint64_t FTMessage.read.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t key path getter for FTMessage.read : FTMessage@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(*a1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) == 1) {
    uint64_t result = FTMessage.dirtyRead.getter();
  }
  else {
    uint64_t result = dispatch thunk of Message.isRead.getter();
  }
  *a2 = result & 1;
  return result;
}

uint64_t *(*FTMessage.read.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v3 = OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  if (*(unsigned char *)(v1 + v3) == 1) {
    char v4 = FTMessage.dirtyRead.getter();
  }
  else {
    char v4 = dispatch thunk of Message.isRead.getter();
  }
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return FTMessage.read.modify;
}

uint64_t *FTMessage.read.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  char v2 = *((unsigned char *)result + 16);
  *(unsigned char *)(v1 + result[1]) = 1;
  *(unsigned char *)(v1 + 33) = v2;
  return result;
}

uint64_t FTMessage.date.getter()
{
  return dispatch thunk of Message.dateCreated.getter();
}

void FTMessage.isTranscriptionAvailable.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (FTMessage.messageSource.getter() == 2
    && (dispatch thunk of Message.isRTT.getter() & 1) != 0
    && TUCallScreeningRTTEnabled())
  {
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) == 1
      && FTMessage.transcript.getter())
    {
      self;
      id v7 = (void *)swift_dynamicCastObjCClass();
      if (v7)
      {
        id v8 = [v7 conversation];
        swift_unknownObjectRelease();
        if (v8)
        {
          id v9 = [v8 utterances];

          if (v9)
          {
            [v9 count];
          }
          else
          {
            __break(1u);
          }
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    int v10 = FTMessage.messageSource.getter();
    if (v10)
    {
      if (v10 == 1) {
        return;
      }
      FTMessage.transcriptData.getter((uint64_t)v6);
      uint64_t v14 = type metadata accessor for Transcript();
      (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v6, 1, v14);
      long long v12 = &demangling cache variable for type metadata for Transcript?;
      uint64_t v13 = (uint64_t)v6;
    }
    else
    {
      FTMessage.transcriptURL.getter((uint64_t)v3);
      uint64_t v11 = type metadata accessor for URL();
      (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v3, 1, v11);
      long long v12 = &demangling cache variable for type metadata for URL?;
      uint64_t v13 = (uint64_t)v3;
    }
    outlined destroy of Locale?(v13, v12);
  }
}

uint64_t FTMessage.messageSource.getter()
{
  unsigned __int16 v0 = dispatch thunk of Message.messageType.getter();
  if (v0 < 3u) {
    return 0x10002u >> (8 * v0);
  }
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhone);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    dispatch thunk of Message.messageType.getter();
    uint64_t v6 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unexpected Message type %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return 0;
}

uint64_t FTMessage.isRTT.getter()
{
  return dispatch thunk of Message.isRTT.getter() & 1;
}

uint64_t FTMessage.transcript.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = (uint64_t)closure #1 in FTMessage.transcript.getter(v0);
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_unknownObjectRetain();
    outlined consume of TranscriptMessage??(v4);
  }
  outlined copy of TranscriptMessage??(v2);
  return v3;
}

uint64_t FTMessage.transcriptData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript??);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData;
  swift_beginAccess();
  outlined init with copy of (String, Any)(v9, (uint64_t)v8, &demangling cache variable for type metadata for Transcript??);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v8, a1, &demangling cache variable for type metadata for Transcript?);
  }
  outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for Transcript??);
  dispatch thunk of Message.transcript.getter();
  outlined init with copy of (String, Any)(a1, (uint64_t)v6, &demangling cache variable for type metadata for Transcript?);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of Transcript??((uint64_t)v6, v9, &demangling cache variable for type metadata for Transcript??);
  return swift_endAccess();
}

uint64_t FTMessage.transcriptURL.getter@<X0>(uint64_t a1@<X8>)
{
  return FTMessage.transcriptURL.getter(&OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, (uint64_t (*)(uint64_t))&dispatch thunk of Message.sandboxTranscriptFile.getter, a1);
}

uint64_t FTMessage.duration.getter()
{
  return dispatch thunk of Message.duration.getter();
}

BOOL FTMessage.transcriptionAttempted.getter()
{
  dispatch thunk of Message.transcriptionStatus.getter();
  int v0 = (unsigned __int16)TranscriptionStatus.rawValue.getter();
  return v0 != (unsigned __int16)TranscriptionStatus.rawValue.getter();
}

BOOL FTMessage.isBlocked.getter()
{
  dispatch thunk of Message.mailboxType.getter();
  int v0 = (unsigned __int16)MailboxType.rawValue.getter();
  return v0 == (unsigned __int16)MailboxType.rawValue.getter();
}

uint64_t FTMessage.isDeleted.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 34);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 34) = 0;
  return result;
}

uint64_t FTMessage.isDeleted.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(unsigned char *)(v1 + 34) = result;
  return result;
}

uint64_t *(*FTMessage.isDeleted.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = FTMessage.isDeleted.getter() & 1;
  return FTMessage.isDeleted.modify;
}

uint64_t *FTMessage.isDeleted.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  char v2 = *((unsigned char *)result + 8);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(unsigned char *)(v1 + 34) = v2;
  return result;
}

uint64_t FTMessage.isSensitive.getter()
{
  return dispatch thunk of Message.isSensitive.getter() & 1;
}

uint64_t FTMessage.dataURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL;
  swift_beginAccess();
  outlined init with copy of (String, Any)(v16, (uint64_t)v15, &demangling cache variable for type metadata for URL??);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v15, 1, v3) == 1)
  {
    outlined destroy of Locale?((uint64_t)v15, &demangling cache variable for type metadata for URL??);
    uint64_t v17 = (void *)dispatch thunk of Message.sandboxMessageFile.getter();
    uint64_t v18 = (void *)dispatch thunk of SandboxExtendedURL.sandboxResolvedURL.getter();

    if (v18)
    {
      uint64_t v28 = a1;
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v27 = *(void *)(v19 - 8);
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v20(v7, 1, 1, v19);
      lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))&type metadata accessor for URL);
      dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

      uint64_t v21 = v20;
      uint64_t v22 = v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v19) == 1)
      {
        unint64_t v23 = v9;
        uint64_t v24 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v9, v7, v19);
        unint64_t v23 = v9;
        uint64_t v24 = 0;
      }
      v21(v23, v24, 1, v19);
      a1 = v28;
    }
    else
    {
      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 1, 1, v25);
    }
    outlined init with copy of (String, Any)((uint64_t)v9, (uint64_t)v13, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    swift_beginAccess();
    outlined assign with take of Transcript??((uint64_t)v13, v16, &demangling cache variable for type metadata for URL??);
    swift_endAccess();
  }
  else
  {
    uint64_t v9 = v15;
  }
  return outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v9, a1, &demangling cache variable for type metadata for URL?);
}

uint64_t FTMessage.dataURL.setter(uint64_t a1)
{
  return FTMessage.dataURL.setter(a1, &demangling cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL);
}

void (*FTMessage.dataURL.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  FTMessage.dataURL.getter((uint64_t)v8);
  return FTMessage.dataURL.modify;
}

void FTMessage.dataURL.modify(uint64_t a1, char a2)
{
}

id @objc FTMessage.dataURL.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_retain();
  a3(v7);
  swift_release();
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    uint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }

  return v11;
}

uint64_t FTMessage.thumbnailURL.getter@<X0>(uint64_t a1@<X8>)
{
  return FTMessage.transcriptURL.getter(&OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, (uint64_t (*)(uint64_t))&dispatch thunk of Message.sandboxThumbnailFile.getter, a1);
}

uint64_t FTMessage.transcriptURL.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = v3 + *a1;
  swift_beginAccess();
  outlined init with copy of (String, Any)(v19, (uint64_t)v18, &demangling cache variable for type metadata for URL??);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6) == 1)
  {
    uint64_t v20 = outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for URL??);
    uint64_t v21 = a2(v20);
    if (v21
      && (uint64_t v22 = (void *)v21,
          unint64_t v23 = (void *)dispatch thunk of SandboxExtendedURL.sandboxResolvedURL.getter(),
          v22,
          v23))
    {
      uint64_t v24 = type metadata accessor for URL();
      uint64_t v25 = *(void *)(v24 - 8);
      char v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
      v32(v10, 1, 1, v24);
      lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))&type metadata accessor for URL);
      dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

      int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24);
      uint64_t v27 = v33;
      if (v26 == 1)
      {
        uint64_t v28 = v12;
        uint64_t v29 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v12, v10, v24);
        uint64_t v28 = v12;
        uint64_t v29 = 0;
      }
      v32(v28, v29, 1, v24);
    }
    else
    {
      uint64_t v30 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 1, 1, v30);
      uint64_t v27 = v33;
    }
    outlined init with copy of (String, Any)((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
    swift_beginAccess();
    outlined assign with take of Transcript??((uint64_t)v16, v19, &demangling cache variable for type metadata for URL??);
    swift_endAccess();
  }
  else
  {
    uint64_t v12 = v18;
    uint64_t v27 = v33;
  }
  return outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v12, v27, &demangling cache variable for type metadata for URL?);
}

uint64_t @objc FTMessage.dataURL.setter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  }
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v13, (uint64_t)v9, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  uint64_t v16 = a1 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Transcript??((uint64_t)v9, v16, &demangling cache variable for type metadata for URL??);
  swift_endAccess();
  return swift_release();
}

uint64_t FTMessage.thumbnailURL.setter(uint64_t a1)
{
  return FTMessage.dataURL.setter(a1, &demangling cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL);
}

uint64_t FTMessage.dataURL.setter(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>(a1, (uint64_t)v11, a3);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  uint64_t v13 = v4 + *a4;
  swift_beginAccess();
  outlined assign with take of Transcript??((uint64_t)v11, v13, a2);
  return swift_endAccess();
}

uint64_t key path setter for FTMessage.dataURL : FTMessage(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(a1, (uint64_t)v18, a6);
  uint64_t v19 = *a2;
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v18, (uint64_t)v14, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  uint64_t v20 = v19 + *a7;
  swift_beginAccess();
  outlined assign with take of Transcript??((uint64_t)v14, v20, a5);
  return swift_endAccess();
}

void (*FTMessage.thumbnailURL.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  FTMessage.thumbnailURL.getter((uint64_t)v8);
  return FTMessage.thumbnailURL.modify;
}

void FTMessage.thumbnailURL.modify(uint64_t a1, char a2)
{
}

void FTMessage.dataURL.modify(uint64_t a1, char a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *(void **)a1;
  uint64_t v10 = *(void **)(*(void *)a1 + 80);
  uint64_t v9 = *(void **)(*(void *)a1 + 88);
  if (a2)
  {
    uint64_t v12 = v8[8];
    uint64_t v11 = v8[9];
    uint64_t v14 = v8[6];
    uint64_t v13 = (void *)v8[7];
    outlined init with copy of (String, Any)(v8[11], v8[10], a3);
    outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v10, (uint64_t)v13, a3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
    uint64_t v15 = v14 + *a4;
    swift_beginAccess();
    outlined assign with take of Transcript??((uint64_t)v13, v15, a5);
    swift_endAccess();
    outlined destroy of Locale?((uint64_t)v9, a3);
  }
  else
  {
    uint64_t v16 = v8[8];
    uint64_t v17 = v8[9];
    uint64_t v18 = v8[6];
    uint64_t v13 = (void *)v8[7];
    outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>(v8[11], (uint64_t)v13, a3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    uint64_t v19 = v18 + *a4;
    swift_beginAccess();
    outlined assign with take of Transcript??((uint64_t)v13, v19, a5);
    swift_endAccess();
  }
  free(v9);
  free(v10);
  free(v13);

  free(v8);
}

uint64_t FTMessage.transcriptURL.setter(uint64_t a1)
{
  return FTMessage.dataURL.setter(a1, &demangling cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL);
}

void (*FTMessage.transcriptURL.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL??);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  FTMessage.transcriptURL.getter((uint64_t)v8);
  return FTMessage.transcriptURL.modify;
}

void FTMessage.transcriptURL.modify(uint64_t a1, char a2)
{
}

uint64_t FTMessage.transcriptData.setter(uint64_t a1)
{
  return FTMessage.dataURL.setter(a1, &demangling cache variable for type metadata for Transcript??, &demangling cache variable for type metadata for Transcript?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData);
}

void (*FTMessage.transcriptData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript??);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  FTMessage.transcriptData.getter((uint64_t)v8);
  return FTMessage.transcriptData.modify;
}

void FTMessage.transcriptData.modify(uint64_t a1, char a2)
{
}

uint64_t @objc FTMessage.isSensitive.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  LOBYTE(a3) = a3(v4);
  swift_release();
  return a3 & 1;
}

uint64_t @objc FTMessage.isTranscriptionAvailable.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  LOBYTE(a3) = a3(v4);
  swift_release();
  return a3 & 1;
}

id FTMessage.isDataAvailable.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0 - 8);
  char v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  FTMessage.dataURL.getter((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of Locale?((uint64_t)v2, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    id v8 = [self defaultManager];
    URL.path.getter();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v7 = [v8 fileExistsAtPath:v9];

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

uint64_t FTMessage.transcript.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript);
  *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = a1;
  return outlined consume of TranscriptMessage??(v2);
}

id closure #1 in FTMessage.transcript.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v7 = (char *)&v44 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v50 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Transcript();
  uint64_t v48 = *(void *)(v14 - 8);
  uint64_t v49 = (char *)v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v47 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v46 = (char *)&v44 - v17;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1;
  int v22 = FTMessage.messageSource.getter();
  if (v22)
  {
    id v23 = 0;
    uint64_t v24 = v21;
    if (v22 != 1)
    {
      if ((dispatch thunk of Message.isRTT.getter() & 1) != 0 && TUCallScreeningRTTEnabled())
      {
        dispatch thunk of Message.callUUID.getter();
        id v25 = objc_allocWithZone((Class)MPRTTTranscriptionMessage);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v23 = [v25 initWithCallUUID:isa];

        (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v18);
      }
      else
      {
        FTMessage.transcriptData.getter((uint64_t)v13);
        uint64_t v30 = v48;
        uint64_t v29 = v49;
        if ((*(unsigned int (**)(char *, uint64_t, char *))(v48 + 48))(v13, 1, v49) == 1)
        {
          outlined destroy of Locale?((uint64_t)v13, &demangling cache variable for type metadata for Transcript?);
          id v23 = 0;
        }
        else
        {
          uint64_t v31 = v46;
          (*(void (**)(char *, char *, char *))(v30 + 32))(v46, v13, v29);
          char v32 = *(void (**)(char *, char *, char *))(v30 + 16);
          uint64_t v33 = v47;
          v32(v47, v31, v29);
          uint64_t v34 = (objc_class *)type metadata accessor for FTTranscriptionMessage(0);
          uint64_t v35 = (char *)objc_allocWithZone(v34);
          *(void *)&v35[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidenceRating] = 0;
          *(void *)&v35[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_confidence] = 0x3FF0000000000000;
          v32(&v35[OBJC_IVAR____TtC11MobilePhone22FTTranscriptionMessage_transcriptData], v33, v29);
          v51.receiver = v35;
          v51.super_class = v34;
          id v23 = [super init];
          unint64_t v36 = *(void (**)(char *, char *))(v30 + 8);
          v36(v33, v29);
          v36(v31, v29);
        }
      }
    }
  }
  else
  {
    uint64_t v27 = v10;
    uint64_t v49 = v5;
    FTMessage.transcriptURL.getter((uint64_t)v7);
    uint64_t v28 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v7, 1, v8) == 1)
    {
      outlined destroy of Locale?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
      id v23 = 0;
      uint64_t v24 = v21;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, v7, v8);
      uint64_t v37 = Data.init(contentsOf:options:)();
      unint64_t v39 = v38;
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for VMVoicemailTranscript);
      uint64_t v40 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      uint64_t v24 = a1;
      id v23 = (id)v40;
      if (v40)
      {
        uint64_t v42 = (objc_class *)type metadata accessor for VisualTranscriptionMessage();
        uint64_t v43 = (char *)objc_allocWithZone(v42);
        *(void *)&v43[OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript] = v23;
        v52.receiver = v43;
        v52.super_class = v42;
        id v23 = [super init];
        outlined consume of Data._Representation(v37, v39);
        (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v8);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
        outlined consume of Data._Representation(v37, v39);
      }
    }
  }
  *(unsigned char *)(v24 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) = 1;
  return v23;
}

uint64_t (*FTMessage.transcript.modify(uint64_t *a1))(void *a1, char a2)
{
  a1[1] = v1;
  *a1 = FTMessage.transcript.getter();
  return FTMessage.transcript.modify;
}

uint64_t FTMessage.transcript.modify(void *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript);
  *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    outlined consume of TranscriptMessage??(v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    return outlined consume of TranscriptMessage??(v3);
  }
}

uint64_t FTMessage.__allocating_init(ftMessage:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  FTMessage.init(ftMessage:)(a1);
  return v2;
}

uint64_t FTMessage.init(ftMessage:)(uint64_t a1)
{
  *(void *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 32) = 1;
  *(_WORD *)(v1 + 33) = 514;
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, 1, 1, v4);
  v5(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, 1, 1, v4);
  uint64_t v6 = v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = 1;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 0;
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t FTMessage.deinit()
{
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL, &demangling cache variable for type metadata for URL??);
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, &demangling cache variable for type metadata for URL??);
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, &demangling cache variable for type metadata for URL??);
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData, &demangling cache variable for type metadata for Transcript??);
  outlined consume of TranscriptMessage??(*(void *)(v0
                                                    + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript));
  return v0;
}

uint64_t FTMessage.__deallocating_deinit()
{
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL, &demangling cache variable for type metadata for URL??);
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, &demangling cache variable for type metadata for URL??);
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, &demangling cache variable for type metadata for URL??);
  outlined destroy of Locale?(v0 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData, &demangling cache variable for type metadata for Transcript??);
  outlined consume of TranscriptMessage??(*(void *)(v0
                                                    + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript));

  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall FTMessage.shouldBeMarkedAsRead(for:)(Swift::Double a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty))
  {
    if ((FTMessage.dirtyRead.getter() & 1) == 0) {
      goto LABEL_3;
    }
    return 0;
  }
  if (dispatch thunk of Message.isRead.getter()) {
    return 0;
  }
LABEL_3:
  if (a1 > 5.0) {
    return 1;
  }
  dispatch thunk of Message.duration.getter();
  return v4 / 3.0 < a1;
}

CNContact_optional __swiftcall FTMessage.getContact(using:with:)(CNContactStore using, Swift::OpaquePointer with)
{
  if (dispatch thunk of Message.isFromUnknown.getter()) {
    goto LABEL_9;
  }
  dispatch thunk of Message.from.getter();
  double v4 = self;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 normalizedHandleWithDestinationID:v5];

  if (!v6) {
    goto LABEL_9;
  }
  id v7 = [v6 normalizedValue];
  if (!v7)
  {

LABEL_9:
    uint64_t v15 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12) {
    goto LABEL_9;
  }
  dispatch thunk of Message.from.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = (objc_class *)[(objc_class *)using.super.isa contactForDestinationId:v13 keysToFetch:isa];

LABEL_10:
  uint64_t v16 = v15;
  result.value.super.Class isa = v16;
  result.is_nil = v3;
  return result;
}

Swift::String_optional __swiftcall FTMessage.getDisplayName(using:)(CNContactStore using)
{
  uint64_t v2 = dispatch thunk of Message.from.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002053A0;
  id v7 = self;
  *(void *)(v6 + 32) = [v7 descriptorForRequiredKeysForStyle:0];
  specialized Array._endMutation()();
  uint64_t v8 = (void *)FTMessage.getContact(using:with:)(using, (Swift::OpaquePointer)v6);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    uint64_t v9 = closure #1 in FTMessage.getDisplayName(using:)();
    unint64_t v11 = v12;
    goto LABEL_12;
  }
  if (([v8 isSuggested] & 1) == 0)
  {
    id v13 = [v7 stringFromContact:v8 style:0];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v15;

      goto LABEL_12;
    }

LABEL_11:
    uint64_t v9 = 0;
    unint64_t v11 = 0;
    goto LABEL_12;
  }
  uint64_t v9 = closure #1 in FTMessage.getDisplayName(using:)();
  unint64_t v11 = v10;

LABEL_12:
  uint64_t v16 = v9;
  uint64_t v17 = v11;
  result.value._object = v17;
  result.value._uint64_t countAndFlagsBits = v16;
  return result;
}

uint64_t closure #1 in FTMessage.getDisplayName(using:)()
{
  uint64_t v0 = self;
  dispatch thunk of Message.from.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 normalizedHandleWithDestinationID:v1];

  if (!v2) {
    return 0;
  }
  id v3 = [v2 normalizedValue];
  id v4 = [v2 isoCountryCode];
  id v5 = (id)TUFormattedPhoneNumber();

  if (!v5)
  {

    return 0;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t FTMessage.description.getter()
{
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v154);
  uint64_t v153 = (uint64_t)v146 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v151 = *(void *)(v2 - 8);
  uint64_t v152 = v2;
  __chkstk_darwin(v2);
  v150 = (char *)v146 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v149);
  v147 = (char *)v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)v146 - v10;
  uint64_t v158 = 0;
  unint64_t v159 = 0xE000000000000000;
  _StringGuts.grow(_:)(699);
  v12._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  uint64_t v148 = 0xD00000000000001ALL;
  v12._object = (void *)0x800000010023F5C0;
  String.append(_:)(v12);
  id v13 = *(id *)(v0 + 16);
  id v14 = [v13 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);

  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x3A6469202020200ALL;
  v19._object = (void *)0xE900000000000020;
  String.append(_:)(v19);
  dispatch thunk of Message.recordUUID.getter();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v20(v9, v11, v5);
  uint64_t v21 = (objc_class *)type metadata accessor for MessageID(0);
  int v22 = (char *)objc_allocWithZone(v21);
  v20(&v22[OBJC_IVAR___MPMessageID_value], v9, v5);
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v157.receiver = v22;
  v157.super_class = v21;
  id v23 = [super init];
  uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24(v9, v5);
  v24(v11, v5);
  id v25 = [v23 description];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);

  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0x6F7270202020200ALL;
  v30._object = (void *)0xEF203A7265646976;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = dispatch thunk of Message.provider.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0x6C6163202020200ALL;
  v32._object = (void *)0xEF203A444955556CLL;
  String.append(_:)(v32);
  uint64_t v33 = v147;
  dispatch thunk of Message.callUUID.getter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v33, 0, 1, v5);
  uint64_t v34 = v146[1];
  v35._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0xD000000000000012;
  v36._object = (void *)0x800000010023F5E0;
  String.append(_:)(v36);
  uint64_t v155 = FTMessage.messageType.getter();
  _print_unlocked<A, B>(_:_:)();
  v37._object = (void *)0x800000010023F600;
  v37._uint64_t countAndFlagsBits = v148;
  String.append(_:)(v37);
  uint64_t v155 = FTMessage.senderDestinationID.getter();
  uint64_t v156 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v39._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v40._object = (void *)0x800000010023F620;
  String.append(_:)(v40);
  uint64_t v155 = FTMessage.senderISOCountryCode.getter();
  uint64_t v156 = v41;
  v42._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x800000010023F640;
  v43._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v43);
  uint64_t v155 = FTMessage.receiverDestinationID.getter();
  uint64_t v156 = v44;
  v45._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v46._object = (void *)0x800000010023F660;
  String.append(_:)(v46);
  uint64_t v155 = FTMessage.receiverISOCountryCode.getter();
  uint64_t v156 = v47;
  v48._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._object = (void *)0x800000010023F680;
  v49._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v49);
  char v50 = dispatch thunk of Message.isFromUnknown.getter();
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if ((v50 & 1) == 0) {
    uint64_t v51 = dispatch thunk of Message.from.getter();
  }
  uint64_t v155 = v51;
  uint64_t v156 = v52;
  v53._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = 0xD000000000000012;
  v54._object = (void *)0x800000010023F6A0;
  String.append(_:)(v54);
  uint64_t v155 = FTMessage.dirtyFolder.getter();
  _print_unlocked<A, B>(_:_:)();
  v55._uint64_t countAndFlagsBits = 0x6C6F66202020200ALL;
  v55._object = (void *)0xED0000203A726564;
  String.append(_:)(v55);
  uint64_t v56 = OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty;
  if (*(unsigned char *)(v34 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) == 1)
  {
    uint64_t v57 = *(void *)(v34 + 24);
  }
  else
  {
    int v58 = (unsigned __int16)dispatch thunk of Message.mailboxType.getter();
    uint64_t v59 = 1;
    if (v58 == 2) {
      uint64_t v59 = 2;
    }
    BOOL v62 = v58 == 1;
    uint64_t v57 = 3;
    if (!v62) {
      uint64_t v57 = v59;
    }
  }
  uint64_t v155 = v57;
  _print_unlocked<A, B>(_:_:)();
  v60._object = (void *)0x800000010023F6C0;
  v60._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v60);
  char v61 = FTMessage.dirtyRead.getter();
  BOOL v62 = (v61 & 1) == 0;
  if (v61) {
    uint64_t v63 = 1702195828;
  }
  else {
    uint64_t v63 = 0x65736C6166;
  }
  if (v62) {
    unint64_t v64 = 0xE500000000000000;
  }
  else {
    unint64_t v64 = 0xE400000000000000;
  }
  unint64_t v65 = v64;
  String.append(_:)(*(Swift::String *)&v63);
  swift_bridgeObjectRelease();
  v66._uint64_t countAndFlagsBits = 0x616572202020200ALL;
  v66._object = (void *)0xEB00000000203A64;
  String.append(_:)(v66);
  int v67 = *(unsigned __int8 *)(v34 + v56);
  uint64_t v149 = v56;
  if (v67 == 1) {
    char v68 = *(unsigned char *)(v34 + 33) & 1;
  }
  else {
    char v68 = dispatch thunk of Message.isRead.getter();
  }
  BOOL v69 = (v68 & 1) == 0;
  if (v68) {
    uint64_t v70 = 1702195828;
  }
  else {
    uint64_t v70 = 0x65736C6166;
  }
  if (v69) {
    unint64_t v71 = 0xE500000000000000;
  }
  else {
    unint64_t v71 = 0xE400000000000000;
  }
  unint64_t v72 = v71;
  String.append(_:)(*(Swift::String *)&v70);
  swift_bridgeObjectRelease();
  v73._object = (void *)0xEB00000000203A65;
  v73._uint64_t countAndFlagsBits = 0x746164202020200ALL;
  String.append(_:)(v73);
  long long v74 = v150;
  dispatch thunk of Message.dateCreated.getter();
  lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(&lazy protocol witness table cache variable for type Date and conformance Date, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v75 = v152;
  v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v151 + 8))(v74, v75);
  v77._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v77._object = (void *)0x800000010023F6E0;
  String.append(_:)(v77);
  FTMessage.isTranscriptionAvailable.getter();
  BOOL v79 = (v78 & 1) == 0;
  if (v78) {
    uint64_t v80 = 1702195828;
  }
  else {
    uint64_t v80 = 0x65736C6166;
  }
  if (v79) {
    unint64_t v81 = 0xE500000000000000;
  }
  else {
    unint64_t v81 = 0xE400000000000000;
  }
  unint64_t v82 = v81;
  String.append(_:)(*(Swift::String *)&v80);
  swift_bridgeObjectRelease();
  v83._uint64_t countAndFlagsBits = 0x727564202020200ALL;
  v83._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v83);
  dispatch thunk of Message.duration.getter();
  Double.write<A>(to:)();
  v84._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v84._object = (void *)0x800000010023F700;
  String.append(_:)(v84);
  v85._uint64_t countAndFlagsBits = 0x65736C6166;
  v85._object = (void *)0xE500000000000000;
  String.append(_:)(v85);
  v86._uint64_t countAndFlagsBits = 0xD000000000000015;
  v86._object = (void *)0x800000010023F720;
  String.append(_:)(v86);
  v87._uint64_t countAndFlagsBits = 0x65736C6166;
  v87._object = (void *)0xE500000000000000;
  String.append(_:)(v87);
  v88._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v88._object = (void *)0x800000010023F740;
  String.append(_:)(v88);
  dispatch thunk of Message.transcriptionStatus.getter();
  int v89 = (unsigned __int16)TranscriptionStatus.rawValue.getter();
  unsigned __int16 v90 = TranscriptionStatus.rawValue.getter();
  BOOL v91 = v89 == v90;
  if (v89 == v90) {
    uint64_t v92 = 0x65736C6166;
  }
  else {
    uint64_t v92 = 1702195828;
  }
  if (v91) {
    unint64_t v93 = 0xE500000000000000;
  }
  else {
    unint64_t v93 = 0xE400000000000000;
  }
  unint64_t v94 = v93;
  String.append(_:)(*(Swift::String *)&v92);
  swift_bridgeObjectRelease();
  v95._object = (void *)0x800000010023F760;
  v95._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v95);
  dispatch thunk of Message.mailboxType.getter();
  int v96 = (unsigned __int16)MailboxType.rawValue.getter();
  unsigned __int16 v97 = MailboxType.rawValue.getter();
  BOOL v98 = v96 == v97;
  if (v96 == v97) {
    uint64_t v99 = 1702195828;
  }
  else {
    uint64_t v99 = 0x65736C6166;
  }
  if (v98) {
    unint64_t v100 = 0xE400000000000000;
  }
  else {
    unint64_t v100 = 0xE500000000000000;
  }
  unint64_t v101 = v100;
  String.append(_:)(*(Swift::String *)&v99);
  swift_bridgeObjectRelease();
  v102._object = (void *)0x800000010023F780;
  v102._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v102);
  char v103 = FTMessage.isDeleted.getter();
  BOOL v104 = (v103 & 1) == 0;
  if (v103) {
    uint64_t v105 = 1702195828;
  }
  else {
    uint64_t v105 = 0x65736C6166;
  }
  if (v104) {
    unint64_t v106 = 0xE500000000000000;
  }
  else {
    unint64_t v106 = 0xE400000000000000;
  }
  unint64_t v107 = v106;
  String.append(_:)(*(Swift::String *)&v105);
  swift_bridgeObjectRelease();
  v108._uint64_t countAndFlagsBits = 0xD000000000000012;
  v108._object = (void *)0x800000010023F7A0;
  String.append(_:)(v108);
  char v109 = dispatch thunk of Message.isSensitive.getter();
  BOOL v110 = (v109 & 1) == 0;
  if (v109) {
    uint64_t v111 = 1702195828;
  }
  else {
    uint64_t v111 = 0x65736C6166;
  }
  if (v110) {
    unint64_t v112 = 0xE500000000000000;
  }
  else {
    unint64_t v112 = 0xE400000000000000;
  }
  unint64_t v113 = v112;
  String.append(_:)(*(Swift::String *)&v111);
  swift_bridgeObjectRelease();
  v114._uint64_t countAndFlagsBits = 0x746164202020200ALL;
  v114._object = (void *)0xEE00203A4C525561;
  String.append(_:)(v114);
  uint64_t v115 = v153;
  FTMessage.dataURL.getter(v153);
  v116._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v116);
  swift_bridgeObjectRelease();
  v117._uint64_t countAndFlagsBits = 0xD000000000000013;
  v117._object = (void *)0x800000010023F7C0;
  String.append(_:)(v117);
  FTMessage.thumbnailURL.getter(v115);
  v118._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v118);
  swift_bridgeObjectRelease();
  v119._object = (void *)0x800000010023F7E0;
  v119._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v119);
  FTMessage.transcriptURL.getter(v115);
  v120._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v120);
  swift_bridgeObjectRelease();
  v121._uint64_t countAndFlagsBits = 0x527369202020200ALL;
  v121._object = (void *)0xEC000000203A5454;
  String.append(_:)(v121);
  char v122 = dispatch thunk of Message.isRTT.getter();
  BOOL v123 = (v122 & 1) == 0;
  if (v122) {
    uint64_t v124 = 1702195828;
  }
  else {
    uint64_t v124 = 0x65736C6166;
  }
  if (v123) {
    unint64_t v125 = 0xE500000000000000;
  }
  else {
    unint64_t v125 = 0xE400000000000000;
  }
  unint64_t v126 = v125;
  String.append(_:)(*(Swift::String *)&v124);
  swift_bridgeObjectRelease();
  v127._uint64_t countAndFlagsBits = 0xD000000000000016;
  v127._object = (void *)0x800000010023F800;
  String.append(_:)(v127);
  unsigned __int8 v128 = FTMessage.isDataAvailable.getter();
  BOOL v129 = (v128 & 1) == 0;
  if (v128) {
    uint64_t v130 = 1702195828;
  }
  else {
    uint64_t v130 = 0x65736C6166;
  }
  if (v129) {
    unint64_t v131 = 0xE500000000000000;
  }
  else {
    unint64_t v131 = 0xE400000000000000;
  }
  unint64_t v132 = v131;
  String.append(_:)(*(Swift::String *)&v130);
  swift_bridgeObjectRelease();
  v133._uint64_t countAndFlagsBits = 0xD000000000000011;
  v133._object = (void *)0x800000010023F820;
  String.append(_:)(v133);
  uint64_t v155 = FTMessage.transcript.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TranscriptMessage?);
  v134._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v134);
  swift_bridgeObjectRelease();
  v135._uint64_t countAndFlagsBits = 0xD000000000000018;
  v135._object = (void *)0x800000010023F840;
  String.append(_:)(v135);
  if (*(unsigned char *)(v34 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript)) {
    uint64_t v136 = 1702195828;
  }
  else {
    uint64_t v136 = 0x65736C6166;
  }
  if (*(unsigned char *)(v34 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript)) {
    unint64_t v137 = 0xE400000000000000;
  }
  else {
    unint64_t v137 = 0xE500000000000000;
  }
  unint64_t v138 = v137;
  String.append(_:)(*(Swift::String *)&v136);
  swift_bridgeObjectRelease();
  v139._uint64_t countAndFlagsBits = 0x447369202020200ALL;
  v139._object = (void *)0xEE00203A79747269;
  String.append(_:)(v139);
  if (*(unsigned char *)(v34 + v149)) {
    uint64_t v140 = 1702195828;
  }
  else {
    uint64_t v140 = 0x65736C6166;
  }
  if (*(unsigned char *)(v34 + v149)) {
    unint64_t v141 = 0xE400000000000000;
  }
  else {
    unint64_t v141 = 0xE500000000000000;
  }
  unint64_t v142 = v141;
  String.append(_:)(*(Swift::String *)&v140);
  swift_bridgeObjectRelease();
  v143._object = (void *)0x800000010023F860;
  v143._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v143);
  LOBYTE(v155) = FTMessage.messageSource.getter();
  _print_unlocked<A, B>(_:_:)();
  v144._uint64_t countAndFlagsBits = 0x202020202020200ALL;
  v144._object = (void *)0xEA00000000002920;
  String.append(_:)(v144);
  return v158;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FTMessage()
{
  return FTMessage.description.getter();
}

uint64_t outlined consume of TranscriptMessage??(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined copy of TranscriptMessage??(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t outlined assign with take of Transcript??(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FTMessageSource and conformance FTMessageSource()
{
  unint64_t result = lazy protocol witness table cache variable for type FTMessageSource and conformance FTMessageSource;
  if (!lazy protocol witness table cache variable for type FTMessageSource and conformance FTMessageSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FTMessageSource and conformance FTMessageSource);
  }
  return result;
}

uint64_t sub_1001125B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FTMessage.folder.getter();
  *a1 = result;
  return result;
}

uint64_t *sub_1001125E4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(void *)(v3 + 24) = v2;
  *(unsigned char *)(v3 + 32) = 0;
  return result;
}

char *sub_10011260C(char *result, uint64_t *a2)
{
  char v2 = *result;
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(unsigned char *)(v3 + 33) = v2;
  return result;
}

uint64_t sub_10011262C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = FTMessage.isDeleted.getter();
  *a1 = result & 1;
  return result;
}

char *sub_10011265C(char *result, uint64_t *a2)
{
  char v2 = *result;
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
  *(unsigned char *)(v3 + 34) = v2;
  return result;
}

uint64_t sub_10011267C@<X0>(uint64_t a1@<X8>)
{
  return FTMessage.dataURL.getter(a1);
}

uint64_t sub_1001126A0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FTMessage.dataURL : FTMessage(a1, a2, a3, a4, &demangling cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL);
}

uint64_t sub_1001126D0@<X0>(uint64_t a1@<X8>)
{
  return FTMessage.thumbnailURL.getter(a1);
}

uint64_t sub_1001126F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FTMessage.dataURL : FTMessage(a1, a2, a3, a4, &demangling cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL);
}

uint64_t sub_100112724@<X0>(uint64_t a1@<X8>)
{
  return FTMessage.transcriptURL.getter(a1);
}

uint64_t sub_100112748(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FTMessage.dataURL : FTMessage(a1, a2, a3, a4, &demangling cache variable for type metadata for URL??, &demangling cache variable for type metadata for URL?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL);
}

uint64_t sub_100112778@<X0>(uint64_t a1@<X8>)
{
  return FTMessage.transcriptData.getter(a1);
}

uint64_t sub_10011279C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FTMessage.dataURL : FTMessage(a1, a2, a3, a4, &demangling cache variable for type metadata for Transcript??, &demangling cache variable for type metadata for Transcript?, &OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData);
}

uint64_t sub_1001127CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FTMessage.transcript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001127F8(void *a1, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript);
  *(void *)(*a2 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = *a1;
  swift_unknownObjectRetain();

  return outlined consume of TranscriptMessage??(v2);
}

uint64_t ObjC metadata update function for FTTranscriptionMessage()
{
  return type metadata accessor for FTTranscriptionMessage(0);
}

uint64_t type metadata accessor for FTTranscriptionMessage(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for FTTranscriptionMessage);
}

uint64_t type metadata completion function for FTTranscriptionMessage()
{
  uint64_t result = type metadata accessor for Transcript();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FTMessageSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001129D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMessageSource()
{
  return &type metadata for FTMessageSource;
}

uint64_t ObjC metadata update function for FTMessage()
{
  return type metadata accessor for FTMessage(0);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_100280A38, (void (*)(void))&type metadata accessor for AnyCancellable);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSo10PhoneBadgea_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC11MobilePhone22CachedVoicemailManagerC5Cache33_CFC589FF927D3725ACAAF49197D752FALLC_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_100280A10, type metadata accessor for PhoneBadge);
}

uint64_t specialized OrderedDictionary.updateValue(_:forKey:)(uint64_t a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  swift_retain();
  swift_retain();
  unint64_t v8 = specialized OrderedSet._find(_:)((uint64_t)a2, v6, v7);
  char v10 = v9;
  swift_release();
  uint64_t result = swift_release();
  if (v10)
  {
    specialized OrderedSet._appendNew(_:in:)(a2);
    swift_unknownObjectRetain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t v15 = 0;
    goto LABEL_9;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = v3[2];
  Swift::String v12 = v3 + 2;
  uint64_t v13 = v14;
  if (v8 >= *(void *)(v14 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(v13 + 8 * v8 + 32);
  swift_unknownObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *Swift::String v12 = v13;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v13);
    uint64_t v13 = result;
    *Swift::String v12 = result;
  }
  if (v8 < *(void *)(v13 + 16))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v13 + 8 * v8 + 32) = a1;
LABEL_9:
    specialized ContiguousArray._endMutation()();
    return v15;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t CachedVoicemailManager.Cache.add(_:shouldSort:)(unint64_t a1, char a2)
{
  LOBYTE(v3) = a2;
  uint64_t v4 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_57:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      return result;
    }
LABEL_58:
    swift_beginAccess();
    uint64_t v43 = v2[2];
    uint64_t v42 = v2[3];
    uint64_t v44 = v2[4];
    swift_retain();
    swift_retain();
    swift_retain();
    specialized _copySequenceToContiguousArray<A>(_:)(v43, v42, v44);
    Swift::String v55 = v45;
    specialized MutableCollection<>.sort(by:)(&v55, (uint64_t (*)(uint64_t *, uint64_t *, void **, uint64_t *))closure #1 in CachedVoicemailManager.Cache.sort());
    swift_release();
    swift_release();
    swift_release();
    uint64_t v46 = v55[2];
    if (v46 == *(void *)(v44 + 16))
    {
      specialized closure #1 in OrderedDictionary.sort(by:)((uint64_t)(v55 + 4), v46, v2 + 2);
      swift_release();
      return swift_endAccess();
    }
    goto LABEL_62;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_57;
  }
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  char v47 = (char)v3;
  uint64_t v6 = 0;
  int v3 = v2 + 2;
  uint64_t v49 = v4 + 32;
  uint64_t v7 = v2 + 3;
  Swift::String v48 = v2;
  uint64_t v51 = v2 + 4;
  unint64_t v52 = v4 & 0xC000000000000001;
  uint64_t v50 = v5;
  Swift::String v53 = v2 + 2;
  do
  {
    if (v52)
    {
      unint64_t v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v11 = *(void **)(v49 + 8 * v6);
      swift_unknownObjectRetain();
    }
    id v12 = [v11 identifier];
    swift_beginAccess();
    uint64_t v13 = *v3;
    uint64_t v14 = *v7;
    uint64_t v4 = *(void *)(*v7 + 16);
    Swift::String v54 = v12;
    if (*v3)
    {
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      unint64_t v15 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v12, v14 + 32, v4, (Swift::Int *)(v13 + 16));
      char v17 = v16;
      uint64_t v4 = v18;
      swift_release();
      swift_release();
      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (!v4)
    {
      swift_unknownObjectRetain();
      swift_retain();
LABEL_27:
      swift_release();
LABEL_28:
      swift_unknownObjectRetain();
      uint64_t v24 = v54;
      id v25 = v54;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v26 = *v7;
      unint64_t v27 = *(void *)(*v7 + 16);
      int v3 = v53;
      uint64_t v28 = *v53;
      if (*v53)
      {
        swift_beginAccess();
        if (static _HashTable.maximumCapacity(forScale:)() >= (uint64_t)v27)
        {
          char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
          uint64_t v31 = *v53;
          if ((isUniquelyReferenced_native & 1) == 0)
          {
            if (!v31) {
              goto LABEL_64;
            }
            uint64_t v31 = _HashTable.copy()();
            swift_release();
            *Swift::String v53 = v31;
          }
          if (!v31) {
            goto LABEL_63;
          }
          _HashTable.UnsafeHandle.subscript.setter();
          goto LABEL_9;
        }
        swift_beginAccess();
        uint64_t v29 = *(void *)(v28 + 24) & 0x3FLL;
        if (v27 <= 0xF && !v29)
        {
          swift_release();
          *Swift::String v53 = 0;
LABEL_9:
          swift_unknownObjectRetain();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          goto LABEL_10;
        }
      }
      else
      {
        if (v27 <= 0xF) {
          goto LABEL_9;
        }
        uint64_t v29 = 0;
      }
      uint64_t v8 = static _HashTable.scale(forCapacity:)();
      if (v29 <= v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v29;
      }
      uint64_t v10 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v26, v9, 0, v29);
      swift_release();
      *Swift::String v53 = v10;
      goto LABEL_9;
    }
    type metadata accessor for MessageID(0);
    Swift::String v19 = *(void **)(v14 + 32);
    swift_unknownObjectRetain();
    swift_retain();
    id v20 = v19;
    char v21 = static NSObject.== infix(_:_:)();

    unint64_t v15 = 0;
    if ((v21 & 1) == 0)
    {
      if (v4 == 1) {
        goto LABEL_27;
      }
      id v32 = *(id *)(v14 + 40);
      char v33 = static NSObject.== infix(_:_:)();

      if (v33)
      {
        unint64_t v15 = 1;
      }
      else
      {
        if (v4 == 2) {
          goto LABEL_27;
        }
        id v34 = *(id *)(v14 + 48);
        char v35 = static NSObject.== infix(_:_:)();

        if (v35)
        {
          unint64_t v15 = 2;
        }
        else
        {
          if (v4 == 3) {
            goto LABEL_27;
          }
          id v36 = *(id *)(v14 + 56);
          char v37 = static NSObject.== infix(_:_:)();

          if ((v37 & 1) == 0)
          {
            uint64_t v38 = 0;
            uint64_t v39 = v4 - 4;
            while (v39 != v38)
            {
              id v40 = *(id *)(v14 + 64 + 8 * v38);
              uint64_t v4 = static NSObject.== infix(_:_:)();

              ++v38;
              if (v4)
              {
                unint64_t v15 = v38 + 3;
                goto LABEL_19;
              }
            }
            goto LABEL_27;
          }
          unint64_t v15 = 3;
        }
      }
    }
LABEL_19:
    swift_release();
LABEL_20:
    uint64_t v2 = v51;
    uint64_t v22 = *v51;
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v51 = v22;
    int v3 = v53;
    uint64_t v24 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v22 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v22);
      *uint64_t v51 = v22;
    }
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v15 >= *(void *)(v22 + 16)) {
      goto LABEL_55;
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v22 + 8 * v15 + 32) = v11;
LABEL_10:
    specialized ContiguousArray._endMutation()();

    ++v6;
    swift_endAccess();
    swift_unknownObjectRelease_n();
  }
  while (v6 != v50);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v2 = v48;
  if (v47) {
    goto LABEL_58;
  }
  return result;
}

uint64_t CachedVoicemailManager.Cache.remove(_:shouldSort:)(unint64_t a1, char a2)
{
  LOBYTE(v3) = a2;
  uint64_t v4 = a1;
  unint64_t v46 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      char v40 = v3;
      uint64_t v6 = 0;
      uint64_t v7 = v2 + 2;
      uint64_t v43 = v5;
      unint64_t v44 = v4 & 0xC000000000000001;
      uint64_t v41 = v2;
      uint64_t v42 = v4 + 32;
      uint64_t v8 = (id **)(v2 + 3);
      while (1)
      {
        if (v44) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v42 + 8 * v6);
        }
        uint64_t v10 = v9;
        if (__OFADD__(v6++, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        swift_beginAccess();
        uint64_t v2 = (Swift::Int *)*v7;
        id v12 = *v8;
        Swift::Int v3 = (Swift::Int)(*v8 + 4);
        uint64_t v13 = (uint64_t)(*v8)[2];
        if (*v7)
        {
          uint64_t v4 = (uint64_t)(v2 + 2);
          swift_retain();
          Swift::Int v3 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v10, v3, v13, v2 + 2);
          char v15 = v14;
          uint64_t v17 = v16;
          swift_release();
          if ((v15 & 1) == 0) {
            goto LABEL_15;
          }
        }
        else if (v13)
        {
          uint64_t v2 = (Swift::Int *)type metadata accessor for MessageID(0);
          id v18 = *(id *)v3;
          uint64_t v4 = static NSObject.== infix(_:_:)();

          Swift::Int v3 = 0;
          uint64_t v17 = 0;
          if (v4) {
            goto LABEL_15;
          }
          if (v13 != 1)
          {
            Swift::Int v3 = (Swift::Int)v12[5];
            uint64_t v4 = static NSObject.== infix(_:_:)();

            if (v4)
            {
              uint64_t v17 = 0;
              Swift::Int v3 = 1;
              goto LABEL_15;
            }
            if (v13 != 2)
            {
              Swift::Int v3 = (Swift::Int)v12[6];
              uint64_t v4 = static NSObject.== infix(_:_:)();

              if (v4)
              {
                uint64_t v17 = 0;
                Swift::Int v3 = 2;
                goto LABEL_15;
              }
              if (v13 != 3)
              {
                Swift::Int v3 = (Swift::Int)v12[7];
                uint64_t v4 = static NSObject.== infix(_:_:)();

                if (v4)
                {
                  uint64_t v17 = 0;
                  Swift::Int v3 = 3;
                  goto LABEL_15;
                }
                if (v13 != 4)
                {
                  Swift::Int v3 = (Swift::Int)v12[8];
                  uint64_t v4 = static NSObject.== infix(_:_:)();

                  if (v4)
                  {
                    uint64_t v17 = 0;
                    Swift::Int v3 = 4;
LABEL_15:
                    uint64_t v19 = (uint64_t)(*v8)[2];
                    id v20 = (Swift::Int *)*v7;
                    if (*v7)
                    {
                      swift_beginAccess();
                      if ((v20[2] & 0x3F) == (v20[3] & 0x3F))
                      {
                        if (!v19) {
                          goto LABEL_30;
                        }
                      }
                      else if (v19 <= static _HashTable.minimumCapacity(forScale:)())
                      {
                        goto LABEL_30;
                      }
                      char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
                      uint64_t v22 = *v7;
                      if ((isUniquelyReferenced_native & 1) == 0)
                      {
                        if (!v22) {
                          goto LABEL_71;
                        }
                        uint64_t v22 = _HashTable.copy()();
                        swift_release();
                        *uint64_t v7 = v22;
                      }
                      if (!v22) {
                        goto LABEL_70;
                      }
                      uint64_t v2 = (Swift::Int *)(v22 + 16);
                      uint64_t v4 = v22 + 32;
                      swift_retain();
                      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v17, (Swift::Int *)(v22 + 16), v22 + 32, (uint64_t)v7);
                      if (__OFADD__(v3, 1)) {
                        goto LABEL_62;
                      }
                      if (v3 + 1 < v3) {
                        goto LABEL_63;
                      }
                      uint64_t v23 = (uint64_t)*v8;
                      swift_retain();
                      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v3, v3 + 1, v23, (Swift::Int *)(v22 + 16));
                      swift_release();
                      swift_release();
LABEL_29:
                      uint64_t v24 = (void *)specialized ContiguousArray.remove(at:)(v3);
LABEL_43:

                      specialized ContiguousArray.remove(at:)(v3);
                      swift_endAccess();
                      swift_unknownObjectRelease();
                      id v30 = v10;
                      uint64_t v2 = (Swift::Int *)&v46;
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      Swift::Int v3 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      if ((unint64_t)v3 >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      }
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      goto LABEL_5;
                    }
                    if (v19) {
                      goto LABEL_29;
                    }
LABEL_30:
                    uint64_t v24 = (void *)specialized ContiguousArray.remove(at:)(v3);
                    id v25 = (Swift::Int *)*v7;
                    uint64_t v26 = (uint64_t)*v8;
                    if (*v7)
                    {
                      swift_beginAccess();
                      uint64_t v4 = v25[3] & 0x3F;
                      unint64_t v27 = *(void *)(v26 + 16);
                      if (v4) {
                        goto LABEL_39;
                      }
                    }
                    else
                    {
                      uint64_t v4 = 0;
                      unint64_t v27 = *(void *)(v26 + 16);
                    }
                    if (v27 < 0x10)
                    {
                      swift_release();
                      *uint64_t v7 = 0;
                      goto LABEL_43;
                    }
LABEL_39:
                    uint64_t v28 = static _HashTable.scale(forCapacity:)();
                    if (v4 <= v28) {
                      uint64_t v29 = v28;
                    }
                    else {
                      uint64_t v29 = v4;
                    }
                    uint64_t v4 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v26, v29, 0, v4);
                    swift_release();
                    *uint64_t v7 = v4;
                    goto LABEL_43;
                  }
                  uint64_t v4 = 0;
                  uint64_t v31 = v13 - 5;
                  id v32 = v12 + 9;
                  while (v31 != v4)
                  {
                    id v33 = v32[v4];
                    LOBYTE(v3) = static NSObject.== infix(_:_:)();

                    ++v4;
                    if (v3)
                    {
                      uint64_t v17 = 0;
                      Swift::Int v3 = v4 + 4;
                      goto LABEL_15;
                    }
                  }
                }
              }
            }
          }
        }
        swift_endAccess();
LABEL_5:

        if (v6 == v43)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v41;
          if (v40) {
            goto LABEL_66;
          }
          return v46;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0) {
    return v46;
  }
LABEL_66:
  swift_beginAccess();
  uint64_t v35 = v2[2];
  uint64_t v34 = v2[3];
  uint64_t v36 = v2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized _copySequenceToContiguousArray<A>(_:)(v35, v34, v36);
  Swift::String v45 = v37;
  specialized MutableCollection<>.sort(by:)(&v45, (uint64_t (*)(uint64_t *, uint64_t *, void **, uint64_t *))closure #1 in CachedVoicemailManager.Cache.sort());
  swift_release();
  swift_release();
  swift_release();
  uint64_t v38 = v45[2];
  if (v38 == *(void *)(v36 + 16))
  {
    specialized closure #1 in OrderedDictionary.sort(by:)((uint64_t)(v45 + 4), v38, v2 + 2);
    swift_release();
    swift_endAccess();
    return v46;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t CachedVoicemailManager.Cache.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t CachedVoicemailManager.fetchMessagesFromDataStore()()
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(CachedVoicemailManager.fetchMessagesFromDataStore(), v1, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void *);
  uint64_t v7;

  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "This must be overriden, its a misuse to use this directly without overriding this property", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void *))(v0 + 8);
  return v5(_swiftEmptyArrayStorage);
}

uint64_t CachedVoicemailManager.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000000;
  *(void *)(result + 24) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t CachedVoicemailManager.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0x8000000000000000;
  *(void *)(v0 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t CachedVoicemailManager.message(for:)(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[11] = v4;
  v2[12] = v3;
  return _swift_task_switch(CachedVoicemailManager.message(for:), v4, v3);
}

uint64_t CachedVoicemailManager.message(for:)()
{
  unint64_t v1 = *(void *)(v0[10] + 16);
  v0[13] = v1;
  if (!(v1 >> 62))
  {
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[14] = v13;
    uint64_t v10 = type metadata accessor for CachedVoicemailManager.Cache();
    *uint64_t v13 = v0;
    v13[1] = CachedVoicemailManager.message(for:);
    unint64_t v8 = (unint64_t)(v0 + 8);
    unint64_t v9 = v1;
    return Task<>.value.getter(v8, v9, v10);
  }
  if (v1 >> 62 != 1)
  {
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  uint64_t v2 = (void *)v0[9];
  uint64_t v3 = (void *)(v1 & 0x3FFFFFFFFFFFFFFFLL);
  swift_beginAccess();
  uint64_t v4 = v3[2];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  swift_retain();
  id v7 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v8 = specialized OrderedSet._find(_:)((uint64_t)v7, v4, v5);
  uint64_t v11 = 0;
  if ((v9 & 1) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(void *)(v6 + 16))
    {
      uint64_t v11 = *(void *)(v6 + 8 * v8 + 32);
      swift_unknownObjectRetain();
      goto LABEL_7;
    }
    __break(1u);
    return Task<>.value.getter(v8, v9, v10);
  }
LABEL_7:
  id v12 = (void *)v0[9];
  swift_release();
  swift_release();
  swift_release();

  swift_release();
LABEL_12:
  char v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  unint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(CachedVoicemailManager.message(for:), v3, v2);
}

unint64_t CachedVoicemailManager.message(for:)()
{
  unint64_t v1 = (void *)v0[8];
  uint64_t v2 = (void *)v0[9];
  swift_beginAccess();
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  swift_retain();
  id v6 = v2;
  swift_retain();
  swift_retain();
  unint64_t result = specialized OrderedSet._find(_:)((uint64_t)v6, v4, v3);
  uint64_t v8 = 0;
  if ((v9 & 1) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(v5 + 16))
    {
      uint64_t v8 = *(void *)(v5 + 8 * result + 32);
      swift_unknownObjectRetain();
      goto LABEL_5;
    }
    __break(1u);
    return result;
  }
LABEL_5:
  uint64_t v10 = (void *)v0[9];
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v8);
}

uint64_t @objc closure #1 in CachedVoicemailManager.message(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in CachedVoicemailManager.message(for:), v5, v4);
}

uint64_t @objc closure #1 in CachedVoicemailManager.message(for:)()
{
  unint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = @objc closure #1 in CachedVoicemailManager.message(for:);
  uint64_t v4 = *(void *)(v0 + 16);
  return CachedVoicemailManager.message(for:)(v4);
}

uint64_t @objc closure #1 in CachedVoicemailManager.message(for:)(uint64_t a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 40);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_release();

  v3[2](v3, a1);
  _Block_release(v3);
  swift_unknownObjectRelease();
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKF(unint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(v2 + 16) >> 62;
  if (v5)
  {
    if (v5 == 1)
    {
      swift_retain();
      CachedVoicemailManager.Cache.add(_:shouldSort:)(a1, 1);
      return swift_release();
    }
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    uint64_t result = swift_willThrowTypedImpl();
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    uint64_t v8 = (void *)(v2 + 24);
    swift_beginAccess();
    char v9 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      *uint64_t v8 = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
      *uint64_t v8 = v9;
    }
    id v9[2] = v12 + 1;
    uint64_t v13 = &v9[2 * v12];
    v13[4] = _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA;
    v13[5] = v7;
    swift_endAccess();
    uint64_t v14 = 1;
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    uint64_t result = swift_willThrowTypedImpl();
  }
  *a2 = v14;
  return result;
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_(uint64_t a1, unint64_t a2)
{
  return CachedVoicemailManager.Cache.add(_:shouldSort:)(a2, 1);
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC14removeMessages4withSayAA9MessageIDCGAH_tAC5ErrorOYKF(unint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(v2 + 16) >> 62;
  if (!v5)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a1;
    uint64_t v16 = (void *)(v2 + 24);
    swift_beginAccess();
    uint64_t v17 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      *uint64_t v16 = v17;
    }
    unint64_t v20 = v17[2];
    unint64_t v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
      *uint64_t v16 = v17;
    }
    v17[2] = v20 + 1;
    char v21 = &v17[2 * v20];
    v21[4] = _s11MobilePhone22CachedVoicemailManagerC14removeMessages4withSayAA9MessageIDCGAH_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA;
    v21[5] = v15;
    swift_endAccess();
    uint64_t v13 = 1;
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    uint64_t result = swift_willThrowTypedImpl();
    goto LABEL_17;
  }
  if (v5 != 1)
  {
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    uint64_t result = swift_willThrowTypedImpl();
    uint64_t v13 = 0;
    goto LABEL_17;
  }
  swift_retain();
  uint64_t v6 = CachedVoicemailManager.Cache.remove(_:shouldSort:)(a1, 1);
  unint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = __CocoaSet.count.getter();
    Swift::Int v11 = specialized _NativeSet.init(_:capacity:)(v9, v10);
    swift_bridgeObjectRelease();
    uint64_t v8 = v11;
  }
  uint64_t v12 = (uint64_t)specialized _NativeSet.subtracting<A>(_:)(v6, v8);
  uint64_t v13 = v12;
  if ((v12 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_10:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
      swift_willThrowTypedImpl();
      uint64_t result = swift_release();
LABEL_17:
      *a2 = v13;
      return result;
    }
  }
  else if (*(void *)(v12 + 16))
  {
    goto LABEL_10;
  }
  swift_release();
  if (v6 < 0 || (v6 & 0x4000000000000000) != 0)
  {
    uint64_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v6);
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v22;
  }
  else
  {
    swift_release();
    return v6 & 0xFFFFFFFFFFFFFF8;
  }
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKF(unint64_t a1, uint64_t *a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = *(void *)(v2 + 16) >> 62;
  if (v6)
  {
    if (v6 == 1)
    {
      swift_bridgeObjectRetain();
      unint64_t v7 = (void *)swift_retain();
      _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_(v7, a1);
      swift_release();
      return swift_release();
    }
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();
    uint64_t result = swift_release();
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA;
    *(void *)(v9 + 24) = v5;
    uint64_t v10 = (void *)(v2 + 24);
    swift_beginAccess();
    Swift::Int v11 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      Swift::Int v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *uint64_t v10 = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      Swift::Int v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
      *uint64_t v10 = v11;
    }
    _OWORD v11[2] = v14 + 1;
    uint64_t v15 = &v11[2 * v14];
    v15[4] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CachedVoicemailManager.Cache) -> ();
    v15[5] = v9;
    swift_endAccess();
    uint64_t v16 = 1;
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    swift_willThrowTypedImpl();
    uint64_t result = swift_release();
  }
  *a2 = v16;
  return result;
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_(void *a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_18;
  }
LABEL_3:
  if (v4 < 1) {
    goto LABEL_22;
  }
  uint64_t v5 = 0;
  uint64_t v24 = a1;
  uint64_t v6 = &selRef_fetchRoutesWithCompletionHandler_;
  p_class_meths = &OBJC_PROTOCOL___UITextViewDelegate.class_meths;
  do
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v8 = *(void **)(a2 + 8 * v5 + 32);
      swift_unknownObjectRetain();
    }
    id v9 = [v8 v6[134] v24];
    swift_beginAccess();
    uint64_t v10 = specialized OrderedDictionary.updateValue(_:forKey:)((uint64_t)v8, v9);
    swift_endAccess();

    swift_unknownObjectRelease();
    if (v10)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      if (p_class_meths[445] != (__objc2_meth_list *)-1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)logger);
      swift_unknownObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        id v25 = v8;
        v26[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315138;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
        uint64_t v15 = String.init<A>(reflecting:)();
        *(void *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v26);
        swift_unknownObjectRelease_n();
        uint64_t v6 = &selRef_fetchRoutesWithCompletionHandler_;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "CachedVoicemailmanager: Told to update message but no message was found with id: %s", (uint8_t *)v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UITextViewDelegate + 32);
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
    }
    ++v5;
  }
  while (v4 != v5);
  swift_bridgeObjectRelease();
  a1 = v24;
LABEL_19:
  uint64_t v17 = a1 + 2;
  swift_beginAccess();
  uint64_t v18 = a1[2];
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized _copySequenceToContiguousArray<A>(_:)(v18, v19, v20);
  id v25 = v21;
  specialized MutableCollection<>.sort(by:)(&v25, (uint64_t (*)(uint64_t *, uint64_t *, void **, uint64_t *))closure #1 in CachedVoicemailManager.Cache.sort());
  swift_release();
  swift_release();
  swift_release();
  uint64_t v22 = v25[2];
  if (v22 == *(void *)(v20 + 16))
  {
    specialized closure #1 in OrderedDictionary.sort(by:)((uint64_t)(v25 + 4), v22, v17);
    swift_release();
    return swift_endAccess();
  }
  __break(1u);
LABEL_22:
  __break(1u);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

Swift::Void __swiftcall CachedVoicemailManager.needsFetch()()
{
  *(void *)(v0 + 16) = 0x8000000000000000;
  swift_release();
}

uint64_t CachedVoicemailManager.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CachedVoicemailManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(MessageID, Message)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MessageID, [Message])>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SymbolDescription>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      id v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *result;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      id v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t (*a5)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v10 <= 0)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      _OWORD v11[2] = v10;
      _OWORD v11[3] = (2 * (v13 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v11 + 4), v10, a1, a2, a3, a4, a5);
    a5 = v14;
    swift_bridgeObjectRelease();
    if (a5 == (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))v10) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v11;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_100116068()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001160A0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v2, a1);
  uint64_t result = (void *)outlined consume of Set<CHHandle>.Iterator._Variant();
  if (v6 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA()
{
  return CachedVoicemailManager.Cache.add(_:shouldSort:)(*(void *)(v0 + 16), 1);
}

unint64_t lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error;
  if (!lazy protocol witness table cache variable for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error);
  }
  return result;
}

uint64_t specialized OrderedSet._appendNew(_:in:)(void *a1)
{
  id v2 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v4 = *(void *)(v1[1] + 16);
  if (*v1)
  {
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() >= v4)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v5 = *v1;
      if (!result)
      {
        if (!v5)
        {
LABEL_12:
          __break(1u);
          return result;
        }
        uint64_t v5 = _HashTable.copy()();
        uint64_t result = swift_release();
        uint64_t *v1 = v5;
      }
      if (v5) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
      goto LABEL_12;
    }
  }
  else if ((unint64_t)v4 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()();
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v6 = static _HashTable.scale(forCapacity:)();
  if (v3 <= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v2, v7, 0, v3);
LABEL_11:
  uint64_t result = swift_release();
  uint64_t *v0 = v5;
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t *v1 = v3;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      uint64_t v8 = v3 + 8 * a1;
      uint64_t v9 = *(void *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(void *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t *v1 = v3;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      uint64_t v8 = v3 + 8 * a1;
      uint64_t v9 = *(void *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(void *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v20 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  _HashTable.BucketIterator.advance()();
  if (v20)
  {
    uint64_t v7 = a1;
    uint64_t v8 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
    while (1)
    {
      unint64_t v9 = _HashTable.BucketIterator.currentValue.getter();
      if (v10)
      {
LABEL_25:
        __break(1u);
        return;
      }
      if ((v9 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(a4 + 8);
      if (v9 >= *(void *)(v11 + 16)) {
        goto LABEL_23;
      }
      Swift::Int v12 = *a2;
      id v13 = *(id *)(v11 + 8 * v9 + 32);
      Swift::Int v14 = NSObject._rawHashValue(seed:)(v12);

      uint64_t v15 = 1 << *a2;
      if (__OFSUB__(v15, 1)) {
        goto LABEL_24;
      }
      uint64_t v16 = (v15 - 1) & v14;
      if (v6 >= v8)
      {
        if (v16 >= v8 && v6 >= v16)
        {
LABEL_18:
          _HashTable.BucketIterator.currentValue.getter();
          _HashTable.UnsafeHandle.subscript.setter();
          uint64_t v6 = v7;
        }
      }
      else if (v16 >= v8 || v6 >= v16)
      {
        goto LABEL_18;
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v7 = a1;
    }
  }

  _HashTable.UnsafeHandle.subscript.setter();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v5 >= 1)
  {
    unint64_t v9 = *(void *)(a3 + 16);
    uint64_t v10 = v9 - v5;
    if ((uint64_t)v9 < v5) {
      ++v10;
    }
    if (a1 < v10 >> 1)
    {
      if (static _HashTable.maximumCapacity(forScale:)() / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v9 < a1)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        if (a1)
        {
          swift_retain();
          uint64_t v11 = 0;
          while (1)
          {
            Swift::Int v12 = *a4;
            id v13 = *(id *)(a3 + 32 + 8 * v11);
            NSObject._rawHashValue(seed:)(v12);
            if (__OFSUB__(1 << *a4, 1)) {
              break;
            }
            if (_HashTable.UnsafeHandle._startIterator(bucket:)())
            {
              while (1)
              {
                uint64_t v14 = _HashTable.BucketIterator.currentValue.getter();
                if ((v15 & 1) == 0 && v14 == v11) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
              }
            }
            if (__OFADD__(v11, v5)) {
              goto LABEL_58;
            }
            ++v11;
            _HashTable.BucketIterator.currentValue.setter();

            if (v11 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        goto LABEL_20;
      }
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v21 = _HashTable.BucketIterator.currentValue.getter();
      if ((v22 & 1) != 0 || v21 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        uint64_t v16 = a4[1];
        if (__OFSUB__(v16 >> 6, v5))
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v17 = 1 << *a4;
        BOOL v18 = __OFSUB__(v17, 1);
        uint64_t v19 = v17 - 1;
        if (v18)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        uint64_t v20 = (v19 & (((v16 >> 6) - v5) >> 63)) + (v16 >> 6) - v5;
        if (v20 < v19) {
          uint64_t v19 = 0;
        }
        a4[1] = a4[1] & 0x3F | ((v20 - v19) << 6);
        return;
      }
      if (!__OFADD__(v21, v5))
      {
        _HashTable.BucketIterator.currentValue.setter();
        goto LABEL_32;
      }
      __break(1u);
LABEL_38:
      _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v23 = _HashTable.BucketIterator.currentValue.getter();
      if ((v24 & 1) == 0 && v23 >= v4)
      {
        if (__OFSUB__(v23, v5))
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
      return;
    }
    uint64_t v4 = a2;
    if (__OFSUB__(v9, a2))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if ((uint64_t)(v9 - a2) >= static _HashTable.maximumCapacity(forScale:)() / 3) {
      goto LABEL_38;
    }
    if ((uint64_t)v9 < v4)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v4 < 0)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v9 != v4)
    {
      if (v9 <= v4)
      {
LABEL_70:
        __break(1u);
        return;
      }
      swift_retain();
      while (1)
      {
        Swift::Int v25 = *a4;
        id v26 = *(id *)(a3 + 32 + 8 * v4);
        NSObject._rawHashValue(seed:)(v25);
        if (__OFSUB__(1 << *a4, 1)) {
          goto LABEL_60;
        }
        if (_HashTable.UnsafeHandle._startIterator(bucket:)())
        {
          while (1)
          {
            uint64_t v27 = _HashTable.BucketIterator.currentValue.getter();
            if ((v28 & 1) == 0 && v27 == v4) {
              break;
            }
            _HashTable.BucketIterator.advance()();
          }
        }
        if (__OFSUB__(v4, v5)) {
          goto LABEL_61;
        }
        ++v4;
        _HashTable.BucketIterator.currentValue.setter();

        if (v4 == v9)
        {
          swift_release();
          return;
        }
      }
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, void **a2, unint64_t a3, void **__dst, uint64_t (*a5)(void **, void **, void **, uint64_t *))
{
  uint64_t v6 = (char *)__dst;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = (char *)a2 - (char *)__src;
  int64_t v10 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v10 = (char *)a2 - (char *)__src;
  }
  uint64_t v11 = v10 >> 4;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v13 = a3 - (void)a2;
  }
  uint64_t v14 = v13 >> 4;
  int v58 = __src;
  uint64_t v57 = __dst;
  if (v11 >= v13 >> 4)
  {
    if (v12 >= -15)
    {
      if (__dst != a2 || &a2[2 * v14] <= __dst) {
        memmove(__dst, a2, 16 * v14);
      }
      char v28 = &v6[16 * v14];
      uint64_t v56 = v28;
      int v58 = v7;
      if (v8 < v7)
      {
        uint64_t v29 = v5;
        if (v12 >= 16)
        {
          id v30 = (void **)(a3 - 16);
          uint64_t v31 = v7;
          unint64_t v44 = v6;
          uint64_t v51 = v8;
          while (1)
          {
            unint64_t v45 = (unint64_t)v28;
            char v47 = v7;
            id v32 = (void *)*((void *)v28 - 2);
            id v33 = v28 - 16;
            uint64_t v34 = *(v31 - 2);
            uint64_t v35 = (uint64_t)*(v31 - 1);
            v31 -= 2;
            Swift::String v54 = (void *)*((void *)v28 - 1);
            Swift::String v55 = v32;
            uint64_t v52 = v35;
            Swift::String v53 = v34;
            id v36 = v32;
            swift_unknownObjectRetain();
            id v37 = v34;
            swift_unknownObjectRetain();
            char v38 = a5(&v55, &v54, &v53, &v52);
            if (v29) {
              break;
            }
            char v39 = v38;
            char v40 = v30 + 2;

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if (v39)
            {
              char v28 = (char *)v45;
              uint64_t v41 = v44;
              unint64_t v42 = (unint64_t)v51;
              if (v40 != v47 || v30 >= v47) {
                *(_OWORD *)id v30 = *(_OWORD *)v31;
              }
              int v58 = v31;
            }
            else
            {
              uint64_t v56 = v33;
              uint64_t v41 = v44;
              unint64_t v42 = (unint64_t)v51;
              uint64_t v31 = v47;
              if ((unint64_t)v40 < v45 || (unint64_t)v30 >= v45 || v40 != (void **)v45) {
                *(_OWORD *)id v30 = *(_OWORD *)v33;
              }
              char v28 = v33;
            }
            uint64_t v29 = 0;
            if ((unint64_t)v31 > v42)
            {
              v30 -= 2;
              uint64_t v7 = v31;
              if (v28 > v41) {
                continue;
              }
            }
            goto LABEL_50;
          }

          swift_unknownObjectRelease();
LABEL_49:
          swift_unknownObjectRelease();
        }
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v58, (const void **)&v57, &v56);
      return 1;
    }
  }
  else if (v9 >= -15)
  {
    uint64_t v15 = v5;
    if (__dst != __src || &__src[2 * v11] <= __dst) {
      memmove(__dst, __src, 16 * v11);
    }
    unint64_t v46 = &v6[16 * v11];
    uint64_t v56 = v46;
    if ((unint64_t)v7 < a3 && v9 >= 16)
    {
      while (1)
      {
        uint64_t v50 = v8;
        uint64_t v16 = *v7;
        uint64_t v17 = v7[1];
        BOOL v18 = v7;
        uint64_t v19 = *(void **)v6;
        uint64_t v20 = *((void *)v6 + 1);
        uint64_t v21 = v6;
        Swift::String v54 = v17;
        Swift::String v55 = v16;
        uint64_t v52 = v20;
        Swift::String v53 = v19;
        id v22 = v16;
        swift_unknownObjectRetain();
        id v23 = v19;
        swift_unknownObjectRetain();
        char v24 = a5(&v55, &v54, &v53, &v52);
        if (v15)
        {

          swift_unknownObjectRelease();
          goto LABEL_49;
        }
        char v25 = v24;

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v25)
        {
          id v26 = v18 + 2;
          uint64_t v27 = v50;
          uint64_t v6 = v21;
          if (v50 >= v18 && v50 < v26)
          {
            uint64_t v15 = 0;
            if (v50 != v18) {
              *(_OWORD *)uint64_t v50 = *(_OWORD *)v18;
            }
            goto LABEL_23;
          }
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v18;
        }
        else
        {
          uint64_t v27 = v50;
          if (v50 != (void **)v21) {
            *(_OWORD *)uint64_t v50 = *(_OWORD *)v21;
          }
          uint64_t v6 = v21 + 16;
          uint64_t v57 = (void **)(v21 + 16);
          id v26 = v18;
        }
        uint64_t v15 = 0;
LABEL_23:
        uint64_t v8 = v27 + 2;
        int v58 = v8;
        if (v6 < v46)
        {
          uint64_t v7 = v26;
          if ((unint64_t)v26 < a3) {
            continue;
          }
        }
        goto LABEL_50;
      }
    }
    goto LABEL_50;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for MessageID(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        unint64_t v9 = *(void *)(v15 + 16);
        if (*(void *)(v15 + 24) <= v9)
        {
          specialized _NativeSet.resize(capacity:)(v9 + 1);
          uint64_t v2 = v15;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v7 == v11;
            if (v7 == v11) {
              unint64_t v7 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)(v4 + 8 * v7);
          }
          while (v13 == -1);
          unint64_t v8 = __clz(__rbit64(~v13)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

void *specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v35[0] = a1;
  unint64_t v33 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    return (void *)v2;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_21;
  }
LABEL_4:
  unint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  unint64_t v34 = a1 & 0xC000000000000001;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v32 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  uint64_t v30 = a1 + 32;
  uint64_t v31 = v7;
  while (1)
  {
    if (v34)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v5 >= *(void *)(v32 + 16)) {
        __break(1u);
      }
      id v8 = *(id *)(v30 + 8 * v5);
    }
    unint64_t v9 = v8;
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v12 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13)) {
      break;
    }
LABEL_19:

    if (v33)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v5 == v19) {
        goto LABEL_21;
      }
    }
    else if (v5 == *(void *)(v32 + 16))
    {
      goto LABEL_21;
    }
  }
  type metadata accessor for MessageID(0);
  id v14 = *(id *)(*(void *)(v2 + 48) + 8 * v13);
  char v15 = static NSObject.== infix(_:_:)();

  if ((v15 & 1) == 0)
  {
    uint64_t v16 = ~v12;
    do
    {
      unint64_t v13 = (v13 + 1) & v16;
      if (((*(void *)(v6 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_19;
      }
      id v17 = *(id *)(*(void *)(v2 + 48) + 8 * v13);
      char v18 = static NSObject.== infix(_:_:)();
    }
    while ((v18 & 1) == 0);
  }

  v35[1] = v5;
  char v21 = *(unsigned char *)(v2 + 32);
  unint64_t v22 = (unint64_t)((1 << v21) + 63) >> 6;
  size_t v23 = 8 * v22;
  if ((v21 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v29 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v23);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v29 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0)), v22, v2, v13, v35);
    uint64_t v25 = v24;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v26 = (void *)swift_slowAlloc();
    memcpy(v26, (const void *)(v2 + 56), v23);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v26, v22, v2, v13, v35);
    uint64_t v25 = v27;
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
  }
  return (void *)v25;
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  unint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v33 = v7 - 1;
  unint64_t v8 = a5[1];
  if (*a5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 == v9) {
      goto LABEL_3;
    }
  }
  else if (v8 == *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v33, a3);
    return;
  }
  uint64_t v35 = a3 + 56;
  unint64_t v34 = v5;
  while (1)
  {
    uint64_t v10 = *v5;
    if ((*v5 & 0xC000000000000001) != 0)
    {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_10;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      break;
    }
    if (v8 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_31;
    }
    id v11 = *(id *)(v10 + 8 * v8 + 32);
LABEL_10:
    uint64_t v12 = v11;
    uint64_t v13 = v5[1];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_32;
    }
    v5[1] = v15;
    Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
    uint64_t v17 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v18 = v16 & ~v17;
    unint64_t v19 = v18 >> 6;
    uint64_t v20 = 1 << v18;
    if (((1 << v18) & *(void *)(v35 + 8 * (v18 >> 6))) == 0) {
      goto LABEL_18;
    }
    type metadata accessor for MessageID(0);
    id v21 = *(id *)(*(void *)(a3 + 48) + 8 * v18);
    char v22 = static NSObject.== infix(_:_:)();

    if ((v22 & 1) == 0)
    {
      uint64_t v23 = ~v17;
      for (unint64_t i = v18 + 1; ; unint64_t i = v25 + 1)
      {
        unint64_t v25 = i & v23;
        if (((*(void *)(v35 + (((i & v23) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v23)) & 1) == 0) {
          break;
        }
        id v26 = *(id *)(*(void *)(a3 + 48) + 8 * v25);
        char v27 = static NSObject.== infix(_:_:)();

        if (v27)
        {

          unint64_t v19 = v25 >> 6;
          uint64_t v20 = 1 << v25;
          goto LABEL_20;
        }
      }
LABEL_18:

      unint64_t v5 = v34;
      goto LABEL_23;
    }

LABEL_20:
    unint64_t v28 = a1[v19];
    a1[v19] = v28 & ~v20;
    unint64_t v5 = v34;
    if ((v20 & v28) != 0)
    {
      uint64_t v29 = v33 - 1;
      if (__OFSUB__(v33, 1)) {
        goto LABEL_33;
      }
      --v33;
      if (!v29) {
        return;
      }
    }
LABEL_23:
    unint64_t v8 = v5[1];
    if (*v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8 == v30) {
        goto LABEL_3;
      }
    }
    else if (v8 == *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type [SearchController] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          char v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_unknownObjectRetain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    uint64_t v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    void *v24 = v4;
    v24[1] = v8;
    void v24[2] = v9;
    v24[3] = v10;
    unsigned char v24[4] = v11;
    return (void *)v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  uint64_t v24 = result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo10PhoneBadgea_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 32) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo10PhoneBadgea_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo10PhoneBadgea_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v1 + 24);
  *(unsigned char *)uint64_t v2 = *(unsigned char *)(v1 + 16);
  *(void *)(v2 + 8) = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MessageID, [Message]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MessageID, Message));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for MessageID(0);
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor(&lazy protocol witness table cache variable for type MessageID and conformance NSObject, (void (*)(uint64_t))type metadata accessor for MessageID);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100119010()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC14removeMessages4withSayAA9MessageIDCGAH_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA()
{
  CachedVoicemailManager.Cache.remove(_:shouldSort:)(*(void *)(v0 + 16), 1);

  return swift_bridgeObjectRelease();
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA(void *a1)
{
  return _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_(a1, *(void *)(v1 + 16));
}

uint64_t sub_100119090()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CachedVoicemailManager.Cache) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for CachedVoicemailManager.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for CachedVoicemailManager.Error(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for CachedVoicemailManager.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for CachedVoicemailManager.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedVoicemailManager.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CachedVoicemailManager.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for CachedVoicemailManager.Error(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for CachedVoicemailManager.Error(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CachedVoicemailManager.Error()
{
  return &type metadata for CachedVoicemailManager.Error;
}

void *initializeBufferWithCopyOfBuffer for CachedVoicemailManager.Cache.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for CachedVoicemailManager.Cache.State()
{
  return swift_release();
}

void *assignWithCopy for CachedVoicemailManager.Cache.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for CachedVoicemailManager.Cache.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedVoicemailManager.Cache.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CachedVoicemailManager.Cache.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for CachedVoicemailManager.Cache.State(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for CachedVoicemailManager.Cache.State(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for CachedVoicemailManager.Cache.State(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

void *type metadata accessor for CachedVoicemailManager.Cache.State()
{
  return &unk_100280900;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    unsigned int v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100119698()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in CachedVoicemailManager.message(for:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  Swift::Int v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::Int v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  Swift::Int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in CachedVoicemailManager.message(for:)
                                                         + async function pointer to @objc closure #1 in CachedVoicemailManager.message(for:));
  return v6(v2, v3, v4);
}

uint64_t sub_10011979C()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo10PhoneBadgea_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  Swift::Int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *Swift::Int v5 = v2;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  Swift::Int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo10PhoneBadgea_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo10PhoneBadgea_TG5Tu);
  return v6(a1, v4);
}

uint64_t outlined consume of Set<CHHandle>.Iterator._Variant()
{
  return swift_release();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  Swift::Int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *Swift::Int v5 = v2;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  Swift::Int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR7Combine14AnyCancellableC_TG5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  Swift::Int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *Swift::Int v5 = v2;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  Swift::Int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t lazy protocol witness table accessor for type [SearchController] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall PHVoicemailNavigationController.startObservingPreferences()()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Defaults.isInternalInstall == 1)
  {
    uint64_t v1 = (void *)swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    id v2 = specialized Defaults.subscribe(to:onChange:)(3u, (uint64_t)partial apply for closure #1 in PHVoicemailNavigationController.startObservingPreferences(), v1);
    swift_release_n();
    id v3 = v2;
    id v4 = [v0 observations];
    [v4 insertObject:v3 atIndex:0];
  }
}

uint64_t sub_100119C04()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in PHVoicemailNavigationController.startObservingPreferences()()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong _updateUIState];
  }
}

void partial apply for closure #1 in PHVoicemailNavigationController.startObservingPreferences()()
{
}

uint64_t PHVoicemailNavigationController.isAccountProvisioningRequired.getter()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Defaults.isInternalInstall == 1)
  {
    char v1 = specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD00000000000001CLL, 0x800000010023D380, 0, 0);
    if (v1) {
      return 1;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(void *)(v2 + 64) = 0;
    *(unsigned char *)(v2 + 72) = 2;
    swift_willThrow();
    swift_errorRelease();
  }
  if (one-time initialization token for featureFlags != -1) {
    swift_once();
  }
  if (TUCallScreeningEnabled()) {
    return 0;
  }
  uint64_t result = (uint64_t)[v0 voicemailController];
  if (!result)
  {
LABEL_36:
    __break(1u);
    return result;
  }
  id v4 = (void *)result;
  id v5 = [(id)result accountManager];

  id v6 = [v5 accounts];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMAccount);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_12;
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_33;
  }
LABEL_12:
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    id v11 = (v7 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
        : *(id *)(v7 + 8 * v9 + 32);
    uint64_t v12 = v11;
    id v13 = [v11 handle];

    if (v13) {
      break;
    }

LABEL_15:
    if (v8 == ++v9) {
      goto LABEL_24;
    }
  }
  unsigned __int8 v14 = [v12 isProvisioned];

  if (v14) {
    goto LABEL_15;
  }
  if (!__OFADD__(v10++, 1)) {
    goto LABEL_15;
  }
  __break(1u);
LABEL_24:
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v10 == v16;
}

id VMVoicemailGreeting.copy()()
{
  char v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)VMVoicemailGreeting) init];
  [v1 duration];
  [v9 setDuration:];
  [v9 setType:[v1 type]];
  id v10 = [v1 url];
  if (v10)
  {
    id v11 = v10;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    {
      id v13 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v12);
      id v13 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    id v13 = 0;
  }
  [v9 setUrl:v13];

  return v9;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UIDeviceOrientation) -> ()(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed UIDeviceOrientation) -> (@out ())(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = a1;
  return a2(&v3);
}

uint64_t AccelerometerOrientationMonitorWrapper.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100206210;
  *(void *)(v0 + 32) = 0xED0000726574656DLL;
  *(void *)(v0 + 40) = PHVoicemailInboxListViewController.refreshTableHeaderView();
  *(void *)(v0 + 48) = 0;
  AccelerometerOrientationMonitorWrapper.wrapped.getter();
  swift_release();
  return v0;
}

void *AccelerometerOrientationMonitorWrapper.wrapped.getter()
{
  if (*(void *)(v0 + 16))
  {
    char v1 = *(void **)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for OrientationMonitorAccelerometer();
    swift_allocObject();
    char v1 = OrientationMonitorAccelerometer.init(onOrientationChange:)((uint64_t)partial apply for closure #1 in AccelerometerOrientationMonitorWrapper.wrapped.getter, v3);
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in AccelerometerOrientationMonitorWrapper.wrapped.getter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
    swift_release();
    v3(a1);
    return swift_release();
  }
  return result;
}

Swift::Void (__swiftcall *variable initialization expression of AccelerometerOrientationMonitorWrapper.onOrientationChangeEvent())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t key path setter for AccelerometerOrientationMonitorWrapper.onOrientationChangeEvent : AccelerometerOrientationMonitorWrapper(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(void **)a2 + 136);
  swift_retain();
  return v6(_sSo19UIDeviceOrientationVytIegnr_ABIegy_TRTA_0, v5);
}

uint64_t AccelerometerOrientationMonitorWrapper.onOrientationChangeEvent.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t AccelerometerOrientationMonitorWrapper.onOrientationChangeEvent.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_release();
}

uint64_t (*AccelerometerOrientationMonitorWrapper.onOrientationChangeEvent.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t AccelerometerOrientationMonitorWrapper.currentOrientation.getter()
{
  uint64_t v0 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  uint64_t v1 = (*(uint64_t (**)(void *))(*v0 + 176))(v0);
  swift_release();
  return v1;
}

uint64_t AccelerometerOrientationMonitorWrapper.orientationEventsEnabled.setter(uint64_t a1)
{
  uint64_t v2 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  (*(void (**)(uint64_t))(*v2 + 136))(a1);
  swift_release();
  uint64_t v3 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  (*(void (**)(BOOL))(*v3 + 160))((a1 & 1) == 0);

  return swift_release();
}

uint64_t AccelerometerOrientationMonitorWrapper.orientationEventsEnabled.getter()
{
  uint64_t v0 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  char v1 = (*(uint64_t (**)(void *))(*v0 + 128))(v0);
  swift_release();
  return v1 & 1;
}

uint64_t (*AccelerometerOrientationMonitorWrapper.orientationEventsEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  char v4 = (*(uint64_t (**)(void *))(*v3 + 128))(v3);
  swift_release();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return AccelerometerOrientationMonitorWrapper.orientationEventsEnabled.modify;
}

uint64_t AccelerometerOrientationMonitorWrapper.orientationEventsEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  (*(void (**)(uint64_t))(*v2 + 136))(v1);
  swift_release();
  uint64_t v3 = AccelerometerOrientationMonitorWrapper.wrapped.getter();
  (*(void (**)(void))(*v3 + 160))(v1 ^ 1);

  return swift_release();
}

uint64_t AccelerometerOrientationMonitorWrapper.init()()
{
  *(_OWORD *)(v0 + 16) = xmmword_100206210;
  *(void *)(v0 + 32) = 0xED0000726574656DLL;
  *(void *)(v0 + 40) = PHVoicemailInboxListViewController.refreshTableHeaderView();
  *(void *)(v0 + 48) = 0;
  AccelerometerOrientationMonitorWrapper.wrapped.getter();
  swift_release();
  return v0;
}

uint64_t AccelerometerOrientationMonitorWrapper.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t AccelerometerOrientationMonitorWrapper.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for OrientationMonitorOrientationChangeSource.sourceName.getter in conformance AccelerometerOrientationMonitorWrapper()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for OrientationMonitorOrientationChangeSource.onOrientationChangeEvent.getter in conformance AccelerometerOrientationMonitorWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for OrientationMonitorOrientationChangeSource.onOrientationChangeEvent.setter in conformance AccelerometerOrientationMonitorWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for OrientationMonitorOrientationChangeSource.onOrientationChangeEvent.modify in conformance AccelerometerOrientationMonitorWrapper(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for OrientationMonitorOrientationChangeSource.onOrientationChangeEvent.modify in conformance AccelerometerOrientationMonitorWrapper;
}

uint64_t protocol witness for OrientationMonitorOrientationChangeSource.currentOrientation.getter in conformance AccelerometerOrientationMonitorWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for OrientationMonitorOrientationChangeSource.orientationEventsEnabled.getter in conformance AccelerometerOrientationMonitorWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))() & 1;
}

uint64_t protocol witness for OrientationMonitorOrientationChangeSource.orientationEventsEnabled.setter in conformance AccelerometerOrientationMonitorWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t (*protocol witness for OrientationMonitorOrientationChangeSource.orientationEventsEnabled.modify in conformance AccelerometerOrientationMonitorWrapper(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  return protocol witness for OrientationMonitorOrientationChangeSource.onOrientationChangeEvent.modify in conformance AccelerometerOrientationMonitorWrapper;
}

void protocol witness for OrientationMonitorOrientationChangeSource.onOrientationChangeEvent.modify in conformance AccelerometerOrientationMonitorWrapper(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_10011AD40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = _sSo19UIDeviceOrientationVIegy_ABytIegnr_TRTA_0;
  a2[1] = result;
  return result;
}

uint64_t sub_10011ADC8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10011AE18(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 168))(*a1);
}

uint64_t type metadata accessor for AccelerometerOrientationMonitorWrapper()
{
  return self;
}

uint64_t sub_10011AE84()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sSo19UIDeviceOrientationVytIegnr_ABIegy_TRTA_0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t _sSo19UIDeviceOrientationVIegy_ABytIegnr_TRTA_0(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10011AF20()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in AccelerometerOrientationMonitorWrapper.wrapped.getter(uint64_t a1)
{
  return closure #1 in AccelerometerOrientationMonitorWrapper.wrapped.getter(a1);
}

uint64_t one-time initialization function for title()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v6, static OpenMobilePhoneAppDeepLinks.title);
  __swift_project_value_buffer(v6, (uint64_t)static OpenMobilePhoneAppDeepLinks.title);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t OpenMobilePhoneAppDeepLinks.title.unsafeMutableAddressor()
{
  return OpenMobilePhoneAppDeepLinks.title.unsafeMutableAddressor(&one-time initialization token for title, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static OpenMobilePhoneAppDeepLinks.title);
}

uint64_t static OpenMobilePhoneAppDeepLinks.title.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenMobilePhoneAppDeepLinks.title.getter(&one-time initialization token for title, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)static OpenMobilePhoneAppDeepLinks.title, a1);
}

void *OpenMobilePhoneAppDeepLinks.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenMobilePhoneAppDeepLinks.openAppWhenRun;
}

void *OpenMobilePhoneAppDeepLinks.isDiscoverable.unsafeMutableAddressor()
{
  return &static OpenMobilePhoneAppDeepLinks.isDiscoverable;
}

uint64_t one-time initialization function for description()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v15 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = type metadata accessor for IntentDescription();
  __swift_allocate_value_buffer(v10, static OpenMobilePhoneAppDeepLinks.description);
  v14[1] = __swift_project_value_buffer(v10, (uint64_t)static OpenMobilePhoneAppDeepLinks.description);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v11 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v12(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v3);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  v12(v6, v11, v3);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v15);
  return IntentDescription.init(_:categoryName:searchKeywords:)();
}

uint64_t OpenMobilePhoneAppDeepLinks.description.unsafeMutableAddressor()
{
  return OpenMobilePhoneAppDeepLinks.title.unsafeMutableAddressor(&one-time initialization token for description, (uint64_t (*)(void))&type metadata accessor for IntentDescription, (uint64_t)static OpenMobilePhoneAppDeepLinks.description);
}

uint64_t OpenMobilePhoneAppDeepLinks.title.unsafeMutableAddressor(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return __swift_project_value_buffer(v5, a3);
}

uint64_t static OpenMobilePhoneAppDeepLinks.description.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenMobilePhoneAppDeepLinks.title.getter(&one-time initialization token for description, (uint64_t (*)(void))&type metadata accessor for IntentDescription, (uint64_t)static OpenMobilePhoneAppDeepLinks.description, a1);
}

uint64_t static OpenMobilePhoneAppDeepLinks.title.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

void *OpenMobilePhoneAppDeepLinks.attributionBundleIdentifier.unsafeMutableAddressor()
{
  return &static OpenMobilePhoneAppDeepLinks.attributionBundleIdentifier;
}

unint64_t static OpenMobilePhoneAppDeepLinks.attributionBundleIdentifier.getter()
{
  return 0xD000000000000015;
}

uint64_t OpenMobilePhoneAppDeepLinks.target.getter()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for OpenMobilePhoneAppDeepLinks.target : OpenMobilePhoneAppDeepLinks@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for OpenMobilePhoneAppDeepLinks.target : OpenMobilePhoneAppDeepLinks()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t OpenMobilePhoneAppDeepLinks.target.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*OpenMobilePhoneAppDeepLinks.target.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return OpenMobilePhoneAppDeepLinks.target.modify;
}

uint64_t OpenMobilePhoneAppDeepLinks.$target.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t default argument 0 of OpenMobilePhoneAppDeepLinks.init(target:)()
{
  uint64_t v17 = type metadata accessor for InputConnectionBehavior();
  uint64_t v0 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<MobilePhoneAppDeepLinks>);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  char v18 = 5;
  uint64_t v14 = type metadata accessor for IntentDialog();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  v15(v6, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v17);
  lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t protocol witness for OpenIntent.target.getter in conformance OpenMobilePhoneAppDeepLinks@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for OpenIntent.target.setter in conformance OpenMobilePhoneAppDeepLinks()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*protocol witness for OpenIntent.target.modify in conformance OpenMobilePhoneAppDeepLinks(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return OpenMobilePhoneAppDeepLinks.target.modify;
}

void OpenMobilePhoneAppDeepLinks.target.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t protocol witness for static _URLRepresentableIntent.urlRepresentation.getter in conformance OpenMobilePhoneAppDeepLinks(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();
  unint64_t v5 = lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();

  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t protocol witness for static AppIntentInternal.shortcutsMetadata.getter in conformance OpenMobilePhoneAppDeepLinks()
{
  return static AppIntentInternal.shortcutsMetadata.getter();
}

uint64_t protocol witness for static AppIntentInternal.sideEffect.getter in conformance OpenMobilePhoneAppDeepLinks()
{
  return static AppIntentInternal.sideEffect.getter();
}

uint64_t protocol witness for static AppIntent.title.getter in conformance OpenMobilePhoneAppDeepLinks@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for title != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenMobilePhoneAppDeepLinks.title);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t protocol witness for static AppIntent.authenticationPolicy.getter in conformance OpenMobilePhoneAppDeepLinks()
{
  return static AppIntent.authenticationPolicy.getter();
}

uint64_t protocol witness for static AppIntent.parameterSummary.getter in conformance OpenMobilePhoneAppDeepLinks()
{
  return static AppIntent.parameterSummary.getter();
}

uint64_t protocol witness for static AppIntent.description.getter in conformance OpenMobilePhoneAppDeepLinks()
{
  return static AppIntent.description.getter();
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenMobilePhoneAppDeepLinks(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();
  unint64_t v7 = lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();
  unint64_t v8 = lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  *unint64_t v5 = v2;
  v5[1] = protocol witness for AppIntent.perform() in conformance OpenMobilePhoneAppDeepLinks;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t protocol witness for AppIntent.perform() in conformance OpenMobilePhoneAppDeepLinks()
{
  uint64_t v2 = *v1;
  uint64_t result = swift_task_dealloc();
  if (v0)
  {
    unint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
  return result;
}

uint64_t protocol witness for AppIntent.init() in conformance OpenMobilePhoneAppDeepLinks@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OpenMobilePhoneAppDeepLinks.init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance OpenMobilePhoneAppDeepLinks(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t specialized OpenMobilePhoneAppDeepLinks.init()()
{
  uint64_t v17 = type metadata accessor for InputConnectionBehavior();
  uint64_t v0 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentDialog?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentParameter<MobilePhoneAppDeepLinks>);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  char v18 = 5;
  uint64_t v14 = type metadata accessor for IntentDialog();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  v15(v6, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v17);
  lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

unint64_t lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks;
  if (!lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Never and conformance Never()
{
  unint64_t result = lazy protocol witness table cache variable for type Never and conformance Never;
  if (!lazy protocol witness table cache variable for type Never and conformance Never)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Never and conformance Never);
  }
  return result;
}

uint64_t associated type witness table accessor for AppIntent.SummaryContent : ParameterSummary in OpenMobilePhoneAppDeepLinks()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10011C4F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10011C52C()
{
  return IntentParameter.wrappedValue.setter();
}

ValueMetadata *type metadata accessor for OpenMobilePhoneAppDeepLinks()
{
  return &type metadata for OpenMobilePhoneAppDeepLinks;
}

char *VoicemailSearchTableViewController.contactAvatarCardController.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController;
  unint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController];
  if (v2)
  {
    char v3 = *(char **)&v0[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController];
LABEL_5:
    id v11 = v2;
    return v3;
  }
  uint64_t result = (char *)[v0 tableView];
  if (result)
  {
    uint64_t v5 = result;
    unint64_t v6 = (objc_class *)type metadata accessor for ContactAvatarCardController();
    uint64_t v7 = (char *)objc_allocWithZone(v6);
    *(void *)&v7[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(void *)&v7[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController] = 0;
    v12.receiver = v7;
    v12.super_class = v6;
    unint64_t v8 = v0;
    uint64_t v9 = (char *)[super init];
    *(void *)&v9[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = &protocol witness table for VoicemailSearchTableViewController;
    swift_unknownObjectWeakAssign();

    swift_unknownObjectWeakAssign();
    uint64_t v10 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v9;
    char v3 = v9;

    unint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id VoicemailSearchTableViewController.voicemails.getter()
{
  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  [super voicemails];

  return v1;
}

void VoicemailSearchTableViewController.voicemails.setter(void *a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  [super setVoicemails:a1];

  *((unsigned char *)v1 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload) = 1;
}

void (*VoicemailSearchTableViewController.voicemails.modify(objc_super **a1))(objc_super **a1, char a2)
{
  objc_super v3 = (objc_super *)malloc(0x48uLL);
  *a1 = v3;
  v3[3].super_class = v1;
  uint64_t ObjectType = swift_getObjectType();
  v3[4].receiver = (id)ObjectType;
  v3->receiver = v1;
  v3->super_class = (Class)ObjectType;
  v3[3].receiver = [(objc_super *)v3 voicemails];
  return VoicemailSearchTableViewController.voicemails.modify;
}

void VoicemailSearchTableViewController.voicemails.modify(objc_super **a1, char a2)
{
  unint64_t v2 = *a1;
  id receiver = (*a1)[3].receiver;
  Class super_class = (*a1)[3].super_class;
  uint64_t v4 = (objc_class *)(*a1)[4].receiver;
  if (a2)
  {
    v2[1].id receiver = super_class;
    v2[1].Class super_class = v4;
    [v2 + 1 setVoicemails:receiver];
  }
  else
  {
    v2[2].id receiver = super_class;
    v2[2].Class super_class = v4;
    [super setVoicemails:receiver];

    *((unsigned char *)super_class + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload) = 1;
  }

  free(v2);
}

uint64_t VoicemailSearchTableViewController.searchText.getter()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VoicemailSearchTableViewController.searchText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*VoicemailSearchTableViewController.searchText.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t VoicemailSearchTableViewController.folderName.getter()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_folderName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VoicemailSearchTableViewController.folderName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_folderName);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*VoicemailSearchTableViewController.folderName.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

BOOL VoicemailSearchTableViewController.hasContentToDisplay.getter()
{
  v4.id receiver = v0;
  v4.Class super_class = (Class)swift_getObjectType();
  [super voicemails];
  id v2 = [v1 count];

  return (uint64_t)v2 > 0;
}

BOOL (*static VoicemailSearchTableViewController.voicemailPredicate.getter())(void *a1)
{
  return closure #1 in static VoicemailSearchTableViewController.voicemailPredicate.getter;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Message) -> (@unowned Bool)(uint64_t a1)
{
  id v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

BOOL closure #1 in static VoicemailSearchTableViewController.voicemailPredicate.getter(void *a1)
{
  return [a1 folder] == (id)1;
}

Swift::Void __swiftcall VoicemailSearchTableViewController.viewDidLoad()()
{
  v7.id receiver = v0;
  v7.Class super_class = (Class)swift_getObjectType();
  [super viewDidLoad];
  id v1 = [v0 tableView];
  if (v1)
  {
    uint64_t v2 = v1;
    type metadata accessor for VoicemailSearchViewCell();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v4 = String._bridgeToObjectiveC()();
    [v2 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v4];

    id v5 = [v0 tableView];
    if (v5)
    {
      unint64_t v6 = v5;
      [v5 setSeparatorInsetReference:1];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall VoicemailSearchTableViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  v10.id receiver = v2;
  v10.Class super_class = (Class)swift_getObjectType();
  [super viewWillAppear:a1];
  NSString v4 = VoicemailSearchTableViewController.contactAvatarCardController.getter();
  id v5 = ContactAvatarCardController.cardController.getter();

  id v6 = [v2 view];
  [v5 setSourceView:v6];

  uint64_t v7 = OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload;
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload) == 1)
  {
    id v8 = [v2 tableView];
    if (v8)
    {
      uint64_t v9 = v8;
      [v8 reloadData];

      *((unsigned char *)v2 + v7) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

void VoicemailSearchTableViewController.performTableViewDestructiveAction(at:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002053C0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v6 + v5, a1, v3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  void v11[4] = partial apply for closure #1 in VoicemailSearchTableViewController.performTableViewDestructiveAction(at:);
  _OWORD v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed [Message]) -> ();
  _OWORD v11[3] = &block_descriptor_4;
  uint64_t v9 = _Block_copy(v11);
  id v10 = v1;
  swift_release();
  [v10 performDeleteAtIndexPaths:isa completionBlock:v9];
  _Block_release(v9);
}

void closure #1 in VoicemailSearchTableViewController.performTableViewDestructiveAction(at:)(int a1, id a2)
{
  id v2 = [a2 voicemailController];
  if (v2)
  {
    uint64_t v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v3 trashMessages:isa];
  }
}

uint64_t sub_10011D450()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in VoicemailSearchTableViewController.performTableViewDestructiveAction(at:)(int a1)
{
  closure #1 in VoicemailSearchTableViewController.performTableViewDestructiveAction(at:)(a1, *(id *)(v1 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [Message]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

char *VoicemailSearchTableViewController.tableView(_:cellForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  NSString v10 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v12 = [a1 dequeueReusableCellWithIdentifier:v10 forIndexPath:isa];

  type metadata accessor for VoicemailSearchViewCell();
  uint64_t v13 = (char *)swift_dynamicCastClassUnconditional();
  id v14 = v12;
  id v15 = [v3 traitCollection];
  id v16 = [v15 preferredContentSizeCategory];

  if (UIContentSizeCategory.isAccessibilityCategory.getter())
  {
    if (one-time initialization token for leftSeperatorInsetWithAX != -1) {
      swift_once();
    }
    uint64_t v17 = &static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX;
  }
  else
  {
    if (one-time initialization token for leftSeperatorInsetWithoutAX != -1) {
      swift_once();
    }
    uint64_t v17 = &static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX;
  }
  double v18 = *(double *)v17;

  [v13 setSeparatorInset:0.0, v18, 0.0, 0.0];
  id v19 = [v3 messageAtIndex:IndexPath.row.getter()];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = (MPVoicemailMessageViewModel *)[v3 voicemailMessageViewModelForVoicemail:v19 isExpanded:1];
    id v22 = [v3 voicemailController];
    if (!v22
      || (uint64_t v23 = v22,
          id v24 = [v22 senderContactForMessage:v20],
          v23,
          !v24))
    {
      id v24 = [v3 unknownContactForMessage:v20];
    }
    VoicemailSearchViewCell.configureWithVoicemailMessageViewModel(item:contact:)(v21, (CNContact)v24);
    int64_t v25 = (uint64_t *)&v3[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
    swift_beginAccess();
    id v26 = (void *)v25[1];
    if (v26)
    {
      uint64_t v27 = *v25;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 0 && swift_dynamicCastClass())
      {
        uint64_t v28 = v13;
        v29._uint64_t countAndFlagsBits = v27;
        v29._object = v26;
        VoicemailSearchViewCell.highlight(text:)(v29);
      }
      else
      {
      }
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    uint64_t v34 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v34;
    *(void *)(v35 + 24) = v20;
    id v36 = (uint64_t *)&v13[OBJC_IVAR____TtC11MobilePhone23VoicemailSearchViewCell_callButtonTapHandler];
    swift_beginAccess();
    uint64_t v37 = *v36;
    *id v36 = (uint64_t)partial apply for closure #1 in VoicemailSearchTableViewController.tableView(_:cellForRowAt:);
    v36[1] = v35;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v37);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    int64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 134217984;
      uint64_t v33 = IndexPath.row.getter();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v40 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to get the voicemail message at index: %ld", v32, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return v13;
}

Swift::Void __swiftcall VoicemailSearchTableViewController.highlightMatchedText(in:)(UITableViewCell in)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText);
  swift_beginAccess();
  uint64_t v4 = (void *)v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    swift_bridgeObjectRetain();
    if (String.count.getter() >= 1)
    {
      type metadata accessor for VoicemailSearchViewCell();
      if (swift_dynamicCastClass())
      {
        uint64_t v6 = in.super.super.super.isa;
        v7._uint64_t countAndFlagsBits = v5;
        v7._object = v4;
        VoicemailSearchViewCell.highlight(text:)(v7);
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in VoicemailSearchTableViewController.tableView(_:cellForRowAt:)(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    VoicemailSearchTableViewController.handleDialRequest(for:)(a2);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)static SearchMetrics.shared;
  swift_beginAccess();
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  if (!v6) {
    goto LABEL_9;
  }
  Swift::String v7 = (void *)v6;
  uint64_t v8 = v6 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText;
  swift_beginAccess();
  if (!*(void *)(v8 + 8))
  {

LABEL_9:
    uint64_t v9 = -1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v5) + 0xE0))(2, 3, v9);
  }
  swift_bridgeObjectRetain();

  uint64_t v9 = String.count.getter();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v5) + 0xE0))(2, 3, v9);
}

void VoicemailSearchTableViewController.handleDialRequest(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [v1 voicemailController];
  if (v10
    && (id v11 = v10,
        id v12 = [v10 callProviderManager],
        v11,
        v12))
  {
    id v13 = *(id *)&v1[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_featureFlags];
    uint64_t v41 = v12;
    swift_unknownObjectRetain();
    id v40 = v13;
    id v14 = VoicemailTableViewModel.dialRequest.getter(v13, v41, a1);
    if (v14)
    {
      id v15 = v14;
      id v16 = v14;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v38 = v4;
        id v19 = (uint8_t *)swift_slowAlloc();
        id v36 = (void *)swift_slowAlloc();
        char v39 = a1;
        uint64_t v37 = v19;
        *(_DWORD *)id v19 = 138412290;
        aBlock[0] = v16;
        id v20 = v16;
        os_log_t v35 = v17;
        id v21 = v20;
        uint64_t v4 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v36 = v15;

        os_log_t v22 = v35;
        _os_log_impl((void *)&_mh_execute_header, v35, v18, "Initiating voicemail call with dial request: %@", v37, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v29 = [self sharedApplication];
      id v30 = [v16 URL];
      if (v30)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
        {
          id v30 = 0;
        }
        else
        {
          URL._bridgeToObjectiveC()(v31);
          id v30 = v32;
          (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
      }
      aBlock[4] = PHVoicemailInboxListViewController.refreshTableHeaderView();
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      aBlock[3] = &block_descriptor_14;
      uint64_t v33 = _Block_copy(aBlock);
      [v29 openURL:v30 withCompletionHandler:v33];
      _Block_release(v33);
      swift_unknownObjectRelease();

      return;
    }
    int64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to dial back, dialRequest is nil", v27, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v23, "Failed to dial back, callProviderManager is nil", v24, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v28 = v41;
}

uint64_t VoicemailSearchTableViewController.tableView(_:didSelectRowAt:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10.id receiver = v2;
  v10.Class super_class = ObjectType;
  [super tableView:a1 didSelectRowAtIndexPath:isa];

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static SearchMetrics.shared;
  uint64_t v7 = &v2[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
  swift_beginAccess();
  if (*((void *)v7 + 1))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = -1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v6) + 0xE0))(1, 3, v8);
}

uint64_t VoicemailSearchTableViewController.configure(cardController:presentationResultForIndex:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [v1 messageAtIndex:IndexPath.row.getter()];
  if (!v4) {
    return 2;
  }
  id v5 = v4;
  swift_unknownObjectRetain();
  id v6 = [v2 voicemailController];
  if (!v6
    || (uint64_t v7 = v6,
        id v8 = [v6 senderContactForMessage:v5],
        v7,
        !v8))
  {
    id v8 = [v2 unknownContactForMessage:v5];
  }
  [a1 setContact:v8];
  id v9 = [v2 voicemailMessageViewModelForVoicemail:v5 isExpanded:1];
  NSString v10 = [v9 localizedSubtitle];

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [a1 setMessage:v10];
  swift_unknownObjectRelease_n();

  return 0;
}

id VoicemailSearchTableViewController.__allocating_init(navigationController:voicemailController:)(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone(v2) initWithNavigationController:a1 voicemailController:a2];

  return v5;
}

id VoicemailSearchTableViewController.init(navigationController:voicemailController:)(void *a1, void *a2)
{
  id v4 = specialized VoicemailSearchTableViewController.init(navigationController:voicemailController:)((uint64_t)a1, (uint64_t)a2);

  return v4;
}

id VoicemailSearchTableViewController.init(style:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = v2;
  Logger.init(subsystem:category:)();
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_featureFlags;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload] = 1;
  *(void *)&v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController] = 0;
  uint64_t v7 = &v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
  *uint64_t v7 = 0;
  v7[1] = 0;
  id v8 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_folderName];
  id v9 = [self mainBundle];
  v16._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0x49414D4543494F56;
  v10._object = (void *)0xEA0000000000534CLL;
  v11.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v11.value._object = (void *)0xE900000000000073;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v16._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v16);

  *id v8 = v13;
  v15.id receiver = v5;
  v15.Class super_class = ObjectType;
  return [super initWithStyle:a1];
}

id VoicemailSearchTableViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v8 = v4;
  Logger.init(subsystem:category:)();
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_featureFlags;
  *(void *)&v8[v9] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  v8[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload] = 1;
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController] = 0;
  Swift::String v10 = &v8[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
  *Swift::String v10 = 0;
  v10[1] = 0;
  Swift::String_optional v11 = (Swift::String *)&v8[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_folderName];
  id v12 = [self mainBundle];
  v21._object = (void *)0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0x49414D4543494F56;
  v13._object = (void *)0xEA0000000000534CLL;
  v14.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v14.value._object = (void *)0xE900000000000073;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0;
  Swift::String v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v21);

  Swift::String *v11 = v16;
  if (a2)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v17 = 0;
  }
  v20.id receiver = v8;
  v20.Class super_class = ObjectType;
  [super initWithNibName:v17 bundle:a3];

  return v18;
}

id VoicemailSearchTableViewController.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = v2;
  Logger.init(subsystem:category:)();
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_featureFlags;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload] = 1;
  *(void *)&v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController] = 0;
  uint64_t v7 = &v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
  *uint64_t v7 = 0;
  v7[1] = 0;
  id v8 = (Swift::String *)&v5[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_folderName];
  id v9 = [self mainBundle];
  v17._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0x49414D4543494F56;
  v10._object = (void *)0xEA0000000000534CLL;
  v11.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v11.value._object = (void *)0xE900000000000073;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v17);

  *id v8 = v13;
  v16.id receiver = v5;
  v16.Class super_class = ObjectType;
  id v14 = [super initWithCoder:a1];

  return v14;
}

uint64_t protocol witness for ContactAvatarCardControllerProtocol.configure(cardController:presentationResultForIndex:) in conformance VoicemailSearchTableViewController(void *a1)
{
  return VoicemailSearchTableViewController.configure(cardController:presentationResultForIndex:)(a1);
}

uint64_t sub_10011EF5C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011EF94()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in VoicemailSearchTableViewController.tableView(_:cellForRowAt:)()
{
  return closure #1 in VoicemailSearchTableViewController.tableView(_:cellForRowAt:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

id specialized VoicemailSearchTableViewController.init(navigationController:voicemailController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = v3;
  Logger.init(subsystem:category:)();
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_featureFlags;
  *(void *)&v7[v8] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  v7[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_dataSourceNeedsReload] = 1;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController____lazy_storage___contactAvatarCardController] = 0;
  id v9 = &v7[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
  *id v9 = 0;
  v9[1] = 0;
  Swift::String v10 = (Swift::String *)&v7[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_folderName];
  id v11 = [self mainBundle];
  v18._object = (void *)0xE000000000000000;
  v12._uint64_t countAndFlagsBits = 0x49414D4543494F56;
  v12._object = (void *)0xEA0000000000534CLL;
  v13.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v13.value._object = (void *)0xE900000000000073;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0;
  Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v18);

  *Swift::String v10 = v15;
  v17.id receiver = v7;
  v17.Class super_class = ObjectType;
  return [super initWithNavigationController:a1 voicemailController:a2];
}

uint64_t ObjC metadata update function for VoicemailSearchTableViewController()
{
  return type metadata accessor for VoicemailSearchTableViewController();
}

uint64_t type metadata accessor for VoicemailSearchTableViewController()
{
  uint64_t result = type metadata singleton initialization cache for VoicemailSearchTableViewController;
  if (!type metadata singleton initialization cache for VoicemailSearchTableViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for VoicemailSearchTableViewController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *OrientationMonitor.__allocating_init(logger:lockSource:orientationSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_allocObject();
  uint64_t v8 = specialized OrientationMonitor.init(logger:lockSource:orientationSource:)(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 88) - 8) + 8))(a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a2);
  return v8;
}

uint64_t @objc OrientationMonitor.orientationEventsEnabled.getter()
{
  return OrientationMonitor.orientationEventsEnabled.getter() & 1;
}

uint64_t OrientationMonitor.orientationEventsEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t @objc OrientationMonitor.orientationEventsEnabled.setter(uint64_t a1, uint64_t a2, char a3)
{
  swift_retain();
  OrientationMonitor.orientationEventsEnabled.setter(a3);

  return swift_release();
}

void OrientationMonitor.orientationEventsEnabled.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  OrientationMonitor.orientationEventsEnabled.didset();
}

void OrientationMonitor.orientationEventsEnabled.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v5 = 67109120;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "setOrientationEventsEnabled: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  swift_beginAccess();
  uint64_t v6 = *((unsigned __int8 *)v1 + 16);
  swift_beginAccess();
  (*(void (**)(uint64_t, void))(*(void *)(v2 + 104) + 56))(v6, *(void *)(v2 + 88));
  uint64_t v7 = swift_endAccess();
  if (*((unsigned char *)v1 + 16) == 1) {
    OrientationMonitor.updateCachedOrientationValues()(v7);
  }
}

uint64_t (*OrientationMonitor.orientationEventsEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return OrientationMonitor.orientationEventsEnabled.modify;
}

uint64_t OrientationMonitor.orientationEventsEnabled.modify(uint64_t a1, char a2)
{
  return OrientationMonitor.orientationEventsEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))OrientationMonitor.orientationEventsEnabled.didset);
}

uint64_t @objc OrientationMonitor.deviceOrientation.getter()
{
  return OrientationMonitor.deviceOrientation.getter();
}

uint64_t OrientationMonitor.deviceOrientation.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t @objc OrientationMonitor.deviceOrientation.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  OrientationMonitor.deviceOrientation.setter(a3);

  return swift_release();
}

uint64_t OrientationMonitor.deviceOrientation.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return OrientationMonitor.deviceOrientation.didset();
}

uint64_t OrientationMonitor.deviceOrientation.didset()
{
  uint64_t result = (*(uint64_t (**)(void))(*v0 + 256))();
  if ((result & 1) == 0)
  {
    swift_beginAccess();
    uint64_t result = v0[3];
    if ((unint64_t)(result - 1) <= 3) {
      return (*(uint64_t (**)(void))(*v0 + 240))();
    }
  }
  return result;
}

uint64_t (*OrientationMonitor.deviceOrientation.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return OrientationMonitor.deviceOrientation.modify;
}

uint64_t OrientationMonitor.deviceOrientation.modify(uint64_t a1, char a2)
{
  return OrientationMonitor.orientationEventsEnabled.modify(a1, a2, (uint64_t (*)(uint64_t))OrientationMonitor.deviceOrientation.didset);
}

uint64_t OrientationMonitor.orientationEventsEnabled.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t @objc OrientationMonitor.interfaceOrientation.getter()
{
  swift_retain();
  uint64_t v0 = OrientationMonitor.interfaceOrientation.getter();
  swift_release();
  return v0;
}

uint64_t OrientationMonitor.interfaceOrientation.getter()
{
  char v1 = (*(uint64_t (**)(void))(*v0 + 256))();
  uint64_t v2 = *v0;
  if (v1) {
    return *(uint64_t *)((char *)v0 + *(void *)(v2 + 168));
  }
  os_log_type_t v4 = *(uint64_t (**)(void))(v2 + 232);

  return v4();
}

uint64_t @objc OrientationMonitor.lastValidInterfaceOrientation.getter(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t OrientationMonitor.lastValidInterfaceOrientation.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t @objc OrientationMonitor.lastValidInterfaceOrientation.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(a1 + 32) = a3;
  return result;
}

uint64_t OrientationMonitor.lastValidInterfaceOrientation.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*OrientationMonitor.lastValidInterfaceOrientation.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

void OrientationMonitor.isOrientationLocked.didset(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  swift_beginAccess();
  if (v2[40] != v3)
  {
    swift_retain_n();
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 8) = 2080;
      uint64_t v7 = *(void *)&v2[*(void *)(*(void *)v2 + 168)];
      swift_release();
      uint64_t v8 = v7 - 1;
      unint64_t v9 = 0xE800000000000000;
      uint64_t v10 = 0x7469617274726F70;
      switch(v8)
      {
        case 0:
          break;
        case 1:
          unint64_t v9 = 0x800000010023F420;
          uint64_t v10 = 0xD000000000000012;
          break;
        case 2:
          unint64_t v9 = 0xED00007466654C65;
          goto LABEL_9;
        case 3:
          unint64_t v9 = 0xEE00746867695265;
LABEL_9:
          uint64_t v10 = 0x70616373646E616CLL;
          break;
        case 4:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x705565636166;
          break;
        case 5:
          uint64_t v10 = 0x6E776F4465636166;
          break;
        default:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x6E776F6E6B6E75;
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "set orientation locked: %{BOOL}d to orientation: %s", (uint8_t *)v6, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if ((v2[40] & 1) == 0)
    {
      id v11 = [self defaultCenter];
      if (one-time initialization token for inCallOrientationMonitorEvent != -1) {
        swift_once();
      }
      uint64_t v12 = static NSNotificationName.inCallOrientationMonitorEvent;
      unint64_t v13 = OrientationMonitor.notificationInfo.getter();
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v11 postNotificationName:v12 object:0 userInfo:isa];
    }
  }
}

uint64_t OrientationMonitor.isOrientationLocked.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

void OrientationMonitor.isOrientationLocked.setter(char a1)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(v1 + 40) = a1;
  OrientationMonitor.isOrientationLocked.didset(v3);
}

uint64_t OrientationMonitor.lockedOrientation.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 168));
}

uint64_t OrientationMonitor.lockedOrientation.setter(uint64_t a1)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 168)) = a1;
  uint64_t result = *(void *)(v1 + *(void *)(*(void *)v1 + 168));
  if ((unint64_t)(result - 1) <= 3) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 240))();
  }
  return result;
}

void *OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = specialized OrientationMonitor.init(logger:lockSource:orientationSource:)(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 88) - 8) + 8))(a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 80) - 8) + 8))(a2);
  return v7;
}

void closure #1 in OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 208))(a1);
    char v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000010023F4C0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v6 = a1 - 1;
      unint64_t v7 = 0xE800000000000000;
      uint64_t v8 = 0x7469617274726F70;
      switch(v6)
      {
        case 0:
          break;
        case 1:
          unint64_t v7 = 0x800000010023F420;
          uint64_t v8 = 0xD000000000000012;
          break;
        case 2:
          unint64_t v7 = 0xED00007466654C65;
          goto LABEL_8;
        case 3:
          unint64_t v7 = 0xEE00746867695265;
LABEL_8:
          uint64_t v8 = 0x70616373646E616CLL;
          break;
        case 4:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x705565636166;
          break;
        case 5:
          uint64_t v8 = 0x6E776F4465636166;
          break;
        default:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x6E776F6E6B6E75;
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "posting %s for orientation: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v9 = [self defaultCenter];
    if (one-time initialization token for inCallOrientationMonitorEvent != -1) {
      swift_once();
    }
    uint64_t v10 = static NSNotificationName.inCallOrientationMonitorEvent;
    unint64_t v11 = OrientationMonitor.notificationInfo.getter();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 postNotificationName:v10 object:0 userInfo:isa];
    swift_release();
  }
}

uint64_t closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10 = a1;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  Swift::String v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v12);
  Swift::String v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    objc_super v20 = (unsigned char *)result;
    if (v10)
    {
      swift_beginAccess();
      char v30 = v20[40];
      unsigned char v20[40] = 0;
LABEL_25:
      OrientationMonitor.isOrientationLocked.didset(v30);
      return swift_release();
    }
    uint64_t v21 = result + *(void *)(*(void *)result + 152);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v21, a3);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a3);
    id v23 = [self currentDevice];
    id v24 = [v23 userInterfaceIdiom];

    if (v24 == (id)1)
    {
      int64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        v48[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v28 = 0x7469617274726F70;
        unint64_t v29 = 0xE800000000000000;
        switch(v22)
        {
          case 1:
            break;
          case 2:
            unint64_t v29 = 0x800000010023F420;
            uint64_t v28 = 0xD000000000000012;
            break;
          case 3:
            uint64_t v28 = 0x70616373646E616CLL;
            unint64_t v29 = 0xED00007466654C65;
            break;
          case 4:
            uint64_t v28 = 0x70616373646E616CLL;
            unint64_t v29 = 0xEE00746867695265;
            break;
          case 5:
            unint64_t v29 = 0xE600000000000000;
            uint64_t v28 = 0x705565636166;
            break;
          case 6:
            uint64_t v28 = 0x6E776F4465636166;
            break;
          default:
            unint64_t v29 = 0xE700000000000000;
            uint64_t v28 = 0x6E776F6E6B6E75;
            break;
        }
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "SpringBoardOrientationLockChangedNotification: SpringBoard is locked to %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      *(void *)&v20[*(void *)(*(void *)v20 + 168)] = v22;
      uint64_t v37 = *(void *)v20;
      uint64_t v38 = *(void *)&v20[*(void *)(*(void *)v20 + 168)];
      if ((unint64_t)(v38 - 1) >= 4) {
        goto LABEL_24;
      }
    }
    else
    {
      swift_retain_n();
      os_log_type_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        v48[0] = v34;
        *(_DWORD *)uint64_t v33 = 136315394;
        uint64_t v46 = v34;
        unint64_t v35 = 0xE800000000000000;
        uint64_t v36 = 0x7469617274726F70;
        switch(v22)
        {
          case 1:
            break;
          case 2:
            unint64_t v35 = 0x800000010023F420;
            uint64_t v36 = 0xD000000000000012;
            break;
          case 3:
            uint64_t v36 = 0x70616373646E616CLL;
            unint64_t v35 = 0xED00007466654C65;
            break;
          case 4:
            uint64_t v36 = 0x70616373646E616CLL;
            unint64_t v35 = 0xEE00746867695265;
            break;
          case 5:
            unint64_t v35 = 0xE600000000000000;
            uint64_t v36 = 0x705565636166;
            break;
          case 6:
            uint64_t v36 = 0x6E776F4465636166;
            break;
          default:
            unint64_t v35 = 0xE700000000000000;
            uint64_t v36 = 0x6E776F6E6B6E75;
            break;
        }
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        char v39 = &v20[*(void *)(*(void *)v20 + 160)];
        swift_beginAccess();
        (*(void (**)(char *, unsigned char *, uint64_t))(v11 + 16))(v14, v39, a4);
        uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
        swift_release();
        uint64_t v41 = v40 - 1;
        unint64_t v42 = 0xE800000000000000;
        uint64_t v43 = 0x7469617274726F70;
        switch(v41)
        {
          case 0:
            break;
          case 1:
            unint64_t v42 = 0x800000010023F420;
            uint64_t v43 = 0xD000000000000012;
            break;
          case 2:
            uint64_t v43 = 0x70616373646E616CLL;
            unint64_t v42 = 0xED00007466654C65;
            break;
          case 3:
            uint64_t v43 = 0x70616373646E616CLL;
            unint64_t v42 = 0xEE00746867695265;
            break;
          case 4:
            unint64_t v42 = 0xE600000000000000;
            uint64_t v43 = 0x705565636166;
            break;
          case 5:
            uint64_t v43 = 0x6E776F4465636166;
            break;
          default:
            unint64_t v42 = 0xE700000000000000;
            uint64_t v43 = 0x6E776F6E6B6E75;
            break;
        }
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "SpringBoardOrientationLockChangedNotification: SpringBoard is locked to %s, but using %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      unint64_t v44 = &v20[*(void *)(*(void *)v20 + 160)];
      swift_beginAccess();
      (*(void (**)(char *, unsigned char *, uint64_t))(v11 + 16))(v14, v44, a4);
      uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
      *(void *)&v20[*(void *)(*(void *)v20 + 168)] = v45;
      uint64_t v37 = *(void *)v20;
      uint64_t v38 = *(void *)&v20[*(void *)(*(void *)v20 + 168)];
      if ((unint64_t)(v38 - 1) > 3) {
        goto LABEL_24;
      }
    }
    (*(void (**)(uint64_t))(v37 + 240))(v38);
LABEL_24:
    swift_beginAccess();
    char v30 = v20[40];
    unsigned char v20[40] = 1;
    goto LABEL_25;
  }
  return result;
}

void OrientationMonitor.updateCachedOrientationValues()(uint64_t a1)
{
  uint64_t v2 = v1;
  char v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = v3[11];
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v6);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = &v2[v3[20]];
  swift_beginAccess();
  (*(void (**)(char *, unsigned char *, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(v3[13] + 40))(v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(uint64_t))(*(void *)v2 + 208))(v14);
  uint64_t v15 = &v2[*(void *)(*(void *)v2 + 152)];
  swift_beginAccess();
  uint64_t v16 = *(void (**)(char *, unsigned char *, uint64_t))(v5 + 16);
  v16(v8, v15, v4);
  uint64_t v17 = v3[12];
  LOBYTE(v12) = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(v4, v17);
  Swift::String v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  if (v12)
  {
    v16(v8, v15, v4);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 40))(v4, v17);
    v18(v8, v4);
    *(void *)&v2[*(void *)(*(void *)v2 + 168)] = v19;
    if ((unint64_t)(*(void *)&v2[*(void *)(*(void *)v2 + 168)] - 1) <= 3) {
      (*(void (**)(void))(*(void *)v2 + 240))();
    }
    swift_beginAccess();
    char v20 = v2[40];
    v2[40] = 1;
    OrientationMonitor.isOrientationLocked.didset(v20);
  }
}

uint64_t *OrientationMonitor.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + direct field offset for OrientationMonitor.logger;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 152));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 160));
  return v0;
}

uint64_t OrientationMonitor.__deallocating_deinit()
{
  OrientationMonitor.deinit();

  return swift_deallocClassInstance();
}

void *specialized OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)*v3;
  *((unsigned char *)v4 + 16) = 0;
  v4[3] = 0;
  void v4[4] = 0;
  *((unsigned char *)v4 + 40) = 0;
  *(void *)((char *)v4 + v7[21]) = 0;
  uint64_t v8 = (char *)v4 + direct field offset for OrientationMonitor.logger;
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v23 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v8, a1, v21);
  uint64_t v9 = v7[10];
  (*(void (**)(void))(*(void *)(v9 - 8) + 16))();
  uint64_t v10 = v7[11];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))((char *)v4 + *(void *)(*v4 + 160), a3, v10);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v9;
  uint64_t v12[3] = v10;
  uint64_t v13 = v7[12];
  v12[4] = v13;
  uint64_t v14 = v7[13];
  _OWORD v12[5] = v14;
  v12[6] = v11;
  swift_beginAccess();
  uint64_t v15 = *(void (**)(void (*)(uint64_t), void *, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  v15(partial apply for closure #1 in OrientationMonitor.init(logger:lockSource:orientationSource:), v12, v10, v14);
  swift_endAccess();
  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v9;
  v17[3] = v10;
  v17[4] = v13;
  v17[5] = v14;
  v17[6] = v16;
  swift_beginAccess();
  Swift::String v18 = *(void (**)(uint64_t (*)(char), void *, uint64_t, uint64_t))(v13 + 24);
  swift_retain();
  v18(partial apply for closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:), v17, v9, v13);
  swift_endAccess();
  uint64_t v19 = swift_release();
  OrientationMonitor.updateCachedOrientationValues()(v19);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, v21);
  return v4;
}

uint64_t sub_1001215A8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1001215F8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184))(*a1);
}

uint64_t sub_100121640()
{
  return 32;
}

__n128 sub_10012164C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100121658@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1001216A4(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208))(*a1);
}

uint64_t sub_1001216EC()
{
  return 32;
}

__n128 sub_1001216F8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100121704@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_100121750(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 240))(*a1);
}

uint64_t sub_100121798()
{
  return 32;
}

__n128 sub_1001217A4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1001217B0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 256))();
  *a2 = result & 1;
  return result;
}

void sub_100121808(char *a1)
{
}

uint64_t sub_100121830()
{
  return 32;
}

__n128 sub_10012183C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata instantiation function for OrientationMonitor()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for OrientationMonitor()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for OrientationMonitor()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100121990()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001219C8()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void partial apply for closure #1 in OrientationMonitor.init(logger:lockSource:orientationSource:)(uint64_t a1)
{
}

uint64_t partial apply for closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:)(char a1)
{
  return closure #2 in OrientationMonitor.init(logger:lockSource:orientationSource:)(a1 & 1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

id static TUMetadataDestinationID.metadataDestinationID(with:)()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v0 = static TUMetadataDestinationID._metadataDestinationID(with:countryCodeKey:destinationIDKey:)();
  swift_release();
  swift_release();
  return v0;
}

const char *keypath_get_selector_senderISOCountryCode()
{
  return "senderISOCountryCode";
}

id static TUMetadataDestinationID._metadataDestinationID(with:countryCodeKey:destinationIDKey:)()
{
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  if (!v8) {
    return 0;
  }
  uint64_t v0 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v0 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
  }
  if (!v0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  unint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 normalizedPhoneNumberHandleForValue:v2 isoCountryCode:v3];

  if (!v4) {
    return 0;
  }
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithHandle:v4];

  return v5;
}

void sub_100121C90(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

const char *keypath_get_selector_senderDestinationID()
{
  return "senderDestinationID";
}

void key path getter for Message.senderISOCountryCode : Message(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_100121D20(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  NSString v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)NSString v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  NSString v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_unknownObjectRetain();
LABEL_5:
    *NSString v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  NSString v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)NSString v3 = v4;
    return destroy for GreetingAccount.AccountType;
  }
  __break(1u);
  return result;
}

char *ContactSearchTableViewController.contactAvatarCardController.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___contactAvatarCardController;
  NSString v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___contactAvatarCardController];
  if (v2)
  {
    NSString v3 = *(char **)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___contactAvatarCardController];
  }
  else
  {
    id v4 = ContactSearchTableViewController.tableView.getter();
    id v5 = (objc_class *)type metadata accessor for ContactAvatarCardController();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(void *)&v6[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController] = 0;
    v12.id receiver = v6;
    v12.Class super_class = v5;
    uint64_t v7 = v0;
    uint64_t v8 = (char *)[v12 init];
    *(void *)&v8[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = &protocol witness table for ContactSearchTableViewController;
    swift_unknownObjectWeakAssign();

    swift_unknownObjectWeakAssign();
    uint64_t v9 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v8;
    NSString v3 = v8;

    NSString v2 = 0;
  }
  id v10 = v2;
  return v3;
}

void *ContactSearchTableViewController.contacts.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xF0))();
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      ++v5;
      (*(void (**)(void))((swift_isaMask & *v6) + 0x68))();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v3 != v5);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t ContactSearchTableViewController.contactSearchResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContactSearchTableViewController.contactSearchResults.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchResults);
  swift_beginAccess();
  *uint64_t v3 = a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_dataSourceNeedsReload) = 1;
  *(void *)(v1 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_currentIDSStatusPage) = -1;
  return result;
}

uint64_t (*ContactSearchTableViewController.contactSearchResults.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ContactSearchTableViewController.contactSearchResults.modify;
}

uint64_t ContactSearchTableViewController.contactSearchResults.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(unsigned char *)(v5 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_dataSourceNeedsReload) = 1;
    *(void *)(v5 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_currentIDSStatusPage) = -1;
  }
  return result;
}

uint64_t ContactSearchTableViewController.hostingNavigationController.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void ContactSearchTableViewController.hostingNavigationController.setter(void *a1)
{
}

void (*ContactSearchTableViewController.hostingNavigationController.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_hostingNavigationController;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return VoicemailSearchMetadataView.delegate.modify;
}

void *ContactSearchTableViewController.delegate.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_delegate);
  swift_beginAccess();
  unint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ContactSearchTableViewController.delegate.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_delegate);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*ContactSearchTableViewController.delegate.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t ContactSearchTableViewController.searchText.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_searchText);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ContactSearchTableViewController.searchText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_searchText);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ContactSearchTableViewController.searchText.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

id ContactSearchTableViewController.tableView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___tableView;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___tableView];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___tableView];
  }
  else
  {
    id v4 = closure #1 in ContactSearchTableViewController.tableView.getter(v0);
    uint64_t v5 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ContactSearchTableViewController.tableView.getter(void *a1)
{
  id v2 = [objc_allocWithZone((Class)UITableView) initWithFrame:0 style:0.0];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  id result = [a1 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  id v4 = result;
  [result addSubview:v2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002053B0;
  id v6 = [v2 widthAnchor];
  id result = [a1 view];
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = result;
  id v8 = [result widthAnchor];

  id v9 = [v6 constraintEqualToAnchor:v8];
  *(void *)(v5 + 32) = v9;
  id v10 = [v2 heightAnchor];
  id result = [a1 view];
  if (result)
  {
    uint64_t v11 = result;
    objc_super v12 = self;
    id v13 = [v11 heightAnchor];

    id v14 = [v10 constraintEqualToAnchor:v13];
    *(void *)(v5 + 40) = v14;
    specialized Array._endMutation()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 activateConstraints:isa];

    type metadata accessor for ContactSearchViewCell();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v17 = String._bridgeToObjectiveC()();
    [v2 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v17];

    Swift::String v18 = self;
    id v19 = v2;
    id v20 = [v18 systemBackgroundColor];
    [v19 setBackgroundColor:v20];

    [v19 setSeparatorInsetReference:1];
    return v19;
  }
LABEL_7:
  __break(1u);
  return result;
}

id ContactSearchTableViewController.__allocating_init(contactSearchType:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ContactSearchTableViewController.init(contactSearchType:)(a1);
}

id ContactSearchTableViewController.init(contactSearchType:)(uint64_t a1)
{
  id v3 = v1;
  Logger.init(subsystem:category:)();
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_idsQueryPageSize] = 20;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_currentIDSStatusPage] = -1;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactIDSQuerySubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&v3[v4] = PassthroughSubject.init()();
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___contactAvatarCardController] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchResults] = _swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_delegate] = 0;
  uint64_t v5 = &v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_searchText];
  *uint64_t v5 = 0;
  v5[1] = 0;
  v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_dataSourceNeedsReload] = 1;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___tableView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchType] = a1;

  v11.id receiver = v3;
  v11.Class super_class = (Class)type metadata accessor for ContactSearchTableViewController();
  id v6 = [super initWithNibName:0 bundle:0];
  uint64_t v7 = self;
  id v8 = v6;
  id v9 = [v7 defaultCenter];
  [v9 addObserver:v8 selector:"handleTUIDSLookupManagerStatusChanged" name:TUIDSLookupManagerStatusChangedNotification object:0];

  return v8;
}

uint64_t type metadata accessor for ContactSearchTableViewController()
{
  uint64_t result = type metadata singleton initialization cache for ContactSearchTableViewController;
  if (!type metadata singleton initialization cache for ContactSearchTableViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall ContactSearchTableViewController.viewDidLoad()()
{
  v6.id receiver = v0;
  v6.Class super_class = (Class)type metadata accessor for ContactSearchTableViewController();
  [super viewDidLoad];
  id v1 = [v0 view];
  if (v1)
  {
    id v2 = v1;
    id v3 = [self systemBackgroundColor];
    [v2 setBackgroundColor:v3];

    id v4 = ContactSearchTableViewController.tableView.getter();
    [v4 setDataSource:v0];

    id v5 = ContactSearchTableViewController.tableView.getter();
    [v5 setDelegate:v0];
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ContactSearchTableViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  id v2 = v1;
  v9.id receiver = v2;
  v9.Class super_class = (Class)type metadata accessor for ContactSearchTableViewController();
  [super viewWillAppear:a1];
  id v4 = ContactSearchTableViewController.contactAvatarCardController.getter();
  id v5 = ContactAvatarCardController.cardController.getter();

  id v6 = [v2 view];
  [v5 setSourceView:v6];

  uint64_t v7 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_dataSourceNeedsReload;
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_dataSourceNeedsReload) == 1)
  {
    id v8 = ContactSearchTableViewController.tableView.getter();
    [v8 reloadData];

    *((unsigned char *)v2 + v7) = 0;
  }
}

Swift::Int __swiftcall ContactSearchTableViewController.tableView(_:numberOfRowsInSection:)(UITableView _, Swift::Int numberOfRowsInSection)
{
  unint64_t v3 = (*(uint64_t (**)(Class, Swift::Int))((swift_isaMask & *v2) + 0xE8))(_.super.super.super.super.isa, numberOfRowsInSection);
  if (v3 >> 62) {
    Swift::Int v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    Swift::Int v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ContactSearchTableViewController.tableView(_:cellForRowAt:)(void *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  objc_super v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v10 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v12 = [a1 dequeueReusableCellWithIdentifier:v10 forIndexPath:isa];

  type metadata accessor for ContactSearchViewCell();
  id v13 = (void *)swift_dynamicCastClassUnconditional();
  id v14 = v12;
  id v15 = [v3 traitCollection];
  id v16 = [v15 preferredContentSizeCategory];

  if (UIContentSizeCategory.isAccessibilityCategory.getter())
  {
    if (one-time initialization token for leftSeperatorInsetWithAX != -1) {
      swift_once();
    }
    NSString v17 = &static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX;
  }
  else
  {
    if (one-time initialization token for leftSeperatorInsetWithoutAX != -1) {
      swift_once();
    }
    NSString v17 = &static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX;
  }
  double v18 = *(double *)v17;

  [v13 setSeparatorInset:0.0, v18, 0.0, 0.0];
  uint64_t v19 = IndexPath.row.getter();
  unint64_t v20 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xE8))();
  if (v20 >> 62) {
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v19 >= v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 134217984;
      uint64_t v35 = IndexPath.row.getter();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v37 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "ContactSearchTableViewController: Failed to get the contact at index: %ld", v34, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    return (uint64_t)v13;
  }
  unint64_t v22 = IndexPath.row.getter();
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xF0))();
  if ((result & 0xC000000000000001) != 0)
  {
    id v24 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v22 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v24 = *(id *)(result + 8 * v22 + 32);
LABEL_15:
    int64_t v25 = v24;
    uint64_t v26 = swift_bridgeObjectRelease();
    uint64_t v27 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x138))(v26);
    uint64_t v29 = v28;
    uint64_t v37 = *(void *)((char *)v3 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactIDSQuerySubject);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>);
    uint64_t v30 = Publisher.eraseToAnyPublisher()();
    ContactSearchViewCell.configure(contactSearchResult:searchText:idsStatusUpdatedPublisher:searchType:)(v25, v27, v29, v30, *(void *)((char *)v3 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchType));

    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v31 = IndexPath.row.getter();
    (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x1B0))(v31);
    (*(void (**)(void *))((swift_isaMask & *v3) + 0x1A8))(v13);
    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

void ContactSearchTableViewController.tableView(_:didSelectRowAt:)(void *a1, void *a2)
{
  unint64_t v3 = v2;
  uint64_t v56 = a1;
  uint64_t v57 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v57 - 8);
  uint64_t v6 = __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  NSString v10 = (char *)&v52 - v9;
  uint64_t v11 = IndexPath.row.getter();
  id v12 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0xE8);
  unint64_t v13 = v12();
  if (v13 >> 62) {
    id v14 = (uint8_t *)_CocoaArrayWrapper.endIndex.getter();
  }
  else {
    id v14 = *(uint8_t **)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v11 >= (uint64_t)v14)
  {
    uint64_t v31 = a2;
    uint64_t v32 = v57;
    (*(void (**)(char *, void *, uint64_t))(v5 + 16))(v8, v31, v57);
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 134217984;
      uint64_t v36 = IndexPath.row.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v32);
      uint64_t v59 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ContactSearchTableViewController: Cannot find contact at index: %ld", v35, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v32);
    }

    return;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x120))(v15);
  Swift::String v55 = a2;
  if (v16)
  {
    NSString v17 = v16;
    uint64_t v18 = v12();
    unint64_t v19 = IndexPath.row.getter();
    if ((v18 & 0xC000000000000001) == 0)
    {
      if ((v19 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v19 < *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v20 = *(id *)(v18 + 8 * v19 + 32);
        goto LABEL_9;
      }
      __break(1u);
LABEL_31:
      id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_19;
    }
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    id v22 = [v21 identifier];

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int64_t v25 = v24;

    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    uint64_t v27 = (void *)ContactSearchManager.contactForContactViewController(identifier:)(v26);
    swift_bridgeObjectRelease();

    a2 = v55;
    if (v27)
    {
      id v28 = [self viewControllerForContact:v27];
      uint64_t v29 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x108))();
      if (v29)
      {
        uint64_t v30 = v29;
        [v29 pushViewController:v28 animated:1];
      }
      else
      {
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "ContactSearchTableViewController: missing navigation controller", v51, 2u);
          swift_slowDealloc();
        }
      }
      goto LABEL_23;
    }
  }
  uint64_t v37 = v57;
  (*(void (**)(char *, void *, uint64_t))(v5 + 16))(v10, a2, v57);
  a2 = v3;
  NSString v17 = Logger.logObject.getter();
  int v38 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v17, (os_log_type_t)v38))
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v37);
    goto LABEL_23;
  }
  int v54 = v38;
  id v14 = (uint8_t *)swift_slowAlloc();
  uint64_t v53 = swift_slowAlloc();
  uint64_t v59 = v53;
  *(_DWORD *)id v14 = 136315138;
  uint64_t v39 = v12();
  unint64_t v40 = IndexPath.row.getter();
  if ((v39 & 0xC000000000000001) != 0) {
    goto LABEL_31;
  }
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v40 < *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v41 = *(id *)(v39 + 8 * v40 + 32);
LABEL_19:
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    id v43 = [v42 identifier];

    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;

    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v57);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v54, "ContactSearchTableViewController: Cannot find contact for identifier: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_23:
    uint64_t v47 = v56;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    [v47 deselectRowAtIndexPath:isa animated:0];

    ContactSearchTableViewController.logRowSelected()();
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall ContactSearchTableViewController.highlightMatchedText(in:)(UITableViewCell in)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x138))();
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    type metadata accessor for ContactSearchViewCell();
    if (swift_dynamicCastClass())
    {
      uint64_t v7 = *(void *)((char *)v1 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchType);
      uint64_t v8 = in.super.super.super.isa;
      ContactSearchViewCell.highlight(text:for:)(v5, v6, v7);
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall ContactSearchTableViewController.queryFaceTimeStatus(forIndex:)(Swift::Int forIndex)
{
  uint64_t v7 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_currentIDSStatusPage;
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_currentIDSStatusPage);
  uint64_t v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v3 = 20 * v9;
  if ((unsigned __int128)(v9 * (__int128)20) >> 64 != (20 * v9) >> 63)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (__OFSUB__(v3, forIndex))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v3 - forIndex > 4) {
    return;
  }
  id v1 = (void *)v2;
  unint64_t v5 = *(void *)((swift_isaMask & *(void *)v2) + 0xE8);
  uint64_t v6 = (void *)((swift_isaMask & *(void *)v2) + 232);
  unint64_t v10 = ((uint64_t (*)(void))v5)();
  unint64_t v2 = v10;
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
LABEL_47:
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
LABEL_7:
  uint64_t v12 = swift_bridgeObjectRelease();
  uint64_t v13 = 20 * (v9 + 1);
  if ((unsigned __int128)((v9 + 1) * (__int128)20) >> 64 != v13 >> 63)
  {
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v13 >= v11) {
    uint64_t v4 = v11;
  }
  else {
    uint64_t v4 = 20 * (v9 + 1);
  }
  uint64_t v14 = v4 - 1;
  if (__OFSUB__(v4, 1)) {
    goto LABEL_49;
  }
  if (v3 >= v14) {
    return;
  }
  unint64_t v2 = (unint64_t)v1;
  unint64_t v15 = ((uint64_t (*)(uint64_t))v5)(v12);
  unint64_t v5 = v4;
  if (__OFADD__(v14, 1)) {
    goto LABEL_50;
  }
  unint64_t v2 = v15;
  uint64_t v6 = (void *)(v15 >> 62);
  if (!(v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16 >= v3) {
      goto LABEL_16;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
LABEL_51:
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16 < v3) {
    goto LABEL_52;
  }
LABEL_16:
  if (v3 < 0)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v16 < (uint64_t)v5) {
    goto LABEL_54;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if ((v2 & 0xC000000000000001) == 0) {
    goto LABEL_28;
  }
  if (v5 < v3)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v3 != v5)
  {
    if (v3 >= v5)
    {
      __break(1u);
      return;
    }
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    Swift::Int v17 = v3;
    do
    {
      Swift::Int v18 = v17 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v17);
      Swift::Int v17 = v18;
    }
    while (v4 != v18);
  }
LABEL_28:
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v4 = v19;
    uint64_t v3 = v20;
    unint64_t v5 = v21;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v16 = v2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v4 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v5 = (2 * v5) | 1;
  }
  *(void *)((char *)v1 + v7) = v9;
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v24 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "ContactSearchTableViewController: Fetching FaceTime status from IDS for page %ld", v24, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v6 = &swift_isaMask;
  if (v5)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    Swift::String v26 = (void *)swift_dynamicCastClass();
    if (!v26)
    {
      swift_unknownObjectRelease();
      Swift::String v26 = _swiftEmptyArrayStorage;
    }
    uint64_t v27 = v26[2];
    swift_release();
    if (!__OFSUB__(v5 >> 1, v3))
    {
      if (v27 == (v5 >> 1) - v3)
      {
        int64_t v25 = (void *)swift_dynamicCastClass();
        if (!v25)
        {
          swift_unknownObjectRelease();
          int64_t v25 = _swiftEmptyArrayStorage;
        }
        goto LABEL_42;
      }
      goto LABEL_58;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    swift_unknownObjectRelease();
    goto LABEL_35;
  }
  swift_unknownObjectRetain();
LABEL_35:
  int64_t v25 = specialized _copyCollectionToContiguousArray<A>(_:)(v16, v4, v3, v5);
LABEL_42:
  swift_unknownObjectRelease();
  (*(void (**)(void *))((*v6 & *v1) + 0x1B8))(v25);
  swift_unknownObjectRelease();
  swift_release();
}

Swift::Void __swiftcall ContactSearchTableViewController.queryFaceTimeStatusFromIDS(for:)(Swift::OpaquePointer a1)
{
  uint64_t v32 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1._rawValue >> 62) {
    goto LABEL_34;
  }
  uint64_t v2 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = ((unint64_t)a1._rawValue & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *((id *)a1._rawValue + v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = [v5 idsCanonicalDestinations];
      uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v10 = *(void *)(v9 + 16);
      int64_t v11 = v3[2];
      int64_t v12 = v11 + v10;
      if (__OFADD__(v11, v10)) {
        goto LABEL_30;
      }
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && (int64_t v14 = v3[3] >> 1, v14 >= v12))
      {
        if (*(void *)(v9 + 16)) {
          goto LABEL_19;
        }
      }
      else
      {
        if (v11 <= v12) {
          int64_t v15 = v11 + v10;
        }
        else {
          int64_t v15 = v11;
        }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
        int64_t v14 = v3[3] >> 1;
        if (*(void *)(v9 + 16))
        {
LABEL_19:
          uint64_t v16 = v3[2];
          if (v14 - v16 < v10) {
            goto LABEL_32;
          }
          unint64_t v17 = (unint64_t)&v3[2 * v16 + 4];
          if (v9 + 32 < v17 + 16 * v10 && v17 < v9 + 32 + 16 * v10)
          {
            _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          swift_arrayInitWithCopy();
          if (v10)
          {
            uint64_t v19 = v3[2];
            BOOL v20 = __OFADD__(v19, v10);
            uint64_t v21 = v19 + v10;
            if (v20) {
              goto LABEL_33;
            }
            v3[2] = v21;
          }
          goto LABEL_5;
        }
      }
      if (v10) {
        goto LABEL_31;
      }
LABEL_5:
      swift_bridgeObjectRelease();

      ++v4;
      if (v7 == v2)
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = v3;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_36:
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)id v24 = 136642819;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v25 = Array.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "ContactSearchTableViewController: Fetching FaceTime status from IDS for destinations %{sensitive}s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v28 = [self sharedManager];
  uint64_t v29 = swift_bridgeObjectRetain();
  specialized Set.init<A>(_:)(v29);
  swift_bridgeObjectRelease();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 beginQueryWithDestinations:isa services:2];
  swift_bridgeObjectRelease();
}

unint64_t ContactSearchTableViewController.configure(cardController:presentationResultForIndex:)(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x120))();
  if (!v3) {
    return 2;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xE8))();
  unint64_t result = IndexPath.row.getter();
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    id v8 = v7;
    swift_bridgeObjectRelease();
    id v9 = [v8 identifier];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int64_t v12 = v11;

    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    int64_t v14 = (void *)ContactSearchManager.contactForContactViewController(identifier:)(v13);
    swift_bridgeObjectRelease();

    if (v14)
    {
      id v15 = v14;
      [a1 setContact:v15];
      [a1 setMessage:0];

      return 0;
    }
    return 2;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v5 + 8 * result + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t ContactSearchTableViewController.logRowSelected()()
{
  unint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchType);
  if (v1 > 3) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = dword_1002068C0[v1];
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)static SearchMetrics.shared;
  (*(void (**)(void))((swift_isaMask & *v0) + 0x138))();
  if (v4)
  {
    uint64_t v5 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = -1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v3) + 0xE0))(1, v2, v5);
}

void ContactSearchTableViewController.init(nibName:bundle:)()
{
}

id ContactSearchTableViewController.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for ContactSearchTableViewController();
  [super dealloc];
}

uint64_t protocol witness for ContactAvatarCardControllerProtocol.configure(cardController:presentationResultForIndex:) in conformance ContactSearchTableViewController()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1C8))();
}

void specialized ContactSearchTableViewController.init(coder:)()
{
  Logger.init(subsystem:category:)();
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_idsQueryPageSize] = 20;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_currentIDSStatusPage] = -1;
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactIDSQuerySubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&v0[v1] = PassthroughSubject.init()();
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___contactAvatarCardController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_contactSearchResults] = _swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_delegate] = 0;
  objc_super v2 = &v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_searchText];
  *objc_super v2 = 0;
  v2[1] = 0;
  v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController_dataSourceNeedsReload] = 1;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone32ContactSearchTableViewController____lazy_storage___tableView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100125050@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xF0))();
  *a2 = result;
  return result;
}

uint64_t sub_1001250AC(uint64_t a1, void **a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xF8);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100125110@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_100125174(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x110);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1001251E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t sub_100125248(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x128);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1001252B8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x138))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10012531C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x140);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for ContactSearchTableViewController()
{
  return type metadata accessor for ContactSearchTableViewController();
}

uint64_t type metadata completion function for ContactSearchTableViewController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PhoneApplication.Provider.rootViewForSimplifiedApplication.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = dlopen("/System/Library/PrivateFrameworks/ConversationKit.framework/ConversationKit", 256);
  if (!v6)
  {
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    uint64_t v14 = __swift_project_value_buffer(v2, (uint64_t)static Log.clarityUI);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v17 = 136315138;
      uint64_t result = (uint64_t)dlerror();
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v18 = String.init(cString:)();
      id v24 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to load ConversationKit.framework:%s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_19:
    uint64_t result = AnyView.init<A>(_:)();
    *a1 = result;
    return result;
  }
  id v7 = (uint64_t (*)(void))dlsym(v6, "clarityUIRootView_generic");
  if (!v7)
  {
    if (one-time initialization token for clarityUI != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)static Log.clarityUI);
    BOOL v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No function clarityUIRootView_generic in ConversationKit.", v22, 2u);
      swift_slowDealloc();
    }

    goto LABEL_19;
  }
  id v8 = v7;
  if (one-time initialization token for clarityUI != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v2, (uint64_t)static Log.clarityUI);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    int64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully soft linked ConversationKit!", v11, 2u);
    swift_slowDealloc();
  }

  id v24 = (id)v8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for View);
  swift_dynamicCast();
  int64_t v12 = __swift_project_boxed_opaque_existential_0(v23, v23[3]);
  *a1 = project #1 <A>(value:) in PhoneApplication.Provider.rootViewForSimplifiedApplication.getter((uint64_t)v12);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
}

uint64_t project #1 <A>(value:) in PhoneApplication.Provider.rootViewForSimplifiedApplication.getter(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return AnyView.init<A>(_:)();
}

void PhoneApplication.swiftui_rootViewForSimplifiedApplicationProvider.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for PhoneApplication.Provider;
}

void *ClarityUISceneDelegate.window.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CNKClarityUISceneDelegate_window);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ClarityUISceneDelegate.window.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___CNKClarityUISceneDelegate_window);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*ClarityUISceneDelegate.window.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

id ClarityUISceneDelegate.init()()
{
  *(void *)&v0[OBJC_IVAR___CNKClarityUISceneDelegate_window] = 0;
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for ClarityUISceneDelegate();
  return [super init];
}

id ClarityUISceneDelegate.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for ClarityUISceneDelegate();
  [super dealloc];
}

uint64_t type metadata accessor for ClarityUISceneDelegate()
{
  return self;
}

uint64_t associated type witness table accessor for RootViewForSimplifiedApplicationProvider.Body : View in PhoneApplication.Provider()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PhoneApplication.Provider()
{
  return &type metadata for PhoneApplication.Provider;
}

void *sub_100125CDC()
{
  return &protocol witness table for AnyView;
}

uint64_t *VoicemailActor.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static VoicemailActor.shared;
}

uint64_t *VoicemailActor.queue.unsafeMutableAddressor()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  return &static VoicemailActor.queue;
}

id static VoicemailActor.queue.getter()
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VoicemailActor.queue;

  return v0;
}

uint64_t static VoicemailActor.shared.getter()
{
  return swift_initStaticObject();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance VoicemailActor()
{
  return static GlobalActor.sharedUnownedExecutor.getter(v0);
}

id VoicemailQueueManager.init()()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for VoicemailQueueManager();
  return [super init];
}

uint64_t type metadata accessor for VoicemailQueueManager()
{
  return self;
}

uint64_t *VoicemailQueueManager.serialQueue.unsafeMutableAddressor()
{
  if (one-time initialization token for serialQueue != -1) {
    swift_once();
  }
  return &static VoicemailQueueManager.serialQueue;
}

id static VoicemailQueueManager.serialQueue.getter()
{
  if (one-time initialization token for serialQueue != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VoicemailQueueManager.serialQueue;

  return v0;
}

id VoicemailQueueManager.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for VoicemailQueueManager();
  return [super dealloc];
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in VoicemailActor(uint64_t a1, uint64_t a2)
{
  return _s11MobilePhone14VoicemailActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, a2, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
}

uint64_t PHCountingLayer.value.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone15PHCountingLayer_value;
  swift_beginAccess();
  return *(void *)v1;
}

void PHCountingLayer.value.setter(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v4 = &v2[OBJC_IVAR____TtC11MobilePhone15PHCountingLayer_value];
  swift_beginAccess();
  *(void *)uint64_t v4 = a1;
  type metadata accessor for NSString();
  uint64_t v5 = NSString.init(stringLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002053C0;
  uint64_t v7 = *(void *)v4;
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = v7;
  id v8 = NSString.init(format:_:)();

  [v2 setString:v8];
  [v2 setNeedsDisplay];
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

uint64_t static PHCountingLayer.needsDisplay(forKey:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v4 = String._bridgeToObjectiveC()();
  v6.id receiver = ObjCClassFromMetadata;
  v6.Class super_class = (Class)&OBJC_METACLASS____TtC11MobilePhone15PHCountingLayer;
  [super needsDisplayForKey:v4];

  return (uint64_t)v2;
}

id PHCountingLayer.action(forKey:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [self animationWithKeyPath:v4];

    id v6 = [v2 presentationLayer];
    if (v6)
    {
      uint64_t v7 = v6;
      [v6 value];
    }
    else
    {
      [v2 value];
    }
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [v5 setFromValue:isa];
  }
  else
  {
    NSString v9 = String._bridgeToObjectiveC()();
    v11.id receiver = v2;
    v11.Class super_class = (Class)type metadata accessor for PHCountingLayer();
    id v5 = [super actionForKey:v9];
  }
  return v5;
}

uint64_t type metadata accessor for PHCountingLayer()
{
  return self;
}

id PHCountingLayer.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone15PHCountingLayer_value] = 0;
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for PHCountingLayer();
  return [super init];
}

id PHCountingLayer.__allocating_init(layer:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  id v4 = [v3 initWithLayer:_bridgeAnythingToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

id PHCountingLayer.init(layer:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone15PHCountingLayer_value] = 0;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  uint64_t v3 = _bridgeAnythingToObjectiveC<A>(_:)();
  v6.id receiver = v1;
  v6.Class super_class = (Class)type metadata accessor for PHCountingLayer();
  [super initWithLayer:v3];
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

id PHCountingLayer.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone15PHCountingLayer_value] = 0;
  v5.id receiver = v1;
  v5.Class super_class = (Class)type metadata accessor for PHCountingLayer();
  [super initWithCoder:a1];

  return v3;
}

id PHCountingLayer.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for PHCountingLayer();
  [super dealloc];
}

const char *keypath_get_selector_value()
{
  return "value";
}

id sub_100126908@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 value];
  *a2 = result;
  return result;
}

id sub_10012693C(void *a1, id *a2)
{
  return [*a2 setValue:*a1];
}

char *LiveVoicemailWelcomeViewController.__allocating_init(delegate:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized LiveVoicemailWelcomeViewController.__allocating_init(delegate:)(a1, v1);
}

id LiveVoicemailWelcomeViewController.continueButton.getter()
{
  return LiveVoicemailWelcomeViewController.continueButton.getter(&OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___continueButton, (uint64_t (*)(uint64_t))closure #1 in LiveVoicemailWelcomeViewController.continueButton.getter);
}

id closure #1 in LiveVoicemailWelcomeViewController.continueButton.getter(uint64_t a1)
{
  id v2 = [self boldButton];
  id v3 = [self mainBundle];
  v9._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0x45554E49544E4F43;
  v4._object = (void *)0xE800000000000000;
  v5.value._uint64_t countAndFlagsBits = 0x6D6563696F56504DLL;
  v5.value._object = (void *)0xEB000000006C6961;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v9);

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setTitle:v7 forState:0];

  [v2 addTarget:a1 action:"didTapContinueButton" forControlEvents:64];
  return v2;
}

id LiveVoicemailWelcomeViewController.settingsButton.getter()
{
  return LiveVoicemailWelcomeViewController.continueButton.getter(&OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___settingsButton, (uint64_t (*)(uint64_t))closure #1 in LiveVoicemailWelcomeViewController.settingsButton.getter);
}

id closure #1 in LiveVoicemailWelcomeViewController.settingsButton.getter(uint64_t a1)
{
  id v2 = [self linkButton];
  id v3 = [self mainBundle];
  v9._object = (void *)0xE000000000000000;
  v4._object = (void *)0x80000001002406D0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  v5.value._uint64_t countAndFlagsBits = 0x6D6563696F56504DLL;
  v5.value._object = (void *)0xEB000000006C6961;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v9);

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setTitle:v7 forState:0];

  [v2 addTarget:a1 action:"didTapLinkButton" forControlEvents:64];
  return v2;
}

id LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter()
{
  return LiveVoicemailWelcomeViewController.continueButton.getter(&OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___liveVoicemailOnboardingImageView, (uint64_t (*)(uint64_t))closure #1 in LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter);
}

id LiveVoicemailWelcomeViewController.continueButton.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  Swift::String v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    Swift::String v6 = (void *)a2(v2);
    NSString v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    Swift::String v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter()
{
  LiveVoicemailWelcomeViewController.onboardingImageAssetName.getter();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [self imageNamed:v0];

  id v2 = [objc_allocWithZone((Class)UIImageView) initWithImage:v1];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v2 setContentMode:2];
  id v3 = [v2 layer];
  [v3 setMinificationFilter:kCAFilterTrilinear];

  id v4 = [v2 layer];
  [v4 setMagnificationFilter:kCAFilterTrilinear];

  id v5 = self;
  id v6 = v2;
  id v7 = [v5 systemLightGrayColor];
  [v6 setBackgroundColor:v7];

  return v6;
}

unint64_t LiveVoicemailWelcomeViewController.onboardingImageAssetName.getter()
{
  id v1 = (unint64_t *)(v0
                          + OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___onboardingImageAssetName);
  if (*(void *)(v0
                 + OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___onboardingImageAssetName
                 + 8))
  {
    unint64_t v2 = *v1;
  }
  else
  {
    unint64_t v2 = closure #1 in LiveVoicemailWelcomeViewController.onboardingImageAssetName.getter();
    unint64_t *v1 = v2;
    v1[1] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

unint64_t closure #1 in LiveVoicemailWelcomeViewController.onboardingImageAssetName.getter()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  int HasHomeButton = TUDeviceHasHomeButton();
  unint64_t v3 = 0xD000000000000026;
  if (HasHomeButton) {
    unint64_t v3 = 0xD000000000000024;
  }
  if (v1) {
    return 0xD000000000000027;
  }
  else {
    return v3;
  }
}

void *NamedImageAsset.iPhoneHomeButtonLiveVoicemailImageName.unsafeMutableAddressor()
{
  return &static NamedImageAsset.iPhoneHomeButtonLiveVoicemailImageName;
}

void *NamedImageAsset.iPhoneFaceIDLiveVoicemailImageName.unsafeMutableAddressor()
{
  return &static NamedImageAsset.iPhoneFaceIDLiveVoicemailImageName;
}

void *NamedImageAsset.iPhoneDefaultLiveVoicemailImageName.unsafeMutableAddressor()
{
  return &static NamedImageAsset.iPhoneDefaultLiveVoicemailImageName;
}

char *LiveVoicemailWelcomeViewController.init(delegate:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized LiveVoicemailWelcomeViewController.init(delegate:)(a1, v1);
}

Swift::Void __swiftcall LiveVoicemailWelcomeViewController.viewDidLoad()()
{
  v1.id receiver = v0;
  v1.Class super_class = (Class)type metadata accessor for LiveVoicemailWelcomeViewController();
  [super viewDidLoad];
  LiveVoicemailWelcomeViewController.configureViewHierarchy()();
}

Swift::Void __swiftcall LiveVoicemailWelcomeViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Event<Tips.EmptyDonation>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (objc_class *)type metadata accessor for LiveVoicemailWelcomeViewController();
  v8.id receiver = v1;
  v8.Class super_class = v7;
  [super viewDidAppear:a1];
  static LiveVoicemailTip.onboardingViewedEvent.getter();
  Tips.Event.sendDonation<>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  specialized Defaults.showLiveVoicemailOnboarding.setter(0);
}

void LiveVoicemailWelcomeViewController.configureViewHierarchy()()
{
  objc_super v1 = v0;
  id v2 = [v0 buttonTray];
  id v3 = LiveVoicemailWelcomeViewController.continueButton.getter();
  [v2 addButton:v3];

  id v4 = [v1 buttonTray];
  id v5 = LiveVoicemailWelcomeViewController.settingsButton.getter();
  [v4 addButton:v5];

  id v6 = [v1 contentView];
  id v7 = LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter();
  [v6 addSubview:v7];

  id v8 = [v1 contentView];
  id v9 = [self systemWhiteColor];
  [v8 setBackgroundColor:v9];

  id v10 = [v1 contentView];
  id v11 = [v10 heightAnchor];

  id v12 = [v1 view];
  if (v12)
  {
    Swift::String v13 = v12;
    id v14 = [v12 heightAnchor];

    id v15 = [v11 constraintEqualToAnchor:v14 multiplier:0.4];
    os_log_type_t v16 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100205390;
    id v18 = LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter();
    id v19 = [v18 heightAnchor];

    id v20 = [v1 contentView];
    id v21 = [v20 heightAnchor];

    id v22 = [v19 constraintEqualToAnchor:v21];
    *(void *)(v17 + 32) = v22;
    id v23 = LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter();
    id v24 = [v23 widthAnchor];

    id v25 = [v1 contentView];
    id v26 = [v25 widthAnchor];

    id v27 = [v24 constraintEqualToAnchor:v26];
    *(void *)(v17 + 40) = v27;
    id v28 = LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter();
    id v29 = [v28 topAnchor];

    id v30 = [v1 contentView];
    id v31 = [v30 topAnchor];

    id v32 = [v29 constraintEqualToAnchor:v31];
    *(void *)(v17 + 48) = v32;
    id v33 = LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter();
    id v34 = [v33 centerXAnchor];

    id v35 = [v1 contentView];
    id v36 = [v35 centerXAnchor];

    id v37 = [v34 constraintEqualToAnchor:v36];
    *(void *)(v17 + 56) = v37;
    id v38 = LiveVoicemailWelcomeViewController.liveVoicemailOnboardingImageView.getter();
    id v39 = [v38 centerYAnchor];

    id v40 = [v1 contentView];
    id v41 = [v40 centerYAnchor];

    id v42 = [v39 constraintEqualToAnchor:v41];
    *(void *)(v17 + 64) = v42;
    *(void *)(v17 + 72) = v15;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    id v43 = v15;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v16 activateConstraints:isa];

    unint64_t v45 = *(void **)&v1[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_contentViewHeightConstraint];
    *(void *)&v1[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_contentViewHeightConstraint] = v43;
  }
  else
  {
    __break(1u);
  }
}

void LiveVoicemailWelcomeViewController.didTapLinkButton()()
{
  id v1 = objc_allocWithZone((Class)NSURL);
  NSString v2 = String._bridgeToObjectiveC()();
  id v6 = [v1 initWithString:v2];

  id v3 = [self defaultWorkspace];
  if (v3)
  {
    id v4 = v3;
    specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 openSensitiveURL:v6 withOptions:isa];

    if (*(void *)(v0 + OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_delegate))
    {
      [(id)swift_unknownObjectRetain() didTapSettingsWithViewController:v0];
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

id LiveVoicemailWelcomeViewController.__allocating_init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v8 = v7;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    NSString v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v14 = 0;
    goto LABEL_6;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v15 = [objc_allocWithZone(v8) initWithTitle:v12 detailText:v13 symbolName:v14 contentLayout:a7];

  return v15;
}

id LiveVoicemailWelcomeViewController.init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_delegate] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___continueButton] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___settingsButton] = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___liveVoicemailOnboardingImageView] = 0;
  id v11 = &v7[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___onboardingImageAssetName];
  *(void *)id v11 = 0;
  *((void *)v11 + 1) = 0;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_contentViewHeightConstraint] = 0;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    NSString v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v14 = 0;
    goto LABEL_6;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  v17.id receiver = v7;
  v17.Class super_class = (Class)type metadata accessor for LiveVoicemailWelcomeViewController();
  id v15 = [super initWithTitle:v12 detailText:v13 symbolName:v14 contentLayout:a7];

  return v15;
}

id LiveVoicemailWelcomeViewController.__allocating_init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v7 = v6;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [objc_allocWithZone(v7) initWithTitle:v11 detailText:v12 icon:a5 contentLayout:a6];

  return v13;
}

id LiveVoicemailWelcomeViewController.init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  *(void *)&v6[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_delegate] = 0;
  *(void *)&v6[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___continueButton] = 0;
  *(void *)&v6[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___settingsButton] = 0;
  *(void *)&v6[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___liveVoicemailOnboardingImageView] = 0;
  id v10 = &v6[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController____lazy_storage___onboardingImageAssetName];
  *(void *)id v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v6[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_contentViewHeightConstraint] = 0;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  v15.id receiver = v6;
  v15.Class super_class = (Class)type metadata accessor for LiveVoicemailWelcomeViewController();
  id v13 = [super initWithTitle:v11 detailText:v12 icon:a5 contentLayout:a6];

  return v13;
}

id LiveVoicemailWelcomeViewController.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LiveVoicemailWelcomeViewController();
  return [super dealloc];
}

unint64_t static NamedImageAsset.iPhoneFaceIDLiveVoicemailImageName.getter()
{
  return 0xD000000000000026;
}

unint64_t static NamedImageAsset.iPhoneHomeButtonLiveVoicemailImageName.getter()
{
  return 0xD000000000000024;
}

unint64_t static NamedImageAsset.iPhoneDefaultLiveVoicemailImageName.getter()
{
  return 0xD000000000000027;
}

char *specialized LiveVoicemailWelcomeViewController.__allocating_init(delegate:)(uint64_t a1, Class a2)
{
  id v3 = objc_allocWithZone(a2);

  return specialized LiveVoicemailWelcomeViewController.init(delegate:)(a1, v3);
}

char *specialized LiveVoicemailWelcomeViewController.init(delegate:)(uint64_t a1, void *a2)
{
  id v4 = self;
  id v5 = [v4 mainBundle];
  v17._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001002406F0;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v7.value._uint64_t countAndFlagsBits = 0x6D6563696F56504DLL;
  v7.value._object = (void *)0xEB000000006C6961;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v17);

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v4 mainBundle];
  v11._uint64_t countAndFlagsBits = 0xD000000000000024;
  v18._object = (void *)0xE000000000000000;
  v11._object = (void *)0x8000000100240710;
  v12.value._uint64_t countAndFlagsBits = 0x6D6563696F56504DLL;
  v12.value._object = (void *)0xEB000000006C6961;
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v18);

  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_super v15 = (char *)[a2 initWithTitle:v9 detailText:v14 icon:0 contentLayout:1];

  *(void *)&v15[OBJC_IVAR____TtC11MobilePhone34LiveVoicemailWelcomeViewController_delegate] = a1;
  swift_unknownObjectRelease();
  return v15;
}

uint64_t specialized static LiveVoicemailWelcomeViewController.shouldShowVoicemailOnboarding.getter()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v2 = specialized Defaults.getValueFromUserDefaults<A>(key:suiteName:)(0xD00000000000001BLL, 0x800000010023D3A0, v0, v1);
  swift_bridgeObjectRelease();
  if (v2 != 2 && (v2 & 1) == 0) {
    return 0;
  }
  id v4 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  unsigned int v5 = [v4 lvmExpansionLiveOnEnabled];

  if (!v5) {
    return 0;
  }
  else {
    return TUCurrentLocaleEligibleForCallScreeningOnboarding();
  }
}

uint64_t type metadata accessor for LiveVoicemailWelcomeViewController()
{
  return self;
}

ValueMetadata *type metadata accessor for NamedImageAsset()
{
  return &type metadata for NamedImageAsset;
}

uint64_t *NSNotificationName.inCallOrientationMonitorEvent.unsafeMutableAddressor()
{
  if (one-time initialization token for inCallOrientationMonitorEvent != -1) {
    swift_once();
  }
  return &static NSNotificationName.inCallOrientationMonitorEvent;
}

void *OrientationMonitorKeys.notificationValidKey.unsafeMutableAddressor()
{
  return &static OrientationMonitorKeys.notificationValidKey;
}

void *OrientationMonitorKeys.notificationInterfaceKey.unsafeMutableAddressor()
{
  return &static OrientationMonitorKeys.notificationInterfaceKey;
}

void *OrientationMonitorKeys.notificationDeviceKey.unsafeMutableAddressor()
{
  return &static OrientationMonitorKeys.notificationDeviceKey;
}

void *OrientationMonitorKeys.notificationEvent.unsafeMutableAddressor()
{
  return &static OrientationMonitorKeys.notificationEvent;
}

unint64_t static OrientationMonitorKeys.notificationEvent.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t static OrientationMonitorKeys.notificationValidKey.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t static OrientationMonitorKeys.notificationDeviceKey.getter()
{
  return 0xD000000000000020;
}

unint64_t static OrientationMonitorKeys.notificationInterfaceKey.getter()
{
  return 0xD000000000000023;
}

id OrientationMonitorKeys.init()()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for OrientationMonitorKeys();
  return [super init];
}

id OrientationMonitorKeys.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for OrientationMonitorKeys();
  return [super dealloc];
}

NSString one-time initialization function for inCallOrientationMonitorEvent()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.inCallOrientationMonitorEvent = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for OrientationMonitorKeys()
{
  return self;
}

id static NSNotificationName.inCallOrientationMonitorEvent.getter()
{
  if (one-time initialization token for inCallOrientationMonitorEvent != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSNotificationName.inCallOrientationMonitorEvent;

  return v0;
}

uint64_t LegacyVoicemailCellView.init(voicemail:showLabel:onCallTapped:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  unsigned int v5 = (uint64_t *)(a5 + *(int *)(type metadata accessor for LegacyVoicemailCellView() + 28));
  *unsigned int v5 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for LegacyVoicemailCellView()
{
  uint64_t result = type metadata singleton initialization cache for LegacyVoicemailCellView;
  if (!type metadata singleton initialization cache for LegacyVoicemailCellView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *LegacyVoicemailCellView.horizontalSpacing.unsafeMutableAddressor()
{
  return &static LegacyVoicemailCellView.horizontalSpacing;
}

double static LegacyVoicemailCellView.horizontalSpacing.getter()
{
  return 11.0;
}

uint64_t LegacyVoicemailCellView.showLabel.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t LegacyVoicemailCellView.onCallTapped.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100128788()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t LegacyVoicemailCellView.body.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0x4026000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Circle, _ForegroundStyleModifier<Color>>, _FrameLayout>, _OpacityEffect>, VStack<TupleView<(Text, Text?)>>, Spacer, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>);
  return closure #1 in LegacyVoicemailCellView.body.getter(v1, a1 + *(int *)(v3 + 44));
}

uint64_t closure #1 in LegacyVoicemailCellView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = type metadata accessor for PlainButtonStyle();
  uint64_t v52 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  unsigned int v5 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for LegacyVoicemailCellView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>>);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  id v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  NSString v14 = &v38[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v56 = &v38[-v15];
  uint64_t v58 = static Color.blue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v48 = v69;
  int v47 = v70;
  uint64_t v46 = v71;
  int v45 = v72;
  uint64_t v44 = v73;
  uint64_t v43 = v74;
  if (*(unsigned char *)(*a1 + OBJC_IVAR___MPLegacyVoicemail_hasUnreadMessages)) {
    double v16 = 1.0;
  }
  else {
    double v16 = 0.0;
  }
  uint64_t v42 = static HorizontalAlignment.leading.getter();
  closure #1 in closure #1 in LegacyVoicemailCellView.body.getter((uint64_t)a1, (uint64_t)v62);
  uint64_t v17 = v62[1];
  uint64_t v54 = v62[0];
  int v39 = v63;
  uint64_t v55 = v64;
  uint64_t v41 = v65;
  uint64_t v40 = v66;
  uint64_t v57 = v67;
  uint64_t v59 = v68;
  outlined init with copy of LegacyVoicemailCellView((uint64_t)a1, (uint64_t)&v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for LegacyVoicemailCellView);
  unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = swift_allocObject();
  outlined init with take of LegacyVoicemailCellView((uint64_t)&v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v19 + v18);
  char v61 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>>);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  uint64_t v20 = v49;
  uint64_t v21 = v51;
  View.buttonStyle<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v5, v21);
  (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v10, v20);
  uint64_t v22 = v60;
  id v23 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v60 + 32);
  id v24 = v56;
  uint64_t v53 = v14;
  v23(v56, v14, v11);
  uint64_t v52 = *(void *)(v22 + 16);
  id v25 = v14;
  uint64_t v26 = v11;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v52)(v25, v24, v11);
  uint64_t v27 = v48;
  *(void *)a2 = v58;
  *(void *)(a2 + 8) = v27;
  *(unsigned char *)(a2 + 16) = v47;
  *(void *)(a2 + 24) = v46;
  *(unsigned char *)(a2 + 32) = v45;
  uint64_t v28 = v43;
  *(void *)(a2 + 40) = v44;
  *(void *)(a2 + 48) = v28;
  *(double *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v42;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  uint64_t v29 = v54;
  *(void *)(a2 + 88) = v54;
  *(void *)(a2 + 96) = v17;
  char v30 = v39;
  *(unsigned char *)(a2 + 104) = v39;
  uint64_t v31 = v41;
  *(void *)(a2 + 112) = v55;
  *(void *)(a2 + 120) = v31;
  uint64_t v32 = v40;
  uint64_t v33 = v57;
  *(void *)(a2 + 128) = v40;
  *(void *)(a2 + 136) = v33;
  *(void *)(a2 + 144) = v59;
  *(void *)(a2 + 152) = 0;
  *(unsigned char *)(a2 + 160) = 1;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Circle, _ForegroundStyleModifier<Color>>, _FrameLayout>, _OpacityEffect>, VStack<TupleView<(Text, Text?)>>, Spacer, <<opaque return type of View.buttonStyle<A>(_:)>>.0));
  ((void (*)(uint64_t, unsigned char *, uint64_t))v52)(a2 + *(int *)(v34 + 80), v53, v26);
  swift_retain();
  LOBYTE(v21) = v30;
  outlined copy of Text.Storage(v29, v17, v30);
  swift_bridgeObjectRetain();
  LOBYTE(v22) = v57;
  uint64_t v35 = v59;
  outlined copy of Text?(v31, v32, v57, v59);
  id v36 = *(void (**)(unsigned char *, uint64_t))(v60 + 8);
  v36(v56, v26);
  v36(v53, v26);
  outlined consume of Text.Storage(v54, v17, v21);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v31, v32, v22, v35);
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in LegacyVoicemailCellView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in LegacyVoicemailCellView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [self mainBundle];
  v46._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001002407E0;
  v5._uint64_t countAndFlagsBits = 0xD000000000000011;
  v6.value._uint64_t countAndFlagsBits = 0x69616D6563696F56;
  v6.value._object = (void *)0xE90000000000006CLL;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v46);

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  uint64_t v13 = Text.bold()();
  uint64_t v45 = v14;
  char v16 = v15;
  uint64_t v18 = v17;
  outlined consume of Text.Storage(v8, v10, v12);
  swift_bridgeObjectRelease();
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = Text.init<A>(_:)();
    uint64_t v25 = v24;
    char v27 = v26 & 1;
    static Font.subheadline.getter();
    char v42 = v16;
    uint64_t v28 = Text.font(_:)();
    uint64_t v44 = v18;
    uint64_t v30 = v29;
    char v32 = v31;
    swift_release();
    uint64_t v43 = v13;
    char v33 = v32 & 1;
    outlined consume of Text.Storage(v23, v25, v27);
    swift_bridgeObjectRelease();
    static HierarchicalShapeStyle.secondary.getter();
    uint64_t v19 = Text.foregroundStyle<A>(_:)();
    uint64_t v20 = v34;
    uint64_t v22 = v35;
    uint64_t v21 = v36 & 1;
    uint64_t v37 = v28;
    char v16 = v42;
    uint64_t v38 = v30;
    char v39 = v33;
    uint64_t v13 = v43;
    uint64_t v18 = v44;
    outlined consume of Text.Storage(v37, v38, v39);
    swift_bridgeObjectRelease();
  }
  char v40 = v16 & 1;
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v45;
  *(unsigned char *)(a2 + 16) = v40;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v21;
  *(void *)(a2 + 56) = v22;
  outlined copy of Text.Storage(v13, v45, v40);
  swift_bridgeObjectRetain();
  outlined copy of Text?(v19, v20, v21, v22);
  outlined consume of Text?(v19, v20, v21, v22);
  outlined consume of Text.Storage(v13, v45, v40);
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in closure #1 in LegacyVoicemailCellView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v64 = a2;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, Capsule>)
      - 8;
  __chkstk_darwin(v63);
  uint64_t v3 = (uint64_t *)&v55[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Capsule();
  __chkstk_darwin(v4 - 8);
  BOOL v62 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  char v12 = &v55[-v11];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  char v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v17 = [self mainBundle];
  v72._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 1280065859;
  v18._object = (void *)0xE400000000000000;
  v19.value._uint64_t countAndFlagsBits = 0x69616D6563696F56;
  v19.value._object = (void *)0xE90000000000006CLL;
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v72._uint64_t countAndFlagsBits = 0;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v72);

  Swift::String v71 = v21;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v22 = Text.init<A>(_:)();
  uint64_t v57 = v23;
  int v56 = v24;
  uint64_t v60 = v25;
  int v58 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  int v59 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  type metadata accessor for LegacyVoicemailCellView();
  specialized Environment.wrappedValue.getter((uint64_t)v12);
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v10, enum case for ColorScheme.light(_:), v6);
  char v42 = static ColorScheme.== infix(_:_:)();
  uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v43(v10, v6);
  v43(v12, v6);
  uint64_t v44 = self;
  uint64_t v45 = &selRef_systemGroupedBackgroundColor;
  if ((v42 & 1) == 0) {
    uint64_t v45 = &selRef_secondarySystemGroupedBackgroundColor;
  }
  id v46 = [v44 *v45];
  char v47 = v56 & 1;
  char v70 = v56 & 1;
  char v68 = 0;
  char v65 = 0;
  uint64_t v48 = Color.init(uiColor:)();
  uint64_t v49 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v50 = type metadata accessor for RoundedCornerStyle();
  uint64_t v51 = (uint64_t)v62;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v62, v49, v50);
  uint64_t v52 = v63;
  outlined init with copy of LegacyVoicemailCellView(v51, (uint64_t)v3 + *(int *)(v63 + 60), (uint64_t (*)(void))&type metadata accessor for Capsule);
  *uint64_t v3 = v48;
  *(_WORD *)((char *)v3 + *(int *)(v52 + 64)) = 256;
  outlined init with copy of _InsettableBackgroundShapeModifier<Color, Capsule>((uint64_t)v3, (uint64_t)&v16[*(int *)(v14 + 44)]);
  uint64_t v53 = v57;
  *(void *)char v16 = v22;
  *((void *)v16 + 1) = v53;
  v16[16] = v70;
  *(_DWORD *)(v16 + 17) = v71._countAndFlagsBits;
  *((_DWORD *)v16 + 5) = *(_DWORD *)((char *)&v71._countAndFlagsBits + 3);
  *((void *)v16 + 3) = v60;
  v16[32] = v58;
  *(_DWORD *)(v16 + 33) = *(_DWORD *)v69;
  *((_DWORD *)v16 + 9) = *(_DWORD *)&v69[3];
  *((void *)v16 + 5) = v27;
  *((void *)v16 + 6) = v29;
  *((void *)v16 + 7) = v31;
  *((void *)v16 + 8) = v33;
  v16[72] = v68;
  *((_DWORD *)v16 + 19) = *(_DWORD *)&v67[3];
  *(_DWORD *)(v16 + 73) = *(_DWORD *)v67;
  v16[80] = v59;
  *((_DWORD *)v16 + 21) = *(_DWORD *)&v66[3];
  *(_DWORD *)(v16 + 81) = *(_DWORD *)v66;
  *((void *)v16 + 11) = v35;
  *((void *)v16 + 12) = v37;
  *((void *)v16 + 13) = v39;
  *((void *)v16 + 14) = v41;
  v16[120] = v65;
  swift_retain();
  outlined copy of Text.Storage(v22, v53, v47);
  swift_bridgeObjectRetain();
  outlined destroy of Locale?((uint64_t)v3, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, Capsule>);
  outlined destroy of Capsule(v51);
  swift_release();
  outlined consume of Text.Storage(v22, v53, v47);
  swift_bridgeObjectRelease();
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>((uint64_t)v16, v64);
}

char *initializeBufferWithCopyOfBuffer for LegacyVoicemailCellView(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    a1[8] = *((unsigned char *)a2 + 8);
    uint64_t v6 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char **)((char *)a2 + v7);
    uint64_t v10 = v5;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
    }
    else
    {
      *(void *)uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LegacyVoicemailCellView(id *a1, uint64_t a2)
{
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  id v9 = v4;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (void *)(a1 + v10);
    char v12 = (void *)(a2 + v10);
    outlined destroy of Locale?(a1 + v10, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      void *v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    outlined destroy of Locale?(a1 + v7, &demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129D64);
}

uint64_t sub_100129D64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100129E2C);
}

void *sub_100129E2C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for LegacyVoicemailCellView()
{
  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
    }
  }
}

uint64_t sub_100129FE4()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Circle, _ForegroundStyleModifier<Color>>, _FrameLayout>, _OpacityEffect>, VStack<TupleView<(Text, Text?)>>, Spacer, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Circle, _ForegroundStyleModifier<Color>>, _FrameLayout>, _OpacityEffect>, VStack<TupleView<(Text, Text?)>>, Spacer, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>>);
}

uint64_t sub_10012A020()
{
  uint64_t v1 = (int *)(type metadata accessor for LegacyVoicemailCellView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);

  swift_release();
  uint64_t v5 = v0 + v3 + v1[9];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #2 in closure #1 in LegacyVoicemailCellView.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for LegacyVoicemailCellView() - 8);
  return (*(uint64_t (**)(void))(v0
                              + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                              + 16))();
}

uint64_t partial apply for closure #3 in closure #1 in LegacyVoicemailCellView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in closure #1 in LegacyVoicemailCellView.body.getter(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<Color, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, Capsule>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _PaddingLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    type metadata accessor for PlainButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of LegacyVoicemailCellView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of _InsettableBackgroundShapeModifier<Color, Capsule>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, Capsule>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Capsule(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _PaddingLayout>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, Capsule>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id static UIColorEffect.inCallControls.getter()
{
  return static UIColorEffect.inCallControls.getter((__n128)xmmword_100206BF0, (__n128)xmmword_100206C00, (__n128)xmmword_100206C10, (__n128)xmmword_100206C20);
}

id static UIColorEffect.inCallControlsButtonAvatarOnly.getter()
{
  return static UIColorEffect.inCallControls.getter((__n128)xmmword_100206C30, (__n128)xmmword_100206C40, (__n128)xmmword_100206C50, (__n128)xmmword_100206C60);
}

id static UIColorEffect.inCallControlsKeypadButton.getter()
{
  v1[0] = xmmword_100206C70;
  v1[1] = xmmword_100206C80;
  v1[2] = xmmword_100206C90;
  int v2 = 1067567809;
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  int v5 = 0;
  uint64_t v6 = 1065353216;
  id result = [self _colorEffectCAMatrix:v1];
  if (!result) {
    __break(1u);
  }
  return result;
}

id @objc static UIColorEffect.inCallControls.getter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v5[0] = a1;
  v5[1] = a2;
  void v5[2] = a3;
  v5[3] = a4;
  void v5[4] = xmmword_100206CE0;
  id result = [self _colorEffectCAMatrix:v5];
  if (result)
  {
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static UIColorEffect.inCallControlsEmergencyCallButton.getter()
{
  return static UIColorEffect.inCallControls.getter((__n128)xmmword_100206CA0, (__n128)xmmword_100206CB0, (__n128)xmmword_100206CC0, (__n128)xmmword_100206CD0);
}

id static UIColorEffect.inCallControls.getter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v5[0] = a1;
  v5[1] = a2;
  void v5[2] = a3;
  v5[3] = a4;
  void v5[4] = xmmword_100206CE0;
  id result = [self _colorEffectCAMatrix:v5];
  if (!result) {
    __break(1u);
  }
  return result;
}

BOOL DialerContactResultButtonType.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BlockTableViewCell.BlockFlow()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance BlockTableViewCell.BlockFlow()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BlockTableViewCell.BlockFlow()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance BlockTableViewCell.BlockFlow@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

unint64_t static BlockTableViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000012;
}

id BlockTableViewCell.init(style:reuseIdentifier:)()
{
  return specialized BlockTableViewCell.init(style:reuseIdentifier:)();
}

void BlockTableViewCell.init(coder:)()
{
  Swift::UInt v1 = &v0[OBJC_IVAR___PHBlockTableViewCell____lazy_storage___cellContentConfiguration];
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)&v0[OBJC_IVAR___PHBlockTableViewCell____lazy_storage___unblockImageView] = 0;
  *(void *)&v0[OBJC_IVAR___PHBlockTableViewCell____lazy_storage___blockImageView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t BlockTableViewCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR___PHBlockTableViewCell____lazy_storage___cellContentConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for UIListContentConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  outlined destroy of UIListContentConfiguration?((uint64_t)v8);
  closure #1 in BlockTableViewCell.cellContentConfiguration.getter();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t closure #1 in BlockTableViewCell.cellContentConfiguration.getter()
{
  UITableViewCell.defaultContentConfiguration()();
  id v0 = [self mainBundle];
  v9._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010023D630;
  v1._uint64_t countAndFlagsBits = 0xD000000000000025;
  v2.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v9);

  UIListContentConfiguration.text.setter();
  id v4 = [self systemRedColor];
  uint64_t v5 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v5(v8, 0);
  uint64_t v6 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  return v6(v8, 0);
}

id BlockTableViewCell.unblockImageView.getter(uint64_t *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    id v7 = *(id *)(v4 + *a1);
  }
  else
  {
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [self systemImageNamed:v9];

    id v11 = [objc_allocWithZone((Class)UIImageView) initWithImage:v10];
    id v12 = [self *a4];
    [v11 setTintColor:v12];

    uint64_t v13 = *(void **)(v4 + v5);
    *(void *)(v4 + v5) = v11;
    id v7 = v11;

    uint64_t v6 = 0;
  }
  id v14 = v6;
  return v7;
}

void BlockTableViewCell.updateCell(flow:isBlocked:style:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UIListContentConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = self;
  char v16 = &selRef_systemWhiteColor;
  if (a3 != 2) {
    char v16 = &selRef_systemBlackColor;
  }
  id v17 = [v15 *v16];
  uint64_t v49 = v4;
  id v47 = v17;
  int v48 = a2;
  if (a1 == 1)
  {
    id v18 = [self mainBundle];
    if (a2)
    {
      unint64_t v19 = 0xD00000000000002BLL;
      unint64_t v43 = 0xE000000000000000;
      Swift::String v20 = "REPORT_BLOCK_FACETIME_ALERT_UNBLOCK_UNKNOWN";
    }
    else
    {
      unint64_t v19 = 0xD000000000000029;
      unint64_t v43 = 0xE000000000000000;
      Swift::String v20 = "REPORT_BLOCK_FACETIME_ALERT_BLOCK_UNKNOWN";
    }
    unint64_t v24 = (unint64_t)(v20 - 32) | 0x8000000000000000;
    v25.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v25.value._object = (void *)0xE900000000000073;
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    uint64_t v27 = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v19, v25, (NSBundle)v18, v26, *(Swift::String *)(&v43 - 1));

    BlockTableViewCell.cellContentConfiguration.getter((uint64_t)v14);
    UIListContentConfiguration.text.setter();
    id v46 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v46(v10, v14, v11);
    uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
    v45(v10, 0, 1, v11);
    uint64_t v28 = (uint64_t)v4 + OBJC_IVAR___PHBlockTableViewCell____lazy_storage___cellContentConfiguration;
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v10, v28);
    swift_endAccess();
    if ((v48 & 1) == 0)
    {
LABEL_15:
      uint64_t v33 = v11;
      id v35 = [self systemRedColor];
      goto LABEL_16;
    }
  }
  else
  {
    if (a1)
    {
      v50[0] = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }
    id v21 = [self mainBundle];
    if (a2)
    {
      unint64_t v22 = 0xD000000000000027;
      unint64_t v44 = 0xE000000000000000;
      uint64_t v23 = "REPORT_BLOCK_FACETIME_ALERT_UNBLOCK_ALL";
    }
    else
    {
      unint64_t v22 = 0xD000000000000025;
      unint64_t v44 = 0xE000000000000000;
      uint64_t v23 = "REPORT_BLOCK_FACETIME_ALERT_BLOCK_ALL";
    }
    unint64_t v29 = (unint64_t)(v23 - 32) | 0x8000000000000000;
    v30.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v30.value._object = (void *)0xE900000000000073;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    uint64_t v32 = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v22, v30, (NSBundle)v21, v31, *(Swift::String *)(&v44 - 1));

    BlockTableViewCell.cellContentConfiguration.getter((uint64_t)v14);
    UIListContentConfiguration.text.setter();
    id v46 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v46(v10, v14, v11);
    uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
    v45(v10, 0, 1, v11);
    uint64_t v28 = (uint64_t)v4 + OBJC_IVAR___PHBlockTableViewCell____lazy_storage___cellContentConfiguration;
    swift_beginAccess();
    outlined assign with take of UIListContentConfiguration?((uint64_t)v10, v28);
    swift_endAccess();
    if ((v48 & 1) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v33 = v11;
  id v34 = v17;
LABEL_16:
  BlockTableViewCell.cellContentConfiguration.getter((uint64_t)v14);
  uint64_t v36 = (void (*)(uint64_t *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v36(v50, 0);
  uint64_t v37 = v33;
  v46(v10, v14, v33);
  v45(v10, 0, 1, v33);
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v10, v28);
  swift_endAccess();
  uint64_t v38 = v49;
  if (v48)
  {
    id v39 = BlockTableViewCell.unblockImageView.getter(&OBJC_IVAR___PHBlockTableViewCell____lazy_storage___unblockImageView, 0xD000000000000016, 0x8000000100240A30, (SEL *)&selRef_systemBlackColor);
    id v40 = v47;
    id v41 = v47;
  }
  else
  {
    id v39 = BlockTableViewCell.unblockImageView.getter(&OBJC_IVAR___PHBlockTableViewCell____lazy_storage___blockImageView, 0x6961722E646E6168, 0xEB00000000646573, (SEL *)&selRef_systemRedColor);
    id v41 = [self systemRedColor];
    id v40 = v47;
  }
  [v39 setTintColor:v41];

  [v38 setAccessoryView:v39];
  v50[3] = v37;
  v50[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
  BlockTableViewCell.cellContentConfiguration.getter((uint64_t)boxed_opaque_existential_1);
  UITableViewCell.contentConfiguration.setter();
}

id specialized BlockTableViewCell.init(style:reuseIdentifier:)()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_bridgeObjectRelease();
  Swift::String_optional v2 = &v0[OBJC_IVAR___PHBlockTableViewCell____lazy_storage___cellContentConfiguration];
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)&v0[OBJC_IVAR___PHBlockTableViewCell____lazy_storage___unblockImageView] = 0;
  *(void *)&v0[OBJC_IVAR___PHBlockTableViewCell____lazy_storage___blockImageView] = 0;
  NSString v4 = String._bridgeToObjectiveC()();
  v11.id receiver = v0;
  v11.Class super_class = ObjectType;
  [super initWithStyle:0 reuseIdentifier:v4];

  v10[3] = v3;
  v10[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  id v7 = v5;
  BlockTableViewCell.cellContentConfiguration.getter((uint64_t)boxed_opaque_existential_1);
  UITableViewCell.contentConfiguration.setter();
  id v8 = BlockTableViewCell.unblockImageView.getter(&OBJC_IVAR___PHBlockTableViewCell____lazy_storage___blockImageView, 0x6961722E646E6168, 0xEB00000000646573, (SEL *)&selRef_systemRedColor);
  [v7 setAccessoryView:v8];

  return v7;
}

uint64_t outlined assign with take of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type BlockTableViewCell.BlockFlow and conformance BlockTableViewCell.BlockFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type BlockTableViewCell.BlockFlow and conformance BlockTableViewCell.BlockFlow;
  if (!lazy protocol witness table cache variable for type BlockTableViewCell.BlockFlow and conformance BlockTableViewCell.BlockFlow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlockTableViewCell.BlockFlow and conformance BlockTableViewCell.BlockFlow);
  }
  return result;
}

uint64_t ObjC metadata update function for BlockTableViewCell()
{
  return type metadata accessor for BlockTableViewCell();
}

uint64_t type metadata accessor for BlockTableViewCell()
{
  uint64_t result = type metadata singleton initialization cache for BlockTableViewCell;
  if (!type metadata singleton initialization cache for BlockTableViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for BlockTableViewCell()
{
  type metadata accessor for UIListContentConfiguration?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for UIListContentConfiguration?()
{
  if (!lazy cache variable for type metadata for UIListContentConfiguration?)
  {
    type metadata accessor for UIListContentConfiguration();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIListContentConfiguration?);
    }
  }
}

ValueMetadata *type metadata accessor for BlockTableViewCell.BlockFlow()
{
  return &type metadata for BlockTableViewCell.BlockFlow;
}

uint64_t outlined destroy of UIListContentConfiguration?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UIListContentConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ValueCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ValueCache.init()();
  return v0;
}

void ValueCache.set(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *((void *)*v3 + 11);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  objc_super v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(v6 - 8);
  __chkstk_darwin(v9);
  id v14 = (char *)&v18 - v13;
  type metadata accessor for BoxedKey();
  id v15 = specialized BoxedKey.__allocating_init(key:)(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    [v3[2] removeObjectForKey:v15];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v6);
    id v16 = v3[2];
    type metadata accessor for BoxedValue();
    id v17 = specialized BoxedValue.__allocating_init(value:)((uint64_t)v14);
    [v16 setObject:v17 forKey:v15];

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
  }
}

uint64_t ValueCache.value(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  type metadata accessor for BoxedKey();
  id v7 = specialized BoxedKey.__allocating_init(key:)(a1);
  uint64_t v8 = (char *)[(id)v3[2] objectForKey:v7];

  if (v8)
  {
    uint64_t v9 = *(void *)(v6 + 88);
    uint64_t v15 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(a2, &v8[*(void *)((swift_isaMask & *(void *)v8) + 0x58)], v9);

    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v11 = a2;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v13 = *(void *)(v6 + 88);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v11 = a2;
    uint64_t v12 = 1;
  }

  return v10(v11, v12, 1, v13);
}

uint64_t key path setter for ValueCache.subscript(_:) : <A, B>ValueCache<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + a3 - 24);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - v11;
  __chkstk_darwin(v10);
  id v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, a3, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  return (*(uint64_t (**)(char *, char *))(**(void **)a2 + 136))(v12, v14);
}

uint64_t ValueCache.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t ValueCache.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  specialized ValueCache.subscript.setter();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 8))(a2);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(a1, v6);
}

void (*ValueCache.subscript.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x40uLL);
  *a1 = v5;
  *uint64_t v5 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Optional();
  v5[1] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v5[2] = v8;
  size_t v9 = *(void *)(v8 + 64);
  v5[3] = malloc(v9);
  void v5[4] = malloc(v9);
  uint64_t v10 = *(void *)(v6 + 80);
  _OWORD v5[5] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  v5[6] = v11;
  v5[7] = malloc(*(void *)(v11 + 64));
  (*(void (**)(void))(v12 + 16))();
  (*(void (**)(uint64_t))(*v2 + 120))(a2);
  return ValueCache.subscript.modify;
}

void ValueCache.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[6];
  uint64_t v3 = (void *)(*a1)[7];
  uint64_t v5 = (void *)(*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (*a1)[2];
  uint64_t v7 = (void *)(*a1)[3];
  uint64_t v9 = **a1;
  uint64_t v10 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[3], v5, v10);
    (*(void (**)(void *, void *))(*(void *)v9 + 112))(v7, v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v7, v10);
    v11(v5, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void *))(*(void *)v9 + 112))((*a1)[4], v3);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v10);
  }
  free(v3);
  free(v5);
  free(v7);

  free(v2);
}

Swift::Void __swiftcall ValueCache.removeAllValues()()
{
  [*(id *)(v0 + 16) removeAllObjects];
}

uint64_t ValueCache.deinit()
{
  return v0;
}

uint64_t ValueCache.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ValueCache.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCache);
  type metadata accessor for BoxedKey();
  type metadata accessor for BoxedValue();
  *(void *)(v0 + 16) = NSCache.__allocating_init()();
  return v0;
}

uint64_t type metadata accessor for BoxedKey()
{
  return __swift_instantiateGenericMetadata();
}

void @objc BoxedValue.init()()
{
}

id BoxedValue.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for BoxedValue();
  return [super dealloc];
}

uint64_t @objc BoxedValue.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x50) - 8)
                                           + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x58)]);
}

uint64_t @objc BoxedKey.hash.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = BoxedKey.hash.getter();

  return v2;
}

uint64_t BoxedKey.hash.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t BoxedKey.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for BoxedKey();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v1 = 0;
    return v1 & 1;
  }
  char v1 = dispatch thunk of static Equatable.== infix(_:_:)();

  return v1 & 1;
}

uint64_t @objc BoxedKey.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    id v5 = a1;
  }
  char v6 = BoxedKey.isEqual(_:)((uint64_t)v8);

  outlined destroy of Any?((uint64_t)v8);
  return v6 & 1;
}

void @objc BoxedKey.init()()
{
}

id BoxedKey.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for BoxedKey();
  return [super dealloc];
}

uint64_t @objc BoxedKey.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x50) - 8)
                                           + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x60)]);
}

id specialized BoxedKey.init(key:)(uint64_t a1)
{
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)((swift_isaMask & *(void *)v1) + 0x50)
                                                              - 8)
                                                  + 16))(&v1[*(void *)((swift_isaMask & *(void *)v1) + 0x60)], a1, *(void *)((swift_isaMask & *(void *)v1) + 0x50));
  v3.id receiver = v1;
  v3.Class super_class = (Class)type metadata accessor for BoxedKey();
  return [super init];
}

id specialized BoxedKey.__allocating_init(key:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for BoxedKey());
  return specialized BoxedKey.init(key:)(a1);
}

uint64_t type metadata accessor for BoxedValue()
{
  return __swift_instantiateGenericMetadata();
}

id specialized BoxedValue.init(value:)(uint64_t a1)
{
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)((swift_isaMask & *(void *)v1) + 0x50)
                                                              - 8)
                                                  + 16))(&v1[*(void *)((swift_isaMask & *(void *)v1) + 0x58)], a1, *(void *)((swift_isaMask & *(void *)v1) + 0x50));
  v3.id receiver = v1;
  v3.Class super_class = (Class)type metadata accessor for BoxedValue();
  return [super init];
}

id specialized BoxedValue.__allocating_init(value:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for BoxedValue());
  return specialized BoxedValue.init(value:)(a1);
}

uint64_t specialized ValueCache.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t sub_10012CCF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(**(void **)a1 + 128))(a2);
}

uint64_t sub_10012CD44()
{
  return 24;
}

__n128 sub_10012CD50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for ValueCache()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ValueCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for BoxedValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for BoxedKey()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void specialized BoxedValue.init()()
{
}

void specialized BoxedKey.init()()
{
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t SymbolDescription.scale.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SymbolDescription.scale.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

id SymbolDescription.textStyle.getter()
{
  return *(id *)(v0 + 24);
}

void SymbolDescription.textStyle.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

Swift::Void (__swiftcall *SymbolDescription.textStyle.modify())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

void *SymbolDescription.maximumContentSizeCategory.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void SymbolDescription.maximumContentSizeCategory.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

uint64_t SymbolDescription.init(name:scale:textStyle:maximumContentSizeCategory:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

UIImage_optional __swiftcall SymbolDescriber.uiImage()()
{
  (*(void (**)(long long *__return_ptr))(v0 + 8))(&v4);
  uint64_t v1 = (objc_class *)specialized static UIImage.image(for:)(&v4);
  long long v9 = v4;
  outlined release of String((uint64_t)&v9);
  id v8 = v5;
  outlined release of UIFontTextStyle(&v8);
  outlined init with take of UIContentSizeCategory?((uint64_t)&v6, (uint64_t)&v7);
  outlined release of UIFontTextStyle(&v7);
  objc_super v3 = v1;
  result.value.super.Class isa = v3;
  result.is_nil = v2;
  return result;
}

_UNKNOWN **static SymbolDescribers.Recents.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolDescribers.Recents.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolDescribers.Recents(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SymbolDescribers.Recents.allCases.getter;
}

NSString *protocol witness for SymbolDescriber.description.getter in conformance SymbolDescribers.Recents@<X0>(unint64_t *a1@<X8>)
{
  return SymbolDescribers.Recents.description.getter(*v1, a1);
}

NSString *SymbolDescribers.Recents.description.getter@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = 0xD000000000000019;
  unint64_t v4 = 0x8000000100240AD0;
  id v5 = (id *)&UIFontTextStyleFootnote;
  uint64_t v6 = 1;
  switch(a1)
  {
    case 1:
      id v7 = "arrow.up.right.video.fill";
      goto LABEL_5;
    case 2:
    case 3:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x65707974656C6574;
      uint64_t v6 = 1;
      break;
    case 4:
      id v7 = "checkmark.square.fill";
      unint64_t v3 = 0xD000000000000015;
LABEL_5:
      unint64_t v4 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      id v5 = (id *)&UIFontTextStyleFootnote;
      uint64_t v6 = 1;
      break;
    case 5:
      uint64_t v6 = -1;
      unint64_t v4 = 0xEB00000000656C63;
      unint64_t v3 = 0x7269632E6F666E69;
      id v5 = (id *)&UIFontTextStyleHeadline;
      break;
    default:
      break;
  }
  id v8 = *v5;
  UIImage_optional result = UIContentSizeCategoryAccessibilityLarge;
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v6;
  a2[3] = (unint64_t)v8;
  a2[4] = (unint64_t)result;
  return result;
}

_UNKNOWN **static SymbolDescribers.Favorites.allCases.getter()
{
  return &outlined read-only object #0 of static SymbolDescribers.Favorites.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SymbolDescribers.Favorites(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SymbolDescribers.Favorites;
}

NSString *protocol witness for SymbolDescriber.description.getter in conformance SymbolDescribers.Favorites@<X0>(uint64_t *a1@<X8>)
{
  return SymbolDescribers.Favorites.description.getter(*v1, a1);
}

NSString *SymbolDescribers.Favorites.description.getter@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  unint64_t v2 = 0xEA00000000006C6CLL;
  uint64_t v3 = 0x69662E656E6F6870;
  uint64_t v4 = 1;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x69662E6F65646976;
      uint64_t v4 = 1;
      break;
    case 2:
      unint64_t v2 = 0xED00006C6C69662ELL;
      uint64_t v3 = 0x65706F6C65766E65;
      uint64_t v4 = 1;
      break;
    case 3:
      unint64_t v2 = 0xEC0000006C6C6966;
      uint64_t v3 = 0x2E6567617373656DLL;
      uint64_t v4 = 1;
      break;
    case 4:
      uint64_t v4 = -1;
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x65707974656C6574;
      break;
    default:
      break;
  }
  uint64_t v6 = UIFontTextStyleCaption2;
  UIImage_optional result = UIContentSizeCategoryAccessibilityLarge;
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = (uint64_t)v6;
  a2[4] = (uint64_t)result;
  return result;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

id *outlined release of UIFontTextStyle(id *a1)
{
  return a1;
}

uint64_t outlined init with take of UIContentSizeCategory?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentSizeCategory?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SymbolDescribers.Recents and conformance SymbolDescribers.Recents()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolDescribers.Recents and conformance SymbolDescribers.Recents;
  if (!lazy protocol witness table cache variable for type SymbolDescribers.Recents and conformance SymbolDescribers.Recents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolDescribers.Recents and conformance SymbolDescribers.Recents);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolDescribers.Recents()
{
  return lazy protocol witness table accessor for type [SearchController] and conformance [A](&lazy protocol witness table cache variable for type [SymbolDescribers.Recents] and conformance [A], &demangling cache variable for type metadata for [SymbolDescribers.Recents]);
}

unint64_t lazy protocol witness table accessor for type SymbolDescribers.Favorites and conformance SymbolDescribers.Favorites()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolDescribers.Favorites and conformance SymbolDescribers.Favorites;
  if (!lazy protocol witness table cache variable for type SymbolDescribers.Favorites and conformance SymbolDescribers.Favorites)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolDescribers.Favorites and conformance SymbolDescribers.Favorites);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SymbolDescribers.Favorites()
{
  return lazy protocol witness table accessor for type [SearchController] and conformance [A](&lazy protocol witness table cache variable for type [SymbolDescribers.Favorites] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [SymbolDescribers.Favorites]);
}

void destroy for SymbolDescription(uint64_t a1)
{
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for SymbolDescription(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  id v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

void *assignWithCopy for SymbolDescription(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v4 = (void *)a2[3];
  id v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  id v7 = (void *)a1[4];
  id v8 = (void *)a2[4];
  a1[4] = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for SymbolDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  id v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for SymbolDescription()
{
  return &type metadata for SymbolDescription;
}

ValueMetadata *type metadata accessor for SymbolDescribers()
{
  return &type metadata for SymbolDescribers;
}

uint64_t getEnumTagSinglePayload for SymbolDescribers.Recents(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SymbolDescribers.Recents(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012D828);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolDescribers.Recents()
{
  return &type metadata for SymbolDescribers.Recents;
}

uint64_t getEnumTagSinglePayload for SymbolDescribers.Favorites(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SymbolDescribers.Favorites(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012D9BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolDescribers.Favorites()
{
  return &type metadata for SymbolDescribers.Favorites;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation9IndexPathVG_Sis5NeverOTg5069_s11MobilePhone21CallsSearchControllerC06removeC02atySay10Foundation9eF62VG_tFSiAHcfu_33_8941dfb2fcfdfc7158d0bd40016e2c72AHSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v3 = *(void *)(type metadata accessor for IndexPath() - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = IndexPath.row.getter();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8 + 4] = v6;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *CallsSearchController.fallbackCellIdentifier.unsafeMutableAddressor()
{
  return &static CallsSearchController.fallbackCellIdentifier;
}

unint64_t static CallsSearchController.fallbackCellIdentifier.getter()
{
  return 0xD000000000000021;
}

uint64_t CallsSearchController.sectionTitle.getter()
{
  int64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___MPCallsSearchController_sectionTitle);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CallsSearchController.sectionIndex.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPCallsSearchController_sectionIndex;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t CallsSearchController.sectionIndex.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MPCallsSearchController_sectionIndex);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*CallsSearchController.sectionIndex.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t CallsSearchController.sectionType.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___MPCallsSearchController_sectionType);
  swift_beginAccess();
  return *v1;
}

uint64_t CallsSearchController.sectionType.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR___MPCallsSearchController_sectionType);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*CallsSearchController.sectionType.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t CallsSearchController.resultIDs.setter(uint64_t a1)
{
  return CallsSearchController.resultIDs.setter(a1, &OBJC_IVAR___MPCallsSearchController_resultIDs);
}

uint64_t (*CallsSearchController.resultIDs.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t CallsSearchController.results.getter()
{
  swift_beginAccess();
  unint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized _arrayForceCast<A, B>(_:)(v0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  swift_bridgeObjectRelease();
  return v1;
}

void *specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = v4 + 1;
          uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
          id v6 = v10;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CHHandle?);
          swift_dynamicCast();
          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = v5;
        }
        while (v2 != v5);
      }
      else
      {
        unint64_t v7 = (void **)(a1 + 32);
        type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
        do
        {
          unint64_t v8 = *v7++;
          id v9 = v8;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CHHandle?);
          swift_dynamicCast();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v2;
        }
        while (v2);
      }
      return _swiftEmptyArrayStorage;
    }
  }
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  return specialized _arrayForceCast<A, B>(_:)(a1, &demangling cache variable for type metadata for CNKeyDescriptor);
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Message);
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, &lazy cache variable for type metadata for CSSuggestion);
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  id v14 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = 0;
      uint64_t v5 = v14;
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        __swift_instantiateConcreteTypeFromMangledName(a2);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1);
          uint64_t v5 = v14;
        }
        unint64_t v9 = v5[2];
        unint64_t v8 = v5[3];
        if (v9 >= v8 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          uint64_t v5 = v14;
        }
        ++v7;
        void v5[2] = v9 + 1;
        outlined init with take of Any(v13, &v5[4 * v9 + 4]);
      }
      while (v4 != v7);
    }
    else
    {
      unint64_t v10 = a1 + 32;
      uint64_t v5 = v14;
      do
      {
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(a2);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1);
          uint64_t v5 = v14;
        }
        unint64_t v12 = v5[2];
        unint64_t v11 = v5[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v5 = v14;
        }
        void v5[2] = v12 + 1;
        outlined init with take of Any(v13, &v5[4 * v12 + 4]);
        v10 += 8;
        --v4;
      }
      while (v4);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1, unint64_t *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        type metadata accessor for VMAccount(0, a2);
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v9 = v5[2];
        unint64_t v8 = v5[3];
        if (v9 >= v8 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          uint64_t v5 = v15;
        }
        void v5[2] = v9 + 1;
        outlined init with take of Any(v14, &v5[4 * v9 + 4]);
      }
    }
    else
    {
      unint64_t v10 = (id *)(a1 + 32);
      type metadata accessor for VMAccount(0, a2);
      do
      {
        id v11 = *v10;
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v15;
        }
        void v5[2] = v13 + 1;
        outlined init with take of Any(v14, &v5[4 * v13 + 4]);
        ++v10;
        --v4;
      }
      while (v4);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t CallsSearchController.recentCalls.getter()
{
  return CallsSearchController.resultIDs.getter();
}

uint64_t CallsSearchController.recentCalls.setter(uint64_t a1)
{
  return CallsSearchController.resultIDs.setter(a1, &OBJC_IVAR___MPCallsSearchController_recentCalls);
}

uint64_t CallsSearchController.resultIDs.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CallsSearchController.recentCalls.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t CallsSearchController.maximumNumberOfRowsInSection.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPCallsSearchController_maximumNumberOfRowsInSection;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t CallsSearchController.delegate.getter()
{
  return CallsSearchController.delegate.getter();
}

{
  swift_beginAccess();
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t CallsSearchController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*CallsSearchController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPCallsSearchController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchTableViewController.suggestionsDelegate.modify;
}

id @objc CallsSearchController.delegate.getter()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  return Strong;
}

uint64_t CallsSearchController.hostingNavigationController.getter()
{
  return CallsSearchController.delegate.getter();
}

uint64_t @objc CallsSearchController.delegate.setter()
{
  return swift_unknownObjectWeakAssign();
}

void CallsSearchController.hostingNavigationController.setter(void *a1)
{
}

void (*CallsSearchController.hostingNavigationController.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPCallsSearchController_hostingNavigationController;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return VoicemailSearchMetadataView.delegate.modify;
}

char *CallsSearchController.searchManager.getter()
{
  uint64_t v1 = OBJC_IVAR___MPCallsSearchController____lazy_storage___searchManager;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___searchManager);
  if (v2)
  {
    uint64_t v3 = *(char **)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___searchManager);
  }
  else
  {
    uint64_t v4 = v0;
    id v5 = objc_allocWithZone((Class)type metadata accessor for SearchManager());
    id v6 = SearchManager.init(itemType:)(0);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v6;
    uint64_t v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id CallsSearchController.contactsService.getter()
{
  uint64_t v1 = OBJC_IVAR___MPCallsSearchController____lazy_storage___contactsService;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___contactsService);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___contactsService);
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController_recentsController);
    id v5 = (objc_class *)type metadata accessor for ContactsService();
    id v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR___MPContactsService_dataProvider] = v4;
    v12.id receiver = v6;
    v12.Class super_class = v5;
    id v7 = v4;
    id v8 = [super init];
    unint64_t v9 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

id CallsSearchController.callServices.getter()
{
  uint64_t v1 = OBJC_IVAR___MPCallsSearchController____lazy_storage___callServices;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___callServices);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___callServices);
  }
  else
  {
    unsigned __int8 v4 = [*(id *)(v0 + OBJC_IVAR___MPCallsSearchController_featureFlags) groupConversations];
    id v5 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController_recentsController);
    id v6 = (objc_class *)type metadata accessor for RecentsCallServices();
    id v7 = objc_allocWithZone(v6);
    *(void *)&v7[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices____lazy_storage___eventSignal] = 0;
    v7[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_groupConversationsEnabled] = v4;
    *(void *)&v7[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_recentsCallServicesDialer] = v5;
    v13.id receiver = v7;
    v13.Class super_class = v6;
    id v8 = v5;
    id v9 = [super init];
    id v10 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v9;
    id v3 = v9;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

id CallsSearchController.recentsDetailPresenter.getter()
{
  uint64_t v1 = OBJC_IVAR___MPCallsSearchController____lazy_storage___recentsDetailPresenter;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___recentsDetailPresenter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___recentsDetailPresenter);
  }
  else
  {
    uint64_t v4 = v0;
    id v5 = *(id *)(v0 + OBJC_IVAR___MPCallsSearchController_recentsController);
    id v6 = CallsSearchController.contactsService.getter();
    id v7 = CallsSearchController.callReportingViewModel.getter();
    id v8 = objc_allocWithZone((Class)type metadata accessor for RecentsDetailPresenter());
    id v9 = specialized RecentsDetailPresenter.init(recentsController:contactsService:callReportingViewModel:)(v5, v6, v7);

    id v10 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v9;
    id v3 = v9;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

id CallsSearchController.callReportingViewModel.getter()
{
  uint64_t v1 = OBJC_IVAR___MPCallsSearchController____lazy_storage___callReportingViewModel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___callReportingViewModel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPCallsSearchController____lazy_storage___callReportingViewModel);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)type metadata accessor for CallReportingViewModel()) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id CallsSearchController.__allocating_init(recentsController:searchResultsController:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v7 = objc_allocWithZone(v2);
  id v8 = CallsSearchController.init(recentsController:featureFlags:)(a1, v6);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v8;
}

id CallsSearchController.init(recentsController:searchResultsController:)(void *a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v6 = objc_allocWithZone(ObjectType);
  id v7 = CallsSearchController.init(recentsController:featureFlags:)(a1, v5);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v7;
}

id CallsSearchController.__allocating_init(recentsController:featureFlags:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return CallsSearchController.init(recentsController:featureFlags:)(a1, a2);
}

id CallsSearchController.init(recentsController:featureFlags:)(void *a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v6 = (Swift::String *)&v2[OBJC_IVAR___MPCallsSearchController_sectionTitle];
  id v7 = self;
  id v8 = v2;
  id v9 = [v7 mainBundle];
  v25._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0x534C4C4143;
  v10._object = (void *)0xE500000000000000;
  v11.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v11.value._object = (void *)0xE900000000000073;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v25._uint64_t countAndFlagsBits = 0;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v25);

  Swift::String *v6 = v13;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_sectionIndex] = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)&v8[OBJC_IVAR___MPCallsSearchController_sectionType] = 2;
  id v14 = _swiftEmptyArrayStorage;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_resultIDs] = _swiftEmptyArrayStorage;
  uint64_t v15 = &v8[OBJC_IVAR___MPCallsSearchController_recentCalls];
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_recentCalls] = _swiftEmptyArrayStorage;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_maximumNumberOfRowsInSection] = 5;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  Logger.init(subsystem:category:)();
  id v16 = &v8[OBJC_IVAR___MPCallsSearchController_searchText];
  *(void *)id v16 = 0;
  *((void *)v16 + 1) = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_searchTokens] = _swiftEmptyArrayStorage;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController____lazy_storage___searchManager] = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_spotlightSearchResultIDs] = _swiftEmptyArrayStorage;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController__cellConfigurator] = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController____lazy_storage___contactsService] = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController____lazy_storage___callServices] = 0;
  uint64_t v17 = &v8[OBJC_IVAR___MPCallsSearchController____lazy_storage___callAction];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController____lazy_storage___recentsDetailPresenter] = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController____lazy_storage___callReportingViewModel] = 0;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_recentsController] = a1;
  *(void *)&v8[OBJC_IVAR___MPCallsSearchController_featureFlags] = a2;
  id v18 = a1;
  id v19 = a2;
  id v20 = [v18 recentCalls];
  if (v20)
  {
    id v21 = v20;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    id v14 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_beginAccess();
  *(void *)uint64_t v15 = v14;

  swift_bridgeObjectRelease();
  v24.id receiver = v8;
  v24.Class super_class = ObjectType;
  id v22 = [super init];
  [v18 addDelegate:v22 queue:0];

  return v22;
}

uint64_t CallsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  type metadata accessor for MainActor();
  v4[22] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[23] = v6;
  unsigned char v4[24] = v5;
  return _swift_task_switch(CallsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t CallsSearchController.search(with:searchTokens:)()
{
  if (![*(id *)(v0[21] + OBJC_IVAR___MPCallsSearchController_featureFlags) callHistorySearchEnabled])
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchText);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchText + 8);
  if (v2)
  {
    if (!v4) {
      goto LABEL_15;
    }
    if (*v3 != v0[18] || v4 != v2)
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v1 = v0[21];
      if ((v6 & 1) == 0) {
        goto LABEL_15;
      }
    }
LABEL_12:
    uint64_t v7 = v0[20];
    unint64_t v8 = swift_bridgeObjectRetain();
    LOBYTE(v7) = specialized static Array<A>.== infix(_:_:)(v8, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v0[21];
    if (v7)
    {
      swift_release();
      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong didCompleteSearchFor:v0[21]];
        swift_unknownObjectRelease();
      }
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  if (!v4) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v10 = v0[19];
  uint64_t v11 = v0[20];
  *uint64_t v3 = v0[18];
  v3[1] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchTokens) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRetain();
    if (String.count.getter() > 0)
    {
LABEL_19:
      Swift::String v13 = CallsSearchController.searchManager.getter();
      v0[25] = v13;
      uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)((swift_isaMask & *(void *)v13) + 0x170)
                                                              + **(int **)((swift_isaMask & *(void *)v13) + 0x170));
      id v14 = (void *)swift_task_alloc();
      v0[26] = v14;
      *id v14 = v0;
      v14[1] = CallsSearchController.search(with:searchTokens:);
      uint64_t v15 = v0[20];
      uint64_t v16 = v0[18];
      return v23(v16, v10, v15);
    }
    unint64_t v12 = v0[20];
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18 >= 1) {
        goto LABEL_19;
      }
    }
    else if (*(uint64_t *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v0[21];
  swift_release();
  id v20 = (void *)(v19 + OBJC_IVAR___MPCallsSearchController_recentCalls);
  swift_beginAccess();
  *id v20 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  id v21 = (void *)(v19 + OBJC_IVAR___MPCallsSearchController_resultIDs);
  swift_beginAccess();
  *id v21 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  *(void *)(v19 + OBJC_IVAR___MPCallsSearchController_spotlightSearchResultIDs) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  [*(id *)(v19 + OBJC_IVAR___MPCallsSearchController_recentsController) setPreFetchingPredicate:0];
LABEL_25:
  id v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  uint64_t (*v16)(void);
  char v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *Strong;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  Class isa;
  void *v28;
  void *v29[2];
  void *v30;
  uint64_t v31;

  Swift::String_optional v30 = v0;
  swift_release();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[27];
    uint64_t v5 = v0[18];
    uint64_t v4 = v0[19];
    char v6 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    v29[0] = v28;
    *(_DWORD *)char v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, (uint64_t *)v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2048;
    uint64_t v7 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    v0[16] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CallsSearchController: Completed search for %s. Got %ld results", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
  }
  unint64_t v8 = *(void *)(v0[27] + 16);
  if (v8)
  {
    id v9 = v0[28];
    v29[0] = *((void **)v0 + 27);
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v29, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (v9) {
      return swift_release();
    }
    uint64_t v10 = v0[21];
    swift_bridgeObjectRelease();
    uint64_t v11 = v29[0];
    unint64_t v12 = OBJC_IVAR___MPCallsSearchController_spotlightSearchResultIDs;
    v29[0] = *(void **)(v10 + OBJC_IVAR___MPCallsSearchController_spotlightSearchResultIDs);
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v29, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    uint64_t v17 = specialized static Array<A>.== infix(_:_:)(v11, v29[0]);
    swift_release();
    swift_release();
    if (v17)
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = Logger.logObject.getter();
      uint64_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "CallsSearchController: Search calls did not change for calls search controller.", v20, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong didCompleteSearchFor:v0[21]];
        swift_unknownObjectRelease();
      }
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    id v22 = Logger.logObject.getter();
    uint64_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134217984;
      v0[14] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "CallsSearchController: Search calls did changed! Search results count: %ld", v24, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    Swift::String v25 = v0[27];

    *(void *)(v10 + v12) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Swift::String v26 = self;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v15 = [v26 predicateForCallsWithAnyUniqueIDs:isa];
  }
  else
  {
    id v14 = v0[21];
    swift_bridgeObjectRelease();
    uint64_t v15 = [self predicateWithValue:0];
    *(void *)(v14 + OBJC_IVAR___MPCallsSearchController_spotlightSearchResultIDs) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  [*(id *)(v0[21] + OBJC_IVAR___MPCallsSearchController_recentsController) setPreFetchingPredicate:v15, v28, v29[0]];

LABEL_10:
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  void *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  id v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  uint64_t v1 = (void *)v0[25];
  swift_release();

  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[18];
    char v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)char v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CallsSearchController: Failed to search for %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v7 = [self predicateWithValue:0];
  swift_errorRelease();

  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t CallsSearchController.search(with:searchTokens:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(void *)(v3 + 184);
    uint64_t v5 = *(void *)(v3 + 192);
    char v6 = CallsSearchController.search(with:searchTokens:);
  }
  else
  {

    uint64_t v4 = *(void *)(v3 + 184);
    uint64_t v5 = *(void *)(v3 + 192);
    char v6 = CallsSearchController.search(with:searchTokens:);
  }
  return _swift_task_switch(v6, v4, v5);
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    Swift::String v13 = v12;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        uint64_t v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        id v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      Swift::String v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        uint64_t v27 = *v25++;
        Swift::String v26 = v27;
        uint64_t v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t @objc closure #1 in CallsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in CallsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t @objc closure #1 in CallsSearchController.search(with:searchTokens:)()
{
  uint64_t v1 = (const void *)v0[4];
  uint64_t v2 = v0[2];
  swift_release();
  v0[7] = _Block_copy(v1);
  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  v0[8] = v2;
  uint64_t v5 = (void *)v0[5];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v6;
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in CallsSearchController.search(with:searchTokens:);
  return CallsSearchController.search(with:searchTokens:)(v3, v2, v6);
}

{
  uint64_t *v0;
  void (**v1)(void);
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void (***)(void))(*v0 + 56);
  uint64_t v2 = *(void **)(*v0 + 40);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

Swift::Void __swiftcall CallsSearchController.cancelPreviousSearchRequests()()
{
  uint64_t v1 = v0;
  if ([*(id *)(v0 + OBJC_IVAR___MPCallsSearchController_featureFlags) callHistorySearchEnabled])
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CallsSearchController: cancelling previous search requests", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = CallsSearchController.searchManager.getter();
    (*(void (**)(void))((swift_isaMask & *(void *)v5) + 0x180))();

    uint64_t v6 = *(void **)(v1 + OBJC_IVAR___MPCallsSearchController_recentsController);
    [v6 cancelSearchFetchOperations];
  }
}

void *CallsSearchController.cellConfigurator(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR___MPCallsSearchController__cellConfigurator;
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR___MPCallsSearchController__cellConfigurator);
  if (v5)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v7 = (void *)Strong;
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UITableView);
      id v8 = v5;
      id v9 = a1;
      id v10 = v7;
      LOBYTE(v7) = static NSObject.== infix(_:_:)();

      if (v7) {
        return v5;
      }
    }
    else
    {
      id v35 = v5;
    }
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "CallsSearchController is being used with more than one tableView. This may lead to unexpected behavior.", v38, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectWeakAssign();
    uint64_t v39 = swift_unknownObjectWeakLoadStrong();
    if (v39)
    {
      id v40 = (void *)v39;
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for MPLegacyRecentsTableViewCell);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v42 = a1;
      NSString v43 = String._bridgeToObjectiveC()();
      [v40 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v43];
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v5 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v5)
    {
      uint64_t v45 = v4;
      uint64_t v47 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v11 = CallsSearchController.callReportingViewModel.getter();
      id v48 = v5;
      id v12 = CallsSearchController.contactsService.getter();
      Swift::String v13 = (objc_class *)type metadata accessor for ReportFlowPresenter();
      char v14 = (char *)objc_allocWithZone(v13);
      swift_unknownObjectWeakInit();
      unint64_t v15 = &v14[OBJC_IVAR___MPReportFlowPresenter_logger];
      uint64_t v16 = one-time initialization token for mobilePhone;
      unint64_t v17 = v14;
      if (v16 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.mobilePhone);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v15, v19, v18);
      *(void *)&v17[OBJC_IVAR___MPReportFlowPresenter_classificationViewController] = 0;
      *(void *)&v17[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel] = v11;
      swift_unknownObjectWeakAssign();
      *(void *)&v17[OBJC_IVAR___MPReportFlowPresenter_contactsService] = v12;
      id v20 = v11;
      id v21 = v12;

      v49.id receiver = v17;
      v49.Class super_class = v13;
      [super init];

      id v22 = *(void **)(v2 + OBJC_IVAR___MPCallsSearchController_recentsController);
      unint64_t v23 = *(void **)(v2 + OBJC_IVAR___MPCallsSearchController_featureFlags);
      id v24 = a1;
      id v25 = v22;
      id v26 = v23;
      id v27 = CallsSearchController.callReportingViewModel.getter();
      id v28 = CallsSearchController.contactsService.getter();
      id v29 = CallsSearchController.callServices.getter();
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = v29;
      id v31 = objc_allocWithZone((Class)type metadata accessor for RecentsCellConfigurator());
      id v32 = specialized RecentsCellConfigurator.init(tableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:)(v24, v25, v26, 1, v27, v46, v28, (uint64_t)partial apply for implicit closure #3 in implicit closure #2 in CallsSearchController.cellConfigurator(for:), v30, (uint64_t)partial apply for closure #1 in CallsSearchController.cellConfigurator(for:), v47);

      swift_release();
      swift_release();
      uint64_t v33 = *(void **)(v2 + v45);
      *(void *)(v2 + v45) = v32;

      uint64_t v5 = *(void **)(v2 + v45);
      id v34 = v5;
    }
  }
  return v5;
}

void closure #1 in CallsSearchController.cellConfigurator(for:)(Swift::OpaquePointer a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    os_log_type_t v3 = (void *)Strong;
    CallsSearchController.removeCalls(at:)(a1);
  }
}

Swift::Void __swiftcall CallsSearchController.removeCalls(at:)(Swift::OpaquePointer at)
{
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation9IndexPathVG_Sis5NeverOTg5069_s11MobilePhone21CallsSearchControllerC06removeC02atySay10Foundation9eF62VG_tFSiAHcfu_33_8941dfb2fcfdfc7158d0bd40016e2c72AHSiTf3nnnpk_nTf1cn_n((uint64_t)at._rawValue);
  os_log_type_t v3 = v1;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_So12CHRecentCallCs5NeverOTg5087_s11MobilePhone21CallsSearchControllerC06removeC02atySay10Foundation9IndexPathVG_tFSo12dE8CSiXEfU_0H5Phone0jkL0CTf1cn_nTf4ng_n((uint64_t)v2, (uint64_t)v3);

  v20[0] = (uint64_t)v2;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v20, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v20[0] + 16);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)&v3[OBJC_IVAR___MPCallsSearchController_recentCalls];
    uint64_t v6 = (unint64_t *)(v20[0] + 32);
    while (1)
    {
      unint64_t v8 = *v6++;
      unint64_t v7 = v8;
      swift_beginAccess();
      unint64_t v9 = *v5;
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v5 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *uint64_t v5 = v9;
      }
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      unint64_t v12 = *(void *)(v11 + 16);
      if (v7 >= v12) {
        break;
      }
      unint64_t v13 = v12 - 1;
      uint64_t v14 = v12 - 1 - v7;
      if (v14 < 0) {
        goto LABEL_12;
      }
      uint64_t v15 = v11 + 8 * v7;
      uint64_t v16 = *(void **)(v15 + 32);
      memmove((void *)(v15 + 32), (const void *)(v15 + 40), 8 * v14);
      *(void *)(v11 + 16) = v13;
      specialized Array._endMutation()();
      swift_endAccess();

      if (!--v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_release();
    unint64_t v17 = *(void **)&v3[OBJC_IVAR___MPCallsSearchController_recentsController];
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 deleteRecentCalls:isa];

    swift_beginAccess();
    unint64_t v19 = swift_bridgeObjectRetain();
    CallsSearchController.update(with:)(v19);
    swift_bridgeObjectRelease();
  }
}

Swift::Int __swiftcall CallsSearchController.numberOfRowsInConsolidatedView()()
{
  if (![*(id *)(v0 + OBJC_IVAR___MPCallsSearchController_featureFlags) callHistorySearchEnabled])return 0; {
  swift_beginAccess();
  }
  unint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized _arrayForceCast<A, B>(_:)(v1, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  swift_bridgeObjectRelease();
  Swift::Int v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = (Swift::Int *)(v0 + OBJC_IVAR___MPCallsSearchController_maximumNumberOfRowsInSection);
  swift_beginAccess();
  if (*v4 >= v3) {
    return v3;
  }
  else {
    return *v4;
  }
}

Swift::Void __swiftcall CallsSearchController.registerCell(with:)(UITableView with)
{
  unint64_t v1 = CallsSearchController.cellConfigurator(for:)(with.super.super.super.super.isa);
}

id CallsSearchController.tableView(_:willDisplay:forRowAt:)()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController_recentsController);
  uint64_t v2 = IndexPath.row.getter();

  return [v1 continuousScrollingReachedIndexPath:v2];
}

uint64_t CallsSearchController.tableView(_:cellForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  uint64_t v11 = CallsSearchController.cellConfigurator(for:)(a1);
  if (v11)
  {
    id v35 = v11;
    unint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR___MPCallsSearchController_recentCalls);
    swift_beginAccess();
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((*v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (IndexPath.row.getter() >= v13)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v30, v31))
      {
        id v32 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v32 = 134217984;
        id v34 = v32 + 4;
        uint64_t v33 = IndexPath.row.getter();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v36 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "We do not have a recentsItem for row %ld, cannot return a well formed cell.\nThis is programmer error.\nIts the job of the caller to make sure the table view is in sync with the datasource.", v32, 0xCu);
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      unint64_t v17 = v35;

      id v19 = getter of emptyCell #1 in CallsSearchController.tableView(_:cellForRowAt:)(v10, a1);
      goto LABEL_22;
    }
    unint64_t v14 = IndexPath.row.getter();
    uint64_t result = swift_beginAccess();
    uint64_t v16 = *v12;
    if ((*v12 & 0xC000000000000001) == 0)
    {
      unint64_t v17 = v35;
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v14 < *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v18 = *(id *)(v16 + 8 * v14 + 32);
LABEL_9:
        swift_endAccess();
        id v19 = RecentsCellConfigurator.cell(for:recentCall:)(a2, v18);

        unint64_t v20 = *(void *)(v3 + OBJC_IVAR___MPCallsSearchController_searchText + 8);
        if (v20)
        {
          uint64_t v21 = *(void *)(v3 + OBJC_IVAR___MPCallsSearchController_searchText);
          uint64_t v22 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
          }
          if (v22)
          {
            self;
            uint64_t v23 = swift_dynamicCastObjCClass();
            if (v23)
            {
              id v24 = (void *)v23;
              swift_bridgeObjectRetain();
              id v19 = v19;
              NSString v25 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v24 configureCellForHighlightingWithText:v25];
              swift_release();

              return (uint64_t)v19;
            }
          }
        }
LABEL_22:
        swift_release();

        return (uint64_t)v19;
      }
      __break(1u);
      return result;
    }
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v17 = v35;
    goto LABEL_9;
  }
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "We do not have a navigation controller, cannot return a well formed cell.", v28, 2u);
    swift_slowDealloc();
  }

  id v29 = getter of emptyCell #1 in CallsSearchController.tableView(_:cellForRowAt:)(v10, a1);
  swift_release();
  return (uint64_t)v29;
}

id getter of emptyCell #1 in CallsSearchController.tableView(_:cellForRowAt:)(uint64_t a1, void *a2)
{
  uint64_t v3 = (void **)(a1 + 16);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    id v4 = *(id *)(a1 + 16);
  }
  else
  {
    uint64_t v5 = (void *)closure #1 in CallsSearchController.tableView(_:cellForRowAt:)(a2);
    swift_beginAccess();
    uint64_t v6 = *v3;
    *uint64_t v3 = v5;
    id v4 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v4;
}

uint64_t closure #1 in CallsSearchController.tableView(_:cellForRowAt:)(void *a1)
{
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for UITableViewCell);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 dequeueReusableCellWithIdentifier:v4];

  if (v5) {
    return (uint64_t)v5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall CallsSearchController.highlightMatchedText(in:)(UITableViewCell in)
{
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchText + 8);
  if (v2)
  {
    uint64_t v3 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      uint64_t v3 = *(void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchText) & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      self;
      uint64_t v5 = swift_dynamicCastObjCClass();
      if (v5)
      {
        uint64_t v6 = (void *)v5;
        swift_bridgeObjectRetain();
        id v7 = in.super.super.super.isa;
        id v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v6 configureCellForHighlightingWithText:v8];
      }
    }
  }
}

void CallsSearchController.tableView(_:didSelectRowAt:)(void *a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _arrayForceCast<A, B>(_:)(v4, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (IndexPath.row.getter() >= v6) {
    goto LABEL_10;
  }
  unint64_t v7 = swift_bridgeObjectRetain();
  id v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v7, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  swift_bridgeObjectRelease();
  unint64_t v9 = IndexPath.row.getter();
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < v8[2])
  {
    outlined init with copy of Any((uint64_t)&v8[4 * v9 + 4], (uint64_t)v19);
    swift_bridgeObjectRelease();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    if (swift_dynamicCast())
    {
      id v8 = v18;
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v11 = (void *)Strong;
        id v12 = CallsSearchController.recentsDetailPresenter.getter();
        RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(v18, v11);
      }
      if (one-time initialization token for shared == -1) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
LABEL_10:
    v17.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    [a1 deselectRowAtIndexPath:v17.super.isa animated:0];
    goto LABEL_13;
  }
  __break(1u);
LABEL_16:
  swift_once();
LABEL_8:
  uint64_t v13 = (void *)static SearchMetrics.shared;
  unint64_t v14 = (unsigned int *)(v2 + OBJC_IVAR___MPCallsSearchController_sectionType);
  swift_beginAccess();
  uint64_t v15 = *v14;
  if (*(void *)(v2 + OBJC_IVAR___MPCallsSearchController_searchText + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = -1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v13) + 0xE0))(1, v15, v16);
  v17.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  [a1 deselectRowAtIndexPath:v17.super.isa animated:0];

LABEL_13:
}

uint64_t CallsSearchController.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (uint64_t *)(v2 + OBJC_IVAR___MPCallsSearchController_recentCalls);
  swift_beginAccess();
  if ((unint64_t)*v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (IndexPath.row.getter() >= v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134217984;
      uint64_t v22 = IndexPath.row.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v23 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "We do not have a recentsItem for row %ld, cannot return a swipe actions configuration.\nThis is programmer error.\nIts the job of the caller to make sure the table view is in sync with the datasource.", v21, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    return 0;
  }
  uint64_t v11 = CallsSearchController.cellConfigurator(for:)(a1);
  if (!v11) {
    return 0;
  }
  id v12 = v11;
  unint64_t v13 = IndexPath.row.getter();
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *v9;
  if ((*v9 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(v15 + 8 * v13 + 32);
LABEL_9:
    NSIndexPath v17 = v16;
    swift_endAccess();
    id v18 = RecentsCellConfigurator.trailingSwipeActionsConfigurationForRow(at:recentCall:)(a2, v17);

    return (uint64_t)v18;
  }
  __break(1u);
  return result;
}

void *CallsSearchController.update(with:)(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (unint64_t *)(v1 + OBJC_IVAR___MPCallsSearchController_recentCalls);
  swift_beginAccess();
  unint64_t *v4 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5)
  {
    uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = v2;
    uint64_t v7 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      unint64_t v9 = v8;
      id v10 = [v8 uniqueId:v21];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      }
      ++v7;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      id v16 = &_swiftEmptyArrayStorage[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
    }
    while (v5 != v7);
    uint64_t v2 = v21;
  }
  NSIndexPath v17 = (void *)(v2 + OBJC_IVAR___MPCallsSearchController_resultIDs);
  swift_beginAccess();
  *NSIndexPath v17 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v20 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "CallsSearchController: Fetched calls. Found %ld calls", v20, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  swift_beginAccess();
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result didCompleteSearchFor:v2];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Bool __swiftcall CallsSearchController.sectionNeedsIndexing()()
{
  uint64_t v0 = self;
  if ([v0 shouldReindexCallsDueToVersionMismatch]) {
    return 1;
  }
  else {
    return [v0 shouldReindexCallsDueToDeferredReindexing];
  }
}

uint64_t CallsSearchController.configure(cardController:presentationResultForIndex:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *(void **)(v3 + OBJC_IVAR___MPCallsSearchController__cellConfigurator);
  if (!v10) {
    return 1;
  }
  uint64_t v11 = (uint64_t *)(v3 + OBJC_IVAR___MPCallsSearchController_recentCalls);
  swift_beginAccess();
  uint64_t v12 = *v11;
  unint64_t v13 = (unint64_t)*v11 >> 62;
  os_log_type_t v27 = a1;
  if (v13)
  {
    id v25 = v10;
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v15 = v10;
  }
  if (IndexPath.row.getter() >= v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      uint64_t v24 = IndexPath.row.getter();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v28 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "We do not have a recentsItem for row %ld, ignoring configure request for avatar card.\nThis is programmer error.\nIts the job of the caller to make sure the table view is in sync with the datasource.", v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    uint64_t v21 = 1;
    goto LABEL_15;
  }
  unint64_t v16 = IndexPath.row.getter();
  uint64_t result = swift_beginAccess();
  uint64_t v18 = *v11;
  if ((*v11 & 0xC000000000000001) != 0)
  {
    os_log_type_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v16 < *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    os_log_type_t v19 = *(id *)(v18 + 8 * v16 + 32);
LABEL_9:
    os_log_type_t v20 = v19;
    swift_endAccess();
    uint64_t v21 = RecentsCellConfigurator.configure(cardController:for:)(v27, (uint64_t)v20);
LABEL_15:

    return v21;
  }
  __break(1u);
  return result;
}

UIViewController __swiftcall CallsSearchController.viewForDetails()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController_recentsController);
  unint64_t v4 = *(void **)(v0 + OBJC_IVAR___MPCallsSearchController_featureFlags);
  id v5 = objc_allocWithZone(ObjectType);
  id v6 = v3;
  uint64_t v7 = (char *)CallsSearchController.init(recentsController:featureFlags:)(v6, v4);
  uint64_t v8 = &v7[OBJC_IVAR___MPCallsSearchController_sectionTitle];
  swift_beginAccess();
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0xE000000000000000;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

  *(void *)&v7[OBJC_IVAR___MPCallsSearchController_searchTokens] = *(void *)(v1
                                                                               + OBJC_IVAR___MPCallsSearchController_searchTokens);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = &v7[OBJC_IVAR___MPCallsSearchController_maximumNumberOfRowsInSection];
  swift_beginAccess();
  *(void *)id v10 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchText + 8);
  uint64_t v12 = &v7[OBJC_IVAR___MPCallsSearchController_searchText];
  *(void *)uint64_t v12 = *(void *)(v1 + OBJC_IVAR___MPCallsSearchController_searchText);
  *((void *)v12 + 1) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for SearchViewController(0);
  unint64_t v13 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v14 = swift_unknownObjectWeakLoadStrong();
  (*(void (**)(uint64_t))((swift_isaMask & *v13) + 0xE0))(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1002053A0;
  *(void *)(v15 + 32) = v7;
  uint64_t v22 = v15;
  specialized Array._endMutation()();
  unint64_t v16 = *(void (**)(uint64_t))((swift_isaMask & *v13) + 0x170);
  NSIndexPath v17 = v7;
  v16(v22);
  id v18 = [v6 recentCalls];
  if (v18)
  {
    os_log_type_t v19 = v18;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    os_log_type_t v20 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    os_log_type_t v20 = _swiftEmptyArrayStorage;
  }
  CallsSearchController.update(with:)((unint64_t)v20);
  swift_bridgeObjectRelease();

  return (UIViewController)v13;
}

void CallsSearchController.init()()
{
}

Swift::Void __swiftcall CallsSearchController.recentsController(_:didChangeUnreadCallCount:)(PHRecentsController *_, Swift::UInt didChangeUnreadCallCount)
{
  uint64_t v2 = [(PHRecentsController *)_ recentCalls];
  if (v2)
  {
    uint64_t v3 = v2;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    unint64_t v4 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v4 = _swiftEmptyArrayStorage;
  }
  CallsSearchController.update(with:)((unint64_t)v4);

  swift_bridgeObjectRelease();
}

uint64_t @objc CallsSearchController.recentsController(_:didUpdate:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  id v6 = [v4 recentCalls];
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    uint64_t v8 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  CallsSearchController.update(with:)((unint64_t)v8);

  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_100133790()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in CallsSearchController.cellConfigurator(for:)(Swift::OpaquePointer a1)
{
}

uint64_t sub_1001337D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

id partial apply for implicit closure #3 in implicit closure #2 in CallsSearchController.cellConfigurator(for:)(void *a1)
{
  return RecentsCallServices.placeCall(with:)(a1);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v83 >= v81) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      unint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          Swift::String v86 = v11;
          Swift::String v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          unsigned __int16 v90 = &v86[16 * v85 + 32];
          *(void *)unsigned __int16 v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    unint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v15 < v14 == v16 >= v17) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        id v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (*v25 >= v23) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *id v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      Swift::String v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    id v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          unint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        objc_super v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        BOOL v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        Swift::String v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)Swift::String v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        id v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = v14;
    uint64_t v15 = v6;
    while (1)
    {
      Swift::Int v9 = *(void **)v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v10 = [v7 sectionIndex];
      uint64_t v11 = [v9 sectionIndex];
      swift_unknownObjectRelease();
      Swift::Int result = swift_unknownObjectRelease();
      if ((uint64_t)v10 >= (uint64_t)v11)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v15 + 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      unint64_t v12 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v12;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  unint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      id v25 = v17;
      unint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        Swift::Int v18 = (char *)(a3 - 16);
        Swift::Int v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            id v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)Swift::Int v18 = *((_OWORD *)v17 - 1);
            }
            Swift::Int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)Swift::Int v18 = *(_OWORD *)v19;
            }
            unint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    id v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      unint64_t v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  BOOL v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (v20 >= *((void *)v16 - 1))
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v4 >= *(void *)v6)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          BOOL v23 = v4;
          BOOL v15 = v6;
        }
        else
        {
          BOOL v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_So12CHRecentCallCs5NeverOTg5087_s11MobilePhone21CallsSearchControllerC06removeC02atySay10Foundation9IndexPathVG_tFSo12dE8CSiXEfU_0H5Phone0jkL0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (!v3) {
    return result;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v6 = (unint64_t *)(a1 + 32);
  uint64_t v7 = (uint64_t *)(a2 + OBJC_IVAR___MPCallsSearchController_recentCalls);
  while (1)
  {
    unint64_t v9 = *v6++;
    unint64_t v8 = v9;
    uint64_t result = (void *)swift_beginAccess();
    uint64_t v10 = *v7;
    if ((*v7 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_7;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      break;
    }
    if (v8 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_12;
    }
    id v11 = *(id *)(v10 + 8 * v8 + 32);
LABEL_7:
    swift_endAccess();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v3) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100134CA4@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t sub_100134CB0()
{
  return keypath_setTm();
}

uint64_t sub_100134CBC@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t keypath_getTm@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_100134D1C()
{
  return keypath_setTm();
}

uint64_t keypath_setTm()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t ObjC metadata update function for CallsSearchController()
{
  return type metadata accessor for CallsSearchController();
}

uint64_t type metadata accessor for CallsSearchController()
{
  uint64_t result = type metadata singleton initialization cache for CallsSearchController;
  if (!type metadata singleton initialization cache for CallsSearchController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CallsSearchController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100134ED4()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in CallsSearchController.search(with:searchTokens:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in CallsSearchController.search(with:searchTokens:)
                                                                  + async function pointer to @objc closure #1 in CallsSearchController.search(with:searchTokens:));
  return v7(v2, v3, v5, v4);
}

uint64_t String.localizedPHRecents.getter(uint64_t a1, void *a2)
{
  return String.localizedPHRecents.getter(a1, a2, 0x746E656365524850, (void *)0xE900000000000073);
}

uint64_t String.localizedGeneral.getter(uint64_t a1, void *a2)
{
  return String.localizedPHRecents.getter(a1, a2, 0x6C6172656E6547, (void *)0xE700000000000000);
}

uint64_t String.localizedVoicemail.getter(uint64_t a1, void *a2)
{
  return String.localizedPHRecents.getter(a1, a2, 0x6D6563696F56504DLL, (void *)0xEB000000006C6961);
}

uint64_t String.localizedRecents.getter(uint64_t a1, void *a2)
{
  return String.localizedPHRecents.getter(a1, a2, 0x73746E65636552, (void *)0xE700000000000000);
}

uint64_t String.localizedICS.getter(uint64_t a1, void *a2)
{
  return String.localizedPHRecents.getter(a1, a2, 0x65536C6C61436E49, (void *)0xED00006563697672);
}

uint64_t String.localizedAlerts.getter(uint64_t a1, void *a2)
{
  return String.localizedPHRecents.getter(a1, a2, 0xD000000000000012, (void *)0x8000000100240E80);
}

uint64_t String.localizedPHRecents.getter(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v8 = [self mainBundle];
  v14._object = (void *)0xE000000000000000;
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  v10.value._uint64_t countAndFlagsBits = a3;
  v10.value._object = a4;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v14)._countAndFlagsBits;

  return countAndFlagsBits;
}

Swift::Void __swiftcall VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)(Swift::Bool sendNotifications)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor();
  id v7 = v1;
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = &protocol witness table for MainActor;
  *(void *)(v9 + 32) = v7;
  *(unsigned char *)(v9 + 40) = sendNotifications;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:), v9);
  swift_release();
}

uint64_t closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 32) = a5;
  *(void *)(v5 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 24) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:), v7, v6);
}

uint64_t closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_release();
  [*(id *)(v2 + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager) requestInitialStateIfNecessaryAndSendNotifications:v1];
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)(a1, v4, v5, v6, v7);
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in VisualVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)(a1, v4, v5, v6, v7);
}

uint64_t RecentCallsListView.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
  *a1 = EnvironmentObject.init()();
  a1[1] = v2;
  uint64_t v3 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecentCallsListView() + 20));
  *uint64_t v3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for RecentCallsListView()
{
  uint64_t result = type metadata singleton initialization cache for RecentCallsListView;
  if (!type metadata singleton initialization cache for RecentCallsListView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id RecentCallsListView.recentsController.getter()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    return v1;
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
    id result = (id)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t RecentCallsListView.$recentsController.getter()
{
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);

  return EnvironmentObject.projectedValue.getter();
}

uint64_t RecentCallsListView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = type metadata accessor for TaskPriority();
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>);
  List<>.init(content:)();
  type metadata accessor for RecentCallsListView();
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  char v15 = Optional<A>.isEditing.getter();
  outlined destroy of Locale?((uint64_t)v6, &demangling cache variable for type metadata for Binding<EditMode>?);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v7);
  v14[*(int *)(v12 + 44)] = v15 & 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static TaskPriority.userInitiated.getter();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>, _TaskModifier>);
  uint64_t v17 = v25;
  Swift::Int v18 = (char *)(v25 + *(int *)(v16 + 36));
  uint64_t v19 = type metadata accessor for _TaskModifier();
  uint64_t v20 = v24;
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v18[*(int *)(v19 + 20)], v3, v26);
  *(void *)Swift::Int v18 = &async function pointer to closure #2 in RecentCallsListView.body.getter;
  *((void *)v18 + 1) = 0;
  outlined init with copy of (String, Any)((uint64_t)v14, v17, &demangling cache variable for type metadata for ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v21);
  return outlined destroy of Locale?((uint64_t)v14, &demangling cache variable for type metadata for ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>);
}

uint64_t closure #1 in RecentCallsListView.body.getter@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[CHRecentCall], String, RecentCallView>);
  uint64_t v40 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - v8;
  __chkstk_darwin(v7);
  uint64_t v43 = (uint64_t)&v39 - v10;
  uint64_t v11 = type metadata accessor for RecentsUnknownCallersTip();
  __chkstk_darwin(v11);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TipView<RecentsUnknownCallersTip>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  Swift::Int v18 = (char *)&v39 - v17;
  RecentsUnknownCallersTip.init()();
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1(&lazy protocol witness table cache variable for type RecentsUnknownCallersTip and conformance RecentsUnknownCallersTip, (void (*)(uint64_t))&type metadata accessor for RecentsUnknownCallersTip);
  TipView.init(_:arrowEdge:action:)();
  uint64_t v19 = a1;
  uint64_t v20 = *a1;
  if (!v20) {
    goto LABEL_4;
  }
  uint64_t v41 = v4;
  BOOL v42 = v16;
  swift_getKeyPath();
  swift_getKeyPath();
  id v21 = v20;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CHRecentCall]);
  type metadata accessor for RecentCallView(0);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [CHRecentCall] and conformance [A], &demangling cache variable for type metadata for [CHRecentCall]);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1(&lazy protocol witness table cache variable for type RecentCallView and conformance RecentCallView, (void (*)(uint64_t))type metadata accessor for RecentCallView);
  ForEach<>.init(_:id:content:)();
  uint64_t v22 = *v19;
  if (*v19)
  {
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in RecentCallsListView.body.getter;
    *(void *)(v24 + 24) = v23;
    uint64_t v25 = v40;
    uint64_t v26 = v47;
    uint64_t v27 = v44;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v9, v47, v44);
    unint64_t v28 = (uint64_t (**)())&v9[*(int *)(v41 + 36)];
    uint8_t *v28 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
    v28[1] = (uint64_t (*)())v24;
    id v29 = *(void (**)(char *, uint64_t))(v25 + 8);
    id v30 = v22;
    v29(v26, v27);
    uint64_t v31 = v43;
    outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v9, v43, &demangling cache variable for type metadata for ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v33 = v42;
    v32(v42, v18, v12);
    uint64_t v34 = v45;
    outlined init with copy of (String, Any)(v31, v45, &demangling cache variable for type metadata for ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>);
    char v35 = v46;
    v32(v46, v33, v12);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>));
    outlined init with copy of (String, Any)(v34, (uint64_t)&v35[*(int *)(v36 + 48)], &demangling cache variable for type metadata for ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>);
    outlined destroy of Locale?(v31, &demangling cache variable for type metadata for ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v13 + 8);
    v37(v18, v12);
    outlined destroy of Locale?(v34, &demangling cache variable for type metadata for ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>);
    return ((uint64_t (*)(char *, uint64_t))v37)(v33, v12);
  }
  else
  {
LABEL_4:
    type metadata accessor for ObservableRecentsController(0);
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in RecentCallsListView.body.getter@<X0>(char *a1@<X8>)
{
  return closure #1 in RecentCallsListView.body.getter(*(void ***)(v1 + 16), a1);
}

uint64_t closure #1 in closure #1 in RecentCallsListView.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static RecentsUnknownCallersTip.spamBlockingAppsEditorialURLString.getter();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return outlined destroy of Locale?((uint64_t)v2, &demangling cache variable for type metadata for URL?);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  int v11 = TUOpenSensitiveURL();

  if (v11)
  {
    type metadata accessor for TPTipsHelper();
    dispatch thunk of static TPTipsHelper.donateEventKnownStoryLaunched()();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void key path getter for CHRecentCall.uniqueId : CHRecentCall(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 uniqueId];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t closure #2 in closure #1 in RecentCallsListView.body.getter@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = *a1;
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);
  id v4 = v3;
  uint64_t v5 = EnvironmentObject.init()();
  uint64_t v7 = v6;
  *(void *)a2 = v4;
  State.init(wrappedValue:)();
  *(unsigned char *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v7;
  uint64_t v8 = type metadata accessor for RecentCallView(0);
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(v8 + 28));
  *uint64_t v9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)(a2 + *(int *)(v8 + 32));
  *uint64_t v10 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  return swift_storeEnumTagMultiPayload();
}

void implicit closure #2 in implicit closure #1 in closure #1 in RecentCallsListView.body.getter(uint64_t a1, void *a2)
{
  id v3 = a2;
  specialized Sequence.compactMap<A>(_:)(a1, (uint64_t)v3);

  id v4 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController];
  type metadata accessor for CHRecentCall();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 deleteRecentCalls:isa];
}

uint64_t RecentCallsListViewPreferenceData.isEditing.getter(char a1)
{
  return a1 & 1;
}

uint64_t closure #2 in RecentCallsListView.body.getter()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(closure #2 in RecentCallsListView.body.getter, v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t v4;

  type metadata accessor for TPTipsHelper();
  *(void *)(v0 + 40) = static TPTipsHelper.taskQueue.getter();
  id v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of TaskQueue.sync<A>(_:)
                         + async function pointer to dispatch thunk of TaskQueue.sync<A>(_:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = closure #2 in RecentCallsListView.body.getter;
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 32);
  id v3 = *(void *)(v1 + 24);
  return _swift_task_switch(closure #2 in RecentCallsListView.body.getter, v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #2 in RecentCallsListView.body.getter()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  type metadata accessor for TPTipsHelper();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = closure #1 in closure #2 in RecentCallsListView.body.getter;
  return static TPTipsHelper.shared.getter();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 40);
  swift_release();
  dispatch thunk of TPTipsHelper.setup()();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in closure #2 in RecentCallsListView.body.getter(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in closure #2 in RecentCallsListView.body.getter, v3, v2);
}

uint64_t default argument 0 of RecentCallsListView.init(recentsController:)()
{
  type metadata accessor for ObservableRecentsController(0);
  _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ObservableRecentsController and conformance ObservableRecentsController, (void (*)(uint64_t))type metadata accessor for ObservableRecentsController);

  return EnvironmentObject.init()();
}

uint64_t RecentCallsListView.init(recentsController:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  uint64_t v3 = (void *)((char *)a3 + *(int *)(type metadata accessor for RecentCallsListView() + 20));
  *uint64_t v3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);

  return swift_storeEnumTagMultiPayload();
}

char *RecentCallsListViewPreferenceKey.defaultValue.unsafeMutableAddressor()
{
  return &static RecentCallsListViewPreferenceKey.defaultValue;
}

uint64_t static RecentCallsListViewPreferenceKey.defaultValue.getter()
{
  return static RecentCallsListViewPreferenceKey.defaultValue;
}

uint64_t static RecentCallsListViewPreferenceKey.defaultValue.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static RecentCallsListViewPreferenceKey.defaultValue = a1;
  return result;
}

uint64_t (*static RecentCallsListViewPreferenceKey.defaultValue.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t static RecentCallsListViewPreferenceKey.reduce(value:nextValue:)(unsigned char *a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance RecentCallsListViewPreferenceKey@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static RecentCallsListViewPreferenceKey.defaultValue;
  return result;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RecentCallsListViewPreferenceKey(unsigned char *a1, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t result = a2(&v4);
  *a1 = v4;
  return result;
}

uint64_t protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance RecentCallsListViewPreferenceKey()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance RecentCallsListViewPreferenceKey()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t RecentCallsListViewPreferenceData.isEditing.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

BOOL static RecentCallsListViewPreferenceData.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Environment.wrappedValue.getter((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100240EA0, a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void v17[3];
  uint64_t v18;

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v10, a1, &demangling cache variable for type metadata for Binding<EditMode>?);
  }
  char v12 = static os_log_type_t.fault.getter();
  uint64_t v13 = static Log.runtimeIssuesLog.getter();
  uint64_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[1] = a1;
    Swift::Int v18 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    v17[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x8000000100240EC0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallsListView()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for RecentCallsListView(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *((void *)a1 + 1) = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = (char **)((char *)a2 + v6);
    uint64_t v9 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v13 = v8[1];
        *(void *)uint64_t v7 = *v8;
        *((void *)v7 + 1) = v13;
        uint64_t v14 = *(int *)(v10 + 32);
        Swift::Int v18 = (char *)v8 + v14;
        uint64_t v19 = &v7[v14];
        uint64_t v15 = type metadata accessor for EditMode();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
        swift_retain();
        swift_retain();
        v16(v19, v18, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
    }
    else
    {
      *(void *)uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RecentCallsListView(id *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
    if (!result)
    {
      swift_release();
      swift_release();
      uint64_t v7 = &v4[*(int *)(v5 + 32)];
      uint64_t v8 = type metadata accessor for EditMode();
      uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
      return v9(v7, v8);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for RecentCallsListView(void *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  id v9 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v13;
      uint64_t v14 = *(int *)(v10 + 32);
      Swift::Int v18 = (char *)v8 + v14;
      uint64_t v19 = (char *)v7 + v14;
      uint64_t v15 = type metadata accessor for EditMode();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_retain();
      swift_retain();
      v16(v19, v18, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for RecentCallsListView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    outlined destroy of Locale?(a1 + v9, &demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
        uint64_t v15 = *(int *)(v12 + 32);
        uint64_t v19 = (char *)v11 + v15;
        uint64_t v20 = (char *)v10 + v15;
        uint64_t v16 = type metadata accessor for EditMode();
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_retain();
        swift_retain();
        v17(v20, v19, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for RecentCallsListView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (void *)((char *)a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
      memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v11;
      uint64_t v12 = *(int *)(v8 + 32);
      uint64_t v13 = (char *)v5 + v12;
      uint64_t v14 = (char *)v6 + v12;
      uint64_t v15 = type metadata accessor for EditMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void **assignWithTake for RecentCallsListView(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void **)((char *)a1 + v7);
    uint64_t v9 = (void **)((char *)a2 + v7);
    outlined destroy of Locale?((uint64_t)a1 + v7, &demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        uint64_t v14 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v14;
        uint64_t v15 = *(int *)(v11 + 32);
        uint64_t v16 = (char *)v8 + v15;
        uint64_t v17 = (char *)v9 + v15;
        uint64_t v18 = type metadata accessor for EditMode();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallsListView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100137BCC);
}

uint64_t sub_100137BCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for RecentCallsListView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100137CA0);
}

void *sub_100137CA0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<EditMode>?>);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for RecentCallsListView()
{
  type metadata accessor for Environment<Binding<EditMode>?>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for RecentCallsListViewPreferenceKey()
{
  return &type metadata for RecentCallsListViewPreferenceKey;
}

uint64_t getEnumTagSinglePayload for RecentCallsListViewPreferenceData(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RecentCallsListViewPreferenceData(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100137F60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallsListViewPreferenceData()
{
  return &type metadata for RecentCallsListViewPreferenceData;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>, _TaskModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>, _TaskModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>, _TaskModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>, _TaskModifier>);
    lazy protocol witness table accessor for type ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>();
    _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>, _TaskModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>> and conformance List<A, B>, &demangling cache variable for type metadata for List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _PreferenceWritingModifier<RecentCallsListViewPreferenceKey> and conformance _PreferenceWritingModifier<A>, &demangling cache variable for type metadata for _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<List<Never, TupleView<(TipView<RecentsUnknownCallersTip>, ModifiedContent<ForEach<[CHRecentCall], String, RecentCallView>, _TraitWritingModifier<OnDeleteTraitKey>>)>>, _PreferenceWritingModifier<RecentCallsListViewPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    id v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

const char *keypath_get_selector_uniqueId()
{
  return "uniqueId";
}

void sub_100138418(uint64_t a1, void **a2)
{
  int v2 = *a2;
  id v3 = String._bridgeToObjectiveC()();
  [v2 setUniqueId:v3];
}

uint64_t _s11MobilePhone27ObservableRecentsControllerCAC7Combine0C6ObjectAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001384C4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in closure #1 in RecentCallsListView.body.getter(uint64_t a1)
{
  implicit closure #2 in implicit closure #1 in closure #1 in RecentCallsListView.body.getter(a1, *(void **)(v1 + 16));
}

uint64_t sub_100138504()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t type metadata accessor for CHRecentCall()
{
  unint64_t result = lazy cache variable for type metadata for CHRecentCall;
  if (!lazy cache variable for type metadata for CHRecentCall)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  }
  return result;
}

uint64_t closure #1 in DialerContactResultButtonView.imageView.getter(uint64_t a1)
{
  if (*(void *)(a1 + OBJC_IVAR___PHDialerContactResultButtonView_type) > 1uLL)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = self;
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v1 __systemImageNamedSwift:v2];

    id v4 = [objc_allocWithZone((Class)UIImageView) initWithImage:v3];
    LODWORD(v5) = 1148846080;
    [v4 setContentCompressionResistancePriority:0 forAxis:v5];
    LODWORD(v6) = 1148846080;
    [v4 setContentHuggingPriority:0 forAxis:v6];
    id v7 = [self dynamicLabelColor];
    [v4 setTintColor:v7];

    [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v8 = v4;
    [v8 setContentMode:4];

    return (uint64_t)v8;
  }
  return result;
}

id DialerContactResultButtonView.primaryLabel.getter()
{
  uint64_t v1 = OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel;
  NSString v2 = *(void **)(v0 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel);
  }
  else
  {
    id v4 = closure #1 in DialerContactResultButtonView.primaryLabel.getter();
    double v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    NSString v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t DialerContactResultButtonView.primaryLabel.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel) = a1;
  return _objc_release_x1();
}

id closure #1 in DialerContactResultButtonView.primaryLabel.getter()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = [v1 clearColor];
  [v2 setBackgroundColor:v3];

  id v4 = [self systemFontOfSize:18.0];
  id v5 = [v4 withCaseSensitiveAttribute];

  [v2 setFont:v5];
  [v2 setAdjustsFontForContentSizeCategory:0];
  return v2;
}

void (*DialerContactResultButtonView.primaryLabel.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = DialerContactResultButtonView.primaryLabel.getter();
  return DialerContactResultButtonView.primaryLabel.modify;
}

void DialerContactResultButtonView.primaryLabel.modify(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel);
  *(void *)(v1 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel) = v2;
}

id DialerContactResultButtonView.secondaryLabel.getter()
{
  uint64_t v1 = OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___secondaryLabel;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___secondaryLabel);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = closure #1 in DialerContactResultButtonView.secondaryLabel.getter(v0);
    id v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    id v5 = v3;
    outlined consume of UILabel??(v4);
  }
  outlined copy of UILabel??(v2);
  return v3;
}

id closure #1 in DialerContactResultButtonView.secondaryLabel.getter(uint64_t a1)
{
  if (*(void *)(a1 + OBJC_IVAR___PHDialerContactResultButtonView_type)) {
    return 0;
  }
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v3 = self;
  id v1 = v2;
  id v4 = [v3 clearColor];
  [v1 setBackgroundColor:v4];

  id v5 = [self systemFontOfSize:18.0];
  id v6 = [v5 withCaseSensitiveAttribute];

  [v1 setFont:v6];
  [v1 setAdjustsFontForContentSizeCategory:0];
  return v1;
}

id DialerContactResultButtonView.imageView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in DialerContactResultButtonView.stackView.getter(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1002053B0;
  *(void *)(v2 + 32) = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView, closure #1 in DialerContactResultButtonView.imageView.getter);
  *(void *)(v2 + 40) = DialerContactResultButtonView.primaryLabel.getter();
  specialized Array._endMutation()();
  id v3 = objc_allocWithZone((Class)UIStackView);
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithArrangedSubviews:isa];

  [v5 setAxis:0];
  [v5 setSpacing:0.0];
  [v5 setAlignment:3];
  [v5 setDistribution:0];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v6 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView, closure #1 in DialerContactResultButtonView.imageView.getter);
  [v5 setCustomSpacing:v6 afterView:8.0];

  [a1 addSubview:v5];
  return v5;
}

id DialerContactResultButtonView.__allocating_init(type:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return DialerContactResultButtonView.init(type:)(a1);
}

id DialerContactResultButtonView.init(type:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR___PHDialerContactResultButtonView_horizontalPadding;
  id v6 = self;
  id v7 = v2;
  [v6 horizontalPadding];
  *(void *)&v2[v5] = v8;
  *(void *)&v7[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView] = 0;
  *(void *)&v7[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel] = 0;
  *(void *)&v7[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___secondaryLabel] = 1;
  Logger.init(subsystem:category:)();
  *(void *)&v7[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView] = 0;
  *(void *)&v7[OBJC_IVAR___PHDialerContactResultButtonView_type] = a1;

  v21.id receiver = v7;
  v21.Class super_class = ObjectType;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v10 = self;
  id v11 = v9;
  id v12 = [v10 clearColor];
  [v11 setBackgroundColor:v12];

  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v13 = DialerContactResultButtonView.secondaryLabel.getter();
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
    [v15 addArrangedSubview:v14];
  }
  DialerContactResultButtonView.addConstraints()();
  id v16 = [v11 traitCollection];
  id v17 = [v16 preferredContentSizeCategory];

  id v18 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView, closure #1 in DialerContactResultButtonView.imageView.getter);
  [v18 setHidden:UIContentSizeCategory.isAccessibilityCategory.getter() & 1];

  id v19 = [self defaultCenter];
  [v19 addObserver:v11 selector:"handleContentSizeCategoryDidChange:" name:UIContentSizeCategoryDidChangeNotification object:0];

  return v11;
}

void DialerContactResultButtonView.addConstraints()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100205390;
  id v2 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
  id v3 = [v2 leadingAnchor];

  id v4 = [v0 leadingAnchor];
  uint64_t v5 = OBJC_IVAR___PHDialerContactResultButtonView_horizontalPadding;
  id v6 = [v3 constraintEqualToAnchor:v4 constant:*(double *)&v0[OBJC_IVAR___PHDialerContactResultButtonView_horizontalPadding]];

  *(void *)(v1 + 32) = v6;
  id v7 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
  id v8 = [v7 trailingAnchor];

  id v9 = [v0 trailingAnchor];
  id v10 = [v8 constraintLessThanOrEqualToAnchor:v9 constant:-*(double *)&v0[v5]];

  *(void *)(v1 + 40) = v10;
  id v11 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
  id v12 = [v11 topAnchor];

  id v13 = [v0 topAnchor];
  id v14 = [v12 constraintEqualToAnchor:v13];

  *(void *)(v1 + 48) = v14;
  id v15 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
  id v16 = [v15 bottomAnchor];

  id v17 = [v0 bottomAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17];

  *(void *)(v1 + 56) = v18;
  id v19 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
  id v20 = [v19 heightAnchor];

  id v21 = [v20 constraintEqualToConstant:22.0];
  *(void *)(v1 + 64) = v21;
  id v22 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView, closure #1 in DialerContactResultButtonView.imageView.getter);
  id v23 = [v22 widthAnchor];

  id v24 = [v23 constraintGreaterThanOrEqualToConstant:27.0];
  *(void *)(v1 + 72) = v24;
  specialized Array._endMutation()();
  unint64_t v25 = self;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 activateConstraints:isa];
}

Swift::Void __swiftcall DialerContactResultButtonView.shouldPrioritizeName()()
{
}

Swift::Void __swiftcall DialerContactResultButtonView.shouldPrioritizeNumber()()
{
}

void DialerContactResultButtonView.shouldPrioritizeName()(float a1, float a2)
{
  id v4 = DialerContactResultButtonView.primaryLabel.getter();
  *(float *)&double v5 = a1;
  [v4 setContentCompressionResistancePriority:0 forAxis:v5];

  id v6 = DialerContactResultButtonView.secondaryLabel.getter();
  if (v6)
  {
    id v8 = v6;
    *(float *)&double v7 = a2;
    [v6 setContentCompressionResistancePriority:0 forAxis:v7];
  }
}

void @objc DialerContactResultButtonView.shouldPrioritizeName()(void *a1, float a2, float a3)
{
  id v11 = a1;
  id v5 = DialerContactResultButtonView.primaryLabel.getter();
  *(float *)&double v6 = a2;
  [v5 setContentCompressionResistancePriority:0 forAxis:v6];

  id v7 = DialerContactResultButtonView.secondaryLabel.getter();
  if (v7)
  {
    id v9 = v7;
    *(float *)&double v8 = a3;
    [v7 setContentCompressionResistancePriority:0 forAxis:v8];

    id v10 = v9;
  }
  else
  {
    id v10 = v11;
  }
}

Swift::Void __swiftcall DialerContactResultButtonView.configure(primaryTitle:secondaryTitle:)(NSAttributedString_optional primaryTitle, NSAttributedString_optional secondaryTitle)
{
  uint64_t v2 = *(void *)&primaryTitle.is_nil;
  Class isa = primaryTitle.value.super.isa;
  id v4 = DialerContactResultButtonView.primaryLabel.getter();
  [v4 setAttributedText:isa];

  id v5 = DialerContactResultButtonView.secondaryLabel.getter();
  [v5 setAttributedText:v2];
}

Swift::Void __swiftcall DialerContactResultButtonView.shortNameIfNeeded(primaryTitle:searchString:)(NSAttributedString primaryTitle, Swift::String_optional searchString)
{
  object = searchString.value._object;
  uint64_t countAndFlagsBits = searchString.value._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for PersonNameComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  id v16 = (char *)&v40 - v15;
  id v17 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView, (uint64_t (*)(uint64_t))closure #1 in DialerContactResultButtonView.stackView.getter);
  [v17 layoutIfNeeded];

  id v18 = DialerContactResultButtonView.secondaryLabel.getter();
  if (v18)
  {
    id v19 = v18;
    [v18 sizeThatFits:0.0, 0.0];
    double v21 = v20;
    [v19 frame];
    double Width = CGRectGetWidth(v44);

    if (Width < v21)
    {
      uint64_t v41 = object;
      id v23 = [objc_allocWithZone((Class)NSPersonNameComponentsFormatter) init];
      NSString v24 = [(objc_class *)primaryTitle.super.isa string];
      if (!v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v42 = v23;
      id v25 = [v23 personNameComponentsFromString:v24];

      if (v25)
      {
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, 1, 1, v4);
      }
      uint64_t v26 = v41;
      outlined init with take of PersonNameComponents?((uint64_t)v14, (uint64_t)v16);
      id v27 = v42;
      [v42 setStyle:1];
      outlined init with copy of (String, Any)((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PersonNameComponents?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
      {
        outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for PersonNameComponents?);

        id v16 = v11;
LABEL_18:
        outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for PersonNameComponents?);
        return;
      }
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        id v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "DialerContactResultButtonView: Using Short name as the number is being truncated", v30, 2u);
        swift_slowDealloc();
      }

      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v32 = [v27 stringFromPersonNameComponents:isa];

      NSString v33 = v32;
      NSString v34 = v32;
      if (v32)
      {
        if (v26)
        {
LABEL_14:
          id v35 = v32;

          id v36 = DialerContactResultButtonView.primaryLabel.getter();
          NSString v37 = String._bridgeToObjectiveC()();
          id v38 = [v34 attributedStringToHighlightText:v37 style:1];

LABEL_17:
          [v36 setAttributedText:v38];

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          goto LABEL_18;
        }
      }
      else
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v33 = String._bridgeToObjectiveC()();
        id v27 = v42;
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_14;
        }
      }
      id v39 = v32;

      id v36 = DialerContactResultButtonView.primaryLabel.getter();
      NSString v37 = String._bridgeToObjectiveC()();
      id v38 = [v33 attributedStringToHighlightText:v37];

      goto LABEL_17;
    }
  }
}

Swift::Void __swiftcall DialerContactResultButtonView.configure(primaryTitle:secondaryTitle:searchString:isNumberPriority:)(NSAttributedString_optional primaryTitle, NSAttributedString_optional secondaryTitle, Swift::String_optional searchString, Swift::Bool isNumberPriority)
{
  char countAndFlagsBits = searchString.value._countAndFlagsBits;
  uint64_t v5 = *(void **)&secondaryTitle.is_nil;
  Class isa = secondaryTitle.value.super.isa;
  uint64_t v7 = *(void *)&primaryTitle.is_nil;
  Class v8 = primaryTitle.value.super.isa;
  id v9 = DialerContactResultButtonView.primaryLabel.getter();
  id v11 = v9;
  if (countAndFlagsBits)
  {
    LODWORD(v10) = 1144750080;
    [v9 setContentCompressionResistancePriority:0 forAxis:v10];

    id v12 = DialerContactResultButtonView.secondaryLabel.getter();
    if (!v12) {
      goto LABEL_7;
    }
    id v14 = v12;
    int v15 = 1148846080;
  }
  else
  {
    LODWORD(v10) = 1148846080;
    [v9 setContentCompressionResistancePriority:0 forAxis:v10];

    id v16 = DialerContactResultButtonView.secondaryLabel.getter();
    if (!v16) {
      goto LABEL_7;
    }
    id v14 = v16;
    int v15 = 1144750080;
  }
  LODWORD(v13) = v15;
  [v14 setContentCompressionResistancePriority:0 forAxis:v13];

LABEL_7:
  id v17 = DialerContactResultButtonView.primaryLabel.getter();
  [v17 setAttributedText:v8];

  id v18 = DialerContactResultButtonView.secondaryLabel.getter();
  [v18 setAttributedText:v7];

  if (v8)
  {
    double v20 = v8;
    v19.value._char countAndFlagsBits = (uint64_t)isa;
    v19.value._object = v5;
    DialerContactResultButtonView.shortNameIfNeeded(primaryTitle:searchString:)((NSAttributedString)v20, v19);
  }
}

void DialerContactResultButtonView.handleContentSizeCategoryDidChange(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(a1, (uint64_t)v4, &demangling cache variable for type metadata for Notification?);
  uint64_t v5 = type metadata accessor for Notification();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Locale?((uint64_t)v4, &demangling cache variable for type metadata for Notification?);
LABEL_7:
    long long v15 = 0u;
    long long v16 = 0u;
LABEL_8:
    outlined destroy of Locale?((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
    return;
  }
  uint64_t v7 = Notification.userInfo.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  if (!v7) {
    goto LABEL_7;
  }
  v13[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  _OWORD v13[2] = v8;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v9, (uint64_t)&v15);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v14);
  if (!*((void *)&v16 + 1)) {
    goto LABEL_8;
  }
  type metadata accessor for UIContentSizeCategory(0);
  if (swift_dynamicCast())
  {
    id v11 = (void *)v14[0];
    id v12 = DialerContactResultButtonView.imageView.getter(&OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView, closure #1 in DialerContactResultButtonView.imageView.getter);
    [v12 setHidden:UIContentSizeCategory.isAccessibilityCategory.getter() & 1];
  }
}

Swift::Void (__swiftcall *DialerContactResultButtonView.showsLargeContentViewer.modify(unsigned char *a1))()
{
  *a1 = 1;
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t DialerContactResultButtonView.largeContentTitle.getter()
{
  uint64_t v0 = (void *)0xE000000000000000;
  id v1 = DialerContactResultButtonView.primaryLabel.getter();
  id v2 = [v1 attributedText];

  if (v2)
  {
    id v3 = [v2 string];

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v0 = v5;
  }
  else
  {
    uint64_t v4 = 0;
  }
  v6._char countAndFlagsBits = v4;
  v6._object = v0;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = DialerContactResultButtonView.secondaryLabel.getter();
  if (v7
    && (uint64_t v8 = v7, v9 = [v7 attributedText], v8, v9))
  {
    id v10 = [v9 string];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    double v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    double v13 = (void *)0xE000000000000000;
  }
  v14._char countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t DialerContactResultButtonView.largeContentTitle.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*DialerContactResultButtonView.largeContentTitle.modify(uint64_t *a1))()
{
  *a1 = DialerContactResultButtonView.largeContentTitle.getter();
  a1[1] = v2;
  return DialerContactResultButtonView.largeContentTitle.modify;
}

uint64_t DialerContactResultButtonView.largeContentTitle.modify()
{
  return swift_bridgeObjectRelease();
}

void DialerContactResultButtonView.init(frame:)()
{
}

void specialized DialerContactResultButtonView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR___PHDialerContactResultButtonView_horizontalPadding;
  [self horizontalPadding];
  *(void *)&v0[v1] = v2;
  *(void *)&v0[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___imageView] = 0;
  *(void *)&v0[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel] = 0;
  *(void *)&v0[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___secondaryLabel] = 1;
  Logger.init(subsystem:category:)();
  *(void *)&v0[OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___stackView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with take of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type DialerContactResultButtonType and conformance DialerContactResultButtonType()
{
  unint64_t result = lazy protocol witness table cache variable for type DialerContactResultButtonType and conformance DialerContactResultButtonType;
  if (!lazy protocol witness table cache variable for type DialerContactResultButtonType and conformance DialerContactResultButtonType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DialerContactResultButtonType and conformance DialerContactResultButtonType);
  }
  return result;
}

id sub_10013A6D4@<X0>(void *a1@<X8>)
{
  id result = DialerContactResultButtonView.primaryLabel.getter();
  *a1 = result;
  return result;
}

void sub_10013A700(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel);
  *(void *)(*a2 + OBJC_IVAR___PHDialerContactResultButtonView____lazy_storage___primaryLabel) = *a1;
  id v3 = v2;
}

ValueMetadata *type metadata accessor for DialerContactResultButtonType()
{
  return &type metadata for DialerContactResultButtonType;
}

uint64_t ObjC metadata update function for DialerContactResultButtonView()
{
  return type metadata accessor for DialerContactResultButtonView();
}

uint64_t type metadata accessor for DialerContactResultButtonView()
{
  uint64_t result = type metadata singleton initialization cache for DialerContactResultButtonView;
  if (!type metadata singleton initialization cache for DialerContactResultButtonView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DialerContactResultButtonView()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void outlined consume of UILabel??(id a1)
{
  if (a1 != (id)1) {
}
  }

id outlined copy of UILabel??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

Swift::Void __swiftcall PHVoicemailInboxListViewController.startObservingPreferences()()
{
  v5.Class super_class = (Class)PHVoicemailInboxListViewController;
  [super startObservingPreferences];
  unint64_t v1 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  id v2 = specialized Defaults.subscribe(to:onChange:)(0, (uint64_t)partial apply for closure #1 in PHVoicemailInboxListViewController.startObservingPreferences(), v1);
  swift_release_n();
  id v3 = v2;
  id v4 = [v0 observations];
  [v4 insertObject:v3 atIndex:0];
}

uint64_t sub_10013A994()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in PHVoicemailInboxListViewController.startObservingPreferences()()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = Strong;
    [Strong _updateGreetingButtonAllowed];
  }
}

void partial apply for closure #1 in PHVoicemailInboxListViewController.startObservingPreferences()()
{
}

Swift::Bool __swiftcall PHVoicemailInboxListViewController.shouldShowGreetingButton()()
{
  if (one-time initialization token for featureFlags != -1) {
    swift_once();
  }
  if (TUCallScreeningEnabled())
  {
    LOBYTE(v1) = 1;
  }
  else
  {
    id v2 = [v0 voicemailController];
    if (v2)
    {
      id v3 = v2;
      id v1 = [v2 accountManager];

      if (v1)
      {
        id v4 = [v1 accounts];
        type metadata accessor for VMAccount();
        unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v6 = v1;
        LOBYTE(v1) = specialized Sequence.contains(where:)(v5, v6);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      LOBYTE(v1) = 0;
    }
  }
  return v1 & 1;
}

unint64_t type metadata accessor for VMAccount()
{
  unint64_t result = lazy cache variable for type metadata for VMAccount;
  if (!lazy cache variable for type metadata for VMAccount)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for VMAccount);
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  id v22 = a2;
  uint64_t v21 = type metadata accessor for UUID();
  unint64_t v5 = *(void (***)(char *, uint64_t))(v21 - 8);
  __chkstk_darwin(v21);
  id v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    v19[1] = v3;
    unint64_t v20 = a1 & 0xC000000000000001;
    id v9 = v5 + 1;
    uint64_t v10 = 4;
    while (1)
    {
      uint64_t v11 = v20
          ? (void (**)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (void (**)(char *, uint64_t))*(id *)(a1 + 8 * v10);
      unint64_t v5 = v11;
      uint64_t v12 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      uint64_t v3 = a1;
      uint64_t v13 = v8;
      id v14 = [v11 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*v9)(v7, v21);
      unsigned int v16 = [v22 isGreetingChangeSupportedForAccountUUID:isa];

      if (v16)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v10;
      uint64_t v8 = v13;
      BOOL v17 = v12 == v13;
      a1 = v3;
      if (v17) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char **v7;
  void *v8;
  id v9;
  void *v10;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;

  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_34;
  }
  id v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; id v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v27 = v3;
    unint64_t v5 = 0;
    uint64_t v6 = v3 & 0xC000000000000001;
    uint64_t v28 = v3 + 32;
    os_log_type_t v29 = v3 & 0xC000000000000001;
    id v7 = &selRef_didTapLinkButton;
    uint64_t v26 = a2;
    id v30 = v4;
    while (1)
    {
      id v9 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v28 + 8 * v5);
      uint64_t v10 = v9;
      if (__OFADD__(v5++, 1)) {
        break;
      }
      uint64_t v12 = [a2 v7[64]];
      if (v12)
      {
        uint64_t v8 = v12;
        uint64_t v13 = a2;
        id v14 = v10;
        long long v15 = [v10 handles];
        unsigned int v16 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

        BOOL v17 = [v8 value];
        id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        uint64_t v21 = v16[2];
        if (v21)
        {
          uint64_t v31 = v14;
          id v22 = v16[4] == v18 && v16[5] == v20;
          if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_29:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return 1;
          }
          if (v21 != 1)
          {
            a2 = v16 + 7;
            uint64_t v3 = 1;
            while (1)
            {
              id v23 = v3 + 1;
              if (__OFADD__(v3, 1)) {
                break;
              }
              NSString v24 = *(a2 - 1) == v18 && *a2 == v20;
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_29;
              }
              a2 += 2;
              ++v3;
              if (v23 == v21)
              {

                swift_bridgeObjectRelease();
                uint64_t v3 = v27;
                a2 = v26;
                uint64_t v6 = v29;
                id v4 = v30;
                id v7 = &selRef_didTapLinkButton;
                goto LABEL_19;
              }
            }
            __break(1u);
            break;
          }
        }

        swift_bridgeObjectRelease();
        id v7 = &selRef_didTapLinkButton;
        a2 = v13;
        uint64_t v6 = v29;
        id v4 = v30;
LABEL_19:
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v8 = v10;
      }

      if (v5 == v4) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PhoneApplication.switchToTab(_:to:)(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized PhoneApplication.switchToTab(_:to:)
                                                + async function pointer to specialized PhoneApplication.switchToTab(_:to:));
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return v7(a1, a2);
}

uint64_t PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:)(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  type metadata accessor for MainActor();
  id v15 = a1;
  id v16 = v5;
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = &protocol witness table for MainActor;
  *(void *)(v18 + 32) = a4;
  *(void *)(v18 + 40) = v15;
  *(void *)(v18 + 48) = v16;
  *(_DWORD *)(v18 + 56) = a2;
  *(void *)(v18 + 64) = 0x6154686374697753;
  *(void *)(v18 + 72) = 0xE900000000000062;
  *(void *)(v18 + 80) = a5;
  *(_DWORD *)(v18 + 88) = a3;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:), v18);
  return swift_release();
}

uint64_t closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)(v8 + 48) = v13;
  *(void *)(v8 + 56) = v14;
  *(_DWORD *)(v8 + 116) = a7;
  *(_DWORD *)(v8 + 120) = v15;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  type metadata accessor for MainActor();
  *(void *)(v8 + 64) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = v9;
  return _swift_task_switch(closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:), v10, v9);
}

uint64_t closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:)()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v1)
  {
    if (one-time initialization token for mobilePhone == -1)
    {
LABEL_4:
      *(void *)(v0 + 88) = 0;
      uint64_t v2 = *(void **)(v0 + 24);
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.mobilePhone);
      id v4 = v2;
      unint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      BOOL v7 = os_log_type_enabled(v5, v6);
      uint64_t v8 = *(void **)(v0 + 24);
      if (v7)
      {
        uint64_t v9 = swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315650;
        *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x8000000100241100, &v18);
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v9 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ELL, 0x8000000100241130, &v18);
        *(_WORD *)(v9 + 22) = 2082;
        *(_DWORD *)(v0 + 112) = [v8 currentTabViewType];
        type metadata accessor for PHTabViewType(0);
        uint64_t v10 = String.init<A>(reflecting:)();
        *(void *)(v9 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s %s]: Current tab %{public}s", (uint8_t *)v9, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v17 = (uint64_t (*)(uint64_t, int))((char *)&async function pointer to specialized PhoneApplication.switchToTab(_:to:)
                                                 + async function pointer to specialized PhoneApplication.switchToTab(_:to:));
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v14;
      *uint64_t v14 = v0;
      v14[1] = closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:);
      int v15 = *(_DWORD *)(v0 + 116);
      uint64_t v16 = *(void *)(v0 + 24);
      return v17(v16, v15);
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  swift_release();
  [*(id *)(v0 + 32) finishedTest:**(void **)(v0 + 56) waitForCommit:1 extraResults:0];
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  NSString v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, int);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v3 = String._bridgeToObjectiveC()();
  [v2 startedSubTest:v3 forTest:*v1];

  uint64_t v8 = (uint64_t (*)(uint64_t, int))((char *)&async function pointer to specialized PhoneApplication.switchToTab(_:to:)
                                            + async function pointer to specialized PhoneApplication.switchToTab(_:to:));
  id v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  char *v4 = v0;
  v4[1] = closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:);
  unint64_t v5 = *(_DWORD *)(v0 + 120);
  os_log_type_t v6 = *(void *)(v0 + 24);
  return v8(v6, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t (*v6)(void);
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  id v23 = v0;
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  id v4 = *(void *)(v0 + 88) + 1;
  unint64_t v5 = String._bridgeToObjectiveC()();
  [v2 finishedSubTest:v5 forTest:*v1];

  if (v4 == v3)
  {
    swift_release();
    [*(id *)(v0 + 32) finishedTest:**(void **)(v0 + 56) waitForCommit:1 extraResults:0];
    os_log_type_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    ++*(void *)(v0 + 88);
    uint64_t v8 = *(void **)(v0 + 24);
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.mobilePhone);
    uint64_t v10 = v8;
    unint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.default.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void **)(v0 + 24);
    if (v13)
    {
      int v15 = swift_slowAlloc();
      id v22 = swift_slowAlloc();
      *(_DWORD *)int v15 = 136315650;
      *(void *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x8000000100241100, &v22);
      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v15 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ELL, 0x8000000100241130, &v22);
      *(_WORD *)(v15 + 22) = 2082;
      *(_DWORD *)(v0 + 112) = [v14 currentTabViewType];
      type metadata accessor for PHTabViewType(0);
      uint64_t v16 = String.init<A>(reflecting:)();
      *(void *)(v15 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s %s]: Current tab %{public}s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v21 = (uint64_t (*)(uint64_t, int))((char *)&async function pointer to specialized PhoneApplication.switchToTab(_:to:)
                                               + async function pointer to specialized PhoneApplication.switchToTab(_:to:));
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v18;
    *uint64_t v18 = v0;
    v18[1] = closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:);
    uint64_t v19 = *(_DWORD *)(v0 + 116);
    uint64_t v20 = *(void *)(v0 + 24);
    return v21(v20, v19);
  }
}

uint64_t specialized PhoneApplication.switchToTab(_:to:)(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 272) = a2;
  *(void *)(v2 + 112) = a1;
  uint64_t v3 = type metadata accessor for Notification();
  *(void *)(v2 + 120) = v3;
  *(void *)(v2 + 128) = *(void *)(v3 - 8);
  *(void *)(v2 + 136) = swift_task_alloc();
  *(void *)(v2 + 144) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *(void *)(v2 + 152) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  *(void *)(v2 + 160) = v4;
  *(void *)(v2 + 168) = *(void *)(v4 - 8);
  *(void *)(v2 + 176) = swift_task_alloc();
  *(void *)(v2 + 184) = type metadata accessor for MainActor();
  *(void *)(v2 + 192) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 200) = v6;
  *(void *)(v2 + 208) = v5;
  return _swift_task_switch(specialized PhoneApplication.switchToTab(_:to:), v6, v5);
}

uint64_t specialized PhoneApplication.switchToTab(_:to:)()
{
  uint64_t v19 = v0;
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 216) = __swift_project_value_buffer(v1, (uint64_t)static Logger.mobilePhone);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(v0 + 272);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x8000000100241100, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000100241170, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2082;
    *(_DWORD *)(v0 + 264) = v4;
    type metadata accessor for PHTabViewType(0);
    uint64_t v6 = String.init<A>(reflecting:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s %s]: Switching to tab %{public}s", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  int v8 = *(_DWORD *)(v0 + 272);
  if ([*(id *)(v0 + 112) currentTabViewType] == v8)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(v0 + 272);
    uint64_t v12 = *(void **)(v0 + 112);
    id v13 = [self defaultCenter];
    *(void *)(v0 + 224) = NSNotificationCenter.notifications(named:object:)();

    [v12 switchToTab:v11];
    swift_retain();
    NSNotificationCenter.Notifications.makeAsyncIterator()();
    *(void *)(v0 + 232) = @"PHPhoneTabBarControllerTabViewDidAppearNotificationTabTypeKey";
    *(void *)(v0 + 240) = static MainActor.shared.getter();
    uint64_t v14 = lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator(&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
    int v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v15;
    *int v15 = v0;
    v15[1] = specialized PhoneApplication.switchToTab(_:to:);
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 160);
    return dispatch thunk of AsyncIteratorProtocol.next()(v16, v17, v14);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 240);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      int v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      int v4 = 0;
      uint64_t v6 = 0;
    }
    unint64_t v7 = specialized PhoneApplication.switchToTab(_:to:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      int v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      int v4 = 0;
      uint64_t v6 = 0;
    }
    unint64_t v7 = specialized PhoneApplication.switchToTab(_:to:);
  }
  return _swift_task_switch(v7, v4, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  return _swift_task_switch(specialized PhoneApplication.switchToTab(_:to:), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  id v42 = v0;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 120);
  os_log_type_t v3 = *(void *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
    swift_release();
    swift_release();
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 144), v1, v2);
  Notification.object.getter();
  if (!*(void *)(v0 + 40))
  {
    outlined destroy of Any?(v0 + 16);
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Swift.AnyObject]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v0 + 56);
  (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 120));
  unint64_t v7 = Logger.logObject.getter();
  int v8 = static os_log_type_t.default.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
  if (v9)
  {
    id v13 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)id v13 = 136315650;
    *(void *)(v13 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x8000000100241100, &v41);
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v13 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000100241170, &v41);
    *(_WORD *)(v13 + 22) = 2080;
    lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator(&lazy protocol witness table cache variable for type Notification and conformance Notification, (void (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v13 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v41);
    swift_bridgeObjectRelease();
    uint64_t v16 = *v12;
    (*v12)(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s %s]: Recieved Notification: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *v12;
    (*v12)(*(void *)(v0 + 136), *(void *)(v0 + 120));
  }

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v6 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v23 & 1) != 0))
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    self;
    NSString v24 = (void *)swift_dynamicCastObjCClass();
    if (!v24) {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v24 = 0;
  }
  id v25 = [objc_allocWithZone((Class)NSNumber) initWithInt:*(unsigned int *)(v0 + 272)];
  uint64_t v26 = v25;
  if (v24)
  {
    if (v25)
    {
      type metadata accessor for NSNumber();
      id v27 = v24;
      uint64_t v28 = static NSObject.== infix(_:_:)();

      if (v28) {
        goto LABEL_27;
      }
    }
    else
    {
    }
  }
  else
  {
    if (!v25)
    {
LABEL_27:
      swift_release();
      os_log_type_t v29 = Logger.logObject.getter();
      id v30 = static os_log_type_t.default.getter();
      uint64_t v31 = os_log_type_enabled(v29, v30);
      NSString v33 = *(void *)(v0 + 168);
      id v32 = *(void *)(v0 + 176);
      NSString v34 = *(void *)(v0 + 160);
      id v35 = *(void *)(v0 + 144);
      uint64_t v40 = *(void *)(v0 + 120);
      if (v31)
      {
        id v39 = *(_DWORD *)(v0 + 272);
        id v36 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)id v36 = 136315650;
        *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x8000000100241100, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 12) = 2080;
        *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000100241170, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 22) = 2082;
        *(_DWORD *)(v0 + 268) = v39;
        type metadata accessor for PHTabViewType(0);
        NSString v37 = String.init<A>(reflecting:)();
        *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%s %s]: Switched to tab %{public}s", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_release();
      v16(v35, v40);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      goto LABEL_3;
    }
  }
LABEL_12:
  v16(*(void *)(v0 + 144), *(void *)(v0 + 120));
  *(void *)(v0 + 240) = static MainActor.shared.getter();
  uint64_t v17 = lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator(&lazy protocol witness table cache variable for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v18;
  *uint64_t v18 = v0;
  v18[1] = specialized PhoneApplication.switchToTab(_:to:);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 160);
  return dispatch thunk of AsyncIteratorProtocol.next()(v19, v20, v17);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 48) = *(void *)(v0 + 256);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t partial apply for closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:)(uint64_t a1)
{
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  int v7 = *(_DWORD *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in PhoneApplication.runSwitchTabTest(_:initial:to:numberOfIterations:testNameRef:)(a1, v13, v11, v4, v5, v6, v7, v8);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 92, 7);
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NSNotificationCenter.Notifications.Iterator and conformance NSNotificationCenter.Notifications.Iterator(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ContentSizeCategory.requiresAccessibleLayout.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContentSizeCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  BOOL v12 = v6 == enum case for ContentSizeCategory.extraSmall(_:)
     || v6 == enum case for ContentSizeCategory.small(_:)
     || v6 == enum case for ContentSizeCategory.medium(_:)
     || v6 == enum case for ContentSizeCategory.large(_:)
     || v6 == enum case for ContentSizeCategory.extraLarge(_:)
     || v6 == enum case for ContentSizeCategory.extraExtraLarge(_:)
     || v6 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  int v13 = v12;
  if (!v12
    && v6 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v6 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v6 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v6 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v6 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v13 ^ 1u;
}

uint64_t Optional<A>.isEditing.getter()
{
  uint64_t v1 = type metadata accessor for EditMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EditMode?, EditMode?));
  __chkstk_darwin(v5);
  int v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EditMode?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v30 = (uint64_t)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v29 - v17;
  outlined init with copy of (String, Any)(v0, (uint64_t)v10, &demangling cache variable for type metadata for Binding<EditMode>?);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<EditMode>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v10, 1, v19) == 1)
  {
    outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for Binding<EditMode>?);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v20(v18, 1, 1, v1);
  }
  else
  {
    Binding.wrappedValue.getter();
    outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for Binding<EditMode>);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v20(v18, 0, 1, v1);
  }
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v16, enum case for EditMode.active(_:), v1);
  v20(v16, 0, 1, v1);
  uint64_t v21 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of (String, Any)((uint64_t)v18, (uint64_t)v7, &demangling cache variable for type metadata for EditMode?);
  outlined init with copy of (String, Any)((uint64_t)v16, v21, &demangling cache variable for type metadata for EditMode?);
  id v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v22((uint64_t)v7, 1, v1) == 1)
  {
    outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for EditMode?);
    outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for EditMode?);
    int v23 = v22(v21, 1, v1);
    if (v23 == 1) {
      NSString v24 = &demangling cache variable for type metadata for EditMode?;
    }
    else {
      NSString v24 = &demangling cache variable for type metadata for (EditMode?, EditMode?);
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = v30;
    outlined init with copy of (String, Any)((uint64_t)v7, v30, &demangling cache variable for type metadata for EditMode?);
    if (v22(v21, 1, v1) == 1)
    {
      outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for EditMode?);
      outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for EditMode?);
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v26, v1);
      char v25 = 0;
      NSString v24 = &demangling cache variable for type metadata for (EditMode?, EditMode?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v21, v1);
      lazy protocol witness table accessor for type EditMode and conformance EditMode();
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v27 = *(void (**)(char *, uint64_t))(v2 + 8);
      v27(v4, v1);
      NSString v24 = &demangling cache variable for type metadata for EditMode?;
      outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for EditMode?);
      outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for EditMode?);
      v27((char *)v26, v1);
    }
  }
  outlined destroy of Locale?((uint64_t)v7, v24);
  return v25 & 1;
}

unint64_t lazy protocol witness table accessor for type EditMode and conformance EditMode()
{
  unint64_t result = lazy protocol witness table cache variable for type EditMode and conformance EditMode;
  if (!lazy protocol witness table cache variable for type EditMode and conformance EditMode)
  {
    type metadata accessor for EditMode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditMode and conformance EditMode);
  }
  return result;
}

uint64_t Image.init(symbolDescriber:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = __swift_mutable_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v5 = specialized Image.init(symbolDescriber:)(v4, v2, v3);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v5;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t View.asAnyView.getter(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  return AnyView.init<A>(_:)();
}

uint64_t Image.init(symbolDescription:)(void *a1)
{
  uint64_t v2 = specialized Image.init(symbolDescription:)(a1);
  long long v6 = *(_OWORD *)a1;
  outlined release of String((uint64_t)&v6);
  id v5 = (id)a1[3];
  outlined release of UIFontTextStyle(&v5);
  outlined init with take of UIContentSizeCategory?((uint64_t)(a1 + 4), (uint64_t)&v4);
  outlined release of UIFontTextStyle(&v4);
  return v2;
}

uint64_t specialized Image.init(symbolDescription:)(void *a1)
{
  if (specialized static UIImage.image(for:)(a1))
  {
  }
  else
  {
    _StringGuts.grow(_:)(40);
    v1._object = (void *)0x80000001002411C0;
    v1._char countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v1);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return Image.init(uiImage:)();
}

uint64_t specialized Image.init(symbolDescriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v5, a2, a3);
  uint64_t v3 = specialized Image.init(symbolDescription:)(&v5);
  long long v10 = v5;
  outlined release of String((uint64_t)&v10);
  id v9 = v6;
  outlined release of UIFontTextStyle(&v9);
  outlined init with take of UIContentSizeCategory?((uint64_t)&v7, (uint64_t)&v8);
  outlined release of UIFontTextStyle(&v8);
  return v3;
}

uint64_t one-time initialization function for intents()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_AssistantIntent>);
  type metadata accessor for _AssistantIntent();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002053C0;
  specialized OpenMobilePhoneAppDeepLinks.init()();
  lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();
  uint64_t result = _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  static PFTAssistantIntentsProvider.intents = v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of static PFTAssistantIntentsProvider.intents(uint64_t a1)
{
  uint64_t v43 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AssistantIntent.Phrase<OpenMobilePhoneAppDeepLinks>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v45 = v1;
  uint64_t v46 = v2;
  __chkstk_darwin(v1);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AssistantIntent.Phrase<OpenMobilePhoneAppDeepLinks>.StringInterpolation);
  __chkstk_darwin(v8);
  unint64_t v9 = lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._char countAndFlagsBits = 0x206E65704FLL;
  v10._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  swift_getKeyPath();
  unint64_t v44 = lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v11._char countAndFlagsBits = 544106784;
  v11._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  LODWORD(v38) = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  NSString v37 = *(void (**)(char *))(v5 + 104);
  v37(v7);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v35 = v5 + 8;
  id v36 = v12;
  v12(v7, v4);
  v13._char countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  uint64_t v14 = v41;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v46 + 8);
  v46 += 8;
  id v42 = v15;
  uint64_t v16 = v14;
  uint64_t v17 = v45;
  v15(v16, v45);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v18._char countAndFlagsBits = 0x20656D20776F6853;
  v18._object = (void *)0xEB0000000020796DLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v19._char countAndFlagsBits = 544106784;
  v19._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  ((void (*)(char *, void, uint64_t))v37)(v7, v38, v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v36(v7, v4);
  v20._char countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  uint64_t v21 = v41;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  unint64_t v40 = v9;
  uint64_t v38 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v42(v21, v17);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v22._char countAndFlagsBits = 0x6F6850206E65704FLL;
  v22._object = (void *)0xEB0000000020656ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v23._char countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  NSString v37 = (void (*)(char *))static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  NSString v24 = v42;
  v42(v21, v17);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v25._char countAndFlagsBits = 0x20656D20776F6853;
  v25._object = (void *)0xEE0020656E6F6850;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v26._char countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  id v36 = (void (*)(char *, uint64_t))static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v24(v21, v45);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v27._char countAndFlagsBits = 0x6F685020776F6853;
  v27._object = (void *)0xEB0000000020656ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v28._char countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v29 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v24(v21, v45);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[_AssistantIntent.Phrase<OpenMobilePhoneAppDeepLinks>]>);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100207450;
  uint64_t v31 = v38;
  *(void *)(v30 + 32) = v39;
  *(void *)(v30 + 40) = v31;
  id v32 = v36;
  *(void *)(v30 + 48) = v37;
  *(void *)(v30 + 56) = v32;
  *(void *)(v30 + 64) = v29;
  uint64_t v33 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t closure #2 in variable initialization expression of static PFTAssistantIntentsProvider.intents()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  lazy protocol witness table accessor for type OpenMobilePhoneAppDeepLinks and conformance OpenMobilePhoneAppDeepLinks();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[_AssistantIntent.Value]>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002053C0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t closure #1 in closure #2 in variable initialization expression of static PFTAssistantIntentsProvider.intents()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100207450;
  *(void *)(v5 + 32) = v0;
  *(void *)(v5 + 40) = v1;
  *(void *)(v5 + 48) = v2;
  *(void *)(v5 + 56) = v3;
  *(void *)(v5 + 64) = v4;
  uint64_t v6 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t *PFTAssistantIntentsProvider.intents.unsafeMutableAddressor()
{
  if (one-time initialization token for intents != -1) {
    swift_once();
  }
  return &static PFTAssistantIntentsProvider.intents;
}

uint64_t static PFTAssistantIntentsProvider.intents.getter()
{
  return static PFTAssistantIntentsProvider.intents.getter(&one-time initialization token for intents);
}

uint64_t static PFTAssistantIntentsProvider.intents.setter(uint64_t a1)
{
  return static PFTAssistantIntentsProvider.intents.setter(a1, &one-time initialization token for intents, &static PFTAssistantIntentsProvider.intents);
}

uint64_t (*static PFTAssistantIntentsProvider.intents.modify())()
{
  if (one-time initialization token for intents != -1) {
    swift_once();
  }
  swift_beginAccess();
  return SuggestionsSearchTableViewController.suggestions.modify;
}

void one-time initialization function for negativePhrases()
{
  static PFTAssistantIntentsProvider.negativePhrases = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t *PFTAssistantIntentsProvider.negativePhrases.unsafeMutableAddressor()
{
  if (one-time initialization token for negativePhrases != -1) {
    swift_once();
  }
  return &static PFTAssistantIntentsProvider.negativePhrases;
}

uint64_t static PFTAssistantIntentsProvider.negativePhrases.getter()
{
  return static PFTAssistantIntentsProvider.intents.getter(&one-time initialization token for negativePhrases);
}

uint64_t static PFTAssistantIntentsProvider.intents.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static PFTAssistantIntentsProvider.negativePhrases.setter(uint64_t a1)
{
  return static PFTAssistantIntentsProvider.intents.setter(a1, &one-time initialization token for negativePhrases, &static PFTAssistantIntentsProvider.negativePhrases);
}

uint64_t static PFTAssistantIntentsProvider.intents.setter(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PFTAssistantIntentsProvider.negativePhrases.modify())()
{
  if (one-time initialization token for negativePhrases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t protocol witness for static _AssistantIntentsProvider.intents.getter in conformance PFTAssistantIntentsProvider(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _AssistantIntentsProvider.intents.getter in conformance PFTAssistantIntentsProvider(a1, a2, &one-time initialization token for intents);
}

uint64_t protocol witness for static _AssistantIntentsProvider.uniqueEntities.getter in conformance PFTAssistantIntentsProvider()
{
  return static _AssistantIntentsProvider.uniqueEntities.getter();
}

uint64_t protocol witness for static _AssistantIntentsProvider.negativePhrases.getter in conformance PFTAssistantIntentsProvider(uint64_t a1, uint64_t a2)
{
  return protocol witness for static _AssistantIntentsProvider.intents.getter in conformance PFTAssistantIntentsProvider(a1, a2, &one-time initialization token for negativePhrases);
}

uint64_t protocol witness for static _AssistantIntentsProvider.intents.getter in conformance PFTAssistantIntentsProvider(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for PFTAssistantIntentsProvider()
{
  return &type metadata for PFTAssistantIntentsProvider;
}

uint64_t static PHApplicationServices.getFTVoiceMail(onVoicemailsChanged:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MessageStoreController();
  swift_retain();
  uint64_t v4 = static MessageStoreController.shared.getter();
  type metadata accessor for FaceTimeVoicemailManager(0);
  uint64_t v5 = swift_allocObject();

  return specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)(a1, a2, v4, v5);
}

uint64_t specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority();
  __chkstk_darwin(v8 - 8);
  v18[3] = type metadata accessor for MessageStoreController();
  v18[4] = &protocol witness table for MessageStoreController;
  v18[0] = a3;
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v10 = one-time initialization token for mobilePhone;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhone);
  Swift::String v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v13(a4 + v9, v12, v11);
  v13(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_analyticsReporter, v12, v11);
  *(void *)(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_providers) = &outlined read-only object #0 of specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:);
  *(void *)(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes) = &outlined read-only object #1 of specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:);
  uint64_t v14 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messagesChangedPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  swift_allocObject();
  *(void *)(a4 + v14) = PassthroughSubject.init()();
  uint64_t v15 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_operationQueue;
  type metadata accessor for TaskQueue();
  static TaskPriority.high.getter();
  *(void *)(a4 + v15) = TaskQueue.__allocating_init(priority:)();
  uint64_t v16 = (void *)(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged);
  *uint64_t v16 = a1;
  v16[1] = a2;
  outlined init with copy of Tip((uint64_t)v18, a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  swift_retain();
  swift_release();
  *(void *)(a4 + 16) = 0x8000000000000000;
  *(void *)(a4 + 24) = &_swiftEmptyArrayStorage;
  swift_retain();
  MessageStoreController.addDelegate(_:)();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  return a4;
}

uint64_t sub_10013E9AC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t *SearchLayout.CellSpacingConstants.unreadIndicatorDiameter.unsafeMutableAddressor()
{
  if (one-time initialization token for unreadIndicatorDiameter != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter;
}

uint64_t *SearchLayout.CellSpacingConstants.verticalLayoutMargin.unsafeMutableAddressor()
{
  if (one-time initialization token for verticalLayoutMargin != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.verticalLayoutMargin;
}

uint64_t *SearchLayout.CellSpacingConstants.avatarRadius.unsafeMutableAddressor()
{
  if (one-time initialization token for avatarRadius != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.avatarRadius;
}

uint64_t *SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth.unsafeMutableAddressor()
{
  if (one-time initialization token for unreadIndicatorBorderWidth != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth;
}

uint64_t *SearchLayout.CellSpacingConstants.gridColumnSpacing.unsafeMutableAddressor()
{
  if (one-time initialization token for gridColumnSpacing != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.gridColumnSpacing;
}

uint64_t *SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX.unsafeMutableAddressor()
{
  if (one-time initialization token for leftSeperatorInsetWithAX != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX;
}

uint64_t *SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX.unsafeMutableAddressor()
{
  if (one-time initialization token for leftSeperatorInsetWithoutAX != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX;
}

uint64_t *SearchLayout.CellSpacingConstants.accessoryButtonSpacing.unsafeMutableAddressor()
{
  if (one-time initialization token for accessoryButtonSpacing != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.accessoryButtonSpacing;
}

uint64_t *SearchLayout.CellSpacingConstants.gridRowSpacing.unsafeMutableAddressor()
{
  if (one-time initialization token for gridRowSpacing != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.gridRowSpacing;
}

uint64_t *SearchLayout.CellSpacingConstants.dateLabelSpacing.unsafeMutableAddressor()
{
  if (one-time initialization token for dateLabelSpacing != -1) {
    swift_once();
  }
  return &static SearchLayout.CellSpacingConstants.dateLabelSpacing;
}

void one-time initialization function for verticalLayoutMargin()
{
  static SearchLayout.CellSpacingConstants.verticalLayoutMargin = 0x4028000000000000;
}

double static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for verticalLayoutMargin, (uint64_t)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin);
}

void one-time initialization function for accessoryButtonSpacing()
{
  static SearchLayout.CellSpacingConstants.accessoryButtonSpacing = 0x4030000000000000;
}

double static SearchLayout.CellSpacingConstants.accessoryButtonSpacing.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for accessoryButtonSpacing, (uint64_t)&static SearchLayout.CellSpacingConstants.accessoryButtonSpacing);
}

void one-time initialization function for gridColumnSpacing()
{
  static SearchLayout.CellSpacingConstants.gridColumnSpacing = 0x4024000000000000;
}

double static SearchLayout.CellSpacingConstants.gridColumnSpacing.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for gridColumnSpacing, (uint64_t)&static SearchLayout.CellSpacingConstants.gridColumnSpacing);
}

void one-time initialization function for gridRowSpacing()
{
  static SearchLayout.CellSpacingConstants.gridRowSpacing = 0x3FF0000000000000;
}

double static SearchLayout.CellSpacingConstants.gridRowSpacing.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for gridRowSpacing, (uint64_t)&static SearchLayout.CellSpacingConstants.gridRowSpacing);
}

void one-time initialization function for dateLabelSpacing()
{
  static SearchLayout.CellSpacingConstants.dateLabelSpacing = 0x402E000000000000;
}

double static SearchLayout.CellSpacingConstants.dateLabelSpacing.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for dateLabelSpacing, (uint64_t)&static SearchLayout.CellSpacingConstants.dateLabelSpacing);
}

void one-time initialization function for avatarRadius()
{
  static SearchLayout.CellSpacingConstants.avatarRadius = 0x4046800000000000;
}

double static SearchLayout.CellSpacingConstants.avatarRadius.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for avatarRadius, (uint64_t)&static SearchLayout.CellSpacingConstants.avatarRadius);
}

double one-time initialization function for leftSeperatorInsetWithoutAX()
{
  if (one-time initialization token for avatarRadius != -1) {
    swift_once();
  }
  double v0 = *(double *)&static SearchLayout.CellSpacingConstants.avatarRadius;
  if (one-time initialization token for gridColumnSpacing != -1) {
    swift_once();
  }
  double result = v0 + *(double *)&static SearchLayout.CellSpacingConstants.gridColumnSpacing;
  *(double *)&static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX = v0
                                                                                   + *(double *)&static SearchLayout.CellSpacingConstants.gridColumnSpacing;
  return result;
}

double static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for leftSeperatorInsetWithoutAX, (uint64_t)&static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithoutAX);
}

void one-time initialization function for leftSeperatorInsetWithAX()
{
  static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX = 0;
}

double static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for leftSeperatorInsetWithAX, (uint64_t)&static SearchLayout.CellSpacingConstants.leftSeperatorInsetWithAX);
}

void one-time initialization function for unreadIndicatorDiameter()
{
  static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter = 0x402E000000000000;
}

double static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for unreadIndicatorDiameter, (uint64_t)&static SearchLayout.CellSpacingConstants.unreadIndicatorDiameter);
}

void one-time initialization function for unreadIndicatorBorderWidth()
{
  static SearchLayout.CellSpacingConstants.unreadIndicatorBorderdouble Width = 0x4000000000000000;
}

double static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for unreadIndicatorBorderWidth, (uint64_t)&static SearchLayout.CellSpacingConstants.unreadIndicatorBorderWidth);
}

double static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

ValueMetadata *type metadata accessor for SearchLayout()
{
  return &type metadata for SearchLayout;
}

ValueMetadata *type metadata accessor for SearchLayout.CellSpacingConstants()
{
  return &type metadata for SearchLayout.CellSpacingConstants;
}

uint64_t *SearchMetrics.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static SearchMetrics.shared;
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v11 >= v27) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v11);
  int64_t v13 = i + 1;
  if (!v12)
  {
    int64_t v13 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    if (!v12)
    {
      int64_t v13 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v14 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v12 = *(void *)(v28 + 8 * v14);
            if (v12)
            {
              int64_t v13 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_36;
              }
              if (v13 >= v27) {
                break;
              }
              unint64_t v12 = *(void *)(v28 + 8 * v13);
              ++v14;
              if (v12) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          outlined consume of Set<CHHandle>.Iterator._Variant();
          return;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v12 - 1) & v12;
  unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
  for (i = v13; ; unint64_t v10 = v9 | (i << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Swift::String v18 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    unint64_t v21 = v20;
    if (v22)
    {
      uint64_t v7 = (uint64_t *)(v2[6] + 16 * v20);
      swift_bridgeObjectRelease();
      *uint64_t v7 = v17;
      v7[1] = v16;
      uint64_t v8 = v2[7];

      *(void *)(v8 + 8 * v21) = v19;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    Swift::String v23 = (uint64_t *)(v2[6] + 16 * v20);
    *Swift::String v23 = v17;
    v23[1] = v16;
    *(void *)(v2[7] + 8 * v20) = v19;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    id v19 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v37[0] = *v17;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    v19;
    swift_dynamicCast();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of Set<CHHandle>.Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t SearchMetricsResultInteractionType.init(rawValue:)(uint64_t a1)
{
  return SearchMetricsResultInteractionType.init(rawValue:)(a1, (uint64_t (*)(void))specialized SearchMetricsResultInteractionType.init(rawValue:));
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SearchMetricsResultInteractionType@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized SearchMetricsResultInteractionType.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t SearchMetricsKeypadButtonType.init(rawValue:)(uint64_t a1)
{
  return SearchMetricsResultInteractionType.init(rawValue:)(a1, (uint64_t (*)(void))specialized SearchMetricsKeypadButtonType.init(rawValue:));
}

uint64_t SearchMetricsResultInteractionType.init(rawValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  unint64_t v2 = a2();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchMetricsKeypadButtonType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchMetricsResultInteractionType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SearchMetricsKeypadButtonType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchMetricsResultInteractionType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SearchMetricsKeypadButtonType@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized SearchMetricsKeypadButtonType.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

id one-time initialization function for shared()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SearchMetrics()) init];
  static SearchMetrics.shared = (uint64_t)result;
  return result;
}

id static SearchMetrics.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  double v0 = (void *)static SearchMetrics.shared;

  return v0;
}

char *SearchMetrics.init()()
{
  Swift::UInt32 v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  __chkstk_darwin(v2 - 8);
  id v36 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  long long v34 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, OS_dispatch_queue>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  uint64_t v40 = v7;
  __chkstk_darwin(v6);
  uint64_t v35 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = OBJC_IVAR____TtC11MobilePhone13SearchMetrics_startTimeDict;
  *(void *)&v1[v14] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDict;
  *(void *)&v1[v15] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = OBJC_IVAR____TtC11MobilePhone13SearchMetrics_logLatencySubject;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  uint64_t v17 = v1;
  *(void *)&v1[v16] = PassthroughSubject.init()();
  *(void *)&v17[OBJC_IVAR____TtC11MobilePhone13SearchMetrics_logLatencyCancellable] = 0;
  uint64_t v31 = OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDictQueue;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  uint64_t v43 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v32);
  *(void *)&v17[v31] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v18 = OBJC_IVAR____TtC11MobilePhone13SearchMetrics_analyticsLogger;
  *(void *)&v17[v18] = [objc_allocWithZone((Class)type metadata accessor for MPAnalyticsLogger()) init];

  id v19 = (objc_class *)type metadata accessor for SearchMetrics();
  v42.id receiver = v17;
  v42.Class super_class = v19;
  uint64_t v20 = (char *)[v42 init];
  uint64_t v43 = *(void **)&v20[OBJC_IVAR____TtC11MobilePhone13SearchMetrics_logLatencySubject];
  unint64_t v21 = v20;
  swift_retain();
  unint64_t v22 = v34;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  id v41 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v24 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v36, 1, 1, v23);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  BOOL v25 = v35;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v24);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v38);
  swift_release();
  uint64_t v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for closure #1 in SearchMetrics.init();
  *(void *)(v27 + 24) = v26;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Debounce<PassthroughSubject<(), Never>, OS_dispatch_queue> and conformance Publishers.Debounce<A, B>, &demangling cache variable for type metadata for Publishers.Debounce<PassthroughSubject<(), Never>, OS_dispatch_queue>);
  uint64_t v28 = v39;
  uint64_t v29 = Publisher<>.sink(receiveValue:)();
  swift_release();

  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v28);
  *(void *)&v21[OBJC_IVAR____TtC11MobilePhone13SearchMetrics_logLatencyCancellable] = v29;
  swift_release();
  return v21;
}

uint64_t closure #1 in SearchMetrics.init()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v11 = (void *)result;
    id v12 = *(id *)(result + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDictQueue);

    aBlock[4] = partial apply for closure #1 in closure #1 in SearchMetrics.init();
    aBlock[5] = a1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_20_0;
    uint64_t v13 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v16 = _swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v15 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in SearchMetrics.init()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::UInt32 v1 = (void *)Strong;
    SearchMetrics.logSearchLatency()();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = (char *)result;
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v5 = (unint64_t *)&v3[OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDict];
    swift_beginAccess();
    *uint64_t v5 = v4;

    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall SearchMetrics.logSearchBarTap()()
{
  (*(void (**)(unint64_t, unint64_t))((swift_isaMask & **(void **)(v0
                                                                                            + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_analyticsLogger))
                                                             + 0x50))(0xD000000000000029, 0x8000000100241200);
}

uint64_t SearchMetrics.keypadButtonInteracted(buttonType:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSNumber)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002053C0;
  *(void *)(inited + 32) = 0xD00000000000001DLL;
  *(void *)(inited + 40) = 0x8000000100207510;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:a1];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_analyticsLogger);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))((swift_isaMask & *v5) + 0x58))(0xD00000000000002ELL, 0x8000000100241230, v7);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall SearchMetrics.logInteractionWith(_:searchLength:)(CSSuggestion _, Swift::Int_optional searchLength)
{
  Swift::Bool is_nil = searchLength.is_nil;
  Swift::Int value = searchLength.value;
  id v4 = [(objc_class *)_.super.isa currentToken];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 tokenKind];

    unsigned __int8 v7 = 1;
    switch((unint64_t)v6)
    {
      case 0uLL:
        unsigned __int8 v7 = 3;
        break;
      case 5uLL:
      case 7uLL:
        break;
      case 0x10uLL:
        unsigned __int8 v7 = 2;
        break;
      default:
        unsigned __int8 v7 = 4;
        break;
    }
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  if (is_nil) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = value;
  }

  SearchMetrics.logSearchResultInteraction(forEvent:interactionType:cellType:suggestionKind:searchLength:)(0xD00000000000003BLL, 0x8000000100241260, 1, 1, v7, v8);
}

unint64_t SearchMetrics.logSearchResultInteraction(_:cellType:searchLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = 0xD00000000000003BLL;
  if ((a2 - 1) < 4)
  {
    id v6 = "com.apple.MobilePhone.RecentsSearchResultInteractionMetrics";
  }
  else
  {
    if ((a2 - 5) > 3) {
      return result;
    }
    unint64_t result = 0xD000000000000039;
    id v6 = "com.apple.MobilePhone.SmartDialerResultInteractionMetrics";
  }
  SearchMetrics.logSearchResultInteraction(forEvent:interactionType:cellType:suggestionKind:searchLength:)(result, (unint64_t)(v6 - 32) | 0x8000000000000000, a1, a2, 5u, a3);

  return swift_bridgeObjectRelease();
}

uint64_t SearchMetrics.logSearchResultInteraction(forEvent:interactionType:cellType:suggestionKind:searchLength:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSNumber)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100206220;
  *(void *)(inited + 32) = 0xD00000000000001BLL;
  *(void *)(inited + 40) = 0x8000000100241490;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:a3];
  *(void *)(inited + 56) = 0xD00000000000001FLL;
  *(void *)(inited + 64) = 0x80000001002414B0;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:a4];
  strcpy((char *)(inited + 80), "searchLength");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNumber) initWithInteger:a6];
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v14 = a5;
  uint64_t v15 = v24;
  switch(a5)
  {
    case 1u:
      uint64_t v14 = 1;
      goto LABEL_6;
    case 2u:
      uint64_t v14 = 2;
      goto LABEL_6;
    case 3u:
      uint64_t v14 = 3;
      goto LABEL_6;
    case 4u:
      uint64_t v14 = 10;
      goto LABEL_6;
    case 5u:
      goto LABEL_9;
    default:
LABEL_6:
      id v16 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v14];
      if (v16)
      {
        uint64_t v17 = (uint64_t)v16;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, 0xD00000000000001ALL, 0x80000001002414D0, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }
      else
      {

        uint64_t v15 = v24;
      }
LABEL_9:
      id v19 = *(void **)(v7 + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_analyticsLogger);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v15);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v19) + 0x58))(a1, a2, v21);
      return swift_bridgeObjectRelease();
  }
}

uint64_t SearchMetrics.searchFinished(forController:startTime:searchLength:resultsCount:)(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v27 = *(void *)(v4 + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDictQueue);
    uint64_t v28 = v16;
    uint64_t v29 = result;
    uint64_t v19 = swift_allocObject();
    uint64_t v26 = v11;
    uint64_t v20 = v10;
    uint64_t v21 = v19;
    swift_unknownObjectWeakInit();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    *(_DWORD *)(v22 + 24) = a1;
    *(void *)(v22 + 32) = a2;
    *(void *)(v22 + 40) = a3;
    *(void *)(v22 + 48) = a4;
    *(void *)(v22 + 56) = ObjectType;
    aBlock[4] = partial apply for closure #1 in SearchMetrics.searchFinished(forController:startTime:searchLength:resultsCount:);
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_5;
    uint64_t v23 = _Block_copy(aBlock);
    id v24 = a2;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    long long v30 = _swiftEmptyArrayStorage;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v20);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in SearchMetrics.searchFinished(forController:startTime:searchLength:resultsCount:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (char *)Strong;
    uint64_t v11 = Strong + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_startTimeDict;
    swift_beginAccess();
    uint64_t v12 = *(void *)v11;
    if (*(void *)(*(void *)v11 + 16)
      && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v14 & 1) != 0)
      && (uint64_t v15 = *(void **)(*(void *)(v12 + 56) + 8 * v13),
          type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for NSObject),
          id v16 = v15,
          char v17 = static NSObject.== infix(_:_:)(),
          v16,
          (v17 & 1) != 0))
    {
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSNumber)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100207520;
      *(void *)(inited + 32) = 0xD000000000000014;
      *(void *)(inited + 40) = 0x8000000100241450;
      *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:a2];
      strcpy((char *)(inited + 56), "searchLatency");
      *(_WORD *)(inited + 70) = -4864;
      [a3 timeIntervalSinceNow];
      *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithDouble:v19 * -1000.0];
      strcpy((char *)(inited + 80), "searchLength");
      *(unsigned char *)(inited + 93) = 0;
      *(_WORD *)(inited + 94) = -5120;
      *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNumber) initWithInteger:a4];
      *(void *)(inited + 104) = 0xD000000000000012;
      *(void *)(inited + 112) = 0x8000000100241470;
      *(void *)(inited + 120) = [objc_allocWithZone((Class)NSNumber) initWithInteger:a5];
      unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v20);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v23 = &v10[OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDict];
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *(void *)v23;
      *(void *)uint64_t v23 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, a2, isUniquelyReferenced_nonNull_native);
      *(void *)uint64_t v23 = v27;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_beginAccess();
      id v25 = a3;
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = *(void *)v11;
      *(void *)uint64_t v11 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v25, a2, v26);
      *(void *)uint64_t v11 = v28;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
      Subject<>.send()();

      swift_release();
    }
  }
}

uint64_t SearchMetrics.logSearchLatency()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDictQueue);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v8 = v0;
  uint64_t v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone13SearchMetrics_searchLatencyDict);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(*v9 + 64);
  uint64_t v25 = *v9 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v15 = OBJC_IVAR____TtC11MobilePhone13SearchMetrics_analyticsLogger;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_6;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v21 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v16;
    if (!v22)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v22 = *(void *)(v25 + 8 * v16);
      if (!v22)
      {
        int64_t v16 = v21 + 2;
        if (v21 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v22 = *(void *)(v25 + 8 * v16);
        if (!v22) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_6:
    uint64_t v19 = *(void *)(*(void *)(v10 + 56) + 8 * v18);
    unint64_t v20 = *(void (**)(unint64_t, unint64_t, uint64_t))((swift_isaMask & **(void **)(v8 + v15))
                                                                             + 0x58);
    swift_bridgeObjectRetain();
    v20(0xD000000000000023, 0x8000000100241420, v19);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v16 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v16 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v16 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v16);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

id SearchMetrics.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for SearchMetrics();
  return [super dealloc];
}

unint64_t specialized SearchMetricsResultInteractionType.init(rawValue:)(unsigned int a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v2 = a1;
  switch(a1)
  {
    case 0u:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 0;
      break;
    case 1u:
      return v2 | ((unint64_t)v1 << 32);
    case 2u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 2;
      break;
    case 3u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 3;
      break;
    default:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

unint64_t specialized SearchMetricsKeypadButtonType.init(rawValue:)(unsigned int a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v2 = a1;
  switch(a1)
  {
    case 0u:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 0;
      break;
    case 1u:
      return v2 | ((unint64_t)v1 << 32);
    case 2u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 2;
      break;
    case 3u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 3;
      break;
    case 4u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 4;
      break;
    default:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

uint64_t type metadata accessor for SearchMetrics()
{
  return self;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100141740()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in SearchMetrics.init()()
{
  return closure #1 in SearchMetrics.init()(v0);
}

uint64_t sub_100141780()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1001417C0()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void partial apply for closure #1 in SearchMetrics.searchFinished(forController:startTime:searchLength:resultsCount:)()
{
  closure #1 in SearchMetrics.searchFinished(forController:startTime:searchLength:resultsCount:)(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

unint64_t lazy protocol witness table accessor for type SearchMetricsResultInteractionType and conformance SearchMetricsResultInteractionType()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchMetricsResultInteractionType and conformance SearchMetricsResultInteractionType;
  if (!lazy protocol witness table cache variable for type SearchMetricsResultInteractionType and conformance SearchMetricsResultInteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchMetricsResultInteractionType and conformance SearchMetricsResultInteractionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchMetricsKeypadButtonType and conformance SearchMetricsKeypadButtonType()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchMetricsKeypadButtonType and conformance SearchMetricsKeypadButtonType;
  if (!lazy protocol witness table cache variable for type SearchMetricsKeypadButtonType and conformance SearchMetricsKeypadButtonType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchMetricsKeypadButtonType and conformance SearchMetricsKeypadButtonType);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchMetricsResultInteractionType()
{
  return &type metadata for SearchMetricsResultInteractionType;
}

ValueMetadata *type metadata accessor for SearchMetricsKeypadButtonType()
{
  return &type metadata for SearchMetricsKeypadButtonType;
}

uint64_t partial apply for closure #1 in closure #1 in SearchMetrics.init()()
{
  return closure #1 in closure #1 in SearchMetrics.init()();
}

void ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(void *a1)
{
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [self alertControllerWithTitle:v3 message:0 preferredStyle:0];

  uint64_t v5 = a1;
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v45 = partial apply for closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:);
  uint64_t v46 = (void *)v6;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  uint64_t v43 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  unint64_t v44 = &block_descriptor_6;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v9 = self;
  id v10 = [v9 actionWithTitle:v7 style:1 handler:v8];
  _Block_release(v8);
  swift_release();

  uint64_t v11 = *(char **)(v1 + OBJC_IVAR___MPReportFlowPresenter_contactsService);
  uint64_t v12 = *(void **)&v11[OBJC_IVAR___MPContactsService_dataProvider];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v14 = [v12 contactByHandleForRecentCall:v5 keyDescriptors:isa];

  uint64_t v39 = v10;
  id v40 = v4;
  if (v14)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v15 = 0;
  }
  id v16 = [v5 validRemoteParticipantHandles];
  if (v16)
  {
    unint64_t v17 = v16;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v19 = v5;
    unint64_t v20 = v11;
    int64_t v21 = specialized Sequence.compactMap<A>(_:)(v18, v15, v19, (uint64_t)v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v21 = _swiftEmptyArrayStorage;
  }
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v45 = partial apply for closure #2 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:);
  uint64_t v46 = (void *)v23;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  uint64_t v43 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  unint64_t v44 = &block_descriptor_7;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_release();
  id v26 = [v9 actionWithTitle:v24 style:2 handler:v25];
  _Block_release(v25);
  swift_release();

  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v28 = (void *)swift_allocObject();
  void v28[2] = v27;
  v28[3] = v21;
  v28[4] = v5;
  id v29 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v30 = String._bridgeToObjectiveC()();
  uint64_t v31 = v26;
  swift_bridgeObjectRelease();
  uint64_t v45 = partial apply for closure #3 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:);
  uint64_t v46 = v28;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  uint64_t v43 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  unint64_t v44 = &block_descriptor_14_0;
  uint64_t v32 = _Block_copy(&aBlock);
  swift_release();
  id v33 = [v9 actionWithTitle:v30 style:2 handler:v32];
  _Block_release(v32);
  swift_release();

  [v40 addAction:v31];
  [v40 addAction:v33];
  [v40 addAction:v39];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v35 = Strong;
    [Strong presentViewController:v40 animated:1 completion:0];

LABEL_12:
    goto LABEL_13;
  }
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v36, v37))
  {

    goto LABEL_12;
  }
  uint64_t v38 = (uint8_t *)swift_slowAlloc();
  uint64_t aBlock = swift_slowAlloc();
  *(_DWORD *)uint64_t v38 = 136315138;
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100241510, &aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v36, v37, "ReportFlowPresenter: in %s, failed to present alert because alertPresentingViewController was nil", v38, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_13:
}

void ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  NSString v7 = *(void **)(v1 + OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel);
  uint64_t v89 = (void *)type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  uint64_t v90 = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  uint64_t aBlock = (uint64_t)a1;
  swift_retain();
  uint64_t v83 = a1;
  uint64_t v8 = dispatch thunk of CarrierVoiceSpamReportHelper.reportSpamAlertControllerCarrierName(for:)();
  uint64_t v10 = v9;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  specialized CallReportingViewModel.getCarrierSpamReportAlertTitle(carrierName:)(v8, v10);
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [self alertControllerWithTitle:v11 message:0 preferredStyle:0];

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v82 = Strong;
    id v84 = self;
    id v14 = [v84 mainBundle];
    v93._id object = (void *)0xE000000000000000;
    v15._id object = (void *)0x800000010023D5D0;
    v15._uint64_t countAndFlagsBits = 0xD000000000000021;
    v16.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v16.value._id object = (void *)0xE900000000000073;
    v17._uint64_t countAndFlagsBits = 0;
    v17._id object = (void *)0xE000000000000000;
    v93._uint64_t countAndFlagsBits = 0;
    Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v93);
    uint64_t countAndFlagsBits = v18._countAndFlagsBits;
    id object = v18._object;

    uint64_t v19 = v4;
    unint64_t v20 = *(void **)(v2 + OBJC_IVAR___MPReportFlowPresenter_contactsService);
    int64_t v21 = *(void (**)(void))(v5 + 16);
    uint64_t v79 = v5 + 16;
    uint64_t v80 = (void (*)(void, void, void))v21;
    uint64_t v81 = v2 + OBJC_IVAR___MPReportFlowPresenter_logger;
    uint64_t v69 = (char *)&countAndFlagsBits - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v21(v69);
    uint64_t v22 = *(unsigned __int8 *)(v5 + 80);
    id v85 = v12;
    uint64_t v23 = (v22 + 16) & ~v22;
    uint64_t v77 = v22 | 7;
    uint64_t v78 = v23;
    unint64_t v24 = (v6 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v72 = v24;
    unint64_t v73 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v75 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = v75 + 8;
    unint64_t v25 = v75;
    uint64_t v26 = swift_allocObject();
    uint64_t v74 = *(void (**)(void, void, void))(v5 + 32);
    v74(v26 + v23, (char *)&countAndFlagsBits - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    *(void *)(v26 + v24) = v20;
    uint64_t v27 = v83;
    *(void *)(v26 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8)) = v83;
    *(void *)(v26 + v25) = v7;
    Swift::String v71 = v27;
    id v28 = v20;
    id v29 = v7;
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v90 = (uint64_t)partial apply for closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:);
    uint64_t v91 = v26;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v87 = 1107296256;
    uint64_t v83 = &v88;
    uint64_t v88 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    uint64_t v89 = &block_descriptor_20_1;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_release();
    id object = self;
    id v32 = [object actionWithTitle:v30 style:2 handler:v31 countAndFlagsBits];
    _Block_release(v31);

    [v85 addAction:v32];
    id v33 = [v84 mainBundle];
    v34._uint64_t countAndFlagsBits = 0xD000000000000028;
    v94._id object = (void *)0xE000000000000000;
    v34._id object = (void *)0x800000010023D600;
    v35.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v35.value._id object = (void *)0xE900000000000073;
    v36._uint64_t countAndFlagsBits = 0;
    v36._id object = (void *)0xE000000000000000;
    v94._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, (NSBundle)v33, v36, v94);

    os_log_type_t v37 = v69;
    v80(v69, v81, v19);
    uint64_t v38 = swift_allocObject();
    id v39 = v85;
    v74(v38 + v78, v37, v19);
    id v40 = v28;
    *(void *)(v38 + v72) = v28;
    id v41 = v71;
    *(void *)(v38 + v73) = v71;
    *(void *)(v38 + v75) = v29;
    uint64_t v42 = v41;
    id v43 = v40;
    id v44 = v29;
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v90 = (uint64_t)partial apply for closure #2 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:);
    uint64_t v91 = v38;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v87 = 1107296256;
    uint64_t v88 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    uint64_t v89 = &block_descriptor_26;
    uint64_t v46 = _Block_copy(&aBlock);
    swift_release();
    id v47 = object;
    id v48 = [object actionWithTitle:v45 style:2 handler:v46];
    _Block_release(v46);

    [v39 addAction:v48];
    id v49 = [v84 mainBundle];
    v95._id object = (void *)0xE000000000000000;
    v50._uint64_t countAndFlagsBits = 0x4C45434E4143;
    v50._id object = (void *)0xE600000000000000;
    v51.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v51.value._id object = (void *)0xE900000000000073;
    v52._uint64_t countAndFlagsBits = 0;
    v52._id object = (void *)0xE000000000000000;
    v95._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v50, v51, (NSBundle)v49, v52, v95);

    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v44;
    *(void *)(v53 + 24) = v42;
    char v54 = v42;
    id v55 = v44;
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v90 = (uint64_t)partial apply for closure #3 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:);
    uint64_t v91 = v53;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v87 = 1107296256;
    uint64_t v88 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    uint64_t v89 = &block_descriptor_32;
    uint64_t v57 = _Block_copy(&aBlock);
    swift_release();
    id v58 = [v47 actionWithTitle:v56 style:1 handler:v57];
    _Block_release(v57);

    [v39 addAction:v58];
    id v59 = [v39 popoverPresentationController];
    if (v59)
    {
      uint64_t v60 = v59;
      [v59 setPermittedArrowDirections:1];
    }
    id v61 = [v39 popoverPresentationController];
    id v62 = v82;
    if (v61)
    {
      uint64_t v63 = v61;
      id v64 = [v82 view];
      [v63 setSourceView:v64];
    }
    [v62 presentViewController:v39 animated:1 completion:0];
  }
  else
  {
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315138;
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x8000000100241540, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "ReportFlowPresenter: in %s, failed to present alert because alertPresentingViewController was nil", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void ReportFlowPresenter.showReportingExtension(for:)(NSObject *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v85 + 64);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  Swift::String v17 = (char *)&v77 - v16;
  __chkstk_darwin(v15);
  Swift::String v86 = a1;
  uint64_t v87 = (char *)&v77 - v18;
  id v19 = [a1 date];
  if (v19)
  {
    unint64_t v20 = v19;
    uint64_t v84 = v4;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v21(v9, v17, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
    {
      v21(v87, v9, v10);
      uint64_t v22 = v86;
      id v23 = [v86 isoCountryCode];
      if (v23)
      {
        unint64_t v24 = v23;
        uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        id v27 = [v22 callerId];
        if (v27)
        {
          id v28 = v27;
          uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v81 = v29;

          id v30 = [v22 callerId];
          uint64_t v78 = v26;
          if (v30)
          {
            uint64_t v31 = v30;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v33 = v32;
          }
          else
          {
            uint64_t v33 = 0;
          }
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v87, v10);
          if (v33)
          {
            NSString v41 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v41 = 0;
          }
          id v42 = objc_allocWithZone((Class)ILCallCommunication);
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          id v44 = [v42 initWithSender:v41 dateReceived:isa];

          id v82 = *(void (**)(char *, uint64_t))(v11 + 8);
          v82(v14, v10);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v45 = swift_allocObject();
          *(_OWORD *)(v45 + 16) = xmmword_1002053A0;
          *(void *)(v45 + 32) = v44;
          aBlock[0] = v45;
          specialized Array._endMutation()();
          id v46 = objc_allocWithZone((Class)ILCallClassificationRequest);
          type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for ILCallCommunication);
          id v79 = v44;
          Class v47 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v48 = [v46 initWithCallCommunications:v47];

          id v49 = objc_allocWithZone((Class)ILClassificationUIExtensionHostViewController);
          id v50 = v48;
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v52 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v53 = [v49 initUnactivatedVCWithRequest:v50 sender:v51 isoCountryCode:v52];

          uint64_t v83 = (uint64_t)v50;
          char v54 = *(void **)(v2 + OBJC_IVAR___MPReportFlowPresenter_classificationViewController);
          *(void *)(v2 + OBJC_IVAR___MPReportFlowPresenter_classificationViewController) = v53;
          id v77 = v53;
          id v55 = v53;
          uint64_t v80 = (uint64_t)v55;

          [v55 setDelegate:v2];
          uint64_t v78 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v81 = v2 + OBJC_IVAR___MPReportFlowPresenter_logger;
          uint64_t v56 = v85;
          (*(void (**)(char *))(v85 + 16))((char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
          unint64_t v57 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
          unint64_t v58 = (v5 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v61 = swift_allocObject();
          (*(void (**)(unint64_t, char *, uint64_t))(v56 + 32))(v61 + v57, v6, v84);
          uint64_t v62 = v78;
          uint64_t v63 = v79;
          *(void *)(v61 + v58) = v79;
          id v64 = v86;
          *(void *)(v61 + v59) = v86;
          *(void *)(v61 + v60) = v62;
          uint64_t v65 = (void *)v80;
          *(void *)(v61 + ((v60 + 15) & 0xFFFFFFFFFFFFFFF8)) = v80;
          aBlock[4] = (uint64_t)partial apply for closure #1 in ReportFlowPresenter.showReportingExtension(for:);
          aBlock[5] = v61;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
          aBlock[3] = (uint64_t)&block_descriptor_39;
          os_log_type_t v66 = _Block_copy(aBlock);
          uint64_t v67 = v63;
          id v68 = v65;
          uint64_t v69 = v64;
          swift_release();
          [v68 activateExtensionWithCompletion:v66];
          _Block_release(v66);
          unint64_t v70 = v68;
          Swift::String v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v73 = swift_slowAlloc();
            Swift::String v86 = v67;
            uint64_t v74 = (uint8_t *)v73;
            uint64_t v85 = swift_slowAlloc();
            *(_DWORD *)uint64_t v74 = 138412290;
            aBlock[0] = (uint64_t)v70;
            unint64_t v75 = v70;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)uint64_t v85 = v77;

            _os_log_impl((void *)&_mh_execute_header, v71, v72, "Created classification view controller: %@, waiting for ready", v74, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            unint64_t v70 = v86;
            unint64_t v76 = (void *)v83;
          }
          else
          {

            unint64_t v76 = v70;
            Swift::String v71 = v67;
            unint64_t v75 = v83;
          }

          v82(v87, v10);
          return;
        }
        swift_bridgeObjectRelease();
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v39 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)id v39 = 136315138;
          uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000100241570, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v40 = "ReportFlowPresenter: in %s, Unable to show reporting extension for call because the callerId is nil";
          goto LABEL_15;
        }
      }
      else
      {
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          id v39 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)id v39 = 136315138;
          uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000100241570, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v40 = "ReportFlowPresenter: in %s, Unable to show reporting extension for call because the isoCountryCode is nil";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v37, v38, v40, v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v87, v10);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  outlined destroy of Date?((uint64_t)v9);
  Swift::String v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    Swift::String v36 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)Swift::String v36 = 136315138;
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000100241570, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "ReportFlowPresenter: in %s, Unable to show reporting extension for call because the date is nil", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

void ReportFlowPresenter.presentBlockAllAlert(for:)(void *a1)
{
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [self alertControllerWithTitle:v3 message:0 preferredStyle:0];

  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v41 = partial apply for closure #1 in ReportFlowPresenter.presentBlockAllAlert(for:);
  uint64_t v42 = v5;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v38 = 1107296256;
  id v39 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v40 = &block_descriptor_43;
  uint64_t v7 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v8 = self;
  id v9 = [v8 actionWithTitle:v6 style:1 handler:v7];
  _Block_release(v7);
  swift_release();

  uint64_t v10 = *(char **)(v1 + OBJC_IVAR___MPReportFlowPresenter_contactsService);
  uint64_t v11 = *(void **)&v10[OBJC_IVAR___MPContactsService_dataProvider];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v13 = [v11 contactByHandleForRecentCall:a1 keyDescriptors:isa];

  os_log_type_t v35 = v8;
  id v14 = v4;
  id v15 = v9;
  if (v13)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v16 = 0;
  }
  id v17 = [a1 validRemoteParticipantHandles:v35];
  if (v17)
  {
    uint64_t v18 = v17;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v20 = a1;
    int64_t v21 = v10;
    uint64_t v22 = specialized Sequence.compactMap<A>(_:)(v19, v16, v20, (uint64_t)v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  id v23 = v15;
  unint64_t v24 = v14;
  uint64_t v25 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v25;
  *(void *)(v26 + 24) = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v41 = partial apply for closure #2 in ReportFlowPresenter.presentBlockAllAlert(for:);
  uint64_t v42 = v26;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v38 = 1107296256;
  id v39 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v40 = &block_descriptor_50;
  id v28 = _Block_copy(&aBlock);
  swift_release();
  id v29 = [v36 actionWithTitle:v27 style:2 handler:v28];
  _Block_release(v28);
  swift_release();

  [v14 addAction:v29];
  [v14 addAction:v23];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v31 = Strong;
    [Strong presentViewController:v24 animated:1 completion:0];
  }
  else
  {
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      Swift::String v34 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)Swift::String v34 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x8000000100241590, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "ReportFlowPresenter: in %s, failed to present alert because alertPresentingViewController was nil", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(void *a1)
{
  id v2 = specialized CallReportingViewModel.getFormattedInitiator(for:)(a1);
  if (v3)
  {
    specialized CallReportingViewModel.getReportInitiatorMessage(formattedHandle:)((uint64_t)v2, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v30 = [self alertControllerWithTitle:v4 message:v5 preferredStyle:0];

    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_bridgeObjectRetain();
    swift_retain();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    os_log_type_t v37 = partial apply for closure #1 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:);
    uint64_t v38 = v6;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v34 = 1107296256;
    os_log_type_t v35 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    Swift::String v36 = &block_descriptor_54;
    uint64_t v8 = _Block_copy(&aBlock);
    swift_release();
    id v9 = self;
    id v31 = [v9 actionWithTitle:v7 style:1 handler:v8];
    _Block_release(v8);
    swift_release();

    uint64_t v10 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = a1;
    swift_bridgeObjectRetain();
    swift_retain();
    id v12 = a1;
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    os_log_type_t v37 = partial apply for closure #2 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:);
    uint64_t v38 = v11;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v34 = 1107296256;
    os_log_type_t v35 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    Swift::String v36 = &block_descriptor_61;
    id v14 = _Block_copy(&aBlock);
    swift_release();
    id v15 = [v9 actionWithTitle:v13 style:2 handler:v14];
    _Block_release(v14);
    swift_release();

    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = v12;
    id v18 = v12;
    swift_bridgeObjectRetain();
    swift_retain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    os_log_type_t v37 = partial apply for closure #3 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:);
    uint64_t v38 = v17;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v34 = 1107296256;
    os_log_type_t v35 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    Swift::String v36 = &block_descriptor_68;
    id v20 = _Block_copy(&aBlock);
    swift_release();
    id v21 = [v9 actionWithTitle:v19 style:2 handler:v20];
    _Block_release(v20);
    swift_release();

    [v30 addAction:v15];
    [v30 addAction:v21];
    [v30 addAction:v31];
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v23 = Strong;
      [Strong presentViewController:v30 animated:1 completion:0];
    }
    else
    {
      NSString v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        id v29 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)id v29 = 136315138;
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "ReportFlowPresenter: in %s, failed to present alert because alertPresentingViewController was nil", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_15:
        return;
      }
    }
    goto LABEL_15;
  }
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.spamReport);
  oslog = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v25, "MPRecentsTableViewController: in %s, call initiator is nil", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void ReportFlowPresenter.presentBlockUnknownAlert(for:)(void *a1)
{
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [self alertControllerWithTitle:v3 message:0 preferredStyle:0];

  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v42 = partial apply for closure #1 in ReportFlowPresenter.presentBlockUnknownAlert(for:);
  uint64_t v43 = v5;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  id v40 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  NSString v41 = &block_descriptor_72;
  NSString v7 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v8 = self;
  id v9 = [v8 actionWithTitle:v6 style:1 handler:v7];
  _Block_release(v7);
  swift_release();

  uint64_t v10 = *(char **)(v1 + OBJC_IVAR___MPReportFlowPresenter_contactsService);
  uint64_t v11 = *(void **)&v10[OBJC_IVAR___MPContactsService_dataProvider];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v13 = [v11 contactByHandleForRecentCall:a1 keyDescriptors:isa];

  Swift::String v36 = v8;
  id v14 = v4;
  id v15 = v9;
  if (v13)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v16 = 0;
  }
  id v17 = [a1 validRemoteParticipantHandles:v36];
  if (v17)
  {
    id v18 = v17;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v20 = a1;
    id v21 = v10;
    specialized Sequence.compactMap<A>(_:)(v19, v16, v20, (uint64_t)v21);
    id v23 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v23 = _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v15;
  os_log_type_t v25 = v14;
  uint64_t v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v42 = partial apply for closure #2 in ReportFlowPresenter.presentBlockUnknownAlert(for:);
  uint64_t v43 = v27;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  id v40 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  NSString v41 = &block_descriptor_79;
  id v29 = _Block_copy(&aBlock);
  swift_release();
  id v30 = [v37 actionWithTitle:v28 style:2 handler:v29];
  _Block_release(v29);
  swift_release();

  [v14 addAction:v30];
  [v14 addAction:v24];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v32 = Strong;
    [Strong presentViewController:v25 animated:1 completion:0];
  }
  else
  {
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v35 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001002415F0, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ReportFlowPresenter: in %s, failed to present alert because alertPresentingViewController was nil", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  NSString v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

id ReportFlowPresenter.__allocating_init(callReportingViewModel:alertPresentingViewController:contactsService:)(void *a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  swift_unknownObjectWeakInit();
  uint64_t v8 = OBJC_IVAR___MPReportFlowPresenter_logger;
  uint64_t v9 = one-time initialization token for mobilePhone;
  uint64_t v10 = (char *)v7;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(&v10[v8], v12, v11);
  *(void *)&v10[OBJC_IVAR___MPReportFlowPresenter_classificationViewController] = 0;
  *(void *)&v10[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel] = a1;
  swift_unknownObjectWeakAssign();
  *(void *)&v10[OBJC_IVAR___MPReportFlowPresenter_contactsService] = a3;
  id v13 = a1;
  id v14 = a3;

  v17.id receiver = v10;
  v17.Class super_class = v3;
  [super init];

  return v15;
}

id ReportFlowPresenter.init(callReportingViewModel:alertPresentingViewController:contactsService:)(void *a1, void *a2, void *a3)
{
  id v6 = specialized ReportFlowPresenter.init(callReportingViewModel:alertPresentingViewController:contactsService:)(a1, (uint64_t)a2, a3);

  return v6;
}

void ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(void *a1)
{
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [self alertControllerWithTitle:v2 message:0 preferredStyle:0];

  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_bridgeObjectRetain();
  swift_retain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v24 = partial apply for closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:);
  uint64_t v25 = v3;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v23 = &block_descriptor_83;
  uint64_t v5 = _Block_copy(&aBlock);
  swift_release();
  id v6 = self;
  id v7 = [v6 actionWithTitle:v4 style:1 handler:v5];
  _Block_release(v5);
  swift_release();

  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = a1;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v24 = partial apply for closure #2 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:);
  uint64_t v25 = v9;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v23 = &block_descriptor_90;
  uint64_t v12 = _Block_copy(&aBlock);
  swift_release();
  id v13 = [v6 actionWithTitle:v11 style:2 handler:v12];
  _Block_release(v12);
  swift_release();

  [v19 addAction:v13];
  [v19 addAction:v7];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v15 = Strong;
    [Strong presentViewController:v19 animated:1 completion:0];
  }
  else
  {
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)id v18 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000100241610, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ReportFlowPresenter: in %s, failed to present alert because alertPresentingViewController was nil", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void closure #2 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (char *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000100241610, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ReportFlowPresenter: in %s, user did tap on report", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v10 = *(char **)&v5[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel];
    NSString v11 = *(void **)&v10[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager];
    uint64_t v12 = v10;
    id v13 = v11;
    FaceTimeSpamReportManager.reportSpam(call:)(a3);
  }
}

uint64_t sub_1001452C4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #2 in ReportFlowPresenter.presentBlockUnknownAlert(for:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (char *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001002415F0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ReportFlowPresenter: in %s, user did tap on block unknown", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v10 = *(id *)&v5[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel];
    NSString v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "blocking", v13, 2u);
      swift_slowDealloc();
    }

    specialized CallReportingViewModel.block(contacts:)(a3);
  }
}

void partial apply for closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD00000000000002CLL, 0x8000000100241510, "ReportFlowPresenter: in %s, user did tap on cancel");
}

void closure #2 in ReportFlowPresenter.presentBlockAllAlert(for:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, const char *a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v11 = (char *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.spamReport);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v17 = a3;
      id v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)id v15 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a6, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v17;
      swift_slowDealloc();
    }

    id v16 = *(id *)&v11[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel];
    specialized CallReportingViewModel.block(contacts:)(a3);
  }
}

void partial apply for closure #2 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #2 in ReportFlowPresenter.presentBlockAllAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD00000000000002CLL, 0x8000000100241510, "ReportFlowPresenter: in %s, user did tap on block");
}

void closure #3 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v7 = (char *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.spamReport);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      NSString v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)NSString v11 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100241510, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ReportFlowPresenter: in %s, user did tap on block and report", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v12 = OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel;
    id v13 = *(id *)&v7[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel];
    specialized CallReportingViewModel.block(contacts:)(a3);

    os_log_type_t v14 = *(char **)&v7[v12];
    id v15 = *(void **)&v14[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager];
    id v16 = v14;
    id v17 = v15;
    FaceTimeSpamReportManager.reportSpam(call:)(a4);
  }
}

uint64_t sub_100145A64()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #3 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #3 in ReportFlowPresenter.presentFaceTimeSpamReportAndBlockAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

void closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const char *a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.spamReport);
    NSString v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, a5, v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    os_log_type_t v14 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v14)
    {
      id v15 = v14;
      [v14 dismissViewControllerAnimated:1 completion:0];
    }
  }
}

void closure #2 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (char *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "MPRecentsTableViewController: in %s, user did tap on block", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v10 = *(id *)&v5[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel];
    NSString v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "blockInitiator", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = a3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    SpamModelable.blockInitiator()();
  }
}

void closure #3 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (char *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "MPRecentsTableViewController: in %s, user did tap on block and report", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v10 = OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel;
    id v11 = *(id *)&v5[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel];
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "blockInitiator", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v19 = (uint64_t)a3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    SpamModelable.blockInitiator()();

    id v15 = *(char **)&v5[v10];
    uint64_t v16 = *(void **)&v15[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager];
    id v17 = v15;
    id v18 = v16;
    FaceTimeSpamReportManager.reportSpam(call:)(a3);
  }
}

void closure #1 in ReportFlowPresenter.showReportingExtension(for:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = v8;
  id v11 = v9;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    id v15 = (void *)swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000100241570, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2112;
    id v16 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v15 = v10;

    *(_WORD *)(v14 + 22) = 2112;
    uint64_t v24 = (uint64_t)v11;
    id v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15[1] = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "ReportFlowPresenter: in %s, Presenting ClassificationViewController with communication: %@ for call: %@", (uint8_t *)v14, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong && (uint64_t v19 = (void *)Strong, v20 = (void *)swift_unknownObjectWeakLoadStrong(), v19, v20))
  {
    [v20 presentViewController:a6 animated:1 completion:0];
  }
  else
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)id v23 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000100241570, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ReportFlowPresenter: in %s, Unable to show reporting extension for call because the alertPresentingViewController is nil", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Spamreporting: carrier reporting, user did tap block", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = *(void **)&a3[OBJC_IVAR___MPContactsService_dataProvider];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v11 = [v9 contactByHandleForRecentCall:a4 keyDescriptors:isa];

  if (v11)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = [a4 validRemoteParticipantHandles];
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v16 = a4;
    id v17 = a3;
    id v18 = specialized Sequence.compactMap<A>(_:)(v15, v12, v16, (uint64_t)v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v18 = _swiftEmptyArrayStorage;
  }
  specialized CallReportingViewModel.block(contacts:)((unint64_t)v18);

  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Spamreporting: carrier reporting, user did tap block and report", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = *(void **)&a3[OBJC_IVAR___MPContactsService_dataProvider];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v11 = [v9 contactByHandleForRecentCall:a4 keyDescriptors:isa];

  if (v11)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = [a4 validRemoteParticipantHandles];
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v16 = a4;
    id v17 = a3;
    id v18 = specialized Sequence.compactMap<A>(_:)(v15, v12, v16, (uint64_t)v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v18 = _swiftEmptyArrayStorage;
  }
  specialized CallReportingViewModel.block(contacts:)((unint64_t)v18);
  swift_bridgeObjectRelease();
  v21[3] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v21[4] = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v21[0] = a4;
  id v19 = a4;
  swift_retain();
  dispatch thunk of CarrierVoiceSpamReportHelper.reportSpam(voiceCall:)();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
}

uint64_t closure #3 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  v6[3] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v6[4] = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v6[0] = a3;
  swift_retain();
  id v4 = a3;
  dispatch thunk of CarrierVoiceSpamReportHelper.logEventForCancelledScenario(for:)();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
}

void ReportFlowPresenter.init()()
{
}

uint64_t ReportFlowPresenter.controller(_:didComplete:with:)(uint64_t a1, void *a2, void *a3)
{
  os_log_type_t v22 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v23 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v3 + OBJC_IVAR___MPReportFlowPresenter_logger, v6);
  type metadata accessor for MainActor();
  id v14 = a3;
  id v15 = v3;
  id v16 = a2;
  uint64_t v17 = static MainActor.shared.getter();
  unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  id v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v17;
  *((void *)v20 + 3) = &protocol witness table for MainActor;
  *((void *)v20 + 4) = v15;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v18], v9, v23);
  *(void *)&v20[v19] = v16;
  *(void *)&v20[(v19 + 15) & 0xFFFFFFFFFFFFFFF8] = v22;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in ReportFlowPresenter.controller(_:didComplete:with:), (uint64_t)v20);
  return swift_release();
}

uint64_t closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v7[8] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[14] = v9;
  v7[15] = *(void *)(v9 + 64);
  v7[16] = swift_task_alloc();
  type metadata accessor for MainActor();
  v7[17] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in ReportFlowPresenter.controller(_:didComplete:with:), v11, v10);
}

uint64_t closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)()
{
  swift_release();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = v0[15];
    uint64_t v2 = v0[16];
    uint64_t v4 = v0[13];
    uint64_t v5 = v0[14];
    id v14 = (void *)v0[11];
    id v15 = (void *)v0[12];
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 16))(v2, v0[10], v4);
    unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v7 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v8 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v6, v2, v4);
    *(void *)(v8 + v7) = v14;
    *(void *)(v8 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)) = v15;
    v0[6] = partial apply for closure #1 in closure #1 in ReportFlowPresenter.controller(_:didComplete:with:);
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed () -> ();
    v0[5] = &block_descriptor_107;
    uint64_t v9 = _Block_copy(v0 + 2);
    id v10 = v15;
    id v11 = v14;
    swift_release();
    [Strong dismissViewControllerAnimated:1 completion:v9];
    _Block_release(v9);
  }
  *(unsigned char *)v0[8] = Strong == 0;
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void closure #1 in closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = v5;
  id v8 = v6;
  oslog = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    id v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412546;
    id v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v8;

    *(_WORD *)(v10 + 12) = 2112;
    if (a3) {
      id v13 = v7;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = a3;

    _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Completed classification request: %@ with response: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    unint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v41;
    uint64_t v37 = v42;
    uint64_t v7 = v43;
    uint64_t v8 = v44;
    unint64_t v9 = v45;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v37 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    unint64_t result = (void *)swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  int64_t v36 = (unint64_t)(v7 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v16 = v8;
    goto LABEL_29;
  }
  int64_t v18 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v18 < v36)
    {
      unint64_t v19 = *(void *)(v37 + 8 * v18);
      uint64_t v16 = v8 + 1;
      if (v19) {
        goto LABEL_28;
      }
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v36) {
        goto LABEL_56;
      }
      unint64_t v19 = *(void *)(v37 + 8 * v16);
      if (v19) {
        goto LABEL_28;
      }
      uint64_t v16 = v8 + 3;
      if (v8 + 3 >= v36) {
        goto LABEL_56;
      }
      unint64_t v19 = *(void *)(v37 + 8 * v16);
      if (v19) {
        goto LABEL_28;
      }
      uint64_t v16 = v8 + 4;
      if (v8 + 4 >= v36) {
        goto LABEL_56;
      }
      unint64_t v19 = *(void *)(v37 + 8 * v16);
      if (v19)
      {
LABEL_28:
        uint64_t v14 = (v19 - 1) & v19;
        unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
LABEL_29:
        id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
        if (v17)
        {
          while (1)
          {
            if (a2)
            {
              if ((a2 & 0xC000000000000001) != 0)
              {
                id v21 = v17;
                if (__CocoaDictionary.lookup(_:)())
                {
                  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  id v22 = v40;
                  swift_unknownObjectRelease();
                  goto LABEL_37;
                }
LABEL_39:

                goto LABEL_40;
              }
              if (*(void *)(a2 + 16))
              {
                unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
                if (v24)
                {
                  id v22 = *(id *)(*(void *)(a2 + 56) + 8 * v23);
LABEL_37:

                  if (v22) {
                    goto LABEL_52;
                  }
                  goto LABEL_40;
                }
                goto LABEL_39;
              }
            }
LABEL_40:
            id v25 = v17;
            unint64_t v26 = (unint64_t)[v25 type];
            if (v26 > 3) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = qword_100207740[v26];
            }
            NSString v28 = [v25 value];
            if (!v28)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              NSString v28 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            id v29 = [objc_allocWithZone((Class)TUHandle) initWithType:v27 value:v28];

            id v30 = [a3 isoCountryCode];
            if (v30)
            {
              id v31 = v30;
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v33 = v32;
            }
            else
            {
              uint64_t v33 = 0;
            }
            id v17 = [*(id *)(a4 + OBJC_IVAR___MPContactsService_dataProvider) metadataCache];
            if (v33)
            {
              NSString v34 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            else
            {
              NSString v34 = 0;
            }
            id v35 = [self contactForHandle:v29 isoCountryCode:v34 metadataCache:v17];

LABEL_52:
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            unint64_t result = (void *)specialized Array._endMutation()();
            uint64_t v8 = v16;
            unint64_t v9 = v14;
            if ((v5 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v17 = v40;
              swift_unknownObjectRelease();
              uint64_t v16 = v8;
              uint64_t v14 = v9;
              if (v40) {
                continue;
              }
            }
            goto LABEL_56;
          }
        }
        goto LABEL_56;
      }
      uint64_t v16 = v8 + 5;
      if (v8 + 5 < v36)
      {
        unint64_t v19 = *(void *)(v37 + 8 * v16);
        if (!v19)
        {
          uint64_t v20 = v8 + 6;
          do
          {
            if (v36 == v20) {
              goto LABEL_56;
            }
            unint64_t v19 = *(void *)(v37 + 8 * v20++);
          }
          while (!v19);
          uint64_t v16 = v20 - 1;
        }
        goto LABEL_28;
      }
    }
LABEL_56:
    outlined consume of Set<CHHandle>.Iterator._Variant();
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type CHHandle and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for VMAccount(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1)
{
  return partial apply for closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:));
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t partial apply for closure #2 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1)
{
  return partial apply for closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))closure #2 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:));
}

uint64_t partial apply for closure #1 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v6);
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return a2(a1, v2 + v5, v8, v9, v10);
}

uint64_t sub_100147FA0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #3 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(uint64_t a1)
{
  return closure #3 in ReportFlowPresenter.showCarrierVoiceCallReportAlert(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100148048()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return _swift_deallocObject(v0, v8 + 8, v5);
}

void partial apply for closure #1 in ReportFlowPresenter.showReportingExtension(for:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void **)(v1 + v5);
  uint64_t v9 = *(void **)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in ReportFlowPresenter.showReportingExtension(for:)(a1, v1 + v4, v8, v9, v10, v11);
}

void partial apply for closure #1 in ReportFlowPresenter.presentBlockAllAlert(for:)(uint64_t a1)
{
  closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD00000000000001ALL, 0x8000000100241590, "ReportFlowPresenter: in %s, user did tap on cancel");
}

void partial apply for closure #2 in ReportFlowPresenter.presentBlockAllAlert(for:)(uint64_t a1)
{
  closure #2 in ReportFlowPresenter.presentBlockAllAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD00000000000001ALL, 0x8000000100241590, "ReportFlowPresenter: in %s, user did tap on block all");
}

void partial apply for closure #1 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD000000000000031, 0x80000001002415B0, "MPRecentsTableViewController: in %s, user did tap on cancel");
}

void partial apply for closure #2 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #2 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #3 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #3 in ReportFlowPresenter.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void partial apply for closure #1 in ReportFlowPresenter.presentBlockUnknownAlert(for:)(uint64_t a1)
{
  closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD00000000000001ELL, 0x80000001002415F0, "ReportFlowPresenter: in %s, user did tap on cancel");
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #2 in ReportFlowPresenter.presentBlockUnknownAlert(for:)(uint64_t a1)
{
  closure #2 in ReportFlowPresenter.presentBlockUnknownAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v41;
    uint64_t v37 = v42;
    uint64_t v6 = v43;
    uint64_t v7 = v44;
    unint64_t v8 = v45;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v37 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v36 = (unint64_t)(v6 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_57;
    }
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v16 = v40;
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v40) {
      goto LABEL_57;
    }
LABEL_33:
    if (a2)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v20 = v16;
        if (!__CocoaDictionary.lookup(_:)()) {
          goto LABEL_42;
        }
        type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v21 = v40;
        swift_unknownObjectRelease();
      }
      else
      {
        if (!*(void *)(a2 + 16)) {
          goto LABEL_43;
        }
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
        if ((v23 & 1) == 0)
        {
LABEL_42:

          goto LABEL_43;
        }
        id v21 = *(id *)(*(void *)(a2 + 56) + 8 * v22);
      }

      if (v21)
      {

        goto LABEL_9;
      }
    }
LABEL_43:
    id v24 = v16;
    unint64_t v25 = (unint64_t)[v24 type];
    if (v25 > 3) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = qword_100207740[v25];
    }
    NSString v27 = [v24 value];
    if (!v27)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v28 = [objc_allocWithZone((Class)TUHandle) initWithType:v26 value:v27];

    id v29 = [a3 isoCountryCode];
    if (v29)
    {
      id v30 = v29;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;
    }
    else
    {
      uint64_t v32 = 0;
    }
    id v33 = [*(id *)(a4 + OBJC_IVAR___MPContactsService_dataProvider) metadataCache];
    if (v32)
    {
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v34 = 0;
    }
    id v35 = [self contactForHandle:v28 isoCountryCode:v34 metadataCache:v33];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_9:
    uint64_t v7 = v15;
    unint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_32:
    id v16 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_57;
    }
    goto LABEL_33;
  }
  int64_t v17 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v17 >= v36) {
      goto LABEL_57;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v17);
    uint64_t v15 = v7 + 1;
    if (!v18)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v36) {
        goto LABEL_57;
      }
      unint64_t v18 = *(void *)(v37 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v36) {
          goto LABEL_57;
        }
        unint64_t v18 = *(void *)(v37 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v36) {
            goto LABEL_57;
          }
          unint64_t v18 = *(void *)(v37 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v36) {
              goto LABEL_57;
            }
            unint64_t v18 = *(void *)(v37 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v7 + 6;
              while (v36 != v19)
              {
                unint64_t v18 = *(void *)(v37 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_31;
                }
              }
LABEL_57:
              outlined consume of Set<CHHandle>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

id specialized ReportFlowPresenter.init(callReportingViewModel:alertPresentingViewController:contactsService:)(void *a1, uint64_t a2, void *a3)
{
  unint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v8 = OBJC_IVAR___MPReportFlowPresenter_logger;
  uint64_t v9 = one-time initialization token for mobilePhone;
  uint64_t v10 = v4;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(&v10[v8], v12, v11);
  *(void *)&v10[OBJC_IVAR___MPReportFlowPresenter_classificationViewController] = 0;
  *(void *)&v10[OBJC_IVAR___MPReportFlowPresenter_callReportingViewModel] = a1;
  swift_unknownObjectWeakAssign();
  *(void *)&v10[OBJC_IVAR___MPReportFlowPresenter_contactsService] = a3;
  id v13 = a1;
  id v14 = a3;

  v16.id receiver = v10;
  v16.Class super_class = ObjectType;
  return [super init];
}

void partial apply for closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(uint64_t a1)
{
  closure #1 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD000000000000024, 0x8000000100241610, "ReportFlowPresenter: in %s, user did tap on cancel");
}

uint64_t objectdestroy_57Tm()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #2 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(uint64_t a1)
{
  closure #2 in ReportFlowPresenter.presentFaceTimeSpamReportAlert(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  id v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *id v13 = v2;
  v13[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)(a1, v7, v8, v9, v10, v11, v12);
}

uint64_t ObjC metadata update function for ReportFlowPresenter()
{
  return type metadata accessor for ReportFlowPresenter();
}

uint64_t type metadata accessor for ReportFlowPresenter()
{
  uint64_t result = type metadata singleton initialization cache for ReportFlowPresenter;
  if (!type metadata singleton initialization cache for ReportFlowPresenter) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ReportFlowPresenter()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t objectdestroy_92Tm()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  id v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *id v13 = v2;
  v13[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)(a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100148F2C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

void partial apply for closure #1 in closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(v0 + v3);
  uint64_t v5 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in closure #1 in ReportFlowPresenter.controller(_:didComplete:with:)(v0 + v2, v4, v5);
}

int64x2_t one-time initialization function for leadingImageSize()
{
  int64x2_t result = vdupq_n_s64(0x4049000000000000uLL);
  static Layout.leadingImageSize = (__int128)result;
  return result;
}

long long *Layout.leadingImageSize.unsafeMutableAddressor()
{
  if (one-time initialization token for leadingImageSize != -1) {
    swift_once();
  }
  return &static Layout.leadingImageSize;
}

double static Layout.leadingImageSize.getter()
{
  if (one-time initialization token for leadingImageSize != -1) {
    swift_once();
  }
  return *(double *)&static Layout.leadingImageSize;
}

void one-time initialization function for distanceFromEdge()
{
  static Layout.distanceFromEdge = 0x4028000000000000;
}

uint64_t *Layout.distanceFromEdge.unsafeMutableAddressor()
{
  if (one-time initialization token for distanceFromEdge != -1) {
    swift_once();
  }
  return &static Layout.distanceFromEdge;
}

double static Layout.distanceFromEdge.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for distanceFromEdge, (uint64_t)&static Layout.distanceFromEdge);
}

void one-time initialization function for distanceBetweenImageAndLabels()
{
  static Layout.distanceBetweenImageAndLabels = 0x4022000000000000;
}

uint64_t *Layout.distanceBetweenImageAndLabels.unsafeMutableAddressor()
{
  if (one-time initialization token for distanceBetweenImageAndLabels != -1) {
    swift_once();
  }
  return &static Layout.distanceBetweenImageAndLabels;
}

double static Layout.distanceBetweenImageAndLabels.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for distanceBetweenImageAndLabels, (uint64_t)&static Layout.distanceBetweenImageAndLabels);
}

void one-time initialization function for distanceBetweenLabels()
{
  static Layout.distanceBetweenLabels = 0x4000000000000000;
}

uint64_t *Layout.distanceBetweenLabels.unsafeMutableAddressor()
{
  if (one-time initialization token for distanceBetweenLabels != -1) {
    swift_once();
  }
  return &static Layout.distanceBetweenLabels;
}

double static Layout.distanceBetweenLabels.getter()
{
  return static SearchLayout.CellSpacingConstants.verticalLayoutMargin.getter(&one-time initialization token for distanceBetweenLabels, (uint64_t)&static Layout.distanceBetweenLabels);
}

Class static PersonalNicknameMenuView.meCardSharingEnabled.getter()
{
  if (one-time initialization token for nicknamesDefaults != -1) {
    swift_once();
  }
  Class isa = nicknamesDefaults.value.super.isa;
  if (nicknamesDefaults.value.super.isa)
  {
    NSString v1 = String._bridgeToObjectiveC()();
    Class isa = (Class)[(objc_class *)isa BOOLForKey:v1];
  }
  return isa;
}

void PersonalNicknameMenuView.personalNickname.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PersonNameComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)((char *)nicknamesDefaults.value._kvo_ + v0);
  if (v8)
  {
    id v9 = v8;
    id v47 = PersonalNicknameMenuView.nameLabel.getter();
    id v46 = self;
    id v10 = [v9 firstName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v0;

    id v11 = [v9 lastName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    id v13 = v9;
    id v14 = [v46 localizedStringFromPersonNameComponents:isa style:2 options:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = v47;
    [v47 setText:v15];

    id v17 = [v9 avatar];
    if (v17)
    {
      unint64_t v18 = v17;
      id v19 = [v17 imageData];

      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      id v23 = [self mainScreen];
      [v23 scale];
      double v25 = v24;

      id v26 = objc_allocWithZone((Class)UIImage);
      outlined copy of Data._Representation(v20, v22);
      Class v27 = Data._bridgeToObjectiveC()().super.isa;
      id v28 = [v26 initWithData:v27 scale:v25];
      outlined consume of Data._Representation(v20, v22);

      uint64_t v29 = v45;
      id v30 = PersonalNicknameMenuView.leadingAvatarView.getter();
      self;
      uint64_t v31 = (void *)swift_dynamicCastObjCClass();
      if (v31)
      {
        [v31 setImage:v28];
      }
      else
      {

        id v32 = PersonalNicknameMenuView.containerStackView.getter();
        id v33 = PersonalNicknameMenuView.leadingAvatarView.getter();
        [v32 removeArrangedSubview:v33];

        id v34 = [objc_allocWithZone((Class)UIImageView) initWithImage:v28];
        id v35 = *(void **)(v29 + *(void *)&nicknamesDefaults.is_nil);
        *(void *)(v29 + *(void *)&nicknamesDefaults.is_nil) = v34;

        id v36 = PersonalNicknameMenuView.leadingAvatarView.getter();
        [v36 setTranslatesAutoresizingMaskIntoConstraints:0];

        id v37 = PersonalNicknameMenuView.containerStackView.getter();
        id v38 = PersonalNicknameMenuView.leadingAvatarView.getter();
        [v37 insertArrangedSubview:v38 atIndex:0];

        uint64_t v39 = self;
        PersonalNicknameMenuView.generateLeadingAvatarConstraints()();
        type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
        id v30 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v39 activateConstraints:v30];
      }

      id v40 = PersonalNicknameMenuView.leadingAvatarView.getter();
      id v41 = [v40 layer];

      if (one-time initialization token for leadingImageSize != -1) {
        swift_once();
      }
      [v41 setCornerRadius:*(double *)&static Layout.leadingImageSize * 0.5];

      id v42 = PersonalNicknameMenuView.leadingAvatarView.getter();
      id v43 = [v42 layer];

      [v43 setMasksToBounds:1];
      outlined consume of Data._Representation(v20, v22);
    }
    else
    {
    }
  }
}

id PersonalNicknameMenuView.contactStore.getter()
{
  CFStringRef identifier = nicknamesDefaults.value._identifier_;
  uint64_t v2 = *(void **)((char *)&nicknamesDefaults.value._identifier_->isa + v0);
  if (v2)
  {
    id v3 = *(void **)((char *)&nicknamesDefaults.value._identifier_->isa + v0);
  }
  else
  {
    id v4 = closure #1 in PersonalNicknameMenuView.contactStore.getter();
    uint64_t v5 = *(void **)((char *)&identifier->isa + v0);
    *(void **)((char *)&identifier->isa + v0) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in PersonalNicknameMenuView.contactStore.getter()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (!v1) {
    id v1 = (id)TUPreferredFaceTimeBundleIdentifier();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 tu_contactStoreConfigurationForBundleIdentifier:v3];

  id v5 = [objc_allocWithZone((Class)CNContactStore) initWithConfiguration:v4];
  return v5;
}

id PersonalNicknameMenuView.meContact.getter()
{
  CFStringRef container = nicknamesDefaults.value._container_;
  uint64_t v2 = *(void **)((char *)&nicknamesDefaults.value._container_->isa + v0);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = closure #1 in PersonalNicknameMenuView.meContact.getter();
    id v4 = *(void **)((char *)&container->isa + v0);
    *(void **)((char *)&container->isa + v0) = v3;
    id v5 = v3;
    outlined consume of UILabel??(v4);
  }
  outlined copy of UILabel??(v2);
  return v3;
}

id closure #1 in PersonalNicknameMenuView.meContact.getter()
{
  id v0 = PersonalNicknameMenuView.contactStore.getter();
  Class isa = (Class)[self keysForNicknameHandling];
  if (!isa)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  id v12 = 0;
  id v2 = [v0 _crossPlatformUnifiedMeContactWithKeysToFetch:isa error:&v12];

  id v3 = v12;
  if (!v2)
  {
    id v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.nickname);
    swift_errorRetain();
    swift_errorRetain();
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      id v10 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not fetch me card %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  return v2;
}

id PersonalNicknameMenuView.leadingAvatarView.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter((uint64_t *)&nicknamesDefaults.is_nil, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.leadingAvatarView.getter);
}

id closure #1 in PersonalNicknameMenuView.leadingAvatarView.getter(uint64_t a1)
{
  id v1 = *(void **)((char *)nicknamesDefaults.value._kvo_ + a1);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 avatar];
    if (v3)
    {
      id v4 = v3;
      id v5 = [v3 imageData];

      uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      id v9 = [self mainScreen];
      [v9 scale];
      double v11 = v10;

      id v12 = objc_allocWithZone((Class)UIImage);
      outlined copy of Data._Representation(v6, v8);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v14 = [v12 initWithData:isa scale:v11];
      outlined consume of Data._Representation(v6, v8);

      id v15 = [objc_allocWithZone((Class)UIImageView) initWithImage:v14];
      id v16 = [v15 layer];
      if (one-time initialization token for leadingImageSize != -1) {
        swift_once();
      }
      [v16 setCornerRadius:*(double *)&static Layout.leadingImageSize * 0.5];

      id v17 = [v15 layer];
      [v17 setMasksToBounds:1];

      outlined consume of Data._Representation(v6, v8);
      return v15;
    }
    else
    {
      id v22 = [objc_allocWithZone((Class)CNMutableContact) init];
      NSString v23 = [v2 firstName];
      if (!v23)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v22 setGivenName:v23];

      NSString v24 = [v2 lastName];
      if (!v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v22 setFamilyName:v24];

      id v25 = [objc_allocWithZone((Class)CNAvatarView) initWithContact:v22];
      return v25;
    }
  }
  else
  {
    id v19 = PersonalNicknameMenuView.meContact.getter();
    if (v19)
    {
      uint64_t v20 = v19;
      id v21 = [objc_allocWithZone((Class)CNAvatarView) initWithContact:v19];

      return v21;
    }
    else
    {
      id v26 = objc_allocWithZone((Class)UIView);
      return [v26 init];
    }
  }
}

id PersonalNicknameMenuView.nameLabel.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___nameLabel, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.nameLabel.getter);
}

id PersonalNicknameMenuView.leadingAvatarView.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    uint64_t v6 = (void *)a2(v2);
    unint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id closure #1 in PersonalNicknameMenuView.nameLabel.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PersonNameComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)UILabel) init];
  id v10 = [self preferredFontForTextStyle:UIFontTextStyleCallout];
  [v9 setFont:v10];

  id v11 = [self labelColor];
  [v9 setTextColor:v11];

  id v12 = *(void **)((char *)nicknamesDefaults.value._kvo_ + a1);
  if (v12)
  {
    id v24 = self;
    id v13 = v12;
    id v25 = v13;
    uint64_t v14 = v5;
    id v15 = [v13 firstName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v16 = [v13 lastName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v14);
    PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
    id v18 = [v24 localizedStringFromPersonNameComponents:isa style:2 options:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setText:v19];
  }
  else
  {
    id v20 = PersonalNicknameMenuView.meContact.getter();
    if (v20)
    {
      id v21 = v20;
      id v22 = [v20 displayName];
      [v9 setText:v22];
    }
  }
  return v9;
}

id PersonalNicknameMenuView.subtitleLabel.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___subtitleLabel, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.subtitleLabel.getter);
}

id closure #1 in PersonalNicknameMenuView.subtitleLabel.getter(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  id v3 = [self preferredFontForTextStyle:UIFontTextStyleFootnote];
  [v2 setFont:v3];

  id v4 = [self secondaryLabelColor];
  [v2 setTextColor:v4];

  LODWORD(v4) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView_displayContext);
  id v5 = [self mainBundle];
  unint64_t v13 = 0xE000000000000000;
  if (v4 == 2)
  {
    unint64_t v6 = 0x8000000100241A50;
    unint64_t v7 = 0xD000000000000014;
  }
  else
  {
    unint64_t v7 = 0x50202620656D614ELL;
    unint64_t v6 = 0xEC0000006F746F68;
  }
  v8.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v8.value._id object = (void *)0xE900000000000073;
  v9._uint64_t countAndFlagsBits = 0;
  v9._id object = (void *)0xE000000000000000;
  uint64_t v10 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, v8, (NSBundle)v5, v9, *(Swift::String *)(&v13 - 1));

  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setText:v11];

  return v2;
}

id PersonalNicknameMenuView.labelStackView.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___labelStackView, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.labelStackView.getter);
}

id closure #1 in PersonalNicknameMenuView.labelStackView.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002053B0;
  *(void *)(v0 + 32) = PersonalNicknameMenuView.nameLabel.getter();
  *(void *)(v0 + 40) = PersonalNicknameMenuView.subtitleLabel.getter();
  specialized Array._endMutation()();
  id v1 = objc_allocWithZone((Class)UIStackView);
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithArrangedSubviews:isa];

  [v3 setAxis:1];
  [v3 setAlignment:1];
  if (one-time initialization token for distanceBetweenLabels != -1) {
    swift_once();
  }
  [v3 setSpacing:*(double *)&static Layout.distanceBetweenLabels];
  return v3;
}

id PersonalNicknameMenuView.containerStackView.getter()
{
  return PersonalNicknameMenuView.leadingAvatarView.getter(&OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___containerStackView, (uint64_t (*)(uint64_t))closure #1 in PersonalNicknameMenuView.containerStackView.getter);
}

id closure #1 in PersonalNicknameMenuView.containerStackView.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002053B0;
  *(void *)(v0 + 32) = PersonalNicknameMenuView.leadingAvatarView.getter();
  *(void *)(v0 + 40) = PersonalNicknameMenuView.labelStackView.getter();
  specialized Array._endMutation()();
  id v1 = objc_allocWithZone((Class)UIStackView);
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithArrangedSubviews:isa];

  [v3 setAxis:0];
  [v3 setAlignment:3];
  if (one-time initialization token for distanceBetweenImageAndLabels != -1) {
    swift_once();
  }
  [v3 setSpacing:*(double *)&static Layout.distanceBetweenImageAndLabels];
  return v3;
}

id PersonalNicknameMenuView.tapRecognizer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___tapRecognizer;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___tapRecognizer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___tapRecognizer);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v0 action:"didTapWithSender:"];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id PersonalNicknameMenuView.__allocating_init(displayContext:personalNicknameMenuViewDelegate:)(char a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return PersonalNicknameMenuView.init(displayContext:personalNicknameMenuViewDelegate:)(a1, a2, a3);
}

id PersonalNicknameMenuView.init(displayContext:personalNicknameMenuViewDelegate:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[(unint64_t)nicknamesDefaults.value._kvo_] = 0;
  *(void *)&v3[(unint64_t)nicknamesDefaults.value._identifier_] = 0;
  *(void *)&v3[(unint64_t)nicknamesDefaults.value._container_] = 1;
  *(void *)&v3[*(void *)&nicknamesDefaults.is_nil] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___nameLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___subtitleLabel] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___labelStackView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___containerStackView] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___tapRecognizer] = 0;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView_personalNicknameMenuViewDelegate + 8] = 0;
  uint64_t v6 = swift_unknownObjectWeakInit();
  v3[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView_displayContext] = a1;
  *(void *)(v6 + 8) = a3;
  swift_unknownObjectWeakAssign();
  v11.id receiver = v3;
  v11.Class super_class = (Class)type metadata accessor for PersonalNicknameMenuView();
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  specialized PersonalNicknameMenuView.getPersonalNickname(completion:)(v7);
  PersonalNicknameMenuView.setupConstraints()();
  id v8 = v7;
  id v9 = PersonalNicknameMenuView.tapRecognizer.getter();
  [v8 addGestureRecognizer:v9];

  swift_unknownObjectRelease();
  return v8;
}

void PersonalNicknameMenuView.setupConstraints()()
{
  uint64_t v1 = v0;
  id v2 = PersonalNicknameMenuView.leadingAvatarView.getter();
  id v3 = PersonalNicknameMenuView.nameLabel.getter();
  id v4 = PersonalNicknameMenuView.subtitleLabel.getter();
  id v5 = PersonalNicknameMenuView.labelStackView.getter();
  id v6 = PersonalNicknameMenuView.containerStackView.getter();
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v7 = PersonalNicknameMenuView.containerStackView.getter();
  [v1 addSubview:v7];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100207760;
  id v9 = PersonalNicknameMenuView.containerStackView.getter();
  id v10 = [v9 topAnchor];

  id v11 = [v1 topAnchor];
  if (one-time initialization token for distanceFromEdge != -1) {
    swift_once();
  }
  id v12 = [v10 constraintEqualToAnchor:v11 constant:*(double *)&static Layout.distanceFromEdge];

  *(void *)(v8 + 32) = v12;
  id v13 = PersonalNicknameMenuView.containerStackView.getter();
  id v14 = [v13 bottomAnchor];

  id v15 = [v1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15 constant:-*(double *)&static Layout.distanceFromEdge];

  *(void *)(v8 + 40) = v16;
  id v17 = PersonalNicknameMenuView.containerStackView.getter();
  id v18 = [v17 leadingAnchor];

  id v19 = [v1 leadingAnchor];
  id v20 = [v18 constraintEqualToAnchor:v19 constant:*(double *)&static Layout.distanceFromEdge];

  *(void *)(v8 + 48) = v20;
  id v21 = PersonalNicknameMenuView.containerStackView.getter();
  id v22 = [v21 trailingAnchor];

  id v23 = [v1 trailingAnchor];
  id v24 = [v22 constraintEqualToAnchor:v23 constant:-*(double *)&static Layout.distanceFromEdge];

  *(void *)(v8 + 56) = v24;
  specialized Array._endMutation()();
  unint64_t v25 = PersonalNicknameMenuView.generateLeadingAvatarConstraints()();
  specialized Array.append<A>(contentsOf:)(v25);
  id v26 = self;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v26 activateConstraints:isa];
}

uint64_t PersonalNicknameMenuView.generateLeadingAvatarConstraints()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002053B0;
  id v1 = PersonalNicknameMenuView.leadingAvatarView.getter();
  id v2 = [v1 heightAnchor];

  if (one-time initialization token for leadingImageSize != -1) {
    swift_once();
  }
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(v2, "constraintEqualToConstant:", *((double *)&static Layout.leadingImageSize
                                                                                         + 1)));

  *(void *)(v0 + 32) = v3;
  id v4 = PersonalNicknameMenuView.leadingAvatarView.getter();
  id v5 = [v4 widthAnchor];

  id v6 = [v5 constraintEqualToConstant:*(double *)&static Layout.leadingImageSize];
  *(void *)(v0 + 40) = v6;
  specialized Array._endMutation()();
  return v0;
}

void PersonalNicknameMenuView.init(frame:)()
{
}

id PersonalNicknameMenuView.__deallocating_deinit()
{
  return PersonalNicknameMenuView.__deallocating_deinit(type metadata accessor for PersonalNicknameMenuView);
}

void closure #1 in PersonalNicknameMenuView.setNickname()(void *a1, uint64_t a2)
{
  id v2 = *(void **)((char *)nicknamesDefaults.value._kvo_ + a2);
  *(void *)((char *)nicknamesDefaults.value._kvo_ + a2) = a1;
  id v3 = a1;

  PersonalNicknameMenuView.personalNickname.didset();
}

uint64_t closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:)(void *a1, uint64_t (*a2)(void *))
{
  if (one-time initialization token for nickname != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.nickname);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    if (a1) {
      id v10 = v5;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = a1;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching the personal nick name: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return a2(a1);
}

void thunk for @escaping @callee_guaranteed (@guaranteed IMNickname?) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t type metadata accessor for PersonalNicknameMenuView()
{
  return self;
}

void *PersonalNicknameNameProvider.personalNickname.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone28PersonalNicknameNameProvider_personalNickname);
  id v2 = v1;
  return v1;
}

id PersonalNicknameNameProvider.__allocating_init(personalNickname:)(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone28PersonalNicknameNameProvider_personalNickname] = a1;
  v5.id receiver = v3;
  v5.Class super_class = v1;
  return [super init];
}

id PersonalNicknameNameProvider.init(personalNickname:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone28PersonalNicknameNameProvider_personalNickname] = a1;
  v3.id receiver = v1;
  v3.Class super_class = (Class)type metadata accessor for PersonalNicknameNameProvider();
  return [super init];
}

void PersonalNicknameNameProvider.init()()
{
}

id PersonalNicknameNameProvider.__deallocating_deinit()
{
  return PersonalNicknameMenuView.__deallocating_deinit(type metadata accessor for PersonalNicknameNameProvider);
}

Swift::String_optional __swiftcall PersonalNicknameNameProvider.givenName()()
{
  uint64_t v0 = PersonalNicknameNameProvider.givenName()((SEL *)&selRef_firstName);
  result.value._id object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PersonalNicknameNameProvider.familyName()()
{
  uint64_t v0 = PersonalNicknameNameProvider.givenName()((SEL *)&selRef_lastName);
  result.value._id object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t PersonalNicknameNameProvider.givenName()(SEL *a1)
{
  if (!*(void *)(v1 + OBJC_IVAR____TtC11MobilePhone28PersonalNicknameNameProvider_personalNickname)) {
    return 0;
  }
  id v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC11MobilePhone28PersonalNicknameNameProvider_personalNickname), *a1));
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id @objc PersonalNicknameNameProvider.givenName()(char *a1, uint64_t a2, SEL *a3)
{
  uint64_t v3 = *(void **)&a1[OBJC_IVAR____TtC11MobilePhone28PersonalNicknameNameProvider_personalNickname];
  if (v3)
  {
    objc_super v5 = a1;
    id v6 = [v3 *a3];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }

  return v7;
}

uint64_t PersonalNicknameAvatarProvider.imageData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData + 8));
  return v1;
}

uint64_t PersonalNicknameAvatarProvider.wallpaperFilePath.getter()
{
  return PersonalNicknameAvatarProvider.wallpaperFilePath.getter(&OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_wallpaperFilePath);
}

uint64_t PersonalNicknameAvatarProvider.nameString.getter()
{
  return PersonalNicknameAvatarProvider.wallpaperFilePath.getter(&OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_nameString);
}

uint64_t PersonalNicknameAvatarProvider.wallpaperFilePath.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

id PersonalNicknameAvatarProvider.__allocating_init(imageData:wallpaperFilePath:nameString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = (char *)objc_allocWithZone(v6);
  id v14 = &v13[OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData];
  *(void *)id v14 = a1;
  *((void *)v14 + 1) = a2;
  id v15 = &v13[OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_wallpaperFilePath];
  *(void *)id v15 = a3;
  *((void *)v15 + 1) = a4;
  id v16 = &v13[OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_nameString];
  *(void *)id v16 = a5;
  *((void *)v16 + 1) = a6;
  v18.id receiver = v13;
  v18.Class super_class = v6;
  return [super init];
}

id PersonalNicknameAvatarProvider.init(imageData:wallpaperFilePath:nameString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v7 = &v6[OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData];
  *(void *)NSString v7 = a1;
  *((void *)v7 + 1) = a2;
  uint64_t v8 = &v6[OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_wallpaperFilePath];
  *(void *)uint64_t v8 = a3;
  *((void *)v8 + 1) = a4;
  id v9 = &v6[OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_nameString];
  *(void *)id v9 = a5;
  *((void *)v9 + 1) = a6;
  v11.id receiver = v6;
  v11.Class super_class = (Class)type metadata accessor for PersonalNicknameAvatarProvider();
  return [super init];
}

void PersonalNicknameAvatarProvider.init()()
{
}

id PersonalNicknameAvatarProvider.__deallocating_deinit()
{
  return PersonalNicknameMenuView.__deallocating_deinit(type metadata accessor for PersonalNicknameAvatarProvider);
}

id PersonalNicknameMenuView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.id receiver = v1;
  v3.Class super_class = (Class)a1();
  [super dealloc];
}

void PersonalNicknameAvatarProvider.generateAvatarImage(of:imageHandler:)(void (*a1)(void), double a2, double a3)
{
  double v5 = a3;
  double v6 = a2;
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) == 0 && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    double v5 = 100.0;
    double v6 = 100.0;
  }
  id v7 = [self mainScreen];
  [v7 scale];
  double v9 = v8;

  id v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData);
  unint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData + 8);
  if (v11 >> 60 == 15)
  {
    id v12 = 0;
    id v13 = 0;
  }
  else
  {
    uint64_t v14 = *v10;
    id v15 = objc_allocWithZone((Class)UIImage);
    outlined copy of Data._Representation(v14, v11);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v13 = [v15 initWithData:isa scale:v9];
    outlined consume of Data?(v14, v11);

    if (v13)
    {
      id v13 = v13;
      v20.width = v6;
      v20.CGFloat height = v5;
      UIGraphicsBeginImageContextWithOptions(v20, 0, v9);
      [v13 drawInRect:0.0, 0.0, v6, v5];
      id v17 = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();

      id v12 = v17;
    }
    else
    {
      id v12 = 0;
    }
  }
  objc_super v18 = v12;
  a1();
}

uint64_t PersonalNicknameAvatarProvider.generatePosterImage(handler:)(void (*a1)(void, void), uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v62 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_type_t v66 = (char *)v60 - v13;
  __chkstk_darwin(v12);
  id v15 = (char *)v60 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  unint64_t v25 = (char *)v60 - v24;
  if (*(void *)(v2 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_wallpaperFilePath + 8))
  {
    v60[3] = v23;
    v60[4] = v22;
    uint64_t v63 = a2;
    id v64 = a1;
    uint64_t v65 = v21;
    id v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 56);
    uint64_t v67 = v20;
    v60[6] = v26;
    v26(v15, 1, 1);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)();
    id v32 = (void *)Data.init(contentsOf:options:)();
    unint64_t v34 = v33;
    id v35 = self;
    outlined copy of Data._Representation((uint64_t)v32, v34);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id aBlock = 0;
    id v37 = [v35 unarchiveConfigurationFromData:isa error:&aBlock];

    id v38 = aBlock;
    if (v37)
    {
      id v39 = v37;
      id v40 = v38;
      unint64_t v41 = v34;
      outlined consume of Data._Representation((uint64_t)v32, v34);
      uint64_t v42 = v67;
      if (*(void *)(v2 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_nameString + 8))
      {
        swift_bridgeObjectRetain();
        NSString v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v43 = 0;
      }
      uint64_t v55 = v63;
      char v54 = v64;
      id v56 = [objc_allocWithZone((Class)TPInComingCallUISnapshotViewController) initWithConfiguration:v39 style:3 nameString:v43];

      uint64_t v57 = swift_allocObject();
      *(void *)(v57 + 16) = v54;
      *(void *)(v57 + 24) = v55;
      os_log_type_t v72 = partial apply for closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:);
      uint64_t v73 = v57;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v69 = 1107296256;
      unint64_t v70 = thunk for @escaping @callee_guaranteed (@guaranteed UIImage?, @guaranteed Error?) -> ();
      Swift::String v71 = &block_descriptor_7;
      unint64_t v58 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v56 snapshotWithOptions:0 completionBlock:v58];
      _Block_release(v58);

      outlined consume of Data._Representation((uint64_t)v32, v41);
      return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v25, v42);
    }
    else
    {
      id v44 = aBlock;
      uint64_t v45 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for nickname != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.nickname);
      swift_errorRetain();
      outlined copy of Data._Representation((uint64_t)v32, v34);
      swift_errorRetain();
      id v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 136315394;
        id aBlock = v32;
        uint64_t v69 = v34;
        outlined copy of Data._Representation((uint64_t)v32, v34);
        uint64_t v61 = v25;
        uint64_t v50 = String.init<A>(reflecting:)();
        id aBlock = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation((uint64_t)v32, v34);
        outlined consume of Data._Representation((uint64_t)v32, v34);
        *(_WORD *)(v49 + 12) = 2080;
        id aBlock = v45;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v52 = String.init<A>(reflecting:)();
        id aBlock = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v74);
        unint64_t v25 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Could not unarchive configuration from data: %s error: %s", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined consume of Data._Representation((uint64_t)v32, v34);
        outlined consume of Data._Representation((uint64_t)v32, v34);
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v59 = v67;
      swift_errorRetain();
      v64(0, v45);
      swift_errorRelease();
      swift_errorRelease();
      outlined consume of Data._Representation((uint64_t)v32, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v25, v59);
    }
  }
  else
  {
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.nickname);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Could not find a wallpaperFilePath", v30, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void, void))a1)(0, 0);
  }
}

uint64_t closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.nickname);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not snapshot TPInComingCallUISnapshotViewController with error: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a3(a1, a2);
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIImage?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void specialized PersonalNicknameMenuView.getPersonalNickname(completion:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = self;
  id v4 = a1;
  id v5 = [v3 sharedController];
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned __int8 v7 = [v5 hasListenerForID:v6];

  if ((v7 & 1) == 0)
  {
    id v8 = [v3 sharedController];
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 addListenerID:v9 capabilities:kFZListenerCapAccounts];
  }
  uint64_t v10 = self;
  id v11 = [v10 sharedInstance];
  id v12 = [v11 personalNickname];

  if (v12)
  {
    if (one-time initialization token for nickname != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.nickname);
    id v14 = v12;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      aBlock[0] = v14;
      id v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v12;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reading the personal nick name from cache %@", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v22 = *(void **)&v4[(unint64_t)nicknamesDefaults.value._kvo_];
    *(void *)&v4[(unint64_t)nicknamesDefaults.value._kvo_] = v12;
    id v19 = v14;

    PersonalNicknameMenuView.personalNickname.didset();
    swift_release();
  }
  else
  {
    id v19 = [v10 sharedInstance];
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = partial apply for closure #1 in PersonalNicknameMenuView.setNickname();
    *(void *)(v20 + 24) = v2;
    aBlock[4] = partial apply for closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:);
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IMNickname?) -> ();
    aBlock[3] = &block_descriptor_41;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v19 fetchPersonalNicknameWithCompletion:v21];
    _Block_release(v21);
    swift_release();
  }
}

void specialized PersonalNicknameMenuView.init(coder:)()
{
  *(void *)&v0[(unint64_t)nicknamesDefaults.value._kvo_] = 0;
  *(void *)&v0[(unint64_t)nicknamesDefaults.value._identifier_] = 0;
  *(void *)&v0[(unint64_t)nicknamesDefaults.value._container_] = 1;
  *(void *)&v0[*(void *)&nicknamesDefaults.is_nil] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___nameLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___subtitleLabel] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___labelStackView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___containerStackView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView____lazy_storage___tapRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView_personalNicknameMenuViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PersonalNicknameMenuView.didTap(sender:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for nickname != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.nickname);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received tap on nickname menu view", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = v1 + OBJC_IVAR____TtC11MobilePhone24PersonalNicknameMenuView_personalNicknameMenuViewDelegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for PersonalNicknameNameProvider()
{
  return self;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t type metadata accessor for PersonalNicknameAvatarProvider()
{
  return self;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10014D36C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in PersonalNicknameAvatarProvider.generatePosterImage(handler:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext;
  if (!lazy protocol witness table cache variable for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalNicknameMenuViewDisplayContext and conformance PersonalNicknameMenuViewDisplayContext);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PersonalNicknameMenuViewDisplayContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10014D4D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonalNicknameMenuViewDisplayContext()
{
  return &type metadata for PersonalNicknameMenuViewDisplayContext;
}

ValueMetadata *type metadata accessor for Layout()
{
  return &type metadata for Layout;
}

void specialized PersonalNicknameAvatarProvider.generateAvatarImage(of:imageHandler:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v6 = 100.0;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v7 = a4;
  }
  else {
    double v7 = 100.0;
  }
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v6 = a3;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v8 = a4;
  }
  else {
    double v8 = v7;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    double v9 = a3;
  }
  else {
    double v9 = v6;
  }
  id v10 = [self mainScreen];
  [v10 scale];
  CGFloat v12 = v11;

  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData);
  unint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC11MobilePhone30PersonalNicknameAvatarProvider_imageData + 8);
  if (v14 >> 60 == 15
    || (uint64_t v15 = *v13,
        id v16 = objc_allocWithZone((Class)UIImage),
        outlined copy of Data._Representation(v15, v14),
        Class isa = Data._bridgeToObjectiveC()().super.isa,
        id v18 = [v16 initWithData:isa scale:v12],
        outlined consume of Data?(v15, v14),
        isa,
        !v18))
  {
    id v19 = 0;
    id v20 = 0;
  }
  else
  {
    id v20 = v18;
    v22.width = v9;
    v22.CGFloat height = v8;
    UIGraphicsBeginImageContextWithOptions(v22, 0, v12);
    [v20 drawInRect:0.0, 0.0, v9, v8];
    id v19 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
  }
  (*(void (**)(uint64_t, UIImage *, void))(a2 + 16))(a2, v19, 0);
}

uint64_t sub_10014D6D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in PersonalNicknameMenuView.setNickname()(void *a1)
{
  closure #1 in PersonalNicknameMenuView.setNickname()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:)(void *a1)
{
  return closure #1 in PersonalNicknameMenuView.getPersonalNickname(completion:)(a1, *(uint64_t (**)(void *))(v1 + 16));
}

uint64_t UnsafeTransfer.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t UnsafeTransfer.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UnsafeTransfer.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t type metadata instantiation function for UnsafeTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata completion function for UnsafeTransfer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnsafeTransfer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for UnsafeTransfer(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for UnsafeTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for UnsafeTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for UnsafeTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for UnsafeTransfer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsafeTransfer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for UnsafeTransfer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x10014DDFCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        id v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for UnsafeTransfer()
{
  return __swift_instantiateGenericMetadata();
}

id VisualTranscriptionMessage.__allocating_init(vmTranscript:)(uint64_t a1)
{
  return VisualTranscriptionMessage.__allocating_init(vmTranscript:)(a1, &OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript);
}

id VisualTranscriptionMessage.attributedText.getter()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0x60))();
  id v1 = objc_allocWithZone((Class)NSAttributedString);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithString:v2];

  return v3;
}

uint64_t VisualTranscriptionMessage.text.getter()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript) transcriptionString];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id VisualTranscriptionMessage.confidenceRating.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript) confidenceRating];
}

double VisualTranscriptionMessage.confidence.getter()
{
  [*(id *)(v0 + OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript) confidence];
  return v1;
}

id VisualTranscriptionMessage.init(vmTranscript:)(uint64_t a1)
{
  return VisualTranscriptionMessage.init(vmTranscript:)(a1, &OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript, type metadata accessor for VisualTranscriptionMessage);
}

uint64_t type metadata accessor for VisualTranscriptionMessage()
{
  return self;
}

void VisualTranscriptionMessage.init()()
{
}

id VisualTranscriptionMessage.__deallocating_deinit()
{
  return VisualTranscriptionMessage.__deallocating_deinit(type metadata accessor for VisualTranscriptionMessage);
}

id VisualMessage.vmMessage.getter()
{
  return *(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage);
}

id VisualMessage.id.getter()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) identifier];
  uint64_t v2 = (objc_class *)type metadata accessor for MessageID(0);
  id v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR___MPMessageID_value] = v1;
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v5.id receiver = v3;
  v5.Class super_class = v2;
  return [super init];
}

uint64_t VisualMessage.provider.getter()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 providerManager];

  id v2 = [v1 telephonyProvider];
  id v3 = [v2 identifier];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t VisualMessage.callUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return VisualMessage.callUUID.getter((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

id VisualMessage.senderHandle.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage);
  id v2 = [v1 senderDestinationID];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = self;
  id v5 = [v1 senderISOCountryCode];
  id v6 = [v4 normalizedPhoneNumberHandleForValue:v3 isoCountryCode:v5];

  return v6;
}

uint64_t VisualMessage.senderDestinationID.getter()
{
  return VisualMessage.senderDestinationID.getter((SEL *)&selRef_senderDestinationID);
}

uint64_t VisualMessage.senderISOCountryCode.getter()
{
  return VisualMessage.senderDestinationID.getter((SEL *)&selRef_senderISOCountryCode);
}

uint64_t VisualMessage.receiverDestinationID.getter()
{
  return VisualMessage.senderDestinationID.getter((SEL *)&selRef_receiverDestinationID);
}

uint64_t VisualMessage.receiverISOCountryCode.getter()
{
  return VisualMessage.senderDestinationID.getter((SEL *)&selRef_receiverISOCountryCode);
}

id @objc VisualMessage.senderDestinationID.getter(char *a1, uint64_t a2, SEL *a3)
{
  uint64_t v4 = *(void **)&a1[OBJC_IVAR___MPVisualMessage_vmMessage];
  id v5 = a1;
  id v6 = [v4 *a3];
  if (v6)
  {
    unsigned int v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {

    NSString v8 = 0;
  }

  return v8;
}

uint64_t VisualMessage.callbackDestinationID.getter()
{
  return VisualMessage.senderDestinationID.getter((SEL *)&selRef_callbackDestinationID);
}

uint64_t VisualMessage.senderDestinationID.getter(SEL *a1)
{
  id v2 = [*(id *)(v1 + OBJC_IVAR___MPVisualMessage_vmMessage) *a1];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t VisualMessage.folder.getter()
{
  if ((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xF0))()) {
    return 0;
  }
  id v2 = *(void **)((char *)v0 + OBJC_IVAR___MPVisualMessage_vmMessage);
  if ([v2 isBlocked]) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = 1;
  }
  if ([v2 isTrashed]) {
    return 2;
  }
  else {
    return v3;
  }
}

id VisualMessage.read.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) isRead];
}

void VisualMessage.date.getter()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) date];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

id VisualMessage.isTranscriptionAvailable.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) isTranscriptionAvailable];
}

id VisualMessage.duration.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) duration];
}

id VisualMessage.isTranscriptionRated.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) isTranscriptionRated];
}

BOOL VisualMessage.isTranscribing.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) transcriptionState] == (id)2;
}

BOOL VisualMessage.transcriptionAttempted.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) transcriptionState] == (id)3;
}

id VisualMessage.transcript.getter()
{
  id result = [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) transcript];
  if (result)
  {
    id v2 = result;
    uint64_t v3 = (objc_class *)type metadata accessor for VisualTranscriptionMessage();
    uint64_t v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR___MPVisualTranscriptionMessage_vmTranscript] = v2;
    v5.id receiver = v4;
    v5.Class super_class = v3;
    return [super init];
  }
  return result;
}

id VisualMessage.isDeleted.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) isDeleted];
}

uint64_t VisualMessage.dataURL.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + OBJC_IVAR___MPVisualMessage_vmMessage) dataURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = type metadata accessor for URL();
  objc_super v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, 0, 1, v4);
}

uint64_t VisualMessage.thumbnailURL.getter@<X0>(uint64_t a1@<X8>)
{
  return VisualMessage.callUUID.getter((uint64_t (*)(void))&type metadata accessor for URL, a1);
}

uint64_t VisualMessage.callUUID.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

id VisualMessage.isDataAvailable.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPVisualMessage_vmMessage) isDataAvailable];
}

id VisualMessage.__allocating_init(vmMessage:)(uint64_t a1)
{
  return VisualTranscriptionMessage.__allocating_init(vmTranscript:)(a1, &OBJC_IVAR___MPVisualMessage_vmMessage);
}

id VisualTranscriptionMessage.__allocating_init(vmTranscript:)(uint64_t a1, void *a2)
{
  objc_super v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[*a2] = a1;
  v7.id receiver = v5;
  v7.Class super_class = v2;
  return [super init];
}

id VisualMessage.init(vmMessage:)(uint64_t a1)
{
  return VisualTranscriptionMessage.init(vmTranscript:)(a1, &OBJC_IVAR___MPVisualMessage_vmMessage, type metadata accessor for VisualMessage);
}

id VisualTranscriptionMessage.init(vmTranscript:)(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  *(void *)&v3[*a2] = a1;
  v5.id receiver = v3;
  v5.Class super_class = (Class)a3();
  return [super init];
}

id @objc VisualTranscriptionMessage.init(vmTranscript:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(void))
{
  *(void *)&a1[*a4] = a3;
  v8.id receiver = a1;
  v8.Class super_class = (Class)a5();
  id v6 = a3;
  return [super init];
}

Swift::Bool __swiftcall VisualMessage.shouldBeMarkedAsRead(for:)(Swift::Double a1)
{
  *(float *)&a1 = a1;
  return [*(id *)(v1 + OBJC_IVAR___MPVisualMessage_vmMessage) shouldMarkAsReadForPlaybackCurrentTime:a1];
}

CNContact_optional __swiftcall VisualMessage.getContact(using:with:)(CNContactStore using, Swift::OpaquePointer with)
{
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR___MPVisualMessage_vmMessage);
  specialized _arrayForceCast<A, B>(_:)((unint64_t)with._rawValue);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = (objc_class *)[v4 contactUsingContactStore:using.super.isa withKeysToFetch:isa];

  objc_super v8 = v6;
  result.value.super.Class isa = v8;
  result.Swift::Bool is_nil = v7;
  return result;
}

Swift::String_optional __swiftcall VisualMessage.getDisplayName(using:)(CNContactStore using)
{
  id v2 = [*(id *)(v1 + OBJC_IVAR___MPVisualMessage_vmMessage) displayNameUsingContactStore:using.super.isa];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t v7 = v4;
  objc_super v8 = (void *)v6;
  result.value._id object = v8;
  result.value._uint64_t countAndFlagsBits = v7;
  return result;
}

void VisualMessage.init()()
{
}

id VisualMessage.__deallocating_deinit()
{
  return VisualTranscriptionMessage.__deallocating_deinit(type metadata accessor for VisualMessage);
}

id VisualTranscriptionMessage.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.id receiver = v1;
  v3.Class super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for VisualMessage()
{
  return self;
}

uint64_t one-time initialization function for tipUserInfo()
{
  type metadata accessor for MPRecentsTableViewController.RecentsUserInfo();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  static MPRecentsTableViewController.tipUserInfo = (_UNKNOWN *)result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for MPFavoritesTableViewController.FavoritesUserInfo();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  static MPFavoritesTableViewController.tipUserInfo = (_UNKNOWN *)result;
  return result;
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[42] = a5;
  v6[43] = a6;
  v6[41] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[44] = v7;
  v6[45] = *(void *)(v7 - 8);
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[50] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[51] = v8;
  v6[52] = *(void *)(v8 - 8);
  v6[53] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[54] = v9;
  v6[55] = *(void *)(v9 - 8);
  v6[56] = swift_task_alloc();
  v6[57] = type metadata accessor for MainActor();
  v6[58] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[59] = v11;
  v6[60] = v10;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v11, v10);
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6[42] = a5;
  v6[43] = a6;
  v6[41] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[44] = v7;
  v6[45] = *(void *)(v7 - 8);
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[50] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[51] = v8;
  v6[52] = *(void *)(v8 - 8);
  v6[53] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[54] = v9;
  v6[55] = *(void *)(v9 - 8);
  v6[56] = swift_task_alloc();
  v6[57] = type metadata accessor for MainActor();
  v6[58] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[59] = v11;
  v6[60] = v10;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v11, v10);
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6[42] = a5;
  v6[43] = a6;
  v6[41] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[44] = v7;
  v6[45] = *(void *)(v7 - 8);
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[50] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[51] = v8;
  v6[52] = *(void *)(v8 - 8);
  v6[53] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[54] = v9;
  v6[55] = *(void *)(v9 - 8);
  v6[56] = swift_task_alloc();
  v6[57] = type metadata accessor for MainActor();
  v6[58] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[59] = v11;
  v6[60] = v10;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v11, v10);
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6[42] = a5;
  v6[43] = a6;
  v6[41] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[44] = v7;
  v6[45] = *(void *)(v7 - 8);
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[50] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[51] = v8;
  v6[52] = *(void *)(v8 - 8);
  v6[53] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[54] = v9;
  v6[55] = *(void *)(v9 - 8);
  v6[56] = swift_task_alloc();
  v6[57] = type metadata accessor for MainActor();
  v6[58] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[59] = v11;
  v6[60] = v10;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v11, v10);
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6[42] = a5;
  v6[43] = a6;
  v6[41] = a4;
  uint64_t v7 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v6[44] = v7;
  v6[45] = *(void *)(v7 - 8);
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v6[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v6[50] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v6[51] = v8;
  v6[52] = *(void *)(v8 - 8);
  v6[53] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v6[54] = v9;
  v6[55] = *(void *)(v9 - 8);
  v6[56] = swift_task_alloc();
  v6[57] = type metadata accessor for MainActor();
  v6[58] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[59] = v11;
  v6[60] = v10;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v11, v10);
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  *(void *)(v0 + 488) = type metadata accessor for RecentsUnknownCallersTip();
  *(void *)(v0 + 496) = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsUnknownCallersTip and conformance RecentsUnknownCallersTip, (void (*)(uint64_t))&type metadata accessor for RecentsUnknownCallersTip);
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 584) = enum case for TPTipsHelper.Entry.Kind.recents(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 312);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(void);
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  if (*(unsigned char *)(v0 + 588) != 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 520) = Strong;
    if (Strong)
    {
      if ((*(unsigned char *)(v0 + 588) & 1) == 0)
      {
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 528) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
LABEL_19:
        v2[1] = v3;
        return static TPTipsHelper.shared.getter();
      }
      unint64_t v6 = Strong;
      uint64_t v7 = [Strong tableView];
      uint64_t v8 = [v7 tableHeaderView];

      if (v8)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v9 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

          if (v9)
          {
LABEL_17:
            (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

            goto LABEL_6;
          }
        }
        else
        {
        }
      }
      if (one-time initialization token for tipUserInfo != -1) {
        swift_once();
      }
      if (!*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
      {
        uint64_t v10 = *(void *)(v0 + 344);
        uint64_t v11 = *(void *)(v0 + 328);
        unsigned int v12 = *(_OWORD *)(v0 + 488);
        *(_OWORD *)(v0 + 200) = v12;
        uint64_t v13 = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
        int v15 = *(void *)(v13 - 8);
        id v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
        *(void *)(v0 + 544) = v16;
        *(void *)(v0 + 552) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(boxed_opaque_existential_1, v11, v13);
        uint64_t v17 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(void *)(v18 + 24) = v10;
        id v19 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
        *(void *)(v0 + 560) = TipUIView.init(_:arrowEdge:actionHandler:)();
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 568) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));
LABEL_6:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, void);
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  void (*v4)(uint64_t, void);
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void (*v16)(unint64_t, void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  long long v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, void))(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 328);
  id v26 = *(_OWORD *)(v0 + 488);
  (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 104))(*(void *)(v0 + 368), *(unsigned int *)(v0 + 584), *(void *)(v0 + 352));
  *(_OWORD *)(v0 + 40) = v26;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  v1(boxed_opaque_existential_1, v2, v26);
  uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  unint64_t v6 = v5;
  if (*(void *)(v0 + 40))
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 352);
    outlined init with take of Tip((long long *)(v0 + 16), v0 + 216);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v28 = *v6;
    void *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 216), v7, isUniquelyReferenced_nonNull_native);
    void *v6 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    outlined destroy of Locale?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    unsigned int v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    LOBYTE(v11) = v13;
    swift_bridgeObjectRelease();
    if (v11)
    {
      unsigned int v14 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 320) = *v6;
      void *v6 = 0x8000000000000000;
      if ((v14 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      int v15 = *(void *)(v0 + 360);
      id v16 = *(void (**)(unint64_t, void))(v15 + 8);
      v16(*(void *)(*(void *)(v0 + 320) + 48) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 352));
      uint64_t v17 = *(void *)(v0 + 320);
      outlined init with take of Tip((long long *)(*(void *)(v17 + 56) + 40 * v12), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v12, v17);
      void *v6 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v18 = *(void *)(v0 + 360);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      id v16 = *(void (**)(unint64_t, void))(v18 + 8);
    }
    v16(*(void *)(v0 + 368), *(void *)(v0 + 352));
    outlined destroy of Locale?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  id v19 = *(void **)(v0 + 576);
  id v20 = *(void **)(v0 + 560);
  uint64_t v21 = *(void **)(v0 + 520);
  v4(v0 + 256, 0);

  CGSize v22 = v20;
  MPRecentsTableViewController.setTipView(_:)(v20);

  uint64_t v23 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v23;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v24;
  void *v24 = v0;
  v24[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v27(v23, (uint64_t)&protocol witness table for MainActor);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(uint64_t, void *, uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  *(void *)(v0 + 488) = type metadata accessor for RecentsBrandedCallingTip();
  *(void *)(v0 + 496) = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip, (void (*)(uint64_t))&type metadata accessor for RecentsBrandedCallingTip);
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 584) = enum case for TPTipsHelper.Entry.Kind.recents(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 312);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(void);
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  if (*(unsigned char *)(v0 + 588) != 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 520) = Strong;
    if (Strong)
    {
      if ((*(unsigned char *)(v0 + 588) & 1) == 0)
      {
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 528) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
LABEL_19:
        v2[1] = v3;
        return static TPTipsHelper.shared.getter();
      }
      unint64_t v6 = Strong;
      uint64_t v7 = [Strong tableView];
      uint64_t v8 = [v7 tableHeaderView];

      if (v8)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v9 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

          if (v9)
          {
LABEL_17:
            (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

            goto LABEL_6;
          }
        }
        else
        {
        }
      }
      if (one-time initialization token for tipUserInfo != -1) {
        swift_once();
      }
      if (!*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
      {
        uint64_t v10 = *(void *)(v0 + 344);
        uint64_t v11 = *(void *)(v0 + 328);
        unsigned int v12 = *(_OWORD *)(v0 + 488);
        *(_OWORD *)(v0 + 200) = v12;
        uint64_t v13 = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
        int v15 = *(void *)(v13 - 8);
        id v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
        *(void *)(v0 + 544) = v16;
        *(void *)(v0 + 552) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(boxed_opaque_existential_1, v11, v13);
        uint64_t v17 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(void *)(v18 + 24) = v10;
        id v19 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
        *(void *)(v0 + 560) = TipUIView.init(_:arrowEdge:actionHandler:)();
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 568) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));
LABEL_6:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, void);
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  void (*v4)(uint64_t, void);
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void (*v16)(unint64_t, void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  long long v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, void))(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 328);
  id v26 = *(_OWORD *)(v0 + 488);
  (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 104))(*(void *)(v0 + 368), *(unsigned int *)(v0 + 584), *(void *)(v0 + 352));
  *(_OWORD *)(v0 + 40) = v26;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  v1(boxed_opaque_existential_1, v2, v26);
  uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  unint64_t v6 = v5;
  if (*(void *)(v0 + 40))
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 352);
    outlined init with take of Tip((long long *)(v0 + 16), v0 + 216);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v28 = *v6;
    void *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 216), v7, isUniquelyReferenced_nonNull_native);
    void *v6 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    outlined destroy of Locale?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    unsigned int v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    LOBYTE(v11) = v13;
    swift_bridgeObjectRelease();
    if (v11)
    {
      unsigned int v14 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 320) = *v6;
      void *v6 = 0x8000000000000000;
      if ((v14 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      int v15 = *(void *)(v0 + 360);
      id v16 = *(void (**)(unint64_t, void))(v15 + 8);
      v16(*(void *)(*(void *)(v0 + 320) + 48) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 352));
      uint64_t v17 = *(void *)(v0 + 320);
      outlined init with take of Tip((long long *)(*(void *)(v17 + 56) + 40 * v12), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v12, v17);
      void *v6 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v18 = *(void *)(v0 + 360);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      id v16 = *(void (**)(unint64_t, void))(v18 + 8);
    }
    v16(*(void *)(v0 + 368), *(void *)(v0 + 352));
    outlined destroy of Locale?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  id v19 = *(void **)(v0 + 576);
  id v20 = *(void **)(v0 + 560);
  uint64_t v21 = *(void **)(v0 + 520);
  v4(v0 + 256, 0);

  CGSize v22 = v20;
  MPRecentsTableViewController.setTipView(_:)(v20);

  uint64_t v23 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v23;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v24;
  void *v24 = v0;
  v24[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v27(v23, (uint64_t)&protocol witness table for MainActor);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(uint64_t, void *, uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  *(void *)(v0 + 488) = type metadata accessor for RecentsSaveAsFavoritesTip();
  *(void *)(v0 + 496) = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsSaveAsFavoritesTip and conformance RecentsSaveAsFavoritesTip, (void (*)(uint64_t))&type metadata accessor for RecentsSaveAsFavoritesTip);
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 584) = enum case for TPTipsHelper.Entry.Kind.recents(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 312);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(void);
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  if (*(unsigned char *)(v0 + 588) != 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 520) = Strong;
    if (Strong)
    {
      if ((*(unsigned char *)(v0 + 588) & 1) == 0)
      {
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 528) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
LABEL_19:
        v2[1] = v3;
        return static TPTipsHelper.shared.getter();
      }
      unint64_t v6 = Strong;
      uint64_t v7 = [Strong tableView];
      uint64_t v8 = [v7 tableHeaderView];

      if (v8)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v9 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

          if (v9)
          {
LABEL_17:
            (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

            goto LABEL_6;
          }
        }
        else
        {
        }
      }
      if (one-time initialization token for tipUserInfo != -1) {
        swift_once();
      }
      if (!*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
      {
        uint64_t v10 = *(void *)(v0 + 344);
        uint64_t v11 = *(void *)(v0 + 328);
        unsigned int v12 = *(_OWORD *)(v0 + 488);
        *(_OWORD *)(v0 + 200) = v12;
        uint64_t v13 = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
        int v15 = *(void *)(v13 - 8);
        id v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
        *(void *)(v0 + 544) = v16;
        *(void *)(v0 + 552) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(boxed_opaque_existential_1, v11, v13);
        uint64_t v17 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(void *)(v18 + 24) = v10;
        id v19 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
        *(void *)(v0 + 560) = TipUIView.init(_:arrowEdge:actionHandler:)();
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 568) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));
LABEL_6:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, void);
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  void (*v4)(uint64_t, void);
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void (*v16)(unint64_t, void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  long long v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, void))(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 328);
  id v26 = *(_OWORD *)(v0 + 488);
  (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 104))(*(void *)(v0 + 368), *(unsigned int *)(v0 + 584), *(void *)(v0 + 352));
  *(_OWORD *)(v0 + 40) = v26;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  v1(boxed_opaque_existential_1, v2, v26);
  uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  unint64_t v6 = v5;
  if (*(void *)(v0 + 40))
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 352);
    outlined init with take of Tip((long long *)(v0 + 16), v0 + 216);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v28 = *v6;
    void *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 216), v7, isUniquelyReferenced_nonNull_native);
    void *v6 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    outlined destroy of Locale?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    unsigned int v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    LOBYTE(v11) = v13;
    swift_bridgeObjectRelease();
    if (v11)
    {
      unsigned int v14 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 320) = *v6;
      void *v6 = 0x8000000000000000;
      if ((v14 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      int v15 = *(void *)(v0 + 360);
      id v16 = *(void (**)(unint64_t, void))(v15 + 8);
      v16(*(void *)(*(void *)(v0 + 320) + 48) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 352));
      uint64_t v17 = *(void *)(v0 + 320);
      outlined init with take of Tip((long long *)(*(void *)(v17 + 56) + 40 * v12), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v12, v17);
      void *v6 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v18 = *(void *)(v0 + 360);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      id v16 = *(void (**)(unint64_t, void))(v18 + 8);
    }
    v16(*(void *)(v0 + 368), *(void *)(v0 + 352));
    outlined destroy of Locale?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  id v19 = *(void **)(v0 + 576);
  id v20 = *(void **)(v0 + 560);
  uint64_t v21 = *(void **)(v0 + 520);
  v4(v0 + 256, 0);

  CGSize v22 = v20;
  MPRecentsTableViewController.setTipView(_:)(v20);

  uint64_t v23 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v23;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v24;
  void *v24 = v0;
  v24[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v27(v23, (uint64_t)&protocol witness table for MainActor);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(uint64_t, void *, uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  *(void *)(v0 + 488) = type metadata accessor for RecentsSaveAsContactTip();
  *(void *)(v0 + 496) = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsSaveAsContactTip and conformance RecentsSaveAsContactTip, (void (*)(uint64_t))&type metadata accessor for RecentsSaveAsContactTip);
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 584) = enum case for TPTipsHelper.Entry.Kind.recents(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 312);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(void);
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  if (*(unsigned char *)(v0 + 588) != 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 520) = Strong;
    if (Strong)
    {
      if ((*(unsigned char *)(v0 + 588) & 1) == 0)
      {
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 528) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
LABEL_19:
        v2[1] = v3;
        return static TPTipsHelper.shared.getter();
      }
      unint64_t v6 = Strong;
      uint64_t v7 = [Strong tableView];
      uint64_t v8 = [v7 tableHeaderView];

      if (v8)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v9 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

          if (v9)
          {
LABEL_17:
            (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

            goto LABEL_6;
          }
        }
        else
        {
        }
      }
      if (one-time initialization token for tipUserInfo != -1) {
        swift_once();
      }
      if (!*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
      {
        uint64_t v10 = *(void *)(v0 + 344);
        uint64_t v11 = *(void *)(v0 + 328);
        unsigned int v12 = *(_OWORD *)(v0 + 488);
        *(_OWORD *)(v0 + 200) = v12;
        uint64_t v13 = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
        int v15 = *(void *)(v13 - 8);
        id v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
        *(void *)(v0 + 544) = v16;
        *(void *)(v0 + 552) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(boxed_opaque_existential_1, v11, v13);
        uint64_t v17 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(void *)(v18 + 24) = v10;
        id v19 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
        *(void *)(v0 + 560) = TipUIView.init(_:arrowEdge:actionHandler:)();
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 568) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));
LABEL_6:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, void);
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  void (*v4)(uint64_t, void);
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void (*v16)(unint64_t, void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  long long v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, void))(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 328);
  id v26 = *(_OWORD *)(v0 + 488);
  (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 104))(*(void *)(v0 + 368), *(unsigned int *)(v0 + 584), *(void *)(v0 + 352));
  *(_OWORD *)(v0 + 40) = v26;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  v1(boxed_opaque_existential_1, v2, v26);
  uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  unint64_t v6 = v5;
  if (*(void *)(v0 + 40))
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 352);
    outlined init with take of Tip((long long *)(v0 + 16), v0 + 216);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v28 = *v6;
    void *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 216), v7, isUniquelyReferenced_nonNull_native);
    void *v6 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    outlined destroy of Locale?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    unsigned int v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    LOBYTE(v11) = v13;
    swift_bridgeObjectRelease();
    if (v11)
    {
      unsigned int v14 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 320) = *v6;
      void *v6 = 0x8000000000000000;
      if ((v14 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      int v15 = *(void *)(v0 + 360);
      id v16 = *(void (**)(unint64_t, void))(v15 + 8);
      v16(*(void *)(*(void *)(v0 + 320) + 48) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 352));
      uint64_t v17 = *(void *)(v0 + 320);
      outlined init with take of Tip((long long *)(*(void *)(v17 + 56) + 40 * v12), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v12, v17);
      void *v6 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v18 = *(void *)(v0 + 360);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      id v16 = *(void (**)(unint64_t, void))(v18 + 8);
    }
    v16(*(void *)(v0 + 368), *(void *)(v0 + 352));
    outlined destroy of Locale?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  id v19 = *(void **)(v0 + 576);
  id v20 = *(void **)(v0 + 560);
  uint64_t v21 = *(void **)(v0 + 520);
  v4(v0 + 256, 0);

  CGSize v22 = v20;
  MPRecentsTableViewController.setTipView(_:)(v20);

  uint64_t v23 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v23;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v24;
  void *v24 = v0;
  v24[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v27(v23, (uint64_t)&protocol witness table for MainActor);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(uint64_t, void *, uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 408);
  *(void *)(v0 + 488) = type metadata accessor for LiveVoicemailTip();
  *(void *)(v0 + 496) = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip((unint64_t *)&lazy protocol witness table cache variable for type LiveVoicemailTip and conformance LiveVoicemailTip, (void (*)(uint64_t))&type metadata accessor for LiveVoicemailTip);
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 584) = enum case for TPTipsHelper.Entry.Kind.recents(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                        + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v5;
  *unint64_t v5 = v0;
  v5[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v7(v4, &protocol witness table for MainActor, v0 + 312);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(void);
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  if (*(unsigned char *)(v0 + 588) != 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 520) = Strong;
    if (Strong)
    {
      if ((*(unsigned char *)(v0 + 588) & 1) == 0)
      {
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 528) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
LABEL_19:
        v2[1] = v3;
        return static TPTipsHelper.shared.getter();
      }
      unint64_t v6 = Strong;
      uint64_t v7 = [Strong tableView];
      uint64_t v8 = [v7 tableHeaderView];

      if (v8)
      {
        type metadata accessor for TPTipHeaderView();
        if (swift_dynamicCastClass())
        {
          uint64_t v9 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

          if (v9)
          {
LABEL_17:
            (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

            goto LABEL_6;
          }
        }
        else
        {
        }
      }
      if (one-time initialization token for tipUserInfo != -1) {
        swift_once();
      }
      if (!*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
      {
        uint64_t v10 = *(void *)(v0 + 344);
        uint64_t v11 = *(void *)(v0 + 328);
        unsigned int v12 = *(_OWORD *)(v0 + 488);
        *(_OWORD *)(v0 + 200) = v12;
        uint64_t v13 = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
        int v15 = *(void *)(v13 - 8);
        id v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
        *(void *)(v0 + 544) = v16;
        *(void *)(v0 + 552) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v16(boxed_opaque_existential_1, v11, v13);
        uint64_t v17 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(void *)(v18 + 24) = v10;
        id v19 = objc_allocWithZone((Class)type metadata accessor for TipUIView());
        *(void *)(v0 + 560) = TipUIView.init(_:arrowEdge:actionHandler:)();
        type metadata accessor for TPTipsHelper();
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v0 + 568) = v2;
        *uint64_t v2 = v0;
        uint64_t v3 = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));
LABEL_6:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void);
  uint64_t v25;

  uint64_t v1 = *(void **)(v0 + 536);
  uint64_t v2 = *(unsigned int *)(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 352);
  unint64_t v5 = *(void *)(v0 + 360);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104))(v3, v2, v4);
  unint64_t v6 = dispatch thunk of TPTipsHelper.currentTip.getter();

  if (*(void *)(v6 + 16)
    && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 376)), (v8 & 1) != 0))
  {
    outlined init with copy of Tip(*(void *)(v6 + 56) + 40 * v7, v0 + 136);
  }
  else
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 360);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  if (!*(void *)(v0 + 160))
  {
    id v16 = *(void **)(v0 + 520);
    (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

    outlined destroy of Locale?(v0 + 136, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    goto LABEL_14;
  }
  outlined init with take of Tip((long long *)(v0 + 136), v0 + 96);
  __swift_project_boxed_opaque_existential_0((void *)(v0 + 96), *(void *)(v0 + 120));
  unsigned int v12 = dispatch thunk of Tip.id.getter();
  unsigned int v14 = v13;
  if (v12 == dispatch thunk of Tip.id.getter() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      CGSize v22 = *(void **)(v0 + 520);
      (*(void (**)(void, void))(*(void *)(v0 + 440) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

      goto LABEL_13;
    }
  }
  id v18 = *(void **)(v0 + 520);
  id v20 = *(void *)(v0 + 440);
  id v19 = *(void *)(v0 + 448);
  uint64_t v21 = *(void *)(v0 + 432);
  MPRecentsTableViewController.setTipView(_:)(0);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
LABEL_13:
  __swift_destroy_boxed_opaque_existential_0(v0 + 96);
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, void);
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  void (*v4)(uint64_t, void);
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void (*v16)(unint64_t, void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  long long v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, void))(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 328);
  id v26 = *(_OWORD *)(v0 + 488);
  (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 104))(*(void *)(v0 + 368), *(unsigned int *)(v0 + 584), *(void *)(v0 + 352));
  *(_OWORD *)(v0 + 40) = v26;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  v1(boxed_opaque_existential_1, v2, v26);
  uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  unint64_t v6 = v5;
  if (*(void *)(v0 + 40))
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 352);
    outlined init with take of Tip((long long *)(v0 + 16), v0 + 216);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v28 = *v6;
    void *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 216), v7, isUniquelyReferenced_nonNull_native);
    void *v6 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    outlined destroy of Locale?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    unsigned int v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    LOBYTE(v11) = v13;
    swift_bridgeObjectRelease();
    if (v11)
    {
      unsigned int v14 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 320) = *v6;
      void *v6 = 0x8000000000000000;
      if ((v14 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      int v15 = *(void *)(v0 + 360);
      id v16 = *(void (**)(unint64_t, void))(v15 + 8);
      v16(*(void *)(*(void *)(v0 + 320) + 48) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 352));
      uint64_t v17 = *(void *)(v0 + 320);
      outlined init with take of Tip((long long *)(*(void *)(v17 + 56) + 40 * v12), v0 + 56);
      specialized _NativeDictionary._delete(at:)(v12, v17);
      void *v6 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v18 = *(void *)(v0 + 360);
      *(_OWORD *)(v0 + 56) = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      id v16 = *(void (**)(unint64_t, void))(v18 + 8);
    }
    v16(*(void *)(v0 + 368), *(void *)(v0 + 352));
    outlined destroy of Locale?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  id v19 = *(void **)(v0 + 576);
  id v20 = *(void **)(v0 + 560);
  uint64_t v21 = *(void **)(v0 + 520);
  v4(v0 + 256, 0);

  CGSize v22 = v20;
  MPRecentsTableViewController.setTipView(_:)(v20);

  uint64_t v23 = static MainActor.shared.getter();
  *(void *)(v0 + 504) = v23;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                 + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v24;
  void *v24 = v0;
  v24[1] = specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:);
  return v27(v23, (uint64_t)&protocol witness table for MainActor);
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 588) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 588) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 588) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 588) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 588) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 480);
  uint64_t v4 = *(void *)(v2 + 472);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

void MPRecentsTableViewController.setTipView(_:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [v1 tableView];
  id v5 = [v4 tableHeaderView];

  if (v5)
  {
    type metadata accessor for TPTipHeaderView();
    if (swift_dynamicCastClass())
    {
      uint64_t v6 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

      if ((a1 != 0) != (v6 == 0)) {
        return;
      }
      goto LABEL_7;
    }
  }
  if (!a1) {
    return;
  }
LABEL_7:
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.mobilePhone);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Showing Tip in RecentsTableViewController", v10, 2u);
    swift_slowDealloc();
  }

  id v11 = [v2 tableView];
  id v60 = v11;
  if (a1)
  {
    BOOL v12 = 0;
    goto LABEL_20;
  }
  id v13 = [v2 tableView];
  id v14 = [v13 tableHeaderView];

  if (!v14) {
    goto LABEL_18;
  }
  type metadata accessor for TPTipHeaderView();
  uint64_t v15 = swift_dynamicCastClass();
  BOOL v12 = v15 != 0;
  if (v15)
  {
    uint64_t v16 = dispatch thunk of TPTipHeaderView.hostingView.getter();

    if (v16)
    {
      id v14 = (id)v16;
      goto LABEL_17;
    }
LABEL_18:
    BOOL v12 = 0;
    goto LABEL_19;
  }
LABEL_17:

LABEL_19:
  id v11 = v60;
LABEL_20:
  [v11 contentOffset];
  double v18 = v17;
  double v20 = v19;
  if (!a1)
  {
    if (!v12) {
      goto LABEL_39;
    }
LABEL_24:
    id v21 = [v2 tableView];
    id v22 = [v21 tableHeaderView];

    if (v22)
    {
      type metadata accessor for TPTipHeaderView();
      if (swift_dynamicCastClass())
      {
        uint64_t v23 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

        goto LABEL_29;
      }
    }
    uint64_t v23 = 0;
LABEL_29:
    id v24 = [v23 superview];

    if (!v24)
    {
      [v60 setContentOffset:v18, v20];
      [v60 setTableHeaderView:0];
      goto LABEL_39;
    }
    goto LABEL_30;
  }
  if (v12) {
    goto LABEL_24;
  }
LABEL_30:
  unint64_t v25 = (objc_class *)type metadata accessor for TPTipHeaderView();
  static TPTipHeaderView.verticalInsetTotal.getter();
  if (a1)
  {
    double v59 = v18;
    id v26 = a1;
    id v27 = [v2 view];
    if (!v27)
    {
      __break(1u);
      return;
    }
    id v28 = v27;
    CGFloat y = CGRectZero.origin.y;
    CGFloat height = CGRectZero.size.height;
    [v27 bounds];
    CGFloat v32 = v31;
    CGFloat v34 = v33;
    CGFloat v36 = v35;
    CGFloat v38 = v37;

    v68.origin.x = v32;
    v68.origin.CGFloat y = v34;
    v68.size.width = v36;
    v68.size.CGFloat height = v38;
    CGFloat Width = CGRectGetWidth(v68);
    [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
    v69.origin.x = CGRectZero.origin.x;
    v69.origin.CGFloat y = y;
    v69.size.width = Width;
    v69.size.CGFloat height = height;
    CGRectGetWidth(v69);
    PHVoicemailInboxListViewController.refreshTableHeaderView()();
    double v41 = v40;
    [v26 bounds];
    if (v41 != CGRectGetWidth(v70))
    {
      [v26 bounds];
      [v26 setBounds:];
    }
    LODWORD(v42) = 1148846080;
    LODWORD(v43) = 1132068864;
    [v26 systemLayoutSizeFittingSize:v41 withHorizontalFittingPriority:0.0 verticalFittingPriority:v42];
    [v60 separatorInset];
    id v44 = objc_allocWithZone(v25);
    uint64_t v45 = (void *)TPTipHeaderView.init(frame:separatorInset:)();
    id v58 = v26;
    dispatch thunk of TPTipHeaderView.hostingView.setter();
    TPTipHeaderView.displaysBottomSeparator.setter();
    [v60 setTableHeaderView:v45];
    [v60 setContentOffset:v59, v20];

    uint64_t v46 = v58;
    goto LABEL_40;
  }
  id v47 = [v60 tableHeaderView];
  if (v47)
  {
    os_log_type_t v48 = v47;
    CGFloat v49 = CGSizeZero.height;
    [v47 setAlpha:1.0];
    uint64_t v50 = self;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v48;
    *(void *)(v51 + 24) = v60;
    *(double *)(v51 + 32) = v18;
    *(double *)(v51 + 40) = v20;
    *(CGFloat *)(v51 + 48) = CGSizeZero.width;
    *(CGFloat *)(v51 + 56) = v49;
    uint64_t v65 = partial apply for specialized closure #1 in PHVoicemailInboxListViewController.setTipView(_:);
    uint64_t v66 = v51;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256;
    uint64_t v63 = thunk for @escaping @callee_guaranteed () -> ();
    id v64 = &block_descriptor_8;
    uint64_t v52 = _Block_copy(&aBlock);
    id v53 = v48;
    id v54 = v60;
    swift_release();
    uint64_t v55 = swift_allocObject();
    *(unsigned char *)(v55 + 16) = v12;
    *(void *)(v55 + 24) = v54;
    *(double *)(v55 + 32) = v18;
    *(double *)(v55 + 40) = v20;
    uint64_t v65 = partial apply for closure #2 in PHVoicemailInboxListViewController.setTipView(_:);
    uint64_t v66 = v55;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256;
    uint64_t v63 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    id v64 = &block_descriptor_47;
    id v56 = _Block_copy(&aBlock);
    id v57 = v54;
    swift_release();
    [v50 animateWithDuration:v52 animations:v56 completion:0.33];

    _Block_release(v56);
    _Block_release(v52);

    return;
  }
LABEL_39:
  uint64_t v46 = v60;
LABEL_40:
}

void closure #1 in closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (one-time initialization token for mobilePhoneTips != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhoneTips);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)id v5 = 136315138;
      uint64_t v6 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Presenting LiveVoicemailWelcomeViewController", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v8 = objc_allocWithZone((Class)type metadata accessor for LiveVoicemailWelcomeViewController());
    id v9 = v1;
    uint64_t v10 = specialized LiveVoicemailWelcomeViewController.init(delegate:)((uint64_t)v9, v8);
    [v9 presentViewController:v10 animated:1 completion:0];
  }
}

uint64_t specialized MPRecentsTableViewController.observePopoverTip<A>(_:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CallHistorySearchTip();
  v2[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[22] = v6;
  v2[23] = *(void *)(v6 + 64);
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[25] = swift_task_alloc();
  v2[26] = type metadata accessor for MainActor();
  v2[27] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[28] = v8;
  v2[29] = v7;
  return _swift_task_switch(specialized MPRecentsTableViewController.observePopoverTip<A>(_:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  uint64_t v4 = *(void *)(v2 + 224);
  return _swift_task_switch(specialized MPRecentsTableViewController.observePopoverTip<A>(_:), v4, v3);
}

uint64_t specialized MPRecentsTableViewController.observePopoverTip<A>(_:)()
{
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[22];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[30] = v9;
  v0[31] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v11, v2, v4);
  *(void *)(v12 + ((v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
  swift_release();
  v0[32] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v12);
  type metadata accessor for TPTipsHelper();
  id v13 = (void *)swift_task_alloc();
  v0[33] = v13;
  *id v13 = v0;
  v13[1] = specialized MPRecentsTableViewController.observePopoverTip<A>(_:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  id v13 = (void *)v0[34];
  uint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[30];
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[19];
  id v14 = v0[18];
  uint64_t v4 = v0[17];
  unint64_t v11 = v0[16];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.recents(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type CallHistorySearchTip and conformance CallHistorySearchTip, (void (*)(uint64_t))&type metadata accessor for CallHistorySearchTip);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[65] = a5;
  v5[64] = a4;
  uint64_t v6 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v5[66] = v6;
  v5[67] = *(void *)(v6 - 8);
  v5[68] = swift_task_alloc();
  v5[69] = swift_task_alloc();
  v5[70] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  v5[71] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Tips.Status();
  v5[72] = v7;
  v5[73] = *(void *)(v7 - 8);
  v5[74] = swift_task_alloc();
  v5[75] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v5[76] = swift_task_alloc();
  v5[77] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v5[78] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v5[79] = v8;
  v5[80] = *(void *)(v8 - 8);
  v5[81] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v5[82] = v9;
  v5[83] = *(void *)(v9 - 8);
  v5[84] = swift_task_alloc();
  v5[85] = swift_task_alloc();
  v5[86] = type metadata accessor for MainActor();
  v5[87] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[88] = v11;
  v5[89] = v10;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v11, v10);
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 640);
  uint64_t v3 = *(void *)(v0 + 632);
  *(void *)(v0 + 720) = type metadata accessor for CallHistorySearchTip();
  *(void *)(v0 + 728) = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type CallHistorySearchTip and conformance CallHistorySearchTip, (void (*)(uint64_t))&type metadata accessor for CallHistorySearchTip);
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  *(_DWORD *)(v0 + 920) = enum case for TPTipsHelper.Entry.Kind.recents(_:);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 736) = v4;
  if (v4)
  {
    swift_getObjectType();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(v0 + 752) = v7;
  *(void *)(v0 + 744) = v5;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v5, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[92];
  v0[95] = AsyncMapSequence.Iterator.baseIterator.modify();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status>.Iterator and conformance AsyncStream<A>.Iterator, &demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[96] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
  uint64_t v3 = v0[71];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v3, v1, &protocol witness table for MainActor);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 752);
    uint64_t v4 = *(void *)(v2 + 744);
    uint64_t v5 = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
  }
  else
  {
    (*(void (**)(void))(v2 + 760))();
    uint64_t v3 = *(void *)(v2 + 752);
    uint64_t v4 = *(void *)(v2 + 744);
    uint64_t v5 = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
  }
  return _swift_task_switch(v5, v4, v3);
}

{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;

  uint64_t v1 = *((void *)v0 + 73);
  uint64_t v2 = *((void *)v0 + 72);
  uint64_t v3 = *((void *)v0 + 71);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    outlined destroy of Locale?(v3, &demangling cache variable for type metadata for Tips.Status?);
    swift_release();
    uint64_t v4 = *((void *)v0 + 89);
    uint64_t v5 = *((void *)v0 + 88);
    return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v5, v4);
  }
  else
  {
    uint64_t v6 = *((void *)v0 + 85);
    uint64_t v7 = *((void *)v0 + 84);
    uint64_t v8 = *((void *)v0 + 83);
    uint64_t v9 = *((void *)v0 + 82);
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*((void *)v0 + 74), v3, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    uint64_t v10 = (int *)AsyncMapSequence.Iterator.transform.getter();
    *((void *)v0 + 97) = v11;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    *((void *)v0 + 98) = v12;
    v12(v7, v9);
    uint64_t v16 = (uint64_t (*)(char *, uint64_t))((char *)v10 + *v10);
    uint64_t v13 = (void *)swift_task_alloc();
    *((void *)v0 + 99) = v13;
    *uint64_t v13 = v0;
    v13[1] = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
    id v14 = *((void *)v0 + 74);
    return v16(v0 + 924, v14);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 760))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 592);
  uint64_t v3 = *(void *)(*v0 + 584);
  uint64_t v4 = *(void *)(*v0 + 576);
  swift_task_dealloc();
  swift_release();
  *(unsigned char *)(v1 + 925) = *(unsigned char *)(v1 + 924);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 752);
  uint64_t v6 = *(void *)(v1 + 744);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = *(void *)(v0 + 704);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v2, v1);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)(void);
  void *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  long long v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  Class isa;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 800) = Strong;
  if (Strong)
  {
    if (*(unsigned char *)(v0 + 925) != 1)
    {
      *(void *)(v0 + 808) = type metadata accessor for TPTipsHelper();
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 816) = v8;
      *uint64_t v8 = v0;
      uint64_t v9 = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
LABEL_11:
      v8[1] = v9;
      return static TPTipsHelper.shared.getter();
    }
    uint64_t v2 = Strong;
    uint64_t v3 = [Strong tableView];
    uint64_t v4 = [v3 tableHeaderView];

    if (v4)
    {
      type metadata accessor for TPTipHeaderView();
      if (swift_dynamicCastClass())
      {
        uint64_t v5 = (void *)dispatch thunk of TPTipHeaderView.hostingView.getter();

        if (v5)
        {
LABEL_23:

          id v28 = static MainActor.shared.getter();
          *(void *)(v0 + 736) = v28;
          if (v28)
          {
            swift_getObjectType();
            os_log_type_t v29 = dispatch thunk of Actor.unownedExecutor.getter();
            double v31 = v30;
          }
          else
          {
            os_log_type_t v29 = 0;
            double v31 = 0;
          }
          *(void *)(v0 + 752) = v31;
          *(void *)(v0 + 744) = v29;
          return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v29, v31);
        }
      }
      else
      {
      }
    }
    if (one-time initialization token for tipUserInfo != -1) {
      swift_once();
    }
    if (!*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
    {
      uint64_t v10 = *(void *)(v0 + 512);
      type metadata accessor for TipUIPopoverViewController();
      uint64_t v11 = *(_OWORD *)(v0 + 720);
      *(_OWORD *)(v0 + 80) = v11;
      uint64_t v12 = v11;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
      id v14 = *(void *)(v12 - 8);
      uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
      *(void *)(v0 + 848) = v15;
      *(void *)(v0 + 856) = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v15(boxed_opaque_existential_1, v10, v12);
      uint64_t v16 = [v2 searchController];
      double v17 = [v16 searchBar];

      double v18 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
      *(void *)(v0 + 864) = v18;
      double v19 = v2;
      TipUIPopoverViewController.presentationDelegate.setter();
      double v20 = TipUIPopoverViewController.popoverPresentationController.getter();
      if (v20)
      {
        id v21 = (void *)v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        id v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_1002053A0;
        uint64_t v23 = [v19 searchController];
        id v24 = [v23 searchBar];

        *(void *)(v22 + 32) = v24;
        specialized Array._endMutation()();
        type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v21 setPassthroughViews:isa];
      }
      if ([v19 canDisplaySearchBarPopover])
      {
        [v19 presentViewController:v18 animated:1 completion:0];
        id v26 = (void *)*((void *)static MPRecentsTableViewController.tipUserInfo + 2);
        *((void *)static MPRecentsTableViewController.tipUserInfo + 2) = v18;
        id v27 = v18;

        type metadata accessor for TPTipsHelper();
        uint64_t v8 = (void *)swift_task_alloc();
        *(void *)(v0 + 872) = v8;
        *uint64_t v8 = v0;
        uint64_t v9 = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
        goto LABEL_11;
      }
    }
    goto LABEL_23;
  }
  (*(void (**)(void, void))(v0 + 784))(*(void *)(v0 + 680), *(void *)(v0 + 656));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[83] + 8))(v0[85], v0[82]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  uint64_t v1 = *(void **)(v0 + 824);
  uint64_t v2 = *(unsigned int *)(v0 + 920);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  *(void *)(v0 + 832) = v6;
  *(void *)(v0 + 840) = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v6(v3, v2, v5);
  uint64_t v7 = dispatch thunk of TPTipsHelper.currentTip.getter();

  if (*(void *)(v7 + 16)
    && (uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 560)), (v9 & 1) != 0))
  {
    outlined init with copy of Tip(*(void *)(v7 + 56) + 40 * v8, v0 + 176);
  }
  else
  {
    *(void *)(v0 + 208) = 0;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
  }
  uint64_t v10 = *(void *)(v0 + 560);
  uint64_t v11 = *(void *)(v0 + 536);
  uint64_t v12 = *(void *)(v0 + 528);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 888) = v13;
  *(void *)(v0 + 896) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v10, v12);
  if (*(void *)(v0 + 200))
  {
    outlined init with take of Tip((long long *)(v0 + 176), v0 + 136);
    __swift_project_boxed_opaque_existential_0((void *)(v0 + 136), *(void *)(v0 + 160));
    id v14 = dispatch thunk of Tip.id.getter();
    uint64_t v16 = v15;
    if (v14 == dispatch thunk of Tip.id.getter() && v16 == v17)
    {
      swift_bridgeObjectRelease_n();
LABEL_11:
      [*(id *)(v0 + 800) dismissPopover];
      double v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 904) = v19;
      *double v19 = v0;
      v19[1] = specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:);
      return static TPTipsHelper.shared.getter();
    }
    double v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_11;
    }

    __swift_destroy_boxed_opaque_existential_0(v0 + 136);
  }
  else
  {

    outlined destroy of Locale?(v0 + 176, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  double v20 = static MainActor.shared.getter();
  *(void *)(v0 + 736) = v20;
  if (v20)
  {
    swift_getObjectType();
    id v21 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v23 = v22;
  }
  else
  {
    id v21 = 0;
    uint64_t v23 = 0;
  }
  *(void *)(v0 + 752) = v23;
  *(void *)(v0 + 744) = v21;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v21, v23);
}

{
  uint64_t v0;
  void (*v1)(uint64_t *, uint64_t, void);
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  void (*v4)(uint64_t, void);
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  void (*v16)(unint64_t, void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = *(void (**)(uint64_t *, uint64_t, void))(v0 + 848);
  uint64_t v2 = *(void *)(v0 + 512);
  id v27 = *(_OWORD *)(v0 + 720);
  (*(void (**)(void, void, void))(*(void *)(v0 + 536) + 104))(*(void *)(v0 + 552), *(unsigned int *)(v0 + 920), *(void *)(v0 + 528));
  *(_OWORD *)(v0 + 280) = v27;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 256));
  v1(boxed_opaque_existential_1, v2, v27);
  uint64_t v4 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  uint64_t v6 = v5;
  if (*(void *)(v0 + 280))
  {
    uint64_t v7 = *(void *)(v0 + 552);
    uint64_t v8 = *(void *)(v0 + 536);
    uint64_t v9 = *(void *)(v0 + 528);
    outlined init with take of Tip((long long *)(v0 + 256), v0 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v28 = *v6;
    void *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 16), v7, isUniquelyReferenced_nonNull_native);
    void *v6 = v28;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 552);
    outlined destroy of Locale?(v0 + 256, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    LOBYTE(v11) = v13;
    swift_bridgeObjectRelease();
    if (v11)
    {
      id v14 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 496) = *v6;
      void *v6 = 0x8000000000000000;
      if ((v14 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v15 = *(void *)(v0 + 536);
      uint64_t v16 = *(void (**)(unint64_t, void))(v15 + 8);
      v16(*(void *)(*(void *)(v0 + 496) + 48) + *(void *)(v15 + 72) * v12, *(void *)(v0 + 528));
      double v17 = *(void *)(v0 + 496);
      outlined init with take of Tip((long long *)(*(void *)(v17 + 56) + 40 * v12), v0 + 96);
      specialized _NativeDictionary._delete(at:)(v12, v17);
      void *v6 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      double v18 = *(void *)(v0 + 536);
      *(_OWORD *)(v0 + 96) = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
      *(void *)(v0 + 128) = 0;
      uint64_t v16 = *(void (**)(unint64_t, void))(v18 + 8);
    }
    v16(*(void *)(v0 + 552), *(void *)(v0 + 528));
    outlined destroy of Locale?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  double v19 = *(void **)(v0 + 880);
  double v20 = *(void **)(v0 + 864);
  id v21 = *(void **)(v0 + 800);
  v4(v0 + 376, 0);

  id v22 = static MainActor.shared.getter();
  *(void *)(v0 + 736) = v22;
  if (v22)
  {
    swift_getObjectType();
    uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter();
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v25 = 0;
  }
  *(void *)(v0 + 752) = v25;
  *(void *)(v0 + 744) = v23;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v23, v25);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, void);
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(void, void, void))(v0 + 832))(*(void *)(v0 + 544), *(unsigned int *)(v0 + 920), *(void *)(v0 + 528));
  *(_OWORD *)(v0 + 216) = 0u;
  *(void *)(v0 + 248) = 0;
  *(_OWORD *)(v0 + 232) = 0u;
  double v19 = (void (*)(uint64_t, void))dispatch thunk of TPTipsHelper.currentTip.modify();
  uint64_t v2 = v1;
  if (*(void *)(v0 + 240))
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 888);
    uint64_t v4 = *(void *)(v0 + 544);
    uint64_t v5 = *(void *)(v0 + 528);
    outlined init with take of Tip((long long *)(v0 + 216), v0 + 336);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v20 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((long long *)(v0 + 336), v4, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v20;
    swift_bridgeObjectRelease();
    v3(v4, v5);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 544);
    outlined destroy of Locale?(v0 + 216, (uint64_t *)&demangling cache variable for type metadata for Tip?);
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    LOBYTE(v7) = v9;
    swift_bridgeObjectRelease();
    if (v7)
    {
      uint64_t v10 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 504) = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if ((v10 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      (*(void (**)(unint64_t, void))(v0 + 888))(*(void *)(*(void *)(v0 + 504) + 48) + *(void *)(*(void *)(v0 + 536) + 72) * v8, *(void *)(v0 + 528));
      uint64_t v11 = *(void *)(v0 + 504);
      outlined init with take of Tip((long long *)(*(void *)(v11 + 56) + 40 * v8), v0 + 296);
      specialized _NativeDictionary._delete(at:)(v8, v11);
      *uint64_t v2 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)(v0 + 328) = 0;
      *(_OWORD *)(v0 + 296) = 0u;
      *(_OWORD *)(v0 + 312) = 0u;
    }
    (*(void (**)(void, void))(v0 + 888))(*(void *)(v0 + 544), *(void *)(v0 + 528));
    outlined destroy of Locale?(v0 + 296, (uint64_t *)&demangling cache variable for type metadata for Tip?);
  }
  uint64_t v12 = *(void **)(v0 + 912);
  uint64_t v13 = *(void **)(v0 + 800);
  v19(v0 + 440, 0);

  dispatch thunk of static TPTipsHelper.didDisplayCallHistorySearchTip()();
  __swift_destroy_boxed_opaque_existential_0(v0 + 136);
  id v14 = static MainActor.shared.getter();
  *(void *)(v0 + 736) = v14;
  if (v14)
  {
    swift_getObjectType();
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
    double v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    double v17 = 0;
  }
  *(void *)(v0 + 752) = v17;
  *(void *)(v0 + 744) = v15;
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v15, v17);
}

uint64_t specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 824) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 712);
  uint64_t v4 = *(void *)(v2 + 704);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 880) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 712);
  uint64_t v4 = *(void *)(v2 + 704);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v4, v3);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 912) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 712);
  uint64_t v4 = *(void *)(v2 + 704);
  return _swift_task_switch(specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:), v4, v3);
}

Swift::Void __swiftcall MPRecentsTableViewController.tipKitStartObservation()()
{
  id v1 = [v0 featureFlags];
  unsigned __int8 v2 = [v1 callHistorySearchEnabled];

  type metadata accessor for TPTipsHelper();
  static TPTipsHelper.taskQueue.getter();
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 24) = v2;
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
}

uint64_t sub_100156CC8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t closure #1 in MPRecentsTableViewController.tipKitStartObservation()(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 384) = a2;
  *(void *)(v2 + 96) = a1;
  uint64_t v3 = type metadata accessor for CallHistorySearchTip();
  *(void *)(v2 + 104) = v3;
  *(void *)(v2 + 112) = *(void *)(v3 - 8);
  *(void *)(v2 + 120) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RecentsUnknownCallersTip();
  *(void *)(v2 + 128) = v4;
  *(void *)(v2 + 136) = *(void *)(v4 - 8);
  *(void *)(v2 + 144) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RecentsBrandedCallingTip();
  *(void *)(v2 + 152) = v5;
  *(void *)(v2 + 160) = *(void *)(v5 - 8);
  *(void *)(v2 + 168) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for RecentsSaveAsFavoritesTip();
  *(void *)(v2 + 176) = v6;
  *(void *)(v2 + 184) = *(void *)(v6 - 8);
  *(void *)(v2 + 192) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for RecentsSaveAsContactTip();
  *(void *)(v2 + 200) = v7;
  *(void *)(v2 + 208) = *(void *)(v7 - 8);
  *(void *)(v2 + 216) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LiveVoicemailTip();
  *(void *)(v2 + 224) = v8;
  *(void *)(v2 + 232) = *(void *)(v8 - 8);
  *(void *)(v2 + 240) = swift_task_alloc();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

uint64_t closure #1 in MPRecentsTableViewController.tipKitStartObservation()()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[31] = Strong;
  if (Strong)
  {
    type metadata accessor for TPTipsHelper();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[32] = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
    return static TPTipsHelper.shared.getter();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 272) = type metadata accessor for MainActor();
  *(void *)(v0 + 280) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  id v1 = *(void **)(v0 + 264);
  swift_release();
  dispatch thunk of TPTipsHelper.setup()();

  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  LiveVoicemailTip.init()();
  v0[36] = static MainActor.shared.getter();
  id v1 = (void *)swift_task_alloc();
  v0[37] = v1;
  uint64_t *v1 = v0;
  v1[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
  uint64_t v2 = v0[30];
  return specialized MPRecentsTableViewController.observeTip<A>(_:action:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_task_dealloc();
  id v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), v1, v0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = v0[29];
  id v1 = v0[30];
  uint64_t v3 = v0[28];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  RecentsSaveAsContactTip.init()();
  v0[38] = static MainActor.shared.getter();
  id v1 = (void *)swift_task_alloc();
  v0[39] = v1;
  uint64_t *v1 = v0;
  v1[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
  uint64_t v2 = v0[27];
  return specialized MPRecentsTableViewController.observeTip<A>(_:action:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_task_dealloc();
  id v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), v1, v0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = v0[26];
  id v1 = v0[27];
  uint64_t v3 = v0[25];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  RecentsSaveAsFavoritesTip.init()();
  v0[40] = static MainActor.shared.getter();
  id v1 = (void *)swift_task_alloc();
  v0[41] = v1;
  uint64_t *v1 = v0;
  v1[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
  uint64_t v2 = v0[24];
  return specialized MPRecentsTableViewController.observeTip<A>(_:action:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_task_dealloc();
  id v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), v1, v0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = v0[23];
  id v1 = v0[24];
  uint64_t v3 = v0[22];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 336) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  id v1 = *(void **)(v0 + 248);
  swift_release();
  *(void *)(v0 + 344) = [v1 personalizedCarrierString];
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  void *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  id v1 = (void *)v0[43];
  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002053C0;
    *(void *)(inited + 32) = 1;
    *(void *)(inited + 40) = v2;
    *(void *)(inited + 48) = v4;
    specialized Dictionary.init(dictionaryLiteral:)((void *)inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
    swift_arrayDestroy();
    RecentsBrandedCallingTip.init(_:)();
    v0[44] = static MainActor.shared.getter();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[45] = v6;
    void *v6 = v0;
    v6[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
    uint64_t v7 = v0[21];
    return specialized MPRecentsTableViewController.observeTip<A>(_:action:)(v7);
  }
  else
  {
    RecentsUnknownCallersTip.init()();
    uint64_t v9 = (void *)swift_task_alloc();
    v0[46] = v9;
    *uint64_t v9 = v0;
    v9[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
    uint64_t v10 = v0[18];
    return specialized MPRecentsTableViewController.observeTip<A>(_:action:)(v10);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_task_dealloc();
  id v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), v1, v0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = v0[20];
  id v1 = v0[21];
  uint64_t v3 = v0[19];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  RecentsUnknownCallersTip.init()();
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v1;
  uint64_t *v1 = v0;
  v1[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
  uint64_t v2 = *(void *)(v0 + 144);
  return specialized MPRecentsTableViewController.observeTip<A>(_:action:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  id v1 = *(void *)(*(void *)v0 + 144);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  uint64_t v3 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  if (*(unsigned char *)(v0 + 384) == 1)
  {
    CallHistorySearchTip.init()();
    id v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v1;
    uint64_t *v1 = v0;
    v1[1] = closure #1 in MPRecentsTableViewController.tipKitStartObservation();
    uint64_t v2 = *(void *)(v0 + 120);
    return specialized MPRecentsTableViewController.observePopoverTip<A>(_:)(v2);
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  id v1 = *(void *)(*(void *)v0 + 120);
  uint64_t v2 = *(void *)(*(void *)v0 + 112);
  uint64_t v3 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in MPRecentsTableViewController.tipKitStartObservation()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStartObservation(), 0, 0);
}

uint64_t sub_10015843C()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t partial apply for closure #1 in MPRecentsTableViewController.tipKitStartObservation()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in MPRecentsTableViewController.tipKitStartObservation()(v2, v3);
}

Swift::Void __swiftcall MPRecentsTableViewController.tipKitStopObservation()()
{
  [v0 dismissPopover];
  type metadata accessor for TPTipsHelper();
  static TPTipsHelper.taskQueue.getter();
  *(void *)(swift_allocObject() + 16) = v0;
  id v1 = v0;
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();

  swift_release();
}

uint64_t closure #1 in MPRecentsTableViewController.tipKitStopObservation()(uint64_t a1)
{
  _OWORD v1[3] = a1;
  uint64_t v2 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStopObservation(), 0, 0);
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStopObservation(), 0, 0);
}

uint64_t closure #1 in MPRecentsTableViewController.tipKitStopObservation()()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 56) = type metadata accessor for MainActor();
  *(void *)(v0 + 64) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStopObservation(), v2, v1);
}

{
  uint64_t v1;

  swift_release();
  specialized closure #1 in closure #1 in MPRecentsTableViewController.tipKitStopObservation()();
  swift_unknownObjectWeakDestroy();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStopObservation(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  type metadata accessor for TPTipsHelper();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = closure #1 in MPRecentsTableViewController.tipKitStopObservation();
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for TPTipsHelper.Entry.Kind.recents(_:), v0[4]);
  v0[11] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPRecentsTableViewController.tipKitStopObservation(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[10];
  char v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[4];
  swift_release();
  dispatch thunk of TPTipsHelper.removeEntries(_:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t partial apply for closure #1 in MPRecentsTableViewController.tipKitStopObservation()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in MPRecentsTableViewController.tipKitStopObservation()(v2);
}

void specialized closure #1 in closure #1 in MPRecentsTableViewController.tipKitStopObservation()()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = [Strong tableView];
    [v2 setTableHeaderView:0];
  }
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  char v3 = (void *)*((void *)static MPRecentsTableViewController.tipUserInfo + 2);
  *((void *)static MPRecentsTableViewController.tipUserInfo + 2) = 0;
}

uint64_t specialized MPRecentsTableViewController.observeTip<A>(_:action:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RecentsUnknownCallersTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RecentsBrandedCallingTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RecentsSaveAsFavoritesTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RecentsSaveAsContactTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LiveVoicemailTip();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for MainActor();
  v2[28] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[29] = v8;
  v2[30] = v7;
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v2 = *v1;
  *(void *)(*v1 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  uint64_t v4 = *(void *)(v2 + 232);
  return _swift_task_switch(specialized MPRecentsTableViewController.observeTip<A>(_:action:), v4, v3);
}

uint64_t specialized MPRecentsTableViewController.observeTip<A>(_:action:)()
{
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  id v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *id v14 = v0;
  v14[1] = specialized MPRecentsTableViewController.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  id v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.recents(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsUnknownCallersTip and conformance RecentsUnknownCallersTip, (void (*)(uint64_t))&type metadata accessor for RecentsUnknownCallersTip);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  id v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *id v14 = v0;
  v14[1] = specialized MPRecentsTableViewController.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  id v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.recents(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip, (void (*)(uint64_t))&type metadata accessor for RecentsBrandedCallingTip);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  id v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *id v14 = v0;
  v14[1] = specialized MPRecentsTableViewController.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  id v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.recents(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsSaveAsFavoritesTip and conformance RecentsSaveAsFavoritesTip, (void (*)(uint64_t))&type metadata accessor for RecentsSaveAsFavoritesTip);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  id v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *id v14 = v0;
  v14[1] = specialized MPRecentsTableViewController.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  id v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.recents(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(&lazy protocol witness table cache variable for type RecentsSaveAsContactTip and conformance RecentsSaveAsContactTip, (void (*)(uint64_t))&type metadata accessor for RecentsSaveAsContactTip);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v16 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[31] = v9;
  v0[32] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v2, v4);
  *(void *)(v13 + v12) = v8;
  *(void *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_release();
  v0[33] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:), v13);
  type metadata accessor for TPTipsHelper();
  id v14 = (void *)swift_task_alloc();
  v0[34] = v14;
  *id v14 = v0;
  v14[1] = specialized MPRecentsTableViewController.observeTip<A>(_:action:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[35];
  unint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[31];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  id v14 = v0[19];
  uint64_t v4 = v0[18];
  unint64_t v11 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.recents(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip((unint64_t *)&lazy protocol witness table cache variable for type LiveVoicemailTip and conformance LiveVoicemailTip, (void (*)(uint64_t))&type metadata accessor for LiveVoicemailTip);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void specialized MPRecentsTableViewController.dismissPopover()()
{
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)*((void *)static MPRecentsTableViewController.tipUserInfo + 2);
  if (v0)
  {
    id v1 = v0;
    [v1 dismissViewControllerAnimated:1 completion:0];
    uint64_t v2 = static MPRecentsTableViewController.tipUserInfo;
    swift_retain();

    id v3 = (id)v2[2];
    v2[2] = 0;
    swift_release();
  }
}

void specialized MPRecentsTableViewController.presentationControllerDidDismiss(_:)()
{
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  if (*((void *)static MPRecentsTableViewController.tipUserInfo + 2))
  {
    type metadata accessor for TPTipsHelper();
    dispatch thunk of static TPTipsHelper.didDisplayCallHistorySearchTip()();
    uint64_t v0 = (void *)*((void *)static MPRecentsTableViewController.tipUserInfo + 2);
    *((void *)static MPRecentsTableViewController.tipUserInfo + 2) = 0;
  }
}

uint64_t type metadata accessor for MPRecentsTableViewController.RecentsUserInfo()
{
  return self;
}

uint64_t sub_10015B28C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015B2C4()
{
  return objectdestroy_28Tm((uint64_t (*)(void))&type metadata accessor for RecentsBrandedCallingTip);
}

uint64_t partial apply for specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RecentsBrandedCallingTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v4 = *(void *)(type metadata accessor for RecentsUnknownCallersTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v4 = *(void *)(type metadata accessor for RecentsSaveAsFavoritesTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v4 = *(void *)(type metadata accessor for RecentsSaveAsContactTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v4 = *(void *)(type metadata accessor for LiveVoicemailTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return specialized closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)(a1, v7, v8, v9, v10, v11);
}

void partial apply for closure #1 in closure #1 in MPRecentsTableViewController.observeTip<A>(_:action:)()
{
}

uint64_t sub_10015B418()
{
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10015B458()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10015B490()
{
  uint64_t v1 = type metadata accessor for CallHistorySearchTip();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CallHistorySearchTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return specialized closure #1 in MPRecentsTableViewController.observePopoverTip<A>(_:)(a1, v6, v7, v8, v9);
}

uint64_t sub_10015B69C()
{
  return objectdestroy_28Tm((uint64_t (*)(void))&type metadata accessor for RecentsUnknownCallersTip);
}

uint64_t sub_10015B7E8()
{
  return objectdestroy_28Tm((uint64_t (*)(void))&type metadata accessor for RecentsSaveAsFavoritesTip);
}

uint64_t sub_10015B934()
{
  return objectdestroy_28Tm((uint64_t (*)(void))&type metadata accessor for RecentsSaveAsContactTip);
}

uint64_t sub_10015BA80()
{
  return objectdestroy_28Tm((uint64_t (*)(void))&type metadata accessor for LiveVoicemailTip);
}

uint64_t objectdestroy_28Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release();

  return _swift_deallocObject(v1, v7, v6);
}

uint64_t lazy protocol witness table accessor for type RecentsBrandedCallingTip and conformance RecentsBrandedCallingTip(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015BD0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  v3[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Tips.Status();
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  if (a1)
  {
    swift_getObjectType();
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  v3[16] = v7;
  v3[17] = v9;
  return _swift_task_switch(_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY0_, v7, v9);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY0_()
{
  v0[18] = AsyncMapSequence.Iterator.baseIterator.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status>.Iterator and conformance AsyncStream<A>.Iterator, &demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  void *v1 = v0;
  v1[1] = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TQ1_;
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v2, v3, v4);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TQ1_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY3_;
  }
  else
  {
    (*(void (**)(void))(v2 + 144))();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY2_;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY2_()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of Tips.Status?(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(2);
  }
  else
  {
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[15], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    uint64_t v10 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[20] = v11;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v14 = (int *)((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[21] = v12;
    *uint64_t v12 = v0;
    v12[1] = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TQ4_;
    uint64_t v13 = v0[15];
    return ((uint64_t (*)(void *, uint64_t))v14)(v0 + 22, v13);
  }
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY3_()
{
  (*(void (**)(void))(v0 + 144))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TQ4_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 120);
  uint64_t v3 = *(void *)(*v0 + 112);
  uint64_t v4 = *(void *)(*v0 + 104);
  swift_task_dealloc();
  swift_release();
  *(unsigned char *)(v1 + 177) = *(unsigned char *)(v1 + 176);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 136);
  uint64_t v6 = *(void *)(v1 + 128);
  return _swift_task_switch(_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY5_, v6, v5);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5TY5_()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 177);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t specialized MPFavoritesTableViewController.observeTip<A>(_:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry();
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FavoritesTip();
  v2[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[22] = v6;
  v2[23] = *(void *)(v6 + 64);
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[25] = swift_task_alloc();
  v2[26] = type metadata accessor for MainActor();
  v2[27] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[28] = v8;
  v2[29] = v7;
  return _swift_task_switch(specialized MPFavoritesTableViewController.observeTip<A>(_:), v8, v7);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  uint64_t v4 = *(void *)(v2 + 224);
  return _swift_task_switch(specialized MPFavoritesTableViewController.observeTip<A>(_:), v4, v3);
}

uint64_t specialized MPFavoritesTableViewController.observeTip<A>(_:)()
{
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[22];
  uint64_t v6 = v0[12];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[30] = v9;
  v0[31] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v6, v4);
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v11, v2, v4);
  *(void *)(v12 + ((v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
  swift_release();
  v0[32] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:), v12);
  type metadata accessor for TPTipsHelper();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[33] = v13;
  *uint64_t v13 = v0;
  v13[1] = specialized MPFavoritesTableViewController.observeTip<A>(_:);
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(void);
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = (void *)v0[34];
  uint64_t v12 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[30];
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[19];
  uint64_t v14 = v0[18];
  uint64_t v4 = v0[17];
  unint64_t v11 = v0[16];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for TPTipsHelper.Entry.Kind.favorites(_:), v6);
  v0[5] = v2;
  v0[6] = lazy protocol witness table accessor for type FavoritesTip and conformance FavoritesTip();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v12(boxed_opaque_existential_1, v7, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v4, v6);
  outlined init with copy of Tip((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  swift_retain();
  TPTipsHelper.Entry.init(_:tip:observationTask:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  dispatch thunk of TPTipsHelper.addEntry(_:)();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[20] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v5[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v5[22] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v5[26] = v7;
  v5[27] = *(void *)(v7 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for MainActor();
  v5[30] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[31] = v9;
  v5[32] = v8;
  return _swift_task_switch(specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:), v9, v8);
}

uint64_t specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:)()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  v0[33] = type metadata accessor for FavoritesTip();
  v0[34] = lazy protocol witness table accessor for type FavoritesTip and conformance FavoritesTip();
  Tip.shouldDisplayUpdates.getter();
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  uint64_t v4 = static MainActor.shared.getter();
  v0[35] = v4;
  uint64_t v7 = (char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
     + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[36] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:);
  return ((uint64_t (*)(uint64_t, void *, void *))v7)(v4, &protocol witness table for MainActor, v0 + 16);
}

uint64_t specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:)(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 296) = a1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 256);
  uint64_t v4 = *(void *)(v2 + 248);
  return _swift_task_switch(specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:), v4, v3);
}

id specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:)()
{
  if (*(unsigned char *)(v0 + 296) == 2 || (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
LABEL_9:
    swift_release();
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v10();
  }
  uint64_t v2 = (void *)Strong;
  if ((*(unsigned char *)(v0 + 296) & 1) == 0)
  {
    swift_release();
    if (one-time initialization token for tipUserInfo != -1) {
      swift_once();
    }
    uint64_t v3 = (void *)*((void *)static MPFavoritesTableViewController.tipUserInfo + 2);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 208);
    if (v3)
    {
      id v7 = v3;
      [v7 dismissViewControllerAnimated:1 completion:0];
      uint64_t v8 = static MPFavoritesTableViewController.tipUserInfo;
      swift_retain();

      uint64_t v9 = (void *)v8[2];
      _OWORD v8[2] = 0;
      swift_release();
    }
    else
    {
    }
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    goto LABEL_10;
  }
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  if (*((void *)static MPFavoritesTableViewController.tipUserInfo + 2))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
LABEL_17:

    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(v0 + 144);
  long long v43 = *(_OWORD *)(v0 + 264);
  uint64_t v13 = *(void *)(v0 + 264);
  id v14 = [v2 addButtonItem];
  type metadata accessor for TipUIPopoverViewController();
  *(_OWORD *)(v0 + 88) = v43;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 64));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, v12, v13);
  id v16 = v14;
  uint64_t v17 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
  double v18 = (void *)TipUIPopoverViewController.popoverPresentationController.getter();
  if (!v18)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));

    goto LABEL_17;
  }
  double v19 = v18;
  [v18 setBarButtonItem:v16];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UIView?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002060A0;
  id v21 = [v2 tabBarController];
  if (v21)
  {
    id v22 = v21;
    id v23 = [v21 tabBar];
  }
  else
  {
    id v23 = 0;
  }
  *(void *)(inited + 32) = v23;
  id v24 = [v2 navigationController];
  id v44 = v16;
  if (v24)
  {
    unint64_t v25 = v24;
    id v26 = [v24 navigationBar];
  }
  else
  {
    id v26 = 0;
  }
  *(void *)(inited + 40) = v26;
  specialized Array._endMutation()();
  uint64_t v27 = inited;
  *(void *)(v0 + 136) = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  id v28 = *(void **)(inited + 32);
  self;
  if (swift_dynamicCastObjCClass()
    && (id v29 = v28,
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(),
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(),
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(),
        specialized ContiguousArray._endMutation()(),
        id v30 = *(void **)(v27 + 40),
        self,
        swift_dynamicCastObjCClass()))
  {
    id v31 = v30;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    type metadata accessor for UIView();
    v32.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v32.super.Class isa = 0;
  }
  [v19 setPassthroughViews:[v32.super.isa passthroughViews:v44]];

  id v33 = v17;
  id result = [v2 view];
  if (result)
  {
    CGFloat v34 = result;
    [result frame];
    double v36 = v35;
    double v38 = v37;

    [v33 setPreferredContentSize:v36, v38];
    id v39 = (void *)*((void *)static MPFavoritesTableViewController.tipUserInfo + 2);
    *((void *)static MPFavoritesTableViewController.tipUserInfo + 2) = v33;
    id v40 = v33;

    [v2 presentViewController:v40 animated:1 completion:0];
    uint64_t v41 = static MainActor.shared.getter();
    *(void *)(v0 + 280) = v41;
    uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu
                                                   + _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFScSy6TipKit4TipsO6StatusOG_SbTg5Tu);
    double v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v42;
    *double v42 = v0;
    v42[1] = specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:);
    return (id)v46(v41, (uint64_t)&protocol witness table for MainActor);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall MPFavoritesTableViewController.tipKitStartObservation()()
{
}

uint64_t sub_10015D8EC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t closure #1 in MPFavoritesTableViewController.tipKitStartObservation()(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for FavoritesTip();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  type metadata accessor for TPTipsHelper();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[9] = v3;
  *uint64_t v3 = v1;
  v3[1] = closure #1 in MPFavoritesTableViewController.tipKitStartObservation();
  return static TPTipsHelper.shared.getter();
}

{
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStartObservation(), 0, 0);
}

uint64_t closure #1 in MPFavoritesTableViewController.tipKitStartObservation()()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStartObservation(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 80);
  swift_release();
  dispatch thunk of TPTipsHelper.setup()();

  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStartObservation(), 0, 0);
}

{
  void *v0;
  uint64_t Strong;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[12] = Strong;
  if (Strong)
  {
    FavoritesTip.init()();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[13] = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in MPFavoritesTableViewController.tipKitStartObservation();
    uint64_t v3 = v0[8];
    return specialized MPFavoritesTableViewController.observeTip<A>(_:)(v3);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(void **)(*v0 + 96);
  uint64_t v2 = *(void *)(*v0 + 64);
  uint64_t v3 = *(void *)(*v0 + 56);
  uint64_t v4 = *(void *)(*v0 + 48);
  id v7 = *v0;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t partial apply for closure #1 in MPFavoritesTableViewController.tipKitStartObservation()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in MPFavoritesTableViewController.tipKitStartObservation()(v0);
}

uint64_t closure #1 in MPFavoritesTableViewController.tipKitStopObservation()()
{
  uint64_t v1 = type metadata accessor for TPTipsHelper.Entry.Kind();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  type metadata accessor for TPTipsHelper();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in MPFavoritesTableViewController.tipKitStopObservation();
  return static TPTipsHelper.shared.getter();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for TPTipsHelper.Entry.Kind.favorites(_:), v0[2]);
  v0[7] = type metadata accessor for MainActor();
  v0[8] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStopObservation(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = (void *)v0[6];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = v0[2];
  swift_release();
  dispatch thunk of TPTipsHelper.removeEntries(_:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStopObservation(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 72) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStopObservation(), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  swift_release();
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  type metadata accessor for MPFavoritesTableViewController.FavoritesUserInfo();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  static MPFavoritesTableViewController.tipUserInfo = (_UNKNOWN *)v1;
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in MPFavoritesTableViewController.tipKitStopObservation()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitStopObservation(), 0, 0);
}

Swift::Void __swiftcall MPFavoritesTableViewController.tipKitLogAnalyticsAddFavoritesEvent()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  type metadata accessor for MainActor();
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = &protocol witness table for MainActor;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in MPFavoritesTableViewController.tipKitLogAnalyticsAddFavoritesEvent(), v5);
  swift_release();
}

uint64_t closure #1 in MPFavoritesTableViewController.tipKitLogAnalyticsAddFavoritesEvent()()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in MPFavoritesTableViewController.tipKitLogAnalyticsAddFavoritesEvent(), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  [self logAnalyticsEventPhoneAddFavorites];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall MPFavoritesTableViewController.tipKitActionFavoriteAdded()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Event<Tips.EmptyDonation>);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FavoritesTip();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  FavoritesTip.init()();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Tips.InvalidationReason.actionPerformed(_:), v4);
  lazy protocol witness table accessor for type FavoritesTip and conformance FavoritesTip();
  Tip.invalidate(reason:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static FavoritesTip.favoriteAddedEvent.getter();
  Tips.Event.sendDonation<>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

Swift::Void __swiftcall MPFavoritesTableViewController.tipKitSetNumberOfFavorites(_:)(Swift::Int a1)
{
}

uint64_t specialized MPFavoritesTableViewController.tipKitStopObservation()()
{
  if (one-time initialization token for tipUserInfo != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)*((void *)static MPFavoritesTableViewController.tipUserInfo + 2);
  if (v0)
  {
    id v1 = v0;
    [v1 dismissViewControllerAnimated:1 completion:0];
    uint64_t v2 = static MPFavoritesTableViewController.tipUserInfo;
    swift_retain();

    uint64_t v3 = (void *)v2[2];
    v2[2] = 0;
    swift_release();
  }
  type metadata accessor for TPTipsHelper();
  static TPTipsHelper.taskQueue.getter();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();

  return swift_release();
}

uint64_t partial apply for closure #1 in MPFavoritesTableViewController.tipKitLogAnalyticsAddFavoritesEvent()()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in MPFavoritesTableViewController.tipKitLogAnalyticsAddFavoritesEvent()();
}

unint64_t lazy protocol witness table accessor for type FavoritesTip and conformance FavoritesTip()
{
  unint64_t result = lazy protocol witness table cache variable for type FavoritesTip and conformance FavoritesTip;
  if (!lazy protocol witness table cache variable for type FavoritesTip and conformance FavoritesTip)
  {
    type metadata accessor for FavoritesTip();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FavoritesTip and conformance FavoritesTip);
  }
  return result;
}

uint64_t type metadata accessor for MPFavoritesTableViewController.FavoritesUserInfo()
{
  return self;
}

uint64_t sub_10015EE8C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015EEC4()
{
  uint64_t v1 = type metadata accessor for FavoritesTip();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FavoritesTip() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return specialized closure #1 in MPFavoritesTableViewController.observeTip<A>(_:)(a1, v6, v7, v8, v9);
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

uint64_t outlined destroy of Tips.Status?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t VoicemailsSearchController.sectionTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MPVoicemailsSearchController_sectionTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VoicemailsSearchController.sectionIndex.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPVoicemailsSearchController_sectionIndex;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t VoicemailsSearchController.sectionIndex.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MPVoicemailsSearchController_sectionIndex);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*VoicemailsSearchController.sectionIndex.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t VoicemailsSearchController.sectionType.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___MPVoicemailsSearchController_sectionType);
  swift_beginAccess();
  return *v1;
}

uint64_t VoicemailsSearchController.sectionType.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR___MPVoicemailsSearchController_sectionType);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*VoicemailsSearchController.sectionType.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t VoicemailsSearchController.results.getter()
{
  return CallsSearchController.resultIDs.getter();
}

uint64_t VoicemailsSearchController.results.setter(uint64_t a1)
{
  return CallsSearchController.resultIDs.setter(a1, &OBJC_IVAR___MPVoicemailsSearchController_results);
}

uint64_t (*VoicemailsSearchController.results.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

Class @objc VoicemailsSearchController.results.getter()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v0.super.isa;
}

uint64_t VoicemailsSearchController.resultIDs.getter()
{
  return CallsSearchController.resultIDs.getter();
}

uint64_t @objc VoicemailsSearchController.results.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = (uint64_t *)(a1 + *a5);
  swift_beginAccess();
  *uint64_t v8 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t VoicemailsSearchController.resultIDs.setter(uint64_t a1)
{
  return CallsSearchController.resultIDs.setter(a1, &OBJC_IVAR___MPVoicemailsSearchController_resultIDs);
}

uint64_t (*VoicemailsSearchController.resultIDs.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

UIViewController __swiftcall VoicemailsSearchController.viewForDetails()()
{
  return (UIViewController)objc_retain(*(id *)(v0
                                             + OBJC_IVAR___MPVoicemailsSearchController_voicemailsTableViewController));
}

uint64_t VoicemailsSearchController.delegate.getter()
{
  return CallsSearchController.delegate.getter();
}

uint64_t VoicemailsSearchController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*VoicemailsSearchController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPVoicemailsSearchController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchTableViewController.suggestionsDelegate.modify;
}

uint64_t VoicemailsSearchController.hostingNavigationController.getter()
{
  return CallsSearchController.delegate.getter();
}

void VoicemailsSearchController.hostingNavigationController.setter(void *a1)
{
}

void (*VoicemailsSearchController.hostingNavigationController.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPVoicemailsSearchController_hostingNavigationController;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return VoicemailSearchMetadataView.delegate.modify;
}

char *VoicemailsSearchController.searchManager.getter()
{
  uint64_t v1 = OBJC_IVAR___MPVoicemailsSearchController____lazy_storage___searchManager;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPVoicemailsSearchController____lazy_storage___searchManager);
  if (v2)
  {
    uint64_t v3 = *(char **)(v0 + OBJC_IVAR___MPVoicemailsSearchController____lazy_storage___searchManager);
  }
  else
  {
    uint64_t v4 = v0;
    id v5 = objc_allocWithZone((Class)type metadata accessor for SearchManager());
    uint64_t v6 = SearchManager.init(itemType:)(1);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v6;
    uint64_t v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

char *VoicemailsSearchController.__allocating_init(navigationController:voicemailController:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return VoicemailsSearchController.init(navigationController:voicemailController:)(a1, a2);
}

char *VoicemailsSearchController.init(navigationController:voicemailController:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = (Swift::String *)&v3[OBJC_IVAR___MPVoicemailsSearchController_sectionTitle];
  id v8 = self;
  uint64_t v9 = v3;
  id v10 = [v8 mainBundle];
  v24._id object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0x49414D4543494F56;
  v11._id object = (void *)0xEA0000000000534CLL;
  v12.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v12.value._id object = (void *)0xE900000000000073;
  v13._uint64_t countAndFlagsBits = 0;
  v13._id object = (void *)0xE000000000000000;
  v24._uint64_t countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v24);

  *uint64_t v7 = v14;
  *(void *)&v9[OBJC_IVAR___MPVoicemailsSearchController_sectionIndex] = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)&v9[OBJC_IVAR___MPVoicemailsSearchController_sectionType] = 3;
  *(void *)&v9[OBJC_IVAR___MPVoicemailsSearchController_results] = _swiftEmptyArrayStorage;
  *(void *)&v9[OBJC_IVAR___MPVoicemailsSearchController_resultIDs] = _swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  Logger.init(subsystem:category:)();
  uint64_t v15 = OBJC_IVAR___MPVoicemailsSearchController_featureFlags;
  *(void *)&v9[v15] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  v9[OBJC_IVAR___MPVoicemailsSearchController_isSearching] = 0;
  id v16 = &v9[OBJC_IVAR___MPVoicemailsSearchController_searchText];
  *(void *)id v16 = 0;
  *((void *)v16 + 1) = 0;
  *(void *)&v9[OBJC_IVAR___MPVoicemailsSearchController_searchTokens] = _swiftEmptyArrayStorage;
  *(void *)&v9[OBJC_IVAR___MPVoicemailsSearchController____lazy_storage___searchManager] = 0;
  *(void *)&v9[OBJC_IVAR___MPVoicemailsSearchController_voicemailsTableViewController] = [objc_allocWithZone((Class)type metadata accessor for VoicemailSearchTableViewController()) initWithNavigationController:a1 voicemailController:a2];

  v23.id receiver = v9;
  v23.Class super_class = ObjectType;
  uint64_t v17 = (char *)[super init];
  double v18 = *(void **)&v17[OBJC_IVAR___MPVoicemailsSearchController_voicemailsTableViewController];
  double v19 = v17;
  [v18 setIsSearchViewController:1];
  double v20 = v19;
  id v21 = v18;
  [v21 setFetchDelegate:v20];

  return v20;
}

uint64_t VoicemailsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[44] = a3;
  v4[45] = v3;
  v4[42] = a1;
  v4[43] = a2;
  type metadata accessor for MainActor();
  v4[46] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[47] = v6;
  v4[48] = v5;
  return _swift_task_switch(VoicemailsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t VoicemailsSearchController.search(with:searchTokens:)()
{
  if (![*(id *)(v0[45] + OBJC_IVAR___MPVoicemailsSearchController_featureFlags) voicemailSearchEnabled])
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[43];
  uint64_t v3 = OBJC_IVAR___MPVoicemailsSearchController_isSearching;
  v0[49] = OBJC_IVAR___MPVoicemailsSearchController_isSearching;
  *(unsigned char *)(v1 + v3) = 1;
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR___MPVoicemailsSearchController_searchText);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___MPVoicemailsSearchController_searchText + 8);
  if (v2)
  {
    if (!v5) {
      goto LABEL_15;
    }
    BOOL v6 = *v4 == v0[42] && v5 == v0[43];
    if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v7 = v0[44];
    unint64_t v8 = swift_bridgeObjectRetain();
    LOBYTE(v7) = specialized static Array<A>.== infix(_:_:)(v8, v7);
    swift_bridgeObjectRelease();
    if (v7)
    {
      swift_release();
      *(unsigned char *)(v1 + v3) = 0;
      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong didCompleteSearchFor:v0[45]];
        swift_unknownObjectRelease();
      }
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  if (!v5) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v10 = v0[44];
  uint64_t v11 = v0[45];
  uint64_t v12 = v0[43];
  uint64_t *v4 = v0[42];
  v4[1] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v11 + OBJC_IVAR___MPVoicemailsSearchController_searchTokens) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Swift::String v13 = *(char **)(v11 + OBJC_IVAR___MPVoicemailsSearchController_voicemailsTableViewController);
  v0[50] = v13;
  uint64_t v15 = *v4;
  uint64_t v14 = v4[1];
  id v16 = &v13[OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText];
  swift_beginAccess();
  *(void *)id v16 = v15;
  *((void *)v16 + 1) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRetain();
    if (String.count.getter() > 0)
    {
LABEL_19:
      double v18 = VoicemailsSearchController.searchManager.getter();
      v0[51] = v18;
      id v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)((swift_isaMask & *(void *)v18) + 0x170)
                                                              + **(int **)((swift_isaMask & *(void *)v18) + 0x170));
      double v19 = (void *)swift_task_alloc();
      v0[52] = v19;
      *double v19 = v0;
      v19[1] = VoicemailsSearchController.search(with:searchTokens:);
      uint64_t v20 = v0[44];
      uint64_t v21 = v0[42];
      return v29(v21, v12, v20);
    }
    unint64_t v17 = v0[44];
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23 >= 1) {
        goto LABEL_19;
      }
    }
    else if (*(uint64_t *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = v0[45];
  swift_release();
  unint64_t v25 = (void *)(v24 + OBJC_IVAR___MPVoicemailsSearchController_results);
  swift_beginAccess();
  *unint64_t v25 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  id v26 = (void *)(v24 + OBJC_IVAR___MPVoicemailsSearchController_resultIDs);
  swift_beginAccess();
  *id v26 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  v0[12] = closure #1 in static VoicemailSearchTableViewController.voicemailPredicate.getter;
  v0[13] = 0;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = thunk for @escaping @callee_guaranteed (@guaranteed Message) -> (@unowned Bool);
  v0[11] = &block_descriptor_9;
  uint64_t v27 = _Block_copy(v0 + 8);
  [v13 setPreFetchingPredicate:v27];
  _Block_release(v27);
  [v13 reloadDataIfNeeded];
LABEL_25:
  id v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void **v12;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void);
  char v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *Strong;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  void *v33[2];
  void *v34;
  uint64_t v35;

  CGFloat v34 = v0;
  swift_release();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[53];
    uint64_t v5 = v0[42];
    uint64_t v4 = v0[43];
    BOOL v6 = swift_slowAlloc();
    v33[0] = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[39] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, (uint64_t *)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2048;
    uint64_t v7 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    v0[40] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "VoicemailsSearchController: Completed search for %s. Got %ld results", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
  }
  unint64_t v8 = *(void *)(v0[53] + 16);
  if (v8)
  {
    uint64_t v9 = v0[54];
    v33[0] = *((void **)v0 + 53);
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v33);
    if (v9) {
      return swift_release();
    }
    uint64_t v10 = v0[45];
    swift_bridgeObjectRelease();
    uint64_t v11 = v33[0];
    uint64_t v12 = (void **)(v10 + OBJC_IVAR___MPVoicemailsSearchController_resultIDs);
    swift_beginAccess();
    v33[0] = *v12;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v33);
    swift_bridgeObjectRelease();
    id v22 = specialized static Array<A>.== infix(_:_:)(v11, v33[0]);
    swift_release();
    swift_release();
    if (v22)
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = Logger.logObject.getter();
      uint64_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "VoicemailsSearchController: Search voicemails did not change for voicemails search controller.", v25, 2u);
        swift_slowDealloc();
      }
      id v26 = v0[49];
      uint64_t v27 = v0[45];

      *(unsigned char *)(v27 + v26) = 0;
      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong didCompleteSearchFor:v0[45]];
        swift_unknownObjectRelease();
      }
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    id v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v31 = 134217984;
      v0[41] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "VoicemailsSearchController: Search voicemails did changed! Search results count: %ld", v31, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    NSArray v32 = (void *)v0[53];

    *uint64_t v12 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v32;
    double v18 = partial apply for specialized closure #3 in VoicemailsSearchController.search(with:searchTokens:);
  }
  else
  {
    uint64_t v14 = v0[45];
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)(v14 + OBJC_IVAR___MPVoicemailsSearchController_results);
    swift_beginAccess();
    *uint64_t v15 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    id v16 = (void *)(v14 + OBJC_IVAR___MPVoicemailsSearchController_resultIDs);
    swift_beginAccess();
    *id v16 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    unint64_t v17 = 0;
    double v18 = variable initialization expression of FTMessage.isDirty;
  }
  double v19 = (void *)v0[50];
  v0[6] = v18;
  v0[7] = v17;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed Message) -> (@unowned Bool);
  v0[5] = &block_descriptor_4;
  uint64_t v20 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  [v19 setPreFetchingPredicate:v20];
  _Block_release(v20);
  [v19 reloadDataIfNeeded];
  swift_release();
LABEL_10:
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

{
  void *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  uint64_t v1 = (void *)v0[51];
  swift_release();

  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[42];
    uint64_t v4 = v0[43];
    BOOL v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)BOOL v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[38] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "VoicemailsSearchController: Failed to search for %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v7 = (void *)v0[50];
  v0[6] = variable initialization expression of FTMessage.isDirty;
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed Message) -> (@unowned Bool);
  v0[5] = &block_descriptor_4;
  unint64_t v8 = _Block_copy(v0 + 2);
  swift_release();
  [v7 setPreFetchingPredicate:v8];
  _Block_release(v8);
  [v7 reloadDataIfNeeded];
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t VoicemailsSearchController.search(with:searchTokens:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 424) = a1;
  *(void *)(v3 + 432) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(void *)(v3 + 376);
    uint64_t v5 = *(void *)(v3 + 384);
    BOOL v6 = VoicemailsSearchController.search(with:searchTokens:);
  }
  else
  {

    uint64_t v4 = *(void *)(v3 + 376);
    uint64_t v5 = *(void *)(v3 + 384);
    BOOL v6 = VoicemailsSearchController.search(with:searchTokens:);
  }
  return _swift_task_switch(v6, v4, v5);
}

BOOL specialized closure #3 in VoicemailsSearchController.search(with:searchTokens:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for MessageID.Value(0);
  __chkstk_darwin(v4);
  BOOL v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a1 identifier];
  outlined init with copy of MessageID.Value((uint64_t)v10 + OBJC_IVAR___MPMessageID_value, (uint64_t)v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v6, v12);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, v14, 1, v12);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) == 1)
  {
    outlined destroy of UUID?((uint64_t)v9);
  }
  else
  {
    uint64_t v15 = UUID.uuidString.getter();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
    char v18 = specialized Sequence<>.contains(_:)(v15, v17, a2);
    swift_bridgeObjectRelease();
    if (v18) {
      return [a1 folder] == (id)1;
    }
  }
  return 0;
}

uint64_t @objc closure #1 in VoicemailsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VoicemailsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t @objc closure #1 in VoicemailsSearchController.search(with:searchTokens:)()
{
  uint64_t v1 = (const void *)v0[4];
  uint64_t v2 = v0[2];
  swift_release();
  v0[7] = _Block_copy(v1);
  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  v0[8] = v2;
  uint64_t v5 = (void *)v0[5];
  type metadata accessor for UISearchToken();
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v6;
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in CallsSearchController.search(with:searchTokens:);
  return VoicemailsSearchController.search(with:searchTokens:)(v3, v2, v6);
}

Swift::Void __swiftcall VoicemailsSearchController.cancelPreviousSearchRequests()()
{
  if ([*(id *)(v0 + OBJC_IVAR___MPVoicemailsSearchController_featureFlags) voicemailSearchEnabled])
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "VoicemailsSearchController: cancelling previous search requests", v3, 2u);
      swift_slowDealloc();
    }

    uint64_t v4 = VoicemailsSearchController.searchManager.getter();
    (*(void (**)(void))((swift_isaMask & *(void *)v4) + 0x180))();
  }
}

Swift::Int __swiftcall VoicemailsSearchController.numberOfRowsInConsolidatedView()()
{
  if (![*(id *)(v0 + OBJC_IVAR___MPVoicemailsSearchController_featureFlags) voicemailSearchEnabled])return 0; {
  uint64_t v1 = v0 + OBJC_IVAR___MPVoicemailsSearchController_results;
  }
  swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16) >= 3uLL) {
    return 3;
  }
  else {
    return *(void *)(*(void *)v1 + 16);
  }
}

Swift::Void __swiftcall VoicemailsSearchController.registerCell(with:)(UITableView with)
{
  type metadata accessor for VoicemailSearchViewCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = String._bridgeToObjectiveC()();
  [(objc_class *)with.super.super.super.super.isa registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v3];
}

char *VoicemailsSearchController.tableView(_:cellForRowAt:)(void *a1, uint64_t a2)
{
  return VoicemailSearchTableViewController.tableView(_:cellForRowAt:)(a1, a2);
}

void VoicemailsSearchController.tableView(_:didSelectRowAt:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR___MPVoicemailsSearchController_voicemailsTableViewController);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  [v4 tableView:a1 expandRowAtIndexPath:isa animated:1];

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static SearchMetrics.shared;
  id v7 = (unsigned int *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_sectionType);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_searchText + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = -1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v6) + 0xE0))(1, v8, v9);
  Class v10 = IndexPath._bridgeToObjectiveC()().super.isa;
  [a1 deselectRowAtIndexPath:v10 animated:0];
}

Swift::Void __swiftcall VoicemailsSearchController.highlightMatchedText(in:)(UITableViewCell in)
{
  id v3 = (uint64_t *)(*(void *)(v1 + OBJC_IVAR___MPVoicemailsSearchController_voicemailsTableViewController)
                 + OBJC_IVAR____TtC11MobilePhone34VoicemailSearchTableViewController_searchText);
  swift_beginAccess();
  uint64_t v4 = (void *)v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    swift_bridgeObjectRetain();
    if (String.count.getter() >= 1)
    {
      type metadata accessor for VoicemailSearchViewCell();
      if (swift_dynamicCastClass())
      {
        uint64_t v6 = in.super.super.super.isa;
        v7._uint64_t countAndFlagsBits = v5;
        v7._id object = v4;
        VoicemailSearchViewCell.highlight(text:)(v7);
      }
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall VoicemailsSearchController.tableViewController(_:didChangeVoicemails:)(MPVoicemailTableViewController *_, Swift::OpaquePointer didChangeVoicemails)
{
}

Swift::Bool __swiftcall VoicemailsSearchController.sectionNeedsIndexing()()
{
  if (static SpotlightIndexManagerUtilities.voicemailsNeedsDeferredReindexing(defaults:)()) {
    return 1;
  }
  else {
    return static SpotlightIndexManagerUtilities.voicemailsNeedIndexingDueToVersionMismatch(defaults:)() & 1;
  }
}

uint64_t VoicemailsSearchController.configure(cardController:presentationResultForIndex:)(void *a1)
{
  return VoicemailSearchTableViewController.configure(cardController:presentationResultForIndex:)(a1);
}

void VoicemailsSearchController.init()()
{
}

uint64_t sub_100161DC0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

BOOL partial apply for specialized closure #3 in VoicemailsSearchController.search(with:searchTokens:)(void *a1)
{
  return specialized closure #3 in VoicemailsSearchController.search(with:searchTokens:)(a1, *(void **)(v1 + 16));
}

void specialized VoicemailsSearchController.tableViewController(_:didChangeVoicemails:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v41 = type metadata accessor for MessageID.Value(0);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  Class v10 = _swiftEmptyArrayStorage;
  double v42 = (void *)v9;
  if (v9)
  {
    v44[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
    {
      __break(1u);
      swift_release();
      __break(1u);
      swift_release();
      __break(1u);
      return;
    }
    uint64_t v39 = v1;
    uint64_t v11 = 0;
    unint64_t v40 = a1 & 0xC000000000000001;
    do
    {
      if (v40)
      {
        uint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v12 = *(void **)(a1 + 8 * (void)v11 + 32);
        swift_unknownObjectRetain();
      }
      id v13 = [v12 identifier:v39];
      outlined init with copy of MessageID.Value((uint64_t)v13 + OBJC_IVAR___MPMessageID_value, (uint64_t)v5);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v15 = type metadata accessor for UUID();
      uint64_t v16 = *(void *)(v15 - 8);
      if (EnumCaseMultiPayload == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v5, v15);
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 1;
      }
      unint64_t v18 = a1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v8, v17, 1, v15);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15) == 1)
      {
        outlined destroy of UUID?((uint64_t)v8);
        uint64_t v19 = 0;
        unint64_t v20 = 0xE000000000000000;
      }
      else
      {
        uint64_t v19 = UUID.uuidString.getter();
        unint64_t v20 = v21;
        (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
      }
      swift_unknownObjectRelease();
      Class v10 = (void *)v44[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1);
        Class v10 = (void *)v44[0];
      }
      unint64_t v23 = v10[2];
      unint64_t v22 = v10[3];
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        Class v10 = (void *)v44[0];
      }
      uint64_t v11 = (void *)((char *)v11 + 1);
      v10[2] = v23 + 1;
      uint64_t v24 = &v10[2 * v23];
      unsigned char v24[4] = v19;
      v24[5] = v20;
      a1 = v18;
    }
    while (v42 != v11);
    uint64_t v2 = v39;
  }
  v44[0] = (uint64_t)v10;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v44);
  unint64_t v25 = (void *)v44[0];
  id v26 = (uint64_t *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_resultIDs);
  swift_beginAccess();
  v43[0] = *v26;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(v43);
  swift_bridgeObjectRelease();
  uint64_t v27 = specialized static Array<A>.== infix(_:_:)(v25, (void *)v43[0]);
  swift_release();
  swift_release();
  if ((v27 & 1) == 0
    && (unint64_t v28 = *(void *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_searchText + 8)) != 0
    && ((v28 & 0x2000000000000000) != 0
      ? (uint64_t v29 = HIBYTE(v28) & 0xF)
      : (uint64_t v29 = *(void *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_searchText) & 0xFFFFFFFFFFFFLL),
        v29 && (*(unsigned char *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_isSearching) & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      NSArray v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSArray v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "VoicemailsSearchController: ignoring voicemail results fetched IDs not matched with resultIDs", v32, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      double v35 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)double v35 = 134217984;
      v43[0] = (uint64_t)v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "VoicemailsSearchController: Fetched voicemails. Found %ld voicemails", v35, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v36 = specialized _arrayForceCast<A, B>(_:)(a1);
    double v37 = (uint64_t *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_results);
    swift_beginAccess();
    *double v37 = v36;
    swift_bridgeObjectRelease();
    *id v26 = (uint64_t)v10;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v2 + OBJC_IVAR___MPVoicemailsSearchController_isSearching) = 0;
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      [Strong didCompleteSearchFor:v2];
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_10016240C@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t sub_100162418()
{
  return keypath_setTm();
}

uint64_t sub_100162424@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t sub_100162430()
{
  return keypath_setTm();
}

uint64_t ObjC metadata update function for VoicemailsSearchController()
{
  return type metadata accessor for VoicemailsSearchController();
}

uint64_t type metadata accessor for VoicemailsSearchController()
{
  uint64_t result = type metadata singleton initialization cache for VoicemailsSearchController;
  if (!type metadata singleton initialization cache for VoicemailsSearchController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for VoicemailsSearchController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100162590()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in VoicemailsSearchController.search(with:searchTokens:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VoicemailsSearchController.search(with:searchTokens:)
                                                                  + async function pointer to @objc closure #1 in VoicemailsSearchController.search(with:searchTokens:));
  return v7(v2, v3, v5, v4);
}

unint64_t type metadata accessor for UISearchToken()
{
  unint64_t result = lazy cache variable for type metadata for UISearchToken;
  if (!lazy cache variable for type metadata for UISearchToken)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  }
  return result;
}

unint64_t UIDeviceOrientation.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 0x7469617274726F70;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
    case 3:
      unint64_t result = 0x70616373646E616CLL;
      break;
    case 4:
      unint64_t result = 0x705565636166;
      break;
    case 5:
      unint64_t result = 0x6E776F4465636166;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance UIDeviceOrientation()
{
  return UIDeviceOrientation.description.getter(*v0);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone13VisualMessageCG_So11VMVoicemailCs5NeverOTg504_s11d7Phone22f32VoicemailManagerC6deleteyySayAA7g10_pGYaFSo11H61CAA0cG0Ccfu0_33_359af5688f2a88367c83dcdfdc6c900dAjHTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v5 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v5 = (char *)*(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      uint64_t v7 = (id *)&v5[OBJC_IVAR___MPVisualMessage_vmMessage];
      swift_beginAccess();
      id v8 = *v7;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo11VMVoicemailCG_11MobilePhone7Message_ps5NeverOTg506_sSo11d3C11e13Phone13Visualg17CIeggo_AbC0E0_ps5H120OIegnrzr_TR04_s11b7Phone22d44VoicemailManagerC8messages10filteredBySayAA7e27_pGSbAaF_pc_tYaFAA0cI0CSo11A5Ccfu_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    uint64_t v11 = _swiftEmptyArrayStorage;
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      uint64_t v7 = (objc_class *)type metadata accessor for VisualMessage();
      id v8 = (char *)objc_allocWithZone(v7);
      *(void *)&v8[OBJC_IVAR___MPVisualMessage_vmMessage] = v6;
      v10.id receiver = v8;
      v10.Class super_class = v7;
      id v9 = v6;
      [super init];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return v11;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUSenderIdentity);
}

{
  return specialized _arrayConditionalCast<A, B>(_:)(a1, &lazy cache variable for type metadata for CSSuggestion);
}

void *specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        type metadata accessor for VisualMessage();
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      for (uint64_t j = 0; ; ++j)
      {
        uint64_t v6 = j + 1;
        if (__OFADD__(j, 1)) {
          break;
        }
        type metadata accessor for VisualMessage();
        uint64_t v7 = swift_dynamicCastClass();
        if (!v7)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v7;
        swift_unknownObjectRetain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v4 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        id v5 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        uint64_t v6 = v4;
        if (object_getClass(v4) != (Class)_TtC11MobilePhone9FTMessage || v6 == 0)
        {
          swift_unknownObjectRelease();
          goto LABEL_21;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v5 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      id v8 = 0;
      id v9 = (char *)(v1 + 32);
      while (1)
      {
        objc_super v10 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          break;
        }
        uint64_t v1 = *(void *)&v9[8 * v8];
        if (object_getClass((id)v1) != (Class)_TtC11MobilePhone9FTMessage || v1 == 0)
        {
LABEL_21:
          swift_release();
          return 0;
        }
        swift_unknownObjectRetain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v8;
        if (v10 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1, unint64_t *a2)
{
  id v8 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v4) {
    return v8;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v7);
    type metadata accessor for VMAccount(0, a2);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v4) {
      return v8;
    }
  }
  swift_release();

  return 0;
}

char *VisualVoicemailManager.__allocating_init(visualVoicemailManager:onVoicemailsChanged:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return VisualVoicemailManager.init(visualVoicemailManager:onVoicemailsChanged:)(a1, a2, a3);
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

id VisualVoicemailManager.visualVoicemailManager.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
}

uint64_t VisualVoicemailManager.onVoicemailsChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_onVoicemailsChanged);
  swift_retain();
  return v1;
}

id VisualVoicemailManager.transcriptionEnabled.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager) isTranscriptionEnabled];
}

void *VisualVoicemailManager.vmdVoiceMailManager.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
  id v2 = v1;
  return v1;
}

char *VisualVoicemailManager.init(visualVoicemailManager:onVoicemailsChanged:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_messagesChangedPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  swift_allocObject();
  id v9 = v3;
  *(void *)&v3[v8] = PassthroughSubject.init()();
  *(void *)&v9[OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager] = a1;
  objc_super v10 = &v9[OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_onVoicemailsChanged];
  *(void *)objc_super v10 = a2;
  *((void *)v10 + 1) = a3;
  id v11 = a1;
  swift_retain();

  v17.id receiver = v9;
  v17.Class super_class = ObjectType;
  uint64_t v12 = [(char *)[super init]];
  id v13 = *(void **)&v12[OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager];
  uint64_t v14 = v12;
  id v15 = v13;
  [v15 setDelegate:v14];

  swift_release();
  return v14;
}

uint64_t VisualVoicemailManager.listenForChanges(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for VoicemailActor();
  id v9 = v2;
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v11 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = inited;
  uint64_t v12[3] = v11;
  v12[4] = v9;
  _OWORD v12[5] = a1;
  v12[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in VisualVoicemailManager.listenForChanges(_:), (uint64_t)v12);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t closure #1 in VisualVoicemailManager.listenForChanges(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<VoicemailManagerMessageChanges, Never>>);
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<VoicemailManagerMessageChanges, Never>>.Iterator);
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint8_t v6[16] = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[17] = v10;
  v6[18] = v9;
  return _swift_task_switch(closure #1 in VisualVoicemailManager.listenForChanges(_:), v10, v9);
}

uint64_t closure #1 in VisualVoicemailManager.listenForChanges(_:)()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  v0[4] = *(void *)(v0[6] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_messagesChangedPublisher);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<VoicemailManagerMessageChanges, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  Publisher<>.values.getter();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[19] = swift_initStaticObject();
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<VoicemailManagerMessageChanges, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<VoicemailManagerMessageChanges, Never>>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in VisualVoicemailManager.listenForChanges(_:);
  uint64_t v6 = v0[12];
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 2, v6, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = closure #1 in VisualVoicemailManager.listenForChanges(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = closure #1 in VisualVoicemailManager.listenForChanges(_:);
  }
  return _swift_task_switch(v7, v4, v6);
}

{
  uint64_t v0;

  *(void *)(v0 + 176) = *(void *)(v0 + 16);
  *(unsigned char *)(v0 + 25) = *(unsigned char *)(v0 + 24);
  return _swift_task_switch(closure #1 in VisualVoicemailManager.listenForChanges(_:), *(void *)(v0 + 136), *(void *)(v0 + 144));
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 25);
  if (v1 == 255)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 176);
    (*(void (**)(uint64_t, void))(v0 + 56))(v2, *(unsigned __int8 *)(v0 + 25));
    outlined consume of VoicemailManagerMessageChanges?(v2, v1);
    uint64_t v3 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<VoicemailManagerMessageChanges, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<VoicemailManagerMessageChanges, Never>>.Iterator);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v4;
    void *v4 = v0;
    v4[1] = closure #1 in VisualVoicemailManager.listenForChanges(_:);
    uint64_t v5 = *(void *)(v0 + 96);
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v5, v3);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 40) = *(void *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.listenForChanges(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.listenForChanges(_:)(a1, v4, v5, v6, v7, v8);
}

void partial apply for implicit closure #2 in implicit closure #1 in VisualVoicemailManager.listenForChanges(_:)()
{
}

uint64_t VisualVoicemailManager.voicemailsChanged(messageChanges:)(uint64_t a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for VoicemailActor();
  id v9 = v2;
  swift_bridgeObjectRetain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v11 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = inited;
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = v9;
  *(void *)(v12 + 40) = a1;
  *(unsigned char *)(v12 + 48) = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:), v12);
  return swift_release();
}

uint64_t closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 25) = a6;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 40) = a5;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:), v8, v7);
}

uint64_t closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:)()
{
  char v1 = *(unsigned char *)(v0 + 25);
  uint64_t v2 = *(void *)(v0 + 40);
  (*(void (**)(void))(*(void *)(v0 + 32) + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_onVoicemailsChanged))();
  *(void *)(v0 + 16) = v2;
  *(unsigned char *)(v0 + 24) = v1;
  PassthroughSubject.send(_:)();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:)(a1, v4, v5, v6, v7, v8);
}

uint64_t VisualVoicemailManager.fetchMessages()()
{
  *(void *)(v1 + 40) = v0;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.fetchMessages(), v3, v2);
}

{
  objc_super *v0;
  Class *p_super_class;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  id v8;
  objc_class *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t *v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*super_class)(uint64_t);
  Class *v22;
  void *v23;
  objc_super *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  p_Class super_class = &v0[2].super_class;
  uint64_t v2 = [*(id *)((char *)v0[2].super_class+ OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager) allVoicemails];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMVoicemail);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v22 = &v0[2].super_class;
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v22 = &v0[2].super_class;
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t v23 = _swiftEmptyArrayStorage;
  unint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v4 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v7 = *(id *)(v3 + 8 * v6 + 32);
    }
    char v8 = v7;
    ++v6;
    id v9 = (objc_class *)type metadata accessor for VisualMessage();
    uint64_t v10 = (char *)objc_allocWithZone(v9);
    *(void *)&v10[OBJC_IVAR___MPVisualMessage_vmMessage] = v8;
    v0[1].id receiver = v10;
    v0[1].Class super_class = v9;
    [super init];
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v4 != v6);
  uint64_t v11 = (unint64_t)v23;
  swift_bridgeObjectRelease();
  p_Class super_class = v22;
LABEL_12:
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.mobilePhone);
  swift_bridgeObjectRetain_n();
  id v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint64_t *)(p_super_class - 1);
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    unint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    type metadata accessor for VisualMessage();
    swift_bridgeObjectRetain();
    objc_super v17 = Array.description.getter();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *id v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetched %s from VMD", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRetain();
  if (v11 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
    unint64_t v20 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    unint64_t v20 = v11;
  }
  swift_bridgeObjectRelease();
  Class super_class = (uint64_t (*)(uint64_t))v0->super_class;
  return super_class(v20);
}

uint64_t @objc closure #1 in VisualVoicemailManager.fetchMessages()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.fetchMessages(), v4, v3);
}

uint64_t @objc closure #1 in VisualVoicemailManager.fetchMessages()()
{
  uint64_t v1 = *(void **)(v0 + 24);
  *(void *)(v0 + 32) = _Block_copy(*(const void **)(v0 + 16));
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = @objc closure #1 in VisualVoicemailManager.fetchMessages();
  return VisualVoicemailManager.fetchMessages()();
}

{
  uint64_t *v0;
  void (**v1)(void, void);
  void *v2;
  Class isa;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void (***)(void, void))(*v0 + 32);
  id v2 = *(void **)(*v0 + 24);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t VisualVoicemailManager.delete(_:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.delete(_:), v4, v3);
}

uint64_t VisualVoicemailManager.delete(_:)()
{
  uint64_t v12 = v0;
  uint64_t v1 = specialized _arrayConditionalCast<A, B>(_:)(v0[4]);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0[5] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone13VisualMessageCG_So11VMVoicemailCs5NeverOTg504_s11d7Phone22f32VoicemailManagerC6deleteyySayAA7g10_pGYaFSo11H61CAA0cG0Ccfu0_33_359af5688f2a88367c83dcdfdc6c900dAjHTf3nnnpk_nTf1cn_nTm((unint64_t)v1);
    swift_bridgeObjectRelease();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMVoicemail);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v4 = [v2 deleteVoicemails:isa];
  }
  else
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.mobilePhone);
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)char v8 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x654D3C7961727241, 0xEE003E6567617373, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Incorrect type passed into VisualVoicemailManager %{public}s but expected VisualMessage!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t @objc closure #1 in VisualVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.delete(_:), v5, v4);
}

uint64_t @objc closure #1 in VisualVoicemailManager.delete(_:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v2;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = @objc closure #1 in VisualVoicemailManager.delete(_:);
  return VisualVoicemailManager.delete(_:)(v2);
}

uint64_t VisualVoicemailManager.markAsRead(_:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.markAsRead(_:), v4, v3);
}

uint64_t VisualVoicemailManager.markAsRead(_:)()
{
  uint64_t v12 = v0;
  uint64_t v1 = specialized _arrayConditionalCast<A, B>(_:)(v0[4]);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0[5] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone13VisualMessageCG_So11VMVoicemailCs5NeverOTg504_s11d7Phone22f32VoicemailManagerC6deleteyySayAA7g10_pGYaFSo11H61CAA0cG0Ccfu0_33_359af5688f2a88367c83dcdfdc6c900dAjHTf3nnnpk_nTf1cn_nTm((unint64_t)v1);
    swift_bridgeObjectRelease();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMVoicemail);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v4 = [v2 markVoicemailsAsRead:isa];
  }
  else
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.mobilePhone);
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)char v8 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x654D3C7961727241, 0xEE003E6567617373, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Incorrect type passed into VisualVoicemailManager %{public}s but expected VisualMessage!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t @objc closure #1 in VisualVoicemailManager.markAsRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.markAsRead(_:), v5, v4);
}

uint64_t @objc closure #1 in VisualVoicemailManager.markAsRead(_:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v2;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = @objc closure #1 in VisualVoicemailManager.markAsRead(_:);
  return VisualVoicemailManager.markAsRead(_:)(v2);
}

{
  uint64_t *v0;
  void (**v1)(void);
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void (***)(void))(*v0 + 40);
  uint64_t v2 = *(void **)(*v0 + 32);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v1[2](v1);
  _Block_release(v1);
  id v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t VisualVoicemailManager.moveToTrash(_:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.moveToTrash(_:), v4, v3);
}

uint64_t VisualVoicemailManager.moveToTrash(_:)()
{
  uint64_t v12 = v0;
  uint64_t v1 = specialized _arrayConditionalCast<A, B>(_:)(v0[4]);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0[5] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone13VisualMessageCG_So11VMVoicemailCs5NeverOTg504_s11d7Phone22f32VoicemailManagerC6deleteyySayAA7g10_pGYaFSo11H61CAA0cG0Ccfu0_33_359af5688f2a88367c83dcdfdc6c900dAjHTf3nnnpk_nTf1cn_nTm((unint64_t)v1);
    swift_bridgeObjectRelease();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMVoicemail);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v4 = [v2 trashVoicemails:isa];
  }
  else
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.mobilePhone);
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)char v8 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x654D3C7961727241, 0xEE003E6567617373, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Incorrect type passed into VisualVoicemailManager %{public}s but expected VisualMessage!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t @objc closure #1 in VisualVoicemailManager.moveToTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.moveToTrash(_:), v5, v4);
}

uint64_t @objc closure #1 in VisualVoicemailManager.moveToTrash(_:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v2;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = @objc closure #1 in VisualVoicemailManager.delete(_:);
  return VisualVoicemailManager.moveToTrash(_:)(v2);
}

uint64_t VisualVoicemailManager.removeFromTrash(_:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.removeFromTrash(_:), v4, v3);
}

uint64_t VisualVoicemailManager.removeFromTrash(_:)()
{
  uint64_t v12 = v0;
  uint64_t v1 = specialized _arrayConditionalCast<A, B>(_:)(v0[4]);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0[5] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone13VisualMessageCG_So11VMVoicemailCs5NeverOTg504_s11d7Phone22f32VoicemailManagerC6deleteyySayAA7g10_pGYaFSo11H61CAA0cG0Ccfu0_33_359af5688f2a88367c83dcdfdc6c900dAjHTf3nnnpk_nTf1cn_nTm((unint64_t)v1);
    swift_bridgeObjectRelease();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMVoicemail);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v4 = [v2 removeVoicemailsFromTrash:isa];
  }
  else
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.mobilePhone);
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)char v8 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x654D3C7961727241, 0xEE003E6567617373, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Incorrect type passed into VisualVoicemailManager %{public}s but expected VisualMessage!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t @objc closure #1 in VisualVoicemailManager.removeFromTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.removeFromTrash(_:), v5, v4);
}

uint64_t @objc closure #1 in VisualVoicemailManager.removeFromTrash(_:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v2;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  void *v4 = v0;
  v4[1] = @objc closure #1 in VisualVoicemailManager.delete(_:);
  return VisualVoicemailManager.removeFromTrash(_:)(v2);
}

uint64_t VisualVoicemailManager.message(for:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for MessageID.Value(0);
  v2[8] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.message(for:), v4, v3);
}

uint64_t VisualVoicemailManager.message(for:)()
{
  uint64_t v1 = (void **)(v0 + 40);
  outlined init with copy of MessageID.Value(*(void *)(v0 + 40) + OBJC_IVAR___MPMessageID_value, *(void *)(v0 + 64));
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = *(void **)(v0 + 64);
  if (EnumCaseMultiPayload == 1)
  {
    outlined destroy of MessageID.Value((uint64_t)v3);
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v4 = *v1;
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.mobilePhone);
    id v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *v1;
    if (v9)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      unint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      *(void *)(v0 + 32) = v10;
      id v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v18 = v10;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Incorrect id passed into VisualVoicemailManager %@, privacy: .public) but expected a VisualMessage ID!", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = 0;
  }
  else
  {
    id v13 = [*(id *)(*(void *)(v0 + 48) + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager) voicemailWithIdentifier:*v3];
    if (v13)
    {
      uint64_t v14 = (objc_class *)type metadata accessor for VisualMessage();
      id v15 = (char *)objc_allocWithZone(v14);
      *(void *)&v15[OBJC_IVAR___MPVisualMessage_vmMessage] = v13;
      *(void *)(v0 + 16) = v15;
      *(void *)(v0 + 24) = v14;
      [v0 init];
    }
  }
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(id))(v0 + 8);
  return v16(v13);
}

uint64_t @objc closure #1 in VisualVoicemailManager.message(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.message(for:), v5, v4);
}

uint64_t @objc closure #1 in VisualVoicemailManager.message(for:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  id v3 = v2;
  id v4 = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = @objc closure #1 in VisualVoicemailManager.message(for:);
  uint64_t v6 = *(void *)(v0 + 16);
  return VisualVoicemailManager.message(for:)(v6);
}

uint64_t @objc closure #1 in VisualVoicemailManager.message(for:)(uint64_t a1)
{
  id v3 = *(void (***)(void, void))(*v1 + 40);
  id v4 = *(void **)(*v1 + 32);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  v3[2](v3, a1);
  _Block_release(v3);
  swift_unknownObjectRelease();
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

uint64_t VisualVoicemailManager.messages(filteredBy:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.messages(filteredBy:), v5, v4);
}

uint64_t VisualVoicemailManager.messages(filteredBy:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  id v3 = *(void **)(v0[11] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  v0[6] = partial apply for closure #1 in VisualVoicemailManager.messages(filteredBy:);
  v0[7] = v4;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed VMVoicemail) -> (@unowned Bool);
  v0[5] = &block_descriptor_10;
  uint64_t v5 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  id v6 = [v3 voicemailsPassingTest:v5];
  _Block_release(v5);
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for VMVoicemail);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo11VMVoicemailCG_11MobilePhone7Message_ps5NeverOTg506_sSo11d3C11e13Phone13Visualg17CIeggo_AbC0E0_ps5H120OIegnrzr_TR04_s11b7Phone22d44VoicemailManagerC8messages10filteredBySayAA7e27_pGSbAaF_pc_tYaFAA0cI0CSo11A5Ccfu_Tf3nnnpf_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t (*)(void *))v0[1];
  return v9(v8);
}

uint64_t closure #1 in VisualVoicemailManager.messages(filteredBy:)(void *a1, uint64_t (*a2)(id, uint64_t))
{
  uint64_t v4 = (objc_class *)type metadata accessor for VisualMessage();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR___MPVisualMessage_vmMessage] = a1;
  v10.id receiver = v5;
  v10.Class super_class = v4;
  id v6 = a1;
  [super init];
  LOBYTE(a2) = a2(v7, v8);

  return a2 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed VMVoicemail) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  id v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t @objc closure #1 in VisualVoicemailManager.messages(filteredBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in VisualVoicemailManager.messages(filteredBy:), v5, v4);
}

uint64_t @objc closure #1 in VisualVoicemailManager.messages(filteredBy:)()
{
  uint64_t v1 = *(const void **)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  id v3 = _Block_copy(*(const void **)(v0 + 16));
  *(void *)(v0 + 40) = _Block_copy(v1);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 48) = v4;
  *(void *)(v4 + 16) = v3;
  id v5 = v2;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  void *v6 = v0;
  v6[1] = @objc closure #1 in VisualVoicemailManager.messages(filteredBy:);
  return VisualVoicemailManager.messages(filteredBy:)((uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Message) -> (@unowned ObjCBool), v4);
}

{
  uint64_t *v0;
  void (**v1)(void, void);
  void *v2;
  Class isa;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void (***)(void, void))(*v0 + 40);
  uint64_t v2 = *(void **)(*v0 + 32);
  id v6 = *v0;
  swift_task_dealloc();
  swift_release();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t VisualVoicemailManager.countOfUnreadMessages()()
{
  *(void *)(v1 + 64) = v0;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(VisualVoicemailManager.countOfUnreadMessages(), v3, v2);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(id);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0[8] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
  v0[6] = specialized implicit closure #1 in VisualVoicemailManager.countOfUnreadMessages();
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed VMVoicemail) -> (@unowned Bool);
  v0[5] = &block_descriptor_11_0;
  uint64_t v2 = _Block_copy(v0 + 2);
  swift_release();
  uint64_t v3 = [v1 countOfVoicemailsPassingTest:v2];
  _Block_release(v2);
  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

id specialized implicit closure #1 in VisualVoicemailManager.countOfUnreadMessages()(void *a1)
{
  return [a1 isRead];
}

void VisualVoicemailManager.init()()
{
}

uint64_t protocol witness for Voicemailmanager_ChangeCallback.listenForChanges(_:) in conformance VisualVoicemailManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  type metadata accessor for VoicemailActor();
  id v10 = v8;
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v12 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  id v13 = (void *)swift_allocObject();
  _OWORD v13[2] = inited;
  void v13[3] = v12;
  v13[4] = v10;
  v13[5] = a1;
  v13[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in VisualVoicemailManager.listenForChanges(_:)partial apply, (uint64_t)v13);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t protocol witness for VoicemailManager_UnreadCount.countOfUnreadMessages() in conformance VisualVoicemailManager()
{
  *(void *)(v1 + 64) = *v0;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(protocol witness for VoicemailManager_UnreadCount.countOfUnreadMessages() in conformance VisualVoicemailManager, v3, v2);
}

{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(id);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0[8] + OBJC_IVAR____TtC11MobilePhone22VisualVoicemailManager_visualVoicemailManager);
  v0[6] = specialized implicit closure #1 in VisualVoicemailManager.countOfUnreadMessages();
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed VMVoicemail) -> (@unowned Bool);
  v0[5] = &block_descriptor_171;
  uint64_t v2 = _Block_copy(v0 + 2);
  swift_release();
  uint64_t v3 = [v1 countOfVoicemailsPassingTest:v2];
  _Block_release(v2);
  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t VisualVoicemailManager.handleVoiceMailsChangedNotification(notification:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  id v11 = v1;
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v27 = v5;
    uint64_t v15 = v14;
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_getObjectType();
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v28 = Notification.name.getter();
    type metadata accessor for NSNotificationName(0);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s is handling %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v27;
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
  type metadata accessor for VoicemailActor();
  id v21 = v11;
  uint64_t inited = swift_initStaticObject();
  unint64_t v23 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = inited;
  *(void *)(v24 + 24) = v23;
  *(void *)(v24 + 32) = v21;
  *(void *)(v24 + 40) = 0;
  *(unsigned char *)(v24 + 48) = 3;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:)partial apply, v24);
  return swift_release();
}

Swift::Void __swiftcall VisualVoicemailManager.voicemailsDidChangeInitial(_:added:deleted:updated:)(Swift::Bool _, Swift::OpaquePointer_optional added, Swift::OpaquePointer_optional deleted, Swift::OpaquePointer_optional updated)
{
  unint64_t rawValue = (unint64_t)deleted.value._rawValue;
  unint64_t v6 = *(void *)&added.is_nil;
  unint64_t v7 = (unint64_t)added.value._rawValue;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.mobilePhone);
  swift_bridgeObjectRetain_n();
  id v13 = v4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v14 = v13;
  uint64_t v15 = Logger.logObject.getter();
  int v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    uint64_t v29 = v15;
    uint64_t v30 = v11;
    int v32 = v16;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v34 = v31;
    *(_DWORD *)uint64_t v17 = 136316162;
    swift_getObjectType();
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v33) = _;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 18) = 2048;
    if (v6)
    {
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      id v11 = v30;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = 0;
      id v11 = v30;
    }
    uint64_t v33 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 28) = 2048;
    if (rawValue)
    {
      id v21 = v29;
      if (rawValue >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v22 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
      id v21 = v29;
    }
    uint64_t v33 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 38) = 2048;
    if (v7)
    {
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v33 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v32, "%s voicemailsDidChangeInitial: %{BOOL}d added: %ld, deleted: %ld, updated: %ld", (uint8_t *)v17, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 1, 1, v24);
  type metadata accessor for VoicemailActor();
  id v25 = v14;
  uint64_t inited = swift_initStaticObject();
  unint64_t v27 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = inited;
  *(void *)(v28 + 24) = v27;
  *(void *)(v28 + 32) = v25;
  *(void *)(v28 + 40) = 0;
  *(unsigned char *)(v28 + 48) = 3;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&closure #1 in VisualVoicemailManager.voicemailsChanged(messageChanges:)partial apply, v28);
  swift_release();
}

Swift::Void __swiftcall VisualVoicemailManager.onlineStatusDidChange()()
{
}

Swift::Void __swiftcall VisualVoicemailManager.capabilitiesDidChange()()
{
}

Swift::Void __swiftcall VisualVoicemailManager.subscriptionStateStatusDidChange()()
{
}

Swift::Void __swiftcall VisualVoicemailManager.syncInProgresDidChange()()
{
}

Swift::Void __swiftcall VisualVoicemailManager.managerStorageUsageDidChange()()
{
}

Swift::Void __swiftcall VisualVoicemailManager.transcribingStatusDidChange()()
{
}

Swift::Void __swiftcall VisualVoicemailManager.accountsDidChange()()
{
}

void VisualVoicemailManager.onlineStatusDidChange()(const char *a1)
{
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.mobilePhone);
  id v9 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    swift_getObjectType();
    uint64_t v7 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, a1, v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall VisualVoicemailManager.delete(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in VisualVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return VisualVoicemailManager.delete(_:)(a5);
}

Swift::Void __swiftcall VisualVoicemailManager.markAsRead(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in VisualVoicemailManager.markAsRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return VisualVoicemailManager.markAsRead(_:)(a5);
}

Swift::Void __swiftcall VisualVoicemailManager.moveToTrash(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in VisualVoicemailManager.moveToTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return VisualVoicemailManager.moveToTrash(_:)(a5);
}

Swift::Void __swiftcall VisualVoicemailManager.removeFromTrash(_:)(Swift::OpaquePointer a1)
{
}

uint64_t VisualVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for VoicemailActor();
  id v10 = v3;
  swift_bridgeObjectRetain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v12 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  id v13 = (void *)swift_allocObject();
  _OWORD v13[2] = inited;
  void v13[3] = v12;
  v13[4] = v10;
  v13[5] = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a3, (uint64_t)v13);
  return swift_release();
}

uint64_t closure #1 in VisualVoicemailManager.removeFromTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return VisualVoicemailManager.removeFromTrash(_:)(a5);
}

uint64_t @objc VisualVoicemailManager.delete(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  type metadata accessor for VoicemailActor();
  id v12 = a1;
  swift_bridgeObjectRetain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v14 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = inited;
  v15[3] = v14;
  v15[4] = v12;
  v15[5] = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, a5, (uint64_t)v15);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100168A60()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.messages(filteredBy:)(void *a1)
{
  return closure #1 in VisualVoicemailManager.messages(filteredBy:)(a1, *(uint64_t (**)(id, uint64_t))(v1 + 16));
}

uint64_t objectdestroy_3Tm_0()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.delete(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.delete(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.markAsRead(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.markAsRead(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.moveToTrash(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.moveToTrash(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in VisualVoicemailManager.removeFromTrash(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VisualVoicemailManager.removeFromTrash(_:)(a1, v4, v5, v7, v6);
}

uint64_t type metadata accessor for VisualVoicemailManager()
{
  return self;
}

uint64_t closure #1 in VisualVoicemailManager.markAsRead(_:)partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in VisualVoicemailManager.markAsRead(_:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_23Tm()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100168F3C()
{
  _Block_release(*(const void **)(v0 + 16));
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.messages(filteredBy:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.messages(filteredBy:)
                                                         + async function pointer to @objc closure #1 in VisualVoicemailManager.messages(filteredBy:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Message) -> (@unowned ObjCBool)(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned Message) -> (@unowned ObjCBool)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.message(for:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.message(for:)
                                                         + async function pointer to @objc closure #1 in VisualVoicemailManager.message(for:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.removeFromTrash(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.removeFromTrash(_:)
                                                         + async function pointer to @objc closure #1 in VisualVoicemailManager.removeFromTrash(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.moveToTrash(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.moveToTrash(_:)
                                                         + async function pointer to @objc closure #1 in VisualVoicemailManager.moveToTrash(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.markAsRead(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.markAsRead(_:)
                                                         + async function pointer to @objc closure #1 in VisualVoicemailManager.markAsRead(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.delete(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.delete(_:)
                                                         + async function pointer to @objc closure #1 in VisualVoicemailManager.delete(_:));
  return v6(v2, v3, v4);
}

uint64_t sub_100169408()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for @objc closure #1 in VisualVoicemailManager.fetchMessages()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in VisualVoicemailManager.fetchMessages()
                                                + async function pointer to @objc closure #1 in VisualVoicemailManager.fetchMessages());
  return v5(v2, v3);
}

uint64_t sub_1001694FC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t objectdestroyTm_3()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t outlined consume of VoicemailManagerMessageChanges?(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t LegacyVoicemail.accountID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___MPLegacyVoicemail_accountID;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t LegacyVoicemail.label.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MPLegacyVoicemail_label);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LegacyVoicemail.hasUnreadMessages.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___MPLegacyVoicemail_hasUnreadMessages);
}

id LegacyVoicemail.__allocating_init(accountID:label:hasUnreadMessages:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = objc_allocWithZone(v4);
  uint64_t v10 = &v9[OBJC_IVAR___MPLegacyVoicemail_accountID];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  id v13 = &v9[OBJC_IVAR___MPLegacyVoicemail_label];
  *id v13 = a2;
  v13[1] = a3;
  v9[OBJC_IVAR___MPLegacyVoicemail_hasUnreadMessages] = a4;
  v16.id receiver = v9;
  v16.Class super_class = v4;
  id v14 = [super init];
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id LegacyVoicemail.init(accountID:label:hasUnreadMessages:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = &v4[OBJC_IVAR___MPLegacyVoicemail_accountID];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  uint64_t v12 = &v4[OBJC_IVAR___MPLegacyVoicemail_label];
  *uint64_t v12 = a2;
  v12[1] = a3;
  v4[OBJC_IVAR___MPLegacyVoicemail_hasUnreadMessages] = a4;
  v15.id receiver = v4;
  v15.Class super_class = (Class)type metadata accessor for LegacyVoicemail();
  [super init];
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v13;
}

uint64_t type metadata accessor for LegacyVoicemail()
{
  uint64_t result = type metadata singleton initialization cache for LegacyVoicemail;
  if (!type metadata singleton initialization cache for LegacyVoicemail) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t one-time initialization function for mock()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v4 = (objc_class *)type metadata accessor for LegacyVoicemail();
  uint64_t v5 = objc_allocWithZone(v4);
  (*(void (**)(unsigned char *, char *, uint64_t))(v1 + 16))(&v5[OBJC_IVAR___MPLegacyVoicemail_accountID], v3, v0);
  uint64_t v6 = &v5[OBJC_IVAR___MPLegacyVoicemail_label];
  void *v6 = 0x7972616D697250;
  v6[1] = 0xE700000000000000;
  v5[OBJC_IVAR___MPLegacyVoicemail_hasUnreadMessages] = 1;
  v9.id receiver = v5;
  v9.Class super_class = v4;
  id v7 = [super init];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  static LegacyVoicemail.mock = (uint64_t)v7;
  return result;
}

uint64_t *LegacyVoicemail.mock.unsafeMutableAddressor()
{
  if (one-time initialization token for mock != -1) {
    swift_once();
  }
  return &static LegacyVoicemail.mock;
}

id static LegacyVoicemail.mock.getter()
{
  if (one-time initialization token for mock != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static LegacyVoicemail.mock;

  return v0;
}

void LegacyVoicemail.init()()
{
}

id LegacyVoicemail.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LegacyVoicemail();
  [super dealloc];
}

uint64_t ObjC metadata update function for LegacyVoicemail()
{
  return type metadata accessor for LegacyVoicemail();
}

uint64_t type metadata completion function for LegacyVoicemail()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone9FTMessageCG_10Foundation4UUIDVs5NeverOTg504_s11d81Phone24FaceTimeVoicemailManagerC6deleteyySayAA7Message_pGYaF10Foundation4UUIDVAA9F52Ccfu_32a1e8d92dfce090f96edd9d552be76dbaAkITf3nnnpk_nTf1cn_n(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (!v7) {
      return (uint64_t)v8;
    }
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v17;
    unint64_t v15 = a1 & 0xC000000000000001;
    v14[1] = v2;
    _OWORD v14[2] = v4 + 32;
    unint64_t v11 = a1;
    while (v7 != v10)
    {
      if (v15) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      swift_beginAccess();
      swift_retain();
      dispatch thunk of Message.recordUUID.getter();
      swift_endAccess();
      swift_release_n();
      uint64_t v17 = v8;
      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      unint64_t v2 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v17;
      }
      ++v10;
      _OWORD v8[2] = v2;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13, v6, v16);
      a1 = v11;
      if (v7 == v10) {
        return (uint64_t)v8;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, unsigned int (**a2)(void, void))
{
  *(void *)(swift_allocObject() + 16) = a2;
  if (a1 >> 62)
  {
LABEL_16:
    _Block_copy(a2);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    _Block_copy(a2);
    if (v4)
    {
LABEL_3:
      unint64_t v5 = 0;
      uint64_t v9 = v4;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v7 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
LABEL_13:
            __break(1u);
            break;
          }
        }
        else
        {
          if (v5 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
          swift_unknownObjectRetain();
          unint64_t v7 = v5 + 1;
          if (__OFADD__(v5, 1)) {
            goto LABEL_13;
          }
        }
        if (a2[2](a2, v6))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = v9;
        }
        else
        {
          swift_unknownObjectRelease();
        }
        ++v5;
      }
      while (v7 != v4);
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  _Block_release(a2);
  return _swiftEmptyArrayStorage;
}

uint64_t FaceTimeVoicemailManager.__allocating_init(onVoicemailsChanged:messageStoreController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)(a1, a2, (uint64_t)v11, v6, v7, v8);
  __swift_destroy_boxed_opaque_existential_0(a3);
  return v13;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Message) -> (@unowned ObjCBool)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

Swift::Void __swiftcall VoiceMailAnalyticsLogger.logEvent(_:withCoreAnalyticsDictionary:)(Swift::String _, Swift::OpaquePointer withCoreAnalyticsDictionary)
{
  uint64_t v3 = v2;
  id object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3, v7);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v24 = v22;
    uint64_t aBlock = countAndFlagsBits;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v26 = (uint64_t)object;
    swift_bridgeObjectRetain();
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v23 = countAndFlagsBits;
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t aBlock = (uint64_t)withCoreAnalyticsDictionary._rawValue;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
    uint64_t v16 = String.init<A>(reflecting:)();
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "VoiceMailAnalyticsLogger: logging core analytics for event of %s with dictionary %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  NSString v18 = String._bridgeToObjectiveC()();
  unint64_t v19 = (Swift::OpaquePointer *)swift_allocObject();
  v19[2]._unint64_t rawValue = withCoreAnalyticsDictionary._rawValue;
  uint64_t v29 = partial apply for closure #1 in VoiceMailAnalyticsLogger.logEvent(_:withCoreAnalyticsDictionary:);
  uint64_t v30 = v19;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  unint64_t v27 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  uint64_t v28 = &block_descriptor_11;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);
}

uint64_t FaceTimeVoicemailManager.onVoicemailsChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v1);
  return v1;
}

uint64_t FaceTimeVoicemailManager.operationQueue.getter()
{
  return swift_retain();
}

uint64_t FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)(a1, a2, (uint64_t)v11, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_0(a3);
  return v13;
}

uint64_t FaceTimeVoicemailManager.__allocating_init(messageStoreController:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  FaceTimeVoicemailManager.init(messageStoreController:)(a1);
  return v2;
}

uint64_t FaceTimeVoicemailManager.init(messageStoreController:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TaskPriority();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v6 = one-time initialization token for mobilePhone;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.mobilePhone);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  v9(v2 + v5, v8, v7);
  v9(v2 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_analyticsReporter, v8, v7);
  *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_providers) = &outlined read-only object #0 of FaceTimeVoicemailManager.init(messageStoreController:);
  *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes) = &outlined read-only object #1 of FaceTimeVoicemailManager.init(messageStoreController:);
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messagesChangedPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  swift_allocObject();
  *(void *)(v2 + v10) = PassthroughSubject.init()();
  uint64_t v11 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_operationQueue;
  type metadata accessor for TaskQueue();
  static TaskPriority.high.getter();
  *(void *)(v2 + v11) = TaskQueue.__allocating_init(priority:)();
  uint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged);
  *uint64_t v12 = 0;
  v12[1] = 0;
  outlined init with copy of Tip((uint64_t)a1, v2 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  swift_release();
  *(void *)(v2 + 16) = 0x8000000000000000;
  *(void *)(v2 + 24) = _swiftEmptyArrayStorage;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_0(a1, v13);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8);
  uint64_t v16 = swift_retain();
  v15(v16, v13, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v2;
}

uint64_t FaceTimeVoicemailManager.__ivar_destroyer()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of VoiceMailAnalyticsLogger(v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_analyticsReporter, type metadata accessor for VoiceMailAnalyticsLogger);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0
                                                                         + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged));
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t FaceTimeVoicemailManager.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 24);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 32);
  __swift_project_boxed_opaque_existential_0((void *)(v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController), v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v0, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  outlined destroy of VoiceMailAnalyticsLogger(v1 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_analyticsReporter, type metadata accessor for VoiceMailAnalyticsLogger);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v1
                                                                         + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged));
  __swift_destroy_boxed_opaque_existential_0(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t FaceTimeVoicemailManager.__deallocating_deinit()
{
  FaceTimeVoicemailManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t FaceTimeVoicemailManager.listenForChanges(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for VoicemailActor();
  swift_retain();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  uint64_t v10 = _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = inited;
  _OWORD v11[3] = v10;
  void v11[4] = v2;
  _OWORD v11[5] = a1;
  void v11[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in FaceTimeVoicemailManager.listenForChanges(_:), (uint64_t)v11);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}