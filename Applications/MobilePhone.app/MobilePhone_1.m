uint64_t closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a1;
  v6[4] = a4;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.listenForChanges(_:), v8, v7);
}

uint64_t closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  v3 = (uint64_t *)v0[3];
  v0[2] = *(void *)(v0[4] + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messagesChangedPublisher);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<VoicemailManagerMessageChanges, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  uint64_t v5 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t *v3 = v5;
  v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(uint64_t a1, char a2)
{
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    uint64_t v7 = swift_bridgeObjectRetain();
    unint64_t v8 = VoicemailManagerMessageChanges.description.getter(v7, a2);
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FaceTimeVoicemailManager: Is notifying listeners of messageChanges: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  *(unsigned char *)(v12 + 32) = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 49) = a3;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = a2;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.voicemailsChanged(messageChanges:), v5, v4);
}

uint64_t closure #1 in FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = *(void (**)(void))(Strong + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged);
    if (v2) {
      v2();
    }
    char v3 = *(unsigned char *)(v0 + 49);
    *(void *)(v0 + 40) = *(void *)(v0 + 64);
    *(unsigned char *)(v0 + 48) = v3;
    PassthroughSubject.send(_:)();
    swift_release();
  }
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore();
  }
  else {
    uint64_t v4 = closure #1 in implicit closure #1 in FaceTimeVoicemailManager.fetchMessagesFromDataStore();
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t FaceTimeVoicemailManager.message(for:)(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v4 = type metadata accessor for MessageStoreFetchRequest.QuerySearchType();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  uint64_t Options = type metadata accessor for MessageFetchOptions();
  v2[11] = Options;
  v2[12] = *(void *)(Options - 8);
  v2[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MessageStoreQuery();
  v2[14] = v6;
  v2[15] = *(void *)(v6 - 8);
  v2[16] = swift_task_alloc();
  uint64_t Request = type metadata accessor for MessageStoreFetchRequest();
  v2[17] = Request;
  v2[18] = *(void *)(Request - 8);
  v2[19] = swift_task_alloc();
  v2[20] = type metadata accessor for MessageID.Value(0);
  v2[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v2[22] = v8;
  v2[23] = *(void *)(v8 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = type metadata accessor for VoicemailActor();
  v2[27] = swift_initStaticObject();
  unint64_t v9 = (void *)swift_task_alloc();
  v2[28] = v9;
  *unint64_t v9 = v2;
  v9[1] = FaceTimeVoicemailManager.message(for:);
  return CachedVoicemailManager.message(for:)(a1);
}

{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[29] = a1;
  swift_task_dealloc();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[30] = v4;
  v2[31] = v3;
  return _swift_task_switch(FaceTimeVoicemailManager.message(for:), v4, v3);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 280) = a1;
  *(void *)(v4 + 288) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 248);
  uint64_t v6 = *(void *)(v3 + 240);
  if (v1) {
    uint64_t v7 = FaceTimeVoicemailManager.message(for:);
  }
  else {
    uint64_t v7 = FaceTimeVoicemailManager.message(for:);
  }
  return _swift_task_switch(v7, v6, v5);
}

uint64_t FaceTimeVoicemailManager.message(for:)()
{
  uint64_t v1 = v0[29];
  if (!v1)
  {
    outlined init with copy of MessageID.Value(v0[6] + OBJC_IVAR___MPMessageID_value, v0[21]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v2 = v0[25];
      uint64_t v4 = v0[22];
      uint64_t v3 = v0[23];
      uint64_t v5 = v0[15];
      v26 = (uint64_t *)v0[16];
      uint64_t v27 = v0[14];
      uint64_t v6 = v0[9];
      uint64_t v28 = v0[10];
      uint64_t v29 = v0[8];
      uint64_t v32 = v0[7];
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v2, v0[21], v4);
      uint64_t v7 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
      unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1002053C0;
      unint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16);
      v0[32] = v10;
      v0[33] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v10(v9 + v8, v2, v4);
      *(void *)(v7 + 16) = v9;
      uint64_t *v26 = v7;
      (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v26, enum case for MessageStoreQuery.recordUUID(_:), v27);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MessageFetchOptions>);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1002053C0;
      static MessageFetchOptions.includeProtectedApps.getter();
      v0[3] = v11;
      _s11MobilePhone14VoicemailActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type MessageFetchOptions and conformance MessageFetchOptions, (void (*)(uint64_t))&type metadata accessor for MessageFetchOptions);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MessageFetchOptions]);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [MessageFetchOptions] and conformance [A], &demangling cache variable for type metadata for [MessageFetchOptions]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v28, enum case for MessageStoreFetchRequest.QuerySearchType.unsorted(_:), v29);
      MessageStoreFetchRequest.init(query:sortType:options:pageSize:page:originatingBundleID:)();
      uint64_t v12 = *(void *)(v32 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 24);
      uint64_t v13 = *(void *)(v32 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 32);
      __swift_project_boxed_opaque_existential_0((void *)(v32 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController), v12);
      v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 40) + **(int **)(v13 + 40));
      uint64_t v14 = (void *)swift_task_alloc();
      v0[34] = v14;
      *uint64_t v14 = v0;
      v14[1] = FaceTimeVoicemailManager.message(for:);
      uint64_t v15 = v0[19];
      return v30(v15, v12, v13);
    }
    v17 = (void *)v0[6];
    outlined destroy of VoiceMailAnalyticsLogger(v0[21], type metadata accessor for MessageID.Value);
    id v18 = v17;
    v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    v22 = v0[6];
    if (v21)
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v31 = (void *)swift_slowAlloc();
      *(_DWORD *)v23 = 138543362;
      v0[2] = v22;
      v24 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v22;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "FaceTimeVoicemailManager received the incorrect type %{public}@ when it expected a uuid", v23, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v19 = v22;
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v25 = (uint64_t (*)(uint64_t))v0[1];
  return v25(v1);
}

{
  void *v0;
  unint64_t v1;
  uint64_t result;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  Swift::OpaquePointer v24;
  uint64_t v25;

  uint64_t v1 = v0[35];
  result = (*(uint64_t (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  if (v1 >> 62) {
    goto LABEL_17;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        uint64_t v3 = *(id *)(v0[35] + 32);
      }
      uint64_t v4 = v0[7];
      swift_bridgeObjectRelease();
      type metadata accessor for FTMessage(0);
      swift_allocObject();
      uint64_t v5 = FTMessage.init(ftMessage:)((uint64_t)v3);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes);
      uint64_t v1 = (unint64_t)v3;
      swift_bridgeObjectRetain();
      dispatch thunk of Message.messageType.getter();
      uint64_t v7 = *(void *)(v6 + 16);
      if (!v7) {
        goto LABEL_15;
      }
      swift_bridgeObjectRetain();
      unint64_t v8 = (unsigned __int16)MessageType.rawValue.getter();
      if (v8 == (unsigned __int16)MessageType.rawValue.getter())
      {
LABEL_8:
        uint64_t v9 = v0[25];
        unint64_t v10 = v0[22];
        uint64_t v11 = v0[23];
        swift_bridgeObjectRelease_n();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_1002053A0;
        *(void *)(v12 + 32) = v5;
        v24._rawValue = (void *)v12;
        specialized Array._endMutation()();
        swift_retain();
        FaceTimeVoicemailManager.addMessagesHandlingError(messages:)(v24);

        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
        goto LABEL_19;
      }
      if (v7 == 1)
      {
LABEL_14:
        swift_bridgeObjectRelease();
LABEL_15:
        v16 = v0[25];
        v17 = v0[22];
        id v18 = v0[23];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);

        goto LABEL_19;
      }
      uint64_t v13 = 17;
      while (1)
      {
        uint64_t v14 = v13 - 15;
        if (__OFADD__(v13 - 16, 1)) {
          break;
        }
        uint64_t v15 = (unsigned __int16)MessageType.rawValue.getter();
        if (v15 == (unsigned __int16)MessageType.rawValue.getter()) {
          goto LABEL_8;
        }
        ++v13;
        if (v14 == v7) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
    }
    while (v19);
  }
  os_log_type_t v20 = v0[25];
  BOOL v21 = v0[22];
  v22 = v0[23];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  uint64_t v5 = 0;
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v23 = (uint64_t (*)(uint64_t))v0[1];
  return v23(v5);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(void);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  v26 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[32];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[22];
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  v1(v3, v2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[24];
    v24 = v0[25];
    unint64_t v8 = v0[22];
    uint64_t v9 = v0[23];
    unint64_t v10 = swift_slowAlloc();
    v22 = (void *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136446466;
    _s11MobilePhone14VoicemailActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    v23 = v8;
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v7, v8);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    NSObject *v22 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "FaceTimeVoiceMailManager failed to retrieve message for uuid %{public}s because the message store threw an error %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v13(v24, v23);
  }
  else
  {
    v16 = v0[24];
    uint64_t v15 = v0[25];
    v17 = v0[22];
    id v18 = v0[23];
    swift_errorRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v19(v16, v17);
    swift_errorRelease();
    swift_errorRelease();

    v19(v15, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v20 = (uint64_t (*)(void))v0[1];
  return v20(0);
}

Swift::Void __swiftcall FaceTimeVoicemailManager.addMessagesHandlingError(messages:)(Swift::OpaquePointer messages)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16) >> 62;
  if (!v4)
  {
    uint64_t v5 = (Swift::OpaquePointer *)swift_allocObject();
    v5[2]._rawValue = messages._rawValue;
    uint64_t v6 = (void *)(v1 + 24);
    swift_beginAccess();
    uint64_t v7 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      void *v6 = v7;
    }
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
      void *v6 = v7;
    }
    v7[2] = v10 + 1;
    uint64_t v11 = &v7[2 * v10];
    v11[4] = _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA_0;
    v11[5] = v5;
    swift_endAccess();
    goto LABEL_11;
  }
  if (v4 != 1)
  {
LABEL_11:
    lazy protocol witness table accessor for type CachedVoicemailManager.Error and conformance CachedVoicemailManager.Error();
    swift_willThrowTypedImpl();
    return;
  }
  swift_retain();
  CachedVoicemailManager.Cache.add(_:shouldSort:)((unint64_t)messages._rawValue, 1);
  swift_release();

  FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)((uint64_t)messages._rawValue, 1);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.message(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.message(for:), v5, v4);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.message(for:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  void *v3 = v0;
  v3[1] = @objc closure #1 in CachedVoicemailManager.message(for:);
  uint64_t v4 = *(void *)(v0 + 16);
  return FaceTimeVoicemailManager.message(for:)(v4);
}

void FaceTimeVoicemailManager.init()()
{
}

Swift::Void __swiftcall FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[25] = a2;
  v3[26] = a3;
  v3[24] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.messageStoreDidAddMessages(_:), v5, v4);
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)()
{
  unint64_t v68 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  if (!Strong)
  {
    LOBYTE(inited) = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v3, (os_log_type_t)inited);
    unint64_t v9 = *(void *)(v0 + 208);
    if (!v8)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 134217984;
    if (!(v9 >> 62))
    {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      *(void *)(v0 + 168) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, (os_log_type_t)inited, "ignoring %ld added messages, no more self", v10, 0xCu);
      swift_slowDealloc();
LABEL_45:

      goto LABEL_73;
    }
LABEL_79:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  os_log_type_t v4 = static os_log_type_t.default.getter();
  unint64_t v63 = v0;
  v61 = (uint64_t *)(v0 + 176);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t inited = swift_slowAlloc();
    v67 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t inited = 136315138;
    type metadata accessor for Message();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "messageStoreDidAddMessages: %s", (uint8_t *)inited, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(Strong + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes);
  v67 = _swiftEmptyArrayStorage;
  if ((unint64_t)v12 >> 62) {
    goto LABEL_49;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = v12;
LABEL_11:
  if (v14)
  {
    unint64_t v0 = 0;
    uint64_t v64 = v12 & 0xFFFFFFFFFFFFFF8;
    unint64_t v65 = v12 & 0xC000000000000001;
    uint64_t v16 = v15 + 32;
    while (1)
    {
      if (v65)
      {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v0 >= *(void *)(v64 + 16)) {
          goto LABEL_47;
        }
        id v17 = *(id *)(v16 + 8 * v0);
      }
      id v18 = v17;
      if (__OFADD__(v0++, 1)) {
        goto LABEL_48;
      }
      uint64_t v12 = (uint64_t)v17;
      uint64_t v20 = dispatch thunk of Message.messageType.getter();
      uint64_t inited = *(void *)(v13 + 16);
      if (inited)
      {
        uint64_t v12 = v20;
        swift_bridgeObjectRetain();
        int v21 = (unsigned __int16)MessageType.rawValue.getter();
        if (v21 == (unsigned __int16)MessageType.rawValue.getter())
        {
LABEL_22:
          swift_bridgeObjectRelease();
          uint64_t v12 = (uint64_t)&v67;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_15;
        }
        if (inited != 1)
        {
          uint64_t v22 = 17;
          while (1)
          {
            uint64_t v23 = v22 - 15;
            if (__OFADD__(v22 - 16, 1)) {
              break;
            }
            int v24 = (unsigned __int16)MessageType.rawValue.getter();
            if (v24 == (unsigned __int16)MessageType.rawValue.getter()) {
              goto LABEL_22;
            }
            ++v22;
            if (v23 == inited) {
              goto LABEL_13;
            }
          }
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          if (v12 < 0) {
            unint64_t v0 = v12;
          }
          else {
            unint64_t v0 = v12 & 0xFFFFFFFFFFFFFF8;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v15 = *(void *)(v63 + 208);
          goto LABEL_11;
        }
LABEL_13:
        swift_bridgeObjectRelease();
      }

LABEL_15:
      if (v0 == v14)
      {
        uint64_t v66 = (uint64_t)v67;
        goto LABEL_32;
      }
    }
  }
  uint64_t v66 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = ((unint64_t)v66 >> 62) & 1;
  if (v66 < 0) {
    LODWORD(v25) = 1;
  }
  int v62 = v25;
  if (v25)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    if (!v26) {
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v26 = *(void *)(v66 + 16);
    swift_bridgeObjectRetain();
    if (!v26) {
      goto LABEL_54;
    }
  }
  if (v26 < 1)
  {
    __break(1u);
    goto LABEL_77;
  }
  for (uint64_t i = 0; i != v26; ++i)
  {
    if ((v66 & 0xC000000000000001) != 0) {
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v28 = *(id *)(v66 + 8 * i + 32);
    }
    uint64_t v29 = v28;
    uint64_t v30 = dispatch thunk of Message.fileSize.getter();
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = v30;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSNumber)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100207520;
      *(void *)(inited + 32) = 0x6D766C5F7369;
      *(void *)(inited + 40) = 0xE600000000000000;
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      dispatch thunk of Message.messageType.getter();
      int v33 = (unsigned __int16)MessageType.rawValue.getter();
      Swift::Bool v34 = v33 == (unsigned __int16)MessageType.rawValue.getter();
      *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(v34);
      *(void *)(inited + 56) = 0x6D76765F7369;
      *(void *)(inited + 64) = 0xE600000000000000;
      dispatch thunk of Message.messageType.getter();
      int v35 = (unsigned __int16)MessageType.rawValue.getter();
      Swift::Bool v36 = v35 == (unsigned __int16)MessageType.rawValue.getter();
      *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(v36);
      *(void *)(inited + 80) = 0x6E6F697461727564;
      *(void *)(inited + 88) = 0xE800000000000000;
      dispatch thunk of Message.duration.getter();
      *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNumber) initWithDouble:round(v37)];
      *(void *)(inited + 104) = 0xD000000000000011;
      *(void *)(inited + 112) = 0x8000000100242200;
      *(void *)(inited + 120) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v32];
      unint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v38);
      v40._rawValue = v39;
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 0xD00000000000002DLL;
      v41._object = (void *)0x8000000100242220;
      VoiceMailAnalyticsLogger.logEvent(_:withCoreAnalyticsDictionary:)(v41, v40);
      swift_bridgeObjectRelease();
    }
  }
LABEL_54:
  swift_release();
  swift_bridgeObjectRetain_n();
  v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  unint64_t v10 = (uint8_t *)v43;
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    v67 = (void *)swift_slowAlloc();
    *(_DWORD *)v44 = 136315138;
    LOBYTE(inited) = (_BYTE)v44 + 4;
    type metadata accessor for Message();
    swift_bridgeObjectRetain();
    uint64_t v45 = Array.description.getter();
    unint64_t v47 = v46;
    swift_release();
    uint64_t *v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v10, "messageStoreDidAddMessages(filtered): %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v26) {
      goto LABEL_56;
    }
LABEL_59:
    swift_release();
    swift_release();
    unint64_t v0 = v63;
    goto LABEL_73;
  }

  swift_release_n();
  if (!v26) {
    goto LABEL_59;
  }
LABEL_56:
  if (v62)
  {
    swift_bridgeObjectRetain();
    unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    unint64_t v0 = *(void *)(v66 + 16);
  }
  if (!v0)
  {
    swift_release();
    unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_70;
  }
  v67 = _swiftEmptyArrayStorage;
  uint64_t v3 = &v67;
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v0 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v48 = 0;
  do
  {
    if ((v66 & 0xC000000000000001) != 0) {
      id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v49 = *(id *)(v66 + 8 * v48 + 32);
    }
    id v50 = v49;
    ++v48;
    type metadata accessor for FTMessage(0);
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 24) = 0;
    *(unsigned char *)(v51 + 32) = 1;
    *(_WORD *)(v51 + 33) = 514;
    uint64_t v52 = v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL;
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56);
    v54(v52, 1, 1, v53);
    v54(v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, 1, 1, v53);
    v54(v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, 1, 1, v53);
    uint64_t v55 = v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData;
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
    *(void *)(v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = 1;
    *(unsigned char *)(v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) = 0;
    *(unsigned char *)(v51 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 0;
    *(void *)(v51 + 16) = v50;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v0 != v48);
  unint64_t v57 = (unint64_t)v67;
  swift_release();
LABEL_70:
  unint64_t v0 = v63;
  if (v57 >> 62)
  {
LABEL_77:
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
    uint64_t v58 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  uint64_t v58 = v57;
LABEL_72:
  swift_bridgeObjectRelease();
  FaceTimeVoicemailManager.addMessagesHandlingError(messages:)((Swift::OpaquePointer)v58);
  swift_bridgeObjectRelease();
  swift_release();
LABEL_73:
  v59 = *(uint64_t (**)(void))(v0 + 8);
  return v59();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.messageStoreDidUpdateMessages(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidUpdateMessages(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.messageStoreDidUpdateMessages(_:), v5, v4);
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidUpdateMessages(_:)()
{
  uint64_t v59 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  uint64_t v53 = Strong;
  if (Strong)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    uint64_t v52 = v0;
    uint64_t v51 = (uint64_t *)(v0 + 40);
    if (os_log_type_enabled(v2, v3))
    {
      logb = v2;
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      type metadata accessor for Message();
      swift_bridgeObjectRetain();
      uint64_t v5 = Array.description.getter();
      unint64_t v7 = v6;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, logb, v3, "messageStoreDidUpdateMessages: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v53 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes);
    uint64_t v58 = _swiftEmptyArrayStorage;
    if (v13 >> 62) {
      goto LABEL_51;
    }
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = v13;
LABEL_11:
    unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v54 = v15;
    if (v15)
    {
      unint64_t v18 = 0;
      os_log_t log = (os_log_t)(v13 & 0xC000000000000001);
      uint64_t v19 = v13 & 0xFFFFFFFFFFFFFF8;
      unint64_t v20 = v16 + 32;
      uint64_t v0 = v15;
      while (1)
      {
        while (1)
        {
          if (log)
          {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v18 >= *(void *)(v19 + 16)) {
              goto LABEL_49;
            }
            id v21 = *(id *)(v20 + 8 * v18);
          }
          uint64_t v22 = v21;
          if (__OFADD__(v18++, 1)) {
            goto LABEL_50;
          }
          unint64_t v13 = (unint64_t)v21;
          uint64_t v24 = dispatch thunk of Message.messageType.getter();
          uint64_t v25 = *(void *)(v14 + 16);
          if (v25) {
            break;
          }

          if (v18 == v0) {
            goto LABEL_30;
          }
        }
        unint64_t v13 = v24;
        swift_bridgeObjectRetain();
        int v26 = (unsigned __int16)MessageType.rawValue.getter();
        if (v26 == (unsigned __int16)MessageType.rawValue.getter())
        {
LABEL_20:
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v13 = (unint64_t)&v58;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          if (v25 != 1)
          {
            uint64_t v0 = 17;
            while (1)
            {
              uint64_t v27 = v0 - 15;
              if (__OFADD__(v0 - 16, 1)) {
                break;
              }
              int v28 = (unsigned __int16)MessageType.rawValue.getter();
              if (v28 == (unsigned __int16)MessageType.rawValue.getter()) {
                goto LABEL_20;
              }
              ++v0;
              if (v27 == v25) {
                goto LABEL_26;
              }
            }
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
            unint64_t v16 = *(void *)(v0 + 64);
            goto LABEL_11;
          }
LABEL_26:
          swift_bridgeObjectRelease();
        }
        uint64_t v0 = v54;
        if (v18 == v54)
        {
LABEL_30:
          unint64_t v17 = (unint64_t)v58;
          uint64_t v0 = v52;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)char v31 = 136315138;
      type metadata accessor for Message();
      swift_bridgeObjectRetain();
      uint64_t v32 = Array.description.getter();
      unint64_t v34 = v33;
      swift_release();
      *uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v0 = v52;
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "messageStoreDidUpdateMessages(filtered): %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    if ((v17 & 0x8000000000000000) != 0 || (v17 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v48)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v35)
        {
          swift_release();
          unint64_t v46 = (unint64_t)_swiftEmptyArrayStorage;
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
          {
LABEL_44:
            swift_bridgeObjectRetain();
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            uint64_t v47 = v46;
LABEL_45:
            swift_bridgeObjectRelease();
            FaceTimeVoicemailManager.updateMessagesHandlingError(messages:)((Swift::OpaquePointer)v47);
            swift_bridgeObjectRelease();
LABEL_57:
            swift_release();
            goto LABEL_58;
          }
LABEL_63:
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
          uint64_t v47 = _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
          goto LABEL_45;
        }
        uint64_t v58 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v35 & 0x8000000000000000) == 0)
        {
LABEL_38:
          uint64_t v36 = 0;
          os_log_t loga = (os_log_t)(v17 & 0xC000000000000001);
          double v37 = (void *)v17;
          do
          {
            if (loga) {
              id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v38 = *(id *)(v17 + 8 * v36 + 32);
            }
            id v39 = v38;
            ++v36;
            type metadata accessor for FTMessage(0);
            uint64_t v40 = swift_allocObject();
            *(void *)(v40 + 24) = 0;
            *(unsigned char *)(v40 + 32) = 1;
            *(_WORD *)(v40 + 33) = 514;
            uint64_t v41 = v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL;
            uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            os_log_type_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
            v43(v41, 1, 1, v42);
            v43(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, 1, 1, v42);
            v43(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, 1, 1, v42);
            uint64_t v44 = v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData;
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 1, 1, v45);
            *(void *)(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = 1;
            *(unsigned char *)(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) = 0;
            *(unsigned char *)(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 0;
            *(void *)(v40 + 16) = v39;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            unint64_t v17 = (unint64_t)v37;
          }
          while (v35 != v36);
          unint64_t v46 = (unint64_t)v58;
          swift_release();
          uint64_t v0 = v52;
          if (!(v46 >> 62)) {
            goto LABEL_44;
          }
          goto LABEL_63;
        }
        __break(1u);
      }
    }
    else
    {
      uint64_t v35 = *(void *)(v17 + 16);
      if (v35)
      {
        uint64_t v58 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        goto LABEL_38;
      }
    }
    swift_release();
    goto LABEL_57;
  }
  uint64_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v2, (os_log_type_t)v8);
  unint64_t v10 = *(void *)(v0 + 64);
  if (v9)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 40) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, (os_log_type_t)v8, "ignoring %ld updated messages, no more self", v11, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

LABEL_58:
  id v49 = *(uint64_t (**)(void))(v0 + 8);
  return v49();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.updateMessagesHandlingError(messages:)(Swift::OpaquePointer messages)
{
  _s11MobilePhone22CachedVoicemailManagerC14updateMessages8messagesySayAA7Message_pG_tAC5ErrorOYKF((unint64_t)messages._rawValue, &v2);
  FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)((uint64_t)messages._rawValue, 2);
}

Swift::Void __swiftcall FaceTimeVoicemailManager.messageStoreDidDeleteMessages(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessages(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessages(_:), v5, v4);
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessages(_:)()
{
  uint64_t v59 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v53 = Strong;
  if (Strong)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    uint64_t v52 = v0;
    uint64_t v51 = (uint64_t *)(v0 + 40);
    if (os_log_type_enabled(v2, v3))
    {
      logb = v2;
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      type metadata accessor for Message();
      swift_bridgeObjectRetain();
      uint64_t v5 = Array.description.getter();
      unint64_t v7 = v6;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, logb, v3, "messageStoreDidMoveToTrashMessages: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v53 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes);
    uint64_t v58 = _swiftEmptyArrayStorage;
    if (v13 >> 62) {
      goto LABEL_51;
    }
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = v13;
LABEL_11:
    unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v54 = v15;
    if (v15)
    {
      unint64_t v18 = 0;
      os_log_t log = (os_log_t)(v13 & 0xC000000000000001);
      uint64_t v19 = v13 & 0xFFFFFFFFFFFFFF8;
      unint64_t v20 = v16 + 32;
      uint64_t v0 = v15;
      while (1)
      {
        while (1)
        {
          if (log)
          {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v18 >= *(void *)(v19 + 16)) {
              goto LABEL_49;
            }
            id v21 = *(id *)(v20 + 8 * v18);
          }
          uint64_t v22 = v21;
          if (__OFADD__(v18++, 1)) {
            goto LABEL_50;
          }
          unint64_t v13 = (unint64_t)v21;
          uint64_t v24 = dispatch thunk of Message.messageType.getter();
          uint64_t v25 = *(void *)(v14 + 16);
          if (v25) {
            break;
          }

          if (v18 == v0) {
            goto LABEL_30;
          }
        }
        unint64_t v13 = v24;
        swift_bridgeObjectRetain();
        int v26 = (unsigned __int16)MessageType.rawValue.getter();
        if (v26 == (unsigned __int16)MessageType.rawValue.getter())
        {
LABEL_20:
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v13 = (unint64_t)&v58;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          if (v25 != 1)
          {
            uint64_t v0 = 17;
            while (1)
            {
              uint64_t v27 = v0 - 15;
              if (__OFADD__(v0 - 16, 1)) {
                break;
              }
              int v28 = (unsigned __int16)MessageType.rawValue.getter();
              if (v28 == (unsigned __int16)MessageType.rawValue.getter()) {
                goto LABEL_20;
              }
              ++v0;
              if (v27 == v25) {
                goto LABEL_26;
              }
            }
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
            unint64_t v16 = *(void *)(v0 + 64);
            goto LABEL_11;
          }
LABEL_26:
          swift_bridgeObjectRelease();
        }
        uint64_t v0 = v54;
        if (v18 == v54)
        {
LABEL_30:
          unint64_t v17 = (unint64_t)v58;
          uint64_t v0 = v52;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)char v31 = 136315138;
      type metadata accessor for Message();
      swift_bridgeObjectRetain();
      uint64_t v32 = Array.description.getter();
      unint64_t v34 = v33;
      swift_release();
      *uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v0 = v52;
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "messageStoreDidMoveToTrashMessages(filtered): %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    if ((v17 & 0x8000000000000000) != 0 || (v17 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v48)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v35)
        {
          swift_release();
          unint64_t v46 = (unint64_t)_swiftEmptyArrayStorage;
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
          {
LABEL_44:
            swift_bridgeObjectRetain();
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            uint64_t v47 = v46;
LABEL_45:
            swift_bridgeObjectRelease();
            FaceTimeVoicemailManager.updateMessagesHandlingError(messages:)((Swift::OpaquePointer)v47);
            swift_bridgeObjectRelease();
LABEL_57:
            swift_release();
            goto LABEL_58;
          }
LABEL_63:
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
          uint64_t v47 = _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
          goto LABEL_45;
        }
        uint64_t v58 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v35 & 0x8000000000000000) == 0)
        {
LABEL_38:
          uint64_t v36 = 0;
          os_log_t loga = (os_log_t)(v17 & 0xC000000000000001);
          double v37 = (void *)v17;
          do
          {
            if (loga) {
              id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v38 = *(id *)(v17 + 8 * v36 + 32);
            }
            id v39 = v38;
            ++v36;
            type metadata accessor for FTMessage(0);
            uint64_t v40 = swift_allocObject();
            *(void *)(v40 + 24) = 0;
            *(unsigned char *)(v40 + 32) = 1;
            *(_WORD *)(v40 + 33) = 514;
            uint64_t v41 = v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___dataURL;
            uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
            os_log_type_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
            v43(v41, 1, 1, v42);
            v43(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___thumbnailURL, 1, 1, v42);
            v43(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptURL, 1, 1, v42);
            uint64_t v44 = v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcriptData;
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transcript?);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 1, 1, v45);
            *(void *)(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage____lazy_storage___transcript) = 1;
            *(unsigned char *)(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage_didLoadTranscript) = 0;
            *(unsigned char *)(v40 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 0;
            *(void *)(v40 + 16) = v39;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            unint64_t v17 = (unint64_t)v37;
          }
          while (v35 != v36);
          unint64_t v46 = (unint64_t)v58;
          swift_release();
          uint64_t v0 = v52;
          if (!(v46 >> 62)) {
            goto LABEL_44;
          }
          goto LABEL_63;
        }
        __break(1u);
      }
    }
    else
    {
      uint64_t v35 = *(void *)(v17 + 16);
      if (v35)
      {
        uint64_t v58 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        goto LABEL_38;
      }
    }
    swift_release();
    goto LABEL_57;
  }
  uint64_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v2, (os_log_type_t)v8);
  unint64_t v10 = *(void *)(v0 + 64);
  if (v9)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 40) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, (os_log_type_t)v8, "ignoring %ld deleted messages, no more self", v11, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

LABEL_58:
  id v49 = *(uint64_t (**)(void))(v0 + 8);
  return v49();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.messageStoreDidDeleteMessagesWithUUIDs(_:)(Swift::OpaquePointer a1)
{
}

uint64_t FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = v3 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)(v11 + ((v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessagesWithUUIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessagesWithUUIDs(_:), v6, v5);
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessagesWithUUIDs(_:)()
{
  unint64_t v33 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_bridgeObjectRetain();
  if (Strong)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    char v31 = v0;
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v5 = Array.description.getter();
      unint64_t v7 = v6;
      swift_bridgeObjectRelease();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "messageStoreDidDeleteMessagesWithUUIDs: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v13 = v0[11];
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = _swiftEmptyArrayStorage;
    if (v14)
    {
      os_log_type_t v30 = (objc_super *)(v0 + 5);
      uint64_t v16 = v0[13];
      uint64_t v32 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      v16 += 16;
      uint64_t v18 = v13 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
      uint64_t v28 = *(void *)(v16 + 56);
      uint64_t v29 = v17;
      uint64_t v27 = (void (**)(char *, uint64_t))(v16 - 8);
      do
      {
        uint64_t v19 = (char *)v0[14];
        unint64_t v20 = (char *)v0[15];
        uint64_t v21 = v0[12];
        v29(v20, v18, v21);
        v29(v19, (uint64_t)v20, v21);
        uint64_t v22 = (objc_class *)type metadata accessor for MessageID(0);
        uint64_t v23 = (char *)objc_allocWithZone(v22);
        v29(&v23[OBJC_IVAR___MPMessageID_value], (uint64_t)v19, v21);
        type metadata accessor for MessageID.Value(0);
        uint64_t v0 = v31;
        swift_storeEnumTagMultiPayload();
        v31[5] = v23;
        v31[6] = v22;
        [(objc_super *)v30 init];
        uint64_t v24 = *v27;
        (*v27)(v19, v21);
        v24(v20, v21);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v18 += v28;
        --v14;
      }
      while (v14);
      uint64_t v15 = v32;
    }
    FaceTimeVoicemailManager.removeMessagesHandlingError(with:)((Swift::OpaquePointer)v15);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, (os_log_type_t)v9);
    uint64_t v11 = v0[11];
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134217984;
      v0[7] = *(void *)(v11 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v9, "ignoring %ld deleted messageUUIDs, no more self", v12, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.removeMessagesHandlingError(with:)(Swift::OpaquePointer with)
{
  unint64_t v1 = _s11MobilePhone22CachedVoicemailManagerC14removeMessages4withSayAA9MessageIDCGAH_tAC5ErrorOYKF((unint64_t)with._rawValue, &v10);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for MessageID(0);
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "FaceTimeVoicemailManager did remove: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
LABEL_6:
  }
    FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(v1, 0);
LABEL_7:
  swift_bridgeObjectRelease();
}

uint64_t @objc FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  v17[1] = a6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  a4(0);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = a1 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v8);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.messageStoreDidReconnect()()
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidReconnect()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.messageStoreDidReconnect(), v4, v3);
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreDidReconnect()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(Strong + 16) = 0x8000000000000000;
    swift_release();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "messageStoreDidReconnect(), triggering onVoicemailsChanged().", v4, 2u);
      swift_slowDealloc();
    }

    FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(0, 3);
    swift_release();
  }
  else
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "ignoring messageStoreDidReconnect(), no more self", v7, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.messageStoreRequiresRefetch()()
{
}

uint64_t FaceTimeVoicemailManager.messageStoreDidReconnect()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1);
  uint64_t v4 = v0 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v1);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreRequiresRefetch()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in FaceTimeVoicemailManager.messageStoreRequiresRefetch(), v4, v3);
}

uint64_t closure #1 in FaceTimeVoicemailManager.messageStoreRequiresRefetch()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(Strong + 16) = 0x8000000000000000;
    swift_release();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "messageStoreRequiresRefetch(), triggering onVoicemailsChanged().", v4, 2u);
      swift_slowDealloc();
    }

    FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(0, 3);
    swift_release();
  }
  else
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "ignoring messageStoreRequiresRefetch(), no more self", v7, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t @objc FaceTimeVoicemailManager.messageStoreDidReconnect()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = a1 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  swift_retain();
  swift_retain();
  dispatch thunk of TaskQueue.async(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *FaceTimeVoicemailManager.inputPreconditions(_:)(unint64_t a1)
{
  result = specialized _arrayConditionalCast<A, B>(_:)(a1);
  if (!result)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x654D3C7961727241, 0xEE003E6567617373, &v5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "FaceTimeVoicemailManager received the incorrect type %{public}s when it expected a FTMessage", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    return _swiftEmptyArrayStorage;
  }
  return result;
}

Swift::Void __swiftcall FaceTimeVoicemailManager.requestInitialStateIfNecessary(sendNotifications:)(Swift::Bool sendNotifications)
{
  if (sendNotifications) {
    FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(0, 3);
  }
}

uint64_t FaceTimeVoicemailManager.delete(_:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for MessageStoreQuery();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[10] = v5;
  v2[11] = v4;
  return _swift_task_switch(FaceTimeVoicemailManager.delete(_:), v5, v4);
}

uint64_t FaceTimeVoicemailManager.delete(_:)()
{
  unint64_t v1 = (unint64_t)FaceTimeVoicemailManager.inputPreconditions(_:)(v0[5]);
  v0[12] = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v0[13] = v3;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[13] = v2;
    if (v2)
    {
LABEL_3:
      return _swift_task_switch(FaceTimeVoicemailManager.delete(_:), 0, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 112) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(FaceTimeVoicemailManager.delete(_:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  unint64_t v1 = v0[13];
  uint64_t v2 = swift_release();
  if (v1 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[12] & 0xC000000000000001;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      if (v5) {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v7 = swift_retain();
      }
      uint64_t v8 = v0[13];
      ++v6;
      *(unsigned char *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
      *(unsigned char *)(v7 + 34) = 1;
      swift_release();
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[10];
    uint64_t v4 = v0[11];
    uint64_t v2 = (uint64_t)FaceTimeVoicemailManager.delete(_:);
  }
  return _swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v2 = v0[8];
  unint64_t v1 = (uint64_t *)v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MobilePhone9FTMessageCG_10Foundation4UUIDVs5NeverOTg504_s11d81Phone24FaceTimeVoicemailManagerC6deleteyySayAA7Message_pGYaF10Foundation4UUIDVAA9F52Ccfu_32a1e8d92dfce090f96edd9d552be76dbaAkITf3nnnpk_nTf1cn_n(v0[12]);
  v0[15] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(v3 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 24);
  uint64_t v8 = v6[4];
  __swift_project_boxed_opaque_existential_0(v6, v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *unint64_t v1 = v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, enum case for MessageStoreQuery.recordUUID(_:), v4);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 24) + **(int **)(v8 + 24));
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[16] = v10;
  *uint64_t v10 = v0;
  v10[1] = FaceTimeVoicemailManager.delete(_:);
  uint64_t v11 = v0[9];
  return v13(v11, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = (void *)*v1;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);
    uint64_t v3 = v2[10];
    uint64_t v4 = v2[11];
    return _swift_task_switch(FaceTimeVoicemailManager.delete(_:), v3, v4);
  }
  else
  {
    (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v3 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "FaceTimeVoicemailManager failed to delete messages with recordUUIDs %s with error: %@", (uint8_t *)v3, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.delete(_:), v5, v4);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.delete(_:)()
{
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = @objc closure #1 in FaceTimeVoicemailManager.delete(_:);
  return FaceTimeVoicemailManager.delete(_:)(v1);
}

uint64_t FaceTimeVoicemailManager.markAsRead(_:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[12] = v5;
  v2[13] = v4;
  return _swift_task_switch(FaceTimeVoicemailManager.markAsRead(_:), v5, v4);
}

uint64_t FaceTimeVoicemailManager.markAsRead(_:)()
{
  unint64_t v1 = (unint64_t)FaceTimeVoicemailManager.inputPreconditions(_:)(v0[4]);
  v0[14] = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v0[15] = v3;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[15] = v2;
    if (v2)
    {
LABEL_3:
      return _swift_task_switch(FaceTimeVoicemailManager.markAsRead(_:), 0, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 128) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(FaceTimeVoicemailManager.markAsRead(_:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  unint64_t v1 = v0[15];
  uint64_t v2 = swift_release();
  if (v1 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[14] & 0xC000000000000001;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      if (v5) {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v7 = swift_retain();
      }
      uint64_t v8 = v0[15];
      ++v6;
      *(unsigned char *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
      *(unsigned char *)(v7 + 33) = 1;
      swift_release();
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v2 = (uint64_t)FaceTimeVoicemailManager.markAsRead(_:);
  }
  return _swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (**v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  uint64_t v18;

  unint64_t v1 = v0[14];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    uint64_t v5 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[10] + 56);
    do
    {
      if ((v0[14] & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v6 = v0[8];
      uint64_t v7 = v0[9];
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      ++v4;
      dispatch thunk of Message.recordUUID.getter();
      uint64_t v10 = *v5;
      (*v5)(v6, 1, 1, v7);
      v10(v8, 1, 1, v7);
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
      uint64_t v12 = objc_allocWithZone((Class)type metadata accessor for MessageUpdate());
      MessageUpdate.init(recordUUID:callUUID:conversationID:from:provider:isRead:duration:mailboxType:recipient:transcriptionStatus:isRTT:transcriptURL:simID:undelete:)();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v4);
  }
  v0[17] = _swiftEmptyArrayStorage;
  uint64_t v13 = (void *)(v0[5] + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  unint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  __swift_project_boxed_opaque_existential_0(v13, v14);
  unint64_t v17 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v15 + 48) + **(int **)(v15 + 48));
  uint64_t v16 = (void *)swift_task_alloc();
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = FaceTimeVoicemailManager.markAsRead(_:);
  return v17(_swiftEmptyArrayStorage, v14, v15);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = (void *)*v1;
  v2[19] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[12];
    uint64_t v4 = v2[13];
    return _swift_task_switch(FaceTimeVoicemailManager.markAsRead(_:), v3, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    type metadata accessor for FTMessage(0);
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v3 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "FaceTimeVoicemailManager failed to set messages %s as read with error: %@", (uint8_t *)v3, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:), v5, v4);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:)()
{
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = @objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:);
  return FaceTimeVoicemailManager.markAsRead(_:)(v1);
}

{
  uint64_t *v0;
  void (**v1)(void);
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *(void (***)(void))(*v0 + 40);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t FaceTimeVoicemailManager.moveToTrash(_:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[15] = v5;
  v2[16] = v4;
  return _swift_task_switch(FaceTimeVoicemailManager.moveToTrash(_:), v5, v4);
}

uint64_t FaceTimeVoicemailManager.moveToTrash(_:)()
{
  unint64_t v1 = (unint64_t)FaceTimeVoicemailManager.inputPreconditions(_:)(v0[5]);
  v0[17] = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v0[18] = v3;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[18] = v2;
    if (v2)
    {
LABEL_3:
      return _swift_task_switch(FaceTimeVoicemailManager.moveToTrash(_:), 0, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 152) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(FaceTimeVoicemailManager.moveToTrash(_:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  unint64_t v1 = v0[18];
  uint64_t v2 = swift_release();
  if (v1 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[17] & 0xC000000000000001;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      if (v5) {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v7 = swift_retain();
      }
      uint64_t v8 = v0[18];
      ++v6;
      *(unsigned char *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
      *(void *)(v7 + 24) = 2;
      *(unsigned char *)(v7 + 32) = 0;
      swift_release();
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[16];
    uint64_t v2 = (uint64_t)FaceTimeVoicemailManager.moveToTrash(_:);
  }
  return _swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (**v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  void *v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  unint64_t v1 = v0[17];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  int v26 = _swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[11] + 56);
  do
  {
    if ((v0[17] & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    uint64_t v6 = v0[9];
    uint64_t v7 = v0[10];
    uint64_t v9 = v0[7];
    uint64_t v8 = v0[8];
    ++v4;
    dispatch thunk of Message.recordUUID.getter();
    uint64_t v10 = *v5;
    (*v5)(v6, 1, 1, v7);
    v10(v8, 1, 1, v7);
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
    uint64_t v12 = objc_allocWithZone((Class)type metadata accessor for MessageUpdate());
    MessageUpdate.init(recordUUID:callUUID:conversationID:from:provider:isRead:duration:mailboxType:recipient:transcriptionStatus:isRTT:transcriptURL:simID:undelete:)();
    swift_release();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v2 != v4);
  uint64_t v13 = v26;
  swift_bridgeObjectRelease();
LABEL_12:
  unint64_t v14 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  v0[20] = v13;
  v0[21] = v14;
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    int v26 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    type metadata accessor for MessageUpdate();
    swift_bridgeObjectRetain();
    uint64_t v18 = Array.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[moveToTrash] Updating messages in FaceTimeVoicemailManager - Updates: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = (void *)(v0[6] + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  uint64_t v22 = v21[3];
  uint64_t v23 = v21[4];
  __swift_project_boxed_opaque_existential_0(v21, v22);
  uint64_t v25 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v23 + 48) + **(int **)(v23 + 48));
  uint64_t v24 = (void *)swift_task_alloc();
  v0[22] = v24;
  NSObject *v24 = v0;
  v24[1] = FaceTimeVoicemailManager.moveToTrash(_:);
  return v25(v13, v22, v23);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = (void *)*v1;
  v2[23] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[15];
    uint64_t v4 = v2[16];
    return _swift_task_switch(FaceTimeVoicemailManager.moveToTrash(_:), v3, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  void *v26;
  os_log_type_t v27;
  NSObject *log;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;

  char v31 = v0;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[20];
    uint64_t v4 = swift_slowAlloc();
    int v26 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    os_log_t log = v1;
    uint64_t v27 = v2;
    if (v5)
    {
      os_log_type_t v30 = _swiftEmptyArrayStorage;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
      if (v5 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v30;
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = 0;
        uint64_t v9 = v0[11];
        do
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          MessageUpdate.recordUUID.getter();
          swift_unknownObjectRelease();
          os_log_type_t v30 = v7;
          uint64_t v11 = v7[2];
          uint64_t v10 = v7[3];
          if (v11 >= v10 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
            uint64_t v7 = v30;
          }
          uint64_t v12 = v0[13];
          uint64_t v13 = v0[10];
          ++v8;
          v7[2] = v11 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v11, v12, v13);
        }
        while (v5 != v8);
      }
      else
      {
        unint64_t v14 = v0[11];
        uint64_t v15 = (id *)(v0[20] + 32);
        do
        {
          uint64_t v16 = *v15;
          MessageUpdate.recordUUID.getter();

          os_log_type_t v30 = v7;
          uint64_t v18 = v7[2];
          unint64_t v17 = v7[3];
          if (v18 >= v17 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
            uint64_t v7 = v30;
          }
          uint64_t v19 = v0[12];
          unint64_t v20 = v0[10];
          v7[2] = v18 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v18, v19, v20);
          ++v15;
          --v5;
        }
        while (v5);
      }
    }
    uint64_t v21 = Array.description.getter();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t *v26 = v24;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v27, "FaceTimeVoicemailManager failed to set messages %s as deleted with error: %@", (uint8_t *)v4, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.moveToTrash(_:), v5, v4);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)()
{
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = @objc closure #1 in FaceTimeVoicemailManager.delete(_:);
  return FaceTimeVoicemailManager.moveToTrash(_:)(v1);
}

uint64_t FaceTimeVoicemailManager.removeFromTrash(_:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[14] = v5;
  v2[15] = v4;
  return _swift_task_switch(FaceTimeVoicemailManager.removeFromTrash(_:), v5, v4);
}

uint64_t FaceTimeVoicemailManager.removeFromTrash(_:)()
{
  unint64_t v1 = (unint64_t)FaceTimeVoicemailManager.inputPreconditions(_:)(v0[5]);
  v0[16] = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v0[17] = v3;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[17] = v2;
    if (v2)
    {
LABEL_3:
      return _swift_task_switch(FaceTimeVoicemailManager.removeFromTrash(_:), 0, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 144) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(FaceTimeVoicemailManager.removeFromTrash(_:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  unint64_t v1 = v0[17];
  uint64_t v2 = swift_release();
  if (v1 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[16] & 0xC000000000000001;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      if (v5) {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v7 = swift_retain();
      }
      uint64_t v8 = v0[17];
      ++v6;
      *(unsigned char *)(v7 + OBJC_IVAR____TtC11MobilePhone9FTMessage_isDirty) = 1;
      *(void *)(v7 + 24) = 1;
      *(unsigned char *)(v7 + 32) = 0;
      swift_release();
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v2 = (uint64_t)FaceTimeVoicemailManager.removeFromTrash(_:);
  }
  return _swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  uint64_t v5;
  void (**v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  void *v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  unint64_t v1 = v0[16];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v0[19] = v2;
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    int v26 = _swiftEmptyArrayStorage;
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    uint64_t v6 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[11] + 56);
    do
    {
      if ((v0[16] & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v7 = v0[9];
      uint64_t v8 = v0[10];
      uint64_t v10 = v0[7];
      uint64_t v9 = v0[8];
      ++v5;
      dispatch thunk of Message.recordUUID.getter();
      uint64_t v11 = *v6;
      (*v6)(v7, 1, 1, v8);
      v11(v9, 1, 1, v8);
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
      uint64_t v13 = objc_allocWithZone((Class)type metadata accessor for MessageUpdate());
      MessageUpdate.init(recordUUID:callUUID:conversationID:from:provider:isRead:duration:mailboxType:recipient:transcriptionStatus:isRTT:transcriptURL:simID:undelete:)();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v5);
    uint64_t v3 = v26;
  }
  unint64_t v14 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  v0[20] = v3;
  v0[21] = v14;
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    int v26 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    type metadata accessor for MessageUpdate();
    swift_bridgeObjectRetain();
    uint64_t v18 = Array.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[removeFromTrash] Updating messages in FaceTimeVoicemailManager - Updates: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = (void *)(v0[6] + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  uint64_t v22 = v21[3];
  uint64_t v23 = v21[4];
  __swift_project_boxed_opaque_existential_0(v21, v22);
  uint64_t v25 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v23 + 48) + **(int **)(v23 + 48));
  uint64_t v24 = (void *)swift_task_alloc();
  v0[22] = v24;
  NSObject *v24 = v0;
  v24[1] = FaceTimeVoicemailManager.removeFromTrash(_:);
  return v25(v3, v22, v23);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = (void *)*v1;
  v2[23] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = v2[14];
    uint64_t v4 = v2[15];
    return _swift_task_switch(FaceTimeVoicemailManager.removeFromTrash(_:), v3, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  void *v21;
  os_log_type_t v22;
  NSObject *log;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;

  int v26 = v0;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[19];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    os_log_t log = v1;
    uint64_t v22 = v2;
    uint64_t v21 = (void *)v5;
    if (v3)
    {
      uint64_t v6 = v0[19];
      uint64_t v25 = _swiftEmptyArrayStorage;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v8 = 0;
      uint64_t v9 = v0[11];
      uint64_t v10 = v25;
      do
      {
        if ((v0[16] & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        dispatch thunk of Message.recordUUID.getter();
        swift_release();
        uint64_t v25 = v10;
        uint64_t v12 = v10[2];
        uint64_t v11 = v10[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v10 = v25;
        }
        uint64_t v13 = v0[19];
        unint64_t v14 = v0[12];
        uint64_t v15 = v0[10];
        ++v8;
        v10[2] = v12 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v12, v14, v15);
      }
      while (v8 != v13);
    }
    uint64_t v16 = Array.description.getter();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v22, "FaceTimeVoicemailManager failed to set messages %s as undeleted with error: %@", (uint8_t *)v4, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:), v5, v4);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)()
{
  *(void *)(v0 + 40) = _Block_copy(*(const void **)(v0 + 24));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = @objc closure #1 in FaceTimeVoicemailManager.delete(_:);
  return FaceTimeVoicemailManager.removeFromTrash(_:)(v1);
}

uint64_t FaceTimeVoicemailManager.messages(filteredBy:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = type metadata accessor for VoicemailActor();
  v2[5] = swift_initStaticObject();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[6] = v3;
  void *v3 = v2;
  v3[1] = FaceTimeVoicemailManager.messages(filteredBy:);
  return CachedVoicemailManager.fetchMessages()();
}

uint64_t FaceTimeVoicemailManager.messages(filteredBy:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(FaceTimeVoicemailManager.messages(filteredBy:), v3, v2);
}

uint64_t FaceTimeVoicemailManager.messages(filteredBy:)()
{
  uint64_t v1 = specialized _ArrayProtocol.filter(_:)(*(void *)(v0 + 56), *(uint64_t (**)(uint64_t))(v0 + 16), *(void **)(v0 + 24));
  uint64_t v2 = *(uint64_t (**)(void *))(v0 + 8);
  return v2(v1);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  v3[6] = _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:), v5, v4);
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:)()
{
  uint64_t v1 = *(const void **)(v0 + 24);
  uint64_t v2 = _Block_copy(*(const void **)(v0 + 16));
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = _Block_copy(v1);
  *(void *)(v0 + 72) = swift_initStaticObject();
  _Block_copy(v2);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v3;
  void *v3 = v0;
  v3[1] = @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:);
  return CachedVoicemailManager.fetchMessages()();
}

{
  void *v0;
  unsigned int (**v1)(void, void);
  void (**v2)(void, void);
  Class isa;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (unsigned int (**)(void, void))v0[7];
  uint64_t v2 = (void (**)(void, void))v0[8];
  specialized _ArrayProtocol.filter(_:)(v0[11], v1);
  _Block_release(v1);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v2)[2](v2, isa);

  _Block_release(v2);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 88) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:), v3, v2);
}

uint64_t FaceTimeVoicemailManager.countOfUnreadMessages()()
{
  v1[3] = v0;
  v1[4] = type metadata accessor for MessageFetchOptions();
  v1[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MessageStoreFetchRequest.QuerySearchType();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MessageStoreQuery();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t Request = type metadata accessor for MessageStoreFetchRequest();
  v1[12] = Request;
  v1[13] = *(void *)(Request - 8);
  v1[14] = swift_task_alloc();
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v6;
  v1[16] = v5;
  return _swift_task_switch(FaceTimeVoicemailManager.countOfUnreadMessages(), v6, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t *, void, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  uint64_t v19 = (uint64_t *)v0[11];
  unint64_t v20 = v0[7];
  uint64_t v21 = v0[8];
  uint64_t v22 = v0[6];
  uint64_t v3 = v0[3];
  uint64_t v4 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MessageStoreQuery>);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v7 = 2 * v5;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100206220;
  uint64_t v9 = v8 + v6;
  FaceTimeVoicemailManager.allMessagesQuery.getter((uint64_t *)(v8 + v6));
  uint64_t v10 = (uint64_t *)(v8 + v6 + v5);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  *uint64_t v10 = v11;
  uint64_t v12 = *(void (**)(uint64_t *, void, uint64_t))(v1 + 104);
  v12(v10, enum case for MessageStoreQuery.isRead(_:), v2);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &outlined read-only object #0 of FaceTimeVoicemailManager.countOfUnreadMessages();
  *(void *)(v9 + v7) = v13;
  v12((uint64_t *)(v9 + v7), enum case for MessageStoreQuery.mailbox(_:), v2);
  *(void *)(v4 + 16) = v8;
  char *v19 = v4;
  v12(v19, enum case for MessageStoreQuery.and(_:), v2);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v21, enum case for MessageStoreFetchRequest.QuerySearchType.unsorted(_:), v22);
  v0[2] = _swiftEmptyArrayStorage;
  _s11MobilePhone14VoicemailActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type MessageFetchOptions and conformance MessageFetchOptions, (void (*)(uint64_t))&type metadata accessor for MessageFetchOptions);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MessageFetchOptions]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [MessageFetchOptions] and conformance [A], &demangling cache variable for type metadata for [MessageFetchOptions]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MessageStoreFetchRequest.init(query:sortType:options:pageSize:page:originatingBundleID:)();
  unint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 24);
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController + 32);
  __swift_project_boxed_opaque_existential_0((void *)(v3 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController), v14);
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 32) + **(int **)(v15 + 32));
  uint64_t v16 = (void *)swift_task_alloc();
  v0[17] = v16;
  *uint64_t v16 = v0;
  v16[1] = FaceTimeVoicemailManager.countOfUnreadMessages();
  unint64_t v17 = v0[14];
  return v23(v17, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = v0[18];
  if (v1 < 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1(0);
}

uint64_t FaceTimeVoicemailManager.countOfUnreadMessages()(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = v4[15];
    uint64_t v6 = v4[16];
    uint64_t v7 = FaceTimeVoicemailManager.countOfUnreadMessages();
  }
  else
  {
    v4[18] = a1;
    uint64_t v5 = v4[15];
    uint64_t v6 = v4[16];
    uint64_t v7 = FaceTimeVoicemailManager.countOfUnreadMessages();
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t protocol witness for Voicemailmanager_ChangeCallback.listenForChanges(_:) in conformance FaceTimeVoicemailManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  type metadata accessor for VoicemailActor();
  swift_retain();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  uint64_t v11 = _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = inited;
  v12[3] = v11;
  v12[4] = v8;
  v12[5] = a1;
  v12[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)partial apply, (uint64_t)v12);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t protocol witness for VoicemailManager_UnreadCount.countOfUnreadMessages() in conformance FaceTimeVoicemailManager()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for VoicemailManager_UnreadCount.countOfUnreadMessages() in conformance FaceTimeVoicemailManager;
  return FaceTimeVoicemailManager.countOfUnreadMessages()();
}

uint64_t protocol witness for VoicemailManager_UnreadCount.countOfUnreadMessages() in conformance FaceTimeVoicemailManager(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

Swift::Void __swiftcall FaceTimeVoicemailManager.delete(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return FaceTimeVoicemailManager.delete(_:)(a5);
}

Swift::Void __swiftcall FaceTimeVoicemailManager.markAsRead(_:)(Swift::OpaquePointer a1)
{
}

uint64_t FaceTimeVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  type metadata accessor for VoicemailActor();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t inited = swift_initStaticObject();
  uint64_t v12 = _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = inited;
  v13[3] = v12;
  v13[4] = v5;
  v13[5] = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, a3, (uint64_t)v13);
  return swift_release();
}

uint64_t closure #1 in FaceTimeVoicemailManager.markAsRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return FaceTimeVoicemailManager.markAsRead(_:)(a5);
}

uint64_t @objc FaceTimeVoicemailManager.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  type metadata accessor for VoicemailActor();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t inited = swift_initStaticObject();
  uint64_t v13 = _s11MobilePhone14VoicemailActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type VoicemailActor and conformance VoicemailActor, (void (*)(uint64_t))type metadata accessor for VoicemailActor);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = inited;
  v14[3] = v13;
  v14[4] = a1;
  v14[5] = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, a5, (uint64_t)v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall FaceTimeVoicemailManager.moveToTrash(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return FaceTimeVoicemailManager.moveToTrash(_:)(a5);
}

Swift::Void __swiftcall FaceTimeVoicemailManager.removeFromTrash(_:)(Swift::OpaquePointer a1)
{
}

uint64_t closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return FaceTimeVoicemailManager.removeFromTrash(_:)(a5);
}

uint64_t protocol witness for MessageStoreController.addDelegate(_:) in conformance MessageStoreController()
{
  return MessageStoreController.addDelegate(_:)();
}

uint64_t protocol witness for MessageStoreController.removeDelegate(_:) in conformance MessageStoreController()
{
  return MessageStoreController.removeDelegate(_:)();
}

uint64_t protocol witness for MessageStoreController.deleteMessages(query:) in conformance MessageStoreController(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return MessageStoreController.deleteMessages(query:)(a1);
}

uint64_t protocol witness for MessageStoreController.getMessageCount(for:) in conformance MessageStoreController(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for MessageStoreController.getMessageCount(for:) in conformance MessageStoreController;
  return MessageStoreController.getMessageCount(for:)(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t protocol witness for MessageStoreController.getMessages(fetchRequest:) in conformance MessageStoreController(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for MessageStoreController.getMessages(fetchRequest:) in conformance MessageStoreController;
  return MessageStoreController.getMessages(fetchRequest:)(a1);
}

uint64_t protocol witness for MessageStoreController.updateMessages(_:) in conformance MessageStoreController(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return MessageStoreController.updateMessages(_:)(a1);
}

uint64_t specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for TaskPriority();
  __chkstk_darwin(v11 - 8);
  v25[3] = a5;
  v25[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  uint64_t v12 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_logger;
  uint64_t v13 = one-time initialization token for mobilePhone;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.mobilePhone);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  v16(a4 + v12, v15, v14);
  v16(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_analyticsReporter, v15, v14);
  *(void *)(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_providers) = &outlined read-only object #0 of specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:);
  *(void *)(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageTypes) = &outlined read-only object #1 of specialized FaceTimeVoicemailManager.init(onVoicemailsChanged:messageStoreController:);
  uint64_t v17 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messagesChangedPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<VoicemailManagerMessageChanges, Never>);
  swift_allocObject();
  *(void *)(a4 + v17) = PassthroughSubject.init()();
  uint64_t v18 = OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_operationQueue;
  type metadata accessor for TaskQueue();
  static TaskPriority.high.getter();
  *(void *)(a4 + v18) = TaskQueue.__allocating_init(priority:)();
  uint64_t v19 = (void *)(a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_onVoicemailsChanged);
  void *v19 = a1;
  v19[1] = a2;
  outlined init with copy of Tip((uint64_t)v25, a4 + OBJC_IVAR____TtC11MobilePhone24FaceTimeVoicemailManager_messageStoreController);
  swift_retain();
  swift_release();
  *(void *)(a4 + 16) = 0x8000000000000000;
  *(void *)(a4 + 24) = _swiftEmptyArrayStorage;
  unint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 8);
  uint64_t v21 = swift_retain();
  v20(v21, a5, a6);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  return a4;
}

uint64_t sub_100176A50()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in VoiceMailAnalyticsLogger.logEvent(_:withCoreAnalyticsDictionary:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for VoiceMailAnalyticsLogger(uint64_t a1)
{
  return type metadata accessor for RecentCallView(a1, (uint64_t *)&type metadata singleton initialization cache for VoiceMailAnalyticsLogger);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)(a1, v4, v5, v6, v7, v8);
}

void partial apply for implicit closure #2 in implicit closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)()
{
  type metadata accessor for AnyCancellable();

  Task.cancel()();
}

uint64_t sub_100176BC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100176BF8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.voicemailsChanged(messageChanges:)(v2, v3, v4);
}

uint64_t outlined destroy of VoiceMailAnalyticsLogger(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_TA_0(uint64_t a1)
{
  return _s11MobilePhone22CachedVoicemailManagerC11addMessages8messagesySayAA7Message_pG_tAC5ErrorOYKFyAC5Cache33_CFC589FF927D3725ACAAF49197D752FALLCcfU_(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.messageStoreDidAddMessages(_:)(v4, v5, v6);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.messageStoreDidUpdateMessages(_:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.messageStoreDidUpdateMessages(_:)(v4, v5, v6);
}

unint64_t outlined copy of CachedVoicemailManager.Error(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t outlined consume of CachedVoicemailManager.Error(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessages(_:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessages(_:)(v4, v5, v6);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessagesWithUUIDs(_:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.messageStoreDidDeleteMessagesWithUUIDs(_:)(v4, v5, v6);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.messageStoreDidReconnect()()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.messageStoreDidReconnect()(v3, v4);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.messageStoreRequiresRefetch()()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.messageStoreRequiresRefetch()(v3, v4);
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t (*a2)(uint64_t), void *a3)
{
  unint64_t v7 = a1;
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v7 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v7 & 0xC000000000000001;
      unint64_t v14 = v7;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v7 + 8 * v9 + 32);
          swift_unknownObjectRetain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v3 = a3;
        char v12 = a2(v10);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v7 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v3 = &v17;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_unknownObjectRelease();
        }
        ++v9;
        if (v11 == v8)
        {
          uint64_t v3 = v17;
          goto LABEL_20;
        }
      }
    }
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100177510()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.delete(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.delete(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.markAsRead(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.markAsRead(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)(a1, v4, v5, v7, v6);
}

uint64_t initializeBufferWithCopyOfBuffer for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for VoiceMailAnalyticsLogger(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100177AA4);
}

uint64_t sub_100177AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for VoiceMailAnalyticsLogger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100177B24);
}

uint64_t sub_100177B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for VoiceMailAnalyticsLogger()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for FaceTimeVoicemailManager()
{
  return type metadata accessor for FaceTimeVoicemailManager(0);
}

uint64_t closure #1 in FaceTimeVoicemailManager.markAsRead(_:)partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in FaceTimeVoicemailManager.markAsRead(_:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_75Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100177D40()
{
  _Block_release(*(const void **)(v0 + 16));
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:)
                                                         + async function pointer to @objc closure #1 in FaceTimeVoicemailManager.messages(filteredBy:));
  return v6(v2, v3, v4);
}

uint64_t sub_100177E44()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for @objc closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:)
                                                         + async function pointer to @objc closure #1 in FaceTimeVoicemailManager.removeFromTrash(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in FaceTimeVoicemailManager.moveToTrash(_:)
                                                         + async function pointer to @objc closure #1 in FaceTimeVoicemailManager.moveToTrash(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:)
                                                         + async function pointer to @objc closure #1 in FaceTimeVoicemailManager.markAsRead(_:));
  return v6(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in FaceTimeVoicemailManager.delete(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in FaceTimeVoicemailManager.delete(_:)
                                                         + async function pointer to @objc closure #1 in FaceTimeVoicemailManager.delete(_:));
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_49Tm()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t objectdestroy_29Tm()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t objectdestroy_134Tm()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in FaceTimeVoicemailManager.message(for:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in FaceTimeVoicemailManager.message(for:)
                                                         + async function pointer to @objc closure #1 in FaceTimeVoicemailManager.message(for:));
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_3Tm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10017849C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001784DC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in FaceTimeVoicemailManager.listenForChanges(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

UIFontWeight UIFont.weight.getter()
{
  id v1 = [v0 fontDescriptor];
  id v2 = [v1 fontAttributes];

  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, type metadata accessor for UIFontDescriptorAttributeName);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v3 + 16))
  {
    long long v12 = 0u;
    long long v13 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v4 = UIFontDescriptorTraitsAttribute;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
  if ((v6 & 1) == 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v12);

  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1)) {
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : Any]);
  if ((swift_dynamicCast() & 1) == 0) {
    return UIFontWeightRegular;
  }
  if (*(void *)(*(void *)&v11 + 16))
  {
    uint64_t v7 = UIFontWeightTrait;
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if (v9)
    {
      outlined init with copy of Any(*(void *)(*(void *)&v11 + 56) + 32 * v8, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v12);
    return UIFontWeightRegular;
  }
  type metadata accessor for UIFontWeight(0);
  if (swift_dynamicCast()) {
    return v11;
  }
  return UIFontWeightRegular;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry.Kind();
  unint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  char v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    char v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName((unint64_t *)&lazy protocol witness table cache variable for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind, (void (*)(uint64_t))&type metadata accessor for TPTipsHelper.Entry.Kind);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unsigned char v8[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    unint64_t v5 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      uint64_t v6 = static AnyHashable.== infix(_:_:)();
      outlined destroy of AnyHashable((uint64_t)v8);
      if (v6) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  unint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE900000000000073;
      uint64_t v8 = 0x657469726F766146;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x73746E65636552;
          break;
        case 2:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x73746361746E6F43;
          break;
        case 3:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x64617079654BLL;
          break;
        case 4:
          uint64_t v8 = 0x69616D6563696F56;
          unint64_t v7 = 0xE90000000000006CLL;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE900000000000073;
      uint64_t v10 = 0x657469726F766146;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE700000000000000;
          if (v8 == 0x73746E65636552) {
            goto LABEL_15;
          }
          goto LABEL_16;
        case 2:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x73746361746E6F43) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 3:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x64617079654BLL;
          goto LABEL_14;
        case 4:
          unint64_t v9 = 0xE90000000000006CLL;
          if (v8 != 0x69616D6563696F56) {
            goto LABEL_16;
          }
          goto LABEL_15;
        default:
LABEL_14:
          if (v8 != v10) {
            goto LABEL_16;
          }
LABEL_15:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_16:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

id specialized static UIImage.image(for:)(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    uint64_t v3 = a1[2];
    uint64_t v2 = a1[3];
    unint64_t v4 = self;
    id v5 = v1;
    id v6 = [v4 _preferredFontForTextStyle:v2 maximumContentSizeCategory:v5];
    if (!v6) {
      id v6 = [v4 preferredFontForTextStyle:v2];
    }
    unint64_t v7 = self;
    [v6 pointSize];
    double v9 = v8;
    UIFontWeight v10 = UIFont.weight.getter();
    id v11 = [v7 _configurationWithPointSize:UIImageSymbolWeightForFontWeight(v10) weight:v3 scale:v9];
  }
  else
  {
    id v11 = [self configurationWithTextStyle:a1[3] scale:a1[2]];
  }
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [self systemImageNamed:v12];

  if (v13)
  {
    id v14 = [v13 imageWithSymbolConfiguration:v11];

    id v13 = [v14 imageWithRenderingMode:2];
  }

  return v13;
}

unint64_t type metadata accessor for CHHandle()
{
  unint64_t result = lazy cache variable for type metadata for CHHandle;
  if (!lazy cache variable for type metadata for CHHandle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CallReportingViewModel.shouldShowReportAction(for:)(void *a1)
{
  if ([a1 isTelephony])
  {
    uint64_t v2 = CallReportingViewModel.contactByHandles(in:)(a1)[2];
    swift_bridgeObjectRelease();
    if (!v2)
    {
      if ([a1 isIncoming])
      {
        id v3 = [self sharedInstance];
        unsigned __int8 v4 = [v3 isClassificationAvailable];

        if (v4 & 1) != 0 || ([a1 carrierAllowsReportVoiceCall]) {
          return 1;
        }
      }
    }
  }
  uint64_t result = (uint64_t)[a1 isComingFaceTimeCall];
  if (result)
  {
    return CallReportingViewModel.atLeastOneUnknownCaller(in:)(a1);
  }
  return result;
}

uint64_t CallReportingViewModel.reportingFlow(for:)(void *a1)
{
  if ([a1 isComingFaceTimeCall] && CallReportingViewModel.atLeastOneUnknownCaller(in:)(a1))
  {
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.spamReport);
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "checking facetime flow", v5, 2u);
      swift_slowDealloc();
    }

    return CallReportingViewModel.reportingFaceTimeFlow(for:)(a1);
  }
  else
  {
    id v7 = [self sharedInstance];
    unsigned int v8 = [v7 isClassificationAvailable];

    if (v8)
    {
      if (one-time initialization token for spamReport != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.spamReport);
      UIFontWeight v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = 2;
        id v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "third party flow", v13, 2u);
        swift_slowDealloc();
      }
      else
      {

        return 2;
      }
    }
    else if ([a1 carrierAllowsReportVoiceCall])
    {
      if (one-time initialization token for spamReport != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.spamReport);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "carrier flow", v17, 2u);
        swift_slowDealloc();
      }

      return 1;
    }
    else
    {
      return 6;
    }
    return v12;
  }
}

uint64_t CallReportingViewModel.reportActionTitle(of:)(unint64_t a1)
{
  if (a1 >= 7)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + *off_100283418[a1]);
    swift_bridgeObjectRetain();
    return v2;
  }
  return result;
}

id CallReportingViewModel.reportActionImage.getter()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self systemImageNamed:v0];

  return v1;
}

void CallReportingViewModel.report(call:)(void *a1)
{
  id v3 = *(id *)(v1 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager);
  FaceTimeSpamReportManager.reportSpam(call:)(a1);
}

Swift::Void __swiftcall CallReportingViewModel.block(unknownContacts:)(Swift::OpaquePointer unknownContacts)
{
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.spamReport);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "blocking", v5, 2u);
    swift_slowDealloc();
  }

  specialized CallReportingViewModel.block(contacts:)((unint64_t)unknownContacts._rawValue);
}

uint64_t CallReportingViewModel.getCarrierNameOfCall(for:)(void *a1)
{
  v5[3] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v5[4] = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v5[0] = a1;
  swift_retain();
  id v2 = a1;
  uint64_t v3 = dispatch thunk of CarrierVoiceSpamReportHelper.reportSpamAlertControllerCarrierName(for:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  return v3;
}

uint64_t CallReportingViewModel.reportSpam(voiceCall:)(void *a1)
{
  return CallReportingViewModel.reportSpam(voiceCall:)(a1, (void (*)(void *))&dispatch thunk of CarrierVoiceSpamReportHelper.reportSpam(voiceCall:));
}

uint64_t CallReportingViewModel.logEventForCancelledVoiceCallSpamReport(for:)(void *a1)
{
  return CallReportingViewModel.reportSpam(voiceCall:)(a1, (void (*)(void *))&dispatch thunk of CarrierVoiceSpamReportHelper.logEventForCancelledScenario(for:));
}

uint64_t CallReportingViewModel.reportSpam(voiceCall:)(void *a1, void (*a2)(void *))
{
  v6[3] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v6[4] = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v6[0] = a1;
  swift_retain();
  id v4 = a1;
  a2(v6);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
}

unint64_t CallReportingViewModel.ReportingFlow.init(rawValue:)(unint64_t a1)
{
  return specialized CallReportingViewModel.ReportingFlow.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CallReportingViewModel.ReportingFlow@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized CallReportingViewModel.ReportingFlow.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t CallReportingViewModel.__allocating_init(featureFlags:spamReportManager:carrierVoiceSpamReportHelper:)(void *a1, void *a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  specialized CallReportingViewModel.init(featureFlags:spamReportManager:carrierVoiceSpamReportHelper:)(a1, a2, a3);
  uint64_t v9 = v8;

  swift_release();
  return v9;
}

uint64_t CallReportingViewModel.init(featureFlags:spamReportManager:carrierVoiceSpamReportHelper:)(void *a1, void *a2, uint64_t a3)
{
  specialized CallReportingViewModel.init(featureFlags:spamReportManager:carrierVoiceSpamReportHelper:)(a1, a2, a3);
  uint64_t v6 = v5;

  swift_release();
  return v6;
}

uint64_t CallReportingViewModel.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v1 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v2 = [objc_allocWithZone((Class)type metadata accessor for FaceTimeSpamReportManager()) init];
  type metadata accessor for VoiceSpamReportTelephonyManager();
  static VoiceSpamReportTelephonyManager.shared.getter();
  type metadata accessor for CarrierVoiceSpamReportHelper();
  swift_allocObject();
  uint64_t v3 = CarrierVoiceSpamReportHelper.init(voiceSpamReportTelephonyManager:)();
  id v4 = objc_allocWithZone(ObjectType);
  specialized CallReportingViewModel.init(featureFlags:spamReportManager:carrierVoiceSpamReportHelper:)(v1, v2, v3);
  uint64_t v6 = v5;

  swift_release();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t CallReportingViewModel.reportAlertTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportAlertTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportAlertCancel.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportAlertCancel);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportAlertReport.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportAlertReport);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportBlockFTAlertTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportBlockFTAlertCancel.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertCancel);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportBlockFTAlertBlock.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertBlock);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportBlockFTAlertReportBlock.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportBlockFTAlertReportBlock);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.blockAllButtonTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockAllButtonTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.blockAllAlertTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockAllAlertTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.blockUnknownButtonTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_blockUnknownButtonTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportInitiatorAlertTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportInitiatorAlertTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportInitiatorAlert.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportInitiatorAlert);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CallReportingViewModel.reportGroupInitiatorAlertTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_reportGroupInitiatorAlertTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t @objc CallReportingViewModel.block(contacts:)(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, void (*a6)(uint64_t))
{
  type metadata accessor for VMAccount(0, a4);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a1;
  a6(v8);

  return swift_bridgeObjectRelease();
}

id CallReportingViewModel.shouldShowContactBlockReportButton(for:)(void *a1)
{
  id result = [a1 isComingFaceTimeCall];
  if (result)
  {
    return (id)CallReportingViewModel.atLeastOneUnknownCaller(in:)(a1);
  }
  return result;
}

uint64_t CallReportingViewModel.reportingFaceTimeFlow(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_featureFlags;
  if ([*(id *)(v1 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_featureFlags) unknownInitiatorReportEnabled])
  {
    id v5 = [a1 initiator];

    if (v5)
    {
      if (one-time initialization token for spamReport != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
      id v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        id v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "initiator is not nil and unknownInitiatorReportEnabled is enabled", v9, 2u);
        swift_slowDealloc();
      }

      if (([a1 isOneToOne] & 1) == 0)
      {
        if (CallReportingViewModel.isInitiatorUnknown(in:)(a1)) {
          return 5;
        }
        else {
          return 4;
        }
      }
      return 0;
    }
  }
  if ([*(id *)(v2 + v4) unknownInitiatorReportEnabled])
  {
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.spamReport);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "initiator is nil and unknownInitiatorReportEnabled is enabled", v14, 2u);
      swift_slowDealloc();
    }

    if (([a1 isOneToOne] & 1) != 0
      || (uint64_t v15 = CallReportingViewModel.contactByHandles(in:)(a1)[2], swift_bridgeObjectRelease(), v15))
    {
      if (([a1 isOneToOne] & 1) == 0
        && CallReportingViewModel.atLeastOneUnknownCaller(in:)(a1))
      {
        return 4;
      }
      return 0;
    }
    return 3;
  }
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.spamReport);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "unknownInitiatorReportEnabled is off", v19, 2u);
    swift_slowDealloc();
  }

  if (([a1 isOneToOne] & 1) == 0)
  {
    uint64_t v20 = CallReportingViewModel.contactByHandles(in:)(a1)[2];
    swift_bridgeObjectRelease();
    if (!v20)
    {
      uint64_t v24 = Logger.logObject.getter();
      uint64_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, (os_log_type_t)v25))
      {
        int v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "groupFaceTimeBlockAll", v26, 2u);
        swift_slowDealloc();
      }

      return 3;
    }
  }
  if ([a1 isOneToOne]) {
    return 0;
  }
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "not spam flow", v23, 2u);
    swift_slowDealloc();
  }

  return 6;
}

uint64_t CallReportingViewModel.isInitiatorUnknown(in:)(void *a1)
{
  id v2 = [a1 initiator];
  if (v2)
  {
    uint64_t v3 = v2;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.spamReport);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v8 = 138412290;
      id v9 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v3;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "isInitiatorUnknownForCall call.initiator %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v15 = CallReportingViewModel.contactByHandles(in:)(a1);
    uint64_t v16 = v15[2];
    if (v16)
    {
      uint64_t v17 = (void **)(v15 + 4);
      while (1)
      {
        uint64_t v19 = *v17++;
        os_log_type_t v18 = v19;
        if (v19)
        {
          type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
          id v20 = v5;
          id v21 = v18;
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            break;
          }
        }
        if (!--v16) {
          goto LABEL_18;
        }
      }
      uint64_t v14 = 0;
    }
    else
    {
LABEL_18:
      uint64_t v14 = 1;
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "isInitiatorUnknown: %{BOOL}d", v25, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.spamReport);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "isInitiatorUnknownForCall call.initiator nil", v13, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v14;
}

BOOL CallReportingViewModel.allUnknownContact(in:)(void *a1)
{
  uint64_t v1 = CallReportingViewModel.contactByHandles(in:)(a1)[2];
  swift_bridgeObjectRelease();
  return v1 == 0;
}

BOOL CallReportingViewModel.atLeastOneUnknownCaller(in:)(void *a1)
{
  id v2 = [a1 validRemoteParticipantHandles];
  if (!v2) {
    return 1;
  }
  uint64_t v3 = v2;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = CallReportingViewModel.contactByHandles(in:)(a1)[2];
  swift_bridgeObjectRelease();
  if ((v4 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(v4 + 16);
  }
  swift_bridgeObjectRelease();
  return v5 != v6;
}

void *CallReportingViewModel.unknownHandles(in:)(void *a1)
{
  id v3 = [a1 validRemoteParticipantHandles];
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_recentsController);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1002053A0;
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for PHContactViewController);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v9 = v6;
    *(void *)(v7 + 32) = [ObjCClassFromMetadata descriptorForRequiredKeys];
    specialized Array._endMutation()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v11 = [v9 contactByHandleForRecentCall:a1 keyDescriptors:isa];

    if (v11)
    {
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::Int v13 = specialized Set._Variant.filter(_:)(v5, v12);
      swift_bridgeObjectRelease();
      uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
      swift_release();
      uint64_t v15 = specialized _arrayForceCast<A, B>(_:)((unint64_t)v14);
      swift_release();
      return v15;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.spamReport);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "unknownHandles is empty b/c contactByHandle is nil or no handles", v20, 2u);
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

void *CallReportingViewModel.contactByHandles(in:)(void *a1)
{
  id v3 = [a1 validRemoteParticipantHandles];
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_recentsController);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1002053A0;
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for PHContactViewController);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v9 = v6;
    *(void *)(v7 + 32) = [ObjCClassFromMetadata descriptorForRequiredKeys];
    specialized Array._endMutation()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v11 = [v9 contactByHandleForRecentCall:a1 keyDescriptors:isa];

    if (v11)
    {
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Sequence.filter(_:)(v5, v12);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v15 = specialized _arrayForceCast<A, B>(_:)(v14);
      swift_bridgeObjectRelease();
      return v15;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.spamReport);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "contacts list is empty", v20, 2u);
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

id @objc CallReportingViewModel.getReportInitiatorMessage(formattedHandle:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v10;
}

void @objc CallReportingViewModel.reportSpam(voiceCall:)(void *a1, uint64_t a2, void *a3, void (*a4)(void *))
{
  v9[3] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v9[4] = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v9[0] = a3;
  id v7 = a3;
  id v8 = a1;
  swift_retain();
  a4(v9);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
}

uint64_t CHRecentCall.isTelephony.getter()
{
  return CHRecentCall.isTelephony.getter();
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  uint64_t v1 = [v0 serviceProvider];
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_9;
  }
  id v2 = v1;
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    id v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9 & 1;
  }
}

uint64_t CHRecentCall.isFaceTime.getter()
{
  return CHRecentCall.isTelephony.getter();
}

id CHRecentCall.isOneToOne.getter()
{
  id result = [v0 remoteParticipantHandles];
  if (result)
  {
    id v2 = result;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v4 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v4 = *(void *)(v3 + 16);
    }
    swift_bridgeObjectRelease();
    return (id)(v4 == 1);
  }
  return result;
}

uint64_t CHRecentCall.carrierAllowsReportVoiceCall.getter()
{
  type metadata accessor for VoiceSpamReportTelephonyManager();
  static VoiceSpamReportTelephonyManager.shared.getter();
  type metadata accessor for CarrierVoiceSpamReportHelper();
  swift_allocObject();
  CarrierVoiceSpamReportHelper.init(voiceSpamReportTelephonyManager:)();
  v4[3] = type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v4[4] = lazy protocol witness table accessor for type CHHandle and conformance NSObject(&lazy protocol witness table cache variable for type CHRecentCall and conformance CHRecentCall, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  v4[0] = v0;
  id v1 = v0;
  char v2 = dispatch thunk of CarrierVoiceSpamReportHelper.carrierAllowsReportVoiceCall(for:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
  return v2 & 1;
}

BOOL CHRecentCall.isIncoming.getter()
{
  int v1 = kCHCallStatusIncoming;
  return ([v0 callStatus] & v1) != 0;
}

id CHRecentCall.isComingFaceTimeCall.getter()
{
  id result = [v0 isIncoming];
  if (result) {
    return [v0 isFaceTime];
  }
  return result;
}

uint64_t CHRecentCall.callDate.getter@<X0>(uint64_t a1@<X8>)
{
  return CHRecentCall.callDate.getter((SEL *)&selRef_date, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t CHRecentCall.simUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return CHRecentCall.callDate.getter((SEL *)&selRef_localParticipantUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t CHRecentCall.callDate.getter@<X0>(SEL *a1@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  id v8 = [v4 *a1];
  if (v8)
  {
    id v9 = v8;
    a2();

    uint64_t v10 = ((uint64_t (*)(void))a3)(0);
    id v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a4;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a3();
    id v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a4;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

id CHRecentCall.formattedRemoteParticipantHandles.getter()
{
  id v1 = [v0 remoteParticipantHandles];
  if (v1)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Sequence.compactMap<A>(_:)(v2);
    id v1 = v3;
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t protocol witness for CarrierSpamModelable.callDate.getter in conformance CHRecentCall@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for CarrierSpamModelable.callDate.getter in conformance CHRecentCall((SEL *)&selRef_date, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t protocol witness for CarrierSpamModelable.simUUID.getter in conformance CHRecentCall@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for CarrierSpamModelable.callDate.getter in conformance CHRecentCall((SEL *)&selRef_localParticipantUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t protocol witness for CarrierSpamModelable.callDate.getter in conformance CHRecentCall@<X0>(SEL *a1@<X2>, void (*a2)(void)@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  id v8 = [*v4 *a1];
  if (v8)
  {
    id v9 = v8;
    a2();

    uint64_t v10 = ((uint64_t (*)(void))a3)(0);
    id v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a4;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a3();
    id v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a4;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

id protocol witness for CarrierSpamModelable.formattedRemoteParticipantHandles.getter in conformance CHRecentCall()
{
  id v1 = [*v0 remoteParticipantHandles];
  if (v1)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Sequence.compactMap<A>(_:)(v2);
    id v1 = v3;
    swift_bridgeObjectRelease();
  }
  return v1;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<CHHandle>);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (void *)result;
  os_log_type_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = v10[5];
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *((unsigned char *)v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CHHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v24;
    uint64_t v22 = v25;
    uint64_t v4 = v26;
    uint64_t v5 = v27;
    unint64_t v6 = v28;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
  }
  int64_t v21 = (unint64_t)(v4 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_42;
    }
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v23;
    swift_unknownObjectRelease();
    uint64_t v12 = v5;
    uint64_t v10 = v6;
    if (!v23) {
      goto LABEL_42;
    }
LABEL_34:
    if ((a2 & 0xC000000000000001) != 0)
    {
      id v17 = v13;
      if (!__CocoaDictionary.lookup(_:)()) {
        goto LABEL_8;
      }
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v18 = v23;
      swift_unknownObjectRelease();

      if (!v23) {
        goto LABEL_9;
      }
    }
    else
    {
      if (!*(void *)(a2 + 16)) {
        goto LABEL_9;
      }
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      if ((v20 & 1) == 0)
      {
LABEL_8:

LABEL_9:
        goto LABEL_10;
      }
      id v18 = *(id *)(*(void *)(a2 + 56) + 8 * v19);

      if (!v18) {
        goto LABEL_9;
      }
    }

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_10:
    uint64_t v5 = v12;
    unint64_t v6 = v10;
  }
  if (v6)
  {
    uint64_t v10 = (v6 - 1) & v6;
    unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v12 = v5;
LABEL_33:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_42;
    }
    goto LABEL_34;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v21) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v14);
    uint64_t v12 = v5 + 1;
    if (!v15)
    {
      uint64_t v12 = v5 + 2;
      if (v5 + 2 >= v21) {
        goto LABEL_42;
      }
      unint64_t v15 = *(void *)(v22 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v5 + 3;
        if (v5 + 3 >= v21) {
          goto LABEL_42;
        }
        unint64_t v15 = *(void *)(v22 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v5 + 4;
          if (v5 + 4 >= v21) {
            goto LABEL_42;
          }
          unint64_t v15 = *(void *)(v22 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v5 + 5;
            if (v5 + 5 >= v21) {
              goto LABEL_42;
            }
            unint64_t v15 = *(void *)(v22 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v5 + 6;
              while (v21 != v16)
              {
                unint64_t v15 = *(void *)(v22 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_32;
                }
              }
LABEL_42:
              outlined consume of Set<CHHandle>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_32:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t specialized CallReportingViewModel.getCarrierSpamReportAlertTitle(carrierName:)(uint64_t a1, uint64_t a2)
{
  id v4 = [self mainBundle];
  v11._object = (void *)0xE000000000000000;
  v5._object = (void *)0x8000000100242640;
  v5._countAndFlagsBits = 0xD000000000000025;
  v6.value._countAndFlagsBits = 0x746E656365524850;
  v6.value._object = (void *)0xE900000000000073;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v11);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002053C0;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id specialized CallReportingViewModel.getFormattedInitiator(for:)(void *a1)
{
  id v1 = [a1 initiator];
  if (!v1)
  {
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.spamReport);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "initiator unknown", v18, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for TUHandle);
  id v3 = v2;
  id v4 = TUHandle.init(_:)(v3);
  if ([v4 type] != (id)2) {
    goto LABEL_9;
  }
  id result = [v4 value];
  if (!result)
  {
    __break(1u);
    goto LABEL_34;
  }
  Swift::String_optional v6 = result;
  Swift::String v7 = (void *)PNCopyBestGuessCountryCodeForNumber();

  if (!v7)
  {
LABEL_9:

    goto LABEL_18;
  }
  id result = [v4 value];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)CFPhoneNumberCreate();

    if (v9)
    {
      uint64_t String = CFPhoneNumberCreateString();
      if (String)
      {
        Swift::String v11 = (void *)String;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v14 = v13;

        goto LABEL_19;
      }
    }
    else
    {
    }
LABEL_18:
    uint64_t v12 = 0;
    unint64_t v14 = 0;
LABEL_19:
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.spamReport);
    swift_bridgeObjectRetain_n();
    id v20 = v3;
    int64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      if (v14) {
        uint64_t v25 = v12;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v14) {
        unint64_t v26 = v14;
      }
      else {
        unint64_t v26 = 0xE000000000000000;
      }
      uint64_t v29 = v12;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2112;
      id v27 = v20;
      id v30 = TUHandle.init(_:)(v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v24 = v30;

      uint64_t v12 = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "formattedPhoneNumber: %s,  TUHandle(initiator): %@", (uint8_t *)v23, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (v14) {
        goto LABEL_29;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (v14)
      {
LABEL_29:

        return (id)v12;
      }
    }
    id v28 = [v20 value];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v12;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized CallReportingViewModel.getReportInitiatorMessage(formattedHandle:)(uint64_t a1, uint64_t a2)
{
  id v4 = [self mainBundle];
  v11._object = (void *)0xE000000000000000;
  v5._object = (void *)0x8000000100242600;
  v5._countAndFlagsBits = 0xD000000000000030;
  v6.value._countAndFlagsBits = 0x746E656365524850;
  v6.value._object = (void *)0xE900000000000073;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v11);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002053C0;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized CallReportingViewModel.block(contacts:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_15;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  p_class_meths = &OBJC_PROTOCOL___UITextViewDelegate.class_meths;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(a1 + 8 * v4 + 32);
    }
    uint64_t v8 = v7;
    if (p_class_meths[424] != (__objc2_meth_list *)-1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.spamReport);
    uint64_t v10 = v8;
    Swift::String_optional v6 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      unint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      *(void *)(v12 + 4) = v10;
      *unint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, v11, "blocking, contact %@", (uint8_t *)v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UITextViewDelegate + 32);
      swift_slowDealloc();
    }
    else
    {

      Swift::String_optional v6 = v10;
    }

    ++v4;
    [v10 block];
  }
  while (v2 != v4);
LABEL_15:

  return swift_bridgeObjectRelease();
}

void specialized CallReportingViewModel.blockInitiator(spamCall:)()
{
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.spamReport);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "blockInitiator", v3, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
  SpamModelable.blockInitiator()();
}

unint64_t specialized CallReportingViewModel.ReportingFlow.init(rawValue:)(unint64_t result)
{
  if (result > 6) {
    return 0;
  }
  return result;
}

id specialized CallReportingViewModel.block(handles:)(unint64_t a1)
{
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.spamReport);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::String v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "blocking based on handles", v5, 2u);
    swift_slowDealloc();
  }

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = (uint64_t)result;
    if (result) {
      goto LABEL_7;
    }
LABEL_31:
    return (id)swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id result = (id)swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_31;
  }
LABEL_7:
  uint64_t v8 = v6 - 1;
  if (v6 >= 1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = a1 & 0xC000000000000001;
    unint64_t v25 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v10) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(a1 + 8 * v9 + 32);
      }
      uint64_t v12 = v11;
      if ([v11 type] == (id)2)
      {
        unint64_t v13 = a1;
        id v14 = [v12 value];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v15 = (id)TUHomeCountryCode();
        if (v15)
        {
          uint64_t v16 = v15;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v18 = v17;
        }
        else
        {
          uint64_t v18 = 0;
        }
        NSString v21 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        if (v18)
        {
          NSString v22 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v22 = 0;
        }
        id v23 = [objc_allocWithZone((Class)TUPhoneNumber) initWithDigits:v21 countryCode:v22];

        id result = [self sharedPrivacyManager];
        if (!result) {
          goto LABEL_35;
        }
        uint64_t v24 = result;
        [result setBlockIncomingCommunication:1 forPhoneNumber:v23];

        a1 = v13;
        unint64_t v10 = v25;
        if (v8 == v9) {
          goto LABEL_31;
        }
      }
      else if ([v12 type] == (id)3)
      {
        id result = [self sharedPrivacyManager];
        if (!result) {
          goto LABEL_36;
        }
        uint64_t v19 = result;
        NSString v20 = [v12 value];
        if (!v20)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v20 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v19 setBlockIncomingCommunication:1 forEmailAddress:v20];

        if (v8 == v9) {
          goto LABEL_31;
        }
      }
      else
      {

        if (v8 == v9) {
          goto LABEL_31;
        }
      }
      ++v9;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized CallReportingViewModel.unblock(contacts:)(unint64_t a1)
{
  if (one-time initialization token for spamReport != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.spamReport);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::String v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "unblocking", v5, 2u);
    swift_slowDealloc();
  }

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_14;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(a1 + 8 * i + 32);
    }
    unint64_t v10 = v9;
    [v9 unblock];
  }
LABEL_14:

  return swift_bridgeObjectRelease();
}

uint64_t specialized CallReportingViewModel.isBlocked(contacts:)(unint64_t a1)
{
  if (one-time initialization token for spamReport != -1) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.spamReport);
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      Swift::String v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "are contacts blocked", v5, 2u);
      swift_slowDealloc();
    }

    if (a1 >> 62) {
      break;
    }
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_20;
    }
LABEL_6:
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      id v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v11 = (uint64_t)[v8 isBlocked];

      ++v7;
      if (v11) {
        BOOL v12 = v10 == v6;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_18:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (v6) {
    goto LABEL_6;
  }
LABEL_20:
  uint64_t v11 = 1;
LABEL_21:
  swift_bridgeObjectRelease();
  return v11;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = 0;
  int64_t v6 = 0;
  uint64_t v27 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v10 = a4 & 0xC000000000000001;
  if (v9) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v14 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v14 < v28)
    {
      unint64_t v15 = *(void *)(v27 + 8 * v14);
      ++v6;
      if (v15) {
        goto LABEL_21;
      }
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v28) {
        goto LABEL_31;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v6);
      if (v15) {
        goto LABEL_21;
      }
      int64_t v6 = v14 + 2;
      if (v14 + 2 >= v28) {
        goto LABEL_31;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v6);
      if (v15)
      {
LABEL_21:
        unint64_t v9 = (v15 - 1) & v15;
        for (unint64_t i = __clz(__rbit64(v15)) + (v6 << 6); ; unint64_t i = v12 | (v6 << 6))
        {
          uint64_t v17 = *(void **)(*(void *)(a3 + 48) + 8 * i);
          if (v10)
          {
            id v18 = v17;
            if (__CocoaDictionary.lookup(_:)())
            {
              type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v19 = v29;
              swift_unknownObjectRelease();
              if (v29) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            uint64_t v20 = *(void *)(a4 + 16);
            id v21 = v17;
            if (v20)
            {
              unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
              if (v23)
              {
                id v19 = *(id *)(*(void *)(a4 + 56) + 8 * v22);
                if (v19)
                {
LABEL_29:

                  if (!v9) {
                    goto LABEL_8;
                  }
                  goto LABEL_7;
                }
              }
            }
          }

          *(unint64_t *)((char *)a1 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
          if (__OFADD__(v26++, 1)) {
            goto LABEL_34;
          }
          if (!v9) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }
      int64_t v16 = v14 + 3;
      if (v16 < v28)
      {
        unint64_t v15 = *(void *)(v27 + 8 * v16);
        if (v15)
        {
          int64_t v6 = v16;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v6 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_33;
          }
          if (v6 >= v28) {
            break;
          }
          unint64_t v15 = *(void *)(v27 + 8 * v6);
          ++v16;
          if (v15) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_31:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v26, a3, &demangling cache variable for type metadata for _SetStorage<CHHandle>);
    return;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  char v23;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  void *v29;

  uint64_t v26 = 0;
  int64_t v6 = 0;
  uint64_t v27 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v10 = a4 & 0xC000000000000001;
  if (v9) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v14 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v14 < v28)
    {
      unint64_t v15 = *(void *)(v27 + 8 * v14);
      ++v6;
      if (v15) {
        goto LABEL_21;
      }
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v28) {
        goto LABEL_31;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v6);
      if (v15) {
        goto LABEL_21;
      }
      int64_t v6 = v14 + 2;
      if (v14 + 2 >= v28) {
        goto LABEL_31;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v6);
      if (v15)
      {
LABEL_21:
        unint64_t v9 = (v15 - 1) & v15;
        for (unint64_t i = __clz(__rbit64(v15)) + (v6 << 6); ; unint64_t i = v12 | (v6 << 6))
        {
          uint64_t v17 = *(void **)(*(void *)(a3 + 48) + 8 * i);
          if (v10)
          {
            id v18 = v17;
            if (__CocoaDictionary.lookup(_:)())
            {
              type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v19 = v29;
              swift_unknownObjectRelease();
              if (v29) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            uint64_t v20 = *(void *)(a4 + 16);
            id v21 = v17;
            if (v20)
            {
              unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
              if (v23)
              {
                id v19 = *(id *)(*(void *)(a4 + 56) + 8 * v22);
                if (v19)
                {
LABEL_29:

                  if (!v9) {
                    goto LABEL_8;
                  }
                  goto LABEL_7;
                }
              }
            }
          }

          *(unint64_t *)((char *)a1 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
          if (__OFADD__(v26++, 1)) {
            goto LABEL_34;
          }
          if (!v9) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }
      int64_t v16 = v14 + 3;
      if (v16 < v28)
      {
        unint64_t v15 = *(void *)(v27 + 8 * v16);
        if (v15)
        {
          int64_t v6 = v16;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v6 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_33;
          }
          if (v6 >= v28) {
            break;
          }
          unint64_t v15 = *(void *)(v27 + 8 * v6);
          ++v16;
          if (v15) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_31:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v26, a3);
    return;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v11 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v11 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return specialized _NativeSet.filter(_:)(a1, a2);
  }
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  uint64_t v3 = __CocoaSet.Iterator.next()();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    do
    {
      swift_dynamicCast();
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v11 = v20;
        if (!__CocoaDictionary.lookup(_:)()) {
          goto LABEL_15;
        }
        type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = (id)v4;
        swift_unknownObjectRelease();
      }
      else
      {
        if (!*(void *)(a2 + 16)) {
          goto LABEL_16;
        }
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
        if ((v14 & 1) == 0)
        {
LABEL_15:

LABEL_16:
          unint64_t v15 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v15) {
            specialized _NativeSet.resize(capacity:)(v15 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          unsigned int v6 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v7 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v8 = result & ~v7;
          unint64_t v9 = v8 >> 6;
          if (((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7)) != 0)
          {
            unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7))) | v8 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v16 = 0;
            unint64_t v17 = (unint64_t)(63 - v7) >> 6;
            do
            {
              if (++v9 == v17 && (v16 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v18 = v9 == v17;
              if (v9 == v17) {
                unint64_t v9 = 0;
              }
              v16 |= v18;
              uint64_t v19 = *(void *)&v6[8 * v9];
            }
            while (v19 == -1);
            unint64_t v10 = __clz(__rbit64(~v19)) + (v9 << 6);
          }
          *(void *)&v6[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v10) = v20;
          ++*((void *)&_swiftEmptySetSingleton + 2);
          goto LABEL_7;
        }
        id v12 = *(id *)(*(void *)(a2 + 56) + 8 * v13);

        if (!v12) {
          goto LABEL_16;
        }
      }

LABEL_7:
      uint64_t v4 = __CocoaSet.Iterator.next()();
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  swift_release();
  return (Swift::Int)&_swiftEmptySetSingleton;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::Int result;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  void *v20;

  if ((a1 & 0xC000000000000001) == 0) {
    return specialized _NativeSet.filter(_:)(a1, a2);
  }
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  uint64_t v3 = __CocoaSet.Iterator.next()();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    do
    {
      swift_dynamicCast();
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v11 = v20;
        if (!__CocoaDictionary.lookup(_:)()) {
          goto LABEL_15;
        }
        type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = (id)v4;
        swift_unknownObjectRelease();
      }
      else
      {
        if (!*(void *)(a2 + 16)) {
          goto LABEL_16;
        }
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
        if ((v14 & 1) == 0)
        {
LABEL_15:

LABEL_16:
          unint64_t v15 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v15) {
            specialized _NativeSet.resize(capacity:)(v15 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          unsigned int v6 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v7 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v8 = result & ~v7;
          unint64_t v9 = v8 >> 6;
          if (((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7)) != 0)
          {
            unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7))) | v8 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v16 = 0;
            unint64_t v17 = (unint64_t)(63 - v7) >> 6;
            do
            {
              if (++v9 == v17 && (v16 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v18 = v9 == v17;
              if (v9 == v17) {
                unint64_t v9 = 0;
              }
              v16 |= v18;
              uint64_t v19 = *(void *)&v6[8 * v9];
            }
            while (v19 == -1);
            unint64_t v10 = __clz(__rbit64(~v19)) + (v9 << 6);
          }
          *(void *)&v6[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v10) = v20;
          ++*((void *)&_swiftEmptySetSingleton + 2);
          goto LABEL_7;
        }
        id v12 = *(id *)(*(void *)(a2 + 56) + 8 * v13);

        if (!v12) {
          goto LABEL_16;
        }
      }

LABEL_7:
      uint64_t v4 = __CocoaSet.Iterator.next()();
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  swift_release();
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t lazy protocol witness table accessor for type CallReportingViewModel.ReportingFlow and conformance CallReportingViewModel.ReportingFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type CallReportingViewModel.ReportingFlow and conformance CallReportingViewModel.ReportingFlow;
  if (!lazy protocol witness table cache variable for type CallReportingViewModel.ReportingFlow and conformance CallReportingViewModel.ReportingFlow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallReportingViewModel.ReportingFlow and conformance CallReportingViewModel.ReportingFlow);
  }
  return result;
}

uint64_t type metadata accessor for CallReportingViewModel()
{
  return self;
}

ValueMetadata *type metadata accessor for CallReportingViewModel.ReportingFlow()
{
  return &type metadata for CallReportingViewModel.ReportingFlow;
}

Swift::Void __swiftcall MPAnalyticsLogger.logEvent(_:)(Swift::String a1)
{
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  id v1 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  NSString v2 = String._bridgeToObjectiveC()();
  v4[4] = MPRTTTranscriptionMessage.confidenceRating.getter;
  void v4[5] = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v4[3] = &block_descriptor_12;
  uint64_t v3 = _Block_copy(v4);
  AnalyticsSendEventLazy();
  _Block_release(v3);
}

Swift::Void __swiftcall MPAnalyticsLogger.logCustomGreetingUpdated()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSNumber)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002053C0;
  *(void *)(inited + 32) = 0xD000000000000017;
  *(void *)(inited + 40) = 0x80000001002426B0;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))((swift_isaMask & *v0) + 0x58))(0xD00000000000002FLL, 0x80000001002426D0, v4);
  swift_bridgeObjectRelease();
}

id MPAnalyticsLogger.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MPAnalyticsLogger();
  return [super init];
}

id MPAnalyticsLogger.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MPAnalyticsLogger();
  return [super dealloc];
}

uint64_t sub_10017EEE8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

id VoicemailTableViewModel.dialRequest.getter(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = VoicemailTableViewModel.destinationCallProvider.getter(a1, a2, a3);
  if (v13)
  {
    char v14 = v13;
    id v15 = [objc_allocWithZone((Class)TUDialRequest) initWithProvider:v13];
    id v16 = specialized VoicemailTableViewModel.destinationHandle.getter();
    [v15 setHandle:v16];

    [v15 setOriginatingUIType:50];
    id v17 = [a3 receiverDestinationID];
    if (v17)
    {
      BOOL v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      uint64_t v22 = HIBYTE(v21) & 0xF;
      if ((v21 & 0x2000000000000000) == 0) {
        uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
      }
      if (v22 && (id v23 = [a3 receiverISOCountryCode]) != 0)
      {
        uint64_t v24 = v23;
        id v25 = objc_allocWithZone((Class)TUHandle);
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v27 = [v25 initWithDestinationID:v26];

        id v28 = [v27 canonicalHandleForISOCountryCode:v24];
        id v29 = [v14 senderIdentityForHandle:v28];
        if (v29)
        {
          id v30 = v29;
          id v31 = [v29 accountUUID];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
          Class isa = 0;
        }
        [v15 setLocalSenderIdentityAccountUUID:isa];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.mobilePhone);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Could not initiate dial request, the destination call provider is nil.", v36, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v15;
}

uint64_t VoicemailTableViewModel.voicemailMessage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Message.destinationID.getter()
{
  id v1 = [v0 callbackDestinationID];
  if (!v1)
  {
    id v1 = [v0 senderDestinationID];
    if (!v1) {
      return 0;
    }
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id VoicemailTableViewModel.destinationCallProvider.getter(void *a1, id a2, void *a3)
{
  id v6 = [a2 telephonyProvider];
  id v7 = [v6 identifier];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = [a3 provider];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v8 == v12 && v10 == v14)
  {
    swift_bridgeObjectRelease_n();
    id v17 = &selRef_telephonyProvider;
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v17 = &selRef_faceTimeProvider;
    if (v16) {
      id v17 = &selRef_telephonyProvider;
    }
  }
  id v18 = [a2 *v17];
  if (![a1 callScreeningEnabledM3])
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.mobilePhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      NSString v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "CallScreeningEnabledM3 is off, so we default to call back by a telephony call", v26, 2u);
      swift_slowDealloc();
    }
LABEL_39:

    return v18;
  }
  id v19 = specialized VoicemailTableViewModel.destinationHandle.getter();
  if (v19)
  {
    unint64_t v20 = v19;
    id v21 = [v19 type];
    if (v21 == (id)1)
    {
      if (one-time initialization token for mobilePhone != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.mobilePhone);
      id v32 = v20;
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315394;
        id v36 = [v32 value];
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v38;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2048;
        [v32 type];

        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Could not start a voicemail call with destinationID: %s, destinationHandle.type: %ld", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v18 = 0;
    }
    else if (v21 != (id)2)
    {
      if (v21 == (id)3)
      {
        id v22 = [a2 faceTimeProvider];

        id v18 = v22;
      }
      else
      {
        if (one-time initialization token for mobilePhone != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)static Logger.mobilePhone);
        id v41 = v20;
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 136315394;
          id v45 = [v41 value];
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v48 = v47;

          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v44 + 12) = 2048;
          [v41 type];

          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "New unknown destinationHandle type when creating a call provider with destinationID: %s, destinationHandle.type: %ld", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
    }
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.mobilePhone);
    id v50 = v20;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v24, v51))
    {

      return v18;
    }
    uint64_t v52 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315394;
    id v53 = [v50 value];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2048;
    [v50 type];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v51, "Try to start a voicemail call with destinationID: %s, destinationHandle.type: %ld", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_39;
  }
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.mobilePhone);
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to create destinationCallProvider because destinationHandle is nil", v30, 2u);
    swift_slowDealloc();
  }

  return 0;
}

id specialized VoicemailTableViewModel.destinationHandle.getter()
{
  swift_getObjectType();
  uint64_t v0 = Message.destinationID.getter();
  if (v1)
  {
    uint64_t v2 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000) == 0) {
      uint64_t v2 = v0 & 0xFFFFFFFFFFFFLL;
    }
    if (v2)
    {
      id v3 = objc_allocWithZone((Class)TUHandle);
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v5 = [v3 initWithDestinationID:v4];

      return v5;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.mobilePhone);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not initiate dial request, callbackDestinationID is nil.", v9, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t destroy for VoicemailTableViewModel(id *a1)
{
  return swift_unknownObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for VoicemailTableViewModel(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  NSString v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VoicemailTableViewModel(uint64_t a1, uint64_t a2)
{
  NSString v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  os_log_type_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VoicemailTableViewModel(uint64_t a1, uint64_t a2)
{
  NSString v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VoicemailTableViewModel(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoicemailTableViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VoicemailTableViewModel()
{
  return &type metadata for VoicemailTableViewModel;
}

void *ContactSearchViewCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static ContactSearchViewCell.reuseIdentifier;
}

void ContactSearchViewCell.configure(contactSearchResult:searchText:idsStatusUpdatedPublisher:searchType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x68))();
  uint64_t v12 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact;
  uint64_t v13 = *(void **)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact);
  *(void *)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact) = v11;

  uint64_t v14 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber;
  id v15 = *(void **)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber);
  *(void *)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber) = 0;

  uint64_t v16 = v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType;
  *(void *)uint64_t v16 = a5;
  *(unsigned char *)(v16 + 8) = 0;
  id v17 = (void *)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchText);
  void *v17 = a2;
  v17[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRelease();
  id v33 = (id)(*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x80))(v18);
  uint64_t v19 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x98))();
  unint64_t v20 = *(void **)(v6 + v14);
  *(void *)(v6 + v14) = v19;

  id v21 = *(void **)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel);
  id v22 = [self stringFromContact:*(void *)(v6 + v12) style:0];
  [v21 setText:v22];

  ContactSearchViewCell.subtitleText(for:)(a1);
  if (String.count.getter())
  {
    uint64_t v23 = *(void **)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel);
    [v23 setHidden:0];
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 setText:v24];
  }
  else
  {
    swift_bridgeObjectRelease();
    [*(id *)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel) setHidden:1];
  }
  os_log_type_t v25 = *(void **)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarViewController);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1002053A0;
  uint64_t v27 = *(void **)(v6 + v12);
  *(void *)(v26 + 32) = v27;
  specialized Array._endMutation()();
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  id v28 = v27;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 setContacts:isa];

  if (ContactSearchViewCell.configureVideoButton()())
  {
  }
  else
  {
    uint64_t v30 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = partial apply for closure #1 in ContactSearchViewCell.configure(contactSearchResult:searchText:idsStatusUpdatedPublisher:searchType:);
    *(void *)(v31 + 24) = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(), Never>);
    lazy protocol witness table accessor for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>();
    uint64_t v32 = Publisher<>.sink(receiveValue:)();
    swift_release();

    *(void *)(v6 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_idsStatusSubscription) = v32;
    swift_release();
  }
}

void ContactSearchViewCell.highlight(text:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = a3 == 3;
  if (a3 == 2) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = a3 == 3;
  }
  id v7 = *(void **)(v3 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel);
  id v8 = [v7 text];
  if (v8)
  {
    id v9 = v8;
    if (a3 != 2)
    {
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v9 attributedStringToHighlightText:v10 style:v5];

      [v7 setAttributedText:v11];
      id v9 = v11;
    }
  }
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel);
  id v13 = [v12 text];
  if (v13)
  {
    uint64_t v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 attributedStringToHighlightText:v15 style:v6];

    [v12 setAttributedText:v16];
  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

unint64_t static ContactSearchViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000015;
}

id ContactSearchViewCell.textContainer.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___textContainer;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___textContainer];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___textContainer];
  }
  else
  {
    id v4 = closure #1 in ContactSearchViewCell.textContainer.getter(v0);
    BOOL v5 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ContactSearchViewCell.textContainer.getter(char *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1002053B0;
  id v3 = *(void **)&a1[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel];
  id v4 = *(void **)&a1[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel];
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v4;
  specialized Array._endMutation()();
  id v5 = objc_allocWithZone((Class)UIStackView);
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  id v6 = v3;
  id v7 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v5 initWithArrangedSubviews:isa];

  [v9 setAxis:1];
  if (one-time initialization token for gridRowSpacing != -1) {
    swift_once();
  }
  [v9 setSpacing:*(double *)&static SearchLayout.CellSpacingConstants.gridRowSpacing];
  [v9 setAlignment:1];
  [v9 setDistribution:0];
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v10 = [a1 contentView];
  [v10 addSubview:v9];

  return v9;
}

uint64_t ContactSearchViewCell.commonConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___commonConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___commonConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___commonConstraints];
  }
  else
  {
    id v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1002054F0;
    id v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarView];
    id v6 = [v5 topAnchor];
    id v7 = [v3 contentView];
    id v8 = [v7 topAnchor];

    if (one-time initialization token for verticalLayoutMargin != -1) {
      swift_once();
    }
    id v9 = [v6 constraintGreaterThanOrEqualToAnchor:v8 constant:*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];

    *(void *)(v4 + 32) = v9;
    id v10 = [v5 heightAnchor];
    if (one-time initialization token for avatarRadius != -1) {
      swift_once();
    }
    id v11 = [v10 constraintEqualToConstant:*(double *)&static SearchLayout.CellSpacingConstants.avatarRadius];

    *(void *)(v4 + 40) = v11;
    id v12 = ContactSearchViewCell.textContainer.getter();
    id v13 = [v12 topAnchor];

    id v14 = [v3 contentView];
    id v15 = [v14 topAnchor];

    id v16 = [v13 constraintEqualToAnchor:v15 constant:*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];
    *(void *)(v4 + 48) = v16;
    id v17 = ContactSearchViewCell.textContainer.getter();
    id v18 = [v17 bottomAnchor];

    id v19 = [v3 contentView];
    id v20 = [v19 bottomAnchor];

    id v21 = [v18 constraintEqualToAnchor:v20 constant:-*(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];
    *(void *)(v4 + 56) = v21;
    id v22 = ContactSearchViewCell.textContainer.getter();
    id v23 = [v22 trailingAnchor];

    NSString v24 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_callButton];
    id v25 = [v24 leadingAnchor];
    if (one-time initialization token for accessoryButtonSpacing != -1) {
      swift_once();
    }
    id v26 = [v23 constraintLessThanOrEqualToAnchor:v25 constant:-*(double *)&static SearchLayout.CellSpacingConstants.accessoryButtonSpacing];

    *(void *)(v4 + 64) = v26;
    id v27 = [v24 centerYAnchor];
    id v28 = [v3 contentView];
    id v29 = [v28 centerYAnchor];

    id v30 = [v27 constraintEqualToAnchor:v29];
    *(void *)(v4 + 72) = v30;
    id v31 = [v24 trailingAnchor];
    id v32 = [v3 contentView];
    id v33 = [v32 layoutMarginsGuide];

    id v34 = [v33 trailingAnchor];
    id v35 = [v31 constraintEqualToAnchor:v34];

    *(void *)(v4 + 80) = v35;
    id v36 = [*(id *)&v3[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton] centerYAnchor];
    id v37 = [v3 contentView];
    id v38 = [v37 centerYAnchor];

    id v39 = [v36 constraintEqualToAnchor:v38];
    *(void *)(v4 + 88) = v39;
    specialized Array._endMutation()();
    uint64_t v2 = v4;
    *(void *)&v3[v1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ContactSearchViewCell.axConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___axConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___axConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___axConstraints];
  }
  else
  {
    id v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1002053A0;
    id v5 = ContactSearchViewCell.textContainer.getter();
    id v6 = [v5 leadingAnchor];

    id v7 = [v3 contentView];
    id v8 = [v7 layoutMarginsGuide];

    id v9 = [v8 leadingAnchor];
    id v10 = [v6 constraintEqualToAnchor:v9];

    *(void *)(v4 + 32) = v10;
    specialized Array._endMutation()();
    uint64_t v2 = v4;
    *(void *)&v3[v1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ContactSearchViewCell.nonAXConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___nonAXConstraints;
  if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___nonAXConstraints])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___nonAXConstraints];
  }
  else
  {
    id v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100207760;
    id v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarView];
    id v6 = [v5 leadingAnchor];
    id v7 = [v3 contentView];
    id v8 = [v7 layoutMarginsGuide];

    id v9 = [v8 leadingAnchor];
    id v10 = [v6 constraintEqualToAnchor:v9];

    *(void *)(v4 + 32) = v10;
    id v11 = [v5 widthAnchor];
    if (one-time initialization token for avatarRadius != -1) {
      swift_once();
    }
    id v12 = [v11 constraintEqualToConstant:*(double *)&static SearchLayout.CellSpacingConstants.avatarRadius];

    *(void *)(v4 + 40) = v12;
    id v13 = [v5 centerYAnchor];
    id v14 = [v3 contentView];
    id v15 = [v14 centerYAnchor];

    id v16 = [v13 constraintEqualToAnchor:v15];
    *(void *)(v4 + 48) = v16;
    id v17 = ContactSearchViewCell.textContainer.getter();
    id v18 = [v17 leadingAnchor];

    id v19 = [v5 trailingAnchor];
    if (one-time initialization token for gridColumnSpacing != -1) {
      swift_once();
    }
    id v20 = [v18 constraintEqualToAnchor:v19 constant:*(double *)&static SearchLayout.CellSpacingConstants.gridColumnSpacing];

    *(void *)(v4 + 56) = v20;
    specialized Array._endMutation()();
    uint64_t v2 = v4;
    *(void *)&v3[v1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ContactSearchViewCell.videoButtonVisibleConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___videoButtonVisibleConstraints;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___videoButtonVisibleConstraints))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___videoButtonVisibleConstraints);
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1002053B0;
    id v5 = ContactSearchViewCell.textContainer.getter();
    id v6 = [v5 trailingAnchor];

    id v7 = *(void **)(v3 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton);
    id v8 = [v7 leadingAnchor];
    if (one-time initialization token for accessoryButtonSpacing != -1) {
      swift_once();
    }
    id v9 = [v6 constraintLessThanOrEqualToAnchor:v8 constant:-*(double *)&static SearchLayout.CellSpacingConstants.accessoryButtonSpacing];

    *(void *)(v4 + 32) = v9;
    id v10 = [v7 trailingAnchor];
    id v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                                + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_callButton), "leadingAnchor"));
    id v12 = [v10 constraintEqualToAnchor:v11 constant:-*(double *)&static SearchLayout.CellSpacingConstants.accessoryButtonSpacing];

    *(void *)(v4 + 40) = v12;
    specialized Array._endMutation()();
    uint64_t v2 = v4;
    *(void *)(v3 + v1) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id ContactSearchViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  id v8 = v4;
  Logger.init(subsystem:category:)();
  uint64_t v9 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contactSummarizer;
  *(void *)&v8[v9] = [objc_allocWithZone((Class)CNContactMatchSummarizer) init];
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarViewControllerSettings;
  id v11 = [self sharedInstance];
  id v12 = [v11 contactStore];

  id v13 = [self settingsWithContactStore:v12 threeDTouchEnabled:0];
  *(void *)&v8[v10] = v13;
  uint64_t v14 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel;
  *(void *)&v8[v14] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v15 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel;
  *(void *)&v8[v15] = [objc_allocWithZone((Class)UILabel) init];
  id v16 = &v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType];
  *(void *)id v16 = 0;
  v16[8] = 1;
  id v17 = &v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchText];
  *(void *)id v17 = 0;
  *((void *)v17 + 1) = 0;
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___textContainer] = 0;
  uint64_t v18 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_callButton;
  *(void *)&v8[v18] = [objc_allocWithZone((Class)TPAccessoryButton) init];
  uint64_t v19 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton;
  *(void *)&v8[v19] = [objc_allocWithZone((Class)TPAccessoryButton) init];
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___commonConstraints] = 0;
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___axConstraints] = 0;
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___nonAXConstraints] = 0;
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___videoButtonVisibleConstraints] = 0;
  uint64_t v20 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact;
  *(void *)&v8[v20] = [objc_allocWithZone((Class)CNContact) init];
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber] = 0;
  id v21 = &v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoCapableHandle];
  *(void *)id v21 = 0;
  *((void *)v21 + 1) = 0;
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_idsStatusSubscription] = 0;
  id v22 = [objc_allocWithZone((Class)CNAvatarViewController) initWithSettings:v13];
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarViewController] = v22;
  id v23 = [v22 view];
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarView] = v23;

  if (a3)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v24 = 0;
  }
  v32.receiver = v8;
  v32.super_class = ObjectType;
  id v25 = [super initWithStyle:a1 reuseIdentifier:v24];

  id v26 = v25;
  ContactSearchViewCell.setupViews()();
  id v27 = self;
  ContactSearchViewCell.commonConstraints.getter();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v27 activateConstraints:isa];

  [v26 setPreservesSuperviewLayoutMargins:1];
  id v29 = [v26 contentView];
  [v29 setPreservesSuperviewLayoutMargins:1];

  id v30 = [self defaultCenter];
  [v30 addObserver:v26 selector:"handleContentSizeCategoryDidChange:" name:UIContentSizeCategoryDidChangeNotification object:0];

  return v26;
}

Swift::Void __swiftcall ContactSearchViewCell.setupViews()()
{
  id v1 = [v0 contentView];
  [v1 setClipsToBounds:1];

  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarView];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v3 = [v0 contentView];
  [v3 addSubview:v2];

  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel];
  id v5 = self;
  id v6 = [v5 telephonyUIBodyShortEmphasizedFont];
  [v4 setFont:v6];

  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setLineBreakMode:4];
  id v7 = [v0 contentView];
  [v7 addSubview:v4];

  id v8 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel];
  id v9 = [v5 telephonyUISubheadlineShortFont];
  [v8 setFont:v9];

  [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v10 = [v0 contentView];
  [v10 addSubview:v8];

  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = self;
  id v13 = [v12 systemImageNamed:v11];

  uint64_t v14 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_callButton];
  [v14 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v14 configureForImage:v13];
  [v14 addTarget:v0 action:"callButtonTapped" forControlEvents:64];
  LODWORD(v15) = 1148846080;
  [v14 setContentCompressionResistancePriority:0 forAxis:v15];
  id v16 = [v0 contentView];
  [v16 addSubview:v14];

  NSString v17 = String._bridgeToObjectiveC()();
  id v23 = [v12 systemImageNamed:v17];

  uint64_t v18 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton];
  [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v18 configureForImage:v23];
  [v18 addTarget:v0 action:"videoButtonTapped" forControlEvents:64];
  LODWORD(v19) = 1148846080;
  [v18 setContentCompressionResistancePriority:0 forAxis:v19];
  [v18 setHidden:1];
  id v20 = [v0 contentView];
  [v20 addSubview:v18];

  id v21 = [v0 traitCollection];
  id v22 = [v21 preferredContentSizeCategory];

  LOBYTE(v21) = UIContentSizeCategory.isAccessibilityCategory.getter();
  [v2 setHidden:v21 & 1];
  ContactSearchViewCell.updateConstraintsForAccessibility()();
}

Swift::Void __swiftcall ContactSearchViewCell.loadConstraints()()
{
  uint64_t v0 = self;
  ContactSearchViewCell.commonConstraints.getter();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v0 activateConstraints:isa];
}

Swift::Void __swiftcall ContactSearchViewCell.prepareForReuse()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  [super prepareForReuse];
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_idsStatusSubscription] = 0;
  swift_release();
}

void ContactSearchViewCell.updateConstraintsForAccessibility()()
{
  id v1 = [v0 traitCollection];
  id v2 = [v1 preferredContentSizeCategory];

  char v3 = UIContentSizeCategory.isAccessibilityCategory.getter();
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel];
  if (v3)
  {
    [*(id *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel] setNumberOfLines:0];
    id v5 = self;
    ContactSearchViewCell.axConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 activateConstraints:isa];

    ContactSearchViewCell.nonAXConstraints.getter();
  }
  else
  {
    id v7 = [v0 traitCollection];
    unsigned int v8 = [v7 preferredContentSizeCategoryAllowsMultilineTitleForDoubleLineCells];

    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 2;
    }
    [v4 setNumberOfLines:v9];
    id v5 = self;
    ContactSearchViewCell.nonAXConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 activateConstraints:v10];

    ContactSearchViewCell.axConstraints.getter();
  }
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 deactivateConstraints:v11];
}

uint64_t ContactSearchViewCell.subtitleText(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x68))();
  id v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x80))();
  id v6 = [v5 matchedProperties];
  if (v6)
  {
    id v7 = v6;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    uint64_t v11 = swift_bridgeObjectRetain();
    id v12 = (void *)specialized Sequence.compactMap<A>(_:)(v11);
    swift_bridgeObjectRelease();
    LOBYTE(v8) = specialized Sequence<>.contains(_:)(v8, v10, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
    {
      swift_bridgeObjectRelease();
      id v13 = [v4 nickname];
LABEL_6:
      id v19 = v13;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v20;
    }
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = (void *)specialized Sequence.compactMap<A>(_:)(v17);
    swift_bridgeObjectRelease();
    LOBYTE(v14) = specialized Sequence<>.contains(_:)(v14, v16, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
      id v13 = [v4 organizationName];
      goto LABEL_6;
    }
  }
  id v21 = [*(id *)(v2 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contactSummarizer) summaryForContact:v4 matchInfo:v5];
  if (v21)
  {
    id v22 = v21;
    id v23 = [v21 string];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v25 = 0xE000000000000000;
  }
  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v26 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v26)
  {
    id v28 = [v5 matchedProperties];
    if (v28)
    {
      id v29 = v28;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;
      uint64_t v33 = swift_bridgeObjectRetain();
      id v34 = (void *)specialized Sequence.compactMap<A>(_:)(v33);
      swift_bridgeObjectRelease();
      LOBYTE(v30) = specialized Sequence<>.contains(_:)(v30, v32, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v30)
      {
        id v35 = *(void **)(v2 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber);
        if (v35)
        {
          id v36 = v35;
          swift_bridgeObjectRelease();
          id v37 = [v36 value];
          id v38 = [v37 formattedStringValue];

          if (v38)
          {
            uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();

            return v20;
          }
          id v39 = [v36 value];
          id v40 = [v39 stringValue];

          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
      }
    }
  }

  return v20;
}

Swift::Bool __swiftcall ContactSearchViewCell.configureVideoButton()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton);
  [v1 setHidden:1];
  uint64_t v2 = self;
  ContactSearchViewCell.videoButtonVisibleConstraints.getter();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 deactivateConstraints:isa];

  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber);
  if (v4)
  {
    id v5 = v4;
    id v6 = [v5 value];
    NSString v7 = [v6 stringValue];

    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v8 = [v7 IDSFormattedDestinationID];

    if (v8)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;
      id v12 = [self sharedManager];
      unsigned int v13 = [v12 faceTimeVideoAvailabilityForDestination:v8];

      if (v13 == 1)
      {
        [v1 setHidden:0];
        ContactSearchViewCell.videoButtonVisibleConstraints.getter();
        Class v14 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v2 activateConstraints:v14];

        uint64_t v15 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoCapableHandle);
        *uint64_t v15 = v9;
        v15[1] = v11;
LABEL_29:
        swift_bridgeObjectRelease();
        char v34 = 1;
        return v34 & 1;
      }
      swift_bridgeObjectRelease();
    }

    char v34 = 0;
    return v34 & 1;
  }
  id v16 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact), "handles"));
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void *)(v17 + 16);
  if (!v19) {
    goto LABEL_29;
  }
  id v37 = v1;
  id v38 = v2;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v39 = v0;
  uint64_t v22 = -v19;
  uint64_t v23 = v17 + 40;
LABEL_9:
  char v40 = v20;
  unint64_t v24 = (unint64_t *)(v23 + 16 * v21++);
  while ((unint64_t)(v21 - 1) < *(void *)(v17 + 16))
  {
    uint64_t v25 = *(v24 - 1);
    unint64_t v26 = *v24;
    swift_bridgeObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v27 IDSFormattedDestinationID];

    if (!v28
      || (id v29 = [self sharedManager],
          unsigned int v30 = [v29 faceTimeVideoAvailabilityForDestination:v28],
          v29,
          v28,
          v30 == 2))
    {
      Swift::Bool result = swift_bridgeObjectRelease();
    }
    else
    {
      if (v30 == 1)
      {
        swift_bridgeObjectRelease();
        [v37 setHidden:0];
        ContactSearchViewCell.videoButtonVisibleConstraints.getter();
        Class v35 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v38 activateConstraints:v35];

        id v36 = (uint64_t *)(v39 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoCapableHandle);
        *id v36 = v25;
        v36[1] = v26;
        goto LABEL_29;
      }
      if (!v30)
      {
        Swift::Bool result = swift_bridgeObjectRelease();
        char v20 = 1;
        if (v22 + v21) {
          goto LABEL_9;
        }
        goto LABEL_26;
      }
      swift_bridgeObjectRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v41);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unknown status type received for destination: %s", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v23 = v17 + 40;
    }
    ++v21;
    v24 += 2;
    if (v22 + v21 == 1)
    {
      char v20 = v40;
LABEL_26:
      swift_bridgeObjectRelease();
      char v34 = v20 ^ 1;
      return v34 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001828CC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in ContactSearchViewCell.configure(contactSearchResult:searchText:idsStatusUpdatedPublisher:searchType:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    Swift::Bool v2 = ContactSearchViewCell.configureVideoButton()();

    if (v2)
    {
      swift_beginAccess();
      char v3 = (char *)swift_unknownObjectWeakLoadStrong();
      if (v3)
      {
        *(void *)&v3[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_idsStatusSubscription] = 0;

        swift_release();
      }
    }
  }
}

void partial apply for closure #1 in ContactSearchViewCell.configure(contactSearchResult:searchText:idsStatusUpdatedPublisher:searchType:)()
{
}

uint64_t sub_1001829AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sIeg_ytIegn_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<(), Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>);
  }
  return result;
}

Swift::Void __swiftcall ContactSearchViewCell.updateVideoButtonVisibility(isHidden:)(Swift::Bool isHidden)
{
  char v3 = *(void **)(v1 + OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton);
  if (isHidden)
  {
    [v3 setHidden:1];
    uint64_t v4 = self;
    ContactSearchViewCell.videoButtonVisibleConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 deactivateConstraints:isa];
  }
  else
  {
    [v3 setHidden:0];
    id v5 = self;
    ContactSearchViewCell.videoButtonVisibleConstraints.getter();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 activateConstraints:isa];
  }
}

Swift::Void __swiftcall ContactSearchViewCell.callButtonTapped()()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = ContactSearchViewCell.dialRequest(callType:)(0);
  if (v8)
  {
    uint64_t v9 = v8;
    if ((v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType + 8] & 1) != 0
      || (unint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType], v10 > 3))
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = dword_1002068C0[v10];
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v12 = (void *)static SearchMetrics.shared;
    if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchText + 8])
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = String.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = -1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v12) + 0xE0))(2, v11, v13);
    id v20 = [self sharedApplication];
    id v21 = [v9 URL];
    if (v21)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v4, v1);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
      {
        id v21 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v22);
        id v21 = v23;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
    }
    aBlock[4] = PHVoicemailInboxListViewController.refreshTableHeaderView();
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_13;
    unint64_t v24 = _Block_copy(aBlock);
    [v20 openURL:v21 withCompletionHandler:v24];
    _Block_release(v24);
  }
  else
  {
    Class v14 = v0;
    NSString v27 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)id v16 = 138412290;
      uint64_t v18 = *(void **)&v14[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact];
      aBlock[0] = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v18;

      _os_log_impl((void *)&_mh_execute_header, v27, v15, "ContactSearchViewCell: Cannot able to create dial request for contact %@ ", v16, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v25 = v27;
    }
  }
}

id ContactSearchViewCell.dialRequest(callType:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(void *)&v2[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoCapableHandle + 8])
    {
      id v8 = self;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
    return 0;
  }
  uint64_t v9 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber];
  if (v9)
  {
    id v10 = [v9 value];
    id v11 = [v10 stringValue];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v12 = [*(id *)&v2[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact] phoneNumberStrings];
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v13 + 16))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  id v8 = self;
LABEL_9:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v15 = [v8 normalizedHandleWithDestinationID:v14];

  if (!v15)
  {
    id v36 = v2;
    id v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      char v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 138412290;
      uint64_t v41 = *(void **)&v36[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact];
      id v59 = v41;
      id v42 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v40 = v41;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "ContactSearchViewCell: Cannot able to create handle for contact %@ ", v39, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  uint64_t v56 = v5;
  char v16 = a1;
  type metadata accessor for ApplicationServices();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v18 = v15;
  id v19 = [ObjCClassFromMetadata sharedInstance];
  id v20 = [v19 callProviderManager];

  id v21 = &selRef_telephonyProvider;
  if (v16) {
    id v21 = &selRef_faceTimeProvider;
  }
  uint64_t v22 = *v21;
  id v57 = v20;
  id v23 = [v20 v22];
  id v24 = objc_allocWithZone((Class)TUDialRequest);
  id v58 = v23;
  id v25 = [v24 initWithProvider:v23];
  [v25 setHandle:v18];
  uint64_t v26 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact;
  NSString v27 = [*(id *)&v2[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact] identifier];
  if (!v27)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v25 setContactIdentifier:v27];

  [v25 setVideo:v16 & 1];
  [v25 setOriginatingUIType:49];
  id v28 = [self sharedInstance];
  id v29 = [v28 contactGeminiManager];

  uint64_t v30 = *(void *)&v2[v26];
  id v59 = 0;
  id v31 = [v29 bestSenderIdentityForContact:v30 error:&v59];
  if (v31)
  {
    os_log_type_t v32 = v31;
    id v33 = v59;
    id v34 = [v32 accountUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v4);
    [v25 setLocalSenderIdentityAccountUUID:isa];
  }
  else
  {
    id v43 = v59;
    uint64_t v44 = _convertNSErrorToError(_:)();

    swift_willThrow();
    id v45 = v2;
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      os_log_t v55 = v46;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v56 = v44;
      uint64_t v49 = (uint8_t *)v48;
      uint64_t v54 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138412290;
      id v50 = *(void **)&v2[v26];
      id v59 = v50;
      id v51 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v54 = v50;

      os_log_t v52 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, v47, "ContactSearchViewCell: Failed to get sender identity for contact %@", v49, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
    }
  }
  return v25;
}

Swift::Void __swiftcall ContactSearchViewCell.videoButtonTapped()()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = ContactSearchViewCell.dialRequest(callType:)(1);
  if (v8)
  {
    uint64_t v9 = v8;
    if ((v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType + 8] & 1) != 0
      || (unint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType], v10 > 3))
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = dword_1002068C0[v10];
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v12 = (void *)static SearchMetrics.shared;
    if (*(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchText + 8])
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = String.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = -1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v12) + 0xE0))(2, v11, v13);
    id v20 = [self sharedApplication];
    id v21 = [v9 URL];
    if (v21)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v4, v1);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
      {
        id v21 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v22);
        id v21 = v23;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
    }
    aBlock[4] = PHVoicemailInboxListViewController.refreshTableHeaderView();
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_6_0;
    id v24 = _Block_copy(aBlock);
    [v20 openURL:v21 withCompletionHandler:v24];
    _Block_release(v24);
  }
  else
  {
    NSString v14 = v0;
    NSString v27 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)char v16 = 138412290;
      id v18 = *(void **)&v14[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact];
      aBlock[0] = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v18;

      _os_log_impl((void *)&_mh_execute_header, v27, v15, "ContactSearchViewCell: Cannot able to create dial request for contact %@ ", v16, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v25 = v27;
    }
  }
}

void specialized ContactSearchViewCell.init(coder:)()
{
  Logger.init(subsystem:category:)();
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contactSummarizer;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)CNContactMatchSummarizer) init];
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_avatarViewControllerSettings;
  id v3 = [self sharedInstance];
  id v4 = [v3 contactStore];

  id v5 = [self settingsWithContactStore:v4 threeDTouchEnabled:0];
  *(void *)&v0[v2] = v5;
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_titleLabel;
  *(void *)&v0[v6] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v7 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_detailLabel;
  *(void *)&v0[v7] = [objc_allocWithZone((Class)UILabel) init];
  id v8 = &v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchType];
  *(void *)id v8 = 0;
  v8[8] = 1;
  uint64_t v9 = &v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_searchText];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___textContainer] = 0;
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_callButton;
  *(void *)&v0[v10] = [objc_allocWithZone((Class)TPAccessoryButton) init];
  uint64_t v11 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoButton;
  *(void *)&v0[v11] = [objc_allocWithZone((Class)TPAccessoryButton) init];
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___commonConstraints] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___axConstraints] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___nonAXConstraints] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell____lazy_storage___videoButtonVisibleConstraints] = 0;
  uint64_t v12 = OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_contact;
  *(void *)&v0[v12] = [objc_allocWithZone((Class)CNContact) init];
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_matchedPhoneNumber] = 0;
  uint64_t v13 = &v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_videoCapableHandle];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone21ContactSearchViewCell_idsStatusSubscription] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type ContactSearchViewCell.callType and conformance ContactSearchViewCell.callType()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactSearchViewCell.callType and conformance ContactSearchViewCell.callType;
  if (!lazy protocol witness table cache variable for type ContactSearchViewCell.callType and conformance ContactSearchViewCell.callType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactSearchViewCell.callType and conformance ContactSearchViewCell.callType);
  }
  return result;
}

uint64_t ObjC metadata update function for ContactSearchViewCell()
{
  return type metadata accessor for ContactSearchViewCell();
}

uint64_t type metadata accessor for ContactSearchViewCell()
{
  uint64_t result = type metadata singleton initialization cache for ContactSearchViewCell;
  if (!type metadata singleton initialization cache for ContactSearchViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactSearchViewCell()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContactSearchViewCell.callType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100184518);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactSearchViewCell.callType()
{
  return &type metadata for ContactSearchViewCell.callType;
}

char *RecentCallsViewController.__allocating_init(recentsController:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return RecentCallsViewController.init(recentsController:)(a1);
}

char *RecentCallsViewController.init(recentsController:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observers] = _swiftEmptyArrayStorage;
  id v4 = objc_allocWithZone((Class)type metadata accessor for ObservableRecentsController(0));
  uint64_t v5 = v1;
  id v6 = a1;
  *(void *)&v5[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observableRecentsController] = ObservableRecentsController.init(recentsController:)(v6);

  v18.receiver = v5;
  v18.super_class = ObjectType;
  [super initWithNibName:0 bundle:0];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v8 = (char *)v7;
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  [v6 addDelegate:v8 queue:v9];

  RecentCallsViewController.configureTabBarItem()();
  id v10 = [self defaultCenter];
  id v11 = [self mainQueue];
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17[4] = partial apply for closure #1 in RecentCallsViewController.init(recentsController:);
  v17[5] = v12;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v17[3] = &block_descriptor_14;
  uint64_t v13 = _Block_copy(v17);
  swift_release();
  id v14 = [v10 addObserverForName:UIApplicationDidEnterBackgroundNotification object:0 queue:v11 usingBlock:v13];
  _Block_release(v13);

  os_log_type_t v15 = &v8[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observers];
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(*(void *)v15 + 16) >= *(void *)(*(void *)v15 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();

  return v8;
}

void RecentCallsViewController.configureTabBarItem()()
{
  id v1 = [objc_allocWithZone((Class)UITabBarItem) initWithTabBarSystemItem:4 tag:0];
  [v0 setTabBarItem:v1];

  id v2 = [v0 tabBarItem];
  if (v2)
  {
    id v3 = v2;
    id v4 = [objc_allocWithZone((Class)UITabBarAppearance) init];
    [v3 setStandardAppearance:v4];

    id v5 = [*(id *)(*(void *)&v0[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observableRecentsController]+ OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) unreadCallCount];
    RecentCallsViewController.updateTabBarItemBadge(count:)((uint64_t)v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10018491C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in RecentCallsViewController.init(recentsController:)()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = Strong;
    id v2 = [Strong tabBarController];
    id v3 = [v2 selectedViewController];

    if (v3)
    {
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      id v4 = v1;
      id v5 = v3;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        [*(id *)(*(void *)&v4[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observableRecentsController]+ OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) markRecentCallsAsRead];
      }
    }
  }
}

void partial apply for closure #1 in RecentCallsViewController.init(recentsController:)()
{
}

void RecentCallsViewController.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observers] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void RecentCallsViewController.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observers] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id RecentCallsViewController.__deallocating_deinit()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v13 = v0;
  id v1 = &v0[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observers];
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)(v2 + 8 * i + 32))
      {
        swift_unknownObjectRetain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_12;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    *(void *)id v1 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v14.receiver = v13;
    v14.super_class = ObjectType;
    return [super dealloc];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_19;
  }
LABEL_12:
  id result = self;
  if (v6 >= 1)
  {
    id v8 = result;
    uint64_t v9 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }
      ++v9;
      id v11 = [v8 defaultCenter];
      [v11 removeObserver:v10];
      swift_unknownObjectRelease();
    }
    while (v6 != v9);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall RecentCallsViewController.recentsController(_:didChangeUnreadCallCount:)(PHRecentsController *_, Swift::UInt didChangeUnreadCallCount)
{
}

void RecentCallsViewController.updateTabBarItemBadge(count:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    uint64_t v13 = a1;
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002053C0;
  if (v5)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v5;
    swift_bridgeObjectRetain();
    uint64_t v7 = String.init<A>(reflecting:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v10 = [v2 tabBarItem];
  if (v10)
  {
    id v11 = v10;
    if (v5)
    {
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v12 = 0;
    }
    [v11 setBadgeValue:v12, v13, v14];
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall RecentCallsViewController.viewDidLoad()()
{
  id v1 = v0;
  v24.receiver = v0;
  v24.super_class = (Class)swift_getObjectType();
  [super viewDidLoad];
  type metadata accessor for ObservableRecentsController(0);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
  uint64_t v2 = (void *)EnvironmentObject.init()();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observableRecentsController];
  static ObservableObject.environmentStore.getter();
  id v4 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIHostingController<ModifiedContent<RecentCallsListContainerView, _EnvironmentKeyWritingModifier<ObservableRecentsController?>>>));
  swift_retain();
  swift_retain();
  id v5 = v3;
  id v23 = v2;
  swift_retain();
  uint64_t v6 = (void *)UIHostingController.init(rootView:)();
  [v1 addChildViewController:v6];
  id v7 = [v6 view];
  if (!v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v8 = v7;
  id v9 = [v1 view];
  if (!v9)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v10 = v9;
  [v9 bounds];
  double v12 = v11;

  id v13 = [v1 view];
  if (!v13)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  [v13 bounds];
  double v16 = v15;

  [v8 setFrame:0.0, 0.0, v12, v16];
  id v17 = [v6 view];
  if (!v17)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_super v18 = v17;
  [v17 setAutoresizingMask:18];

  id v19 = [v1 view];
  if (!v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v20 = v19;
  id v21 = [v6 view];
  if (v21)
  {
    uint64_t v22 = v21;
    [v20 addSubview:v21];

    [v6 didMoveToParentViewController:v1];
    swift_release();
    swift_release();
    swift_release();

    return;
  }
LABEL_13:
  __break(1u);
}

Swift::Void __swiftcall RecentCallsViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  [super viewWillDisappear:a1];
  [*(id *)(*(void *)&v1[OBJC_IVAR____TtC11MobilePhone25RecentCallsViewController_observableRecentsController]+ OBJC_IVAR____TtC11MobilePhone27ObservableRecentsController_recentsController) markRecentCallsAsRead];
}

void RecentCallsViewController.init(nibName:bundle:)()
{
}

const char *RecentCallsViewController.defaultPNGName.unsafeMutableAddressor()
{
  return "Default";
}

uint64_t static RecentCallsViewController.defaultPNGName.getter()
{
  return 0x746C7561666544;
}

uint64_t type metadata accessor for RecentCallsViewController()
{
  return self;
}

char *SuggestionsSearchController.searchManager.getter()
{
  uint64_t v1 = OBJC_IVAR___MPSuggestionsSearchController____lazy_storage___searchManager;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPSuggestionsSearchController____lazy_storage___searchManager);
  if (v2)
  {
    objc_super v3 = *(char **)(v0 + OBJC_IVAR___MPSuggestionsSearchController____lazy_storage___searchManager);
  }
  else
  {
    uint64_t v4 = v0;
    id v5 = objc_allocWithZone((Class)type metadata accessor for SearchManager());
    uint64_t v6 = SearchManager.init(itemType:)(2);
    id v7 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v6;
    objc_super v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t SuggestionsSearchController.suggestionsDelegate.getter()
{
  return CallsSearchController.delegate.getter();
}

uint64_t SuggestionsSearchController.suggestionsDelegate.setter()
{
  return SuggestionsSearchController.suggestionsDelegate.setter();
}

{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*SuggestionsSearchController.suggestionsDelegate.modify(void *a1))()
{
  objc_super v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSuggestionsSearchController_suggestionsDelegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchController.suggestionsDelegate.modify;
}

uint64_t SuggestionsSearchController.sectionIndex.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPSuggestionsSearchController_sectionIndex;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t SuggestionsSearchController.sectionIndex.setter(uint64_t a1)
{
  objc_super v3 = (void *)(v1 + OBJC_IVAR___MPSuggestionsSearchController_sectionIndex);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

uint64_t (*SuggestionsSearchController.sectionIndex.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t SuggestionsSearchController.sectionTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MPSuggestionsSearchController_sectionTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SuggestionsSearchController.sectionType.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___MPSuggestionsSearchController_sectionType);
  swift_beginAccess();
  return *v1;
}

uint64_t SuggestionsSearchController.sectionType.setter(int a1)
{
  objc_super v3 = (_DWORD *)(v1 + OBJC_IVAR___MPSuggestionsSearchController_sectionType);
  uint64_t result = swift_beginAccess();
  _DWORD *v3 = a1;
  return result;
}

uint64_t (*SuggestionsSearchController.sectionType.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t SuggestionsSearchController.delegate.getter()
{
  return CallsSearchController.delegate.getter();
}

uint64_t SuggestionsSearchController.delegate.setter()
{
  return SuggestionsSearchController.suggestionsDelegate.setter();
}

uint64_t (*SuggestionsSearchController.delegate.modify(void *a1))()
{
  objc_super v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSuggestionsSearchController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchController.suggestionsDelegate.modify;
}

uint64_t SuggestionsSearchController.hostingNavigationController.getter()
{
  return CallsSearchController.delegate.getter();
}

void SuggestionsSearchController.hostingNavigationController.setter(void *a1)
{
}

void (*SuggestionsSearchController.hostingNavigationController.modify(void *a1))(id **a1, char a2)
{
  objc_super v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSuggestionsSearchController_hostingNavigationController;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return VoicemailSearchMetadataView.delegate.modify;
}

uint64_t SuggestionsSearchController.results.getter()
{
  return CallsSearchController.resultIDs.getter();
}

void SuggestionsSearchController.results.setter(uint64_t a1)
{
  objc_super v3 = (void *)(v1 + OBJC_IVAR___MPSuggestionsSearchController_results);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  SuggestionsSearchController.results.didset();
}

void key path setter for SuggestionsSearchController.results : SuggestionsSearchController(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  objc_super v3 = (void *)(*a2 + OBJC_IVAR___MPSuggestionsSearchController_results);
  swift_beginAccess();
  void *v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  SuggestionsSearchController.results.didset();
}

void SuggestionsSearchController.results.didset()
{
  swift_beginAccess();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized _arrayConditionalCast<A, B>(_:)(v1);
  swift_bridgeObjectRelease();
  if (v2)
  {
    objc_super v3 = (void *)(*(void *)(v0 + OBJC_IVAR___MPSuggestionsSearchController_suggestionsTableViewController)
                  + OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions);
    swift_beginAccess();
    void *v3 = v2;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = (void *)(*(void *)(v0 + OBJC_IVAR___MPSuggestionsSearchController_suggestionsTableViewController)
                  + OBJC_IVAR___MPSuggestionsSearchTableViewController_suggestions);
    swift_beginAccess();
    *uint64_t v4 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SuggestionsSearchController: Failed to fetch Search Suggestions", v7, 2u);
      swift_slowDealloc();
    }
  }
}

void (*SuggestionsSearchController.results.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SuggestionsSearchController.results.modify;
}

void SuggestionsSearchController.results.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    SuggestionsSearchController.results.didset();
  }
}

uint64_t SuggestionsSearchController.resultIDs.getter()
{
  return CallsSearchController.resultIDs.getter();
}

uint64_t SuggestionsSearchController.resultIDs.setter(uint64_t a1)
{
  objc_super v3 = (void *)(v1 + OBJC_IVAR___MPSuggestionsSearchController_resultIDs);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SuggestionsSearchController.resultIDs.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

id SuggestionsSearchController.__allocating_init(tableViewController:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v5 = objc_allocWithZone(v1);
  id v6 = specialized SuggestionsSearchController.init(tableViewController:featureFlags:)(a1, v4);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

id SuggestionsSearchController.init(tableViewController:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v3 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v4 = objc_allocWithZone(ObjectType);
  id v5 = specialized SuggestionsSearchController.init(tableViewController:featureFlags:)(a1, v3);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id SuggestionsSearchController.__allocating_init(tableViewController:featureFlags:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = specialized SuggestionsSearchController.init(tableViewController:featureFlags:)(a1, a2);

  return v6;
}

id SuggestionsSearchController.init(tableViewController:featureFlags:)(void *a1, void *a2)
{
  id v4 = specialized SuggestionsSearchController.init(tableViewController:featureFlags:)(a1, a2);

  return v4;
}

uint64_t SuggestionsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[44] = a3;
  v4[45] = v3;
  v4[42] = a1;
  v4[43] = a2;
  type metadata accessor for MainActor();
  v4[46] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[47] = v6;
  v4[48] = v5;
  return _swift_task_switch(SuggestionsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t SuggestionsSearchController.search(with:searchTokens:)()
{
  if (![*(id *)(v0[45] + OBJC_IVAR___MPSuggestionsSearchController_featureFlags) callHistorySearchEnabled]|| !v0[43])
  {
    swift_release();
    goto LABEL_9;
  }
  unint64_t v1 = v0[44];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_5;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_5:
    uint64_t v2 = v0[45];
    swift_release();
    uint64_t v3 = (void *)(v2 + OBJC_IVAR___MPSuggestionsSearchController_results);
    swift_beginAccess();
    void *v3 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    SuggestionsSearchController.results.didset();
    id v4 = (void *)(v2 + OBJC_IVAR___MPSuggestionsSearchController_resultIDs);
    swift_beginAccess();
    *id v4 = _swiftEmptyArrayStorage;
    goto LABEL_6;
  }
  uint64_t v9 = v0[45];
  id v10 = (void *)(v9 + OBJC_IVAR___MPSuggestionsSearchController_searchText);
  uint64_t v11 = *(void *)(v9 + OBJC_IVAR___MPSuggestionsSearchController_searchText + 8);
  uint64_t v12 = v0[43];
  if (v11)
  {
    BOOL v13 = *v10 == v0[42] && v11 == v12;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_release();
      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
LABEL_20:
        [Strong didCompleteSearchFor:v0[45]];
        swift_unknownObjectRelease();
      }
LABEL_9:
      uint64_t v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
    uint64_t v9 = v0[45];
    uint64_t v14 = v0[43];
  }
  else
  {
    uint64_t v14 = v0[43];
  }
  v0[49] = v12;
  uint64_t v15 = v0[42];
  *id v10 = v15;
  v10[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v16 = (void *)(*(void *)(v9 + OBJC_IVAR___MPSuggestionsSearchController_suggestionsTableViewController)
                 + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText);
  swift_beginAccess();
  *double v16 = v15;
  v16[1] = v14;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  if (String.count.getter() < 1)
  {
    uint64_t v20 = v0[45];
    swift_release();
    swift_bridgeObjectRelease();
    id v21 = (void *)(v20 + OBJC_IVAR___MPSuggestionsSearchController_results);
    swift_beginAccess();
    *id v21 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    SuggestionsSearchController.results.didset();
    uint64_t v22 = (void *)(v20 + OBJC_IVAR___MPSuggestionsSearchController_resultIDs);
    swift_beginAccess();
    void *v22 = _swiftEmptyArrayStorage;
LABEL_6:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  id v17 = SuggestionsSearchController.searchManager.getter();
  v0[50] = v17;
  id v23 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)((swift_isaMask & *(void *)v17) + 0x178)
                                                 + **(int **)((swift_isaMask & *(void *)v17) + 0x178));
  objc_super v18 = (void *)swift_task_alloc();
  v0[51] = v18;
  *objc_super v18 = v0;
  v18[1] = SuggestionsSearchController.search(with:searchTokens:);
  uint64_t v19 = v0[42];
  return v23(v19, v12);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  os_log_type_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  void *Strong;
  uint64_t (*v44)(void);
  void *v46;
  uint64_t v47[2];
  void *v48;
  uint64_t v49;

  uint64_t v48 = v0;
  swift_release();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  uint64_t v46 = v0;
  if (!os_log_type_enabled(v1, v2))
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  uint64_t v3 = v0[52];
  id v4 = v0[49];
  uint64_t v5 = v0[42];
  uint64_t v6 = swift_slowAlloc();
  v47[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136315394;
  swift_bridgeObjectRetain();
  v0[39] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v6 + 12) = 2048;
  if (v3 >> 62) {
    goto LABEL_35;
  }
  id v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v0[40] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SuggestionsSearchController: Completed search for %s. Got %ld raw results", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_6:
    uint64_t v8 = v0[52];
    uint64_t v9 = (id)v0[45];
    uint64_t v6 = (unint64_t)specialized _ArrayProtocol.filter(_:)(v8, (uint64_t)v9);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v1 = Logger.logObject.getter();
    id v10 = static os_log_type_t.default.getter();
    uint64_t v11 = os_log_type_enabled(v1, v10);
    uint64_t v12 = v0[49];
    if (v11)
    {
      BOOL v13 = v0[42];
      uint64_t v14 = swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_bridgeObjectRetain();
      v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2048;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v0 = v46;
      v46[38] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v10, "SuggestionsSearchController: Completed search for %s. Got %ld filtered results", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
    }
    double v16 = specialized Array<A>.uniqued()(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    id v17 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.default.getter();
    objc_super v18 = os_log_type_enabled(v17, v2);
    uint64_t v19 = v0[49];
    uint64_t v20 = v16 >> 62;
    if (v18)
    {
      id v21 = v0 + 36;
      uint64_t v22 = v46[42];
      uint64_t v6 = swift_slowAlloc();
      unint64_t v1 = swift_slowAlloc();
      v47[0] = (uint64_t)v1;
      *(_DWORD *)uint64_t v6 = 136315394;
      swift_bridgeObjectRetain();
      id v23 = v22;
      uint64_t v20 = v16 >> 62;
      uint64_t v0 = v46;
      v46[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v19, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v6 + 12) = 2048;
      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v24 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      *id v21 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v2, "SuggestionsSearchController: Completed search for %s. Got %ld unique filtered", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
    }
    if (v20)
    {
      swift_bridgeObjectRetain();
      id v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v25 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v26 = _swiftEmptyArrayStorage;
    if (!v25) {
      break;
    }
    v47[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25 & ~(v25 >> 63), 0);
    if ((v25 & 0x8000000000000000) == 0)
    {
      NSString v27 = 0;
      uint64_t v26 = (void *)v47[0];
      id v28 = v16;
      id v29 = v16 & 0xC000000000000001;
      do
      {
        if (v29) {
          uint64_t v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v30 = *(id *)(v28 + 8 * v27 + 32);
        }
        id v31 = v30;
        os_log_type_t v32 = [v30 uniqueIdentifier];
        id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Class v35 = v34;

        v47[0] = (uint64_t)v26;
        id v37 = v26[2];
        id v36 = v26[3];
        if (v37 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          uint64_t v26 = (void *)v47[0];
        }
        ++v27;
        v26[2] = v37 + 1;
        os_log_type_t v38 = &v26[2 * v37];
        v38[4] = v33;
        v38[5] = v35;
      }
      while (v25 != v27);
      uint64_t v0 = v46;
      double v16 = v28;
      break;
    }
    __break(1u);
LABEL_35:
    uint64_t v0 = v46;
    swift_bridgeObjectRetain();
    id v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = v0[45];
  char v40 = (void *)(v39 + OBJC_IVAR___MPSuggestionsSearchController_resultIDs);
  swift_beginAccess();
  *char v40 = v26;
  swift_bridgeObjectRelease();
  uint64_t v41 = specialized _arrayForceCast<A, B>(_:)(v16);
  swift_bridgeObjectRelease();
  id v42 = (uint64_t *)(v39 + OBJC_IVAR___MPSuggestionsSearchController_results);
  swift_beginAccess();
  NSObject *v42 = v41;
  swift_bridgeObjectRelease();
  SuggestionsSearchController.results.didset();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    [Strong didCompleteSearchFor:v0[45]];
    swift_unknownObjectRelease();
  }
  uint64_t v44 = (uint64_t (*)(void))v0[1];
  return v44();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    id v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 328) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SuggestionsSearchController: Error fetching results: %@", v3, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t SuggestionsSearchController.search(with:searchTokens:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  id v4 = (void *)*v2;
  v4[52] = a1;
  v4[53] = v1;
  swift_task_dealloc();

  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[47];
    uint64_t v6 = v4[48];
    id v7 = SuggestionsSearchController.search(with:searchTokens:);
  }
  else
  {
    uint64_t v5 = v4[47];
    uint64_t v6 = v4[48];
    id v7 = SuggestionsSearchController.search(with:searchTokens:);
  }
  return _swift_task_switch(v7, v5, v6);
}

void *SuggestionsSearchController.filteredSuggestions(suggestions:)()
{
  id v1 = v0;
  unint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _ArrayProtocol.filter(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t specialized Array<A>.uniqued()(unint64_t a1)
{
  unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v19 = &_swiftEmptySetSingleton;
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    id v17 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v17;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      uint64_t v7 = (uint64_t)v19;
      swift_bridgeObjectRetain();
      id v8 = [v6 uniqueIdentifier];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      LOBYTE(v8) = specialized Set.contains(_:)(v9, v11, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
      {
      }
      else
      {
        id v12 = v6;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v13 = [v12 uniqueIdentifier];
        Swift::Int v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v16 = v15;

        specialized Set._Variant.insert(_:)(&v18, v14, v16);
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    id v17 = (void *)v20;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t @objc closure #1 in SuggestionsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  void v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  void v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in SuggestionsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t @objc closure #1 in SuggestionsSearchController.search(with:searchTokens:)()
{
  id v1 = (const void *)v0[4];
  uint64_t v2 = v0[2];
  swift_release();
  v0[7] = _Block_copy(v1);
  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  v0[8] = v2;
  uint64_t v5 = (void *)v0[5];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v6;
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in CallsSearchController.search(with:searchTokens:);
  return SuggestionsSearchController.search(with:searchTokens:)(v3, v2, v6);
}

Swift::Void __swiftcall SuggestionsSearchController.cancelPreviousSearchRequests()()
{
  if ([*(id *)(v0 + OBJC_IVAR___MPSuggestionsSearchController_featureFlags) callHistorySearchEnabled])
  {
    id v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "SuggestionsSearchController: cancelling previous search requests", v3, 2u);
      swift_slowDealloc();
    }

    uint64_t v4 = SuggestionsSearchController.searchManager.getter();
    (*(void (**)(void))((swift_isaMask & *(void *)v4) + 0x180))();
  }
}

Swift::Void __swiftcall SuggestionsSearchController.registerCell(with:)(UITableView with)
{
  type metadata accessor for SuggestionsSearchViewCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = String._bridgeToObjectiveC()();
  [(objc_class *)with.super.super.super.super.isa registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v3];
}

void SuggestionsSearchController.tableView(_:didSelectRowAt:)(void *a1)
{
  specialized SuggestionsSearchTableViewController.tableView(_:didSelectRowAt:)();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  [a1 deselectRowAtIndexPath:isa animated:0];
}

uint64_t SuggestionsSearchController.tableView(_:cellForRowAt:)(void *a1)
{
  return SuggestionsSearchTableViewController.tableView(_:cellForRowAt:)(a1);
}

Swift::Void __swiftcall SuggestionsSearchController.highlightMatchedText(in:)(UITableViewCell in)
{
  type metadata accessor for SuggestionsSearchViewCell();
  if (swift_dynamicCastClass())
  {
    id v3 = (uint64_t *)(*(void *)(v1 + OBJC_IVAR___MPSuggestionsSearchController_suggestionsTableViewController)
                   + OBJC_IVAR___MPSuggestionsSearchTableViewController_searchText);
    swift_beginAccess();
    uint64_t v4 = (void *)v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      uint64_t v6 = in.super.super.super.isa;
      v7.value._countAndFlagsBits = v5;
      v7.value._object = v4;
      SuggestionsSearchViewCell.configure(withSearchText:)(v7);

      swift_bridgeObjectRelease();
    }
  }
}

Swift::Int __swiftcall SuggestionsSearchController.numberOfRowsInConsolidatedView()()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPSuggestionsSearchController_results;
  swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16) >= 5uLL) {
    return 5;
  }
  else {
    return *(void *)(*(void *)v1 + 16);
  }
}

UIViewController __swiftcall SuggestionsSearchController.viewForDetails()()
{
  return (UIViewController)objc_retain(*(id *)(v0
                                             + OBJC_IVAR___MPSuggestionsSearchController_suggestionsTableViewController));
}

void SuggestionsSearchController.init()()
{
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for AttributedString();
  __chkstk_darwin(v6 - 8);
  id v31 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v34 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_37;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v9 = 0;
    v28[2] = v3;
    id v29 = (void *)(a2 + OBJC_IVAR___MPSuggestionsSearchController_searchText);
    uint64_t v33 = OBJC_IVAR___MPSuggestionsSearchController_RecentsSupportedSuggestionTypes;
    unint64_t v10 = a1 & 0xC000000000000001;
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8;
    v28[1] = a1;
    id v12 = (void **)(a1 + 32);
    uint64_t v30 = a2;
    while (1)
    {
      if (v10)
      {
        id v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v9 >= *(void *)(v11 + 16)) {
          goto LABEL_35;
        }
        id v13 = v12[v9];
      }
      id v3 = v13;
      if (__OFADD__(v9++, 1)) {
        goto LABEL_36;
      }
      id v15 = [v13 currentToken];
      if (!v15) {
        goto LABEL_5;
      }
      Swift::Int v16 = v15;
      a1 = (unint64_t)[v15 tokenKind];

      uint64_t v17 = *(void *)(a2 + v33);
      uint64_t v18 = *(void *)(v17 + 16);
      if (!v18) {
        goto LABEL_4;
      }
      if (*(void *)(v17 + 32) != a1) {
        break;
      }
LABEL_15:
      if (a1) {
        goto LABEL_30;
      }
      int v32 = 1;
LABEL_17:
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      CSSuggestion.localizedAttributedSuggestion.getter();
      uint64_t v19 = NSAttributedString.init(_:)();
      id v20 = [v19 string];

      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      a1 = (unint64_t)v22;

      id v23 = (void **)v29[1];
      if (!v23)
      {
        swift_bridgeObjectRelease();
        a2 = v30;
        goto LABEL_30;
      }
      if (v21 == *v29 && v23 == (void **)a1)
      {
        swift_bridgeObjectRelease();
        a2 = v30;
        if (v32) {
          goto LABEL_30;
        }
LABEL_5:

        if (v9 == i) {
          return v34;
        }
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        a2 = v30;
        if (!(v32 & 1 | ((v26 & 1) == 0))) {
          goto LABEL_5;
        }
LABEL_30:
        a1 = (unint64_t)&v34;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v9 == i) {
          return v34;
        }
      }
    }
    if (v18 == 1)
    {
LABEL_4:
      if (a1) {
        goto LABEL_5;
      }
      int v32 = 0;
      goto LABEL_17;
    }
    uint64_t v24 = 5;
    while (1)
    {
      uint64_t v25 = v24 - 3;
      if (__OFADD__(v24 - 4, 1)) {
        break;
      }
      if (*(void *)(v17 + 8 * v24) == a1) {
        goto LABEL_15;
      }
      ++v24;
      if (v25 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    ;
  }
  return _swiftEmptyArrayStorage;
}

id specialized SuggestionsSearchController.init(tableViewController:featureFlags:)(void *a1, void *a2)
{
  id v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = v3;
  Logger.init(subsystem:category:)();
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController____lazy_storage___searchManager] = 0;
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController_RecentsSupportedSuggestionTypes] = &outlined read-only object #0 of SuggestionsSearchController.init(tableViewController:featureFlags:);
  uint64_t v8 = &v7[OBJC_IVAR___MPSuggestionsSearchController_searchText];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController_sectionIndex] = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v9 = &v7[OBJC_IVAR___MPSuggestionsSearchController_sectionTitle];
  *(void *)unint64_t v9 = 0;
  *((void *)v9 + 1) = 0xE000000000000000;
  *(_DWORD *)&v7[OBJC_IVAR___MPSuggestionsSearchController_sectionType] = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController_results] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController_resultIDs] = _swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController_featureFlags] = a2;
  *(void *)&v7[OBJC_IVAR___MPSuggestionsSearchController_suggestionsTableViewController] = a1;
  id v10 = a2;
  id v11 = a1;

  v13.receiver = v7;
  v13.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100188908@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t sub_100188914()
{
  return keypath_setTm();
}

uint64_t sub_100188920@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t sub_10018892C()
{
  return keypath_setTm();
}

uint64_t sub_100188938@<X0>(uint64_t *a1@<X8>)
{
  return keypath_getTm(a1);
}

uint64_t sub_100188944()
{
  return keypath_setTm();
}

uint64_t sub_100188950@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = (void *)(*a1 + OBJC_IVAR___MPSuggestionsSearchController_results);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t ObjC metadata update function for SuggestionsSearchController()
{
  return type metadata accessor for SuggestionsSearchController();
}

uint64_t type metadata accessor for SuggestionsSearchController()
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsSearchController;
  if (!type metadata singleton initialization cache for SuggestionsSearchController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsSearchController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100188AF4()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in SuggestionsSearchController.search(with:searchTokens:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in SuggestionsSearchController.search(with:searchTokens:)
                                                                  + async function pointer to @objc closure #1 in SuggestionsSearchController.search(with:searchTokens:));
  return v7(v2, v3, v5, v4);
}

unint64_t static ReportTableViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000013;
}

id ReportTableViewCell.init(style:reuseIdentifier:)()
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_bridgeObjectRelease();
  uint64_t v2 = &v0[OBJC_IVAR___PHReportTableViewCell____lazy_storage___cellContentConfiguration];
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  NSString v4 = String._bridgeToObjectiveC()();
  v8.receiver = v0;
  v8.super_class = ObjectType;
  id v5 = [super initWithStyle:0 reuseIdentifier:v4];

  id v6 = v5;
  ReportTableViewCell.configureContent()();
  [v6 setSelectionStyle:0];

  return v6;
}

void ReportTableViewCell.configureContent()()
{
  [v0 setAutomaticallyUpdatesBackgroundConfiguration:0];
  v6[3] = type metadata accessor for UIListContentConfiguration();
  v6[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
  ReportTableViewCell.cellContentConfiguration.getter((uint64_t)boxed_opaque_existential_1);
  UITableViewCell.contentConfiguration.setter();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self systemImageNamed:v2];

  id v4 = [objc_allocWithZone((Class)UIImageView) initWithImage:v3];
  id v5 = [self systemRedColor];
  [v4 setTintColor:v5];

  [v0 setAccessoryView:v4];
}

void ReportTableViewCell.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR___PHReportTableViewCell____lazy_storage___cellContentConfiguration];
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ReportTableViewCell.cellContentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIListContentConfiguration?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  id v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  objc_super v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR___PHReportTableViewCell____lazy_storage___cellContentConfiguration;
  swift_beginAccess();
  outlined init with copy of UIListContentConfiguration?(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for UIListContentConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  outlined destroy of UIListContentConfiguration?((uint64_t)v8);
  closure #1 in ReportTableViewCell.cellContentConfiguration.getter();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of UIListContentConfiguration?((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t closure #1 in ReportTableViewCell.cellContentConfiguration.getter()
{
  UITableViewCell.defaultContentConfiguration()();
  id v0 = [self mainBundle];
  v9._object = (void *)0xE000000000000000;
  v1._object = (void *)0x8000000100242B80;
  v1._countAndFlagsBits = 0xD00000000000002ALL;
  v2.value._countAndFlagsBits = 0x746E656365524850;
  v2.value._object = (void *)0xE900000000000073;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v9);

  UIListContentConfiguration.text.setter();
  id v4 = [self systemRedColor];
  uint64_t v5 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v5(v8, 0);
  id v6 = (uint64_t (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
  return v6(v8, 0);
}

uint64_t ObjC metadata update function for ReportTableViewCell()
{
  return type metadata accessor for ReportTableViewCell();
}

uint64_t type metadata accessor for ReportTableViewCell()
{
  uint64_t result = type metadata singleton initialization cache for ReportTableViewCell;
  if (!type metadata singleton initialization cache for ReportTableViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ReportTableViewCell()
{
  type metadata accessor for UIListContentConfiguration?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *VoicemailBadgeCalculator.CountResult.unknown.unsafeMutableAddressor()
{
  return &static VoicemailBadgeCalculator.CountResult.unknown;
}

uint64_t static VoicemailBadgeCalculator.CountResult.+ infix(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  BOOL v4 = __CFADD__(a1, a3);
  uint64_t result = a1 + a3;
  char v6 = v4;
  if ((a2 | a4))
  {
    if ((v6 & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t static VoicemailBadgeCalculator.CountResult.__derived_enum_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4)
{
  return (((a4 & 1) == 0) ^ a2) & (a1 == a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoicemailBadgeCalculator.CountResult(uint64_t a1, uint64_t a2)
{
  return (*(void *)a1 == *(void *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

id VoicemailBadgeCalculator.__allocating_init(accountManager:vvmSource:legacySource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a2, v9);
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a3, v12);
  id v14 = specialized VoicemailBadgeCalculator.__allocating_init(accountManager:vvmSource:legacySource:)(v7, v10, v13, v17, v6, v12, v9, v16, v11, v8);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v14;
}

id VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 32);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  __chkstk_darwin(v12);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(a3 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a3, v17);
  __chkstk_darwin(v18);
  id v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  id v22 = specialized VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)((uint64_t)v9, (uint64_t)v14, (uint64_t)v20, v27, v6, v17, v11, v26, v16, v25);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v22;
}

uint64_t closure #1 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:), v3, v2);
}

uint64_t closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:), v3, v2);
}

uint64_t closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    (*(void (**)(void))((swift_isaMask & *Strong) + 0xE8))();
    swift_release();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t VoicemailBadgeCalculator.listen(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  void v9[5] = a1;
  v9[6] = a2;
  id v10 = v2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in VoicemailBadgeCalculator.listen(_:), (uint64_t)v9);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t closure #1 in VoicemailBadgeCalculator.listen(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PhoneBadge, Never>>);
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PhoneBadge, Never>>.Iterator);
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  return _swift_task_switch(closure #1 in VoicemailBadgeCalculator.listen(_:), 0, 0);
}

uint64_t closure #1 in VoicemailBadgeCalculator.listen(_:)()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  v0[4] = *(void *)(v0[6] + OBJC_IVAR___MPVoicemailBadgeCalculator_currentBadge);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PhoneBadge, Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PhoneBadge, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PhoneBadge, Never>);
  Publisher<>.values.getter();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PhoneBadge, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PhoneBadge, Never>>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in VoicemailBadgeCalculator.listen(_:);
  uint64_t v6 = v0[12];
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 2, v6, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in VoicemailBadgeCalculator.listen(_:);
  }
  else {
    uint64_t v2 = closure #1 in VoicemailBadgeCalculator.listen(_:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 16);
  return _swift_task_switch(closure #1 in VoicemailBadgeCalculator.listen(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 136);
  if (v1 == 2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = v1 & 1;
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v0 + 56) + **(int **)(v0 + 56));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in VoicemailBadgeCalculator.listen(_:);
    uint64_t v6 = *(void *)(v0 + 144);
    return v7(v4, v6);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PhoneBadge, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PhoneBadge, Never>>.Iterator);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 120) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in VoicemailBadgeCalculator.listen(_:);
  uint64_t v5 = *(void *)(v1 + 96);
  return dispatch thunk of AsyncIteratorProtocol.next()(v1 + 16, v5, v3);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 40) = *(void *)(v0 + 128);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t VoicemailBadgeCalculator.listen_objc(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t))((swift_isaMask & *v2) + 0xD8);
  swift_retain();
  uint64_t v7 = v6(&async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> (), v5);
  swift_release();
  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> ()(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> ()(v4);
}

uint64_t VoicemailBadgeCalculator.updateBadge()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = OBJC_IVAR___MPVoicemailBadgeCalculator_currentUpdateTask;
  uint64_t v6 = *(void *)&v0[OBJC_IVAR___MPVoicemailBadgeCalculator_currentUpdateTask];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v6;
  v7[5] = v0;
  swift_retain();
  uint64_t v8 = v0;
  uint64_t v9 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSo10PhoneBadgea_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in VoicemailBadgeCalculator.updateBadge(), (uint64_t)v7);
  *(void *)&v0[v5] = v9;
  swift_retain();
  swift_release();
  return v9;
}

uint64_t closure #1 in VoicemailBadgeCalculator.updateBadge()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v5[8] = a1;
  v5[9] = a5;
  if (a4)
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v5[10] = v7;
    type metadata accessor for PhoneBadge(0);
    *uint64_t v7 = v5;
    v7[1] = closure #1 in VoicemailBadgeCalculator.updateBadge();
    return Task<>.value.getter(v5 + 6, a4, v8);
  }
  else
  {
    uint64_t v11 = (uint64_t (*)(void))(*(void *)((swift_isaMask & *a5) + 0xF0) + **(int **)((swift_isaMask & *a5) + 0xF0));
    uint64_t v9 = (void *)swift_task_alloc();
    v5[11] = v9;
    *uint64_t v9 = v5;
    v9[1] = closure #1 in VoicemailBadgeCalculator.updateBadge();
    return v11();
  }
}

uint64_t closure #1 in VoicemailBadgeCalculator.updateBadge()()
{
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in VoicemailBadgeCalculator.updateBadge(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t v4;

  uint64_t v3 = (uint64_t (*)(void))(*(void *)((swift_isaMask & **(void **)(v0 + 72)) + 0xF0)
                         + **(int **)((swift_isaMask & **(void **)(v0 + 72)) + 0xF0));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in VoicemailBadgeCalculator.updateBadge();
  return v3();
}

{
  uint64_t v0;
  BOOL v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (*(unsigned char *)(v0 + 104) & 1) == 0;
  CurrentValueSubject.value.getter();
  if ((v1 ^ *(unsigned __int8 *)(v0 + 16)))
  {
    uint64_t v2 = *(void *)(v0 + 96);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 96);
    if (v2 == *(void *)(v0 + 24))
    {
      uint64_t v3 = (*(unsigned char *)(v0 + 104) & 1) == 0;
      goto LABEL_6;
    }
  }
  uint64_t v3 = (*(unsigned char *)(v0 + 104) & 1) == 0;
  *(unsigned char *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v2;
  CurrentValueSubject.send(_:)();
  uint64_t v2 = *(void *)(v0 + 96);
LABEL_6:
  uint64_t v4 = *(void *)(v0 + 64);
  *(unsigned char *)uint64_t v4 = v3;
  *(void *)(v4 + 8) = v2;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t closure #1 in VoicemailBadgeCalculator.updateBadge()(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(unsigned char *)(v3 + 104) = a2;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in VoicemailBadgeCalculator.updateBadge(), 0, 0);
}

BOOL PhoneBadge.init(_:)(uint64_t a1, char a2)
{
  return (a2 & 1) == 0;
}

uint64_t VoicemailBadgeCalculator._updateBadge()()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(VoicemailBadgeCalculator._updateBadge(), 0, 0);
}

{
  void *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(uint64_t, char);
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = (char *)v0[2];
  uint64_t v2 = *(void *)&v1[OBJC_IVAR___MPVoicemailBadgeCalculator_accountManager + 24];
  uint64_t v3 = *(void *)&v1[OBJC_IVAR___MPVoicemailBadgeCalculator_accountManager + 32];
  __swift_project_boxed_opaque_existential_0(&v1[OBJC_IVAR___MPVoicemailBadgeCalculator_accountManager], v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v5 = v1;
  LOBYTE(v3) = specialized Sequence.contains(where:)(v4, (uint64_t)v5);

  swift_bridgeObjectRelease();
  uint64_t v6 = v0[2];
  if (v3)
  {
    uint64_t v7 = *(void *)(v6 + OBJC_IVAR___MPVoicemailBadgeCalculator_vvmSource + 24);
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR___MPVoicemailBadgeCalculator_vvmSource + 32);
    __swift_project_boxed_opaque_existential_0((void *)(v6 + OBJC_IVAR___MPVoicemailBadgeCalculator_vvmSource), v7);
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[3] = v9;
    *uint64_t v9 = v0;
    uint64_t v10 = VoicemailBadgeCalculator._updateBadge();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + OBJC_IVAR___MPVoicemailBadgeCalculator_legacySource + 24);
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR___MPVoicemailBadgeCalculator_legacySource + 32);
    __swift_project_boxed_opaque_existential_0((void *)(v6 + OBJC_IVAR___MPVoicemailBadgeCalculator_legacySource), v7);
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[4] = v9;
    *uint64_t v9 = v0;
    uint64_t v10 = VoicemailBadgeCalculator._updateBadge();
  }
  v9[1] = v10;
  return v12(v7, v8);
}

uint64_t VoicemailBadgeCalculator._updateBadge()(uint64_t a1, char a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v7 + 8);
  return v5(a1, a2 & 1);
}

{
  uint64_t *v2;
  uint64_t (*v5)(uint64_t, void);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v7 + 8);
  return v5(a1, a2 & 1);
}

void VoicemailBadgeCalculator.init()()
{
}

id VoicemailBadgeCalculator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VoicemailBadgeCalculator();
  return [super dealloc];
}

uint64_t protocol witness for VoicemailBadgeCalculatorAccountManager.accounts.getter in conformance VMVoicemailManager()
{
  id v1 = [*v0 accounts];
  type metadata accessor for VMAccount();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id protocol witness for VoicemailBadgeCalculatorAccountManager.isAccountSubscribed(_:) in conformance VMVoicemailManager()
{
  id v1 = *v0;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 isAccountSubscribed:isa];

  return v3;
}

id protocol witness for VoicemailBadgeCalculatorAccountManager.isOnline.getter in conformance VMVoicemailManager()
{
  return [*v0 isOnline];
}

id protocol witness for VoicemailBadgeCalculatorAccountManager.isMessageWaiting.getter in conformance VMVoicemailManager()
{
  return [*v0 isMessageWaiting];
}

uint64_t static PhoneBadge.== infix(_:_:)(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return (a2 == a4) & ~(a1 ^ a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneBadge(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*((void *)a1 + 1) == *((void *)a2 + 1)) & ~(*a1 ^ *a2);
}

unint64_t VoicemailBadgeCalculator.CountResult.description.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v2 = 0xD000000000000012;
LABEL_5:
    unint64_t v6 = v2;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return v6;
  }
  if (a1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v2 = 0xD000000000000014;
    goto LABEL_5;
  }
  return 0xD000000000000013;
}

unint64_t VoicemailBadgeCalculator.CountResult.debugDescription.getter(uint64_t a1, char a2)
{
  return VoicemailBadgeCalculator.CountResult.description.getter(a1, a2 & 1);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance VoicemailBadgeCalculator.CountResult()
{
  return VoicemailBadgeCalculator.CountResult.description.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

id specialized VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v36[3] = a5;
  v36[4] = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  v35[3] = a7;
  v35[4] = a10;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(v35);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v18, a2, a7);
  v34[3] = a6;
  v34[4] = a9;
  int v32 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v32, a3, a6);
  uint64_t v19 = OBJC_IVAR___MPVoicemailBadgeCalculator_logger;
  uint64_t v20 = one-time initialization token for mobilePhone;
  uint64_t v21 = a4;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(&v21[v19], v23, v22);
  uint64_t v24 = OBJC_IVAR___MPVoicemailBadgeCalculator_currentBadge;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PhoneBadge, Never>);
  swift_allocObject();
  *(void *)&v21[v24] = CurrentValueSubject.init(_:)();
  *(void *)&v21[OBJC_IVAR___MPVoicemailBadgeCalculator_currentUpdateTask] = 0;
  *(void *)&v21[OBJC_IVAR___MPVoicemailBadgeCalculator_cancellables] = _swiftEmptyArrayStorage;
  outlined init with copy of Tip((uint64_t)v36, (uint64_t)&v21[OBJC_IVAR___MPVoicemailBadgeCalculator_accountManager]);
  outlined init with copy of Tip((uint64_t)v35, (uint64_t)&v21[OBJC_IVAR___MPVoicemailBadgeCalculator_vvmSource]);
  outlined init with copy of Tip((uint64_t)v34, (uint64_t)&v21[OBJC_IVAR___MPVoicemailBadgeCalculator_legacySource]);

  v33.receiver = v21;
  v33.super_class = (Class)type metadata accessor for VoicemailBadgeCalculator();
  id v25 = [super init];
  uint64_t v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v27 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a10 + 16);
  id v28 = v25;
  swift_retain();
  v27(&async function pointer to partial apply for closure #1 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:), v26, a7, a10);
  swift_release_n();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], &demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v30 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a9 + 16);
  swift_retain();
  v30(&async function pointer to partial apply for closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:), v29, a6, a9);
  swift_release_n();
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  return v28;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v22 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v20 = (void *)(a2 + OBJC_IVAR___MPVoicemailBadgeCalculator_accountManager);
      unint64_t v21 = a1 & 0xC000000000000001;
      uint64_t v18 = v3;
      uint64_t v19 = (void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v9 = 4;
      do
      {
        a2 = v9 - 4;
        if (v21)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v9 - 3;
          if (__OFADD__(a2, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          id v10 = *(id *)(a1 + 8 * v9);
          uint64_t v11 = v9 - 3;
          if (__OFADD__(a2, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v6 = v8;
        uint64_t v12 = v10;
        id v24 = v10;
        uint64_t v14 = v20[3];
        uint64_t v13 = v20[4];
        __swift_project_boxed_opaque_existential_0(v20, v14);
        id v15 = [v12 UUID];
        uint64_t v16 = v22;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v3 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v14, v13);
        (*v19)(v16, v23);

        if (v3)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        ++v9;
        uint64_t v8 = v6;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

id specialized VoicemailBadgeCalculator.__allocating_init(accountManager:vvmSource:legacySource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a3;
  uint64_t v33 = a8;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t v30 = a10;
  uint64_t v31 = a9;
  uint64_t v14 = __chkstk_darwin(a1);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v14);
  unint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v19);
  id v25 = (char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = objc_allocWithZone((Class)type metadata accessor for VoicemailBadgeCalculator());
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v28, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v29, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v32, a6);
  return specialized VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)((uint64_t)v25, (uint64_t)v21, (uint64_t)v16, v26, a5, a6, a7, v33, v31, v30);
}

uint64_t sub_10018BCFC()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in VoicemailBadgeCalculator.listen(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VoicemailBadgeCalculator.listen(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10018BE0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void (**)(void))(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, void (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> ()
                                                                + async function pointer to thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> ());
  return v8(a1, a2, v6);
}

uint64_t sub_10018BF08()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in VoicemailBadgeCalculator.updateBadge()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = (void *)v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in VoicemailBadgeCalculator.updateBadge()(a1, v4, v5, v7, v6);
}

uint64_t type metadata accessor for VoicemailBadgeCalculator()
{
  uint64_t result = type metadata singleton initialization cache for VoicemailBadgeCalculator;
  if (!type metadata singleton initialization cache for VoicemailBadgeCalculator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for VoicemailBadgeCalculator()
{
  return type metadata accessor for VoicemailBadgeCalculator();
}

uint64_t type metadata completion function for VoicemailBadgeCalculator()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VoicemailBadgeCalculator.CountResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VoicemailBadgeCalculator.CountResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for VoicemailBadgeCalculator.CountResult(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for VoicemailBadgeCalculator.CountResult(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for VoicemailBadgeCalculator.CountResult()
{
  return &type metadata for VoicemailBadgeCalculator.CountResult;
}

uint64_t sub_10018C1D8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned PhoneBadge) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(v2 + 16) + 16))(*(void *)(v2 + 16), a1 & 1, a2);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned PhoneBadge) -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10018C234()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(v0);
}

uint64_t partial apply for closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(v0);
}

id VMGreetingChangeViewController.liveVoicemailAccount()()
{
  if (![v0 liveVoicemailEnabled]) {
    return 0;
  }
  id v1 = objc_allocWithZone((Class)type metadata accessor for GreetingAccount());
  return GreetingAccount.init(accountType:)(0, 2);
}

Swift::Void __swiftcall VMGreetingChangeViewController.startObservingPreferences()()
{
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Defaults.isInternalInstall == 1)
  {
    id v1 = (void *)swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    id v2 = specialized Defaults.subscribe(to:onChange:)(2u, (uint64_t)partial apply for closure #1 in VMGreetingChangeViewController.startObservingPreferences(), v1);
    swift_release_n();
    id v3 = v2;
    id v4 = [v0 observations];
    [v4 insertObject:v3 atIndex:0];
  }
}

uint64_t sub_10018C614()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void closure #1 in VMGreetingChangeViewController.startObservingPreferences()()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = Strong;
    [Strong updateView];
  }
}

void partial apply for closure #1 in VMGreetingChangeViewController.startObservingPreferences()()
{
}

Swift::Bool __swiftcall VMGreetingChangeViewController.arrayContainsUUID(_:uuid:)(Swift::OpaquePointer _, Swift::String uuid)
{
  object = uuid._object;
  uint64_t countAndFlagsBits = uuid._countAndFlagsBits;
  swift_bridgeObjectRetain();
  LOBYTE(countAndFlagsBits) = specialized Sequence.contains(where:)((unint64_t)_._rawValue, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  return countAndFlagsBits & 1;
}

Swift::Void __swiftcall VMGreetingChangeViewController.stopObservingPreferences()()
{
  type metadata accessor for NSMutableArray();
  id v1 = (id)NSArray.init(arrayLiteral:)();
  [v0 setObservations:v1];
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if (UUID.uuidString.getter() == a2 && v11 == a3)
      {
        swift_bridgeObjectRelease();

        char v13 = 1;
        goto LABEL_20;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        ++v7;
        if (v10 != v6) {
          continue;
        }
      }
      goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  char v13 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  return v13 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v11 = [v8 contactProperty];
      if (v11)
      {
        uint64_t v12 = v11;
        char v13 = [v11 contact];

        uint64_t v14 = a3;
        uint64_t v15 = [v13 identifier];

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        if (v16 == a2 && v18 == v14)
        {
          swift_bridgeObjectRelease();

          uint64_t v6 = 1;
          goto LABEL_19;
        }
        uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v20)
        {
          uint64_t v6 = 1;
          goto LABEL_19;
        }
      }
      else
      {
      }
      ++v7;
      if (v10 == v6)
      {
        uint64_t v6 = 0;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t type metadata accessor for NSMutableArray()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableArray;
  if (!lazy cache variable for type metadata for NSMutableArray)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableArray);
  }
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      outlined consume of Set<CHHandle>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    outlined consume of Set<CHHandle>.Index._Variant(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = specialized Set.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

void FaceTimeSpamReportManager.reportSpam(call:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = FaceTimeSpamReportManager.fetchLocalFaceTimeHandles()();
  uint64_t v5 = specialized Collection.first.getter((uint64_t)v4);
  if (v6)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    swift_bridgeObjectRelease();
    type metadata accessor for NameAndPhotoUtilities();
    uint64_t v9 = (void *)static NameAndPhotoUtilities.shared.getter();
    id v10 = [a1 validRemoteParticipantHandles];
    if (v10)
    {
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      lazy protocol witness table accessor for type CHHandle and conformance NSObject();
      uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = (void *)specialized Collection.first.getter(v11);
      swift_bridgeObjectRelease();
      if (v12)
      {
        id v13 = [v12 value];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
    }
    uint64_t v14 = (void *)NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)();

    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)static NameAndPhotoUtilities.shared.getter();
    id v16 = [a1 validRemoteParticipantHandles];
    if (v16
      && (type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle), lazy protocol witness table accessor for type CHHandle and conformance NSObject(), v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)(), v16, id v16 = (id)specialized Collection.first.getter(v17), swift_bridgeObjectRelease(), v16))
    {
      id v18 = [v16 value];

      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v16 = v20;
    }
    else
    {
      uint64_t v19 = 0;
    }
    v21.value._uint64_t countAndFlagsBits = v19;
    v21.value._object = v16;
    uint64_t v22 = (unint64_t)NameAndPhotoUtilities.unknownSenderRecordInfo(for:)(v21);

    swift_bridgeObjectRelease();
    id v23 = v14;
    specialized FaceTimeSpamReportManager.SpamDataModel.init(call:nickName:recipientHandleValue:snapRecordInfo:)(a1, v14, v7, v8, v22, (uint64_t)v51);
    uint64_t v24 = FaceTimeSpamReportManager.SpamDataModel.mapToDict.getter();
    outlined release of FaceTimeSpamReportManager.SpamDataModel((uint64_t)v51);
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.spamReport);
    swift_bridgeObjectRetain_n();
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      id v48 = v23;
      if (v24)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
        uint64_t v29 = String.init<A>(reflecting:)();
        unint64_t v31 = v30;
      }
      else
      {
        unint64_t v31 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "ReportSpamManager: report spam, model.dictionary: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v23 = v48;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v39 = *(id *)(v2 + OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_idsService);
    if (v24)
    {
      v40.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v40.super.Class isa = 0;
    }
    unsigned __int8 v41 = [v39 reportSpamMessage:v40.super.isa v48, v49, v50];

    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    if (v41)
    {
      if (v44)
      {
        id v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v45 = 0;
        os_log_type_t v46 = v43;
        os_log_type_t v47 = "ReportSpamManager: report spam was sent successfully";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v42, v46, v47, v45, 2u);
        swift_slowDealloc();

        return;
      }
    }
    else if (v44)
    {
      id v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v45 = 0;
      os_log_type_t v46 = v43;
      os_log_type_t v47 = "ReportSpamManager: report spam was rejected for some reason";
      goto LABEL_30;
    }
  }
  else
  {
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.spamReport);
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      Class v35 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)Class v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v36 = Set.description.getter();
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Could not report facetime call spam due to zero registered facetime service IMAccount %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.invitedMembers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.callType.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.callLength.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.hasLink.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.formattedCallStatus.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.recipientHandleValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.senderHandleValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.messageId.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.spamTime.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.messageKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.snapFirstName.getter()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.snapLastName.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.snapRecordId.getter()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.snapRecordInfo.getter()
{
  return swift_bridgeObjectRetain();
}

double FaceTimeSpamReportManager.SpamDataModel.init(call:nickName:recipientHandleValue:snapRecordInfo:)@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  specialized FaceTimeSpamReportManager.SpamDataModel.init(call:nickName:recipientHandleValue:snapRecordInfo:)(a1, a2, a3, a4, a5, (uint64_t)v14);
  long long v7 = v22;
  a6[8] = v21;
  a6[9] = v7;
  long long v8 = v24;
  a6[10] = v23;
  a6[11] = v8;
  long long v9 = v18;
  a6[4] = v17;
  a6[5] = v9;
  long long v10 = v20;
  a6[6] = v19;
  a6[7] = v10;
  long long v11 = v14[1];
  *a6 = v14[0];
  a6[1] = v11;
  double result = *(double *)&v15;
  long long v13 = v16;
  a6[2] = v15;
  a6[3] = v13;
  return result;
}

void *CHRecentCall.formattedRemoteHandles.getter()
{
  id v1 = [v0 validRemoteParticipantHandles];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  lazy protocol witness table accessor for type CHHandle and conformance NSObject();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v3);
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    double result = (void *)swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_4;
    }
LABEL_19:
    long long v9 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease_n();
    return v9;
  }
  swift_bridgeObjectRetain();
  double result = (void *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = (uint64_t)result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_4:
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    long long v9 = _swiftEmptyArrayStorage;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v5 + 8 * v8 + 32);
      }
      long long v11 = v10;
      id v12 = (id)TUCopyIDSFromIDForHandle();
      if (v12)
      {
        long long v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v18 = v9[2];
        unint64_t v17 = v9[3];
        if (v18 >= v17 >> 1) {
          long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v9);
        }
        v9[2] = v18 + 1;
        long long v19 = &v9[2 * v18];
        v19[4] = v14;
        v19[5] = v16;
      }
      else
      {
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t CHRecentCall.faceTimeSpamCallType.getter()
{
  id v1 = [v0 serviceProvider];
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_10;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v5)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v3 != v6 || v5 != v7)
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_13;
    }
    return 0;
  }
  swift_bridgeObjectRelease_n();
LABEL_13:
  id v11 = [v0 remoteParticipantHandles];
  if (v11
    && ((id v12 = v11,
         type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle), lazy protocol witness table accessor for type CHHandle and conformance NSObject(), v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(), v12, (v13 & 0xC000000000000001) == 0)? (uint64_t v14 = *(void *)(v13 + 16)): (uint64_t v14 = __CocoaSet.count.getter()), swift_bridgeObjectRelease(), v14 == 1))
  {
    return 0xD000000000000013;
  }
  else
  {
    return 0x656D697465636166;
  }
}

uint64_t UInt32.stringValue.getter(int a1)
{
  if (kCHCallStatusUnknown == a1) {
    return 0x6E776F6E6B6E75;
  }
  uint64_t result = 0xD000000000000011;
  if (kCHCallStatusConnectedIncoming != a1
    && kCHCallStatusConnectedOutgoing != a1
    && kCHCallStatusAnsweredElsewhere != a1)
  {
    if (kCHCallStatusMissed == a1)
    {
      return 0x64657373696DLL;
    }
    else if (kCHCallStatusCancelled == a1)
    {
      return 0x656C6C65636E6163;
    }
    else
    {
      if (one-time initialization token for spamReport != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.spamReport);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136315138;
        uint64_t v7 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v9);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown Callstatus, %s", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return 0;
    }
  }
  return result;
}

unint64_t FaceTimeSpamReportManager.SpamDataModel.snapSpamDictionary.getter()
{
  id v1 = v0;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v22 = v2;
  *(void *)&long long v19 = 0x616E2D7473726966;
  *((void *)&v19 + 1) = 0xEA0000000000656DLL;
  AnyHashable.init<A>(_:)();
  uint64_t v3 = v1[18];
  if (v3)
  {
    uint64_t v4 = v1[17];
    long long v20 = &type metadata for String;
    *(void *)&long long v19 = v4;
    *((void *)&v19 + 1) = v3;
    outlined init with take of Any(&v19, v18);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)v21, isUniquelyReferenced_nonNull_native);
    unint64_t v22 = v2;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21, &v19);
    outlined destroy of AnyHashable((uint64_t)v21);
    outlined destroy of Locale?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  }
  *(void *)&long long v19 = 0x6D616E2D7473616CLL;
  *((void *)&v19 + 1) = 0xE900000000000065;
  AnyHashable.init<A>(_:)();
  uint64_t v6 = v1[20];
  if (v6)
  {
    uint64_t v7 = v1[19];
    long long v20 = &type metadata for String;
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v6;
    outlined init with take of Any(&v19, v18);
    swift_bridgeObjectRetain();
    unint64_t v8 = v22;
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)v21, v9);
    unint64_t v22 = v8;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21, &v19);
    outlined destroy of AnyHashable((uint64_t)v21);
    outlined destroy of Locale?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  }
  *(void *)&long long v19 = 0x644964726F636572;
  *((void *)&v19 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v10 = v1[22];
  if (v10)
  {
    uint64_t v11 = v1[21];
    long long v20 = &type metadata for String;
    *(void *)&long long v19 = v11;
    *((void *)&v19 + 1) = v10;
    outlined init with take of Any(&v19, v18);
    swift_bridgeObjectRetain();
    unint64_t v12 = v22;
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)v21, v13);
    unint64_t v22 = v12;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21, &v19);
    outlined destroy of AnyHashable((uint64_t)v21);
    outlined destroy of Locale?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  }
  *(void *)&long long v19 = 0xD000000000000017;
  *((void *)&v19 + 1) = 0x8000000100242D20;
  AnyHashable.init<A>(_:)();
  uint64_t v14 = v1[23];
  if (v14)
  {
    long long v20 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]);
    *(void *)&long long v19 = v14;
    outlined init with take of Any(&v19, v18);
    swift_bridgeObjectRetain();
    unint64_t v15 = v22;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)v21, v16);
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v21);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21, &v19);
    outlined destroy of AnyHashable((uint64_t)v21);
    outlined destroy of Locale?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
    return v22;
  }
  return v15;
}

uint64_t FaceTimeSpamReportManager.SpamDataModel.mapToDict.getter()
{
  id v1 = v0;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v64 = 0x2D64657469766E69;
  *((void *)&v64 + 1) = 0xEF737265626D656DLL;
  AnyHashable.init<A>(_:)();
  uint64_t v3 = *v1;
  unint64_t v65 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)&long long v64 = v3;
  outlined init with take of Any(&v64, v63);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, isUniquelyReferenced_nonNull_native);
  uint64_t v5 = v73[0];
  uint64_t v67 = v73[0];
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)(v1 + 13), (uint64_t)v70, &demangling cache variable for type metadata for Double?);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v70, (uint64_t)&v71, &demangling cache variable for type metadata for Double?);
  if (v72)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_24;
    }
    char v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v9 = 0;
    uint64_t v10 = "call date is nil, kIDSGeneralSpamReportTimeOfMessageKey is required to report spams";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
    swift_slowDealloc();
LABEL_24:

    return 0;
  }
  uint64_t v11 = v1[12];
  if (!v11)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.spamReport);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_24;
    }
    char v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v9 = 0;
    uint64_t v10 = "message id is nil, kIDSGeneralSpamReportMessageIDKey is required to report spams";
    goto LABEL_23;
  }
  uint64_t v12 = v71;
  uint64_t v13 = v1[11];
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)(v1 + 9), (uint64_t)v69, &demangling cache variable for type metadata for String?);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v69, (uint64_t)v73, &demangling cache variable for type metadata for String?);
  if (!v73[1])
  {
LABEL_19:
    swift_bridgeObjectRelease();
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.spamReport);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_24;
    }
    char v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v9 = 0;
    uint64_t v10 = "senderHandleValue is nil, kIDSGeneralSpamReportSenderURIKey is required to report spams";
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = (id)TUHandleForIDSCanonicalAddress();

  if (!v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  id v16 = (id)TUCopyIDSFromIDForHandle();
  if (!v16)
  {
    swift_bridgeObjectRelease();

    goto LABEL_19;
  }
  unint64_t v17 = v16;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = (id)TUHandleForIDSCanonicalAddress();

  *(void *)&long long v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v64 + 1) = v22;
  AnyHashable.init<A>(_:)();
  uint64_t v23 = v1[15];
  uint64_t v24 = v1[16];
  unint64_t v65 = &type metadata for String;
  *(void *)&long long v64 = v23;
  *((void *)&v64 + 1) = v24;
  outlined init with take of Any(&v64, v63);
  swift_bridgeObjectRetain();
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = v5;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v25);
  uint64_t v26 = v74;
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);
  *(void *)&long long v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v64 + 1) = v27;
  AnyHashable.init<A>(_:)();
  unint64_t v65 = &type metadata for Double;
  *(void *)&long long v64 = v12;
  outlined init with take of Any(&v64, v63);
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = v26;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v28);
  uint64_t v29 = v74;
  uint64_t v67 = v74;
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);
  *(void *)&long long v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v64 + 1) = v30;
  AnyHashable.init<A>(_:)();
  int v62 = v21;
  id v31 = (id)TUCopyIDSFromIDForHandle();
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    unint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = v33;
    *((void *)&v64 + 1) = v35;
    outlined init with take of Any(&v64, v63);
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = v29;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v36);
    uint64_t v37 = v74;
    uint64_t v67 = v74;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v66);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v66, &v64);
    outlined destroy of AnyHashable((uint64_t)v66);
    outlined destroy of Locale?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    uint64_t v37 = v67;
  }
  *(void *)&long long v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v64 + 1) = v42;
  AnyHashable.init<A>(_:)();
  unint64_t v65 = &type metadata for String;
  *(void *)&long long v64 = v13;
  *((void *)&v64 + 1) = v11;
  outlined init with take of Any(&v64, v63);
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = v37;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v43);
  uint64_t v44 = v74;
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);
  *(void *)&long long v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v64 + 1) = v45;
  AnyHashable.init<A>(_:)();
  unint64_t v65 = &type metadata for String;
  *(void *)&long long v64 = v61;
  *((void *)&v64 + 1) = v19;
  outlined init with take of Any(&v64, v63);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = v44;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v46);
  uint64_t v47 = v74;
  uint64_t v67 = v74;
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);
  *(void *)&long long v64 = 0x7079742D6C6C6163;
  *((void *)&v64 + 1) = 0xE900000000000065;
  AnyHashable.init<A>(_:)();
  uint64_t v48 = v1[2];
  if (v48)
  {
    uint64_t v49 = v1[1];
    unint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = v49;
    *((void *)&v64 + 1) = v48;
    outlined init with take of Any(&v64, v63);
    swift_bridgeObjectRetain();
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = v47;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v50);
    uint64_t v67 = v74;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v66);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v66, &v64);
    outlined destroy of AnyHashable((uint64_t)v66);
    outlined destroy of Locale?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
  }
  *(void *)&long long v64 = 0x6E656C2D6C6C6163;
  *((void *)&v64 + 1) = 0xEB00000000687467;
  AnyHashable.init<A>(_:)();
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)(v1 + 3), (uint64_t)v68, &demangling cache variable for type metadata for Double?);
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v68, (uint64_t)&v74, &demangling cache variable for type metadata for Double?);
  if (v75)
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v66, &v64);
    outlined destroy of AnyHashable((uint64_t)v66);
    outlined destroy of Locale?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    uint64_t v51 = v67;
  }
  else
  {
    unint64_t v65 = &type metadata for Double;
    *(void *)&long long v64 = v74;
    outlined init with take of Any(&v64, v63);
    uint64_t v51 = v67;
    char v52 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v52);
    uint64_t v67 = v51;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v66);
  }
  *(void *)&long long v64 = 0x6B6E696C2D736168;
  *((void *)&v64 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  char v53 = *((unsigned char *)v1 + 33);
  unint64_t v65 = &type metadata for Bool;
  LOBYTE(v64) = v53;
  outlined init with take of Any(&v64, v63);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v54);
  uint64_t v67 = v51;
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);
  *(void *)&long long v64 = 0x6174732D6C6C6163;
  *((void *)&v64 + 1) = 0xEB00000000737574;
  AnyHashable.init<A>(_:)();
  uint64_t v55 = v1[6];
  if (v55)
  {
    uint64_t v56 = v1[5];
    unint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = v56;
    *((void *)&v64 + 1) = v55;
    outlined init with take of Any(&v64, v63);
    swift_bridgeObjectRetain();
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v57);
    uint64_t v58 = v51;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v66);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v66, &v64);
    outlined destroy of AnyHashable((uint64_t)v66);
    outlined destroy of Locale?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
    uint64_t v58 = v67;
  }
  *(void *)&long long v64 = 0xD00000000000001CLL;
  *((void *)&v64 + 1) = 0x8000000100242D40;
  AnyHashable.init<A>(_:)();
  unint64_t v59 = FaceTimeSpamReportManager.SpamDataModel.snapSpamDictionary.getter();
  unint64_t v65 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  *(void *)&long long v64 = v59;
  outlined init with take of Any(&v64, v63);
  char v60 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, (uint64_t)v66, v60);
  uint64_t v40 = v58;
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v66);

  return v40;
}

id FaceTimeSpamReportManager.__allocating_init(idsService:imAccountController:imDaemonController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_idsService] = a1;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imAccountController] = a2;
  *(void *)&v7[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imDaemonController] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return [super init];
}

id FaceTimeSpamReportManager.init(idsService:imAccountController:imDaemonController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_idsService] = a1;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imAccountController] = a2;
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imDaemonController] = a3;
  v9.receiver = v3;
  v9.super_class = ObjectType;
  return [super init];
}

id FaceTimeSpamReportManager.fetchLocalFaceTimeHandles()()
{
  object = v0;
  [*(id *)((char *)v0 + OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imDaemonController) blockUntilConnected];
  unint64_t v2 = (char **)OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imAccountController;
  uint64_t v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC11MobilePhone25FaceTimeSpamReportManager_imAccountController);
  unint64_t v4 = self;
  id v5 = v3;
  id v6 = [(id)v4 facetimeService];
  uint64_t countAndFlagsBits = &selRef_didTapLinkButton;
  id v8 = [v5 accountsForService:v6];

  if (!v8)
  {
    if (one-time initialization token for spamReport == -1)
    {
LABEL_16:
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.spamReport);
      id v16 = object;
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        id v20 = *(id *)((char *)v2 + (void)object);
        id v21 = [(id)v4 facetimeService];
        id v22 = [v20 countAndFlagsBits[90]:v21];

        if (v22)
        {
          type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for IMAccount);
          static Array._unconditionallyBridgeFromObjectiveC(_:)();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IMAccount]?);
        uint64_t v23 = Optional.debugDescription.getter();
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not find any facetime service IMAccount in IMAccountController %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return &_swiftEmptySetSingleton;
    }
LABEL_43:
    swift_once();
    goto LABEL_16;
  }
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for IMAccount);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  object = _swiftEmptyArrayStorage;
  uint64_t v36 = (uint64_t)_swiftEmptyArrayStorage;
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_4;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_23;
  }
LABEL_4:
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = 0;
  unint64_t v4 = v9 & 0xC000000000000001;
  unint64_t v2 = &selRef_didTapLinkButton;
  do
  {
    if (v4) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v9 + 8 * v11 + 32);
    }
    uint64_t v13 = v12;
    if ([v12 registrationStatus] == (id)5)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t countAndFlagsBits = *(char ***)(v36 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    ++v11;
  }
  while (v10 != v11);
  swift_bridgeObjectRelease();
  uint64_t v14 = v36;
  if (v36 < 0) {
    goto LABEL_38;
  }
LABEL_24:
  if ((v14 & 0x4000000000000000) == 0)
  {
    uint64_t v27 = *(void *)(v14 + 16);
    if (!v27) {
      goto LABEL_39;
    }
    goto LABEL_26;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v27)
  {
LABEL_39:
    swift_release();
    uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_40:
    uint64_t v35 = specialized Set.init<A>(_:)((uint64_t)v29);
    swift_bridgeObjectRelease();
    return (id)v35;
  }
LABEL_26:
  uint64_t v36 = (uint64_t)object;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
  if (v27 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v28 = 0;
  uint64_t v29 = (void *)v36;
  unint64_t v2 = (char **)(v14 & 0xC000000000000001);
  while (1)
  {
    if (v27 == v28)
    {
      __break(1u);
      goto LABEL_38;
    }
    id v30 = v2 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v14 + 8 * v28 + 32);
    id v31 = v30;
    id result = [v30 strippedLogin];
    if (!result) {
      break;
    }
    uint64_t v32 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v33 = String.lowercased()();
    uint64_t countAndFlagsBits = (char **)v33._countAndFlagsBits;
    object = v33._object;

    swift_bridgeObjectRelease();
    uint64_t v36 = (uint64_t)v29;
    unint64_t v4 = v29[2];
    unint64_t v34 = v29[3];
    if (v4 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v4 + 1, 1);
      uint64_t v29 = (void *)v36;
    }
    ++v28;
    v29[2] = v4 + 1;
    *(Swift::String *)&v29[2 * v4 + 4] = v33;
    if (v27 == v28)
    {
      swift_release();
      goto LABEL_40;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined destroy of AnyHashable(*(void *)(v9 + 48) + 40 * v6);
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for TPTipsHelper.Entry.Kind();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  char v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TPTipsHelper.Entry.Kind, Tip>);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  unsigned __int8 v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  char v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v42 = v8;
  char v43 = v7;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    id v22 = v40;
    unint64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = v5;
    uint64_t v26 = *(void *)(v5 + 72);
    unint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    uint64_t v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      outlined init with take of Tip((long long *)(*(void *)(v8 + 56) + 40 * v20), (uint64_t)v47);
    }
    else
    {
      (*v41)(v43, v27, v44);
      outlined init with copy of Tip(*(void *)(v8 + 56) + 40 * v20, (uint64_t)v47);
    }
    lazy protocol witness table accessor for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = outlined init with take of Tip(v47, *(void *)(v10 + 56) + 40 * v18);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  uint64_t v3 = v38;
  id v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          id v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  long long *v16;
  long long v17;
  long long v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned char v28[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        unint64_t v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        uint64_t result = outlined destroy of AnyHashable((uint64_t)v28);
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            uint64_t v15 = v14 + 40 * v3;
            id v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              int64_t v17 = *v16;
              uint64_t v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)uint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            BOOL v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              Swift::Int v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v23 = *v22;
    int64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    int64_t v24 = *v22;
    unint64_t v23 = (-1 << result) - 1;
  }
  void *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1);
  unint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TPTipsHelper.Entry.Kind();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v39 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v39;
    if ((*(void *)(v39 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v36 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v38 = v13;
      id v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v36(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        lazy protocol witness table accessor for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v37)
        {
          if (v19 >= v37 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            unint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 40 * a1;
            unint64_t v27 = (long long *)(v25 + 40 * v10);
            uint64_t v12 = v39;
            if (a1 != v10 || (a1 = v10, v26 >= (unint64_t)v27 + 40))
            {
              long long v28 = *v27;
              long long v29 = v27[1];
              *(void *)(v26 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v26 = v28;
              *(_OWORD *)(v26 + 16) = v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v37 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v39;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for TPTipsHelper.Entry.Kind();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 40 * v14;
  __swift_destroy_boxed_opaque_existential_0(v21);

  return outlined init with take of Tip(a1, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  void *v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);

  return outlined init with take of Any(a1, v17);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for TPTipsHelper.Entry.Kind();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of Tip(a3, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

id specialized _NativeDictionary.copy()()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    char v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, NSDate>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void **)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for TPTipsHelper.Entry.Kind();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TPTipsHelper.Entry.Kind, Tip>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *id v1 = v8;
    return result;
  }
  unint64_t v23 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 40 * v16;
    outlined init with copy of Tip(*(void *)(v6 + 56) + v18, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = (void *)outlined init with take of Tip(v27, *(void *)(v8 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    id result = (void *)swift_release();
    id v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  unint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v11 = -1;
  if (v10 < 64) {
    int64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    int64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t *v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MessageID, [Message]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  unint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v11 = -1;
  if (v10 < 64) {
    int64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    int64_t v19 = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, [String : NSObject]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  unint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v11 = -1;
  if (v10 < 64) {
    int64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 4 * v15;
    unint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    int64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  unint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v11 = -1;
  if (v10 < 64) {
    int64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    unint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    int64_t v19 = v25[0];
    unint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  int64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized Set.subscript.getter(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  unint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

void specialized FaceTimeSpamReportManager.SpamDataModel.init(call:nickName:recipientHandleValue:snapRecordInfo:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  v70 = a2;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  unint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v69 = CHRecentCall.formattedRemoteHandles.getter();
  uint64_t v19 = CHRecentCall.faceTimeSpamCallType.getter();
  uint64_t v67 = v20;
  uint64_t v68 = v19;
  [a1 duration];
  uint64_t v22 = v21;
  __int16 v75 = 0;
  uint64_t v23 = UInt32.stringValue.getter((int)[a1 callStatus]);
  uint64_t v65 = v24;
  uint64_t v66 = v23;
  id v25 = [a1 initiator];
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = [v25 value];

LABEL_4:
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v63 = v29;
    uint64_t v64 = v28;

    goto LABEL_5;
  }
  id v27 = [a1 callerId];
  if (v27) {
    goto LABEL_4;
  }
  uint64_t v63 = 0;
  uint64_t v64 = 0;
LABEL_5:
  id v30 = [a1 uniqueId];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v32;
  uint64_t v62 = v31;

  id v33 = [a1 date];
  if (v33)
  {
    BOOL v34 = v33;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v16, 1, 1, v9);
  }
  outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v16, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Date?);
  int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v18, 1, v9);
  if (!v35)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v18, v9);
    outlined destroy of Locale?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Date?);
    Date.timeIntervalSince1970.getter();
    uint64_t v36 = v52;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    unint64_t v37 = v70;
    if (v70) {
      goto LABEL_10;
    }
LABEL_12:

    uint64_t v47 = 0;
    uint64_t v49 = 0;
    uint64_t v42 = 0;
    uint64_t v44 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    goto LABEL_13;
  }
  outlined destroy of Locale?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v36 = 0;
  unint64_t v37 = v70;
  if (!v70) {
    goto LABEL_12;
  }
LABEL_10:
  id v38 = [v37 firstName];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v40;
  uint64_t v60 = v39;

  id v41 = [v37 lastName];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;

  uint64_t v45 = a5;
  id v46 = [v37 recordID];
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;

  a5 = v45;
  uint64_t v51 = v59;
  uint64_t v50 = v60;
LABEL_13:
  char v53 = HIBYTE(v75);
  char v74 = HIBYTE(v75);
  char v54 = v75;
  BOOL v73 = v35 != 0;
  *(void *)a6 = v69;
  *(void *)(a6 + 8) = v68;
  *(void *)(a6 + 16) = v67;
  *(void *)(a6 + 24) = v22;
  *(unsigned char *)(a6 + 32) = v53;
  *(unsigned char *)(a6 + 33) = v54;
  uint64_t v55 = v65;
  *(void *)(a6 + 40) = v66;
  *(void *)(a6 + 48) = v55;
  uint64_t v56 = v72;
  *(void *)(a6 + 56) = v71;
  *(void *)(a6 + 64) = v56;
  uint64_t v57 = v63;
  *(void *)(a6 + 72) = v64;
  *(void *)(a6 + 80) = v57;
  uint64_t v58 = v61;
  *(void *)(a6 + 88) = v62;
  *(void *)(a6 + 96) = v58;
  *(void *)(a6 + 104) = v36;
  *(unsigned char *)(a6 + 112) = v35 != 0;
  *(void *)(a6 + 120) = 0xD000000000000010;
  *(void *)(a6 + 128) = 0x8000000100242DF0;
  *(void *)(a6 + 136) = v50;
  *(void *)(a6 + 144) = v51;
  *(void *)(a6 + 152) = v42;
  *(void *)(a6 + 160) = v44;
  *(void *)(a6 + 168) = v47;
  *(void *)(a6 + 176) = v49;
  *(void *)(a6 + 184) = a5;
}

uint64_t outlined release of FaceTimeSpamReportManager.SpamDataModel(uint64_t a1)
{
  return a1;
}

uint64_t destroy for FaceTimeSpamReportManager.SpamDataModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FaceTimeSpamReportManager.SpamDataModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v12;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FaceTimeSpamReportManager.SpamDataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for FaceTimeSpamReportManager.SpamDataModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FaceTimeSpamReportManager.SpamDataModel(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceTimeSpamReportManager.SpamDataModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceTimeSpamReportManager.SpamDataModel()
{
  return &type metadata for FaceTimeSpamReportManager.SpamDataModel;
}

uint64_t outlined consume of Set<CHHandle>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind;
  if (!lazy protocol witness table cache variable for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind)
  {
    type metadata accessor for TPTipsHelper.Entry.Kind();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TPTipsHelper.Entry.Kind and conformance TPTipsHelper.Entry.Kind);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

void *SearchHeaderCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static SearchHeaderCell.reuseIdentifier;
}

unint64_t static SearchHeaderCell.reuseIdentifier.getter()
{
  return 0xD000000000000010;
}

id closure #1 in variable initialization expression of SearchHeaderCell.seeAllButton()
{
  id v0 = [objc_allocWithZone((Class)UIButton) init];
  [v0 setOpaque:0];
  id v1 = [self mainBundle];
  v11._object = (void *)0xE000000000000000;
  v2._uint64_t countAndFlagsBits = 0x4C4C415F454553;
  v2._object = (void *)0xE700000000000000;
  v3.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v3.value._object = (void *)0xE900000000000073;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v11);

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setTitle:v5 forState:0];

  id v6 = [v0 titleLabel];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [self preferredFontForTextStyle:UIFontTextStyleBody];
    [v7 setFont:v8];
  }
  id v9 = [self systemBlueColor];
  [v0 setTitleColor:v9 forState:0];

  [v0 setContentHorizontalAlignment:2];
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v0 sizeToFit];
  [v0 setUserInteractionEnabled:1];
  return v0;
}

uint64_t SearchHeaderCell.nonAXConstraints.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell____lazy_storage___nonAXConstraints;
  if (*(void *)(v0 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell____lazy_storage___nonAXConstraints))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell____lazy_storage___nonAXConstraints);
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1002053A0;
    id v4 = [*(id *)(v3 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllButton) lastBaselineAnchor];
    id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                               + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleLabel), "lastBaselineAnchor"));
    id v6 = [v4 constraintEqualToAnchor:v5];

    *(void *)(v2 + 32) = v6;
    specialized Array._endMutation()();
    *(void *)(v3 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for SearchHeaderCell.seeAllTapHandler : SearchHeaderCell@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = _sIeg_ytIegn_TRTA_0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for SearchHeaderCell.seeAllTapHandler : SearchHeaderCell(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = _sytIegr_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t SearchHeaderCell.seeAllTapHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1);
  return v2;
}

uint64_t SearchHeaderCell.seeAllTapHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

uint64_t (*SearchHeaderCell.seeAllTapHandler.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

char *SearchHeaderCell.__allocating_init(sectionTitle:reuseIdentifier:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return SearchHeaderCell.init(sectionTitle:reuseIdentifier:)(a1);
}

char *SearchHeaderCell.init(sectionTitle:reuseIdentifier:)(uint64_t a1)
{
  v20[1] = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleStackView;
  id v7 = objc_allocWithZone((Class)UIStackView);
  uint64_t v8 = v1;
  id v9 = [v7 init];
  [v9 setSpacing:0.0];
  [v9 setDistribution:3];
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v6] = v9;
  uint64_t v10 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleLabel;
  *(void *)&v8[v10] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v11 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllButton;
  *(void *)&v8[v11] = closure #1 in variable initialization expression of SearchHeaderCell.seeAllButton();
  *(void *)&v8[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell____lazy_storage___nonAXConstraints] = 0;
  uint64_t v12 = &v8[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;

  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v21.receiver = v8;
  v21.super_class = ObjectType;
  id v14 = [super initWithReuseIdentifier:v13];

  uint64_t v15 = (char *)v14;
  [v15 setPreservesSuperviewLayoutMargins:1];
  id v16 = *(id *)&v15[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleLabel];
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 setText:v17];

  SearchHeaderCell.setupViews()();
  static UIBackgroundConfiguration.listPlainHeaderFooter()();
  uint64_t v18 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v5, 0, 1, v18);
  UITableViewHeaderFooterView.backgroundConfiguration.setter();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  UITableViewHeaderFooterView.configurationUpdateHandler.setter();

  return v15;
}

void SearchHeaderCell.setupViews()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleLabel];
  id v2 = [self _preferredFontForTextStyle:UIFontTextStyleTitle3 weight:UIFontWeightSemibold];
  [v1 setFont:v2];

  id v3 = [self dynamicLabelColor];
  [v1 setTextColor:v3];

  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleStackView];
  [v4 addArrangedSubview:v1];
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllButton];
  [v5 addTarget:v0 action:"didSelectSeeAllButton" forControlEvents:64];
  [v4 addArrangedSubview:v5];
  [v0 addSubview:v4];
  SearchHeaderCell.loadConstraints()();

  SearchHeaderCell.updateConstraintsForAccessibility()();
}

uint64_t sub_100193E28()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void SearchHeaderCell.loadConstraints()()
{
  uint64_t v1 = v0;
  id v2 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100207760;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleStackView];
  id v5 = [v4 topAnchor];
  id v6 = [v1 topAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6 constant:8.0];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 leadingAnchor];
  id v9 = [v1 layoutMarginsGuide];
  id v10 = [v9 leadingAnchor];

  id v11 = [v8 constraintEqualToAnchor:v10];
  *(void *)(v3 + 40) = v11;
  id v12 = [v4 trailingAnchor];
  id v13 = [v1 layoutMarginsGuide];
  id v14 = [v13 trailingAnchor];

  id v15 = [v12 constraintEqualToAnchor:v14];
  *(void *)(v3 + 48) = v15;
  id v16 = [v4 bottomAnchor];
  id v17 = [v1 bottomAnchor];
  id v18 = [v16 constraintEqualToAnchor:v17 constant:-8.0];

  *(void *)(v3 + 56) = v18;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

void SearchHeaderCell.updateConstraintsForAccessibility()()
{
  id v1 = [v0 traitCollection];
  id v2 = [v1 preferredContentSizeCategory];

  char v3 = UIContentSizeCategory.isAccessibilityCategory.getter();
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleStackView];
  if (v3)
  {
    [v4 setAxis:1];
    [v4 setAlignment:1];
    id v5 = self;
    SearchHeaderCell.nonAXConstraints.getter();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 deactivateConstraints:isa];
  }
  else
  {
    [v4 setAxis:0];
    [v4 setAlignment:3];
    id v6 = self;
    SearchHeaderCell.nonAXConstraints.getter();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v6 activateConstraints:isa];
  }
}

void closure #1 in SearchHeaderCell.setupPinnedBlurEffect()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  char v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v1);
  id v6 = (char *)&v16 - v5;
  __chkstk_darwin(v4);
  id v8 = (char *)&v16 - v7;
  if (UIViewConfigurationState.isPinned.getter())
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v10 = (void *)Strong;
      UITableViewHeaderFooterView.backgroundConfiguration.getter();
      uint64_t v11 = type metadata accessor for UIBackgroundConfiguration();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11))
      {
        outlined init with copy of UIBackgroundConfiguration?((uint64_t)v8, (uint64_t)v6);
        UITableViewHeaderFooterView.backgroundConfiguration.setter();

        outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for UIBackgroundConfiguration?);
      }
      else
      {
        id v15 = [self effectWithStyle:10];
        UIBackgroundConfiguration.visualEffect.setter();
        UITableViewHeaderFooterView.backgroundConfiguration.setter();
      }
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v12 = swift_unknownObjectWeakLoadStrong();
    if (v12)
    {
      id v13 = (void *)v12;
      UITableViewHeaderFooterView.backgroundConfiguration.getter();
      uint64_t v14 = type metadata accessor for UIBackgroundConfiguration();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v3, 1, v14))
      {
        outlined init with copy of UIBackgroundConfiguration?((uint64_t)v3, (uint64_t)v6);
        UITableViewHeaderFooterView.backgroundConfiguration.setter();

        outlined destroy of Locale?((uint64_t)v3, &demangling cache variable for type metadata for UIBackgroundConfiguration?);
      }
      else
      {
        UIBackgroundConfiguration.visualEffect.setter();
        UITableViewHeaderFooterView.backgroundConfiguration.setter();
      }
    }
  }
}

void partial apply for closure #1 in SearchHeaderCell.setupPinnedBlurEffect()()
{
}

Swift::Void __swiftcall SearchHeaderCell.hideSeeAllButton()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllButton) setHidden:1];
}

id SearchHeaderCell.__allocating_init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [objc_allocWithZone(v2) initWithReuseIdentifier:v3];

  return v4;
}

void SearchHeaderCell.init(reuseIdentifier:)()
{
}

void specialized SearchHeaderCell.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleStackView;
  id v2 = [objc_allocWithZone((Class)UIStackView) init];
  [v2 setSpacing:0.0];
  [v2 setDistribution:3];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v0[v1] = v2;
  uint64_t v3 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_titleLabel;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllButton;
  *(void *)&v0[v4] = closure #1 in variable initialization expression of SearchHeaderCell.seeAllButton();
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell____lazy_storage___nonAXConstraints] = 0;
  uint64_t v5 = &v0[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for SearchHeaderCell()
{
  return self;
}

uint64_t sub_100194950()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sytIegr_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with copy of UIBackgroundConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIBackgroundConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

CNContact_optional __swiftcall ContactsSearchController.contactForContactViewController(identifier:)(Swift::String identifier)
{
  return ContactSearchManager.contactForContactViewController(identifier:)(identifier);
}

uint64_t ContactsSearchController.sectionTitle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MPContactsSearchController_sectionTitle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ContactsSearchController.sectionIndex.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPContactsSearchController_sectionIndex;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t ContactsSearchController.sectionIndex.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MPContactsSearchController_sectionIndex);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

uint64_t (*ContactsSearchController.sectionIndex.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t ContactsSearchController.sectionType.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___MPContactsSearchController_sectionType);
  swift_beginAccess();
  return *v1;
}

uint64_t ContactsSearchController.sectionType.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR___MPContactsSearchController_sectionType);
  uint64_t result = swift_beginAccess();
  _DWORD *v3 = a1;
  return result;
}

uint64_t (*ContactsSearchController.sectionType.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t ContactsSearchController.resultIDs.getter()
{
  return CallsSearchController.resultIDs.getter();
}

uint64_t ContactsSearchController.resultIDs.setter(uint64_t a1)
{
  return CallsSearchController.resultIDs.setter(a1, &OBJC_IVAR___MPContactsSearchController_resultIDs);
}

uint64_t (*ContactsSearchController.resultIDs.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t ContactsSearchController.results.getter()
{
  return CallsSearchController.resultIDs.getter();
}

uint64_t ContactsSearchController.results.setter(uint64_t a1)
{
  return CallsSearchController.resultIDs.setter(a1, &OBJC_IVAR___MPContactsSearchController_results);
}

uint64_t (*ContactsSearchController.results.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

UIViewController __swiftcall ContactsSearchController.viewForDetails()()
{
  return (UIViewController)*(id *)(v0 + OBJC_IVAR___MPContactsSearchController_contactsTableViewController);
}

uint64_t ContactsSearchController.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ContactsSearchController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*ContactsSearchController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPContactsSearchController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchTableViewController.suggestionsDelegate.modify;
}

uint64_t ContactsSearchController.hostingNavigationController.getter()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0
                                                             + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                              + 0x108))();
}

uint64_t ContactsSearchController.hostingNavigationController.setter()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0
                                                             + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                              + 0x110))();
}

void (*ContactsSearchController.hostingNavigationController.modify(void *a1))(uint64_t a1, char a2)
{
  id v2 = *(void **)(v1 + OBJC_IVAR___MPContactsSearchController_contactsTableViewController);
  a1[1] = v2;
  *a1 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x108))();
  return ContactsSearchController.hostingNavigationController.modify;
}

void ContactsSearchController.hostingNavigationController.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void (**)(void *))((swift_isaMask & **(void **)(a1 + 8)) + 0x110);
  if (a2)
  {
    id v4 = v2;
    v3(v2);
  }
  else
  {
    v3(*(void **)a1);
  }
}

uint64_t ContactsSearchController.__allocating_init(contactSearchType:)(unint64_t a1)
{
  id v2 = v1;
  id v4 = objc_allocWithZone(v1);
  id v5 = objc_allocWithZone((Class)CNContactStore);
  id v6 = v4;
  id v7 = [v5 init];
  id v8 = objc_allocWithZone((Class)type metadata accessor for ContactSearchManager());
  id v9 = specialized ContactSearchManager.init(type:contactStore:)(a1, v7);

  id v10 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v11 = objc_allocWithZone(v2);
  uint64_t v12 = ContactsSearchController.init(contactSearchType:searchManager:featureFlags:)(a1, v9, v10);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v12;
}

uint64_t ContactsSearchController.init(contactSearchType:)(unint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v4 = objc_allocWithZone((Class)CNContactStore);
  id v5 = v1;
  id v6 = [v4 init];
  id v7 = objc_allocWithZone((Class)type metadata accessor for ContactSearchManager());
  id v8 = specialized ContactSearchManager.init(type:contactStore:)(a1, v6);

  id v9 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v10 = objc_allocWithZone(ObjectType);
  uint64_t v11 = ContactsSearchController.init(contactSearchType:searchManager:featureFlags:)(a1, v8, v9);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v11;
}

uint64_t ContactsSearchController.__allocating_init(contactSearchType:searchManager:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return ContactsSearchController.init(contactSearchType:searchManager:featureFlags:)(a1, a2, a3);
}

uint64_t ContactsSearchController.init(contactSearchType:searchManager:featureFlags:)(unint64_t a1, void *a2, void *a3)
{
  id v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR___MPContactsSearchController_sectionIndex] = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v4[OBJC_IVAR___MPContactsSearchController_resultIDs] = _swiftEmptyArrayStorage;
  *(void *)&v4[OBJC_IVAR___MPContactsSearchController_results] = _swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit();
  id v9 = v4;
  Logger.init(subsystem:category:)();
  id v10 = &v9[OBJC_IVAR___MPContactsSearchController_searchText];
  *(void *)id v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v9[OBJC_IVAR___MPContactsSearchController_searchTokens] = _swiftEmptyArrayStorage;
  *(void *)&v9[OBJC_IVAR___MPContactsSearchController_searchManager] = a2;
  *(void *)&v9[OBJC_IVAR___MPContactsSearchController_featureFlags] = a3;
  *(void *)&v9[OBJC_IVAR___MPContactsSearchController_contactSearchType] = a1;
  objc_allocWithZone((Class)type metadata accessor for ContactSearchTableViewController());
  id v11 = a2;
  id v12 = a3;
  *(void *)&v9[OBJC_IVAR___MPContactsSearchController_contactsTableViewController] = ContactSearchTableViewController.init(contactSearchType:)(a1);
  if (a1 < 2)
  {
    id v13 = [self mainBundle];
    v38._object = (void *)0xE000000000000000;
    v14._uint64_t countAndFlagsBits = 0x53544341544E4F43;
    v14._object = (void *)0xE800000000000000;
    v15.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v15.value._object = (void *)0xE900000000000073;
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v38._uint64_t countAndFlagsBits = 0;
    Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v38);
    object = v17._object;

    uint64_t v19 = &v9[OBJC_IVAR___MPContactsSearchController_sectionTitle];
    *(void *)&v9[OBJC_IVAR___MPContactsSearchController_sectionTitle] = v17._countAndFlagsBits;
    int v20 = 4;
LABEL_7:
    *((void *)v19 + 1) = object;
    *(_DWORD *)&v9[OBJC_IVAR___MPContactsSearchController_sectionType] = v20;

    v37.receiver = v9;
    v37.super_class = ObjectType;
    uint64_t v31 = (char *)[super init];
    uint64_t v32 = *(void **)&v31[OBJC_IVAR___MPContactsSearchController_contactsTableViewController];
    id v33 = *(void (**)(char *))((swift_isaMask & *v32) + 0x128);
    BOOL v34 = v31;
    int v35 = v32;
    v33(v31);

    return (uint64_t)v34;
  }
  if (a1 == 2)
  {
    id v21 = [self mainBundle];
    v39._object = (void *)0xE000000000000000;
    v22._uint64_t countAndFlagsBits = 0x554E5F454E4F4850;
    v22._object = (void *)0xED0000535245424DLL;
    v23.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v23.value._object = (void *)0xE900000000000073;
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v39._uint64_t countAndFlagsBits = 0;
    Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v39);
    object = v25._object;

    uint64_t v19 = &v9[OBJC_IVAR___MPContactsSearchController_sectionTitle];
    *(void *)&v9[OBJC_IVAR___MPContactsSearchController_sectionTitle] = v25._countAndFlagsBits;
    int v20 = 6;
    goto LABEL_7;
  }
  if (a1 == 3)
  {
    id v26 = [self mainBundle];
    v40._object = (void *)0xE000000000000000;
    v27._uint64_t countAndFlagsBits = 0x53454D414ELL;
    v27._object = (void *)0xE500000000000000;
    v28.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v28.value._object = (void *)0xE900000000000073;
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v40._uint64_t countAndFlagsBits = 0;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v40);
    object = v30._object;

    uint64_t v19 = &v9[OBJC_IVAR___MPContactsSearchController_sectionTitle];
    *(void *)&v9[OBJC_IVAR___MPContactsSearchController_sectionTitle] = v30._countAndFlagsBits;
    int v20 = 5;
    goto LABEL_7;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t ContactsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[68] = v3;
  v4[67] = a3;
  v4[66] = a2;
  v4[65] = a1;
  type metadata accessor for AttributedString();
  v4[69] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[70] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[71] = v6;
  v4[72] = v5;
  return _swift_task_switch(ContactsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t ContactsSearchController.search(with:searchTokens:)()
{
  if (![*(id *)(*(void *)(v0 + 544) + OBJC_IVAR___MPContactsSearchController_featureFlags) callHistorySearchEnabled]|| (uint64_t v1 = *(void *)(v0 + 528)) == 0)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v0 + 544);
  uint64_t v3 = OBJC_IVAR___MPContactsSearchController_searchText;
  *(void *)(v0 + 584) = OBJC_IVAR___MPContactsSearchController_searchText;
  id v4 = (uint64_t *)(v2 + v3);
  uint64_t v5 = *(void *)(v2 + v3 + 8);
  if (v5)
  {
    BOOL v6 = v5 == v1 && *v4 == *(void *)(v0 + 520);
    if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v2 = *(void *)(v0 + 544), (v7 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 536);
      unint64_t v9 = swift_bridgeObjectRetain();
      LOBYTE(v8) = specialized static Array<A>.== infix(_:_:)(v9, v8);
      swift_bridgeObjectRelease();
      uint64_t v2 = *(void *)(v0 + 544);
      if (v8)
      {
        swift_release();
        swift_beginAccess();
        uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
        if (!Strong) {
          goto LABEL_13;
        }
        goto LABEL_69;
      }
    }
  }
  *(void *)(v2 + OBJC_IVAR___MPContactsSearchController_searchTokens) = *(void *)(v0 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (String.count.getter() <= 0)
  {
    unint64_t v13 = *(void *)(v0 + 536);
    if (v13 >> 62) {
      goto LABEL_67;
    }
    if (*(uint64_t *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
    {
LABEL_68:
      uint64_t v63 = v0 + 160;
      uint64_t v58 = *(void *)(v0 + 544);
      uint64_t v59 = *(void *)(v0 + 528);
      uint64_t v60 = *(void *)(v0 + 520);
      swift_release();
      uint64_t v61 = (void *)(v58 + OBJC_IVAR___MPContactsSearchController_results);
      swift_beginAccess();
      void *v61 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      uint64_t v62 = (void *)(v58 + OBJC_IVAR___MPContactsSearchController_resultIDs);
      swift_beginAccess();
      *uint64_t v62 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      *id v4 = v60;
      v4[1] = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
LABEL_69:
        [Strong didCompleteSearchFor:*(void *)(v0 + 544) v63];
        swift_unknownObjectRelease();
      }
LABEL_13:
      swift_task_dealloc();
      id v11 = *(uint64_t (**)(void))(v0 + 8);
      return v11();
    }
  }
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)(v0 + 544) + OBJC_IVAR___MPContactsSearchController_contactSearchType);
    if ((unint64_t)(v14 - 1) >= 3)
    {
      if (v14)
      {
        *(void *)(v0 + 504) = v14;
        return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      }
      *(_OWORD *)id v4 = *(_OWORD *)(v0 + 520);
      swift_bridgeObjectRetain();
    }
    else
    {
      NSString v15 = String._bridgeToObjectiveC()();
      id v16 = [v15 unformattedNumberInLatin];

      if (v16)
      {
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      *id v4 = v17;
      v4[1] = v19;
    }
    unint64_t v20 = *(void *)(v0 + 536);
    swift_bridgeObjectRelease();
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    *(void *)(v0 + 592) = v21;
    if (v21 < 1) {
      goto LABEL_61;
    }
    if ((v20 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v22 = *(id *)(*(void *)(v0 + 536) + 32);
      goto LABEL_32;
    }
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v57 < 1) {
      goto LABEL_68;
    }
  }
  id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_32:
  Swift::String_optional v23 = v22;
  id v24 = [v22 representedObject];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  outlined init with take of Any?(v0 + 16, v0 + 48);
  if (!*(void *)(v0 + 72))
  {
    swift_release();
    outlined destroy of Any?(v0 + 48);
LABEL_49:
    uint64_t v38 = *(void *)(v0 + 544);
    Swift::String v39 = (void *)(v38 + OBJC_IVAR___MPContactsSearchController_results);
    swift_beginAccess();
    void *v39 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    Swift::String v40 = (void *)(v38 + OBJC_IVAR___MPContactsSearchController_resultIDs);
    swift_beginAccess();
    *Swift::String v40 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    id v41 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v41)
    {
      [v41 didCompleteSearchFor:*(void *)(v0 + 544)];
      swift_unknownObjectRelease();
    }
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "ContactsSearchController: Could not extract suggestion object from search token", v44, 2u);
      swift_slowDealloc();
    }

    goto LABEL_13;
  }
  Swift::String v25 = (id *)(v0 + 496);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CSSuggestion);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    goto LABEL_49;
  }
  id v26 = *v25;
  id v27 = [*v25 currentToken];
  if (!v27 || (Swift::String_optional v28 = v27, v29 = [v27 tokenKind], v28, v29 != (id)16))
  {
    uint64_t v45 = *(void *)(v0 + 544);
    swift_release();
    id v46 = (void *)(v45 + OBJC_IVAR___MPContactsSearchController_results);
    swift_beginAccess();
    *id v46 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    uint64_t v47 = (void *)(v45 + OBJC_IVAR___MPContactsSearchController_resultIDs);
    swift_beginAccess();
    *uint64_t v47 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v48 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v48)
    {
      [v48 didCompleteSearchFor:*(void *)(v0 + 544)];
      swift_unknownObjectRelease();
    }
    BOOL v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      objc_super v37 = "ContactsSearchController: Aborting contacts search because search token doesn't contain person suggestion";
LABEL_58:
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v37, v36, 2u);
      swift_slowDealloc();
    }
LABEL_59:

    goto LABEL_13;
  }
  if (String.count.getter() >= 1)
  {
    uint64_t v30 = *(void *)(v0 + 544);
    swift_release();
    uint64_t v31 = (void *)(v30 + OBJC_IVAR___MPContactsSearchController_results);
    swift_beginAccess();
    void *v31 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)(v30 + OBJC_IVAR___MPContactsSearchController_resultIDs);
    swift_beginAccess();
    *uint64_t v32 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    id v33 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v33)
    {
      [v33 didCompleteSearchFor:*(void *)(v0 + 544)];
      swift_unknownObjectRelease();
    }
    BOOL v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      objc_super v37 = "ContactsSearchController: Aborting contacts search because both searchtoken and text are present";
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  CSSuggestion.localizedAttributedSuggestion.getter();
  uint64_t v49 = NSAttributedString.init(_:)();
  id v50 = [v49 string];

  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  *id v4 = v51;
  v4[1] = v53;
  swift_bridgeObjectRelease();
LABEL_61:
  uint64_t v54 = *v4;
  uint64_t v55 = v4[1];
  *(void *)(v0 + 600) = v55;
  swift_bridgeObjectRetain();
  uint64_t v56 = (void *)swift_task_alloc();
  *(void *)(v0 + 608) = v56;
  *uint64_t v56 = v0;
  v56[1] = ContactsSearchController.search(with:searchTokens:);
  return ContactSearchManager.search(for:shouldRefreshResult:)(v54, v55, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  void *Strong;
  uint64_t (*v36)(void);
  unint64_t v37;
  uint64_t v38;

  uint64_t v1 = *(void *)(v0 + 592);
  swift_release();
  if (v1 <= 0)
  {
    id v4 = *(void *)(v0 + 616);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 616);
    uint64_t v3 = (void **)*(id *)(v0 + 544);
    id v4 = (unint64_t)specialized _ArrayProtocol.filter(_:)(v2, v3);

    swift_bridgeObjectRelease();
  }
  objc_super v37 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  BOOL v6 = v5 & ~(v5 >> 63);
  if (v5)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v8 = 0;
    unint64_t v9 = v37;
    do
    {
      if ((v37 & 0xC000000000000001) != 0) {
        id v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v9 + 8 * v8 + 32);
      }
      id v11 = v10;
      id v12 = (*(uint64_t (**)(void))((swift_isaMask & *v10) + 0x68))();
      *(void *)(v0 + 104) = type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);

      *(void *)(v0 + 80) = v12;
      uint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      ++v8;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      outlined init with take of Any((_OWORD *)(v0 + 80), &_swiftEmptyArrayStorage[4 * v14 + 4]);
      unint64_t v9 = v37;
    }
    while (v5 != v8);
    swift_bridgeObjectRelease();
    BOOL v6 = v5 & ~(v5 >> 63);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  NSString v15 = (void *)(*(void *)(v0 + 544) + OBJC_IVAR___MPContactsSearchController_results);
  swift_beginAccess();
  *NSString v15 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    if ((v5 & 0x8000000000000000) == 0)
    {
      id v16 = 0;
      do
      {
        if ((v37 & 0xC000000000000001) != 0) {
          uint64_t v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v17 = *(id *)(v37 + 8 * v16 + 32);
        }
        uint64_t v18 = v17;
        uint64_t v19 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v17) + 0x68))();
        unint64_t v20 = [v19 identifier];

        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String_optional v23 = v22;

        Swift::String v25 = _swiftEmptyArrayStorage[2];
        id v24 = _swiftEmptyArrayStorage[3];
        if (v25 >= v24 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        }
        ++v16;
        _swiftEmptyArrayStorage[2] = v25 + 1;
        id v26 = &_swiftEmptyArrayStorage[2 * v25];
        v26[4] = v21;
        v26[5] = v23;
      }
      while (v5 != v16);
      swift_bridgeObjectRelease();
      id v27 = v37;
      goto LABEL_28;
    }
LABEL_35:
    __break(1u);
    return result;
  }
  id v27 = v37;
LABEL_28:
  Swift::String_optional v28 = *(void *)(v0 + 544);
  id v29 = (uint64_t *)(v28 + *(void *)(v0 + 584));
  uint64_t v30 = (void *)(v28 + OBJC_IVAR___MPContactsSearchController_resultIDs);
  swift_beginAccess();
  *uint64_t v30 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void **)(v28 + OBJC_IVAR___MPContactsSearchController_contactsTableViewController);
  uint64_t v32 = *v29;
  id v33 = v29[1];
  BOOL v34 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v31) + 0x140);
  swift_bridgeObjectRetain();
  v34(v32, v33);
  (*(void (**)(unint64_t))((swift_isaMask & *v31) + 0xF8))(v27);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    [Strong didCompleteSearchFor:*(void *)(v0 + 544)];
    swift_unknownObjectRelease();
  }
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    id v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 512) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ContactsSearchController: Error searching contacts: %@", v3, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  BOOL v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t ContactsSearchController.search(with:searchTokens:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[77] = a1;
  v3[78] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[72];
    uint64_t v5 = v3[71];
    BOOL v6 = ContactsSearchController.search(with:searchTokens:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = v3[72];
    uint64_t v5 = v3[71];
    BOOL v6 = ContactsSearchController.search(with:searchTokens:);
  }
  return _swift_task_switch(v6, v5, v4);
}

uint64_t @objc closure #1 in ContactsSearchController.search(with:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  void v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  void v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(@objc closure #1 in ContactsSearchController.search(with:searchTokens:), v6, v5);
}

uint64_t @objc closure #1 in ContactsSearchController.search(with:searchTokens:)()
{
  uint64_t v1 = (const void *)v0[4];
  uint64_t v2 = v0[2];
  swift_release();
  v0[7] = _Block_copy(v1);
  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  v0[8] = v2;
  uint64_t v5 = (void *)v0[5];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[9] = v6;
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = @objc closure #1 in CallsSearchController.search(with:searchTokens:);
  return ContactsSearchController.search(with:searchTokens:)(v3, v2, v6);
}

Swift::Void __swiftcall ContactsSearchController.cancelPreviousSearchRequests()()
{
  if ([*(id *)(v0 + OBJC_IVAR___MPContactsSearchController_featureFlags) callHistorySearchEnabled])
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "ContactsSearchController: cancelling previous search requests", v3, 2u);
      swift_slowDealloc();
    }

    ContactSearchManager.cancelPreviousSearch()();
  }
}

Swift::Void __swiftcall ContactsSearchController.registerCell(with:)(UITableView with)
{
  type metadata accessor for ContactSearchViewCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = String._bridgeToObjectiveC()();
  [(objc_class *)with.super.super.super.super.isa registerClass:ObjCClassFromMetadata forCellReuseIdentifier:v3];
}

void ContactsSearchController.tableView(_:didSelectRowAt:)(void *a1)
{
  (*(void (**)(void))((swift_isaMask & **(void **)(v1
                                                   + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                    + 0x1A0))();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  [a1 deselectRowAtIndexPath:isa animated:0];
}

uint64_t ContactsSearchController.tableView(_:cellForRowAt:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0
                                                             + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                              + 0x198))();
}

Swift::Int __swiftcall ContactsSearchController.numberOfRowsInConsolidatedView()()
{
  uint64_t v1 = v0 + OBJC_IVAR___MPContactsSearchController_results;
  swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16) >= 5uLL) {
    return 5;
  }
  else {
    return *(void *)(*(void *)v1 + 16);
  }
}

Swift::Void __swiftcall ContactsSearchController.highlightMatchedText(in:)(UITableViewCell in)
{
  (*(void (**)(Class))((swift_isaMask & **(void **)(v1
                                                               + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                                + 0x1A8))(in.super.super.super.isa);
}

uint64_t ContactsSearchController.configure(cardController:presentationResultForIndex:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0
                                                             + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                              + 0x1C8))();
}

void ContactsSearchController.init()()
{
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, void **a2)
{
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (void **)((char *)a2 + OBJC_IVAR___MPContactsSearchController_searchText);
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
        uint64_t v8 = v7;
        unint64_t v9 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_27;
        }
        uint64_t v10 = v4;
        a2 = (void **)(*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x68))();
        id v11 = [a2 displayName];

        if (v11)
        {
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          a2 = v13;

          uint64_t v14 = (void **)v6[1];
          uint64_t v4 = v10;
          if (a2)
          {
            if (!v14)
            {

              swift_bridgeObjectRelease();
              goto LABEL_6;
            }
            if (v12 == *v6 && v14 == a2)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v16 & 1) == 0) {
                goto LABEL_22;
              }
            }
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v14 = (void **)v6[1];
          uint64_t v4 = v10;
        }
        if (v14)
        {
LABEL_22:

          goto LABEL_6;
        }
LABEL_5:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        a2 = &v18;
        specialized ContiguousArray._endMutation()();
LABEL_6:
        ++v5;
        if (v9 == v4) {
          return v18;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v7 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100197F84@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_100197FDC()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_100198034@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*a1
                                                               + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                                + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_1001980A4(id *a1, void *a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((swift_isaMask & **(void **)(*a2
                                                                   + OBJC_IVAR___MPContactsSearchController_contactsTableViewController))
                                    + 0x110);
  id v4 = *a1;
  return v3(v2);
}

uint64_t ObjC metadata update function for ContactsSearchController()
{
  return type metadata accessor for ContactsSearchController();
}

uint64_t type metadata accessor for ContactsSearchController()
{
  uint64_t result = type metadata singleton initialization cache for ContactsSearchController;
  if (!type metadata singleton initialization cache for ContactsSearchController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactsSearchController()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100198268()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in ContactsSearchController.search(with:searchTokens:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  id v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in ContactsSearchController.search(with:searchTokens:)
                                                                  + async function pointer to @objc closure #1 in ContactsSearchController.search(with:searchTokens:));
  return v7(v2, v3, v5, v4);
}

uint64_t VVMVoicemailCountSource.__allocating_init(voicemailManager:voicemailStatus:)(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a2, v9);
  uint64_t v12 = specialized VVMVoicemailCountSource.__allocating_init(voicemailManager:voicemailStatus:)(v8, v11, v2, v5, v9, v6, v7, v10);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v12;
}

uint64_t VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)((uint64_t)v11, (uint64_t)v17, v3, v7, v13, v6, v8, v14);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v19;
}

uint64_t closure #1 in VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "badge should be updated becuase VVM was updated", v4, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(void))(*(void *)v1 + 192))();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    Subject<>.send()();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t VVMVoicemailCountSource.listen(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for VoicemailActor();
  swift_retain();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v10 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = inited;
  v11[3] = v10;
  v11[4] = v2;
  v11[5] = a1;
  v11[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in VVMVoicemailCountSource.listen(_:), (uint64_t)v11);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t closure #1 in VVMVoicemailCountSource.listen(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>);
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>.Iterator);
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  v6[13] = type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  v6[14] = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[15] = v10;
  v6[16] = v9;
  return _swift_task_switch(closure #1 in VVMVoicemailCountSource.listen(_:), v10, v9);
}

uint64_t closure #1 in VVMVoicemailCountSource.listen(_:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  v0[2] = *(void *)(v0[4] + OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_countChangedPublisher);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Publisher<>.values.getter();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[17] = swift_initStaticObject();
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in VVMVoicemailCountSource.listen(_:);
  uint64_t v6 = v0[10];
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 21, v6, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(v2 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = closure #1 in VVMVoicemailCountSource.listen(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = closure #1 in VVMVoicemailCountSource.listen(_:);
  }
  return _swift_task_switch(v7, v4, v6);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 169) = *(unsigned char *)(v0 + 168);
  return _swift_task_switch(closure #1 in VVMVoicemailCountSource.listen(_:), *(void *)(v0 + 120), *(void *)(v0 + 128));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v5;

  if (*(unsigned char *)(v0 + 169) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))(*(void *)(v0 + 40) + **(int **)(v0 + 40));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    uint8_t *v3 = v0;
    v3[1] = closure #1 in VVMVoicemailCountSource.listen(_:);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 24) = *(void *)(v0 + 152);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>.Iterator);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in VVMVoicemailCountSource.listen(_:);
  uint64_t v5 = *(void *)(v1 + 80);
  return dispatch thunk of AsyncIteratorProtocol.next()(v1 + 168, v5, v3);
}

Swift::Void __swiftcall VVMVoicemailCountSource.invalidateBadge()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_count;
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = -1;
}

uint64_t VVMVoicemailCountSource.unreadVoicemailsCount()()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(VVMVoicemailCountSource.unreadVoicemailsCount(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_count;
  v0[3] = OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_count;
  uint64_t v3 = (char *)v1 + v2;
  uint64_t v4 = v3[8];
  if (v4 == 255)
  {
    uint64_t v8 = v1[5];
    uint64_t v9 = v1[6];
    __swift_project_boxed_opaque_existential_0(v1 + 2, v8);
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v9 + 8) + **(int **)(v9 + 8));
    uint64_t v10 = (void *)swift_task_alloc();
    v0[4] = v10;
    *uint64_t v10 = v0;
    v10[1] = VVMVoicemailCountSource.unreadVoicemailsCount();
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    uint64_t v7 = v12;
  }
  else
  {
    uint64_t v5 = *(void *)v3;
    uint64_t v6 = v4 & 1;
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  }
  return v7(v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + v0[3];
  *(void *)uint64_t v2 = v0[5];
  *(unsigned char *)(v2 + 8) = 0;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 208))();
  uint64_t v5 = v4 & 1;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v6(v3, v5);
}

uint64_t VVMVoicemailCountSource.unreadVoicemailsCount()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(VVMVoicemailCountSource.unreadVoicemailsCount(), 0, 0);
}

uint64_t VVMVoicemailCountSource.isKnown(for:)(uint64_t a1)
{
  uint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  __swift_project_boxed_opaque_existential_0(v1 + 8, v3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4) & 1) == 0)
  {
    uint64_t v5 = v1[11];
    uint64_t v6 = v1[12];
    __swift_project_boxed_opaque_existential_0(v1 + 8, v5);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6))
    {
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "badge is unknown because VVM is offline and there is a message waiting.", v9, 2u);
        swift_slowDealloc();
      }
    }
  }
  return a1;
}

uint64_t VVMVoicemailCountSource.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t VVMVoicemailCountSource.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for VoicemailBadgeCalculatorVoicemailSource.unreadVoicemailsCount() in conformance VVMVoicemailCountSource()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 200) + **(int **)(**(void **)v0 + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for VoicemailBadgeCalculatorVoicemailSource.unreadVoicemailsCount() in conformance VVMVoicemailCountSource;
  return v4();
}

uint64_t protocol witness for VoicemailBadgeCalculatorVoicemailSource.unreadVoicemailsCount() in conformance VVMVoicemailCountSource(uint64_t a1, char a2)
{
  uint64_t v7 = *v2;
  uint64_t v4 = a2 & 1;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, v4);
}

uint64_t protocol witness for VoicemailBadgeCalculatorVoicemailSource.listen(_:) in conformance VVMVoicemailCountSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t specialized VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v26[3] = a4;
  v26[4] = a6;
  v26[5] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v25[3] = a5;
  v25[4] = a8;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v16, a2, a5);
  uint64_t v17 = OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_logger;
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a3 + v17, v19, v18);
  *(void *)(a3 + OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_cancellables) = _swiftEmptyArrayStorage;
  uint64_t v20 = a3 + OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_count;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = -1;
  uint64_t v21 = OBJC_IVAR____TtC11MobilePhone23VVMVoicemailCountSource_countChangedPublisher;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)(a3 + v21) = PassthroughSubject.init()();
  outlined init with copy of VoicemailManager_UnreadCount & Voicemailmanager_ChangeCallback & Sendable((uint64_t)v26, a3 + 16);
  outlined init with copy of Tip((uint64_t)v25, a3 + 64);
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  Swift::String_optional v23 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(a7 + 8);
  swift_retain();
  v23(partial apply for closure #1 in VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:), v22, a4, a7);
  swift_release_n();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], &demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
  return a3;
}

uint64_t specialized VVMVoicemailCountSource.__allocating_init(voicemailManager:voicemailStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = __chkstk_darwin(a1);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VVMVoicemailCountSource();
  uint64_t v21 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, a5);
  return specialized VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)((uint64_t)v20, (uint64_t)v16, v21, a4, a5, a6, v23, v24);
}

uint64_t sub_100199D30()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in VVMVoicemailCountSource.listen(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in VVMVoicemailCountSource.listen(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t ObjC metadata update function for VVMVoicemailCountSource()
{
  return type metadata accessor for VVMVoicemailCountSource();
}

uint64_t type metadata accessor for VVMVoicemailCountSource()
{
  uint64_t result = type metadata singleton initialization cache for VVMVoicemailCountSource;
  if (!type metadata singleton initialization cache for VVMVoicemailCountSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for VVMVoicemailCountSource()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined init with copy of VoicemailManager_UnreadCount & Voicemailmanager_ChangeCallback & Sendable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100199FC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)()
{
  return closure #1 in VVMVoicemailCountSource.init(voicemailManager:voicemailStatus:)();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of Locale?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void (*SearchTableViewDiffableDataSource.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return SearchTableViewDiffableDataSource.delegate.modify;
}

void SearchTableViewDiffableDataSource.delegate.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  *(void *)((char *)(*a1)[6] + (void)(*a1)[5] + 8) = (*a1)[4];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t closure #1 in closure #1 in SearchTableViewDiffableDataSource.datasource.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = IndexPath.section.getter();
  uint64_t v7 = *(uint64_t (**)(void))((swift_isaMask & *a4) + 0x188);
  unint64_t v8 = v7();
  if (v8 >> 62) {
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v6 >= v9)
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SearchTableDataSource: Asked to provide cell for section we don't have!", v17, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  unint64_t v10 = IndexPath.section.getter();
  uint64_t result = v7();
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v12 = *(void **)(result + 8 * v10 + 32);
    swift_unknownObjectRetain();
LABEL_8:
    swift_bridgeObjectRelease();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v14 = [v12 tableView:a1 cellForRowAtIndexPath:isa];
    swift_unknownObjectRelease();

    return (uint64_t)v14;
  }
  __break(1u);
  return result;
}

uint64_t SearchTableViewDiffableDataSource.searchControllers.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchControllers);
  swift_beginAccess();
  uint64_t *v3 = a1;
  swift_bridgeObjectRelease();
  uint64_t v4 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v5 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        unint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t v8 = *(void **)(v4 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v8 setDelegate:v1];
      [v8 setSectionIndex:i];
      swift_unknownObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void (*SearchTableViewDiffableDataSource.searchControllers.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchControllers;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return SearchTableViewDiffableDataSource.searchControllers.modify;
}

void SearchTableViewDiffableDataSource.searchControllers.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    unint64_t v4 = *(void *)(v3[3] + v3[4]);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
          {
            uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v7 = *(void **)(v4 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          [v7 setDelegate:v3[3]];
          [v7 setSectionIndex:i];
          swift_unknownObjectRelease();
        }
      }
    }
    swift_bridgeObjectRelease();
  }

  free(v3);
}

uint64_t key path setter for SearchTableViewDiffableDataSource.searchControllersWithResults : SearchTableViewDiffableDataSource(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchControllersWithResults);
  swift_beginAccess();
  void *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void *SearchTableViewDiffableDataSource.__allocating_init(tableView:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SearchTableViewDiffableDataSource.init(tableView:)(a1);
}

Swift::Void __swiftcall SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(Swift::String_optional a1, Swift::OpaquePointer searchTokens)
{
  id v3 = v2;
  object = a1.value._object;
  uint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = (uint64_t *)&v2[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_text];
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_text + 8];
  if (object)
  {
    if (!v11) {
      goto LABEL_16;
    }
    BOOL v12 = *v10 == countAndFlagsBits && v11 == object;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if (v11)
  {
LABEL_16:
    *unint64_t v10 = countAndFlagsBits;
    v10[1] = (uint64_t)object;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(Swift::OpaquePointer *)&v2[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchTokens] = searchTokens;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = &v2[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchCompleteControllerSet];
    swift_beginAccess();
    *(void *)uint64_t v18 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "SearchTableDataSource: Setting new search task", v21, 2u);
      swift_slowDealloc();
    }

    id v22 = [objc_allocWithZone((Class)NSDate) init];
    uint64_t v23 = *(void **)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_lastSearchStartTime];
    *(void *)&v3[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_lastSearchStartTime] = v22;

    static TaskPriority.userInitiated.getter();
    uint64_t v24 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v9, 0, 1, v24);
    type metadata accessor for MainActor();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v25 = v3;
    uint64_t v26 = static MainActor.shared.getter();
    id v27 = (Swift::OpaquePointer *)swift_allocObject();
    v27[2]._rawValue = (void *)v26;
    v27[3]._rawValue = &protocol witness table for MainActor;
    v27[4]._rawValue = v25;
    v27[5]._rawValue = (void *)countAndFlagsBits;
    v27[6]._rawValue = object;
    v27[7]._rawValue = searchTokens._rawValue;
    uint64_t v28 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), (uint64_t)v27);
    uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchTask];
    *(void *)&v25[OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchTask] = v28;
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "SearchTableDataSource: Cancelling old search task", v32, 2u);
      swift_slowDealloc();
    }

    if (v29)
    {
      Task.cancel()();
      swift_release();
    }
    swift_release();
    return;
  }
  unint64_t v13 = swift_bridgeObjectRetain();
  unsigned __int8 v14 = specialized static Array<A>.== infix(_:_:)(v13, (uint64_t)searchTokens._rawValue);
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0) {
    goto LABEL_16;
  }
  os_log_t v33 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v15, "SearchTableDataSource: Aborting new search as text and tokens unchanged", v16, 2u);
    swift_slowDealloc();
  }
  os_log_t v17 = v33;
}

uint64_t closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  v7[7] = type metadata accessor for MainActor();
  v7[8] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[9] = v9;
  v7[10] = v8;
  return _swift_task_switch(closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), v9, v8);
}

uint64_t closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = static MainActor.shared.getter();
  *(void *)(v0 + 88) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *(_OWORD *)(v4 + 16) = v8;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:);
  uint64_t v6 = *(void *)(v0 + 16);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v6, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v3, &protocol witness table for MainActor, &async function pointer to partial apply for closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), v4, (char *)&type metadata for () + 8);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[16] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), v8, v7);
}

uint64_t closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = swift_release();
  unint64_t v3 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x170))(v2);
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (!result) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t result = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!result) {
      goto LABEL_18;
    }
  }
  if (result < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  unint64_t v24 = v4 & 0xC000000000000001;
  uint64_t v25 = result;
  unint64_t v26 = v4;
  do
  {
    uint64_t v28 = v6;
    if (v24)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v8 = *(void *)(v4 + 8 * v6 + 32);
      swift_unknownObjectRetain();
    }
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v13 = type metadata accessor for TaskPriority();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v10, 1, 1, v13);
    os_log_type_t v15 = (void *)swift_allocObject();
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = v8;
    v15[5] = v12;
    v15[6] = v27;
    v15[7] = v11;
    outlined init with copy of TaskPriority?(v10, v9);
    LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = *(void *)(v0 + 112);
    if (v9 == 1)
    {
      outlined destroy of Locale?(*(void *)(v0 + 112), &demangling cache variable for type metadata for TaskPriority?);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
    }
    if (v15[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v19 = v18;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v20 = **(void **)(v0 + 72);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:);
    *(void *)(v21 + 24) = v15;
    uint64_t v22 = v19 | v17;
    if (v19 | v17)
    {
      uint64_t v22 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v17;
      *(void *)(v0 + 40) = v19;
    }
    uint64_t v6 = v28 + 1;
    uint64_t v7 = *(void *)(v0 + 120);
    *(void *)(v0 + 48) = 1;
    *(void *)(v0 + 56) = v22;
    *(void *)(v0 + 64) = v20;
    swift_task_create();
    swift_unknownObjectRelease();
    swift_release();
    outlined destroy of Locale?(v7, &demangling cache variable for type metadata for TaskPriority?);
    unint64_t v4 = v26;
  }
  while (v25 != v28 + 1);
LABEL_18:
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  return _swift_task_switch(closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 152) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 120);
  swift_release();
  [v1 cancelPreviousSearchRequests];
  return _swift_task_switch(closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), 0, 0);
}

{
  void *v0;
  NSString v1;
  void *v2;
  Class isa;
  uint64_t v4;
  uint64_t v6;

  if (v0[17]) {
    uint64_t v1 = String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v1 = 0;
  }
  v0[20] = v1;
  uint64_t v2 = (void *)v0[15];
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[21] = isa;
  v0[2] = v0;
  v0[3] = closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:);
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) () -> () with result type ();
  v0[13] = &block_descriptor_15;
  v0[14] = v4;
  [v2 searchWith:v1 searchTokens:isa completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t v1;

  return _swift_task_switch(closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 160);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) () -> () with result type ()(uint64_t a1)
{
  return _swift_continuation_resume(*(void *)(a1 + 32));
}

uint64_t SearchTableViewDiffableDataSource.didCompleteSearch(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4 - 8);
  uint64_t v45 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDiffableDataSourceSnapshot<String, String>);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  id v46 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a1 sectionTitle];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v12 = (char *)v2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_logger;
  swift_bridgeObjectRetain_n();
  uint64_t v49 = v12;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v15 = 136315138;
    swift_bridgeObjectRetain();
    Swift::Int v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "SearchTableDataSource: Search completed for controller of section: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v16 = (char *)v2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchCompleteControllerSet;
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v51, v9, v11);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)static SearchMetrics.shared;
  id v18 = [a1 sectionType];
  uint64_t v19 = *(void **)((char *)v2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_lastSearchStartTime);
  if (*(void *)((char *)v2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_text + 8))
  {
    id v20 = v19;
    swift_bridgeObjectRetain();
    uint64_t v21 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v20 = v19;
    uint64_t v21 = -1;
  }
  id v22 = [a1 results];
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = *(void *)(v23 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(id, void *, uint64_t, uint64_t))((swift_isaMask & *v17) + 0xF0))(v18, v19, v21, v24);

  uint64_t v25 = *(void *)(*(void *)v16 + 16);
  unint64_t v26 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x170))();
  if (v26 >> 62) {
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v25 == v27
    || (id v28 = SearchTableViewDiffableDataSource.datasource.getter(),
        uint64_t v29 = v46,
        dispatch thunk of UITableViewDiffableDataSource.snapshot()(),
        v28,
        uint64_t v30 = v48,
        uint64_t v31 = NSDiffableDataSourceSnapshot.numberOfItems.getter(),
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v29, v30),
        !v31))
  {
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "SearchTableDataSource: All controllers completed search. Reloading tableView", v44, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1D0))();
  }
  else
  {
    uint64_t v33 = OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableViewReloadTask;
    if (!*(void *)((char *)v2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_tableViewReloadTask))
    {
      BOOL v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "SearchTableDataSource: Not all controllers completed search. Delaying tableView reload", v36, 2u);
        swift_slowDealloc();
      }

      uint64_t v37 = type metadata accessor for TaskPriority();
      uint64_t v38 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v45, 1, 1, v37);
      uint64_t v39 = swift_allocObject();
      swift_unknownObjectWeakInit();
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v40 = static MainActor.shared.getter();
      id v41 = (void *)swift_allocObject();
      v41[2] = v40;
      v41[3] = &protocol witness table for MainActor;
      v41[4] = v39;
      swift_release();
      *(void *)((char *)v2 + v33) = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v38, (uint64_t)&async function pointer to partial apply for closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:), (uint64_t)v41);
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  void v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v7;
  v4[11] = v6;
  return _swift_task_switch(closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:), v7, v6);
}

uint64_t closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:)()
{
  ContinuousClock.init()();
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:);
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v7 = *(void *)(v2 + 80);
  if (v0) {
    id v8 = closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:);
  }
  else {
    id v8 = closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:);
  }
  return _swift_task_switch(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 104);
  swift_release();
  static Task<>.checkCancellation()();
  if (!v1)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v3 = Strong;
      (*(void (**)(void))((swift_isaMask & *Strong) + 0x1D0))();
    }
  }
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in SearchTableViewDiffableDataSource.createSnapshot()(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)(a2 + OBJC_IVAR____TtC11MobilePhone33SearchTableViewDiffableDataSource_searchCompleteControllerSet);
  swift_beginAccess();
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  id v7 = [v4 sectionTitle];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  LOBYTE(v7) = specialized Set.contains(_:)(v8, v10, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    BOOL v34 = a3;
    id v11 = [v4 results];
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = *(void *)(v12 + 16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain_n();
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    if (v13)
    {
      if (v16)
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        id v18 = [v4 sectionTitle];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v21 = v20;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "SearchTableDataSource: adding %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_unknownObjectRelease_n();
      }

      *BOOL v34 = v4;
      swift_unknownObjectRetain();
    }
    else
    {
      if (v16)
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315138;
        id v30 = [v4 sectionTitle];
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v33 = v32;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "SearchTableDataSource: %s has no results", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_unknownObjectRelease_n();
      }

      *BOOL v34 = 0;
    }
  }
  else
  {
    swift_unknownObjectRetain_n();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      id v25 = [v4 sectionTitle];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "SearchTableDataSource: %s has not completed", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    *a3 = 0;
  }
}

void SearchTableViewDiffableDataSource.init()()
{
}

id SearchTableViewDiffableDataSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchTableViewDiffableDataSource();
  return [super dealloc];
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, void **__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  uint64_t v5 = (char *)__src - (char *)a1;
  uint64_t v6 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v6 = (char *)__src - (char *)a1;
  }
  uint64_t v7 = v6 >> 3;
  uint64_t v8 = a3 - (void)__src;
  uint64_t v9 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v9 = a3 - (void)__src;
  }
  uint64_t v10 = v9 >> 3;
  BOOL v34 = a1;
  unint64_t v33 = (void **)a4;
  if (v7 >= v9 >> 3)
  {
    if (v8 >= -7)
    {
      if (a4 != (char *)__src || &__src[v10] <= (void **)a4) {
        memmove(a4, __src, 8 * v10);
      }
      uint64_t v19 = &a4[8 * v10];
      unint64_t v32 = v19;
      BOOL v34 = v4;
      if (a1 < v4 && v8 >= 8)
      {
        unint64_t v20 = (void **)(a3 - 8);
        unint64_t v21 = v4;
        do
        {
          uint64_t v31 = v4;
          id v22 = v20 + 1;
          os_log_type_t v23 = (void *)*((void *)v19 - 1);
          uint64_t v24 = *--v21;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v25 = [v23 sectionIndex];
          id v26 = [v24 sectionIndex];
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if ((uint64_t)v25 >= (uint64_t)v26)
          {
            unint64_t v32 = v19 - 8;
            if (v22 < (void **)v19 || v20 >= (void **)v19 || v22 != (void **)v19) {
              *unint64_t v20 = (void *)*((void *)v19 - 1);
            }
            unint64_t v21 = v31;
            v19 -= 8;
          }
          else
          {
            if (v22 != v31 || v20 >= v31) {
              *unint64_t v20 = *v21;
            }
            BOOL v34 = v21;
          }
          if (v21 <= a1) {
            break;
          }
          --v20;
          uint64_t v4 = v21;
        }
        while (v19 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v5 >= -7)
  {
    if (a4 != (char *)a1 || &a1[v7] <= (void **)a4) {
      memmove(a4, a1, 8 * v7);
    }
    id v11 = (void **)&a4[8 * v7];
    unint64_t v32 = (char *)v11;
    if ((unint64_t)v4 < a3 && v5 >= 8)
    {
      uint64_t v12 = (void **)a4;
      uint64_t v13 = a1;
      do
      {
        os_log_type_t v14 = *v4;
        os_log_type_t v15 = *v12;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        id v16 = [v14 sectionIndex];
        id v17 = [v15 sectionIndex];
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if ((uint64_t)v16 >= (uint64_t)v17)
        {
          if (v13 != v12) {
            *uint64_t v13 = *v12;
          }
          unint64_t v33 = ++v12;
          id v18 = v4;
        }
        else
        {
          id v18 = v4 + 1;
          if (v13 < v4 || v13 >= v18 || v13 != v4) {
            *uint64_t v13 = *v4;
          }
        }
        ++v13;
        if (v12 >= v11) {
          break;
        }
        uint64_t v4 = v18;
      }
      while ((unint64_t)v18 < a3);
      BOOL v34 = v13;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v34, (const void **)&v33, &v32);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  os_log_type_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10019D260()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10019D384()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019D3BC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in SearchTableViewDiffableDataSource.didCompleteSearch(for:)(a1, v4, v5, v6);
}

uint64_t sub_10019D4B0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xF8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10019D50C(uint64_t a1, void **a2)
{
  id v2 = *(id *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(id, uint64_t))((swift_isaMask & **a2) + 0x100);
  id v5 = *(id *)a1;
  return v4(v2, v3);
}

uint64_t sub_10019D588@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x170))();
  *a2 = result;
  return result;
}

uint64_t sub_10019D5EC(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x178);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10019D658@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x188))();
  *a2 = result;
  return result;
}

uint64_t ObjC metadata update function for SearchTableViewDiffableDataSource()
{
  return type metadata accessor for SearchTableViewDiffableDataSource();
}

uint64_t sub_10019D6C8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in SearchTableViewDiffableDataSource.datasource.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in closure #1 in SearchTableViewDiffableDataSource.datasource.getter(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_10019D7D0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:)()
{
  long long v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  *(void *)(v4 + 136) = v2;
  *(void *)(v4 + 144) = v3;
  *(_OWORD *)(v4 + 120) = v6;
  return _swift_task_switch(closure #1 in closure #1 in closure #1 in SearchTableViewDiffableDataSource.updateSearchResults(for:searchTokens:), 0, 0);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D94C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  long long v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t PHCFNotificationCenterObserver.__allocating_init(notificationName:onNotify:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  PHCFNotificationCenterObserver.init(notificationName:onNotify:)(a1, a2, a3, a4);
  return v8;
}

uint64_t PHCFNotificationCenterObserver.ObserverKey.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t PHCFNotificationCenterObserver.key.getter()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PHCFNotificationCenterObserver.ObserverKey<PHCFNotificationCenterObserver>);
    uint64_t v1 = swift_allocObject();
    swift_weakInit();
    swift_weakAssign();
    *(void *)(v0 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *PHCFNotificationCenterObserver.init(notificationName:onNotify:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = 0;
  v4[3] = a3;
  v4[4] = a4;
  swift_retain();
  id v5 = CFNotificationCenterGetDarwinNotifyCenter();
  long long v6 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v8 = PHCFNotificationCenterObserver.key.getter();
  CFNotificationCenterAddObserver(v5, &v8, (CFNotificationCallback)@objc closure #1 in PHCFNotificationCenterObserver.init(notificationName:onNotify:), v6, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  swift_release();
  swift_release();
  return v4;
}

uint64_t @objc closure #1 in PHCFNotificationCenterObserver.init(notificationName:onNotify:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in PHCFNotificationCenterObserver.init(notificationName:onNotify:)(a2);
}

uint64_t PHCFNotificationCenterObserver.deinit()
{
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v3 = PHCFNotificationCenterObserver.key.getter();
  CFNotificationCenterRemoveEveryObserver(v1, &v3);

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t PHCFNotificationCenterObserver.__deallocating_deinit()
{
  uint64_t v0 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v2 = PHCFNotificationCenterObserver.key.getter();
  CFNotificationCenterRemoveEveryObserver(v0, &v2);

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PHCFNotificationCenterObserver()
{
  return self;
}

uint64_t type metadata completion function for PHCFNotificationCenterObserver.ObserverKey()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PHCFNotificationCenterObserver.ObserverKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized closure #1 in PHCFNotificationCenterObserver.init(notificationName:onNotify:)(uint64_t result)
{
  if (result)
  {
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v1 = *(void (**)(uint64_t))(result + 24);
      swift_retain();
      swift_retain();
      uint64_t v2 = swift_release();
      v1(v2);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t RecentCallIconView.init(iconType:)(uint64_t a1)
{
  id v2 = [self tertiaryLabelColor];
  Color.init(_:)();
  return a1;
}

_UNKNOWN **static RecentCallIconView.IconType.allCases.getter()
{
  return &outlined read-only object #0 of static RecentCallIconView.IconType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance RecentCallIconView.IconType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance RecentCallIconView.IconType;
}

uint64_t RecentCallIconView.foregroundColor.getter()
{
  return swift_retain();
}

uint64_t RecentCallIconView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = a1;
  uint64_t v7 = type metadata accessor for RecentCallIconView.HorizontallyCenteredAndPadded();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (void *)((char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v6) {
    goto LABEL_4;
  }
  RecentCallIconView.IconType.symbolDescription.getter(a1, v16);
  uint64_t result = outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)v16, (uint64_t)v17, &demangling cache variable for type metadata for SymbolDescription?);
  if (*((void *)&v17[0] + 1))
  {
    long long v19 = v17[0];
    long long v20 = v17[1];
    uint64_t v21 = v18;
    uint64_t v11 = specialized Image.init(symbolDescription:)(&v19);
    long long v22 = v19;
    outlined release of String((uint64_t)&v22);
    id v23 = (id)*((void *)&v20 + 1);
    outlined release of UIFontTextStyle(&v23);
    outlined init with take of ModifiedContent<RecentCallView.TitleAndCountView, _TraitWritingModifier<PreviewLayoutTraitKey>>((uint64_t)&v21, (uint64_t)&v24, &demangling cache variable for type metadata for UIContentSizeCategory?);
    outlined release of UIFontTextStyle(&v24);
    uint64_t KeyPath = swift_getKeyPath();
    v15[1] = v11;
    v15[2] = KeyPath;
    v15[3] = a2;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
LABEL_4:
    uint64_t v13 = AnyView.init<A>(_:)();
    *uint64_t v9 = swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AnyView, RecentCallIconView.HorizontallyCenteredAndPadded>);
    uint64_t result = outlined init with take of RecentCallIconView.HorizontallyCenteredAndPadded((uint64_t)v9, (uint64_t)a3 + *(int *)(v14 + 36));
    *a3 = v13;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RecentCallIconView.HorizontallyCenteredAndPadded()
{
  uint64_t result = type metadata singleton initialization cache for RecentCallIconView.HorizontallyCenteredAndPadded;
  if (!type metadata singleton initialization cache for RecentCallIconView.HorizontallyCenteredAndPadded) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t RecentCallIconView.IconType.symbolDescription.getter@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = result;
  unint64_t v4 = result;
  unint64_t v5 = result;
  unint64_t v6 = result;
  unint64_t v7 = result;
  switch((char)result)
  {
    case 1:
      uint64_t v10 = &type metadata for SymbolDescribers.Recents;
      uint64_t v11 = &protocol witness table for SymbolDescribers.Recents;
      LOBYTE(v9[0]) = 0;
      goto LABEL_7;
    case 2:
      uint64_t v10 = &type metadata for SymbolDescribers.Recents;
      uint64_t v11 = &protocol witness table for SymbolDescribers.Recents;
      char v8 = 1;
      goto LABEL_6;
    case 3:
      uint64_t v10 = &type metadata for SymbolDescribers.Recents;
      uint64_t v11 = &protocol witness table for SymbolDescribers.Recents;
      char v8 = 2;
      goto LABEL_6;
    case 4:
      uint64_t v10 = &type metadata for SymbolDescribers.Recents;
      uint64_t v11 = &protocol witness table for SymbolDescribers.Recents;
      char v8 = 3;
LABEL_6:
      LOBYTE(v9[0]) = v8;
LABEL_7:
      __swift_project_boxed_opaque_existential_0(v9, (uint64_t)&type metadata for SymbolDescribers.Recents);
      protocol witness for SymbolDescriber.description.getter in conformance SymbolDescribers.Recents(v12);
      unint64_t v2 = v12[0];
      unint64_t v4 = v12[1];
      unint64_t v5 = v12[2];
      unint64_t v6 = v12[3];
      unint64_t v7 = v12[4];
      uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
      break;
    default:
      break;
  }
  *a2 = v2;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  return result;
}

uint64_t RecentCallIconView.HorizontallyCenteredAndPadded.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v27 = a2;
  uint64_t v26 = type metadata accessor for ContentSizeCategory();
  uint64_t v25 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = static VerticalAlignment.center.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  uint64_t v14 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>)
                    + 44)];
  os_log_type_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, v24, v4);
  v15(v8, (uint64_t)v10, v4);
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer));
  v15(&v14[*(int *)(v16 + 48)], (uint64_t)v8, v4);
  id v17 = &v14[*(int *)(v16 + 64)];
  *(void *)id v17 = 0;
  v17[8] = 1;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v10, v4);
  v18(v8, v4);
  specialized Environment.wrappedValue.getter((uint64_t)v3);
  specialized static RecentCallIconView.WidthCalculator.idealWidth(for:)((uint64_t)v3);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v3, v26);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v19 = v27;
  outlined init with copy of (String, Any)((uint64_t)v13, v27, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>);
  long long v20 = (_OWORD *)(v19
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>, _FrameLayout>)
                          + 36));
  long long v21 = v29;
  *long long v20 = v28;
  v20[1] = v21;
  void v20[2] = v30;
  return outlined destroy of Locale?((uint64_t)v13, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>);
}

uint64_t one-time initialization function for lastMeasuredContentSizeCategory()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContentSizeCategory?);
  __swift_allocate_value_buffer(v0, static RecentCallIconView.WidthCalculator.lastMeasuredContentSizeCategory);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static RecentCallIconView.WidthCalculator.lastMeasuredContentSizeCategory);
  uint64_t v2 = type metadata accessor for ContentSizeCategory();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t protocol witness for View.body.getter in conformance RecentCallIconView@<X0>(uint64_t *a1@<X8>)
{
  return RecentCallIconView.body.getter(*v1, *((void *)v1 + 1), a1);
}

uint64_t outlined init with take of RecentCallIconView.HorizontallyCenteredAndPadded(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecentCallIconView.HorizontallyCenteredAndPadded();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RecentCallIconView.IconType and conformance RecentCallIconView.IconType()
{
  unint64_t result = lazy protocol witness table cache variable for type RecentCallIconView.IconType and conformance RecentCallIconView.IconType;
  if (!lazy protocol witness table cache variable for type RecentCallIconView.IconType and conformance RecentCallIconView.IconType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecentCallIconView.IconType and conformance RecentCallIconView.IconType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RecentCallIconView.IconType()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [RecentCallIconView.IconType] and conformance [A], &demangling cache variable for type metadata for [RecentCallIconView.IconType]);
}

uint64_t associated type witness table accessor for View.Body : View in RecentCallIconView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for RecentCallIconView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for RecentCallIconView()
{
  return swift_release();
}

uint64_t assignWithCopy for RecentCallIconView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RecentCallIconView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallIconView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecentCallIconView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallIconView()
{
  return &type metadata for RecentCallIconView;
}

unsigned char *storeEnumTagSinglePayload for RecentCallIconView.IconType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019E978);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallIconView.IconType()
{
  return &type metadata for RecentCallIconView.IconType;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, RecentCallIconView.HorizontallyCenteredAndPadded> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, RecentCallIconView.HorizontallyCenteredAndPadded> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, RecentCallIconView.HorizontallyCenteredAndPadded> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<AnyView, RecentCallIconView.HorizontallyCenteredAndPadded>);
    lazy protocol witness table accessor for type RecentCallIconView.HorizontallyCenteredAndPadded and conformance RecentCallIconView.HorizontallyCenteredAndPadded(&lazy protocol witness table cache variable for type RecentCallIconView.HorizontallyCenteredAndPadded and conformance RecentCallIconView.HorizontallyCenteredAndPadded, (void (*)(uint64_t))type metadata accessor for RecentCallIconView.HorizontallyCenteredAndPadded);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RecentCallIconView.HorizontallyCenteredAndPadded> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RecentCallIconView.HorizontallyCenteredAndPadded(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RecentCallIconView.HorizontallyCenteredAndPadded(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ContentSizeCategory();
    int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for RecentCallIconView.HorizontallyCenteredAndPadded(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for RecentCallIconView.HorizontallyCenteredAndPadded(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Locale?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for RecentCallIconView.HorizontallyCenteredAndPadded(void *a1, const void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for RecentCallIconView.HorizontallyCenteredAndPadded(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of Locale?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ContentSizeCategory>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallIconView.HorizontallyCenteredAndPadded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019EF54);
}

uint64_t sub_10019EF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ContentSizeCategory>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RecentCallIconView.HorizontallyCenteredAndPadded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019EFD8);
}

uint64_t sub_10019EFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ContentSizeCategory>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for RecentCallIconView.HorizontallyCenteredAndPadded()
{
  type metadata accessor for Environment<ContentSizeCategory>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RecentCallIconView.HorizontallyCenteredAndPadded()
{
  return swift_getOpaqueTypeConformance2();
}

double specialized static RecentCallIconView.WidthCalculator.idealWidth(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentSizeCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContentSizeCategory?, ContentSizeCategory?));
  __chkstk_darwin(v6);
  char v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContentSizeCategory?);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v72 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v65 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v65 - v15;
  id v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v73 = a1;
  uint64_t v70 = v3 + 16;
  uint64_t v68 = v17;
  v17((char *)&v65 - v15, a1, v2);
  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
  uint64_t v71 = v3 + 56;
  uint64_t v69 = v18;
  v18((uint64_t)v16, 0, 1, v2);
  if (one-time initialization token for lastMeasuredContentSizeCategory != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v9, (uint64_t)static RecentCallIconView.WidthCalculator.lastMeasuredContentSizeCategory);
  swift_beginAccess();
  uint64_t v20 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of (String, Any)((uint64_t)v16, (uint64_t)v8, &demangling cache variable for type metadata for ContentSizeCategory?);
  uint64_t v67 = v19;
  outlined init with copy of (String, Any)(v19, v20, &demangling cache variable for type metadata for ContentSizeCategory?);
  long long v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v21((uint64_t)v8, 1, v2) != 1)
  {
    outlined init with copy of (String, Any)((uint64_t)v8, (uint64_t)v14, &demangling cache variable for type metadata for ContentSizeCategory?);
    if (v21(v20, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v20, v2);
      lazy protocol witness table accessor for type RecentCallIconView.HorizontallyCenteredAndPadded and conformance RecentCallIconView.HorizontallyCenteredAndPadded(&lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory, (void (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v3 + 8);
      v60(v5, v2);
      outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for ContentSizeCategory?);
      v60(v14, v2);
      outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for ContentSizeCategory?);
      if (v59) {
        return *(double *)&static RecentCallIconView.WidthCalculator.lastMeasuredMaxIconWidth;
      }
LABEL_9:
      uint64_t v66 = v2;
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v24 = _swiftEmptyArrayStorage;
      do
      {
        switch(*((unsigned char *)&outlined read-only object #0 of static RecentCallIconView.WidthCalculator.idealWidth(for:)
                 + v22
                 + 32))
        {
          case 1:
            v78 = &type metadata for SymbolDescribers.Recents;
            v79 = &protocol witness table for SymbolDescribers.Recents;
            LOBYTE(v77[0]) = 0;
            goto LABEL_17;
          case 2:
            v78 = &type metadata for SymbolDescribers.Recents;
            v79 = &protocol witness table for SymbolDescribers.Recents;
            LOBYTE(v77[0]) = 1;
            goto LABEL_17;
          case 3:
            v78 = &type metadata for SymbolDescribers.Recents;
            v79 = &protocol witness table for SymbolDescribers.Recents;
            LOBYTE(v77[0]) = 2;
            goto LABEL_17;
          case 4:
            v78 = &type metadata for SymbolDescribers.Recents;
            v79 = &protocol witness table for SymbolDescribers.Recents;
            LOBYTE(v77[0]) = 3;
LABEL_17:
            __swift_project_boxed_opaque_existential_0(v77, (uint64_t)&type metadata for SymbolDescribers.Recents);
            protocol witness for SymbolDescriber.description.getter in conformance SymbolDescribers.Recents((unint64_t *)v80);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v77);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
            }
            unint64_t v29 = v24[2];
            unint64_t v28 = v24[3];
            if (v29 >= v28 >> 1) {
              uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v24);
            }
            v24[2] = v29 + 1;
            uint64_t v25 = &v24[5 * v29];
            long long v26 = v80[0];
            long long v27 = v80[1];
            v25[8] = v81;
            *((_OWORD *)v25 + 2) = v26;
            *((_OWORD *)v25 + 3) = v27;
            break;
          default:
            break;
        }
        ++v22;
      }
      while (v22 != 5);
      v77[0] = _swiftEmptyArrayStorage;
      uint64_t v30 = v24[2];
      if (v30)
      {
        id v74 = self;
        swift_bridgeObjectRetain();
        uint64_t v31 = (void **)(v24 + 8);
        do
        {
          uint64_t v33 = (uint64_t)*(v31 - 2);
          unint64_t v32 = *(v31 - 1);
          BOOL v34 = *v31;
          if (*v31)
          {
            uint64_t v75 = (uint64_t)*(v31 - 4);
            uint64_t v35 = self;
            id v36 = v34;
            swift_bridgeObjectRetain();
            v76 = v32;
            id v37 = v32;
            id v38 = [v35 _preferredFontForTextStyle:v37 maximumContentSizeCategory:v36];
            if (!v38) {
              id v38 = [v35 preferredFontForTextStyle:v37];
            }
            uint64_t v39 = self;
            [v38 pointSize];
            double v41 = v40;
            UIFontWeight v42 = UIFont.weight.getter();
            id v43 = [v39 _configurationWithPointSize:UIImageSymbolWeightForFontWeight(v42) weight:v33 scale:v41];

            unint64_t v32 = v76;
          }
          else
          {
            uint64_t v44 = self;
            swift_bridgeObjectRetain();
            id v43 = [v44 configurationWithTextStyle:v32 scale:v33];
          }
          swift_bridgeObjectRetain();
          NSString v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v46 = [v74 systemImageNamed:v45];

          if (v46)
          {
            id v47 = [v46 imageWithSymbolConfiguration:v43];

            id v48 = [v47 imageWithRenderingMode:2];
            swift_bridgeObjectRelease();

            if (v48)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v77[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v77[0] & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          else
          {

            swift_bridgeObjectRelease();
          }
          v31 += 5;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        unint64_t v23 = v77[0];
      }
      swift_bridgeObjectRelease();
      if (v23 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
        if (v49) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v49 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v49)
        {
LABEL_38:
          if (v49 < 1)
          {
            __break(1u);
            JUMPOUT(0x10019FA80);
          }
          uint64_t v50 = 0;
          double v51 = 0.0;
          do
          {
            if ((v23 & 0xC000000000000001) != 0) {
              id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v52 = *(id *)(v23 + 8 * v50 + 32);
            }
            uint64_t v53 = v52;
            [v52 size];
            double v55 = v54;
            [v53 size];
            double v57 = v56;

            if (v55 > v57) {
              double v58 = v55;
            }
            else {
              double v58 = v57;
            }
            if (v51 <= v58) {
              double v51 = v58;
            }
            ++v50;
          }
          while (v49 != v50);
          goto LABEL_53;
        }
      }
      double v51 = 0.0;
LABEL_53:
      swift_bridgeObjectRelease_n();
      static RecentCallIconView.WidthCalculator.lastMeasuredMaxIconWidth = *(void *)&v51;
      uint64_t v61 = (uint64_t)v72;
      uint64_t v62 = v66;
      v68(v72, v73, v66);
      v69(v61, 0, 1, v62);
      uint64_t v63 = v67;
      swift_beginAccess();
      outlined assign with take of ContentSizeCategory?(v61, v63);
      swift_endAccess();
      return *(double *)&static RecentCallIconView.WidthCalculator.lastMeasuredMaxIconWidth;
    }
    outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for ContentSizeCategory?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
LABEL_8:
    outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for (ContentSizeCategory?, ContentSizeCategory?));
    goto LABEL_9;
  }
  outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for ContentSizeCategory?);
  if (v21(v20, 1, v2) != 1) {
    goto LABEL_8;
  }
  outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for ContentSizeCategory?);
  return *(double *)&static RecentCallIconView.WidthCalculator.lastMeasuredMaxIconWidth;
}

uint64_t outlined assign with take of ContentSizeCategory?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContentSizeCategory?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type RecentCallIconView.HorizontallyCenteredAndPadded and conformance RecentCallIconView.HorizontallyCenteredAndPadded(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>, _FrameLayout>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, _ViewModifier_Content<RecentCallIconView.HorizontallyCenteredAndPadded>, Spacer)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double PHRingLayer.percentage.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone11PHRingLayer_percentage;
  swift_beginAccess();
  return *(double *)v1;
}

id PHRingLayer.percentage.setter(double a1)
{
  return PHRingLayer.percentage.setter(&OBJC_IVAR____TtC11MobilePhone11PHRingLayer_percentage, a1);
}

double PHRingLayer.lineWidth.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone11PHRingLayer_lineWidth;
  swift_beginAccess();
  return *(double *)v1;
}

id PHRingLayer.lineWidth.setter(double a1)
{
  return PHRingLayer.percentage.setter(&OBJC_IVAR____TtC11MobilePhone11PHRingLayer_lineWidth, a1);
}

id PHRingLayer.percentage.setter(void *a1, double a2)
{
  uint64_t v4 = (double *)&v2[*a1];
  swift_beginAccess();
  *uint64_t v4 = a2;
  return [v2 setNeedsDisplay];
}

uint64_t (*PHRingLayer.lineWidth.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PHRingLayer.lineWidth.modify;
}

id PHRingLayer.fillColor.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC11MobilePhone11PHRingLayer_fillColor);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void PHRingLayer.fillColor.setter(void *a1)
{
}

uint64_t (*PHRingLayer.fillColor.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PHRingLayer.lineWidth.modify;
}

id PHRingLayer.strokeColor.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC11MobilePhone11PHRingLayer_strokeColor);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void PHRingLayer.strokeColor.setter(void *a1)
{
}

void PHRingLayer.fillColor.setter(void *a1, void *a2)
{
  uint64_t v4 = (void **)&v2[*a2];
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  id v6 = a1;

  [v2 setNeedsDisplay];
}

uint64_t (*PHRingLayer.strokeColor.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PHRingLayer.lineWidth.modify;
}

id PHRingLayer.lineWidth.modify(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    return [v5 setNeedsDisplay];
  }
  return result;
}

id PHRingLayer.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_percentage] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_lineWidth] = 0x4020000000000000;
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone11PHRingLayer_fillColor;
  uint64_t v2 = self;
  uint64_t v3 = v0;
  id v4 = [v2 systemDarkGreenColor];
  id v5 = [v4 CGColor];

  *(void *)&v0[v1] = v5;
  uint64_t v6 = OBJC_IVAR____TtC11MobilePhone11PHRingLayer_strokeColor;
  id v7 = [v2 systemGreenColor];
  id v8 = [v7 CGColor];

  *(void *)&v3[v6] = v8;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for PHRingLayer();
  return [super init];
}

uint64_t type metadata accessor for PHRingLayer()
{
  return self;
}

char *PHRingLayer.init(layer:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_percentage] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_lineWidth] = 0x4020000000000000;
  uint64_t v3 = OBJC_IVAR____TtC11MobilePhone11PHRingLayer_fillColor;
  id v4 = self;
  id v5 = v1;
  id v6 = [v4 systemDarkGreenColor];
  id v7 = [v6 CGColor];

  *(void *)&v1[v3] = v7;
  uint64_t v8 = OBJC_IVAR____TtC11MobilePhone11PHRingLayer_strokeColor;
  id v9 = [v4 systemGreenColor];
  id v10 = [v9 CGColor];

  *(void *)&v5[v8] = v10;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
  v30.receiver = v5;
  v30.super_class = (Class)type metadata accessor for PHRingLayer();
  [super initWithLayer:v11];
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v29);
  uint64_t v13 = (char *)v12;
  if (swift_dynamicCast())
  {
    [v28 percentage];
    uint64_t v15 = v14;
    uint64_t v16 = &v13[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_percentage];
    uint64_t v17 = swift_beginAccess();
    *(void *)uint64_t v16 = v15;
    double v18 = (*(double (**)(uint64_t))((swift_isaMask & *v28) + 0x70))(v17);
    uint64_t v19 = (double *)&v13[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_lineWidth];
    uint64_t v20 = swift_beginAccess();
    double *v19 = v18;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v28) + 0x88))(v20);
    uint64_t v22 = (void **)&v13[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_fillColor];
    swift_beginAccess();
    unint64_t v23 = *v22;
    NSObject *v22 = (void *)v21;

    uint64_t v24 = (*(uint64_t (**)(void))((swift_isaMask & *v28) + 0xA0))();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    uint64_t v25 = (void **)&v13[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_strokeColor];
    swift_beginAccess();
    long long v26 = *v25;
    *uint64_t v25 = (void *)v24;
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v13;
}

uint64_t static PHRingLayer.needsDisplay(forKey:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x61746E6563726570 && a2 == 0xEA00000000006567
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v4 = String._bridgeToObjectiveC()();
  v6.receiver = ObjCClassFromMetadata;
  v6.super_class = (Class)&OBJC_METACLASS____TtC11MobilePhone11PHRingLayer;
  [super needsDisplayForKey:v4];

  return (uint64_t)v2;
}

id PHRingLayer.action(forKey:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x61746E6563726570 && a2 == 0xEA00000000006567;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [self animationWithKeyPath:v4];

    id v6 = [v2 presentationLayer];
    if (v6)
    {
      id v7 = v6;
      [v6 percentage];
    }
    else
    {
      [v2 percentage];
    }
    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v5 setFromValue:isa];
  }
  else
  {
    NSString v9 = String._bridgeToObjectiveC()();
    v11.receiver = v2;
    v11.super_class = (Class)type metadata accessor for PHRingLayer();
    [super actionForKey:v9];
  }
  return v5;
}

Swift::Void __swiftcall PHRingLayer.draw(in:)(CGContextRef in)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for CGPathFillRule();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (objc_class *)type metadata accessor for PHRingLayer();
  v49.receiver = v1;
  v49.super_class = v8;
  [(CGContext *)&v49 drawInContext:in];
  id v9 = [v1 presentationLayer];
  if (v9)
  {
    id v10 = v9;
    [v9 bounds];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
  }
  else
  {
    [v1 bounds];
    double v12 = v19;
    double v14 = v20;
    double v16 = v21;
    double v18 = v22;
  }
  unint64_t v23 = [v2 presentationLayer];
  if (v23)
  {
    uint64_t v24 = v23;
    double v48 = (*(double (**)(void))((swift_isaMask & *v23) + 0x70))();
  }
  else
  {
    double v48 = (*(double (**)(void))((swift_isaMask & *v2) + 0x70))();
  }
  id v25 = [v2 presentationLayer];
  if (v25)
  {
    long long v26 = v25;
    [v25 percentage];
    double v46 = v27;
  }
  else
  {
    [v2 percentage];
    double v46 = v28;
  }
  unint64_t v29 = [v2 presentationLayer];
  if (v29)
  {
    objc_super v30 = v29;
    CGColorRef v47 = (CGColorRef)(*(uint64_t (**)(void))((swift_isaMask & *v29) + 0xA0))();
  }
  else
  {
    CGColorRef v47 = (CGColorRef)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xA0))();
  }
  uint64_t v31 = [v2 presentationLayer];
  if (v31)
  {
    unint64_t v32 = v31;
    uint64_t v33 = (CGColor *)(*(uint64_t (**)(void))((swift_isaMask & *v31) + 0x88))();
  }
  else
  {
    uint64_t v33 = (CGColor *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
  }
  v50.origin.x = v12;
  v50.origin.y = v14;
  v50.size.width = v16;
  v50.size.height = v18;
  CGFloat v34 = CGRectGetMaxX(v50) * 0.5;
  v51.origin.x = v12;
  v51.origin.y = v14;
  v51.size.width = v16;
  v51.size.height = v18;
  CGFloat v35 = CGRectGetMaxY(v51) * 0.5;
  v52.origin.x = v12;
  v52.origin.y = v14;
  v52.size.width = v16;
  v52.size.height = v18;
  CGFloat v36 = CGRectGetWidth(v52) * 0.5 + 1.0;
  id v37 = self;
  id v38 = [v37 bezierPathWithRoundedRect:v12 cornerRadius:v14 v16, v18, v36];
  uint64_t v39 = (const CGPath *)[v38 CGPath];
  CGContextSaveGState(in);
  CGContextAddPath(in, v39);
  CGContextSetFillColorWithColor(in, v33);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for CGPathFillRule.winding(_:), v4);
  CGContextRef.fillPath(using:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  CGContextRestoreGState(in);
  v53.origin.x = v12;
  v53.origin.y = v14;
  v53.size.width = v16;
  v53.size.height = v18;
  CGFloat Width = CGRectGetWidth(v53);
  CGFloat v41 = v48;
  id v42 = [v37 bezierPathWithArcCenter:1, v34, v35, Width * 0.5 - v48 * 0.5, -1.57079633, (v46 * 360.0 + -90.0) * 0.0174532925];
  id v43 = (const CGPath *)[v42 CGPath];
  CGContextSaveGState(in);
  CGContextAddPath(in, v43);
  CGColorRef v44 = v47;
  CGContextSetStrokeColorWithColor(in, v47);
  CGContextSetLineCap(in, kCGLineCapRound);
  CGContextSetLineWidth(in, v41);
  CGContextStrokePath(in);
  CGContextSetShouldAntialias(in, 1);
  CGContextRestoreGState(in);
}

id PHRingLayer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PHRingLayer();
  return [super dealloc];
}

void specialized PHRingLayer.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_percentage] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone11PHRingLayer_lineWidth] = 0x4020000000000000;
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone11PHRingLayer_fillColor;
  objc_super v2 = self;
  id v3 = [v2 systemDarkGreenColor];
  id v4 = [v3 CGColor];

  *(void *)&v0[v1] = v4;
  uint64_t v5 = OBJC_IVAR____TtC11MobilePhone11PHRingLayer_strokeColor;
  id v6 = [v2 systemGreenColor];
  id v7 = [v6 CGColor];

  *(void *)&v0[v5] = v7;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

const char *keypath_get_selector_percentage()
{
  return "percentage";
}

id sub_1001A1060@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 percentage];
  *a2 = v4;
  return result;
}

id sub_1001A1094(double *a1, id *a2)
{
  return [*a2 setPercentage:*a1];
}

void sub_1001A10A8(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x70))();
}

uint64_t sub_1001A1104(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((swift_isaMask & **a2) + 0x78))(*a1);
}

uint64_t sub_1001A115C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t sub_1001A11B8(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x90))(*a1);
}

uint64_t sub_1001A121C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_1001A1278(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xA8))(*a1);
}

char *VoicemailUnreadIndicator.__allocating_init(diameter:)(double a1)
{
  id v3 = objc_allocWithZone(v1);
  return VoicemailUnreadIndicator.init(diameter:)(a1);
}

void VoicemailUnreadIndicator.configureBorder(borderWidth:borderColor:)(uint64_t a1, double a2)
{
  id v5 = [v2 layer];
  [v5 setBorderWidth:a2];

  id v6 = [v2 layer];
  [v6 setBorderColor:a1];
}

char *VoicemailUnreadIndicator.init(diameter:)(double a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(double *)&v1[OBJC_IVAR____TtC11MobilePhone24VoicemailUnreadIndicator_diameter] = a1;
  id v4 = [self telephonyUIUnreadIndicatorGlyphImage];
  v22.receiver = v1;
  v22.super_class = ObjectType;
  [super initWithImage:v4];

  id v6 = v5;
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v7 = [v6 layer];
  [v7 setMasksToBounds:1];

  id v8 = [v6 layer];
  [v8 setCornerRadius:a1 * 0.5];

  id v9 = self;
  id v10 = (char *)v6;
  id v11 = [v9 systemBlueColor];
  [v10 setTintColor:v11];

  LODWORD(v12) = 1148846080;
  [v10 setContentHuggingPriority:0 forAxis:v12];
  double v13 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002053B0;
  id v15 = [v10 widthAnchor];
  uint64_t v16 = OBJC_IVAR____TtC11MobilePhone24VoicemailUnreadIndicator_diameter;
  id v17 = [v15 constraintEqualToConstant:*(double *)&v10[OBJC_IVAR____TtC11MobilePhone24VoicemailUnreadIndicator_diameter]];

  *(void *)(v14 + 32) = v17;
  id v18 = [v10 heightAnchor];
  id v19 = [v18 constraintEqualToConstant:*(double *)&v10[v16]];

  *(void *)(v14 + 40) = v19;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 activateConstraints:isa];

  return v10;
}

void VoicemailUnreadIndicator.init(coder:)()
{
}

id VoicemailUnreadIndicator.__allocating_init(image:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithImage:a1];

  return v3;
}

void VoicemailUnreadIndicator.init(image:)()
{
}

id VoicemailUnreadIndicator.__allocating_init(image:highlightedImage:)(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone(v2) initWithImage:a1 highlightedImage:a2];

  return v5;
}

void VoicemailUnreadIndicator.init(image:highlightedImage:)()
{
}

void VoicemailUnreadIndicator.init(frame:)()
{
}

uint64_t type metadata accessor for VoicemailUnreadIndicator()
{
  return self;
}

BOOL VMVoicemailGreeting.isEqual(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  __chkstk_darwin(v7);
  id v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  double v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v39 - v15;
  __chkstk_darwin(v14);
  id v18 = (char *)&v39 - v17;
  outlined init with copy of (String, Any)(a1, (uint64_t)v43, &demangling cache variable for type metadata for Any?);
  if (v44)
  {
    type metadata accessor for VMVoicemailGreeting();
    if (swift_dynamicCast())
    {
      uint64_t v39 = v6;
      id v40 = v1;
      id v41 = v42;
      id v19 = [v1 url];
      if (v19)
      {
        double v20 = v19;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v21 = v4;
        objc_super v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
        v22(v18, 0, 1, v3);
      }
      else
      {
        uint64_t v21 = v4;
        objc_super v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
        v22(v18, 1, 1, v3);
      }
      id v23 = [v41 url];
      if (v23)
      {
        uint64_t v24 = v23;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = 1;
      }
      v22(v16, v25, 1, v3);
      uint64_t v26 = (uint64_t)&v9[*(int *)(v7 + 48)];
      outlined init with copy of (String, Any)((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for URL?);
      outlined init with copy of (String, Any)((uint64_t)v16, v26, &demangling cache variable for type metadata for URL?);
      double v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
      if (v27((uint64_t)v9, 1, v3) == 1)
      {
        outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
        outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
        if (v27(v26, 1, v3) == 1)
        {
          outlined destroy of Locale?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
          id v28 = v41;
          goto LABEL_17;
        }
      }
      else
      {
        outlined init with copy of (String, Any)((uint64_t)v9, (uint64_t)v13, &demangling cache variable for type metadata for URL?);
        if (v27(v26, 1, v3) != 1)
        {
          unint64_t v29 = v39;
          (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v39, v26, v3);
          lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))&type metadata accessor for URL);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
          v31(v29, v3);
          outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
          outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
          v31(v13, v3);
          id v28 = v41;
          outlined destroy of Locale?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
          if (v30)
          {
LABEL_17:
            id v32 = v40;
            id v33 = [v40 type];
            if (v33 == [v28 type])
            {
              [v32 duration];
              double v35 = v34;
              [v28 duration];
              double v37 = v36;

              return v35 == v37;
            }
          }
LABEL_19:

          return 0;
        }
        outlined destroy of Locale?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
        outlined destroy of Locale?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v3);
      }
      outlined destroy of Locale?((uint64_t)v9, &demangling cache variable for type metadata for (URL?, URL?));
      id v28 = v41;
      goto LABEL_19;
    }
  }
  else
  {
    outlined destroy of Locale?((uint64_t)v43, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

unint64_t type metadata accessor for VMVoicemailGreeting()
{
  unint64_t result = lazy cache variable for type metadata for VMVoicemailGreeting;
  if (!lazy cache variable for type metadata for VMVoicemailGreeting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for VMVoicemailGreeting);
  }
  return result;
}

void *PHVoicemailGreetingModel.Constant.liveVoicemailGreetingDuration.unsafeMutableAddressor()
{
  return &static PHVoicemailGreetingModel.Constant.liveVoicemailGreetingDuration;
}

double static PHVoicemailGreetingModel.Constant.liveVoicemailGreetingDuration.getter()
{
  return 120.0;
}

uint64_t PHVoicemailGreetingModel.shouldShowSaveButton.getter()
{
  id v1 = [v0 selectedGreeting];
  id v2 = [v0 existingGreeting];
  unsigned int v3 = [v1 isEqual:v2];

  return v3 ^ 1;
}

id PHVoicemailGreetingModel.greetingExists.getter()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  id v12 = [v1 selectedGreeting];
  id v13 = [v12 url];

  if (v13)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
  }
  outlined init with take of URL?((uint64_t)v9, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    outlined destroy of Locale?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.mobilePhone);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "PHVoicemailGreetingModel: currentGreeting.url?.path is nil", v17, 2u);
      swift_slowDealloc();
    }
    id v18 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v11, v2);
    outlined destroy of Locale?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
    URL.path(percentEncoded:)(1);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v19 = [self defaultManager];
    uint64_t v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v19 fileExistsAtPath:v15];
  }
  return v18;
}

BOOL PHVoicemailGreetingModel.isCustomized.getter()
{
  id v1 = [v0 selectedGreeting];
  id v2 = [v1 type];

  return v2 == (id)2;
}

BOOL PHVoicemailGreetingModel.isDefault.getter()
{
  id v1 = [v0 selectedGreeting];
  id v2 = [v1 type];

  return v2 == 0;
}

id PHVoicemailGreetingModel.shouldShowPlayButtonForDefaultGreeting.getter()
{
  id result = [v0 isCallScreeningEnabled];
  if (result) {
    return [v0 greetingExists];
  }
  return result;
}

Swift::Void __swiftcall PHVoicemailGreetingModel.saveGreeting()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)[v0 account];
  uint64_t v6 = *(void **)&v5[OBJC_IVAR___MPGreetingAccount_accountType];
  int v7 = v5[OBJC_IVAR___MPGreetingAccount_accountType + 8];
  id v8 = v6;

  if (v7 == 2 && v6 == 0)
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.mobilePhone);
    os_log_t v23 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v19))
    {
      double v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v19, "Attempt to set greeting for LiveVoicemail UUID which is not supported.", v20, 2u);
      swift_slowDealloc();
    }
    os_log_t v21 = v23;
  }
  else
  {

    [v1 setGreetingState:5];
    id v10 = [v1 selectedGreeting];
    id v11 = VMVoicemailGreeting.copy()();

    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v14 = [v1 account];
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v15 = static MainActor.shared.getter();
    os_log_type_t v16 = (void *)swift_allocObject();
    v16[2] = v15;
    v16[3] = &protocol witness table for MainActor;
    v16[4] = v13;
    unint64_t v16[5] = v11;
    v16[6] = v14;
    id v17 = v11;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), (uint64_t)v16);

    swift_release();
  }
}

uint64_t specialized closure #1 in PHVoicemailGreetingModel.saveGreeting()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[21] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v6[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v6[25] = v7;
  v6[26] = *(void *)(v7 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  v6[29] = type metadata accessor for MainActor();
  v6[30] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[31] = v8;
  v6[32] = v9;
  return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), v8, v9);
}

uint64_t specialized closure #1 in PHVoicemailGreetingModel.saveGreeting()()
{
  uint64_t v41 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 264) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    if (*(unsigned char *)(*(void *)(v0 + 184) + OBJC_IVAR___MPGreetingAccount_accountType + 8))
    {
      id v3 = *(id *)(v0 + 176);
      id v4 = [v2 existingGreeting];
      id v5 = [v4 type];

      if (v5 == (id)2)
      {
        id v6 = [*(id *)(v0 + 264) existingGreeting];
        id v7 = [v6 url];

        if (v7)
        {
          uint64_t v9 = *(void *)(v0 + 208);
          uint64_t v8 = *(void *)(v0 + 216);
          uint64_t v11 = *(void *)(v0 + 192);
          uint64_t v10 = *(void *)(v0 + 200);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
          v12(v11, v8, v10);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) != 1)
          {
            uint64_t v13 = v0 + 160;
            v12(*(void *)(v0 + 224), *(void *)(v0 + 192), *(void *)(v0 + 200));
            if (one-time initialization token for mobilePhone != -1) {
              swift_once();
            }
            id v14 = *(void **)(v0 + 184);
            uint64_t v15 = type metadata accessor for Logger();
            __swift_project_value_buffer(v15, (uint64_t)static Logger.mobilePhone);
            id v16 = v14;
            id v17 = Logger.logObject.getter();
            os_log_type_t v18 = static os_log_type_t.error.getter();
            BOOL v19 = os_log_type_enabled(v17, v18);
            double v20 = *(void **)(v0 + 184);
            if (v19)
            {
              os_log_t v21 = (uint8_t *)swift_slowAlloc();
              uint64_t v22 = swift_slowAlloc();
              *(_DWORD *)os_log_t v21 = 136315138;
              uint64_t v40 = v22;
              type metadata accessor for UUID();
              lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v40);
              uint64_t v13 = v0 + 160;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              _os_log_impl((void *)&_mh_execute_header, v17, v18, "Attempt to delete the exisiting/old greeting url through FileManager for %s", v21, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            id v32 = [self defaultManager];
            URL._bridgeToObjectiveC()(v33);
            double v35 = v34;
            *(void *)(v0 + 160) = 0;
            unsigned int v36 = [v32 removeItemAtURL:v34 error:v13];

            double v37 = *(void **)(v0 + 160);
            if (v36)
            {
              id v38 = v37;
            }
            else
            {
              id v39 = v37;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
            }
            (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
            goto LABEL_23;
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56))(*(void *)(v0 + 192), 1, 1, *(void *)(v0 + 200));
        }
        outlined destroy of Locale?(*(void *)(v0 + 192), &demangling cache variable for type metadata for URL?);
      }
LABEL_23:
      return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), 0, 0);
    }
    id v27 = *(id *)(v0 + 176);
    id v28 = [v2 voicemailManager];
    uint64_t v29 = OBJC_IVAR___MPGreetingAccount_uuid;
    *(void *)(v0 + 272) = v28;
    *(void *)(v0 + 280) = v29;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 288) = isa;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 320;
    *(void *)(v0 + 24) = specialized closure #1 in PHVoicemailGreetingModel.saveGreeting();
    uint64_t v31 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
    *(void *)(v0 + 104) = &block_descriptor_10;
    *(void *)(v0 + 112) = v31;
    [v28 setGreeting:v27 forAccountUUID:isa completion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  id v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 296) = v2;
  id v3 = *(void *)(v1 + 256);
  id v4 = *(void *)(v1 + 248);
  if (v2) {
    id v5 = specialized closure #1 in PHVoicemailGreetingModel.saveGreeting();
  }
  else {
    id v5 = specialized closure #1 in PHVoicemailGreetingModel.saveGreeting();
  }
  return _swift_task_switch(v5, v4, v3);
}

{
  uint64_t v0;
  void *v1;
  char v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void);
  id v36;
  NSURL *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  double v48 = v0;
  id v1 = *(void **)(v0 + 288);
  uint64_t v2 = *(unsigned char *)(v0 + 320);

  if (v2)
  {
    id v3 = [*(id *)(v0 + 264) existingGreeting];
    id v4 = [v3 type];

    if (v4 == (id)2)
    {
      id v5 = [*(id *)(v0 + 264) existingGreeting];
      id v6 = [v5 url];

      if (v6)
      {
        uint64_t v8 = *(void *)(v0 + 208);
        id v7 = *(void *)(v0 + 216);
        uint64_t v10 = *(void *)(v0 + 192);
        uint64_t v9 = *(void *)(v0 + 200);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
        v11(v10, v7, v9);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) != 1)
        {
          v11(*(void *)(v0 + 224), *(void *)(v0 + 192), *(void *)(v0 + 200));
          if (one-time initialization token for mobilePhone != -1) {
            swift_once();
          }
          uint64_t v12 = *(void **)(v0 + 184);
          uint64_t v13 = type metadata accessor for Logger();
          __swift_project_value_buffer(v13, (uint64_t)static Logger.mobilePhone);
          id v14 = v12;
          uint64_t v15 = Logger.logObject.getter();
          id v16 = static os_log_type_t.error.getter();
          id v17 = os_log_type_enabled(v15, v16);
          os_log_type_t v18 = *(void **)(v0 + 184);
          if (v17)
          {
            BOOL v19 = (uint8_t *)swift_slowAlloc();
            uint64_t v45 = swift_slowAlloc();
            *(_DWORD *)BOOL v19 = 136315138;
            CGColorRef v47 = v45;
            type metadata accessor for UUID();
            lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
            double v20 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v47);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, v15, v16, "Attempt to delete the exisiting/old greeting url through FileManager for %s", v19, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          unsigned int v36 = [self defaultManager];
          URL._bridgeToObjectiveC()(v37);
          id v39 = v38;
          *(void *)(v0 + 160) = 0;
          uint64_t v40 = [v36 removeItemAtURL:v38 error:v0 + 160];

          uint64_t v41 = *(void **)(v0 + 160);
          if (v40)
          {
            uint64_t v42 = v41;
          }
          else
          {
            id v43 = v41;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            swift_errorRelease();
          }
          (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
          goto LABEL_24;
        }
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56))(*(void *)(v0 + 192), 1, 1, *(void *)(v0 + 200));
      }
      outlined destroy of Locale?(*(void *)(v0 + 192), &demangling cache variable for type metadata for URL?);
    }
LABEL_24:
    return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), 0, 0);
  }
  swift_release();
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v22 = *(void **)(v0 + 184);
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.mobilePhone);
  unint64_t v24 = v22;
  uint64_t v25 = Logger.logObject.getter();
  uint64_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v44 = *(void **)(v0 + 264);
    id v27 = *(void **)(v0 + 184);
    double v46 = *(void **)(v0 + 176);
    id v28 = (uint8_t *)swift_slowAlloc();
    CGColorRef v47 = swift_slowAlloc();
    *(_DWORD *)id v28 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to save the greeting for account %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v31 = *(void **)(v0 + 264);
    id v33 = *(void **)(v0 + 176);
    id v32 = *(void **)(v0 + 184);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v4;

  id v1 = *(void **)(v0 + 288);
  uint64_t v2 = *(void **)(v0 + 272);
  swift_willThrow();

  return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 304) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), v2, v1);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[23];
  swift_release();
  closure #1 in closure #1 in PHVoicemailGreetingModel.saveGreeting()(v1, v2);
  id v3 = v0[31];
  id v4 = v0[32];
  return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), v3, v4);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void);
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  os_log_type_t v18 = v0;
  swift_release();
  swift_errorRelease();
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  id v1 = (void *)v0[23];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhone);
  id v3 = v1;
  id v4 = Logger.logObject.getter();
  id v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v15 = (void *)v0[33];
    id v6 = (void *)v0[23];
    id v16 = (void *)v0[22];
    id v7 = (uint8_t *)swift_slowAlloc();
    id v17 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to save the greeting for account %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v10 = (void *)v0[33];
    uint64_t v12 = (void *)v0[22];
    uint64_t v11 = (void *)v0[23];
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 312) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), v2, v1);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[23];
  swift_release();
  closure #2 in closure #1 in PHVoicemailGreetingModel.saveGreeting()(v1, v2);
  id v3 = v0[31];
  id v4 = v0[32];
  return _swift_task_switch(specialized closure #1 in PHVoicemailGreetingModel.saveGreeting(), v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = *(void **)(v0 + 176);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

id closure #1 in closure #1 in PHVoicemailGreetingModel.saveGreeting()(void *a1, void *a2)
{
  [a1 setGreetingState:2];
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.mobilePhone);
  id v5 = a2;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Attempt to set greeting failed with error for %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v11 = [self sharedInstance];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v11 deleteCustomGreetingForAccountUUID:isa];

  id result = [a1 delegate];
  if (result)
  {
    id v14 = result;
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    [v14 voicemailGreetingFailedWithError:v15];

    return (id)swift_unknownObjectRelease();
  }
  return result;
}

id closure #2 in closure #1 in PHVoicemailGreetingModel.saveGreeting()(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v57 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  double v56 = (char *)&v52 - v14;
  [a1 setGreetingState:2];
  id v59 = a1;
  id v15 = [a1 selectedGreeting];
  id v16 = [v15 type];

  if (v16 == (id)2)
  {
    id v17 = [v59 selectedGreeting];
    id v18 = [v17 url];

    if (v18)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      BOOL v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19(v8, v13, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
      {
        v19(v56, v8, v9);
        if (one-time initialization token for mobilePhone != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Logger.mobilePhone);
        id v21 = a2;
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        BOOL v24 = os_log_type_enabled(v22, v23);
        id v25 = v59;
        uint64_t v55 = v4;
        if (v24)
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          uint64_t v54 = v27;
          CGRect v53 = v26;
          *(_DWORD *)uint64_t v26 = 136315138;
          uint64_t v61 = v27;
          CGRect v52 = v26 + 4;
          lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Will save the custom greeting for %s", v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v43 = [self sharedInstance];
        URL._bridgeToObjectiveC()(v44);
        double v46 = v45;
        id v47 = [v25 account];
        objc_super v49 = v57;
        uint64_t v48 = v58;
        uint64_t v50 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, (uint64_t)v47 + OBJC_IVAR___MPGreetingAccount_uuid, v55);

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
        [v43 saveCustomGreeting:v46 forAccountUUID:isa];

        (*(void (**)(char *, uint64_t))(v10 + 8))(v56, v9);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    outlined destroy of Locale?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
  }
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.mobilePhone);
  id v31 = a2;
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    double v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)double v34 = 136315138;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Will delete the exisiting custom greeting for %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v25 = v59;
  id v38 = v57;
  uint64_t v37 = v58;
  id v39 = [self sharedInstance];
  id v40 = [v25 account];
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v38, (uint64_t)v40 + OBJC_IVAR___MPGreetingAccount_uuid, v4);

  Class v41 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v4);
  [v39 deleteCustomGreetingForAccountUUID:v41];

LABEL_16:
  id result = [v25 delegate];
  if (result)
  {
    [result voicemailGreetingDidSave];
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PHVoicemailGreetingModel.fetchGreeting()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v0 setGreetingState:1];
  id v4 = [v0 account];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  id v7 = v4;
  swift_retain();
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v8;
  void v9[3] = &protocol witness table for MainActor;
  v9[4] = v7;
  void v9[5] = v6;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in PHVoicemailGreetingModel.fetchGreeting(), (uint64_t)v9);
  swift_release();
}

uint64_t closure #1 in PHVoicemailGreetingModel.fetchGreeting()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[22] = a4;
  v5[23] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v5[25] = v6;
  v5[26] = *(void *)(v6 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for MainActor();
  v5[30] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[31] = v8;
  v5[32] = v7;
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), v8, v7);
}

uint64_t closure #1 in PHVoicemailGreetingModel.fetchGreeting()()
{
  if (*(unsigned char *)(v0[22] + OBJC_IVAR___MPGreetingAccount_accountType + 8))
  {
    if (*(unsigned char *)(v0[22] + OBJC_IVAR___MPGreetingAccount_accountType + 8) == 1)
    {
      id v1 = [objc_allocWithZone((Class)VMVoicemailGreeting) init];
      v0[33] = v1;
      id v2 = v1;
      uint64_t v3 = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
LABEL_17:
      return _swift_task_switch(v3, 0, 0);
    }
    id v8 = [objc_allocWithZone((Class)VMVoicemailGreeting) init];
    uint64_t v9 = self;
    id v10 = v8;
    id v11 = [v9 sharedInstance];
    id v12 = [v11 defaultGreeting];

    if (v12)
    {
      uint64_t v14 = v0[26];
      uint64_t v13 = v0[27];
      uint64_t v16 = v0[24];
      uint64_t v15 = v0[25];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      id v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v17(v16, v13, v15);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v15);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15) != 1)
      {
        uint64_t v18 = v0[28];
        uint64_t v19 = v0[25];
        uint64_t v20 = v0[26];
        v17(v18, v0[24], v19);
        URL._bridgeToObjectiveC()(v21);
        os_log_type_t v23 = v22;
        [v10 setUrl:v22];

        [v10 setType:0];
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
LABEL_16:
        v0[40] = 0;
        v0[41] = v10;
        uint64_t v3 = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
        goto LABEL_17;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[26] + 56))(v0[24], 1, 1, v0[25]);
    }
    uint64_t v25 = v0[24];

    outlined destroy of Locale?(v25, &demangling cache variable for type metadata for URL?);
    goto LABEL_16;
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  v0[36] = Strong;
  if (Strong)
  {
    id v5 = [Strong voicemailManager];
    v0[37] = v5;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v0[38] = isa;
    v0[2] = v0;
    v0[7] = v0 + 21;
    v0[3] = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
    uint64_t v7 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VMVoicemailGreeting?, @unowned NSError?) -> () with result type VMVoicemailGreeting;
    v0[13] = &block_descriptor_16;
    v0[14] = v7;
    [v5 greetingForAccountUUID:isa completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 272) = static MainActor.shared.getter();
  id v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v1 = (void *)v0[33];
  id v2 = v0[22];
  swift_release();
  closure #1 in closure #1 in PHVoicemailGreetingModel.fetchGreeting()(v2, v1);
  v0[35] = 0;

  uint64_t v3 = v0[31];
  id v4 = v0[32];
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), v3, v4);
}

{
  void *v0;
  uint64_t v1;

  id v1 = v0[33];
  v0[40] = v0[35];
  v0[41] = v1;
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  id v1 = *v0;
  id v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 312) = v2;
  uint64_t v3 = *(void *)(v1 + 256);
  id v4 = *(void *)(v1 + 248);
  if (v2) {
    id v5 = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
  }
  else {
    id v5 = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
  }
  return _swift_task_switch(v5, v4, v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  id v1 = *(void **)(v0 + 296);
  id v2 = *(void **)(v0 + 304);

  uint64_t v3 = *(void *)(v0 + 168);
  *(void *)(v0 + 320) = 0;
  *(void *)(v0 + 328) = v3;
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 336) = static MainActor.shared.getter();
  id v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  id v1 = (void *)v0[41];
  id v2 = v0[23];
  swift_release();
  closure #3 in closure #1 in PHVoicemailGreetingModel.fetchGreeting()(v2, v1);
  uint64_t v3 = v0[31];
  id v4 = v0[32];
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v5;

  id v1 = (void *)v0[38];
  uint64_t v3 = (void *)v0[36];
  id v2 = (void *)v0[37];
  swift_willThrow();

  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 344) = static MainActor.shared.getter();
  id v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in PHVoicemailGreetingModel.fetchGreeting(), v2, v1);
}

{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  swift_release();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v2 = Strong;
    uint64_t v3 = [Strong delegate];
    if (v3)
    {
      id v4 = v3;
      id v5 = (void *)_convertErrorToNSError(_:)();
      [v4 voicemailGreetingFailedWithError:v5];
      swift_unknownObjectRelease();

      uint64_t v6 = *(void *)(v0 + 248);
      uint64_t v7 = *(void *)(v0 + 256);
      id v8 = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
      goto LABEL_6;
    }
  }
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  id v8 = closure #1 in PHVoicemailGreetingModel.fetchGreeting();
LABEL_6:
  return _swift_task_switch(v8, v6, v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in PHVoicemailGreetingModel.fetchGreeting()(uint64_t a1, void *a2)
{
  id v38 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - v5;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v37 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = self;
  id v17 = [v16 sharedInstance];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v19 = [v17 customGreetingForAccountUUID:isa];

  if (v19)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v20(v6, v13, v7);
    id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v21(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v20(v15, v6, v7);
      URL._bridgeToObjectiveC()(v22);
      BOOL v24 = v23;
      id v25 = v38;
      [v38 setUrl:v23];

      [v25 setType:2];
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    }
  }
  else
  {
    id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v21(v6, 1, 1, v7);
  }
  outlined destroy of Locale?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
  id v27 = [v16 sharedInstance];
  id v28 = [v27 defaultGreeting];

  if (v28)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v30 = (uint64_t)v39;
    v29(v39, v13, v7);
    v21((char *)v30, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v30, 1, v7) != 1)
    {
      id v31 = v37;
      v29(v37, (char *)v30, v7);
      URL._bridgeToObjectiveC()(v32);
      double v34 = v33;
      id v35 = v38;
      [v38 setUrl:v33];

      [v35 setType:0];
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v31, v7);
    }
  }
  else
  {
    uint64_t v30 = (uint64_t)v39;
    v21(v39, 1, 1, v7);
  }
  return outlined destroy of Locale?(v30, &demangling cache variable for type metadata for URL?);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VMVoicemailGreeting?, @unowned NSError?) -> () with result type VMVoicemailGreeting(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

void closure #3 in closure #1 in PHVoicemailGreetingModel.fetchGreeting()(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v55 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v55 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v55 - v19;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v22 = Strong;
    [Strong setExistingGreeting:a2];
    id v23 = [a2 type];
    if (v23 == (id)2)
    {
      id v28 = [v22 existingGreeting];
      id v29 = [v28 url];

      if (v29)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v30 = v56;
        id v31 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
        v31(v15, v11, v3);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v15, 1, v3) != 1)
        {
          v31(v6, v15, v3);
          id v32 = objc_allocWithZone((Class)AVURLAsset);
          URL._bridgeToObjectiveC()(v33);
          id v35 = v34;
          id v36 = [v32 initWithURL:v34 options:0];

          [v22 loadGreeting:v36];
          (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v3);
LABEL_26:
          id v54 = [v22 existingGreeting];
          [v22 setSelectedGreeting:v54];

          [v22 setGreetingState:2];
          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v15, 1, 1, v3);
      }
      uint64_t v43 = (uint64_t)v15;
    }
    else
    {
      if (v23)
      {
        if (one-time initialization token for mobilePhone != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        __swift_project_value_buffer(v37, (uint64_t)static Logger.mobilePhone);
        id v38 = a2;
        id v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          Class v41 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)Class v41 = 134217984;
          id v57 = [v38 type];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "PHVoicemailGreetingModel fetchGreeting is getting %lu", v41, 0xCu);
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_26;
      }
      id v24 = [v22 existingGreeting];
      id v25 = [v22 defaultGreetingURL];
      if (v25)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = v56;
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v20, v11, v3);
        uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
        v55(v20, 0, 1, v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v20, 1, v3) == 1)
        {
          id v25 = 0;
        }
        else
        {
          URL._bridgeToObjectiveC()(v27);
          id v25 = v44;
          (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v3);
        }
        uint64_t v42 = v55;
      }
      else
      {
        uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
        v42(v20, 1, 1, v3);
      }
      [v24 setUrl:v25];

      id v45 = [v22 existingGreeting];
      id v46 = [v45 url];

      if (v46)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v47 = v56;
        uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
        v48(v18, v11, v3);
        v42(v18, 0, 1, v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v18, 1, v3) != 1)
        {
          v48(v9, v18, v3);
          id v49 = objc_allocWithZone((Class)AVURLAsset);
          URL._bridgeToObjectiveC()(v50);
          CGRect v52 = v51;
          id v53 = [v49 initWithURL:v51 options:0];

          [v22 loadGreeting:v53];
          (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v3);
          goto LABEL_26;
        }
      }
      else
      {
        v42(v18, 1, 1, v3);
      }
      uint64_t v43 = (uint64_t)v18;
    }
    outlined destroy of Locale?(v43, &demangling cache variable for type metadata for URL?);
    goto LABEL_26;
  }
}

Swift::Void __swiftcall PHVoicemailGreetingModel.didSelectDefaultGreeting()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  double v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  id v14 = [v1 selectedGreeting];
  id v15 = [v14 type];

  if (v15)
  {
    id v16 = [v1 selectedGreeting];
    [v1 setTempCustomizedGreeting:v16];
  }
  id v17 = [objc_allocWithZone((Class)VMVoicemailGreeting) init];
  [v1 setSelectedGreeting:v17];

  id v18 = [v1 selectedGreeting];
  [v18 setType:0];

  id v19 = [v1 selectedGreeting];
  id v20 = [v1 defaultGreetingURL];
  if (v20)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v13, v7, v2);
    id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v21(v13, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v13, 1, v2) == 1)
    {
      id v20 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v22);
      id v20 = v23;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v2);
    }
  }
  else
  {
    id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v21(v13, 1, 1, v2);
  }
  [v19 setUrl:v20];

  id v24 = [v1 selectedGreeting];
  id v25 = [v24 url];

  if (v25)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v26(v11, v7, v2);
    v21(v11, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) != 1)
    {
      id v27 = v34;
      v26(v34, v11, v2);
      id v28 = objc_allocWithZone((Class)AVURLAsset);
      URL._bridgeToObjectiveC()(v29);
      id v31 = v30;
      id v32 = [v28 initWithURL:v30 options:0];

      [v1 loadGreeting:v32];
      (*(void (**)(char *, uint64_t))(v3 + 8))(v27, v2);
      return;
    }
  }
  else
  {
    v21(v11, 1, 1, v2);
  }
  outlined destroy of Locale?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
}

Swift::Void __swiftcall PHVoicemailGreetingModel.didSelectCustomizedGreeting()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - v10;
  id v12 = [v1 tempCustomizedGreeting];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [v12 url];
    if (v14)
    {
      id v15 = v14;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      id v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v16(v4, v9, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v16(v11, v4, v5);
        [v1 setSelectedGreeting:v13];
        id v17 = objc_allocWithZone((Class)AVURLAsset);
        URL._bridgeToObjectiveC()(v18);
        id v20 = v19;
        id v21 = [v17 initWithURL:v19 options:0];

        [v1 loadGreeting:v21];
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }

    outlined destroy of Locale?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
  }
}

void PHVoicemailGreetingModel.maximumGreetingDuration(account:)(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + OBJC_IVAR___MPGreetingAccount_accountType + 8))
  {
    id v2 = [v1 voicemailManager];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v2 maximumGreetingDurationForAccountUUID:isa];
  }
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A7378()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A73B0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for specialized closure #1 in PHVoicemailGreetingModel.saveGreeting()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return specialized closure #1 in PHVoicemailGreetingModel.saveGreeting()(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001A74C8()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in PHVoicemailGreetingModel.fetchGreeting()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in PHVoicemailGreetingModel.fetchGreeting()(a1, v4, v5, v7, v6);
}

ValueMetadata *type metadata accessor for PHVoicemailGreetingModel.Constant()
{
  return &type metadata for PHVoicemailGreetingModel.Constant;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo9VMAccountCG_SSs5NeverOTg50108_s11MobilePhone23VMDVoicemailCountSourceC016unreadVoicemailsD0AA24VoicemailBadgeCalculatorC0D6ResultOyYaFAHyw10XEfU_SSSo9D53Ccfu_32f6cd0e9f49fdf63c81bd7aee41273344AJSSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (!v7) {
      return (uint64_t)v8;
    }
    id v24 = _swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v24;
    v19[1] = v2;
    unint64_t v20 = a1 & 0xC000000000000001;
    uint64_t v11 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v21 = v7;
    unint64_t v22 = a1;
    while (v7 != v10)
    {
      if (v20) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * v10 + 32);
      }
      id v13 = v12;
      id v14 = [v13 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v4 = UUID.uuidString.getter();
      uint64_t v2 = v15;
      (*v11)(v6, v23);

      id v24 = v8;
      unint64_t v17 = v8[2];
      unint64_t v16 = v8[3];
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v8 = v24;
      }
      ++v10;
      v8[2] = v17 + 1;
      id v18 = &v8[2 * v17];
      v18[4] = v4;
      v18[5] = v2;
      uint64_t v7 = v21;
      a1 = v22;
      if (v21 == v10) {
        return (uint64_t)v8;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  id v19 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        id v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          id v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  id v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for TaskPriority();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v12);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v17 = v16;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = 0;
  uint64_t v17 = 0;
LABEL_6:
  uint64_t v18 = *v5;
  id v19 = (void *)swift_allocObject();
  void v19[2] = *(void *)(a4 + 16);
  v19[3] = a2;
  v19[4] = a3;
  unint64_t v20 = (void *)(v17 | v15);
  if (v17 | v15)
  {
    v23[0] = 0;
    v23[1] = 0;
    unint64_t v20 = v23;
    v23[2] = v15;
    v23[3] = v17;
  }
  v22[1] = 1;
  v22[2] = v20;
  v22[3] = v18;
  swift_task_create();
  return swift_release();
}

uint64_t *VMDVoicemailCountSource.__allocating_init(subscriptionSource:accountController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_allocObject();
  uint64_t v6 = specialized VMDVoicemailCountSource.init(subscriptionSource:accountController:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t *VMDVoicemailCountSource.init(subscriptionSource:accountController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = specialized VMDVoicemailCountSource.init(subscriptionSource:accountController:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a1);
  return v5;
}

Swift::Void __swiftcall VMDVoicemailCountSource.subscribeToNotifications()()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100207520;
  uint64_t v3 = self;
  id v4 = [v3 defaultCenter];
  uint64_t v5 = VMVoicemailSubscriptionStateStatusChangedNotification;
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = *(void *)(v1 + 80);
  v7[2] = v8;
  uint64_t v9 = *(void *)(v1 + 88);
  v7[3] = v9;
  v7[4] = v6;
  double v34 = partial apply for closure #1 in VMDVoicemailCountSource.subscribeToNotifications();
  id v35 = v7;
  uint64_t v29 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  id v32 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  uint64_t v33 = &block_descriptor_17;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_release();
  id v11 = [v4 addObserverForName:v5 object:0 queue:0 usingBlock:v10];
  _Block_release(v10);

  *(void *)(v2 + 56) = swift_getObjectType();
  *(void *)(v2 + 32) = v11;
  id v12 = [v3 defaultCenter];
  uint64_t v13 = VMVoicemailVoicemailsChangedNotification;
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v8;
  v15[3] = v29;
  void v15[4] = v14;
  double v34 = partial apply for closure #2 in VMDVoicemailCountSource.subscribeToNotifications();
  id v35 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  id v32 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  uint64_t v33 = &block_descriptor_10_0;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_release();
  id v17 = [v12 addObserverForName:v13 object:0 queue:0 usingBlock:v16];
  _Block_release(v16);

  *(void *)(v2 + 88) = swift_getObjectType();
  *(void *)(v2 + 64) = v17;
  id v18 = [v3 defaultCenter];
  uint64_t v19 = VMVoicemailManagerAccountsDidChangeNotification;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v8;
  v21[3] = v29;
  v21[4] = v20;
  double v34 = partial apply for closure #1 in VMDVoicemailCountSource.subscribeToNotifications();
  id v35 = v21;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  id v32 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  uint64_t v33 = &block_descriptor_17;
  unint64_t v22 = _Block_copy(&aBlock);
  swift_release();
  id v23 = [v18 addObserverForName:v19 object:0 queue:0 usingBlock:v22];
  _Block_release(v22);

  *(void *)(v2 + 120) = swift_getObjectType();
  *(void *)(v2 + 96) = v23;
  id v24 = [v3 defaultCenter];
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v8;
  v26[3] = v29;
  v26[4] = v25;
  double v34 = partial apply for closure #1 in VMDVoicemailCountSource.subscribeToNotifications();
  id v35 = v26;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  id v32 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  uint64_t v33 = &block_descriptor_24;
  id v27 = _Block_copy(&aBlock);
  swift_release();
  id v28 = [v24 addObserverForName:UIApplicationWillEnterForegroundNotification object:0 queue:0 usingBlock:v27];
  _Block_release(v27);

  *(void *)(v2 + 152) = swift_getObjectType();
  *(void *)(v2 + 128) = v28;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 + 120)) = v2;
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in VMDVoicemailCountSource.subscribeToNotifications()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 208))(result);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall VMDVoicemailCountSource.invalidateBadge()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in VMDVoicemailCountSource.invalidateBadge();
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    void v13[2] = v9;
    v13[3] = v10;
  }
  swift_task_create();
  swift_release();
}

uint64_t closure #1 in VMDVoicemailCountSource.invalidateBadge()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t (*)(void))(*(void *)(*(void *)a4 + 216) + **(int **)(*(void *)a4 + 216));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return v7();
}

uint64_t VMDVoicemailCountSource._invalidateBadge()()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(VMDVoicemailCountSource._invalidateBadge(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 128);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = -1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Subject<>.send()();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t VMDVoicemailCountSource.listen(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for VoicemailActor();
  swift_retain();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  unint64_t v10 = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = inited;
  v11[3] = v10;
  v11[4] = v2;
  v11[5] = a1;
  v11[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in VMDVoicemailCountSource.listen(_:), (uint64_t)v11);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t closure #1 in VMDVoicemailCountSource.listen(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>);
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>.Iterator);
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  v6[13] = type metadata accessor for VoicemailActor();
  swift_initStaticObject();
  v6[14] = lazy protocol witness table accessor for type VoicemailActor and conformance VoicemailActor();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[15] = v10;
  v6[16] = v9;
  return _swift_task_switch(closure #1 in VMDVoicemailCountSource.listen(_:), v10, v9);
}

uint64_t closure #1 in VMDVoicemailCountSource.listen(_:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  v0[2] = *(void *)(v0[4] + *(void *)(*(void *)v0[4] + 136));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  Publisher<>.values.getter();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[17] = swift_initStaticObject();
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in VMDVoicemailCountSource.listen(_:);
  uint64_t v6 = v0[10];
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 21, v6, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(v2 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = closure #1 in VVMVoicemailCountSource.listen(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = closure #1 in VMDVoicemailCountSource.listen(_:);
  }
  return _swift_task_switch(v7, v4, v6);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 169) = *(unsigned char *)(v0 + 168);
  return _swift_task_switch(closure #1 in VMDVoicemailCountSource.listen(_:), *(void *)(v0 + 120), *(void *)(v0 + 128));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v5;

  if (*(unsigned char *)(v0 + 169) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))(*(void *)(v0 + 40) + **(int **)(v0 + 40));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    void *v3 = v0;
    v3[1] = closure #1 in VMDVoicemailCountSource.listen(_:);
    return v4();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(), Never>>.Iterator);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in VMDVoicemailCountSource.listen(_:);
  uint64_t v5 = *(void *)(v1 + 80);
  return dispatch thunk of AsyncIteratorProtocol.next()(v1 + 168, v5, v3);
}

uint64_t VMDVoicemailCountSource.unreadVoicemailsCount()()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(VMDVoicemailCountSource.unreadVoicemailsCount(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void);
  void *v8;
  uint64_t v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  v0[3] = v2;
  uint64_t v3 = (uint64_t *)(v1 + v2);
  uint64_t v4 = *((unsigned __int8 *)v3 + 8);
  if (v4 == 255)
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[4] = v8;
    *uint64_t v8 = v0;
    v8[1] = VMDVoicemailCountSource.unreadVoicemailsCount();
    v8[5] = v0[2];
    return _swift_task_switch(closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount(), 0, 0);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t (*)(uint64_t, void))v0[1];
    return v6(v5, v4 & 1);
  }
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;

  uint64_t v1 = *(unsigned char *)(v0 + 48) & 1;
  uint64_t v2 = *(void *)(v0 + 16) + *(void *)(v0 + 24);
  *(void *)uint64_t v2 = *(void *)(v0 + 40);
  *(unsigned char *)(v2 + 8) = v1;
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48) & 1);
}

uint64_t VMDVoicemailCountSource.unreadVoicemailsCount()(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  *(unsigned char *)(v3 + 48) = a2;
  swift_task_dealloc();
  return _swift_task_switch(VMDVoicemailCountSource.unreadVoicemailsCount(), 0, 0);
}

uint64_t closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount()(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount(), 0, 0);
}

uint64_t closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount()()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (void *)((char *)v1 + *(void *)(*v1 + 104));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_0(v2, v3);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v6 = specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount(), v1, v5);
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo9VMAccountCG_SSs5NeverOTg50108_s11MobilePhone23VMDVoicemailCountSourceC016unreadVoicemailsD0AA24VoicemailBadgeCalculatorC0D6ResultOyYaFAHyw10XEfU_SSSo9D53Ccfu_32f6cd0e9f49fdf63c81bd7aee41273344AJSSTf3nnnpk_nTf1cn_n((unint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = specialized Set.init<A>(_:)(v7);
  v0[6] = v8;
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t (*)(uint64_t))(*(void *)(*v1 + 240) + **(int **)(*v1 + 240));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[7] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount();
  return v11(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(unsigned char *)(v0 + 80) & 1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void, uint64_t);
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  uint64_t v9 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001002435E0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2112;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s failed to get voicemail info with error %@", (uint8_t *)v3, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v5 = (uint64_t (*)(void, uint64_t))v0[1];
  return v5(0, 1);
}

uint64_t closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount()(uint64_t a1, char a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount();
  }
  else
  {
    *(unsigned char *)(v6 + 80) = a2;
    *(void *)(v6 + 72) = a1;
    uint64_t v7 = closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount();
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t closure #1 in closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount()(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  uint64_t v9 = (void *)(a2 + *(void *)(*(void *)a2 + 104));
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  __swift_project_boxed_opaque_existential_0(v9, v10);
  id v12 = [v8 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v10, v11);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = *v1;
  v2[10] = *(void *)(*v1 + 88);
  v2[11] = *(void *)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[12] = AssociatedTypeWitness;
  v2[13] = *(void *)(AssociatedTypeWitness - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:), 0, 0);
}

uint64_t VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)()
{
  uint64_t v12 = v0;
  *(void *)(v0 + 120) = *(void *)(**(void **)(v0 + 72) + 112);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100243500, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: Fetching", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v4 = *(void *)(v0 + 80);
  *(void *)(v0 + 128) = *(void *)(**(void **)(v0 + 72) + 96);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 24) + **(int **)(v4 + 24));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  return v10(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  }
  else {
    os_log_type_t v2 = VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  void *v21;
  uint64_t (*v22)(void, void);
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = v0[6].i64[0];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v1, AssociatedConformanceWitness);
  v0[9].i64[1] = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      v0[2].i64[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100243500, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2050;
      swift_getAssociatedTypeWitness();
      v0[3].i64[0] = Array.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Found %{public}ld subscriptions in use", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v16 = v0[4].i64[0];
    uint64_t v15 = v0[4].i64[1];
    id v17 = v15 + v0[8].i64[0];
    id v18 = v15 + v0[7].i64[1];
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoicemailBadgeCalculator.CountResult?);
    uint64_t v20 = (int8x16_t *)swift_task_alloc();
    v0[10].i64[0] = (uint64_t)v20;
    v20[1] = vextq_s8(v0[5], v0[5], 8uLL);
    v20[2].i64[0] = v4;
    v20[2].i64[1] = v16;
    v20[3].i64[0] = v17;
    v20[3].i64[1] = v18;
    uint64_t v21 = (void *)swift_task_alloc();
    v0[10].i64[1] = (uint64_t)v21;
    *uint64_t v21 = v0;
    v21[1] = VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
    return withTaskGroup<A, B>(of:returning:isolation:body:)(&v0[1], v19, &type metadata for VoicemailBadgeCalculator.CountResult, 0, 0, &async function pointer to partial apply for closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:), v20, v19);
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.default.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[6].i64[1];
    uint64_t v12 = v0[7].i64[0];
    uint64_t v13 = v0[6].i64[0];
    if (v10)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      v0[2].i64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100243500, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: Found no subscriptions", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    }
    swift_task_dealloc();
    unint64_t v22 = (uint64_t (*)(void, void))v0->i64[1];
    return v22(0, 0);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  uint64_t v1 = *(void *)(v0 + 16);
  os_log_type_t v2 = *(unsigned __int8 *)(v0 + 24);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[8] = a3;
  v8[9] = a4;
  v8[6] = a1;
  v8[7] = a2;
  uint64_t v10 = type metadata accessor for Logger();
  v8[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[15] = v11;
  v8[16] = *(void *)(v11 + 64);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  uint64_t v12 = *(void *)(a7 - 8);
  v8[19] = v12;
  v8[20] = *(void *)(v12 + 64);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v8[23] = swift_task_alloc();
  v8[24] = swift_getAssociatedTypeWitness();
  v8[25] = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[26] = AssociatedTypeWitness;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  v8[27] = v14;
  v8[28] = *(void *)(v14 + 64);
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = swift_task_alloc();
  return _swift_task_switch(closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:), 0, 0);
}

uint64_t closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)()
{
  swift_bridgeObjectRetain();
  if (Array.endIndex.getter())
  {
    uint64_t v1 = *(void *)(v0 + 216);
    uint64_t v39 = *(void *)(v0 + 224);
    uint64_t v2 = *(void *)(v0 + 152);
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = 0;
    uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
    uint64_t v60 = AssociatedConformanceWitness;
    uint64_t v58 = v1;
    id v59 = (void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    id v57 = (void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32);
    uint64_t v55 = (void (**)(void, void))(v1 + 8);
    uint64_t v40 = v3;
    uint64_t v41 = v2;
    do
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
        v19(*(void *)(v0 + 248), *(void *)(v0 + 64)+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(void *)(v58 + 72) * v5, *(void *)(v0 + 208));
        uint64_t v20 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v26 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v39 != 8)
        {
          __break(1u);
          return AsyncSequence.reduce<A>(into:_:)(v26, v27, v28, v29, v30, v31, WitnessTable);
        }
        uint64_t v33 = v26;
        uint64_t v34 = *(void *)(v0 + 248);
        uint64_t v35 = *(void *)(v0 + 208);
        *(void *)(v0 + 32) = v33;
        uint64_t v19 = *v59;
        (*v59)(v34, v0 + 32, v35);
        swift_unknownObjectRelease();
        uint64_t v20 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_14:
          __break(1u);
          break;
        }
      }
      uint64_t v21 = *(void *)(v0 + 208);
      unint64_t v22 = *v57;
      (*v57)(*(void *)(v0 + 240), *(void *)(v0 + 248), v21);
      if ((v56(v21, v60) & 1) == 0)
      {
        uint64_t v23 = (*(uint64_t (**)(void))(v60 + 16))(*(void *)(v0 + 208));
        if (!v24
          || (char v25 = specialized Set.contains(_:)(v23, v24, *(void *)(v0 + 72)),
              swift_bridgeObjectRelease(),
              (v25 & 1) == 0))
        {
          uint64_t v46 = *(void *)(v0 + 240);
          uint64_t v54 = *(void *)(v0 + 232);
          uint64_t v49 = *(void *)(v0 + 224);
          uint64_t v53 = *(void *)(v0 + 208);
          uint64_t v6 = *(void *)(v0 + 176);
          uint64_t v7 = *(void *)(v0 + 184);
          uint64_t v50 = v7;
          uint64_t v8 = *(void *)(v0 + 168);
          uint64_t v48 = *(void *)(v0 + 160);
          id v45 = v19;
          uint64_t v9 = *(void *)(v0 + 144);
          uint64_t v52 = *(void *)(v0 + 136);
          uint64_t v10 = *(void *)(v0 + 112);
          uint64_t v11 = *(void *)(v0 + 80);
          uint64_t v42 = *(void *)(v0 + 88);
          uint64_t v12 = type metadata accessor for TaskPriority();
          long long v51 = *(_OWORD *)(v0 + 96);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
          (*(void (**)(uint64_t, uint64_t, void))(v41 + 16))(v6, v11, v51);
          uint64_t v44 = v10;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v9, v42, v10);
          uint64_t v43 = *(void (**)(uint64_t, uint64_t, void))(v41 + 32);
          v43(v8, v6, v51);
          v45(v54, v46, v53);
          uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
          v47(v52, v9, v10);
          unint64_t v13 = (*(unsigned __int8 *)(v41 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
          unint64_t v14 = (v48 + *(unsigned __int8 *)(v58 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
          unint64_t v15 = (v49 + *(unsigned __int8 *)(v40 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
          uint64_t v16 = swift_allocObject();
          *(void *)(v16 + 16) = 0;
          *(void *)(v16 + 24) = 0;
          *(_OWORD *)(v16 + 32) = v51;
          v43(v16 + v13, v8, v51);
          v22(v16 + v14, v54, v53);
          v47(v16 + v15, v52, v44);
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<VoicemailBadgeCalculator.CountResult?>);
          _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(v50, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:), v16, v17);
          outlined destroy of TaskPriority?(v50);
        }
      }
      (*v55)(*(void *)(v0 + 240), *(void *)(v0 + 208));
      ++v5;
    }
    while (v20 != Array.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 40) = **(void **)(v0 + 56);
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 0;
  id v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v36;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<VoicemailBadgeCalculator.CountResult?>);
  uint64_t WitnessTable = swift_getWitnessTable();
  *id v36 = v0;
  v36[1] = closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  uint64_t v26 = *(void *)(v0 + 48);
  uint64_t v31 = &type metadata for VoicemailBadgeCalculator.CountResult;
  id v28 = &async function pointer to closure #2 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  uint64_t v27 = v0 + 16;
  uint64_t v29 = 0;
  uint64_t v30 = v37;
  return AsyncSequence.reduce<A>(into:_:)(v26, v27, v28, v29, v30, v31, WitnessTable);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a1;
  v8[7] = a6;
  unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 32) + **(int **)(a8 + 32));
  uint64_t v12 = (void *)swift_task_alloc();
  v8[8] = v12;
  *uint64_t v12 = v8;
  v12[1] = closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  return v14(a5, a7, a8);
}

uint64_t closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(char a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(unsigned char *)(v4 + 92) = a1;
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:);
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)()
{
  uint64_t v17 = v0;
  id v1 = *(id *)(v0 + 72);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 72);
    int v5 = *(unsigned __int8 *)(v0 + 92);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100243500, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 1024;
    *(_DWORD *)(v0 + 88) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 18) = 2112;
    *(void *)(v0 + 40) = v4;
    id v7 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Voicemail Info returned available: %{BOOL}d, count: %@", (uint8_t *)v6, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 72);
  }
  uint64_t v9 = *(void **)(v0 + 72);
  if (*(unsigned char *)(v0 + 92) == 1)
  {
    uint64_t v10 = Int.init(truncating:)();

    uint64_t v11 = *(uint64_t **)(v0 + 48);
    if (v10 < 1)
    {
      *uint64_t v11 = 0;
      char v12 = 1;
    }
    else
    {
      char v12 = 0;
      *uint64_t v11 = v10;
    }
  }
  else
  {

    **(void **)(v0 + 48) = 0;
    char v12 = -1;
  }
  *(unsigned char *)(*(void *)(v0 + 48) + 8) = v12;
  unint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v9 = v0;
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315394;
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100243500, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2112;
    swift_errorRetain();
    int v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s failed to get voicemail info with error %@", (uint8_t *)v3, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  **(void **)(v0 + 48) = 0;
  *(unsigned char *)(*(void *)(v0 + 48) + 8) = -1;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t closure #2 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  *(unsigned char *)(v2 + 32) = *((unsigned char *)a2 + 8);
  return _swift_task_switch(closure #2 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:), 0, 0);
}

uint64_t closure #2 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 == 255) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = v1 | *(unsigned char *)(v2 + 8);
  BOOL v5 = __CFADD__(*(void *)v2, v3);
  uint64_t v6 = *(void *)v2 + v3;
  char v7 = v5;
  if (v4)
  {
    if ((v7 & 1) == 0)
    {
LABEL_9:
      *(void *)uint64_t v2 = v6;
      *(unsigned char *)(v2 + 8) = v4 & 1;
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    __break(1u);
  }
  if ((v7 & 1) == 0) {
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t VMDVoicemailCountSource.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  __swift_destroy_boxed_opaque_existential_0(v0 + *(void *)(*(void *)v0 + 104));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t VMDVoicemailCountSource.__deallocating_deinit()
{
  VMDVoicemailCountSource.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for VoicemailBadgeCalculatorVoicemailSource.unreadVoicemailsCount() in conformance VMDVoicemailCountSource<A>()
{
  char v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 232) + **(int **)(**(void **)v0 + 232));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for VoicemailBadgeCalculatorVoicemailSource.unreadVoicemailsCount() in conformance VVMVoicemailCountSource;
  return v4();
}

uint64_t protocol witness for VoicemailBadgeCalculatorVoicemailSource.listen(_:) in conformance VMDVoicemailCountSource<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t protocol witness for VMDVoicemailCountSourceSubscriptionSource.subscriptionInfo() in conformance CoreTelephonyClient(uint64_t a1)
{
  v2[16] = a1;
  uint64_t v3 = *v1;
  v2[2] = v2;
  v2[7] = v2 + 15;
  v2[3] = protocol witness for VMDVoicemailCountSourceSubscriptionSource.subscriptionInfo() in conformance CoreTelephonyClient;
  uint64_t v4 = swift_continuation_init();
  v2[10] = _NSConcreteStackBlock;
  v2[11] = 0x40000000;
  v2[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VMVoicemailGreeting?, @unowned NSError?) -> () with result type VMVoicemailGreeting;
  v2[13] = &block_descriptor_44;
  v2[14] = v4;
  [v3 getSubscriptionInfo:v2 + 10];
  return _swift_continuation_await(v2 + 2);
}

uint64_t protocol witness for VMDVoicemailCountSourceSubscriptionSource.subscriptionInfo() in conformance CoreTelephonyClient()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  else {
    **(void **)(*v0 + 128) = *(void *)(*v0 + 120);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t protocol witness for VMDVoicemailCountSourceSubscriptionSource._voicemailInfo(_:) in conformance CoreTelephonyClient(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  v2[2] = v2;
  v2[7] = v2 + 15;
  v2[3] = protocol witness for VMDVoicemailCountSourceSubscriptionSource._voicemailInfo(_:) in conformance CoreTelephonyClient;
  uint64_t v5 = swift_continuation_init();
  v2[10] = _NSConcreteStackBlock;
  v2[11] = 0x40000000;
  v2[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSNumber, @unowned NSString, @unowned NSError?) -> () with result type (Bool, NSNumber, String);
  v2[13] = &block_descriptor_42;
  v2[14] = v5;
  [v4 _getVoicemailInfo:v3 completion:v2 + 10];
  return _swift_continuation_await(v2 + 2);
}

uint64_t protocol witness for VMDVoicemailCountSourceSubscriptionSource._voicemailInfo(_:) in conformance CoreTelephonyClient()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3(0);
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(v1 + 120);
    uint64_t v6 = *(void *)(v1 + 128);
    uint64_t v7 = *(void *)(v1 + 136);
    uint64_t v8 = *(void *)(v1 + 144);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8);
    return v9(v5, v6, v7, v8);
  }
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSNumber, @unowned NSString, @unowned NSError?) -> () with result type (Bool, NSNumber, String)(uint64_t a1, char a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v7 = swift_allocError();
    *uint64_t v8 = a5;
    id v9 = a5;
    return _swift_continuation_throwingResumeWithError(v5, v7);
  }
  else
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = *(void *)(*(void *)(v5 + 64) + 40);
    *(unsigned char *)uint64_t v13 = a2;
    *(void *)(v13 + 8) = a3;
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v14;
    id v15 = a3;
    return _swift_continuation_throwingResume(v5);
  }
}

id protocol witness for VMDVoicemailCountSourceSubscriptionContext.isSimHidden.getter in conformance CTXPCServiceSubscriptionContext()
{
  return [*v0 isSimHidden];
}

uint64_t protocol witness for VMDVoicemailCountSourceSubscriptionContext.labelID.getter in conformance CTXPCServiceSubscriptionContext()
{
  id v1 = [*v0 labelID];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for VMDVoicemailCountSourceSubscriptionInfo.subscriptionsInUse.getter in conformance CTXPCServiceSubscriptionInfo()
{
  id v1 = [*v0 subscriptionsInUse];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for CTXPCServiceSubscriptionContext();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t *specialized VMDVoicemailCountSource.init(subscriptionSource:accountController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 112);
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))((uint64_t)v3 + v7, v9, v8);
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 120)) = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v10 = (uint64_t)v3 + *(void *)(*v3 + 128);
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = -1;
  uint64_t v11 = *(void *)(*v3 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(uint64_t *)((char *)v3 + v11) = PassthroughSubject.init()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v6 + 80) - 8) + 16))((uint64_t)v3 + *(void *)(*v3 + 96), a1);
  uint64_t v12 = outlined init with copy of Tip(a2, (uint64_t)v3 + *(void *)(*v3 + 104));
  (*(void (**)(uint64_t))(*v3 + 200))(v12);
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v3;
}

uint64_t sub_1001AC108()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #2 in VMDVoicemailCountSource.subscribeToNotifications()()
{
  return closure #1 in VMDVoicemailCountSource.subscribeToNotifications()();
}

uint64_t sub_1001AC160()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AC198()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in VMDVoicemailCountSource.invalidateBadge()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in VMDVoicemailCountSource.invalidateBadge()(a1, v4, v5, v6);
}

uint64_t sub_1001AC28C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AC2C4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in VMDVoicemailCountSource.listen(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VMDVoicemailCountSource.listen(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v11 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(a1, a2, v8, v9, v11, v10, v6, v7);
}

_UNKNOWN **associated type witness table accessor for VMDVoicemailCountSourceSubscriptionSource.SubscriptionInfo : VMDVoicemailCountSourceSubscriptionInfo in CoreTelephonyClient()
{
  return &protocol witness table for CTXPCServiceSubscriptionInfo;
}

_UNKNOWN **associated type witness table accessor for VMDVoicemailCountSourceSubscriptionInfo.SubscriptionContext : VMDVoicemailCountSourceSubscriptionContext in CTXPCServiceSubscriptionInfo()
{
  return &protocol witness table for CTXPCServiceSubscriptionContext;
}

uint64_t type metadata completion function for VMDVoicemailCountSource()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for VMDVoicemailCountSource()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for CTXPCServiceSubscriptionContext()
{
  unint64_t result = lazy cache variable for type metadata for CTXPCServiceSubscriptionContext;
  if (!lazy cache variable for type metadata for CTXPCServiceSubscriptionContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CTXPCServiceSubscriptionContext);
  }
  return result;
}

uint64_t sub_1001AC618()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v17 = (v3 + 48) & ~v3;
  uint64_t v4 = v17 + *(void *)(v2 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v3 | v11 | v6 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v17, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);

  return _swift_deallocObject(v0, v15, v13);
}

uint64_t partial apply for closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  unint64_t v8 = v7 + *(void *)(*(void *)(v6 - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Logger() - 8) + 80);
  unint64_t v13 = v10 + v11 + v12;
  uint64_t v14 = v1[2];
  uint64_t v15 = v1[3];
  uint64_t v16 = (uint64_t)v1 + v7;
  uint64_t v17 = (uint64_t)v1 + v10;
  uint64_t v18 = (uint64_t)v1 + (v13 & ~v12);
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v19;
  void *v19 = v3;
  v19[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in closure #1 in VMDVoicemailCountSource.fetchNonVVMessages(ignoringAccountsWithIds:)(a1, v14, v15, v16, v17, v18, v6, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount()(void **a1)
{
  return closure #1 in closure #1 in VMDVoicemailCountSource.unreadVoicemailsCount()(a1, v1) & 1;
}

unint64_t lazy protocol witness table accessor for type OrientationMonitorLockedStatus and conformance OrientationMonitorLockedStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type OrientationMonitorLockedStatus and conformance OrientationMonitorLockedStatus;
  if (!lazy protocol witness table cache variable for type OrientationMonitorLockedStatus and conformance OrientationMonitorLockedStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrientationMonitorLockedStatus and conformance OrientationMonitorLockedStatus);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OrientationMonitorLockedStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001ACCACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrientationMonitorLockedStatus()
{
  return &type metadata for OrientationMonitorLockedStatus;
}

uint64_t KeypadSearchViewController.onDismiss.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MPKeypadSearchViewController_onDismiss);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v1);
  return v1;
}

id KeypadSearchViewController.__allocating_init(onDismiss:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  unsigned int v6 = &v5[OBJC_IVAR___MPKeypadSearchViewController_pendingText];
  void *v6 = 0;
  v6[1] = 0;
  v5[OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder] = 1;
  *(void *)&v5[OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar] = 0;
  *(void *)&v5[OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController] = 0;
  unint64_t v7 = &v5[OBJC_IVAR___MPKeypadSearchViewController_onDismiss];
  *unint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return [super initWithNibName:0 bundle:0];
}

id KeypadSearchViewController.init(onDismiss:)(uint64_t a1, uint64_t a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  unsigned int v6 = &v2[OBJC_IVAR___MPKeypadSearchViewController_pendingText];
  void *v6 = 0;
  v6[1] = 0;
  v2[OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder] = 1;
  *(void *)&v2[OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar] = 0;
  *(void *)&v2[OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController] = 0;
  unint64_t v7 = &v2[OBJC_IVAR___MPKeypadSearchViewController_onDismiss];
  *unint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return [super initWithNibName:0 bundle:0];
}

void KeypadSearchViewController.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR___MPKeypadSearchViewController_pendingText];
  *uint64_t v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder] = 1;
  *(void *)&v0[OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar] = 0;
  *(void *)&v0[OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall KeypadSearchViewController.viewDidLoad()()
{
  v4.receiver = v0;
  v4.super_class = (Class)swift_getObjectType();
  [super viewDidLoad];
  id v1 = [v0 view];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [self systemBackgroundColor];
    [v2 setBackgroundColor:v3];

    KeypadSearchViewController.setupConstraints()();
  }
  else
  {
    __break(1u);
  }
}

void KeypadSearchViewController.setupConstraints()()
{
  id v1 = v0;
  id v2 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.keypadSearchResultsController.getter);
  id v3 = [v2 view];

  if (!v3) {
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100207760;
  id v5 = [v3 topAnchor];
  id v6 = [v1 view];
  if (!v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v7 = v6;
  id v8 = [v6 topAnchor];

  id v9 = [v5 constraintEqualToAnchor:v8];
  *(void *)(v4 + 32) = v9;
  id v10 = [v3 bottomAnchor];
  id v11 = [v1 view];
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  id v13 = [v11 bottomAnchor];

  id v14 = [v10 constraintEqualToAnchor:v13];
  *(void *)(v4 + 40) = v14;
  id v15 = [v3 leadingAnchor];
  id v16 = [v1 view];
  if (!v16)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v17 = v16;
  id v18 = [v16 leadingAnchor];

  id v19 = [v15 constraintEqualToAnchor:v18];
  *(void *)(v4 + 48) = v19;
  id v20 = [v3 trailingAnchor];
  id v21 = [v1 view];
  if (!v21)
  {
LABEL_13:
    __break(1u);
    return;
  }
  unint64_t v22 = v21;
  id v23 = [v21 trailingAnchor];

  id v24 = [v20 constraintEqualToAnchor:v23];
  *(void *)(v4 + 56) = v24;
  specialized Array._endMutation()();
  char v25 = self;
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 activateConstraints:isa];
}

Swift::Void __swiftcall KeypadSearchViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  id v2 = v1;
  v14.receiver = v2;
  v14.super_class = (Class)swift_getObjectType();
  [super viewWillAppear:a1];
  id v4 = [v2 navigationController];
  if (v4)
  {
    id v5 = v4;
    [v4 setNavigationBarHidden:0 animated:0];
  }
  id v6 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.keypadSearchResultsController.getter);
  id v7 = [v2 navigationController];
  (*(void (**)(id))((swift_isaMask & *v6) + 0xE0))(v7);

  id v8 = &v2[OBJC_IVAR___MPKeypadSearchViewController_pendingText];
  if (*(void *)&v2[OBJC_IVAR___MPKeypadSearchViewController_pendingText + 8])
  {
    swift_bridgeObjectRetain();
    id v9 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setText:v10];

    *(void *)id v8 = 0;
    *((void *)v8 + 1) = 0;
    swift_bridgeObjectRelease();
    id v11 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.keypadSearchResultsController.getter);
    id v12 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    (*(void (**)(void))((swift_isaMask & *v11) + 0x1B8))();
  }
  if (v2[OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder] == 1)
  {
    id v13 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    [v13 becomeFirstResponder];
  }
}

id KeypadSearchViewController.keypadSearchResultsController.getter(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2(v2);
    id v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

Swift::Void __swiftcall KeypadSearchViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  [super viewWillDisappear:a1];
  id v3 = [v1 navigationController];
  if (v3)
  {
    id v4 = v3;
    [v3 setNavigationBarHidden:0 animated:0];
  }
}

Swift::Void __swiftcall KeypadSearchViewController.updateSearchText(_:)(Swift::String_optional a1)
{
  object = a1.value._object;
  uint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  if ([v1 isViewLoaded])
  {
    id v4 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    if (object) {
      object = String._bridgeToObjectiveC()();
    }
    [v4 setText:object];

    objc_super v5 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.keypadSearchResultsController.getter);
    id v7 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    (*(void (**)(void))((swift_isaMask & *v5) + 0x1B8))();
  }
  else
  {
    id v6 = (uint64_t *)&v1[OBJC_IVAR___MPKeypadSearchViewController_pendingText];
    uint64_t *v6 = countAndFlagsBits;
    v6[1] = (uint64_t)object;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

id closure #1 in KeypadSearchViewController.searchBar.getter(void *a1)
{
  id v2 = [objc_allocWithZone((Class)UISearchBar) init];
  [v2 setDelegate:a1];
  [v2 _setAutoDisableCancelButton:0];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v2 setShowsCancelButton:1];
  [v2 setSearchBarStyle:2];
  [v2 setKeyboardType:5];
  id v3 = [self mainBundle];
  v10._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0x484352414553;
  v4._object = (void *)0xE600000000000000;
  v5.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v5.value._object = (void *)0xE900000000000073;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v10);

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setPlaceholder:v7];

  id v8 = [a1 navigationItem];
  [v8 setTitleView:v2];

  return v2;
}

void *closure #1 in KeypadSearchViewController.keypadSearchResultsController.getter(void *a1)
{
  type metadata accessor for SearchViewController(0);
  id v2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v3 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0xB0);
  uint64_t v4 = swift_unknownObjectRetain();
  v3(v4);
  Swift::String_optional v5 = (objc_class *)type metadata accessor for ContactsSearchController();
  id v6 = objc_allocWithZone(v5);
  id v7 = objc_allocWithZone((Class)CNContactStore);
  id v8 = v6;
  id v9 = [v7 init];
  Swift::String v10 = (objc_class *)type metadata accessor for ContactSearchManager();
  id v11 = objc_allocWithZone(v10);
  id v12 = specialized ContactSearchManager.init(type:contactStore:)(2, v9);

  id v13 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v14 = objc_allocWithZone(v5);
  id v15 = (void *)ContactsSearchController.init(contactSearchType:searchManager:featureFlags:)(2uLL, v12, v13);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  id v16 = objc_allocWithZone(v5);
  id v17 = objc_allocWithZone((Class)CNContactStore);
  id v18 = v16;
  id v19 = [v17 init];
  id v20 = objc_allocWithZone(v10);
  id v21 = specialized ContactSearchManager.init(type:contactStore:)(3, v19);

  id v22 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  id v23 = objc_allocWithZone(v5);
  id v24 = (void *)ContactsSearchController.init(contactSearchType:searchManager:featureFlags:)(3uLL, v21, v22);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1002053B0;
  *(void *)(v25 + 32) = v15;
  *(void *)(v25 + 40) = v24;
  uint64_t v35 = v25;
  specialized Array._endMutation()();
  uint64_t v26 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0x170);
  id v27 = v15;
  id v28 = v24;
  v26(v35);
  unint64_t result = [v2 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v30 = result;
  [result setTranslatesAutoresizingMaskIntoConstraints:0];

  [a1 addChildViewController:v2];
  uint64_t v31 = *(void **)((char *)v2 + OBJC_IVAR___MPSearchViewController_tableView);
  id v32 = v31;
  v36.value.super.super.super.Class isa = (Class)v31;
  UIViewController.setContentScrollView(_:)(v36);

  unint64_t result = [a1 view];
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v33 = result;
  unint64_t result = [v2 view];
  if (result)
  {
    uint64_t v34 = result;
    [v33 addSubview:result];

    [v2 didMoveToParentViewController:a1];
    return v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Void __swiftcall KeypadSearchViewController.searchBarSearchButtonClicked(_:)(UISearchBar a1)
{
  id v2 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
  unsigned int v3 = [v2 isFirstResponder];

  if (v3)
  {
    id v4 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    [v4 resignFirstResponder];

    *(unsigned char *)(v1 + OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder) = 0;
  }
}

Swift::Void __swiftcall KeypadSearchViewController.searchControllerDidSelectRow()()
{
  id v1 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
  unsigned int v2 = [v1 isFirstResponder];

  if (v2)
  {
    id v3 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    [v3 resignFirstResponder];

    *(unsigned char *)(v0 + OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder) = 1;
  }
}

Swift::Void __swiftcall KeypadSearchViewController.searchBar(_:textDidChange:)(UISearchBar _, Swift::String textDidChange)
{
  id v3 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___keypadSearchResultsController, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.keypadSearchResultsController.getter);
  (*(void (**)(Class))((swift_isaMask & *v3) + 0x1B8))(_.super.super.super.isa);
}

void KeypadSearchViewController.init(nibName:bundle:)()
{
}

id specialized KeypadSearchViewController.searchBarCancelButtonClicked(_:)()
{
  id v1 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
  unsigned int v2 = [v1 isFirstResponder];

  if (v2)
  {
    id v3 = KeypadSearchViewController.keypadSearchResultsController.getter(&OBJC_IVAR___MPKeypadSearchViewController____lazy_storage___searchBar, (uint64_t (*)(uint64_t))closure #1 in KeypadSearchViewController.searchBar.getter);
    [v3 resignFirstResponder];

    v0[OBJC_IVAR___MPKeypadSearchViewController_searchBarWasFirstResponder] = 0;
  }
  id result = [v0 dismissViewControllerAnimated:1 completion:0];
  Swift::String_optional v5 = *(uint64_t (**)(id))&v0[OBJC_IVAR___MPKeypadSearchViewController_onDismiss];
  if (v5) {
    return (id)v5(result);
  }
  return result;
}

uint64_t type metadata accessor for KeypadSearchViewController()
{
  return self;
}

uint64_t sub_1001AE914()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t TipsRecentsEventSignals.defaults.getter()
{
  return swift_retain();
}

id TipsRecentsEventSignals.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for Defaults();
  uint64_t v1 = swift_allocObject();
  unsigned int v2 = (char *)objc_allocWithZone(ObjectType);
  *(void *)&v2[OBJC_IVAR___MPTipsRecentsEventSignals_defaults] = v1;
  v5.receiver = v2;
  v5.super_class = ObjectType;
  [super init];
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

id TipsRecentsEventSignals.__allocating_init(defaults:)(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___MPTipsRecentsEventSignals_defaults] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return [super init];
}

id TipsRecentsEventSignals.init(defaults:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR___MPTipsRecentsEventSignals_defaults] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return [super init];
}

uint64_t TipsRecentsEventSignals.donateTipsEventSignals(for:)(uint64_t a1)
{
  objc_super v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)
                                       + async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:));
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return v5(a1);
}

uint64_t @objc closure #1 in TipsRecentsEventSignals.donateTipsEventSignals(for:)(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  Swift::String v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)
                                        + async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:));
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = @objc closure #1 in TipsRecentsEventSignals.donateTipsEventSignals(for:);
  return v10((uint64_t)v6);
}

uint64_t @objc closure #1 in TipsRecentsEventSignals.donateTipsEventSignals(for:)()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 32);
  unsigned int v2 = *(void **)(*v0 + 24);
  id v3 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  id v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

void specialized Defaults.set<A>(_:for:)(uint64_t a1, char a2)
{
  if ((a2 & 0xFE) != 2) {
    goto LABEL_5;
  }
  if (one-time initialization token for isInternalInstall != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Defaults.isInternalInstall & 1) == 0)
  {
    lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(void *)(v3 + 64) = 0;
    *(unsigned char *)(v3 + 72) = 2;
    swift_willThrow();
  }
  else
  {
LABEL_5:
    switch(a2)
    {
      case 2:
      case 3:
      case 5:
      case 6:
        id v9 = [objc_allocWithZone((Class)NSUserDefaults) init];
        goto LABEL_11;
      default:
        uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v6 = v5;
        id v7 = objc_allocWithZone((Class)NSUserDefaults);
        swift_bridgeObjectRetain();
        NSString v8 = String._bridgeToObjectiveC()();
        id v9 = [v7 initWithSuiteName:v8];

        if (v9)
        {
          swift_bridgeObjectRelease();
LABEL_11:
          uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          NSString v12 = String._bridgeToObjectiveC()();
          [v9 setObject:v11 forKey:v12];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          lazy protocol witness table accessor for type Defaults.Error and conformance Defaults.Error();
          swift_allocError();
          *(void *)uint64_t v10 = v4;
          *(void *)(v10 + 8) = v6;
          *(unsigned char *)(v10 + 72) = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        break;
    }
  }
}

uint64_t specialized TipsRecentsEventSignals.isRecentCallContactInFavorites(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(specialized TipsRecentsEventSignals.isRecentCallContactInFavorites(_:), 0, 0);
}

uint64_t specialized TipsRecentsEventSignals.isRecentCallContactInFavorites(_:)()
{
  id v1 = [*(id *)(v0 + 16) contactIdentifier];
  if (v1)
  {
    unsigned int v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    *(void *)(v0 + 24) = v3;
    *(void *)(v0 + 32) = v5;
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      type metadata accessor for ApplicationServices();
      id v7 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
      *(void *)(v0 + 40) = v7;
      uint64_t v8 = ((swift_isaMask & *v7) + 128) & 0xFFFFFFFFFFFFLL | 0x7DD7000000000000;
      *(void *)(v0 + 48) = *(void *)((swift_isaMask & *v7) + 0x80);
      *(void *)(v0 + 56) = v8;
      type metadata accessor for ApplicationServicesActor();
      swift_initStaticObject();
      lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      return _swift_task_switch(specialized TipsRecentsEventSignals.isRecentCallContactInFavorites(_:), v10, v9);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11(0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  id v1 = *(void **)(v0 + 40);
  *(void *)(v0 + 64) = (*(uint64_t (**)(void))(v0 + 48))();

  return _swift_task_switch(specialized TipsRecentsEventSignals.isRecentCallContactInFavorites(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  char v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  id v1 = (void *)v0[8];
  uint64_t v3 = v0[3];
  unsigned int v2 = v0[4];
  unint64_t v4 = [v1 favoritesEntries];
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNFavoritesEntry);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Sequence.contains(where:)(v5, v3, v2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7(v6 & 1);
}

uint64_t specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)(uint64_t a1)
{
  v1[3] = a1;
  uint64_t v2 = type metadata accessor for Calendar();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v1[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DateComponents();
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  return _swift_task_switch(specialized TipsRecentsEventSignals.donateTipsEventSignals(for:), 0, 0);
}

uint64_t specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)()
{
  id v1 = [*(id *)(v0 + 24) contactIdentifier];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      char v7 = 0;
      int v8 = 1;
      char v9 = 5;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0;
  }
  int v8 = 0;
  char v9 = 6;
  char v7 = 1;
LABEL_8:
  *(void *)(v0 + 136) = v3;
  *(void *)(v0 + 144) = v5;
  *(unsigned char *)(v0 + 209) = v9;
  *(unsigned char *)(v0 + 208) = v7;
  char v10 = specialized Defaults.BOOL(for:)(v9);
  *(void *)(v0 + 152) = 0;
  if (v10)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  id v13 = [objc_allocWithZone((Class)CHManager) init];
  *(void *)(v0 + 160) = v13;
  if (!v8)
  {
    id v18 = v13;
    id v19 = *(void **)(v0 + 24);
    swift_bridgeObjectRelease();
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for NSPredicate);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1002053C0;
    id v21 = [v19 callerIdForDisplay];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    uint64_t v25 = NSPredicate.init(format:_:)();
    uint64_t v26 = (uint64_t)[v18 countCallsWithPredicate:v25];

    if (v26 <= 2)
    {

      goto LABEL_10;
    }
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.mobilePhone);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Logging Biome signal for calling a non-contact number.", v30, 2u);
      swift_slowDealloc();
    }

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v33)
    {
      if (v31 == v34 && v33 == v35)
      {
        swift_bridgeObjectRelease_n();
LABEL_27:
        *(void *)(v0 + 176) = type metadata accessor for TPTipsHelper();
        type metadata accessor for MainActor();
        *(void *)(v0 + 184) = static MainActor.shared.getter();
        uint64_t v37 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v39 = v38;
        uint64_t v40 = specialized TipsRecentsEventSignals.donateTipsEventSignals(for:);
LABEL_29:
        id v15 = v40;
        uint64_t v16 = v37;
        uint64_t v17 = v39;
        goto LABEL_30;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36) {
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    *(void *)(v0 + 192) = type metadata accessor for TPTipsHelper();
    type metadata accessor for MainActor();
    *(void *)(v0 + 200) = static MainActor.shared.getter();
    uint64_t v37 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v39 = v41;
    uint64_t v40 = specialized TipsRecentsEventSignals.donateTipsEventSignals(for:);
    goto LABEL_29;
  }
  id v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v14;
  *id v14 = v0;
  v14[1] = specialized TipsRecentsEventSignals.donateTipsEventSignals(for:);
  _OWORD v14[2] = *(void *)(v0 + 24);
  id v15 = specialized TipsRecentsEventSignals.isRecentCallContactInFavorites(_:);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
LABEL_30:
  return _swift_task_switch(v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (*(unsigned char *)(v0 + 210))
  {
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_3;
  }
  unint64_t v5 = *(void *)(v0 + 96);
  char v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  int v8 = *(void *)(v0 + 48);
  uint64_t v60 = *(void *)(v0 + 56);
  uint64_t v62 = *(void *)(v0 + 64);
  char v10 = *(void *)(v0 + 32);
  char v9 = *(void *)(v0 + 40);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v9 + 56))(*(void *)(v0 + 104), 1, 1, v10);
  uint64_t v11 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  LOBYTE(v59) = 1;
  LOBYTE(v58) = 1;
  LOBYTE(v57) = 1;
  LOBYTE(v56) = 1;
  LOBYTE(v55) = 1;
  LOBYTE(v54) = 1;
  LOBYTE(v53) = 1;
  LOBYTE(v52) = 1;
  LOBYTE(v51) = 1;
  LOBYTE(v50) = 1;
  LOBYTE(v49) = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  DateComponents.day.setter();
  static Calendar.current.getter();
  static Date.now.getter();
  Calendar.date(byAdding:to:wrappingComponents:)();
  NSString v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v6, v62);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v60, 1, v62) == 1)
  {
    id v13 = *(void **)(v0 + 160);
    id v14 = *(void *)(v0 + 56);
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));

    swift_bridgeObjectRelease();
    outlined destroy of Date?(v14);
  }
  else
  {
    id v15 = *(void *)(v0 + 144);
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 64));
    uint64_t v16 = *(void **)(v0 + 160);
    if (v15)
    {
      id v18 = *(void *)(v0 + 136);
      uint64_t v17 = *(void *)(v0 + 144);
      type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for NSPredicate);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      id v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1002060A0;
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      *(void *)(v19 + 56) = type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for NSDate);
      *(void *)(v19 + 64) = lazy protocol witness table accessor for type NSDate and conformance NSObject();
      *(void *)(v19 + 32) = isa;
      *(void *)(v19 + 96) = &type metadata for String;
      *(void *)(v19 + 104) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v19 + 72) = v18;
      *(void *)(v19 + 80) = v17;
      id v21 = NSPredicate.init(format:_:)();
      if ((uint64_t)objc_msgSend(v16, "countCallsWithPredicate:", v21, 0, v49, 0, v50, 0, v51, 0, v52, 0, v53, 0, v54, 0, v55, 0, v56,
                      0,
                      v57,
                      0,
                      v58,
                      0,
                      v59) >= 5)
      {
        if (one-time initialization token for mobilePhone != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Logger.mobilePhone);
        uint64_t v34 = Logger.logObject.getter();
        uint64_t v35 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v35))
        {
          char v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Logging Biome signal for calling a non-favorite contact.", v36, 2u);
          swift_slowDealloc();
        }
        uint64_t v37 = *(void *)(v0 + 120);
        uint64_t v61 = *(void *)(v0 + 128);
        uint64_t v38 = *(void *)(v0 + 112);
        uint64_t v39 = *(void *)(v0 + 88);
        uint64_t v40 = *(void *)(v0 + 64);

        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v42;

        v12(v39, v40);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v61, v38);
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (v43)
        {
          if (v41 == v44 && v43 == v45)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            uint64_t v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v46 & 1) == 0) {
              goto LABEL_4;
            }
          }
          *(void *)(v0 + 176) = type metadata accessor for TPTipsHelper();
          type metadata accessor for MainActor();
          *(void *)(v0 + 184) = static MainActor.shared.getter();
          id v1 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v3 = v47;
          unint64_t v4 = specialized TipsRecentsEventSignals.donateTipsEventSignals(for:);
          goto LABEL_5;
        }
LABEL_3:
        swift_bridgeObjectRelease();
LABEL_4:
        *(void *)(v0 + 192) = type metadata accessor for TPTipsHelper();
        type metadata accessor for MainActor();
        *(void *)(v0 + 200) = static MainActor.shared.getter();
        id v1 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v3 = v2;
        unint64_t v4 = specialized TipsRecentsEventSignals.donateTipsEventSignals(for:);
LABEL_5:
        return _swift_task_switch(v4, v1, v3);
      }
      uint64_t v23 = *(void *)(v0 + 120);
      uint64_t v22 = *(void *)(v0 + 128);
      uint64_t v24 = *(void *)(v0 + 112);
      uint64_t v25 = *(void *)(v0 + 88);
      uint64_t v26 = *(void *)(v0 + 64);

      v12(v25, v26);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
    else
    {
      id v28 = *(void *)(v0 + 120);
      uint64_t v27 = *(void *)(v0 + 128);
      os_log_type_t v29 = *(void *)(v0 + 112);
      uint64_t v30 = *(void *)(v0 + 88);
      uint64_t v31 = *(void *)(v0 + 64);

      v12(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

{
  uint64_t v1;

  swift_release();
  dispatch thunk of static TPTipsHelper.donateEventCalledNonFavContact()();
  return _swift_task_switch(specialized TipsRecentsEventSignals.donateTipsEventSignals(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  int v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  id v14 = v0;
  id v1 = *(void *)(v0 + 152);
  specialized Defaults.set<A>(_:for:)(1, *(unsigned char *)(v0 + 209));
  if (v1)
  {
    if (one-time initialization token for mobilePhone != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.mobilePhone);
    uint64_t v3 = Logger.logObject.getter();
    unint64_t v4 = static os_log_type_t.default.getter();
    unint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void **)(v0 + 160);
    if (v5)
    {
      char v7 = *(unsigned __int8 *)(v0 + 208);
      int v8 = (uint8_t *)swift_slowAlloc();
      id v13 = swift_slowAlloc();
      *(_DWORD *)int v8 = 136446210;
      if (v7) {
        char v9 = 0xD000000000000027;
      }
      else {
        char v9 = 0xD000000000000029;
      }
      if (v7) {
        char v10 = 0x800000010023D3F0;
      }
      else {
        char v10 = 0x800000010023D3C0;
      }
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to set true for key %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_errorRelease();
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v1;

  swift_release();
  dispatch thunk of static TPTipsHelper.donateEventCalledNonContact()();
  return _swift_task_switch(specialized TipsRecentsEventSignals.donateTipsEventSignals(for:), 0, 0);
}

uint64_t specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)(char a1)
{
  *(unsigned char *)(*(void *)v1 + 210) = a1;
  swift_task_dealloc();
  return _swift_task_switch(specialized TipsRecentsEventSignals.donateTipsEventSignals(for:), 0, 0);
}

uint64_t type metadata accessor for TipsRecentsEventSignals()
{
  return self;
}

uint64_t sub_1001B093C()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in TipsRecentsEventSignals.donateTipsEventSignals(for:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  unint64_t v4 = (void *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&async function pointer to @objc closure #1 in TipsRecentsEventSignals.donateTipsEventSignals(for:)
                                                      + async function pointer to @objc closure #1 in TipsRecentsEventSignals.donateTipsEventSignals(for:));
  return v6(v2, v3, v4);
}

unint64_t lazy protocol witness table accessor for type NSDate and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDate and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSDate and conformance NSObject)
  {
    type metadata accessor for VMAccount(255, &lazy cache variable for type metadata for NSDate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDate and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor()
{
  unint64_t result = lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor;
  if (!lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor)
  {
    type metadata accessor for ApplicationServicesActor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor);
  }
  return result;
}

uint64_t ContactsService.avatarContacts(for:)(void *a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___MPContactsService_dataProvider);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v5 = [v3 contactByHandleForRecentCall:a1 keyDescriptors:isa];

  if (!v5) {
    goto LABEL_5;
  }
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  lazy protocol witness table accessor for type CHHandle and conformance NSObject();
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [a1 validRemoteParticipantHandles];
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1002053A0;
    *(void *)(v10 + 32) = [objc_allocWithZone((Class)CNMutableContact) init];
    specialized Array._endMutation()();
    return v10;
  }
  uint64_t v8 = v7;
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  uint64_t v10 = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo8CHHandleCG_So9CNContactCs5NeverOTg5053_s11MobilePhone15ContactsServiceC06avatarC03forSaySo9e27CGSo12CHRecentCallC_tFAGSo8D6CXEfU_SDyAgJGTf1cn_nTf4ng_n(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v10;
}

id ContactsService.__allocating_init(dataProvider:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized ContactsService.__allocating_init(dataProvider:)(a1, v1);
}

void *ContactsService.contacts(for:)(void *a1)
{
  return ContactsService.contacts(for:)(a1, (uint64_t (*)(uint64_t, uint64_t, id, char *))specialized Sequence.compactMap<A>(_:));
}

void *ContactsService.unknownContacts(for:)(void *a1)
{
  return ContactsService.contacts(for:)(a1, (uint64_t (*)(uint64_t, uint64_t, id, char *))specialized Sequence.compactMap<A>(_:));
}

void *ContactsService.contacts(for:)(void *a1, uint64_t (*a2)(uint64_t, uint64_t, id, char *))
{
  id v5 = *(void **)&v2[OBJC_IVAR___MPContactsService_dataProvider];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v7 = [v5 contactByHandleForRecentCall:a1 keyDescriptors:isa];

  if (v7)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = 0;
  }
  id v9 = [a1 validRemoteParticipantHandles];
  if (v9)
  {
    uint64_t v10 = v9;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v12 = a1;
    id v13 = v2;
    uint64_t v14 = a2(v11, v8, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return (void *)v14;
}

id ContactsService.init(dataProvider:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized ContactsService.init(dataProvider:)(a1, v1);
}

void ContactsService.init()()
{
}

id specialized ContactsService.__allocating_init(dataProvider:)(uint64_t a1, Class a2)
{
  uint64_t v3 = (char *)objc_allocWithZone(a2);
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR___MPContactsService_dataProvider] = a1;
  v6.receiver = v3;
  v6.super_class = ObjectType;
  return [super init];
}

id specialized ContactsService.init(dataProvider:)(uint64_t a1, char *a2)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a2[OBJC_IVAR___MPContactsService_dataProvider] = a1;
  v6.receiver = a2;
  v6.super_class = ObjectType;
  return [super init];
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo8CHHandleCG_So9CNContactCs5NeverOTg5053_s11MobilePhone15ContactsServiceC06avatarC03forSaySo9e27CGSo12CHRecentCallC_tFAGSo8D6CXEfU_SDyAgJGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v30 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    unint64_t result = _swiftEmptyArrayStorage;
    if (v4)
    {
      char v36 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t result = (void *)__CocoaSet.startIndex.getter();
      uint64_t v33 = result;
      uint64_t v34 = v6;
      char v35 = 1;
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_7;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 16);
    unint64_t result = _swiftEmptyArrayStorage;
    if (v4)
    {
      char v36 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t result = (void *)specialized _NativeSet.startIndex.getter(v3);
      uint64_t v33 = result;
      uint64_t v34 = v7;
      char v35 = v8 & 1;
LABEL_7:
      unint64_t v9 = a2 & 0xC000000000000001;
      unint64_t v10 = v30;
      while (1)
      {
        if (!v4)
        {
          __break(1u);
          goto LABEL_29;
        }
        specialized Set.subscript.getter((uint64_t)v33, v34, v35, v3);
        id v24 = v23;
        uint64_t v31 = v4;
        if (v9)
        {
          id v25 = v23;
          if (!__CocoaDictionary.lookup(_:)()) {
            goto LABEL_18;
          }
          type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v26 = v32;
          swift_unknownObjectRelease();
        }
        else
        {
          if (!*(void *)(a2 + 16)) {
            goto LABEL_19;
          }
          unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23);
          if ((v28 & 1) == 0)
          {
LABEL_18:

LABEL_19:
            type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNMutableContact);
            id v24 = v24;
            if (!CNMutableContact.init(handle:)()) {
              [objc_allocWithZone((Class)CNMutableContact) init];
            }
            goto LABEL_21;
          }
          id v26 = *(id *)(*(void *)(a2 + 56) + 8 * v27);
        }

        if (!v26) {
          goto LABEL_19;
        }
LABEL_21:

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        unint64_t result = (void *)specialized ContiguousArray._endMutation()();
        if (v10)
        {
          if ((v35 & 1) == 0) {
            goto LABEL_30;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<CHHandle>.Index);
          os_log_type_t v29 = (uint64_t (*)(void **, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          unint64_t result = (void *)v29(&v32, 0);
          --v4;
          if (v31 == 1)
          {
LABEL_26:
            outlined consume of Set<CHHandle>.Index._Variant((uint64_t)v33, v34, v35);
            return v36;
          }
        }
        else
        {
          uint64_t v11 = (uint64_t)v33;
          uint64_t v12 = v34;
          char v13 = v35;
          int64_t v14 = specialized _NativeSet.index(after:)((int64_t)v33, v34, v35, v3);
          uint64_t v16 = v15;
          uint64_t v17 = v3;
          unint64_t v18 = v9;
          uint64_t v19 = a2;
          char v21 = v20;
          unint64_t result = (void *)outlined consume of Set<CHHandle>.Index._Variant(v11, v12, v13);
          uint64_t v33 = (void *)v14;
          uint64_t v34 = v16;
          unint64_t v10 = v30;
          char v22 = v21 & 1;
          a2 = v19;
          unint64_t v9 = v18;
          uint64_t v3 = v17;
          char v35 = v22;
          uint64_t v4 = v31 - 1;
          if (v31 == 1) {
            goto LABEL_26;
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ContactsService()
{
  return self;
}

id static MessageID.faceTime(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v7(v6, a1, v3);
  char v8 = (char *)objc_allocWithZone(v1);
  v7(&v8[OBJC_IVAR___MPMessageID_value], (uint64_t)v6, v3);
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v11.receiver = v8;
  v11.super_class = v1;
  [super init];
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

id MessageID.__allocating_init(value:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___MPMessageID_value] = a1;
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v5.receiver = v3;
  v5.super_class = v1;
  return [super init];
}

{
  objc_class *v1;
  id v3;
  id v4;
  objc_super v6;

  uint64_t v3 = objc_allocWithZone(v1);
  outlined init with copy of MessageID.Value(a1, (uint64_t)v3 + OBJC_IVAR___MPMessageID_value);
  v6.receiver = v3;
  v6.super_class = v1;
  uint64_t v4 = [super init];
  outlined destroy of MessageID.Value(a1);
  return v4;
}

uint64_t MessageID.messageUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MessageID.Value(0);
  __chkstk_darwin(v3);
  objc_super v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MessageID.Value(v1 + OBJC_IVAR___MPMessageID_value, (uint64_t)v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, v5, v7);
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v9, 1, v7);
}

id MessageID.__allocating_init(uuid:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = &v3[OBJC_IVAR___MPMessageID_value];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v9.receiver = v3;
  v9.super_class = v1;
  [super init];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

unint64_t MessageFolder.init(rawValue:)(unint64_t a1)
{
  return specialized MessageFolder.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MessageFolder@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized MessageFolder.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

unint64_t MessageType.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance MessageType@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

void MessageID.Value.hash(into:)()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MessageID.Value(0);
  __chkstk_darwin(v5);
  id v7 = (Swift::UInt *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MessageID.Value(v0, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    Swift::UInt v8 = *v7;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v8);
  }
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance MessageID.Value(uint64_t a1, uint64_t a2)
{
  return (specialized static MessageID.Value.__derived_enum_less_than(_:_:)(a2, a1) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance MessageID.Value(uint64_t a1, uint64_t a2)
{
  return (specialized static MessageID.Value.__derived_enum_less_than(_:_:)(a1, a2) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MessageID.Value(uint64_t a1, uint64_t a2)
{
  return specialized static MessageID.Value.__derived_enum_less_than(_:_:)(a2, a1);
}

void protocol witness for Hashable.hash(into:) in conformance MessageID.Value()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v7 = (Swift::UInt *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MessageID.Value(v0, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v2 + 32))(v5, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
    Swift::UInt v8 = *v7;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v8);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MessageID.Value()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::UInt v8 = (Swift::UInt *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init(_seed:)();
  outlined init with copy of MessageID.Value(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, Swift::UInt *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    Swift::UInt v9 = *v8;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v9);
  }
  return Hasher._finalize()();
}

uint64_t MessageID.value.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of MessageID.Value(v1 + OBJC_IVAR___MPMessageID_value, a1);
}

uint64_t MessageID.stringValue.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MessageID.Value(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of MessageID.Value(v0 + OBJC_IVAR___MPMessageID_value, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, void *, uint64_t))(v2 + 32))(v4, v7, v1);
    uint64_t v8 = UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v10[1] = *v7;
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  return v8;
}

id MessageID.init(value:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of MessageID.Value(a1, (uint64_t)v1 + OBJC_IVAR___MPMessageID_value);
  v6.receiver = v1;
  v6.super_class = ObjectType;
  id v4 = [super init];
  outlined destroy of MessageID.Value(a1);
  return v4;
}

{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR___MPMessageID_value] = a1;
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return [super init];
}

id MessageID.init(uuid:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v4 = &v1[OBJC_IVAR___MPMessageID_value];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  type metadata accessor for MessageID.Value(0);
  swift_storeEnumTagMultiPayload();
  v9.receiver = v1;
  v9.super_class = ObjectType;
  id v7 = [super init];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

void MessageID.init()()
{
}

Swift::Int MessageID.hash.getter()
{
  return MessageID.Value.hashValue.getter();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance MessageID(uint64_t *a1, uint64_t *a2)
{
  return specialized static MessageID.< infix(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance MessageID(uint64_t *a1, uint64_t *a2)
{
  return (specialized static MessageID.< infix(_:_:)(*a2, *a1) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance MessageID(uint64_t *a1, uint64_t *a2)
{
  return (specialized static MessageID.< infix(_:_:)(*a1, *a2) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance MessageID(uint64_t *a1, uint64_t *a2)
{
  return specialized static MessageID.< infix(_:_:)(*a2, *a1);
}

uint64_t specialized static MessageID.Value.__derived_enum_less_than(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for MessageID.Value(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  int64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v37 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (unint64_t *)((char *)&v37 - v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MessageID.Value, MessageID.Value));
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = &v23[*(int *)(v21 + 56)];
  outlined init with copy of MessageID.Value(a1, (uint64_t)v23);
  uint64_t v42 = a2;
  outlined init with copy of MessageID.Value(a2, (uint64_t)v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of MessageID.Value((uint64_t)v23, (uint64_t)v17);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      id v26 = v39;
      uint64_t v25 = v40;
      unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
      uint64_t v28 = v41;
      v27(v39, v17, v41);
      os_log_type_t v29 = v38;
      v27(v38, v24, v28);
      if (static UUID.== infix(_:_:)())
      {
        unint64_t v30 = *(void (**)(char *, uint64_t))(v25 + 8);
        v30(v29, v28);
        v30(v26, v28);
LABEL_7:
        outlined destroy of MessageID.Value((uint64_t)v23);
        char v32 = 0;
        return v32 & 1;
      }
      char v32 = static UUID.< infix(_:_:)();
      char v35 = *(void (**)(char *, uint64_t))(v25 + 8);
      v35(v29, v28);
      v35(v26, v28);
LABEL_18:
      outlined destroy of MessageID.Value((uint64_t)v23);
      return v32 & 1;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
  }
  else
  {
    outlined init with copy of MessageID.Value((uint64_t)v23, (uint64_t)v19);
    unint64_t v31 = *v19;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      if (v31 == *(void *)v24) {
        goto LABEL_7;
      }
      char v32 = v31 < *(void *)v24;
      goto LABEL_18;
    }
  }
  outlined init with copy of MessageID.Value(a1, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of MessageID.Value((uint64_t)v14);
    unint64_t v33 = 1;
  }
  else
  {
    unint64_t v33 = 0;
  }
  outlined init with copy of MessageID.Value(v42, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of MessageID.Value((uint64_t)v11);
    unint64_t v34 = 1;
  }
  else
  {
    unint64_t v34 = 0;
  }
  char v32 = v33 < v34;
  outlined destroy of Locale?((uint64_t)v23, &demangling cache variable for type metadata for (MessageID.Value, MessageID.Value));
  return v32 & 1;
}

uint64_t specialized static MessageID.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for MessageID.Value(0);
  uint64_t v12 = __chkstk_darwin(v11);
  int64_t v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MessageID.Value, MessageID.Value));
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1 + OBJC_IVAR___MPMessageID_value;
  uint64_t v22 = a2 + OBJC_IVAR___MPMessageID_value;
  uint64_t v23 = &v20[*(int *)(v18 + 56)];
  outlined init with copy of MessageID.Value(v21, (uint64_t)v20);
  outlined init with copy of MessageID.Value(v22, (uint64_t)v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of MessageID.Value((uint64_t)v20, (uint64_t)v16);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      id v24 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v24(v10, v16, v4);
      v24(v8, v23, v4);
      char v25 = static UUID.< infix(_:_:)();
      id v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26(v8, v4);
      v26(v10, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
      outlined destroy of MessageID.Value((uint64_t)v23);
      char v25 = 1;
    }
  }
  else
  {
    outlined init with copy of MessageID.Value((uint64_t)v20, (uint64_t)v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of MessageID.Value((uint64_t)v23);
      char v25 = 0;
    }
    else
    {
      char v25 = *v14 < *(void *)v23;
    }
  }
  outlined destroy of MessageID.Value((uint64_t)v20);
  return v25 & 1;
}

unint64_t specialized MessageFolder.init(rawValue:)(unint64_t result)
{
  if (result > 4) {
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MessageFolder and conformance MessageFolder()
{
  unint64_t result = lazy protocol witness table cache variable for type MessageFolder and conformance MessageFolder;
  if (!lazy protocol witness table cache variable for type MessageFolder and conformance MessageFolder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageFolder and conformance MessageFolder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MessageType and conformance MessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type MessageType and conformance MessageType;
  if (!lazy protocol witness table cache variable for type MessageType and conformance MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageType and conformance MessageType);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MessageID.Value()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type MessageID.Value and conformance MessageID.Value, (void (*)(uint64_t))type metadata accessor for MessageID.Value);
}

uint64_t base witness table accessor for Equatable in MessageID()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type MessageID and conformance NSObject, (void (*)(uint64_t))type metadata accessor for MessageID);
}

ValueMetadata *type metadata accessor for MessageFolder()
{
  return &type metadata for MessageFolder;
}

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

uint64_t ObjC metadata update function for MessageID()
{
  return type metadata accessor for MessageID(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for MessageID.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for MessageID.Value(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for MessageID.Value(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for MessageID.Value(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MessageID.Value((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for MessageID.Value(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MessageID.Value(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of MessageID.Value((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageID.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for MessageID.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for MessageID.Value()
{
  return swift_storeEnumTagMultiPayload();
}

id VMMessageTranscriptViewModel.init(_:)(uint64_t a1)
{
  id v1 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithMPMessage:a1];
  swift_unknownObjectRelease();
  return v1;
}

id VMMessageTranscriptViewModel.init(_:)(void *a1)
{
  id v2 = [v1 initWithDonated:[a1 isTranscriptionRated] transcribing:[a1 isTranscribing] transcriptionAttempted:[a1 transcriptionAttempted] transcriptionAvailable:[a1 isTranscriptionAvailable] messageTranscript:[a1 transcript]];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v2;
}

void *SpringBoardOrientationObserverWrapper.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0x6F42676E69727053;
  result[4] = 0xEB00000000647261;
  result[5] = PHVoicemailInboxListViewController.refreshTableHeaderView();
  result[6] = 0;
  result[2] = a1;
  return result;
}

uint64_t SpringBoardOrientationObserverWrapper.wrapped.getter()
{
  return swift_retain();
}

Swift::Void (__swiftcall *variable initialization expression of SpringBoardOrientationObserverWrapper.onLockChange())()
{
  return PHVoicemailInboxListViewController.refreshTableHeaderView();
}

uint64_t key path getter for SpringBoardOrientationObserverWrapper.onLockChange : SpringBoardOrientationObserverWrapper@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned OrientationMonitorLockedStatus) -> ();
  a2[1] = (uint64_t (*)(unsigned __int8 *))v6;
  return swift_retain();
}

uint64_t key path setter for SpringBoardOrientationObserverWrapper.onLockChange : SpringBoardOrientationObserverWrapper(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  specialized SpringBoardOrientationObserverWrapper.onLockChange.setter((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OrientationMonitorLockedStatus) -> (@out ()), v3);

  return swift_release();
}

uint64_t SpringBoardOrientationObserverWrapper.onLockChange.setter(uint64_t a1, uint64_t a2)
{
  specialized SpringBoardOrientationObserverWrapper.onLockChange.setter(a1, a2);

  return swift_release();
}

uint64_t closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didset(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    swift_beginAccess();
    uint64_t v5 = *(void (**)(void))(v4 + 40);
    swift_retain();
    swift_release();
    v5(a2 & 1);
    return swift_release();
  }
  return result;
}

uint64_t (*SpringBoardOrientationObserverWrapper.onLockChange.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SpringBoardOrientationObserverWrapper.onLockChange.modify;
}

uint64_t SpringBoardOrientationObserverWrapper.onLockChange.modify(uint64_t a1, char a2)
{
  return SpringBoardOrientationObserverWrapper.onLockChange.modify(a1, a2, (uint64_t)partial apply for closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didset);
}

void *SpringBoardOrientationObserverWrapper.init(_:)(uint64_t a1)
{
  v1[3] = 0x6F42676E69727053;
  v1[4] = 0xEB00000000647261;
  v1[5] = PHVoicemailInboxListViewController.refreshTableHeaderView();
  v1[6] = 0;
  v1[2] = a1;
  return v1;
}

uint64_t protocol witness for OrientationMonitorOrientationLockSource.onLockChange.getter in conformance SpringBoardOrientationObserverWrapper()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 40);
  swift_retain();
  return v2;
}

uint64_t protocol witness for OrientationMonitorOrientationLockSource.onLockChange.setter in conformance SpringBoardOrientationObserverWrapper(uint64_t a1, uint64_t a2)
{
  specialized SpringBoardOrientationObserverWrapper.onLockChange.setter(a1, a2);

  return swift_release();
}

uint64_t (*protocol witness for OrientationMonitorOrientationLockSource.onLockChange.modify in conformance SpringBoardOrientationObserverWrapper(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = *v1;
  swift_beginAccess();
  return protocol witness for OrientationMonitorOrientationLockSource.onLockChange.modify in conformance SpringBoardOrientationObserverWrapper;
}

uint64_t protocol witness for OrientationMonitorOrientationLockSource.onLockChange.modify in conformance SpringBoardOrientationObserverWrapper(uint64_t a1, char a2)
{
  return SpringBoardOrientationObserverWrapper.onLockChange.modify(a1, a2, (uint64_t)closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didsetpartial apply);
}

uint64_t SpringBoardOrientationObserverWrapper.onLockChange.modify(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 16);
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    uint64_t v9 = (void *)(v7 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
    swift_beginAccess();
    *uint64_t v9 = a3;
    v9[1] = v8;
    return swift_release();
  }
  return result;
}

uint64_t specialized SpringBoardOrientationObserverWrapper.onLockChange.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  v2[5] = a1;
  v2[6] = a2;
  swift_retain();
  swift_release();
  uint64_t v5 = v2[2];
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = (void *)(v5 + OBJC_IVAR____TtC11MobilePhone30SpringBoardOrientationObserver_onOrientationLock);
  swift_beginAccess();
  *uint64_t v7 = closure #1 in SpringBoardOrientationObserverWrapper.onLockChange.didsetpartial apply;
  v7[1] = v6;
  return swift_release();
}

uint64_t sub_1001B3C98()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t type metadata accessor for SpringBoardOrientationObserverWrapper()
{
  return self;
}

uint64_t sub_1001B3CFC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OrientationMonitorLockedStatus) -> (@out ())(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1 & 1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned OrientationMonitorLockedStatus) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void *SuggestionsSearchViewCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static SuggestionsSearchViewCell.reuseIdentifier;
}

Swift::Void __swiftcall SuggestionsSearchViewCell.setSuggestion(_:)(CSSuggestion a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AttributedString();
  __chkstk_darwin(v4 - 8);
  id v5 = specialized static SuggestionsSearchViewCell.imageForSuggestion(suggestion:)(a1.super.isa);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage);
  *(void *)(v2 + OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage) = v5;

  type metadata accessor for NSAttributedString();
  CSSuggestion.localizedAttributedSuggestion.getter();
  uint64_t v7 = NSAttributedString.init(_:)();
  id v8 = [v7 string];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionText);
  *uint64_t v12 = v9;
  v12[1] = v11;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall SuggestionsSearchViewCell.configure(withSearchText:)(Swift::String_optional withSearchText)
{
  uint64_t v2 = v1;
  object = withSearchText.value._object;
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UITableViewCell.defaultContentConfiguration()();
  id v8 = *(void **)&v1[OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage];
  if (v8)
  {
    if (*(void *)&v2[OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionText + 8]) {
      BOOL v9 = object == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      id v22 = v8;
      swift_bridgeObjectRetain();
      UIListContentConfiguration.image.setter();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v10 attributedStringToHighlightText:v11];

      UIListContentConfiguration.attributedText.setter();
      uint64_t v13 = self;
      [v13 labelFontSize];
      id v14 = [v13 systemFontOfSize:];
      id v15 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleCallout];
      id v16 = [v15 scaledFontForFont:v14];

      id v17 = [self configurationWithFont:v16];
      uint64_t v18 = (void (*)(uint64_t *, void))UIListContentConfiguration.imageProperties.modify();
      UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter();
      v18(v23, 0);
      id v19 = [self labelColor];
      uint64_t v20 = (void (*)(uint64_t *, void))UIListContentConfiguration.imageProperties.modify();
      UIListContentConfiguration.ImageProperties.tintColor.setter();
      v20(v23, 0);
      UIListContentConfiguration.imageToTextPadding.setter();
      v23[3] = v4;
      void v23[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(boxed_opaque_existential_1, v7, v4);
      UITableViewCell.contentConfiguration.setter();
      [v2 setSeparatorInset:UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right];
    }
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t static SuggestionsSearchViewCell.reuseIdentifier.getter()
{
  return 0xD000000000000019;
}

id SuggestionsSearchViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage] = 0;
  uint64_t v7 = &v3[OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionText];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (a3)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  v11.receiver = v3;
  v11.super_class = ObjectType;
  [super initWithStyle:a1 reuseIdentifier:v8];

  return v9;
}

id SuggestionsSearchViewCell.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionImage] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC11MobilePhone25SuggestionsSearchViewCell_suggestionText];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  [super initWithCoder:a1];

  return v5;
}

id specialized static SuggestionsSearchViewCell.imageForSuggestion(suggestion:)(void *a1)
{
  id v1 = [a1 currentToken];
  if (v1)
  {
    uint64_t v2 = v1;
    [v1 tokenKind];
  }
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self systemImageNamed:v3];

  return v4;
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

uint64_t type metadata accessor for SuggestionsSearchViewCell()
{
  return self;
}

UIView __swiftcall MPRecentsTableViewController.makePersonalNicknameMenuView()()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for PersonalNicknameMenuView());
  id v2 = v0;
  return (UIView)PersonalNicknameMenuView.init(displayContext:personalNicknameMenuViewDelegate:)(1, (uint64_t)v0, (uint64_t)&protocol witness table for MPRecentsTableViewController);
}

void MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(void *a1)
{
  id v2 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [self alertControllerWithTitle:v3 message:0 preferredStyle:0];

  id v5 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v25 = partial apply for closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:);
  uint64_t v26 = v6;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v24 = &block_descriptor_18;
  NSString v8 = _Block_copy(&aBlock);
  swift_release();
  id v9 = self;
  id v10 = [v9 actionWithTitle:v7 style:1 handler:v8];
  _Block_release(v8);
  swift_release();

  id v11 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = a1;
  swift_retain();
  id v14 = a1;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v25 = partial apply for closure #2 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:);
  uint64_t v26 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v24 = &block_descriptor_7_1;
  id v16 = _Block_copy(&aBlock);
  swift_release();
  id v17 = [v9 actionWithTitle:v15 style:2 handler:v16];
  _Block_release(v16);
  swift_release();

  [v4 addAction:v17];
  [v4 addAction:v10];
  id v18 = [v1 alertPresentingViewController];
  if (v18)
  {
    id v19 = v18;
    [v18 presentViewController:v4 animated:1 completion:0];
  }
  else
  {
    [v1 presentViewController:v4 animated:1 completion:0];
  }
}

uint64_t sub_1001B4AD0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(uint64_t a1)
{
  closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD000000000000024, 0x8000000100241610);
}

void closure #2 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    NSString v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)id v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000100241610, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "MPRecentsTableViewController: in %s, user did tap on report", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v10 = (char *)[v5 callReportingViewModel];
    id v11 = *(id *)&v10[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager];
    FaceTimeSpamReportManager.reportSpam(call:)(a3);
  }
}

void partial apply for closure #2 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(uint64_t a1)
{
  closure #2 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void MPRecentsTableViewController.presentBlockAllAlert(for:)(uint64_t a1)
{
  id v3 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [self alertControllerWithTitle:v4 message:0 preferredStyle:0];

  id v6 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v26 = partial apply for closure #1 in MPRecentsTableViewController.presentBlockAllAlert(for:);
  uint64_t v27 = v7;
  uint64_t v22 = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  char v25 = &block_descriptor_11_1;
  id v9 = _Block_copy(&v22);
  swift_release();
  id v10 = self;
  id v11 = [v10 actionWithTitle:v8 style:1 handler:v9];
  _Block_release(v9);
  swift_release();

  id v12 = [v1 contactsForRecentCall:a1];
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v14 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v13;
  swift_retain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v26 = partial apply for closure #2 in MPRecentsTableViewController.presentBlockAllAlert(for:);
  uint64_t v27 = v16;
  uint64_t v22 = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  id v24 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  char v25 = &block_descriptor_18;
  id v18 = _Block_copy(&v22);
  swift_release();
  id v19 = [v10 actionWithTitle:v17 style:2 handler:v18];
  _Block_release(v18);
  swift_release();

  [v5 addAction:v19];
  [v5 addAction:v11];
  id v20 = [v1 alertPresentingViewController];
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 presentViewController:v5 animated:1 completion:0];
  }
  else
  {
    [v1 presentViewController:v5 animated:1 completion:0];
  }
}

void partial apply for closure #1 in MPRecentsTableViewController.presentBlockAllAlert(for:)(uint64_t a1)
{
  closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD00000000000001ALL, 0x8000000100241590);
}

void partial apply for closure #2 in MPRecentsTableViewController.presentBlockAllAlert(for:)(uint64_t a1)
{
  closure #2 in MPRecentsTableViewController.presentBlockAllAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD00000000000001ALL, 0x8000000100241590, "MPRecentsTableViewController: in %s, user did tap on block all", (void (*)(uint64_t))specialized CallReportingViewModel.block(contacts:));
}

void MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:)(void *a1)
{
  id v3 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [self alertControllerWithTitle:v4 message:0 preferredStyle:0];

  id v6 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v34 = partial apply for closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:);
  char v35 = (void *)v7;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  char v32 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  unint64_t v33 = &block_descriptor_22;
  id v9 = _Block_copy(&aBlock);
  swift_release();
  id v10 = self;
  id v29 = [v10 actionWithTitle:v8 style:1 handler:v9];
  _Block_release(v9);
  swift_release();

  id v11 = [v1 contactsForRecentCall:a1];
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v34 = partial apply for closure #2 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:);
  char v35 = (void *)v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  char v32 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  unint64_t v33 = &block_descriptor_29;
  NSString v17 = _Block_copy(&aBlock);
  swift_release();
  id v18 = [v10 actionWithTitle:v16 style:2 handler:v17];
  _Block_release(v17);
  swift_release();

  id v19 = [v1 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v20;
  v21[3] = v12;
  v21[4] = a1;
  swift_retain();
  id v22 = a1;
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v34 = partial apply for closure #3 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:);
  char v35 = v21;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  char v32 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  unint64_t v33 = &block_descriptor_36;
  id v24 = _Block_copy(&aBlock);
  swift_release();
  id v25 = [v10 actionWithTitle:v23 style:2 handler:v24];
  _Block_release(v24);
  swift_release();

  [v5 addAction:v18];
  [v5 addAction:v25];
  [v5 addAction:v29];
  id v26 = [v1 alertPresentingViewController];
  if (v26)
  {
    uint64_t v27 = v26;
    [v26 presentViewController:v5 animated:1 completion:0];
  }
  else
  {
    [v1 presentViewController:v5 animated:1 completion:0];
  }
}

void partial apply for closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD00000000000002CLL, 0x8000000100241510);
}

void partial apply for closure #2 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #2 in MPRecentsTableViewController.presentBlockAllAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD00000000000002CLL, 0x8000000100241510, "MPRecentsTableViewController: in %s, user did tap on block", (void (*)(uint64_t))specialized CallReportingViewModel.block(contacts:));
}

void closure #3 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.spamReport);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)id v11 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x8000000100241510, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "MPRecentsTableViewController: in %s, user did tap on block and report", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v12 = [v7 callReportingViewModel];
    specialized CallReportingViewModel.block(contacts:)(a3);

    id v13 = (char *)[v7 callReportingViewModel];
    id v14 = *(id *)&v13[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager];
    FaceTimeSpamReportManager.reportSpam(call:)(a4);
  }
}

uint64_t sub_1001B5ABC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #3 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #3 in MPRecentsTableViewController.presentFaceTimeSpamReportAndBlockAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

void MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(void *a1)
{
  id v3 = [v1 callReportingViewModel];
  id v4 = specialized CallReportingViewModel.getFormattedInitiator(for:)(a1);
  uint64_t v6 = v5;

  if (v6)
  {
    id v7 = [v1 callReportingViewModel];
    specialized CallReportingViewModel.getReportInitiatorMessage(formattedHandle:)((uint64_t)v4, v6);

    swift_bridgeObjectRelease();
    id v8 = [v1 callReportingViewModel];
    swift_bridgeObjectRetain();

    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [self alertControllerWithTitle:v9 message:v10 preferredStyle:0];

    id v12 = [v1 callReportingViewModel];
    swift_bridgeObjectRetain();

    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v42 = partial apply for closure #1 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:);
    uint64_t v43 = v13;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    uint64_t v41 = &block_descriptor_40;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_release();
    NSString v16 = self;
    osos_log_t log = (os_log_t)[v16 actionWithTitle:v14 style:1 handler:v15];
    _Block_release(v15);
    swift_release();

    id v17 = [v1 callReportingViewModel];
    swift_bridgeObjectRetain();

    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = a1;
    swift_retain();
    id v20 = a1;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v42 = partial apply for closure #2 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:);
    uint64_t v43 = v19;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    uint64_t v41 = &block_descriptor_47_0;
    id v22 = _Block_copy(&aBlock);
    swift_release();
    id v23 = [v16 actionWithTitle:v21 style:2 handler:v22];
    _Block_release(v22);
    swift_release();

    id v24 = [v1 callReportingViewModel];
    swift_bridgeObjectRetain();

    uint64_t v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v20;
    id v27 = v20;
    swift_retain();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v42 = partial apply for closure #3 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:);
    uint64_t v43 = v26;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    uint64_t v40 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    uint64_t v41 = &block_descriptor_54_0;
    id v29 = _Block_copy(&aBlock);
    swift_release();
    id v30 = [v16 actionWithTitle:v28 style:2 handler:v29];
    _Block_release(v29);
    swift_release();

    [v11 addAction:v23];
    [v11 addAction:v30];
    [v11 addAction:oslog];
    id v31 = [v1 alertPresentingViewController];
    if (v31)
    {
      char v32 = v31;
      [v31 presentViewController:v11 animated:1 completion:0];
    }
    else
    {
      [v1 presentViewController:v11 animated:1 completion:0];
    }
  }
  else
  {
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.spamReport);
    osos_log_t loga = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(osloga, v34))
    {
      char v35 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)char v35 = 136315138;
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, osloga, v34, "MPRecentsTableViewController: in %s, call initiator is nil", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void closure #2 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      NSString v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)NSString v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "MPRecentsTableViewController: in %s, user did tap on block", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v10 = [v5 callReportingViewModel];
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "blockInitiator", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = a3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    SpamModelable.blockInitiator()();
  }
}

void closure #3 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.spamReport);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      NSString v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)NSString v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001002415B0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "MPRecentsTableViewController: in %s, user did tap on block and report", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v10 = [v5 callReportingViewModel];
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "blockInitiator", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = (uint64_t)a3;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHRecentCall);
    SpamModelable.blockInitiator()();

    uint64_t v14 = (char *)[v5 callReportingViewModel];
    id v15 = *(id *)&v14[OBJC_IVAR____TtC11MobilePhone22CallReportingViewModel_spamReportManager];
    FaceTimeSpamReportManager.reportSpam(call:)(a3);
  }
}

void MPRecentsTableViewController.presentBlockUnknownParticipants(for:)(void *a1)
{
  id v2 = v1;
  id v4 = [v2 callReportingViewModel];
  swift_bridgeObjectRetain();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [self alertControllerWithTitle:v5 message:0 preferredStyle:0];

  id v7 = [v2 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v32 = partial apply for closure #1 in MPRecentsTableViewController.presentBlockUnknownParticipants(for:);
  uint64_t v33 = v8;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  id v30 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v31 = &block_descriptor_58;
  id v10 = _Block_copy(&aBlock);
  swift_release();
  id v11 = self;
  id v27 = [v11 actionWithTitle:v9 style:1 handler:v10];
  _Block_release(v10);
  swift_release();

  id v12 = [v2 callReportingViewModel];
  uint64_t v13 = CallReportingViewModel.unknownHandles(in:)(a1);

  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v15 = v13[2];
  if (v15)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v15; ++i)
    {
      id v17 = (void *)v13[i + 4];
      if (v17)
      {
        id v18 = v17;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)aBlock & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)aBlock & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = aBlock;
  }
  swift_bridgeObjectRelease();
  id v19 = [v2 callReportingViewModel];
  swift_bridgeObjectRetain();

  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v14;
  swift_retain();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v32 = partial apply for closure #3 in MPRecentsTableViewController.presentBlockUnknownParticipants(for:);
  uint64_t v33 = v21;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  id v30 = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
  id v31 = &block_descriptor_65;
  id v23 = _Block_copy(&aBlock);
  swift_release();
  id v24 = [v11 actionWithTitle:v22 style:2 handler:v23];
  _Block_release(v23);
  swift_release();

  [v6 addAction:v24];
  [v6 addAction:v27];
  id v25 = [v2 alertPresentingViewController];
  if (v25)
  {
    uint64_t v26 = v25;
    [v25 presentViewController:v6 animated:1 completion:0];
  }
  else
  {
    [v2 presentViewController:v6 animated:1 completion:0];
  }
}

void closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v7 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.spamReport);
    NSString v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)id v11 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "MPRecentsTableViewController: in %s, user did tap on cancel", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    [v7 dismissViewControllerAnimated:1 completion:0];
  }
}

void closure #2 in MPRecentsTableViewController.presentBlockAllAlert(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char *a6, void (*a7)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    if (one-time initialization token for spamReport != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.spamReport);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      format = a6;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, format, v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v18 = [v13 callReportingViewModel];
    a7(a3);
  }
}

Swift::Void __swiftcall MPRecentsTableViewController.presentOnboardingViewController()()
{
  [v0 presentCNSharedProfileOnboardingController];
}

id protocol witness for PersonalNicknameMenuViewDelegate.presentOnboardingViewController() in conformance MPRecentsTableViewController()
{
  return [v0 presentOnboardingViewController];
}

id MPRecentsTableViewController.hostingViewController(for:)()
{
  return v0;
}

void partial apply for closure #1 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD000000000000031, 0x80000001002415B0);
}

void partial apply for closure #2 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #2 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #3 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(uint64_t a1)
{
  closure #3 in MPRecentsTableViewController.presentGroupFaceTimeSpamReportAndBlockAlert(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void partial apply for closure #1 in MPRecentsTableViewController.presentBlockUnknownParticipants(for:)(uint64_t a1)
{
  closure #1 in MPRecentsTableViewController.presentFaceTimeSpamReportAlert(for:)(a1, v1, 0xD000000000000025, 0x80000001002439D0);
}

void partial apply for closure #3 in MPRecentsTableViewController.presentBlockUnknownParticipants(for:)(uint64_t a1)
{
  closure #2 in MPRecentsTableViewController.presentBlockAllAlert(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 0xD000000000000025, 0x80000001002439D0, "MPRecentsTableViewController: in %s, user did tap on block unknown", (void (*)(uint64_t))specialized CallReportingViewModel.block(handles:));
}

id RecentsCallServices.__allocating_init(groupConversationsEnabled:recentsCallServicesDialer:)(char a1, uint64_t a2)
{
  swift_getObjectType();

  return specialized RecentsCallServices.__allocating_init(groupConversationsEnabled:recentsCallServicesDialer:)(a1, a2, v2);
}

id RecentsCallServices.placeCall(with:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v3 - 8);
  NSString v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = v1[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_groupConversationsEnabled];
  id v7 = [a1 validRemoteParticipantHandles];
  uint64_t v8 = v7;
  if (v6 != 1)
  {
    if (v7)
    {
      type metadata accessor for CHHandle();
      lazy protocol witness table accessor for type CHHandle and conformance NSObject();
      uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = (v11 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      if (v12 >= 2) {
        goto LABEL_17;
      }
    }
    [*(id *)&v1[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_recentsCallServicesDialer] performDialRequestForRecentCall:a1];
    static TaskPriority.background.getter();
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v5, 0, 1, v22);
    id v23 = (void *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    void v23[4] = v1;
    uint64_t v23[5] = a1;
    id v24 = v1;
    id v25 = a1;
    uint64_t v26 = &async function pointer to partial apply for closure #2 in RecentsCallServices.placeCall(with:);
LABEL_24:
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)v26, (uint64_t)v23);
    return (id)swift_release();
  }
  if (!v7
    || ((type metadata accessor for CHHandle(),
         lazy protocol witness table accessor for type CHHandle and conformance NSObject(),
         uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
         v8,
         (v9 & 0xC000000000000001) == 0)
      ? (uint64_t v10 = *(void *)(v9 + 16))
      : (uint64_t v10 = __CocoaSet.count.getter()),
        swift_bridgeObjectRelease(),
        v10 < 2))
  {
LABEL_23:
    [*(id *)&v1[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_recentsCallServicesDialer] performDialRequestForRecentCall:a1];
    static TaskPriority.background.getter();
    uint64_t v27 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v5, 0, 1, v27);
    id v23 = (void *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    void v23[4] = v1;
    uint64_t v23[5] = a1;
    NSString v28 = v1;
    id v29 = a1;
    uint64_t v26 = &async function pointer to partial apply for closure #1 in RecentsCallServices.placeCall(with:);
    goto LABEL_24;
  }
  id v13 = [a1 serviceProvider];
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_22;
  }
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v17)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (v15 != v18 || v17 != v19)
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRelease_n();
LABEL_17:
  uint64_t v20 = *(void **)&v1[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_recentsCallServicesDialer];

  return [v20 performJoinRequestForRecentCall:a1];
}

uint64_t RecentsCallServices.groupConversationsEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_groupConversationsEnabled);
}

uint64_t RecentsCallServices.recentsCallServicesDialer.getter()
{
  return swift_unknownObjectRetain();
}

id RecentsCallServices.eventSignal.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone19RecentsCallServices____lazy_storage___eventSignal;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobilePhone19RecentsCallServices____lazy_storage___eventSignal);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobilePhone19RecentsCallServices____lazy_storage___eventSignal);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)type metadata accessor for TipsRecentsEventSignals()) init];
    NSString v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id RecentsCallServices.init(groupConversationsEnabled:recentsCallServicesDialer:)(char a1, uint64_t a2)
{
  swift_getObjectType();

  return specialized RecentsCallServices.init(groupConversationsEnabled:recentsCallServicesDialer:)(a1, a2, v2);
}

uint64_t closure #1 in RecentsCallServices.placeCall(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(closure #1 in RecentsCallServices.placeCall(with:), 0, 0);
}

uint64_t closure #1 in RecentsCallServices.placeCall(with:)()
{
  v0[4] = RecentsCallServices.eventSignal.getter();
  id v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)
                                       + async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in RecentsCallServices.placeCall(with:);
  uint64_t v2 = v0[3];
  return v4(v2);
}

uint64_t closure #2 in RecentsCallServices.placeCall(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(closure #2 in RecentsCallServices.placeCall(with:), 0, 0);
}

uint64_t closure #2 in RecentsCallServices.placeCall(with:)()
{
  v0[4] = RecentsCallServices.eventSignal.getter();
  id v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:)
                                       + async function pointer to specialized TipsRecentsEventSignals.donateTipsEventSignals(for:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #2 in RecentsCallServices.placeCall(with:);
  uint64_t v2 = v0[3];
  return v4(v2);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *(void **)(*v0 + 32);
  id v4 = *v0;
  swift_task_dealloc();

  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

void RecentsCallServices.init()()
{
}

id specialized RecentsCallServices.__allocating_init(groupConversationsEnabled:recentsCallServicesDialer:)(char a1, uint64_t a2, Class a3)
{
  uint64_t v5 = objc_allocWithZone(a3);
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v5[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices____lazy_storage___eventSignal] = 0;
  v5[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_groupConversationsEnabled] = a1;
  *(void *)&v5[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_recentsCallServicesDialer] = a2;
  v8.receiver = v5;
  v8.super_class = ObjectType;
  return [super init];
}

uint64_t partial apply for closure #2 in RecentsCallServices.placeCall(with:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(closure #2 in RecentsCallServices.placeCall(with:), 0, 0);
}

uint64_t objectdestroyTm_4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in RecentsCallServices.placeCall(with:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(closure #1 in RecentsCallServices.placeCall(with:), 0, 0);
}

id specialized RecentsCallServices.init(groupConversationsEnabled:recentsCallServicesDialer:)(char a1, uint64_t a2, unsigned char *a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a3[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices____lazy_storage___eventSignal] = 0;
  a3[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_groupConversationsEnabled] = a1;
  *(void *)&a3[OBJC_IVAR____TtC11MobilePhone19RecentsCallServices_recentsCallServicesDialer] = a2;
  v8.receiver = a3;
  v8.super_class = ObjectType;
  return [super init];
}

uint64_t type metadata accessor for RecentsCallServices()
{
  return self;
}

uint64_t one-time initialization function for typeDisplayRepresentation()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = type metadata accessor for TypeDisplayRepresentation();
  __swift_allocate_value_buffer(v5, static MobilePhoneAppDeepLinks.typeDisplayRepresentation);
  __swift_project_value_buffer(v5, (uint64_t)static MobilePhoneAppDeepLinks.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t MobilePhoneAppDeepLinks.typeDisplayRepresentation.unsafeMutableAddressor()
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();

  return __swift_project_value_buffer(v0, (uint64_t)static MobilePhoneAppDeepLinks.typeDisplayRepresentation);
}

uint64_t static MobilePhoneAppDeepLinks.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typeDisplayRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MobilePhoneAppDeepLinks.typeDisplayRepresentation);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t one-time initialization function for caseDisplayRepresentations()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation.Image?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MobilePhoneAppDeepLinks, DisplayRepresentation)>);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MobilePhoneAppDeepLinks, DisplayRepresentation));
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v45 = v8 - 8;
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v40 = 4 * v10;
  uint64_t v12 = v10;
  uint64_t v13 = swift_allocObject();
  uint64_t v41 = v13;
  *(_OWORD *)(v13 + 16) = xmmword_100207450;
  unint64_t v14 = v13 + v11;
  *(unsigned char *)(v13 + v11) = 0;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  uint64_t v39 = v7 + 56;
  uint64_t v44 = v15;
  uint64_t v16 = v6;
  v15(v5, 0, 1, v6);
  uint64_t v17 = type metadata accessor for DisplayRepresentation.Image();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v43 = v17;
  uint64_t v46 = v18 + 56;
  v42(v2, 1, 1, v17);
  uint64_t v19 = v2;
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v20 = (unsigned char *)(v14 + v12);
  unint64_t v37 = v14;
  uint64_t v38 = v12;
  uint64_t v21 = v12;
  uint64_t v22 = v45;
  uint64_t v36 = (uint64_t)&v20[*(int *)(v45 + 56)];
  *uint64_t v20 = 1;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  id v23 = v44;
  v44(v5, 0, 1, v16);
  uint64_t v24 = v17;
  id v25 = v42;
  v42(v19, 1, 1, v24);
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v36 = 2 * v21;
  uint64_t v26 = (unsigned char *)(v14 + 2 * v21);
  char v35 = &v26[*(int *)(v22 + 56)];
  unsigned char *v26 = 2;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  v23(v5, 0, 1, v16);
  uint64_t v27 = v43;
  v25(v19, 1, 1, v43);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t v28 = v37;
  *(unsigned char *)(v37 + v36 + v38) = 3;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v29 = v16;
  uint64_t v30 = v16;
  uint64_t v31 = v44;
  v44(v5, 0, 1, v30);
  uint64_t v32 = v27;
  uint64_t v33 = v42;
  v42(v19, 1, 1, v32);
  DisplayRepresentation.init(title:subtitle:image:)();
  *(unsigned char *)(v28 + v40) = 4;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  v31(v5, 0, 1, v29);
  v33(v19, 1, 1, v43);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v41);
  static MobilePhoneAppDeepLinks.caseDisplayRepresentations = result;
  return result;
}

uint64_t *MobilePhoneAppDeepLinks.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (one-time initialization token for caseDisplayRepresentations != -1) {
    swift_once();
  }
  return &static MobilePhoneAppDeepLinks.caseDisplayRepresentations;
}

uint64_t static MobilePhoneAppDeepLinks.caseDisplayRepresentations.getter()
{
  if (one-time initialization token for caseDisplayRepresentations != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for urlRepresentation()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnumURLRepresentation<MobilePhoneAppDeepLinks>);
  __swift_allocate_value_buffer(v0, static MobilePhoneAppDeepLinks.urlRepresentation);
  __swift_project_value_buffer(v0, (uint64_t)static MobilePhoneAppDeepLinks.urlRepresentation);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MobilePhoneAppDeepLinks, _EnumURLRepresentation<MobilePhoneAppDeepLinks>.EnumSingleURLRepresentation)>);
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MobilePhoneAppDeepLinks, _EnumURLRepresentation<MobilePhoneAppDeepLinks>.EnumSingleURLRepresentation))
                 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100207450;
  unint64_t v5 = v4 + v3;
  *(unsigned char *)(v4 + v3) = 0;
  lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
  *(unsigned char *)(v5 + v2) = 1;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
  *(unsigned char *)(v5 + 2 * v2) = 2;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
  *(unsigned char *)(v5 + 3 * v2) = 3;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
  *(unsigned char *)(v5 + 4 * v2) = 4;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  return _EnumURLRepresentation.init(_:)();
}

uint64_t MobilePhoneAppDeepLinks.urlRepresentation.unsafeMutableAddressor()
{
  if (one-time initialization token for urlRepresentation != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnumURLRepresentation<MobilePhoneAppDeepLinks>);

  return __swift_project_value_buffer(v0, (uint64_t)static MobilePhoneAppDeepLinks.urlRepresentation);
}

uint64_t static MobilePhoneAppDeepLinks.urlRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for urlRepresentation != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnumURLRepresentation<MobilePhoneAppDeepLinks>);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static MobilePhoneAppDeepLinks.urlRepresentation);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

_UNKNOWN **static MobilePhoneAppDeepLinks.allCases.getter()
{
  return &outlined read-only object #0 of static MobilePhoneAppDeepLinks.allCases.getter;
}

uint64_t MobilePhoneAppDeepLinks.rawValue.getter(char a1)
{
  uint64_t result = 0x657469726F766146;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x73746E65636552;
      break;
    case 2:
      uint64_t result = 0x73746361746E6F43;
      break;
    case 3:
      uint64_t result = 0x64617079654BLL;
      break;
    case 4:
      uint64_t result = 0x69616D6563696F56;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MobilePhoneAppDeepLinks(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x657469726F766146;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE900000000000073;
  uint64_t v5 = 0x657469726F766146;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x73746E65636552;
      break;
    case 2:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x73746361746E6F43;
      break;
    case 3:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x64617079654BLL;
      break;
    case 4:
      uint64_t v5 = 0x69616D6563696F56;
      unint64_t v4 = 0xE90000000000006CLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE900000000000073;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x73746E65636552) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x73746361746E6F43) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x64617079654BLL;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE90000000000006CLL;
      if (v5 != 0x69616D6563696F56) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MobilePhoneAppDeepLinks()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MobilePhoneAppDeepLinks()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MobilePhoneAppDeepLinks()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MobilePhoneAppDeepLinks@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MobilePhoneAppDeepLinks.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MobilePhoneAppDeepLinks(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000073;
  uint64_t v3 = 0x657469726F766146;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x73746E65636552;
      goto LABEL_3;
    case 2:
      *a1 = 0x73746361746E6F43;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 0x64617079654BLL;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x69616D6563696F56;
      a1[1] = 0xE90000000000006CLL;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for _CustomURLRepresentationParameterConvertible.urlRepresentationParameter.getter in conformance MobilePhoneAppDeepLinks()
{
  lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();
  uint64_t v2 = _URLRepresentableEnum.urlRepresentationParameter.getter();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return protocol witness for _CustomURLRepresentationParameterConvertible.urlRepresentationParameter.getter in conformance MobilePhoneAppDeepLinks(v3, v0, v2, v1);
}

uint64_t protocol witness for static PersistentlyIdentifiable.persistentIdentifier.getter in conformance MobilePhoneAppDeepLinks()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t protocol witness for static _IntentValue.defaultResolverSpecification.getter in conformance MobilePhoneAppDeepLinks(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance MobilePhoneAppDeepLinks(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MobilePhoneAppDeepLinks and conformance MobilePhoneAppDeepLinks();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void protocol witness for static CaseIterable.allCases.getter in conformance MobilePhoneAppDeepLinks(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance MobilePhoneAppDeepLinks;
}

unint64_t specialized MobilePhoneAppDeepLinks.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MobilePhoneAppDeepLinks.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

void *associated type witness table accessor for RawRepresentable.RawValue : LosslessStringConvertible in MobilePhoneAppDeepLinks()
{
  return &protocol witness table for String;
}

uint64_t associated type witness table accessor for _IntentValue.Specification : ResolverSpecification in MobilePhoneAppDeepLinks()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type [MobilePhoneAppDeepLinks] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [MobilePhoneAppDeepLinks] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MobilePhoneAppDeepLinks] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MobilePhoneAppDeepLinks]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MobilePhoneAppDeepLinks] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MobilePhoneAppDeepLinks(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B9750);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MobilePhoneAppDeepLinks()
{
  return &type metadata for MobilePhoneAppDeepLinks;
}

uint64_t protocol witness for _CustomURLRepresentationParameterConvertible.urlRepresentationParameter.getter in conformance MobilePhoneAppDeepLinks(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t ContactsReportAndBlockTableViewModel.shouldShowBlockAll.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockAll);
  swift_beginAccess();
  return *v1;
}

uint64_t ContactsReportAndBlockTableViewModel.shouldShowBlockAll.setter(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockAll);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ContactsReportAndBlockTableViewModel.shouldShowBlockAll.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t ContactsReportAndBlockTableViewModel.shouldShowReportInitiator.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowReportInitiator);
  swift_beginAccess();
  return *v1;
}

uint64_t ContactsReportAndBlockTableViewModel.shouldShowReportInitiator.setter(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowReportInitiator);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ContactsReportAndBlockTableViewModel.shouldShowReportInitiator.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

uint64_t ContactsReportAndBlockTableViewModel.shouldShowBlockUnknown.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockUnknown);
  swift_beginAccess();
  return *v1;
}

uint64_t ContactsReportAndBlockTableViewModel.shouldShowBlockUnknown.setter(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockUnknown);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ContactsReportAndBlockTableViewModel.shouldShowBlockUnknown.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

id ContactsReportAndBlockTableViewModel.recentCall.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_recentCall);
  swift_beginAccess();
  Swift::String v2 = *v1;

  return v2;
}

void ContactsReportAndBlockTableViewModel.recentCall.setter(void *a1)
{
  int v3 = (void **)(v1 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_recentCall);
  swift_beginAccess();
  unsigned int v4 = *v3;
  unsigned char *v3 = a1;
}

uint64_t (*ContactsReportAndBlockTableViewModel.recentCall.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

uint64_t ContactsReportAndBlockTableViewModel.reportSpammer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ContactsReportAndBlockTableViewModel.reportSpammer.setter(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_reportSpammer);
  swift_beginAccess();
  void *v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*ContactsReportAndBlockTableViewModel.reportSpammer.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

id ContactsReportAndBlockTableViewModel.__allocating_init(shouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:)(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  swift_getObjectType();

  return specialized ContactsReportAndBlockTableViewModel.__allocating_init(shouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:)(a1, a2, a3, a4, a5, v5);
}

id ContactsReportAndBlockTableViewModel.init(shouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:)(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  swift_getObjectType();

  return specialized ContactsReportAndBlockTableViewModel.init(shouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:)(a1, a2, a3, a4, a5, v5);
}

uint64_t ContactsReportAndBlockTableViewModel.numberOfSections.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockAll);
  swift_beginAccess();
  if (*v1) {
    return 2;
  }
  Swift::String v2 = (unsigned char *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockUnknown);
  swift_beginAccess();
  if (*v2) {
    return 2;
  }
  unsigned int v4 = (unsigned char *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowReportInitiator);
  swift_beginAccess();
  if (*v4) {
    return 2;
  }
  else {
    return 1;
  }
}

Swift::Void __swiftcall ContactsReportAndBlockTableViewModel.block(contacts:)(Swift::OpaquePointer contacts)
{
}

Swift::Void __swiftcall ContactsReportAndBlockTableViewModel.unblock(contacts:)(Swift::OpaquePointer contacts)
{
}

uint64_t @objc ContactsReportAndBlockTableViewModel.block(contacts:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a1;
  specialized ContactsReportAndBlockTableViewModel.block(contacts:)(v6, a4);

  return swift_bridgeObjectRelease();
}

id ContactsReportAndBlockTableViewModel.report(recentCall:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  id v4 = a1;
  uint64_t v5 = static OS_os_log.default.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)id v7 = 138412290;
    id v9 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v4;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "calling from contactsViewModel %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v10 = (id *)(v2 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_reportSpammer);
  swift_beginAccess();
  return [*v10 reportSpamWithCall:v4];
}

void *ContactsReportAndBlockTableViewModel.formattedInitiatorValue.getter()
{
  uint64_t v1 = (id *)(v0 + OBJC_IVAR___PHContactsReportAndBlockTableViewModel_recentCall);
  swift_beginAccess();
  id v2 = [*v1 initiator];
  if (v2)
  {
    int v3 = v2;
    id v4 = [v2 formattedPhoneNumber];

    if (v4) {
      goto LABEL_5;
    }
  }
  id v5 = [*v1 initiator];
  os_log_type_t v6 = v5;
  if (v5)
  {
    id v4 = [v5 value];

LABEL_5:
    os_log_type_t v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v6;
}

void ContactsReportAndBlockTableViewModel.init()()
{
}

Swift::Void __swiftcall CNContact.unblock()()
{
  id v1 = [v0 phoneNumbers];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v30 = v0;
  if (v2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v4);
      os_log_type_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = [v5 value];
      id v9 = [v8 digits];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = (id)TUHomeCountryCode();
      if (v10)
      {
        unint64_t v11 = v10;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;
      }
      else
      {
        uint64_t v13 = 0;
      }
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v13)
      {
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v15 = 0;
      }
      id v16 = [objc_allocWithZone((Class)TUPhoneNumber) initWithDigits:v14 countryCode:v15];

      if (v16)
      {
        id v17 = [self sharedPrivacyManager];
        if (!v17) {
          goto LABEL_34;
        }
        uint64_t v18 = v17;
        [v17 setBlockIncomingCommunication:0 forPhoneNumber:v16];
      }
      ++v4;
      if (v7 == v3) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
  id v19 = [v30 emailAddresses];
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v20 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    if (v21) {
      goto LABEL_22;
    }
LABEL_29:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v21) {
    goto LABEL_29;
  }
LABEL_22:
  uint64_t v22 = self;
  uint64_t v23 = 4;
  while (1)
  {
    if ((v20 & 0xC000000000000001) != 0) {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v24 = *(id *)(v20 + 8 * v23);
    }
    id v25 = v24;
    uint64_t v26 = v23 - 3;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    id v27 = [v22 sharedPrivacyManager];
    if (!v27) {
      break;
    }
    unint64_t v28 = v27;
    id v29 = [v25 value];
    [v28 setBlockIncomingCommunication:0 forEmailAddress:v29];

    ++v23;
    if (v26 == v21) {
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
}

Swift::Void __swiftcall CNContact.block()()
{
  if (one-time initialization token for spamReport != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.spamReport);
    id v2 = v0;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    id v5 = &selRef_labeledValueForEmailAddress_;
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      id v7 = [v2 phoneNumbers];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CNLabeledValue]);
      uint64_t v8 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      id v10 = [v2 emailAddresses];
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v5 = &selRef_labeledValueForEmailAddress_;
      uint64_t v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Block: blocking phoneNumbers %s \n\n emailAddreses: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v13 = [v2 v5[388]];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v41 = v2;
    if (v14 >> 62) {
      break;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_25;
    }
LABEL_7:
    uint64_t v16 = 4;
    while (1)
    {
      id v17 = (v14 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v14 + 8 * v16);
      uint64_t v18 = v17;
      uint64_t v0 = (void *)(v16 - 3);
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      id v19 = [v17 value];
      id v20 = [v19 digits];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v21 = (id)TUHomeCountryCode();
      if (v21)
      {
        uint64_t v22 = v21;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;
      }
      else
      {
        uint64_t v24 = 0;
      }
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v24)
      {
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v26 = 0;
      }
      id v27 = [objc_allocWithZone((Class)TUPhoneNumber) initWithDigits:v25 countryCode:v26];

      if (v27)
      {
        id v28 = [self sharedPrivacyManager];
        if (!v28) {
          goto LABEL_39;
        }
        id v29 = v28;
        [v28 setBlockIncomingCommunication:1 forPhoneNumber:v27];
      }
      ++v16;
      if (v0 == (void *)v15) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_23:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (v15) {
    goto LABEL_7;
  }
LABEL_25:
  swift_bridgeObjectRelease_n();
  id v30 = [v41 emailAddresses];
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v31 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    if (!v32) {
      goto LABEL_34;
    }
LABEL_27:
    uint64_t v33 = self;
    uint64_t v34 = 4;
    while (1)
    {
      if ((v31 & 0xC000000000000001) != 0) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v35 = *(id *)(v31 + 8 * v34);
      }
      uint64_t v36 = v35;
      uint64_t v37 = v34 - 3;
      if (__OFADD__(v34 - 4, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      id v38 = [v33 sharedPrivacyManager];
      if (!v38) {
        break;
      }
      uint64_t v39 = v38;
      id v40 = [v36 value];
      [v39 setBlockIncomingCommunication:1 forEmailAddress:v40];

      ++v34;
      if (v37 == v32) {
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_27;
    }
LABEL_34:
    swift_bridgeObjectRelease_n();
  }
}

Swift::Bool __swiftcall CNContact.isBlocked()()
{
  id v1 = [v0 phoneNumbers];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v31 = v0;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v0 = (void *)(v4 - 3);
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v7 = [v5 value];
      id v8 = [v7 digits];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = (id)TUHomeCountryCode();
      if (v9)
      {
        id v10 = v9;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;
      }
      else
      {
        uint64_t v12 = 0;
      }
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v12)
      {
        NSString v14 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v14 = 0;
      }
      id v15 = [objc_allocWithZone((Class)TUPhoneNumber) initWithDigits:v13 countryCode:v14];

      if (v15)
      {
        id v16 = [self sharedPrivacyManager];
        if (!v16) {
          goto LABEL_41;
        }
        id v17 = v16;
        unsigned int v18 = [v16 isIncomingCommunicationBlockedForPhoneNumber:v15];

        if (!v18)
        {
          LOBYTE(v19) = 0;
LABEL_20:
          uint64_t v0 = v31;
          goto LABEL_24;
        }
      }
      ++v4;
      if (v0 == (void *)v3)
      {
        LOBYTE(v19) = 1;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
  LOBYTE(v19) = 1;
LABEL_24:
  swift_bridgeObjectRelease_n();
  id v20 = [v0 emailAddresses];
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v21 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    if (v22) {
      goto LABEL_26;
    }
LABEL_36:
    swift_bridgeObjectRelease_n();
    LOBYTE(v16) = v19;
    return (char)v16;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v22) {
    goto LABEL_36;
  }
LABEL_26:
  char v32 = v19;
  uint64_t v23 = self;
  uint64_t v24 = 4;
  while (1)
  {
    if ((v21 & 0xC000000000000001) != 0) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = *(id *)(v21 + 8 * v24);
    }
    NSString v26 = v25;
    uint64_t v19 = v24 - 3;
    if (__OFADD__(v24 - 4, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    id v16 = [v23 sharedPrivacyManager];
    if (!v16) {
      break;
    }
    id v27 = v16;
    id v28 = [v26 value];
    unsigned int v29 = [v27 isIncomingCommunicationBlockedForEmailAddress:v28];

    if (!v29)
    {
      LOBYTE(v19) = 0;
      goto LABEL_36;
    }
    ++v24;
    if (v19 == v22)
    {
      LOBYTE(v19) = v32;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return (char)v16;
}

id @objc ContactsReportAndBlockTableViewModel.formattedInitiatorValue.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }

  return v7;
}

id CHHandle.formattedPhoneNumber.getter()
{
  if ([v0 type] != (id)2) {
    return 0;
  }
  id result = [v0 value];
  if (result)
  {
    unint64_t v2 = result;
    uint64_t v3 = (void *)PNCopyBestGuessCountryCodeForNumber();

    if (!v3) {
      return 0;
    }
    id result = [v0 value];
    if (result)
    {
      id v4 = result;
      uint64_t v5 = (void *)CFPhoneNumberCreate();

      if (v5)
      {
        uint64_t String = CFPhoneNumberCreateString();
        if (String)
        {
          NSString v7 = (void *)String;
          uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

          return (id)v8;
        }
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id specialized ContactsReportAndBlockTableViewModel.__allocating_init(shouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:)(char a1, char a2, char a3, uint64_t a4, uint64_t a5, Class a6)
{
  uint64_t v11 = objc_allocWithZone(a6);
  ObjectType = (objc_class *)swift_getObjectType();
  v11[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockAll] = a1;
  v11[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowReportInitiator] = a2;
  v11[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockUnknown] = a3;
  *(void *)&v11[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_recentCall] = a4;
  *(void *)&v11[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_reportSpammer] = a5;
  v14.receiver = v11;
  v14.super_class = ObjectType;
  return [super init];
}

id specialized ContactsReportAndBlockTableViewModel.init(shouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:)(char a1, char a2, char a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  ObjectType = (objc_class *)swift_getObjectType();
  a6[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockAll] = a1;
  a6[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowReportInitiator] = a2;
  a6[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockUnknown] = a3;
  *(void *)&a6[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_recentCall] = a4;
  *(void *)&a6[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_reportSpammer] = a5;
  v14.receiver = a6;
  v14.super_class = ObjectType;
  return [super init];
}

uint64_t specialized ContactsReportAndBlockTableViewModel.block(contacts:)(unint64_t a1, SEL *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(a1 + 8 * i + 32);
    }
    uint64_t v8 = v7;
    [v7 *a2];
  }
LABEL_10:

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ContactsReportAndBlockTableViewModel()
{
  return self;
}

unint64_t VoicemailManagerMessageChanges.description.getter(uint64_t a1, char a2)
{
  unint64_t result = 0xD000000000000025;
  switch(a2)
  {
    case 1:
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000028;
      goto LABEL_5;
    case 2:
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000027;
LABEL_5:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Message);
      goto LABEL_6;
    case 3:
      return result;
    default:
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000027;
      type metadata accessor for MessageID(0);
LABEL_6:
      v3._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      return v5;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance VoicemailManagerMessageChanges()
{
  return VoicemailManagerMessageChanges.description.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for VoicemailManagerMessageChanges(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VoicemailManagerMessageChanges()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for VoicemailManagerMessageChanges(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VoicemailManagerMessageChanges(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VoicemailManagerMessageChanges(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VoicemailManagerMessageChanges(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for VoicemailManagerMessageChanges(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for VoicemailManagerMessageChanges(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t PHCFNotifyObserver.__allocating_init(key:defaultValue:toInt64:fromInt64:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = *(void *)v14;
  *(_DWORD *)(v14 + 16) = 0;
  *(unsigned char *)(v14 + 20) = 1;
  *(void *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v15 + 80) - 8) + 32))(v14 + *(void *)(v15 + 104), a3);
  id v16 = (void *)(v14 + *(void *)(*(void *)v14 + 112));
  *id v16 = a4;
  v16[1] = a5;
  id v17 = (void *)(v14 + *(void *)(*(void *)v14 + 120));
  void *v17 = a6;
  v17[1] = a7;
  return v14;
}

uint64_t PHCFNotifyObserver.getCurrentValue()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)out_token - v7;
  if (*((unsigned char *)v1 + 20) == 1)
  {
    out_token[0] = -1;
    uint64_t v9 = String.utf8CString.getter();
    uint32_t v10 = notify_register_check((const char *)(v9 + 32), out_token);
    swift_release();
    if (v10)
    {
      uint64_t v3 = *v1;
      if (*((unsigned char *)v1 + 20)) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, (uint64_t)v1 + *(void *)(v3 + 104), v4);
      }
    }
    else
    {
      *((_DWORD *)v1 + 4) = out_token[0];
      *((unsigned char *)v1 + 20) = 0;
      uint64_t v3 = *v1;
    }
  }
  int v12 = *((_DWORD *)v1 + 4);
  NSString v13 = *(uint64_t (**)(uint64_t))((char *)v1 + *(void *)(v3 + 112));
  uint64_t v14 = (uint64_t)v1 + *(void *)(v3 + 104);
  *(void *)out_token = v13(v14);
  notify_get_state(v12, (uint64_t *)out_token);
  (*(void (**)(void))((char *)v1 + *(void *)(*v1 + 120)))(*(void *)out_token);
  uint64_t v15 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v8, v4);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a1, v14, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PHCFNotifyObserver.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 104));
}

uint64_t PHCFNotifyObserver.toInt64.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 112));
  swift_retain();
  return v1;
}

uint64_t PHCFNotifyObserver.fromInt64.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 120));
  swift_retain();
  return v1;
}

uint64_t *PHCFNotifyObserver.init(key:defaultValue:toInt64:fromInt64:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *v7;
  *((_DWORD *)v7 + 4) = 0;
  *((unsigned char *)v7 + 20) = 1;
  v7[3] = a1;
  v7[4] = a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v12 + 80) - 8) + 32))((uint64_t)v7 + *(void *)(v12 + 104), a3);
  NSString v13 = (uint64_t *)((char *)v7 + *(void *)(*v7 + 112));
  *NSString v13 = a4;
  v13[1] = a5;
  uint64_t v14 = (uint64_t *)((char *)v7 + *(void *)(*v7 + 120));
  *uint64_t v14 = a6;
  v14[1] = a7;
  return v7;
}

uint64_t *PHCFNotifyObserver.deinit()
{
  uint64_t v1 = *v0;
  if ((*((unsigned char *)v0 + 20) & 1) == 0) {
    notify_cancel(*((_DWORD *)v0 + 4));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));
  swift_release();
  swift_release();
  return v0;
}

uint64_t PHCFNotifyObserver.__deallocating_deinit()
{
  PHCFNotifyObserver.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for PHCFNotifyObserver()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for PHCFNotifyObserver()
{
  return __swift_instantiateGenericMetadata();
}

id ContactSearchManager.__allocating_init(type:contactStore:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = specialized ContactSearchManager.init(type:contactStore:)(a1, a2);

  return v6;
}

uint64_t ContactSearchManager.search(for:shouldRefreshResult:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 392) = a2;
  *(void *)(v4 + 400) = v3;
  *(unsigned char *)(v4 + 456) = a3;
  *(void *)(v4 + 384) = a1;
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(v4 + 408) = v5;
  *(void *)(v4 + 416) = *(void *)(v5 - 8);
  *(void *)(v4 + 424) = swift_task_alloc();
  *(void *)(v4 + 432) = swift_task_alloc();
  *(void *)(v4 + 440) = swift_task_alloc();
  *(void *)(v4 + 448) = swift_task_alloc();
  return _swift_task_switch(ContactSearchManager.search(for:shouldRefreshResult:), 0, 0);
}

uint64_t ContactSearchManager.search(for:shouldRefreshResult:)()
{
  uint64_t v114 = v0;
  unint64_t v1 = *(void *)(v0 + 392);
  unint64_t v2 = (uint8_t *)_swiftEmptyArrayStorage;
  if (!v1) {
    goto LABEL_48;
  }
  char v3 = *(unsigned char *)(v0 + 456);
  swift_bridgeObjectRetain();
  if ((v3 & 1) == 0)
  {
    uint64_t v17 = *(void *)(v0 + 384);
    if (ContactSearchManager.searchString.getter() == v17 && v1 == v18)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v2 = (uint8_t *)ContactSearchManager.contactSearchResults.getter();
    goto LABEL_48;
  }
LABEL_3:
  uint64_t v4 = *(objc_class **)(v0 + 400);
  uint64_t v5 = *(objc_class **)(v0 + 384);
  id v6 = *(NSObject **)((char *)v4 + OBJC_IVAR___MPContactSearchManager_accessQueue);
  uint64_t v7 = swift_allocObject();
  v7[2].Class isa = v4;
  v7[3].Class isa = v5;
  v7[4].Class isa = (Class)v1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in ContactSearchManager.searchString.setter;
  *(void *)(v8 + 24) = v7;
  *(void *)(v0 + 48) = _sIeg_ytIegn_TRTA_0;
  *(void *)(v0 + 56) = v8;
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> ();
  *(void *)(v0 + 40) = &block_descriptor_19;
  uint64_t v9 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  uint32_t v10 = v4;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v9)
  {
    __break(1u);
    goto LABEL_52;
  }
  unint64_t v11 = *(void *)(v0 + 392);
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v12 = *(void *)(v0 + 384) & 0xFFFFFFFFFFFFLL;
  }
  NSString v13 = *(void **)(v0 + 400);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v13;
    *(void *)(v20 + 24) = _swiftEmptyArrayStorage;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter;
    *(void *)(v21 + 24) = v20;
    *(void *)(v0 + 144) = thunk for @callee_guaranteed () -> ()partial apply;
    *(void *)(v0 + 152) = v21;
    *(void *)(v0 + 112) = _NSConcreteStackBlock;
    *(void *)(v0 + 120) = 1107296256;
    *(void *)(v0 + 128) = thunk for @escaping @callee_guaranteed () -> ();
    *(void *)(v0 + 136) = &block_descriptor_48;
    uint64_t v22 = _Block_copy((const void *)(v0 + 112));
    id v23 = v13;
    swift_retain();
    swift_release();
    dispatch_sync(v6, v22);
    _Block_release(v22);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t aBlock = (void *)(v0 + 64);
  v111 = (const void *)(v0 + 376);
  swift_bridgeObjectRetain_n();
  uint64_t isEscapingClosureAtFileLocation = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  queue = v6;
  if (!os_log_type_enabled((os_log_t)isEscapingClosureAtFileLocation, v15))
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  uint64_t v109 = *(void *)(v0 + 384);
  id v16 = (uint8_t *)swift_slowAlloc();
  uint64_t v113 = swift_slowAlloc();
  *(_DWORD *)id v16 = 136446210;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v1, &v113);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)isEscapingClosureAtFileLocation, v15, "Searching for %{public}s", v16, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_18:

  v106 = (uint64_t *)(v0 + 352);
  uint64_t v24 = *(char **)(v0 + 400);
  uint64_t v25 = *(void *)(v0 + 384);
  ContactSearchManager.keyDescriptors.getter();
  id v26 = objc_allocWithZone((Class)CNContactFetchRequest);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v26 initWithKeysToFetch:isa];

  unsigned int v29 = (void *)ContactSearchManager.fetchPredicate.getter();
  [v28 setPredicate:v29];

  [v28 setSortOrder:1];
  Date.init()();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = _swiftEmptyArrayStorage;
  v104 = (void *)(v30 + 16);
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 0;
  char v32 = (unsigned char *)(v31 + 16);
  uint64_t v33 = *(void **)&v24[OBJC_IVAR___MPContactSearchManager_contactStore];
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = v24;
  v34[3] = v25;
  v34[4] = v1;
  uint64_t v34[5] = v31;
  v34[6] = v30;
  *(void *)(v0 + 96) = partial apply for closure #1 in ContactSearchManager.search(for:shouldRefreshResult:);
  *(void *)(v0 + 104) = v34;
  *(void *)(v0 + 64) = _NSConcreteStackBlock;
  *(void *)(v0 + 72) = 1107296256;
  *(void *)(v0 + 80) = thunk for @escaping @callee_guaranteed (@guaranteed CNContact, @guaranteed CNContactMatchInfo, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *(void *)(v0 + 88) = &block_descriptor_15;
  id v35 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  uint64_t v36 = v24;
  uint64_t v37 = v30;
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)(v0 + 376) = 0;
  v108 = v28;
  LODWORD(v33) = [v33 enumerateContactsAndMatchInfoWithFetchRequest:v28 error:v111 usingBlock:v35];
  _Block_release(v35);
  id v38 = *(id *)(v0 + 376);
  if (!v33)
  {
    uint64_t v42 = v38;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

LABEL_29:
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 138412290;
      swift_errorRetain();
      uint64_t v49 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 344) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v48 = v49;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error searching contacts %@", v47, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v50 = *(void *)(v0 + 448);
    uint64_t v51 = *(void *)(v0 + 408);
    uint64_t v52 = *(void *)(v0 + 416);
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    return v53();
  }
  swift_beginAccess();
  if (*v32 == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v112 = *(void *)(v0 + 384);
      id v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v113 = swift_slowAlloc();
      *(_DWORD *)id v41 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v1, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Search was cancelled for %{public}s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type ContactSearchError and conformance ContactSearchError();
    swift_allocError();
    goto LABEL_29;
  }
  uint64_t v43 = (const void *)(v0 + 208);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v7 = Logger.logObject.getter();
  LOBYTE(v1) = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v7, (os_log_type_t)v1))
  {
    swift_release();
    goto LABEL_36;
  }
  v111 = (const void *)(v0 + 208);
  uint64_t v8 = v30;
  unint64_t v2 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)unint64_t v2 = 134349056;
  swift_beginAccess();
  if (*v104 >> 62) {
    goto LABEL_53;
  }
  uint64_t v44 = *(void *)((*v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t *v106 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v1, "Found %{public}ld contacts", v2, 0xCu);
    uint64_t v37 = v8;
    swift_slowDealloc();
    uint64_t v43 = v111;
LABEL_36:
    uint64_t v55 = *(objc_class **)(v0 + 400);

    swift_beginAccess();
    uint64_t v56 = *(objc_class **)(v37 + 16);
    uint64_t v7 = swift_allocObject();
    v7[2].Class isa = v55;
    v7[3].Class isa = v56;
    uint64_t v57 = swift_allocObject();
    LOBYTE(v1) = v57;
    *(void *)(v57 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter;
    *(void *)(v57 + 24) = v7;
    *(void *)(v0 + 240) = thunk for @callee_guaranteed () -> ()partial apply;
    *(void *)(v0 + 248) = v57;
    *(void *)(v0 + 208) = _NSConcreteStackBlock;
    *(void *)(v0 + 216) = 1107296256;
    *(void *)(v0 + 224) = thunk for @escaping @callee_guaranteed () -> ();
    *(void *)(v0 + 232) = &block_descriptor_26_0;
    uint64_t v58 = _Block_copy(v43);
    uint64_t v8 = v37;
    unint64_t v2 = *(uint8_t **)(v0 + 248);
    id v59 = v55;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    uint64_t v60 = queue;
    dispatch_sync(queue, v58);
    _Block_release(v58);
    LOBYTE(v56) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if ((v56 & 1) == 0) {
      break;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v62 = *(void *)(v0 + 440);
  uint64_t v61 = *(void *)(v0 + 448);
  uint64_t v63 = *(void *)(v0 + 408);
  uint64_t v64 = *(void *)(v0 + 416);
  ContactSearchManager.populatePreferredPhoneNumber()();
  v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  v107(v62, v61, v63);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.default.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  uint64_t v68 = *(void *)(v0 + 440);
  if (v67)
  {
    uint64_t v69 = *(void *)(v0 + 432);
    uint64_t v70 = *(void *)(v0 + 408);
    uint64_t v71 = *(void *)(v0 + 416);
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v72 = 134349056;
    static Date.now.getter();
    Date.timeIntervalSinceReferenceDate.getter();
    double v74 = v73;
    uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    v75(v69, v70);
    Date.timeIntervalSinceReferenceDate.getter();
    *(double *)(v0 + 336) = v74 - v76;
    uint64_t v60 = queue;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v75(v68, v70);
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Contact search time: %{public}f", v72, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v77 = *(void *)(v0 + 408);
    uint64_t v78 = *(void *)(v0 + 416);

    uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v75(v68, v77);
  }
  if ([*(id *)(*(void *)(v0 + 400) + OBJC_IVAR___MPContactSearchManager_featureFlags) smartDialerRankingEnabled])
  {
    uint64_t v79 = *(void *)(v0 + 400);
    uint64_t v80 = ContactSearchManager.contactSearchResults.getter();
    if (*(void *)(v79 + OBJC_IVAR___MPContactSearchManager_contactSearchType))
    {
      id v81 = ContactSearchManager.ranker.getter();
      type metadata accessor for ContactSearchResult();
      Class v82 = Array._bridgeToObjectiveC()().super.isa;
      id v83 = [v81 rankContactSearchResults:v82];

      uint64_t v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      uint64_t v80 = v84;
    }
    v85 = *(void **)(v0 + 400);
    uint64_t v86 = swift_allocObject();
    *(void *)(v86 + 16) = v85;
    *(void *)(v86 + 24) = v80;
    uint64_t v87 = swift_allocObject();
    *(void *)(v87 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter;
    *(void *)(v87 + 24) = v86;
    *(void *)(v0 + 192) = thunk for @callee_guaranteed () -> ()partial apply;
    *(void *)(v0 + 200) = v87;
    *(void *)(v0 + 160) = _NSConcreteStackBlock;
    *(void *)(v0 + 168) = 1107296256;
    *(void *)(v0 + 176) = thunk for @escaping @callee_guaranteed () -> ();
    *(void *)(v0 + 184) = &block_descriptor_37;
    v88 = _Block_copy((const void *)(v0 + 160));
    id v89 = v85;
    swift_retain();
    swift_release();
    dispatch_sync(v60, v88);
    _Block_release(v88);
    LOBYTE(v88) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v88) {
      __break(1u);
    }
    v107(*(void *)(v0 + 424), *(void *)(v0 + 448), *(void *)(v0 + 408));
    v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v93 = *(void *)(v0 + 424);
      uint64_t v92 = *(void *)(v0 + 432);
      uint64_t v94 = *(void *)(v0 + 408);
      v95 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v95 = 134349056;
      static Date.now.getter();
      Date.timeIntervalSinceReferenceDate.getter();
      double v97 = v96;
      v75(v92, v94);
      Date.timeIntervalSinceReferenceDate.getter();
      *(double *)(v0 + 328) = v97 - v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v75(v93, v94);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Contact ranking time: %{public}f", v95, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      uint64_t v99 = *(void *)(v0 + 424);
      uint64_t v100 = *(void *)(v0 + 408);

      v75(v99, v100);
    }
  }
  uint64_t v101 = *(void *)(v0 + 448);
  uint64_t v102 = *(void *)(v0 + 408);
  unint64_t v2 = (uint8_t *)ContactSearchManager.contactSearchResults.getter();

  v75(v101, v102);
LABEL_48:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v103 = *(uint64_t (**)(uint8_t *))(v0 + 8);
  return v103(v2);
}

Swift::Void __swiftcall ContactSearchManager.cancelPreviousSearch()()
{
  id v6 = v0;
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)char v3 = 136446210;
    uint64_t v4 = ContactSearchManager.searchString.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Search cancelled for %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

CNContact_optional __swiftcall ContactSearchManager.contactForContactViewController(identifier:)(Swift::String identifier)
{
  os_log_type_t v2 = *(void **)(v1 + OBJC_IVAR___MPContactSearchManager_contactStore);
  NSString v3 = String._bridgeToObjectiveC()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002053A0;
  *(void *)(v4 + 32) = [self descriptorForRequiredKeys];
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = 0;
  id v6 = (objc_class *)[v2 unifiedContactWithIdentifier:v3 keysToFetch:isa error:&v14];

  id v7 = v14;
  if (!v6)
  {
    uint64_t v9 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint32_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, (os_log_type_t)v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v11, "Error fetching contact for ContactViewController", v12, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();

    id v6 = 0;
  }
  NSString v13 = v6;
  result.value.super.Class isa = v13;
  result.is_nil = v8;
  return result;
}

unint64_t ContactSearchType.init(rawValue:)(unint64_t a1)
{
  return specialized ContactSearchType.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ContactSearchType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized ContactSearchType.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void ContactSearchError.hash(into:)()
{
}

Swift::Int ContactSearchError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContactSearchError()
{
  return Hasher._finalize()();
}

id ContactSearchResult.contact.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MPContactSearchResult_contact);
  swift_beginAccess();
  os_log_type_t v2 = *v1;

  return v2;
}

void ContactSearchResult.contact.setter(void *a1)
{
}

uint64_t (*ContactSearchResult.contact.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

id ContactSearchResult.matchInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MPContactSearchResult_matchInfo);
  swift_beginAccess();
  os_log_type_t v2 = *v1;

  return v2;
}

void @objc ContactSearchResult.contact.setter(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v5 = (void **)(a1 + *a4);
  swift_beginAccess();
  id v6 = *v5;
  *unint64_t v5 = a3;
  id v7 = a3;
}

void ContactSearchResult.matchInfo.setter(void *a1)
{
}

void ContactSearchResult.contact.setter(void *a1, void *a2)
{
  char v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  unint64_t v5 = *v4;
  *char v4 = a1;
}

uint64_t (*ContactSearchResult.matchInfo.modify())()
{
  return SuggestionsSearchTableViewController.suggestions.modify;
}

void *ContactSearchResult.preferredPhoneNumber.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ContactSearchResult.preferredPhoneNumber.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber);
  swift_beginAccess();
  char v4 = *v3;
  uint8_t *v3 = a1;
}

uint64_t (*ContactSearchResult.preferredPhoneNumber.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

id ContactSearchResult.__allocating_init(contact:matchInfo:preferredPhoneNumber:)(void *a1, void *a2, void *a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  Swift::Bool v8 = (void **)&v7[OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber];
  *(void *)&v7[OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber] = 0;
  *(void *)&v7[OBJC_IVAR___MPContactSearchResult_contact] = a1;
  *(void *)&v7[OBJC_IVAR___MPContactSearchResult_matchInfo] = a2;
  swift_beginAccess();
  uint64_t v9 = *v8;
  *Swift::Bool v8 = a3;
  id v10 = a1;
  id v11 = a2;
  id v12 = a3;

  v15.receiver = v7;
  v15.super_class = v3;
  id v13 = [super init];

  return v13;
}

id ContactSearchResult.init(contact:matchInfo:preferredPhoneNumber:)(void *a1, void *a2, void *a3)
{
  id v7 = (void **)&v3[OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber];
  *(void *)&v3[OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber] = 0;
  *(void *)&v3[OBJC_IVAR___MPContactSearchResult_contact] = a1;
  *(void *)&v3[OBJC_IVAR___MPContactSearchResult_matchInfo] = a2;
  swift_beginAccess();
  Swift::Bool v8 = *v7;
  *id v7 = a3;
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;

  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for ContactSearchResult();
  [super init];

  return v12;
}

void ContactSearchResult.init()()
{
}

id ContactSearchResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContactSearchResult();
  return [super dealloc];
}

id ContactSearchManager.ranker.getter()
{
  uint64_t v1 = OBJC_IVAR___MPContactSearchManager____lazy_storage___ranker;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR___MPContactSearchManager____lazy_storage___ranker);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPContactSearchManager____lazy_storage___ranker);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)PHContactsSearchResultsRanker) init];
    unint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t ContactSearchManager.searchString.getter()
{
  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___MPContactSearchManager_accessQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ContactSearchManager.searchString.getter;
  *(void *)(v3 + 24) = v2;
  v9[4] = thunk for @callee_guaranteed () -> ()partial apply;
  void v9[5] = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v9[3] = &block_descriptor_58_0;
  id v4 = _Block_copy(v9);
  unint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10[0];
    swift_release();
    return v8;
  }
  return result;
}

uint64_t ContactSearchManager.searchString.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(NSObject **)&v2[OBJC_IVAR___MPContactSearchManager_accessQueue];
  id v6 = (void *)swift_allocObject();
  v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ContactSearchManager.searchString.setter;
  *(void *)(v7 + 24) = v6;
  v12[4] = thunk for @callee_guaranteed () -> ()partial apply;
  unint64_t v12[5] = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor_69;
  uint64_t v8 = _Block_copy(v12);
  id v9 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void (*ContactSearchManager.searchString.modify(void *a1))(void ****a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  v3[6] = ContactSearchManager.searchString.getter();
  v3[7] = v4;
  return ContactSearchManager.searchString.modify;
}

void ContactSearchManager.searchString.modify(void ****a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[6];
  uint64_t v4 = (*a1)[7];
  unint64_t v5 = (*a1)[8];
  id v6 = *(NSObject **)((char *)v5 + OBJC_IVAR___MPContactSearchManager_accessQueue);
  if ((a2 & 1) == 0)
  {
    id v12 = (void *)swift_allocObject();
    v12[2] = v5;
    v12[3] = v3;
    v12[4] = v4;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for closure #1 in ContactSearchManager.searchString.setter;
    *(void *)(v13 + 24) = v12;
    v2[4] = (void **)thunk for @callee_guaranteed () -> ()partial apply;
    v2[5] = (void **)v13;
    *uint64_t v2 = _NSConcreteStackBlock;
    v2[1] = (void **)1107296256;
    v2[2] = (void **)thunk for @escaping @callee_guaranteed () -> ();
    v2[3] = (void **)&block_descriptor_91_0;
    objc_super v14 = _Block_copy(v2);
    objc_super v15 = v5;
    swift_retain();
    swift_release();
    dispatch_sync(v6, v14);
    _Block_release(v14);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v4;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in ContactSearchManager.searchString.setter;
  *(void *)(v8 + 24) = v7;
  v2[4] = (void **)thunk for @callee_guaranteed () -> ()partial apply;
  v2[5] = (void **)v8;
  *uint64_t v2 = _NSConcreteStackBlock;
  v2[1] = (void **)1107296256;
  v2[2] = (void **)thunk for @escaping @callee_guaranteed () -> ();
  v2[3] = (void **)&block_descriptor_80;
  id v9 = _Block_copy(v2);
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  char v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_5:

  free(v2);
}

uint64_t ContactSearchManager.contactSearchResults.getter()
{
  id v10 = _swiftEmptyArrayStorage;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR___MPContactSearchManager_accessQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.getter;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_101;
  uint64_t v4 = _Block_copy(aBlock);
  unint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t ContactSearchManager.contactSearchResults.setter(uint64_t a1)
{
  uint64_t v3 = *(NSObject **)&v1[OBJC_IVAR___MPContactSearchManager_accessQueue];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter;
  *(void *)(v5 + 24) = v4;
  v10[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v10[5] = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed () -> ();
  v10[3] = &block_descriptor_112;
  id v6 = _Block_copy(v10);
  uint64_t v7 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void (*ContactSearchManager.contactSearchResults.modify(void *a1))(void ****a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  v3[6] = ContactSearchManager.contactSearchResults.getter();
  return ContactSearchManager.contactSearchResults.modify;
}

void ContactSearchManager.contactSearchResults.modify(void ****a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[6];
  uint64_t v4 = (*a1)[7];
  uint64_t v5 = *(NSObject **)((char *)v4 + OBJC_IVAR___MPContactSearchManager_accessQueue);
  if ((a2 & 1) == 0)
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v4;
    *(void *)(v11 + 24) = v3;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter;
    *(void *)(v12 + 24) = v11;
    v2[4] = (void **)thunk for @callee_guaranteed () -> ()partial apply;
    v2[5] = (void **)v12;
    *uint64_t v2 = _NSConcreteStackBlock;
    v2[1] = (void **)1107296256;
    v2[2] = (void **)thunk for @escaping @callee_guaranteed () -> ();
    v2[3] = (void **)&block_descriptor_134;
    uint64_t v13 = _Block_copy(v2);
    objc_super v14 = v4;
    swift_retain();
    swift_release();
    dispatch_sync(v5, v13);
    _Block_release(v13);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter;
  *(void *)(v7 + 24) = v6;
  v2[4] = (void **)thunk for @callee_guaranteed () -> ()partial apply;
  v2[5] = (void **)v7;
  *uint64_t v2 = _NSConcreteStackBlock;
  v2[1] = (void **)1107296256;
  v2[2] = (void **)thunk for @escaping @callee_guaranteed () -> ();
  v2[3] = (void **)&block_descriptor_123;
  uint64_t v8 = _Block_copy(v2);
  id v9 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  char v10 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_5:

  free(v2);
}

id ContactSearchManager.init(type:contactStore:)(uint64_t a1, void *a2)
{
  id v3 = specialized ContactSearchManager.init(type:contactStore:)(a1, a2);

  return v3;
}

void *ContactSearchManager.contacts.getter()
{
  unint64_t v0 = ContactSearchManager.contactSearchResults.getter();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      (*(void (**)(void))((swift_isaMask & *v5) + 0x68))();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v4);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t ContactSearchManager.keyDescriptors.getter()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1002091D0;
  *(void *)(v2 + 32) = CNContactIdentifierKey;
  *(void *)(v2 + 40) = CNContactPhoneNumbersKey;
  *(void *)(v2 + 48) = CNContactEmailAddressesKey;
  *(void *)(v2 + 56) = CNContactNicknameKey;
  *(void *)(v2 + 64) = CNContactOrganizationNameKey;
  uint64_t v13 = v2;
  specialized Array._endMutation()();
  id v3 = self;
  uint64_t v4 = CNContactIdentifierKey;
  uint64_t v5 = CNContactPhoneNumbersKey;
  uint64_t v6 = CNContactEmailAddressesKey;
  uint64_t v7 = CNContactNicknameKey;
  uint64_t v8 = CNContactOrganizationNameKey;
  id v9 = [v3 descriptorForRequiredKeysForStyle:0];
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v10 = [self descriptorForRequiredKeys];
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (!*(void *)(v1 + OBJC_IVAR___MPContactSearchManager_contactSearchType))
  {
    unint64_t v11 = specialized ContactSearchManager.fullTextSearchKeyDescriptors.getter();
    specialized Array.append<A>(contentsOf:)(v11);
  }
  return v13;
}

uint64_t ContactSearchManager.fetchPredicate.getter()
{
  uint64_t v1 = self;
  id v2 = [v1 predicateWithValue:0];
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___MPContactSearchManager_contactSearchType);
  if ((unint64_t)(v3 - 1) < 3)
  {
    uint64_t v4 = self;
    ContactSearchManager.searchString.getter();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 predicateForContactsMatchingSmartDialerString:v5];

    if (!v6) {
      id v6 = [v1 predicateWithValue:0];
    }
    goto LABEL_6;
  }
  if (!v3)
  {
    uint64_t v7 = self;
    ContactSearchManager.searchString.getter();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v7 predicateForContactsMatchingFullTextSearch:v8 containerIdentifiers:0 groupIdentifiers:0];

LABEL_6:
    return (uint64_t)v6;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)(void *a1, void *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (ContactSearchManager.searchString.getter() == a5 && v15 == a6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
LABEL_6:
      *a3 = 1;
      uint64_t result = swift_beginAccess();
      *(unsigned char *)(a7 + 16) = 1;
      return result;
    }
  }
  if (static Task<>.isCancelled.getter()) {
    goto LABEL_6;
  }
  if (!*(void *)(a4 + OBJC_IVAR___MPContactSearchManager_contactSearchType)) {
    goto LABEL_12;
  }
  id v18 = [a1 phoneNumbers];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_12:
    uint64_t result = ContactSearchManager.isMatchInfoValid(matchInfo:)(a2);
    if (result)
    {
      uint64_t v21 = (void *)(a8 + 16);
      uint64_t v22 = (objc_class *)type metadata accessor for ContactSearchResult();
      id v23 = (char *)objc_allocWithZone(v22);
      uint64_t v24 = (void **)&v23[OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber];
      *(void *)&v23[OBJC_IVAR___MPContactSearchResult_preferredPhoneNumber] = 0;
      *(void *)&v23[OBJC_IVAR___MPContactSearchResult_contact] = a1;
      *(void *)&v23[OBJC_IVAR___MPContactSearchResult_matchInfo] = a2;
      swift_beginAccess();
      uint64_t v25 = *v24;
      char *v24 = 0;
      id v26 = a1;
      id v27 = a2;
      id v28 = v26;
      id v29 = v27;

      v30.receiver = v23;
      v30.super_class = v22;
      [super init];

      swift_beginAccess();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t ContactSearchManager.isMatchInfoValid(matchInfo:)(void *a1)
{
  id v2 = [a1 matchedProperties];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = 0;
  }
  switch(*(void *)(v1 + OBJC_IVAR___MPContactSearchManager_contactSearchType))
  {
    case 0:
    case 1:
      swift_bridgeObjectRelease();
      char v5 = 1;
      goto LABEL_11;
    case 2:
      if (!v4) {
        goto LABEL_10;
      }
      id v6 = (void *)specialized Sequence.compactMap<A>(_:)(v4);
      swift_bridgeObjectRelease();
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v9 = specialized Sequence<>.contains(_:)(v7, v8, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v9 & 1;
      break;
    case 3:
      if (v4)
      {
        unint64_t v11 = (void *)specialized Sequence.compactMap<A>(_:)(v4);
        swift_bridgeObjectRelease();
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v14 = specialized Sequence<>.contains(_:)(v12, v13, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v5 = v14 ^ 1;
      }
      else
      {
LABEL_10:
        char v5 = 0;
      }
LABEL_11:
      uint64_t result = v5 & 1;
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1001BF8D4);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CNContact, @guaranteed CNContactMatchInfo, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(id, id, uint64_t))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a3;
  v7(v9, v8, a4);
  swift_release();
}

Swift::Void __swiftcall ContactSearchManager.populatePreferredPhoneNumber()()
{
  unint64_t v0 = ContactSearchManager.contactSearchResults.getter();
  unint64_t v41 = v0;
  if (v0 >> 62) {
    goto LABEL_49;
  }
  uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v1)
  {
    while (1)
    {
      uint64_t v2 = 0;
      uint64_t v39 = OBJC_IVAR___MPContactSearchManager_accessQueue;
      id v38 = &v48;
      uint64_t v42 = v1;
      while (1)
      {
        if ((v41 & 0xC000000000000001) != 0) {
          id v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(v41 + 32 + 8 * v2);
        }
        uint64_t v7 = v6;
        if (__OFADD__(v2++, 1))
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        id v9 = (void *)(*(uint64_t (**)(void *))((swift_isaMask & *v6) + 0x80))(v6);
        id v10 = [v9 matchedProperties:v38];

        if (v10) {
          break;
        }
LABEL_5:

        if (v2 == v1) {
          goto LABEL_50;
        }
      }
      uint64_t v45 = v7;
      uint64_t v46 = v2;
      uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v12;
      uint64_t v13 = v11 + 64;
      uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
      uint64_t v15 = v14 < 64 ? ~(-1 << v14) : -1;
      unint64_t v16 = v15 & *(void *)(v11 + 64);
      int64_t v17 = (unint64_t)(v14 + 63) >> 6;
      swift_bridgeObjectRetain_n();
      int64_t v18 = 0;
      unint64_t v19 = _swiftEmptyArrayStorage;
      while (1)
      {
        if (v16)
        {
          unint64_t v20 = __clz(__rbit64(v16));
          v16 &= v16 - 1;
          unint64_t v21 = v20 | (v18 << 6);
          goto LABEL_35;
        }
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_46;
        }
        if (v22 >= v17)
        {
LABEL_43:
          swift_release();
          swift_bridgeObjectRelease();
          char v30 = specialized Sequence<>.contains(_:)(v43, v44, v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v31 = swift_bridgeObjectRelease();
          uint64_t v1 = v42;
          uint64_t v7 = v45;
          uint64_t v2 = v46;
          if ((v30 & 1) == 0) {
            goto LABEL_5;
          }
          char v32 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v45) + 0x68))(v31);
          *(void *)&v54[0] = 0;
          *((void *)&v54[0] + 1) = 0xE000000000000000;
          uint64_t v33 = *(NSObject **)&v40[v39];
          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = v54;
          *(void *)(v34 + 24) = v40;
          uint64_t v35 = swift_allocObject();
          *(void *)(v35 + 16) = partial apply for closure #1 in ContactSearchManager.searchString.getter;
          *(void *)(v35 + 24) = v34;
          uint64_t v49 = thunk for @callee_guaranteed () -> ()partial apply;
          uint64_t v50 = v35;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v48 = thunk for @escaping @callee_guaranteed () -> ();
          *((void *)&v48 + 1) = &block_descriptor_145;
          uint64_t v36 = _Block_copy(&aBlock);
          uint64_t v37 = v40;
          swift_retain();
          swift_release();
          dispatch_sync(v33, v36);
          _Block_release(v36);
          LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v33 & 1) == 0)
          {
            unint64_t v4 = *((void *)&v54[0] + 1);
            uint64_t v3 = *(void *)&v54[0];
            swift_release();
            char v5 = specialized static SearchUtilities.matchedPhoneNumber(for:searchText:)(v32, v3, v4);
            swift_bridgeObjectRelease();

            (*(void (**)(char *))((swift_isaMask & *v45) + 0xA0))(v5);
            uint64_t v1 = v42;
            uint64_t v2 = v46;
            goto LABEL_5;
          }
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        unint64_t v23 = *(void *)(v13 + 8 * v22);
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v17) {
            goto LABEL_43;
          }
          unint64_t v23 = *(void *)(v13 + 8 * v18);
          if (!v23)
          {
            int64_t v18 = v22 + 2;
            if (v22 + 2 >= v17) {
              goto LABEL_43;
            }
            unint64_t v23 = *(void *)(v13 + 8 * v18);
            if (!v23)
            {
              int64_t v18 = v22 + 3;
              if (v22 + 3 >= v17) {
                goto LABEL_43;
              }
              unint64_t v23 = *(void *)(v13 + 8 * v18);
              if (!v23)
              {
                int64_t v18 = v22 + 4;
                if (v22 + 4 >= v17) {
                  goto LABEL_43;
                }
                unint64_t v23 = *(void *)(v13 + 8 * v18);
                if (!v23) {
                  break;
                }
              }
            }
          }
        }
LABEL_34:
        unint64_t v16 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_35:
        outlined init with copy of AnyHashable(*(void *)(v11 + 48) + 40 * v21, (uint64_t)&aBlock);
        v54[0] = aBlock;
        v54[1] = v48;
        uint64_t v55 = v49;
        outlined init with copy of AnyHashable((uint64_t)v54, (uint64_t)v51);
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v52 = 0;
          uint64_t v53 = 0;
        }
        outlined destroy of AnyHashable((uint64_t)v54);
        uint64_t v25 = v53;
        if (v53)
        {
          uint64_t v26 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
          }
          unint64_t v28 = v19[2];
          unint64_t v27 = v19[3];
          if (v28 >= v27 >> 1) {
            unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v19);
          }
          void v19[2] = v28 + 1;
          id v29 = &v19[2 * v28];
          v29[4] = v26;
          v29[5] = v25;
        }
      }
      int64_t v24 = v22 + 5;
      if (v24 >= v17) {
        goto LABEL_43;
      }
      unint64_t v23 = *(void *)(v13 + 8 * v24);
      if (v23) {
        break;
      }
      while (1)
      {
        int64_t v18 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          break;
        }
        if (v18 >= v17) {
          goto LABEL_43;
        }
        unint64_t v23 = *(void *)(v13 + 8 * v18);
        ++v24;
        if (v23) {
          goto LABEL_34;
        }
      }
LABEL_48:
      __break(1u);
LABEL_49:
      swift_bridgeObjectRetain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      if (!v1) {
        goto LABEL_50;
      }
    }
    int64_t v18 = v24;
    goto LABEL_34;
  }
LABEL_50:
  swift_bridgeObjectRelease_n();
}

uint64_t ContactSearchManager.rank(contactSearchResults:)()
{
  if (*(void *)(v0 + OBJC_IVAR___MPContactSearchManager_contactSearchType))
  {
    id v1 = ContactSearchManager.ranker.getter();
    type metadata accessor for ContactSearchResult();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v3 = [v1 rankContactSearchResults:isa];

    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return v4;
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
}

uint64_t @objc closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)(uint64_t a1, char a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  v4[4] = v9;
  a4;
  id v10 = (void *)swift_task_alloc();
  void v4[5] = v10;
  *id v10 = v4;
  v10[1] = @objc closure #1 in ContactSearchManager.search(for:shouldRefreshResult:);
  return ContactSearchManager.search(for:shouldRefreshResult:)(a1, v9, a2 & 1);
}

uint64_t @objc closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    type metadata accessor for ContactSearchResult();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  id v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

void ContactSearchManager.init()()
{
}

id specialized ContactSearchManager.init(type:contactStore:)(uint64_t a1, void *a2)
{
  unint64_t v20 = a2;
  uint64_t v21 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = OBJC_IVAR___MPContactSearchManager_featureFlags;
  id v9 = objc_allocWithZone((Class)TUFeatureFlags);
  id v10 = v2;
  *(void *)&v2[v8] = [v9 init];
  *(void *)&v10[OBJC_IVAR___MPContactSearchManager____lazy_storage___ranker] = 0;
  uint64_t v11 = OBJC_IVAR___MPContactSearchManager_accessQueue;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  int64_t v24 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v19);
  uint64_t v12 = v20;
  *(void *)&v10[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = &v10[OBJC_IVAR___MPContactSearchManager__searchString];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0xE000000000000000;
  *(void *)&v10[OBJC_IVAR___MPContactSearchManager__contactSearchResults] = _swiftEmptyArrayStorage;
  Logger.init(subsystem:category:)();
  *(void *)&v10[OBJC_IVAR___MPContactSearchManager_contactSearchType] = v21;
  if (v12)
  {
    id v14 = v12;
    uint64_t v15 = &selRef_HIDEventMonitor;
  }
  else
  {
    uint64_t v15 = &selRef_HIDEventMonitor;
    id v14 = [objc_allocWithZone((Class)CNContactStore) init];
  }
  *(void *)&v10[OBJC_IVAR___MPContactSearchManager_contactStore] = v14;
  id v16 = v12;

  v23.receiver = v10;
  v23.super_class = ObjectType;
  return [super v15[252]];
}

uint64_t sub_1001C08DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C08EC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C0924()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001C0934()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)(void *a1, void *a2, unsigned char *a3)
{
  return closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)(a1, a2, a3, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1001C099C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for ContactSearchResult()
{
  return self;
}

uint64_t sub_1001C09D4()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type ContactSearchError and conformance ContactSearchError()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactSearchError and conformance ContactSearchError;
  if (!lazy protocol witness table cache variable for type ContactSearchError and conformance ContactSearchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactSearchError and conformance ContactSearchError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContactSearchError and conformance ContactSearchError;
  if (!lazy protocol witness table cache variable for type ContactSearchError and conformance ContactSearchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactSearchError and conformance ContactSearchError);
  }
  return result;
}

uint64_t sub_1001C0A3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t specialized ContactSearchManager.fullTextSearchKeyDescriptors.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002054F0;
  *(void *)(v0 + 32) = CNContactDepartmentNameKey;
  *(void *)(v0 + 40) = CNContactJobTitleKey;
  *(void *)(v0 + 48) = CNContactNoteKey;
  *(void *)(v0 + 56) = CNContactPostalAddressesKey;
  *(void *)(v0 + 64) = CNContactUrlAddressesKey;
  *(void *)(v0 + 72) = CNContactRelationsKey;
  *(void *)(v0 + 80) = CNContactSocialProfilesKey;
  *(void *)(v0 + 88) = CNContactInstantMessageAddressesKey;
  uint64_t v10 = v0;
  specialized Array._endMutation()();
  id v1 = CNContactDepartmentNameKey;
  uint64_t v2 = CNContactJobTitleKey;
  uint64_t v3 = CNContactNoteKey;
  uint64_t v4 = CNContactPostalAddressesKey;
  uint64_t v5 = CNContactUrlAddressesKey;
  uint64_t v6 = CNContactRelationsKey;
  uint64_t v7 = CNContactSocialProfilesKey;
  uint64_t v8 = CNContactInstantMessageAddressesKey;
  return v10;
}

unint64_t specialized ContactSearchType.init(rawValue:)(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

uint64_t sub_1001C0B6C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C0B80()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C0B94()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t objectdestroyTm_5()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in ContactSearchManager.searchString.setter()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)(v0[2] + OBJC_IVAR___MPContactSearchManager__searchString);
  *uint64_t v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C0C38()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in ContactSearchManager.contactSearchResults.getter()
{
  **(void **)(v0 + 16) = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___MPContactSearchManager__contactSearchResults);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C0C94()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C0CA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C0CBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t objectdestroy_18Tm()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in ContactSearchManager.contactSearchResults.setter()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR___MPContactSearchManager__contactSearchResults) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C0D58()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C0D68()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in ContactSearchManager.searchString.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (void *)(*(void *)(v0 + 24) + OBJC_IVAR___MPContactSearchManager__searchString);
  uint64_t v3 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C0DF0()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type ContactSearchType and conformance ContactSearchType()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactSearchType and conformance ContactSearchType;
  if (!lazy protocol witness table cache variable for type ContactSearchType and conformance ContactSearchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactSearchType and conformance ContactSearchType);
  }
  return result;
}

uint64_t sub_1001C0EB0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_1001C0F0C(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x70))(*a1);
}

uint64_t sub_1001C0F70@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_1001C0FCC(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x88))(*a1);
}

uint64_t sub_1001C1030@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_1001C108C(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0xA0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1001C10F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactSearchManager.searchString.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001C1120(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return ContactSearchManager.searchString.setter(v1, v2);
}

uint64_t sub_1001C1160@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContactSearchManager.contactSearchResults.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001C118C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return ContactSearchManager.contactSearchResults.setter(v0);
}

ValueMetadata *type metadata accessor for ContactSearchType()
{
  return &type metadata for ContactSearchType;
}

uint64_t getEnumTagSinglePayload for ContactSearchError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ContactSearchError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001C12B8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactSearchError()
{
  return &type metadata for ContactSearchError;
}

uint64_t ObjC metadata update function for ContactSearchManager()
{
  return type metadata accessor for ContactSearchManager();
}

uint64_t type metadata accessor for ContactSearchManager()
{
  uint64_t result = type metadata singleton initialization cache for ContactSearchManager;
  if (!type metadata singleton initialization cache for ContactSearchManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContactSearchManager()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001C1418()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for @objc closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  unsigned int v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  uint64_t v7 = (uint64_t (*)(uint64_t, char, void *, void *))((char *)&async function pointer to @objc closure #1 in ContactSearchManager.search(for:shouldRefreshResult:)
                                                             + async function pointer to @objc closure #1 in ContactSearchManager.search(for:shouldRefreshResult:));
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1001C152C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

id Array<A>.uniqued()(uint64_t a1)
{
  uint64_t v2 = Array.init()();
  uint64_t v20 = v2;
  uint64_t v19 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  if (Array.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      id result = IsNativeType ? *(id *)(a1 + 8 * v3) : (id)_ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v11 = result;
      uint64_t v12 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v13 = (uint64_t)v19;
      swift_bridgeObjectRetain();
      id v14 = [v11 uniqueIdentifier];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      LOBYTE(v14) = specialized Set.contains(_:)(v15, v17, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
      {
      }
      else
      {
        Swift::Int v18 = (Swift::Int)v11;
        type metadata accessor for Array();
        id v4 = v11;
        Array.append(_:)();
        id v5 = [v4 uniqueIdentifier];
        Swift::Int v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v8 = v7;

        specialized Set._Variant.insert(_:)(&v18, v6, v8);
        swift_bridgeObjectRelease();
      }
      ++v3;
      if (v12 == Array.endIndex.getter())
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v20;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    return (id)v2;
  }
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for MessageID(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    char v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
      int64_t v24 = v30;
    }
    else
    {
      int64_t v24 = (void *)v22;
      id v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    uint64_t *v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for MessageID(0);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    Swift::Int v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      id v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<CHHandle>);
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    char v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v6;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v6 + 1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for MessageID(0);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    char v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<MessageID>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    Swift::Int v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    char v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          char v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t EmptyContentView.title.getter(uint64_t a1)
{
  return a1;
}

uint64_t EmptyContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = static Font.title.getter();
  uint64_t v13 = swift_getKeyPath();
  id v14 = [self tertiaryLabelColor:a1, a2];
  uint64_t v15 = Color.init(_:)();
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v8 & 1;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = KeyPath;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = v13;
  *(void *)(a3 + 56) = v12;
  *(void *)(a3 + 64) = result;
  *(void *)(a3 + 72) = v15;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance EmptyContentView@<X0>(uint64_t a1@<X8>)
{
  return EmptyContentView.body.getter(*v1, v1[1], a1);
}

uint64_t sub_1001C3070@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001C309C()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t associated type witness table accessor for View.Body : View in EmptyContentView()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for EmptyContentView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EmptyContentView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for EmptyContentView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EmptyContentView()
{
  return &type metadata for EmptyContentView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id RecentCallContactView.recentsController.getter(void *a1)
{
  if (a1)
  {
    return a1;
  }
  else
  {
    type metadata accessor for ObservableRecentsController(a1);
    lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
    id result = (id)EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t RecentCallContactView.$recentsController.getter()
{
  type metadata accessor for ObservableRecentsController(0);
  lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();

  return EnvironmentObject.projectedValue.getter();
}

id RecentCallContactView.makeCoordinator()()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for RecentCallContactView.Coordinator());

  return [v0 init];
}

uint64_t type metadata accessor for RecentCallContactView.Coordinator()
{
  return self;
}

uint64_t RecentCallContactView.makeUIViewController(context:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    id v5 = a2;
    id v6 = ObservableRecentsController.contact(for:)(a4);

    id v7 = [self viewControllerForContact:v6];
    id v8 = [v7 navigationItem];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewControllerRepresentableContext<RecentCallContactView>);
    UIViewControllerRepresentableContext.coordinator.getter();
    id v9 = [objc_allocWithZone((Class)UIBarButtonItem) initWithBarButtonSystemItem:0 target:v14 action:"didTapClose"];

    [v8 setLeftBarButtonItem:v9 animated:0];
    id v10 = [objc_allocWithZone((Class)UINavigationController) initWithRootViewController:v7];
    UIViewControllerRepresentableContext.coordinator.getter();
    uint64_t v11 = *(void (**)(id))((swift_isaMask & *v14) + 0x60);
    id v12 = v10;
    v11(v10);

    return (uint64_t)v12;
  }
  else
  {
    type metadata accessor for ObservableRecentsController(0);
    lazy protocol witness table accessor for type ObservableRecentsController and conformance ObservableRecentsController();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t RecentCallContactView.Coordinator.presentedViewController.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void RecentCallContactView.Coordinator.presentedViewController.setter(void *a1)
{
}

void (*RecentCallContactView.Coordinator.presentedViewController.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtCV11MobilePhone21RecentCallContactView11Coordinator_presentedViewController;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return VoicemailSearchMetadataView.delegate.modify;
}

Swift::Void __swiftcall RecentCallContactView.Coordinator.didTapClose()()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x58))();
  if (v1)
  {
    id v2 = v1;
    [v1 dismissViewControllerAnimated:1 completion:0];
  }
}

id RecentCallContactView.Coordinator.init()()
{
  swift_unknownObjectWeakInit();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecentCallContactView.Coordinator();
  return [super init];
}

id RecentCallContactView.Coordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecentCallContactView.Coordinator();
  return [super dealloc];
}

uint64_t protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance RecentCallContactView(uint64_t a1)
{
  return RecentCallContactView.makeUIViewController(context:)(a1, *(void **)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t protocol witness for UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:) in conformance RecentCallContactView()
{
  return UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)();
}

uint64_t protocol witness for static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:) in conformance RecentCallContactView()
{
  return static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)();
}

id protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance RecentCallContactView@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RecentCallContactView.Coordinator()) init];
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:) in conformance RecentCallContactView()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance RecentCallContactView()
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)();
}

uint64_t protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance RecentCallContactView()
{
  return static UIViewControllerRepresentable._layoutOptions(_:)();
}

void *associated type witness table accessor for View.Body : View in RecentCallContactView()
{
  return &protocol witness table for Never;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RecentCallContactView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type RecentCallContactView and conformance RecentCallContactView();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RecentCallContactView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type RecentCallContactView and conformance RecentCallContactView();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance RecentCallContactView()
{
}

uint64_t sub_1001C3B30@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_1001C3B8C(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x60);
  id v4 = *a1;
  return v3(v2);
}

void *initializeBufferWithCopyOfBuffer for RecentCallContactView(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v5;
  return a1;
}

void destroy for RecentCallContactView(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for RecentCallContactView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  id v7 = *(void **)(a2 + 16);
  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for RecentCallContactView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  id v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for RecentCallContactView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecentCallContactView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentCallContactView()
{
  return &type metadata for RecentCallContactView;
}

uint64_t SearchResultCellType.init(rawValue:)(unsigned int a1)
{
  unint64_t v1 = specialized SearchResultCellType.init(rawValue:)(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SearchResultCellType@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized SearchResultCellType.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t SearchViewController.delegate.getter()
{
  return CallsSearchController.delegate.getter();
}

uint64_t SearchViewController.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*SearchViewController.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSearchViewController_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SuggestionsSearchTableViewController.suggestionsDelegate.modify;
}

id SearchViewController.tableView.getter()
{
  return *(id *)(v0 + OBJC_IVAR___MPSearchViewController_tableView);
}

id SearchViewController.footerView.getter()
{
  uint64_t v1 = OBJC_IVAR___MPSearchViewController____lazy_storage___footerView;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR___MPSearchViewController____lazy_storage___footerView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___MPSearchViewController____lazy_storage___footerView);
  }
  else
  {
    id v4 = objc_allocWithZone((Class)type metadata accessor for SearchFooterCell());
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 initWithReuseIdentifier:v5];

    id v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    unint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t SearchViewController.hostingNavigationController.getter()
{
  return CallsSearchController.delegate.getter();
}

void SearchViewController.hostingNavigationController.setter(void *a1)
{
}

void (*SearchViewController.hostingNavigationController.modify(void *a1))(id **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MPSearchViewController_hostingNavigationController;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return SearchViewController.hostingNavigationController.modify;
}

void SearchViewController.hostingNavigationController.modify(id **a1, char a2)
{
  id v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    SearchViewController.hostingNavigationController.didset();
  }

  free(v3);
}

char *SearchViewController.contactAvatarCardController.getter()
{
  uint64_t v1 = OBJC_IVAR___MPSearchViewController____lazy_storage___contactAvatarCardController;
  unint64_t v2 = *(void **)&v0[OBJC_IVAR___MPSearchViewController____lazy_storage___contactAvatarCardController];
  if (v2)
  {
    id v3 = *(char **)&v0[OBJC_IVAR___MPSearchViewController____lazy_storage___contactAvatarCardController];
  }
  else
  {
    id v4 = *(void **)&v0[OBJC_IVAR___MPSearchViewController_tableView];
    NSString v5 = (objc_class *)type metadata accessor for ContactAvatarCardController();
    id v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(void *)&v6[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController____lazy_storage___cardController] = 0;
    v13.receiver = v6;
    v13.super_class = v5;
    id v7 = v4;
    id v8 = v0;
    id v9 = [(char *)[super init]];
    *(void *)&v9[OBJC_IVAR____TtC11MobilePhone27ContactAvatarCardController_tableViewController + 8] = &protocol witness table for SearchViewController;
    swift_unknownObjectWeakAssign();

    swift_unknownObjectWeakAssign();
    id v10 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v9;
    id v3 = v9;

    unint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

uint64_t SearchViewController.datasource.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___MPSearchViewController____lazy_storage___datasource) = a1;
  return _objc_release_x1();
}

void (*SearchViewController.datasource.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = SearchViewController.datasource.getter();
  return SearchViewController.datasource.modify;
}

void SearchViewController.datasource.modify(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + OBJC_IVAR___MPSearchViewController____lazy_storage___datasource);
  *(void *)(v1 + OBJC_IVAR___MPSearchViewController____lazy_storage___datasource) = v2;
}

uint64_t SearchViewController.searchControllerProvider.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___MPSearchViewController_searchControllerProvider);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1);
  return v2;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [SearchController])(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchController);
  v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v3.super.isa;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased NSArray)(uint64_t a1)
{
  id v1 = (id)(*(uint64_t (**)(void))(a1 + 16))();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchController);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t SearchViewController.searchControllerProvider.setter(uint64_t a1, uint64_t a2)
{
  NSString v5 = (uint64_t *)(v2 + OBJC_IVAR___MPSearchViewController_searchControllerProvider);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *NSString v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

uint64_t key path getter for SearchViewController.searchControllerProvider : SearchViewController@<X0>(void **a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x150))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    id v7 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned [SearchController]);
  }
  else
  {
    id v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t key path setter for SearchViewController.searchControllerProvider : SearchViewController(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out [SearchController]);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  id v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((swift_isaMask & **a2) + 0x158);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return v7(v6, v5);
}

uint64_t (*SearchViewController.searchControllerProvider.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

void SearchViewController.searchControllers.setter(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(id))((swift_isaMask & *v1) + 0xD8);
    if (v3 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR___MPSearchViewController_tableView);
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        id v7 = *(void **)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      uint64_t v8 = v4([v7 registerCellWith:v6]);
      if (v8)
      {
        id v9 = (void *)v8;
        [v7 setHostingNavigationController:v8];
      }
      ++v5;
      swift_unknownObjectRelease();
    }
    while (v3 != v5);
  }
  uint64_t v10 = swift_bridgeObjectRelease();
  id v11 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x108))(v10);
  (*(void (**)(unint64_t))((swift_isaMask & *v11) + 0x178))(a1);
}

void (*SearchViewController.searchControllers.modify(uint64_t *a1))(unint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x170))();

  *a1 = v4;
  return SearchViewController.searchControllers.modify;
}

void SearchViewController.searchControllers.modify(unint64_t *a1, char a2)
{
  if (a2)
  {
    unint64_t v2 = swift_bridgeObjectRetain();
    SearchViewController.searchControllers.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    SearchViewController.searchControllers.setter(*a1);
  }
}

id SearchViewController.contentInsetAdjustmentBehavior.getter()
{
  return [*(id *)(v0 + OBJC_IVAR___MPSearchViewController_tableView) contentInsetAdjustmentBehavior];
}

id SearchViewController.contentInsetAdjustmentBehavior.setter(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR___MPSearchViewController_tableView) setContentInsetAdjustmentBehavior:a1];
}

id (*SearchViewController.contentInsetAdjustmentBehavior.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___MPSearchViewController_tableView);
  a1[1] = v3;
  *a1 = [v3 contentInsetAdjustmentBehavior];
  return SearchViewController.contentInsetAdjustmentBehavior.modify;
}

id SearchViewController.contentInsetAdjustmentBehavior.modify(uint64_t a1)
{
  return [*(id *)(a1 + 8) setContentInsetAdjustmentBehavior:*(void *)a1];
}

Swift::Void __swiftcall SearchViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for SearchViewController(0);
  [super viewDidLoad];
  unint64_t v3 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x168))(v2);
  if (v3 >> 62) {
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v6 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x150))(v5);
    if (v6)
    {
      uint64_t v7 = (uint64_t)v6;
      uint64_t v8 = (void *)v6();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
    }
    else
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
    }
    (*(void (**)(void *))((swift_isaMask & *v1) + 0x170))(v8);
  }
  id v9 = *(void **)((char *)v1 + OBJC_IVAR___MPSearchViewController_tableView);
  [v9 setDelegate:v1];
  [v9 setRowHeight:UITableViewAutomaticDimension];
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v9 setSectionHeaderTopPadding:0.0];
  [v9 _setUseLegacySectionHeaderFooterPinningBehavior:1];
  [v9 _setSectionHeaderFooterPadding:2.22507386e-308];
  [v9 setSeparatorInsetReference:1];
  uint64_t v10 = self;
  id v11 = [v1 traitCollection];
  id v12 = [v11 preferredContentSizeCategory];

  [v10 separatorInsetForContentSizeCategory:v12 isEditing:0];
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;

  [v9 setSeparatorInset:v14, v16, v18, v20];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1002053C0;
  *(void *)(v21 + 32) = type metadata accessor for UITraitPreferredContentSizeCategory();
  *(void *)(v21 + 40) = &protocol witness table for UITraitPreferredContentSizeCategory;
  UIViewController.registerForTraitChanges<A>(_:handler:)();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  id v22 = [v1 view];
  if (v22)
  {
    unint64_t v23 = v22;
    [v22 addSubview:v9];

    SearchViewController.loadConstraints()();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall SearchViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  id v2 = v1;
  unint64_t v3 = SearchViewController.contactAvatarCardController.getter();
  id v5 = ContactAvatarCardController.cardController.getter();

  id v4 = [v2 view];
  [v5 setSourceView:v4];
}

Swift::Void __swiftcall SearchViewController.viewIsAppearing(_:)(Swift::Bool a1)
{
  id v2 = v1;
  v18.receiver = v2;
  v18.super_class = (Class)type metadata accessor for SearchViewController(0);
  [super viewIsAppearing:a1];
  id v5 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v2) + 0x108))(v4);
  (*(void (**)(void))((swift_isaMask & *v5) + 0x1D0))();

  uint64_t v6 = *(void **)((char *)v2 + OBJC_IVAR___MPSearchViewController_tableView);
  uint64_t v7 = self;
  id v8 = [v2 traitCollection];
  id v9 = [v8 preferredContentSizeCategory];

  [v7 separatorInsetForContentSizeCategory:v9 isEditing:0];
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;

  [v6 setSeparatorInset:v11, v13, v15, v17];
}

void SearchViewController.loadConstraints()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100207760;
  id v2 = *(void **)&v0[OBJC_IVAR___MPSearchViewController_tableView];
  id v3 = [v2 leadingAnchor];
  id v4 = [v0 view];
  if (!v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v5 = v4;
  id v6 = [v4 leadingAnchor];

  id v7 = [v3 constraintEqualToAnchor:v6];
  *(void *)(v1 + 32) = v7;
  id v8 = [v2 trailingAnchor];
  id v9 = [v0 view];
  if (!v9)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  double v10 = v9;
  id v11 = [v9 trailingAnchor];

  id v12 = [v8 constraintEqualToAnchor:v11];
  *(void *)(v1 + 40) = v12;
  id v13 = [v2 topAnchor];
  id v14 = [v0 view];
  if (!v14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  double v15 = v14;
  id v16 = [v14 topAnchor];

  id v17 = [v13 constraintEqualToAnchor:v16];
  *(void *)(v1 + 48) = v17;
  id v18 = [v2 bottomAnchor];
  id v19 = [v0 view];
  if (!v19)
  {
LABEL_11:
    __break(1u);
    return;
  }
  double v20 = v19;
  uint64_t v21 = self;
  id v22 = [v20 bottomAnchor];

  id v23 = [v18 constraintEqualToAnchor:v22];
  *(void *)(v1 + 56) = v23;
  specialized Array._endMutation()();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v21 activateConstraints:isa];
}

Swift::Void __swiftcall SearchViewController.prewarmSearchControllers(after:)(Swift::Double after)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  *(Swift::Double *)(v8 + 32) = after;
  *(void *)(v8 + 40) = v6;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in SearchViewController.prewarmSearchControllers(after:), v8);
  swift_release();
}

Swift::Void __swiftcall SearchViewController.updateSearchResults(for:)(UISearchController a1)
{
  id v2 = [(objc_class *)a1.super.super.super.isa searchBar];
  (*(void (**)(void))((swift_isaMask & *v1) + 0x1B8))();
}

Swift::Void __swiftcall SearchViewController.updateSearchResults(for:)(UISearchBar a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v2);
  id v3 = [(objc_class *)a1.super.super.super.isa text];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  id v8 = [(objc_class *)a1.super.super.super.isa searchTextField];
  id v9 = [v8 tokens];

  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v12 = (void *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v5;
  v12[4] = v7;
  unint64_t v12[5] = v10;
  aBlock[4] = partial apply for closure #1 in SearchViewController.updateSearchResults(for:);
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  _Block_copy(aBlock);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v13 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  Throttle.run(_:)(v13);
  swift_release();
}

void closure #1 in SearchViewController.updateSearchResults(for:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v8 = (void *)Strong;
    SearchViewController.performSearch(_:_:)(a2, a3, a4);
  }
}

void SearchViewController.performSearch(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  id v4 = v3;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    if (a2) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = 0;
    }
    if (a2) {
      unint64_t v12 = a2;
    }
    else {
      unint64_t v12 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for UISearchToken);
    swift_bridgeObjectRetain();
    uint64_t v13 = Array.description.getter();
    uint64_t v14 = a1;
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "SearchViewController: Performing Search for searchText: %s searchTokens: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  id v17 = (void *)((char *)v4 + OBJC_IVAR___MPSearchViewController_searchText);
  uint64_t *v17 = a1;
  v17[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v4 + OBJC_IVAR___MPSearchViewController_searchTokens) = a3;
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRelease();
  id v19 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x108))(v18);
  (*(void (**)(uint64_t, unint64_t, uint64_t))((swift_isaMask & *v19) + 0x1C0))(a1, a2, a3);
}

void SearchViewController.tableView(_:willDisplay:forRowAt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x108))();
  unint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x188))();

  uint64_t v7 = IndexPath.section.getter();
  uint64_t v8 = v7;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 < v11)
    {
LABEL_3:
      unint64_t v9 = IndexPath.section.getter();
      if ((v6 & 0xC000000000000001) == 0)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v9 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v10 = *(void **)(v6 + 8 * v9 + 32);
          swift_unknownObjectRetain();
          goto LABEL_7;
        }
        __break(1u);
        return;
      }
      uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
      swift_bridgeObjectRelease();
      if ([v10 respondsToSelector:"tableView:willDisplayCell:forRowAtIndexPath:"])
      {
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v10 tableView:a1 willDisplayCell:a2 forRowAtIndexPath:isa];
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      return;
    }
  }
  else if (v7 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }

  swift_bridgeObjectRelease();
}

void SearchViewController.tableView(_:didSelectRowAt:)(uint64_t a1)
{
  id v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8))();
  if (v3)
  {
    id v4 = v3;
    if ([v3 respondsToSelector:"searchControllerDidSelectRow"]) {
      [v4 searchControllerDidSelectRow];
    }
    id v3 = (void *)swift_unknownObjectRelease();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(void *))((swift_isaMask & *v1) + 0x108))(v3);
  unint64_t v6 = (*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x188))();

  uint64_t v7 = IndexPath.section.getter();
  uint64_t v8 = v7;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 < v11)
    {
LABEL_7:
      unint64_t v9 = IndexPath.section.getter();
      if ((v6 & 0xC000000000000001) == 0)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v9 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v10 = *(void **)(v6 + 8 * v9 + 32);
          swift_unknownObjectRetain();
          goto LABEL_11;
        }
        __break(1u);
        return;
      }
      uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_11:
      swift_bridgeObjectRelease();
      if ([v10 respondsToSelector:"tableView:didSelectRowAtIndexPath:"])
      {
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v10 tableView:a1 didSelectRowAtIndexPath:isa];
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      return;
    }
  }
  else if (v7 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_7;
  }

  swift_bridgeObjectRelease();
}

unint64_t SearchViewController.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(uint64_t a1)
{
  id v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  uint64_t v5 = IndexPath.section.getter();
  uint64_t v6 = v5;
  if (!(v4 >> 62))
  {
    if (v5 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v6 >= v11) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t result = IndexPath.section.getter();
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v8 = *(void **)(v4 + 8 * result + 32);
    swift_unknownObjectRetain();
LABEL_7:
    swift_bridgeObjectRelease();
    if ([v8 respondsToSelector:"tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:"])
    {
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v10 = [v8 tableView:a1 trailingSwipeActionsConfigurationForRowAtIndexPath:isa];
      swift_unknownObjectRelease();

      return (unint64_t)v10;
    }
    swift_unknownObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

void SearchViewController.tableView(_:accessoryButtonTappedForRowWith:)(uint64_t a1)
{
  id v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  uint64_t v5 = IndexPath.section.getter();
  uint64_t v6 = v5;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 < v9)
    {
LABEL_3:
      unint64_t v7 = IndexPath.section.getter();
      if ((v4 & 0xC000000000000001) == 0)
      {
        if ((v7 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v7 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v8 = *(void **)(v4 + 8 * v7 + 32);
          swift_unknownObjectRetain();
          goto LABEL_7;
        }
        __break(1u);
        return;
      }
      uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
      swift_bridgeObjectRelease();
      if ([v8 respondsToSelector:"tableView:accessoryButtonTappedForRowWithIndexPath:"])
      {
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v8 tableView:a1 accessoryButtonTappedForRowWithIndexPath:isa];
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      return;
    }
  }
  else if (v5 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }

  swift_bridgeObjectRelease();
}

uint64_t @objc SearchViewController.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Bool __swiftcall SearchViewController.tableView(_:shouldDrawTopSeparatorForSection:)(UITableView _, Swift::Int shouldDrawTopSeparatorForSection)
{
  specialized SearchViewController.tableView(_:shouldDrawTopSeparatorForSection:)(shouldDrawTopSeparatorForSection);
  return result;
}

UIView_optional __swiftcall SearchViewController.tableView(_:viewForHeaderInSection:)(UITableView _, Swift::Int viewForHeaderInSection)
{
  specialized SearchViewController.tableView(_:viewForHeaderInSection:)(viewForHeaderInSection);
  result.value.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

void closure #1 in SearchViewController.tableView(_:viewForHeaderInSection:)(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v4 = (char *)Strong;
    swift_unknownObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)unint64_t v7 = 136315138;
      id v8 = [a2 sectionTitle];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "See all tapped for section: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    SearchViewController.presentSeeAllViewController(for:)(a2);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v12 = (void *)static SearchMetrics.shared;
    id v13 = [a2 sectionType];
    if (*(void *)&v4[OBJC_IVAR___MPSearchViewController_searchText + 8])
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = String.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = -1;
    }
    (*(void (**)(uint64_t, id, uint64_t))((swift_isaMask & *v12) + 0xE0))(3, v13, v14);
  }
}

void SearchViewController.presentSeeAllViewController(for:)(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD8))();
  if (v3)
  {
    unint64_t v4 = (void *)v3;
    swift_unknownObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)unint64_t v7 = 136315138;
      id v8 = [a1 sectionTitle];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Pushing result controller: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    id v18 = [a1 viewForDetails];
    [v4 setNavigationBarHidden:0 animated:0];
    id v19 = &selRef_labeledValueForEmailAddress_;
    id v20 = [v18 navigationItem];
    [v20 setTitleView:0];

    uint64_t v21 = SearchViewController.compositeSearchText.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      id v25 = [self mainBundle];
      v45._object = (void *)0xE000000000000000;
      v26._object = (void *)0x8000000100244390;
      v26._uint64_t countAndFlagsBits = 0xD000000000000011;
      v27.value._uint64_t countAndFlagsBits = 0x746E656365524850;
      v27.value._object = (void *)0xE900000000000073;
      v28._uint64_t countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      v45._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v45);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1002060A0;
      uint64_t v30 = SearchViewController.compositeSearchText.getter();
      uint64_t v32 = v31;
      *(void *)(v29 + 56) = &type metadata for String;
      unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v29 + 64) = v33;
      *(void *)(v29 + 32) = v30;
      *(void *)(v29 + 40) = v32;
      id v34 = [a1 sectionTitle];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      *(void *)(v29 + 96) = &type metadata for String;
      *(void *)(v29 + 104) = v33;
      *(void *)(v29 + 72) = v35;
      *(void *)(v29 + 80) = v37;
      String.init(format:arguments:)();
      id v19 = &selRef_labeledValueForEmailAddress_;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v38 = [a1 sectionTitle];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v39 = [v18 v19[254]];
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v39 setTitle:v40];

    id v41 = [v18 v19[254]];
    [v41 setLargeTitleDisplayMode:2];

    [v4 pushViewController:v18 animated:1];
  }
  else
  {
    swift_unknownObjectRetain_n();
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136315138;
      id v14 = [a1 sectionTitle];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Failed to find navigationController and push resultController: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
}

void SearchViewController.tableView(_:heightForHeaderInSection:)(uint64_t a1, unint64_t a2)
{
}

double SearchViewController.tableView(_:heightForFooterInSection:)(uint64_t a1, uint64_t a2)
{
  return specialized SearchViewController.tableView(_:heightForFooterInSection:)(a2);
}

UIView_optional __swiftcall SearchViewController.tableView(_:viewForFooterInSection:)(UITableView _, Swift::Int viewForFooterInSection)
{
  uint64_t v2 = (objc_class *)specialized SearchViewController.tableView(_:viewForFooterInSection:)(viewForFooterInSection);
  result.value.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

UIView_optional __swiftcall SearchViewController.viewForFooter(in:)(UITableView in)
{
  if (SearchViewController.needsReindexing()()) {
    uint64_t v2 = (objc_class *)SearchViewController.footerView.getter();
  }
  else {
    uint64_t v2 = 0;
  }
  result.value.super.super.Class isa = v2;
  result.is_nil = v1;
  return result;
}

void SearchViewController.heightForFooter(in:)()
{
  if (SearchViewController.needsReindexing()())
  {
    uint64_t v0 = SearchViewController.footerView.getter();
    (*(void (**)(void))((swift_isaMask & *v0) + 0x78))();
  }
}

uint64_t SearchViewController.needsReindexing()()
{
  unint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x168))();
  unint64_t v2 = v1;
  if (v1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (char i = 0; v3; char i = 0)
  {
    unint64_t v5 = 0;
    while ((v2 & 0xC000000000000001) != 0)
    {
      os_log_type_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_15;
      }
LABEL_10:
      unsigned int v8 = [v6 sectionNeedsIndexing];
      swift_unknownObjectRelease();
      if (v8)
      {
        char i = 1;
        if (v7 == v3) {
          goto LABEL_18;
        }
        unint64_t v5 = v7;
      }
      else
      {
        ++v5;
        if (v7 == v3) {
          goto LABEL_18;
        }
      }
    }
    if (v5 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_16;
    }
    os_log_type_t v6 = *(void **)(v2 + 8 * v5 + 32);
    swift_unknownObjectRetain();
    unint64_t v7 = v5 + 1;
    if (!__OFADD__(v5, 1)) {
      goto LABEL_10;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return i & 1;
}

Swift::Void __swiftcall SearchViewController.didCompleteSearch()()
{
  unint64_t v1 = v0;
  unint64_t v2 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x108))();
  unint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x188))();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4)
  {
    unint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    UIViewController.contentUnavailableConfiguration.setter();
    id v7 = SearchViewController.footerView.getter();
    [v7 setHidden:0];
  }
  else
  {
    unint64_t v5 = *(void (**)(void))((swift_isaMask & *v1) + 0x248);
    *((void *)&v9 + 1) = type metadata accessor for UIContentUnavailableConfiguration();
    unint64_t v10 = &protocol witness table for UIContentUnavailableConfiguration;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
    v5();
    UIViewController.contentUnavailableConfiguration.setter();
    id v6 = SearchViewController.footerView.getter();
    [v6 setHidden:1];
  }
}

uint64_t SearchViewController.contentUnavailableConfig()()
{
  static UIContentUnavailableConfiguration.empty()();
  uint64_t v0 = self;
  id v1 = [v0 mainBundle];
  v27._object = (void *)0xE000000000000000;
  v2._object = (void *)0x8000000100244160;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  v3.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v3.value._object = (void *)0xE900000000000073;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v27._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v27);

  UIContentUnavailableConfiguration.text.setter();
  id v5 = [v0 mainBundle];
  v28._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0x5F57454E5F595254;
  v6._object = (void *)0xEE00484352414553;
  v7.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v7.value._object = (void *)0xE900000000000073;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v28);

  SearchViewController.compositeSearchText.getter();
  uint64_t v10 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v10 >= 1)
  {
    id v11 = [v0 mainBundle];
    v12._uint64_t countAndFlagsBits = 0xD000000000000013;
    v29._object = (void *)0xE000000000000000;
    v12._object = (void *)0x8000000100244180;
    v13.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v13.value._object = (void *)0xE900000000000073;
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v29._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v29);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1002053C0;
    uint64_t v16 = SearchViewController.compositeSearchText.getter();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (SearchViewController.needsReindexing()())
    {
      id v20 = [v0 mainBundle];
      v21._uint64_t countAndFlagsBits = 0xD000000000000014;
      v30._object = (void *)0xE000000000000000;
      v21._object = (void *)0x80000001002441A0;
      v22.value._uint64_t countAndFlagsBits = 0x746E656365524850;
      v22.value._object = (void *)0xE900000000000073;
      v23._uint64_t countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      v30._uint64_t countAndFlagsBits = 0;
      Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v30);

      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 10;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
    }
  }
  return UIContentUnavailableConfiguration.secondaryText.setter();
}

uint64_t SearchViewController.compositeSearchText.getter()
{
  uint64_t v1 = type metadata accessor for AttributedString();
  __chkstk_darwin(v1 - 8);
  NSString v40 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  unint64_t v3 = *(void *)(v0 + OBJC_IVAR___MPSearchViewController_searchTokens);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_24;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v35 = v0;
  uint64_t v6 = 0;
  unint64_t v7 = v3 & 0xC000000000000001;
  Swift::String v8 = &selRef_HIDEventMonitor;
  Swift::String v9 = &lazy cache variable for type metadata for CSSuggestion;
  uint64_t v10 = CSSuggestion_ptr;
  uint64_t v38 = v4;
  unint64_t v39 = v3;
  uint64_t v36 = (char *)&type metadata for Any + 8;
  unint64_t v37 = v3 & 0xC000000000000001;
  do
  {
    if (v7) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v3 + 8 * v6 + 32);
    }
    Swift::String v12 = v11;
    if ([v11 v8[465]])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v42, 0, sizeof(v42));
    }
    outlined init with take of Any?((uint64_t)v42, (uint64_t)v43);
    if (v44)
    {
      type metadata accessor for VMAccount(0, v9);
      if (swift_dynamicCast())
      {
        Swift::String_optional v13 = v41;
        uint64_t v14 = v45 & 0xFFFFFFFFFFFFLL;
        if ((v46 & 0x2000000000000000) != 0) {
          uint64_t v14 = HIBYTE(v46) & 0xF;
        }
        uint64_t v15 = v9;
        if (v14) {
          uint64_t v16 = (void *)0xE100000000000000;
        }
        else {
          uint64_t v16 = (void *)0xE000000000000000;
        }
        v17._object = v16;
        v17._uint64_t countAndFlagsBits = 32 * (v14 != 0);
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        uint64_t v18 = v8;
        CSSuggestion.localizedAttributedSuggestion.getter();
        Swift::String v19 = NSAttributedString.init(_:)();
        id v20 = [v19 string];

        Swift::String v21 = v10;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v24 = v23;

        Swift::String v9 = v15;
        v25._uint64_t countAndFlagsBits = v22;
        uint64_t v10 = v21;
        v25._object = v24;
        String.append(_:)(v25);

        unint64_t v7 = v37;
        uint64_t v4 = v38;
        unint64_t v3 = v39;
        Swift::String v8 = v18;
        swift_bridgeObjectRelease();
      }
    }
    else
    {

      outlined destroy of Locale?((uint64_t)v43, &demangling cache variable for type metadata for Any?);
    }
    ++v6;
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
  uint64_t v0 = v35;
LABEL_25:
  unint64_t v26 = *(void *)(v0 + OBJC_IVAR___MPSearchViewController_searchText + 8);
  if (v26)
  {
    uint64_t v27 = *(void *)(v0 + OBJC_IVAR___MPSearchViewController_searchText);
    uint64_t v28 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v28 = v27 & 0xFFFFFFFFFFFFLL;
    }
    if (v28)
    {
      uint64_t v29 = v45 & 0xFFFFFFFFFFFFLL;
      if ((v46 & 0x2000000000000000) != 0) {
        uint64_t v29 = HIBYTE(v46) & 0xF;
      }
      uint64_t v30 = 32 * (v29 != 0);
      if (v29) {
        uint64_t v31 = (void *)0xE100000000000000;
      }
      else {
        uint64_t v31 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      v32._uint64_t countAndFlagsBits = v30;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = v27;
      v33._object = (void *)v26;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
    }
  }
  return v45;
}

Swift::Void __swiftcall SearchViewController.scrollViewWillBeginDragging(_:)(UIScrollView a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(Class))((swift_isaMask & *v1) + 0xA8))(a1.super.super.super.isa);
  if (v2)
  {
    [v2 searchControllerBeginDragging];
    swift_unknownObjectRelease();
  }
}

unint64_t SearchViewController.configure(cardController:presentationResultForIndex:)(uint64_t a1)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  uint64_t v5 = IndexPath.section.getter();
  uint64_t v6 = v5;
  if (!(v4 >> 62))
  {
    if (v5 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v6 >= v11) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t result = IndexPath.section.getter();
  if ((v4 & 0xC000000000000001) != 0)
  {
    Swift::String v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    Swift::String v8 = *(void **)(v4 + 8 * result + 32);
    swift_unknownObjectRetain();
LABEL_7:
    swift_bridgeObjectRelease();
    if ([v8 respondsToSelector:"configureWithCardController:presentationResultForIndex:"])
    {
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v10 = [v8 configureWithCardController:a1 presentationResultForIndex:isa];
      swift_unknownObjectRelease();

      return (unint64_t)v10;
    }
    swift_unknownObjectRelease();
    return 1;
  }
  __break(1u);
  return result;
}

id SearchViewController.init(coder:)(void *a1)
{
  unint64_t v3 = v1;
  Logger.init(subsystem:category:)();
  swift_unknownObjectWeakInit();
  uint64_t v4 = OBJC_IVAR___MPSearchViewController_tableView;
  *(void *)&v3[v4] = [objc_allocWithZone((Class)UITableView) initWithFrame:0.0 style:0.0];
  *(void *)&v3[OBJC_IVAR___MPSearchViewController____lazy_storage___footerView] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR___MPSearchViewController____lazy_storage___contactAvatarCardController] = 0;
  *(void *)&v3[OBJC_IVAR___MPSearchViewController____lazy_storage___datasource] = 0;
  uint64_t v5 = &v3[OBJC_IVAR___MPSearchViewController_searchText];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v3[OBJC_IVAR___MPSearchViewController_searchTokens] = _swiftEmptyArrayStorage;
  uint64_t v6 = OBJC_IVAR___MPSearchViewController_throttle;
  type metadata accessor for Throttle(0);
  swift_allocObject();
  *(void *)&v3[v6] = Throttle.init()();
  unint64_t v7 = &v3[OBJC_IVAR___MPSearchViewController_searchControllerProvider];
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for SearchViewController(0);
  [super initWithCoder:a1];

  return v8;
}

id SearchViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchViewController(0);
  return [super dealloc];
}

uint64_t protocol witness for ContactAvatarCardControllerProtocol.configure(cardController:presentationResultForIndex:) in conformance SearchViewController()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x260))();
}

uint64_t protocol witness for SearchControllersWithResultsProtocol.didCompleteSearch() in conformance SearchViewController()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x240))();
}

uint64_t closure #1 in Throttle.init()()
{
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v0 = (void *)static OS_dispatch_queue.main.getter();
  OS_dispatch_queue.async(execute:)();

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_scheduledWorkItem) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t Throttle.run(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_scheduledWorkItem;
  if (*(void *)(v1 + OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_scheduledWorkItem))
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SearchViewController: Throttling Search", v7, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v5 = static OS_dispatch_queue.main.getter();
    OS_dispatch_queue.async(execute:)();
  }

  *(void *)(v2 + v4) = a1;
  swift_retain();
  swift_release();
  return PassthroughSubject.send(_:)();
}

uint64_t Throttle.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhoneP33_7D318A91A6864B0EE883C15F8839C9058Throttle_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

id specialized closure #1 in SearchViewController.viewDidLoad()(char *a1)
{
  uint64_t v2 = *(void **)&a1[OBJC_IVAR___MPSearchViewController_tableView];
  unint64_t v3 = self;
  id v4 = [a1 traitCollection];
  id v5 = [v4 preferredContentSizeCategory];

  [v3 separatorInsetForContentSizeCategory:v5 isEditing:0];
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;

  return [v2 setSeparatorInset:v7, v9, v11, v13];
}

unint64_t specialized SearchResultCellType.init(rawValue:)(unsigned int a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v2 = a1;
  switch(a1)
  {
    case 0u:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 0;
      break;
    case 1u:
      return v2 | ((unint64_t)v1 << 32);
    case 2u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 2;
      break;
    case 3u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 3;
      break;
    case 4u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 4;
      break;
    case 5u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 5;
      break;
    case 6u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 6;
      break;
    case 7u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 7;
      break;
    case 8u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 8;
      break;
    default:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

uint64_t sub_1001C938C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in SearchViewController.prewarmSearchControllers(after:)(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  uint64_t v7 = *((void *)v1 + 5);
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = partial apply for closure #1 in PHVoicemailMessageTableViewCell.tipKitStartObservation();
  return closure #1 in SearchViewController.prewarmSearchControllers(after:)(v6, a1, v4, v5, v7);
}

uint64_t sub_1001C948C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #1 in SearchViewController.updateSearchResults(for:)()
{
  closure #1 in SearchViewController.updateSearchResults(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void specialized SearchViewController.tableView(_:shouldDrawTopSeparatorForSection:)(uint64_t a1)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 > a1) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRetain();
    double v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2048;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to fetch result controller for section: %ld as there are %ld result controllers", (uint8_t *)v10, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1) {
    goto LABEL_9;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (a1 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a1)
  {
    uint64_t v5 = *(void **)(v4 + 8 * a1 + 32);
    swift_unknownObjectRetain();
LABEL_7:
    swift_bridgeObjectRelease();
    id v6 = [v5 sectionTitle];
    swift_unknownObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void specialized SearchViewController.tableView(_:viewForHeaderInSection:)(uint64_t a1)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  if (!(v4 >> 62))
  {
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2048;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to fetch result controller for section: %ld as there are %ld result controllers", (uint8_t *)v26, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 <= a1) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)a1)
  {
LABEL_24:
    __break(1u);
    return;
  }
  uint64_t v5 = *(void **)(v4 + 8 * a1 + 32);
  swift_unknownObjectRetain();
LABEL_7:
  id v6 = [v5 sectionTitle];
  swift_unknownObjectRelease();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  swift_bridgeObjectRelease();
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      double v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      double v11 = *(void **)(v4 + 8 * a1 + 32);
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    id v12 = [v11 sectionTitle];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v14 = objc_allocWithZone((Class)type metadata accessor for SearchHeaderCell());
    uint64_t v15 = SearchHeaderCell.init(sectionTitle:reuseIdentifier:)(v13);
    id v16 = [v11 results];
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRelease();
    if ((uint64_t)[v11 maximumNumberOfRowsInSection] >= v18)
    {
      [*(id *)&v15[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllButton] setHidden:1];
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v19 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = v11;
      Swift::String v21 = (uint64_t *)&v15[OBJC_IVAR____TtC11MobilePhone16SearchHeaderCell_seeAllTapHandler];
      swift_beginAccess();
      uint64_t v22 = *v21;
      *Swift::String v21 = (uint64_t)partial apply for closure #1 in SearchViewController.tableView(_:viewForHeaderInSection:);
      v21[1] = v20;
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v22);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void specialized SearchViewController.tableView(_:heightForHeaderInSection:)(unint64_t a1)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    uint64_t v5 = *(void **)(v4 + 8 * a1 + 32);
    swift_unknownObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    id v6 = [v5 sectionTitle];
    swift_unknownObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

double specialized SearchViewController.tableView(_:heightForFooterInSection:)(uint64_t a1)
{
  unint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x188))();

  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v6 = v5 - 1;
    if (!__OFSUB__(v5, 1)) {
      goto LABEL_3;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v6 = v14 - 1;
  if (__OFSUB__(v14, 1)) {
    goto LABEL_17;
  }
LABEL_3:
  if (v6 <= a1)
  {
    swift_bridgeObjectRelease();
    return 0.0;
  }
  if ((v4 & 0xC000000000000001) == 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a1)
    {
      uint64_t v7 = *(void **)(v4 + 8 * a1 + 32);
      swift_unknownObjectRetain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
  swift_bridgeObjectRelease();
  id v8 = [v7 sectionTitle];
  swift_unknownObjectRelease();
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    if (one-time initialization token for verticalLayoutMargin == -1) {
      return *(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin;
    }
LABEL_21:
    swift_once();
    return *(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin;
  }
  return 0.0;
}

uint64_t specialized SearchViewController.tableView(_:viewForFooterInSection:)(uint64_t a1)
{
  unint64_t v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108))();
  unint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x188))();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 - 1;
    if (!__OFSUB__(v6, 1)) {
      goto LABEL_3;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v24 - 1;
  if (__OFSUB__(v24, 1)) {
    goto LABEL_18;
  }
LABEL_3:
  if (v7 <= a1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a1)
    {
      id v8 = *(void **)(v5 + 8 * a1 + 32);
      swift_unknownObjectRetain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_19:
  id v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
  swift_bridgeObjectRelease();
  id v9 = [v8 sectionTitle];
  swift_unknownObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13) {
    return 0;
  }
  a1 = (uint64_t)[objc_allocWithZone((Class)UIView) init];
  id v14 = [self mainScreen];
  [v14 bounds];
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;

  v25.origin.x = v16;
  v25.origin.y = v18;
  v25.size.width = v20;
  v25.size.height = v22;
  double Width = CGRectGetWidth(v25);
  if (one-time initialization token for verticalLayoutMargin != -1) {
LABEL_22:
  }
    swift_once();
  [a1 setFrame:0.0, 0.0, Width, *(double *)&static SearchLayout.CellSpacingConstants.verticalLayoutMargin];
  return a1;
}

unint64_t lazy protocol witness table accessor for type SearchResultCellType and conformance SearchResultCellType()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchResultCellType and conformance SearchResultCellType;
  if (!lazy protocol witness table cache variable for type SearchResultCellType and conformance SearchResultCellType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchResultCellType and conformance SearchResultCellType);
  }
  return result;
}

uint64_t sub_1001CA224@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CA280(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xB0);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1001CA2E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xD8))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CA340(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0xE0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1001CA3A8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CA40C(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x110))(*a1);
}

uint64_t sub_1001CA480@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CA4E4(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x170);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1001CA550@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x180))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CA5B4(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x188))(*a1);
}

ValueMetadata *type metadata accessor for SearchResultCellType()
{
  return &type metadata for SearchResultCellType;
}

uint64_t ObjC metadata update function for Throttle()
{
  return type metadata accessor for Throttle(0);
}

uint64_t sub_1001CA630()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased NSArray)()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased NSArray)(*(void *)(v0 + 16));
}

uint64_t sub_1001CA670()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out [SearchController])()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned [SearchController])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1001CA710()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void partial apply for closure #1 in SearchViewController.tableView(_:viewForHeaderInSection:)()
{
  closure #1 in SearchViewController.tableView(_:viewForHeaderInSection:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001CA758()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in Throttle.init()()
{
  return closure #1 in Throttle.init()();
}

id RecentsDetailPresenter.__allocating_init(recentsController:contactsService:callReportingViewModel:)(void *a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = specialized RecentsDetailPresenter.init(recentsController:contactsService:callReportingViewModel:)(a1, a2, a3);

  return v8;
}

void RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = [a1 validRemoteParticipantHandles];
  if (v6
    && ((id v7 = v6,
         type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle), lazy protocol witness table accessor for type CHHandle and conformance NSObject(), uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)(), v7, (v8 & 0xC000000000000001) == 0)? (v9 = *(void *)(v8 + 16)): (v9 = __CocoaSet.count.getter()), swift_bridgeObjectRelease(), v9 >= 2))
  {
    id v10 = a1;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x8000000100244420, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 1024;
      [v10 isIncoming];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 18) = 1024;
      CHRecentCall.isGroupFaceTimeWithSomeUnknownContacts.getter();

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] Showing Recent Call Details with multiple handles: incoming: %{BOOL}d, unknownContacts: %{BOOL}d", (uint8_t *)v13, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    if [*(id *)&v3[OBJC_IVAR___MPRecentsDetailPresenter_featureflags] unknownInitiatorReportEnabled]&& objc_msgSend(v10, "isIncoming")&& (CHRecentCall.isGroupFaceTimeWithSomeUnknownContacts.getter())
    {
      id v29 = RecentsDetailPresenter.multipleContactsBlockAndReportViewController(for:)(v10);
    }
    else
    {
      id v29 = RecentsDetailPresenter.multipleContactsViewController(for:)(v10);
    }
    uint64_t v30 = v29;
    [a2 pushViewController:v29 animated:1];
  }
  else
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0;
    id v15 = [a1 contactIdentifier];
    if (!v15) {
      goto LABEL_15;
    }
    CGFloat v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    swift_bridgeObjectRelease();
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      id v31 = getter of contactViewController #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(v14, (uint64_t)v3, a1);
      [a2 pushViewController:v31 animated:1];
      swift_release();
    }
    else
    {
LABEL_15:
      uint64_t v21 = swift_allocObject();
      swift_unknownObjectWeakInit();
      CGFloat v22 = (void *)swift_allocObject();
      v22[2] = v21;
      v22[3] = a1;
      void v22[4] = v14;
      v22[5] = v3;
      v22[6] = a2;
      id v23 = a1;
      swift_retain();
      id v24 = a2;
      CGRect v25 = v3;
      swift_retain();
      id v26 = [v23 callerId];
      if (v26)
      {
        uint64_t v27 = v26;
        swift_release();
        aBlock[4] = (uint64_t)partial apply for closure #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:);
        aBlock[5] = (uint64_t)v22;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed IMNickname?) -> ();
        aBlock[3] = (uint64_t)&block_descriptor_21;
        uint64_t v28 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        TUMapItemForDestinationID();
        _Block_release(v28);
        swift_release();
        swift_release();
      }
      else
      {
        closure #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(0, v21, v23, v14, (uint64_t)v25, v24);
        swift_release();
        swift_release();
        swift_release();
      }
    }
  }
}

id RecentsDetailPresenter.init(recentsController:contactsService:callReportingViewModel:)(void *a1, void *a2, void *a3)
{
  id v6 = specialized RecentsDetailPresenter.init(recentsController:contactsService:callReportingViewModel:)(a1, a2, a3);

  return v6;
}

id RecentsDetailPresenter.multipleContactsBlockAndReportViewController(for:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)&v1[OBJC_IVAR___MPRecentsDetailPresenter_recentsController];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002053A0;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for PHContactViewController);
  *(void *)(v5 + 32) = [(id)swift_getObjCClassFromMetadata() descriptorForRequiredKeys];
  uint64_t v41 = v5;
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v4 contactByHandleForRecentCall:a1 keyDescriptors:isa];

  if (v7)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  }
  id v9 = [a1 validRemoteParticipantHandles];
  if (v9)
  {
    id v10 = v9;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    unint64_t v11 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 {
         && _CocoaArrayWrapper.endIndex.getter())
  }
  {
    specialized Set.init(_nonEmptyArrayLiteral:)((unint64_t)_swiftEmptyArrayStorage);
    unint64_t v11 = v39;
  }
  else
  {
    unint64_t v11 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  Swift::Int v13 = specialized Set._Variant.filter(_:)(v12, v8);
  swift_bridgeObjectRelease();
  id v14 = a1;
  id v15 = v2;
  specialized Sequence.compactMap<A>(_:)(v13, v14, (uint64_t)v15);
  unint64_t v17 = v16;
  swift_release();

  swift_bridgeObjectRetain();
  id v18 = v14;
  id v19 = v15;
  unint64_t v20 = (unint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo8CHHandleCG_So9CNContactCs5NeverOTg50177_s11MobilePhone22RecentsDetailPresenterC44multipleContactsBlockAndReportViewController33_FAD6BBFC5E0AAC96A4CD65761702D59ALL3forSo010PHContactsih5TablekL0CSo12CHRecentCallC_tFSo9e4CSo8D7CXEfU1_SDyAgJGSo12CHRecentCallC0H5Phone0jkL0CTf1cn_nTf4nggg_n((uint64_t)v11, v8, v18, (uint64_t)v19);
  swift_bridgeObjectRelease_n();

  uint64_t v21 = v18;
  char v22 = specialized Sequence.contains(where:)(v17, v21);

  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  BOOL v25 = v23 == v24;
  BOOL v26 = v23 != v24 && v24 > 0;
  id v27 = objc_allocWithZone((Class)type metadata accessor for FaceTimeSpamReportManager());
  uint64_t v28 = v21;
  id v29 = [v27 init];
  uint64_t v30 = (objc_class *)type metadata accessor for ContactsReportAndBlockTableViewModel();
  id v31 = objc_allocWithZone(v30);
  v31[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockAll] = v25;
  v31[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowReportInitiator] = v22 & 1;
  v31[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_shouldShowBlockUnknown] = v26;
  *(void *)&v31[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_recentCall] = v28;
  *(void *)&v31[OBJC_IVAR___PHContactsReportAndBlockTableViewModel_reportSpammer] = v29;
  v40.receiver = v31;
  v40.super_class = v30;
  id v32 = [super init];
  if (v17 >> 62)
  {
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  }
  swift_bridgeObjectRelease();
  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v11);
  swift_bridgeObjectRelease();
  id v33 = objc_allocWithZone((Class)PHContactsAndBlockTableViewController);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  Class v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v35 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  Class v36 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v37 = [v33 initWithContactArray:v34 unknownContacts:v35 contactHandles:v36 tableViewModel:v32];

  return v37;
}

id RecentsDetailPresenter.multipleContactsViewController(for:)(void *a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)&v1[OBJC_IVAR___MPRecentsDetailPresenter_recentsController];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002053A0;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for PHContactViewController);
  *(void *)(v5 + 32) = [(id)swift_getObjCClassFromMetadata() descriptorForRequiredKeys];
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v4 contactByHandleForRecentCall:a1 keyDescriptors:isa];

  if (v7)
  {
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  }
  id v9 = [a1 validRemoteParticipantHandles];
  if (v9)
  {
    id v10 = v9;
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    unint64_t v11 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 {
         && _CocoaArrayWrapper.endIndex.getter())
  }
  {
    specialized Set.init(_nonEmptyArrayLiteral:)((unint64_t)_swiftEmptyArrayStorage);
    unint64_t v11 = v19;
  }
  else
  {
    unint64_t v11 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRetain();
  id v12 = a1;
  id v13 = v2;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo8CHHandleCG_So9CNContactCs5NeverOTg50177_s11MobilePhone22RecentsDetailPresenterC44multipleContactsBlockAndReportViewController33_FAD6BBFC5E0AAC96A4CD65761702D59ALL3forSo010PHContactsih5TablekL0CSo12CHRecentCallC_tFSo9e4CSo8D7CXEfU1_SDyAgJGSo12CHRecentCallC0H5Phone0jkL0CTf1cn_nTf4nggg_n((uint64_t)v11, v8, v12, (uint64_t)v13);
  swift_bridgeObjectRelease_n();

  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v11);
  swift_bridgeObjectRelease();
  id v14 = objc_allocWithZone((Class)PHContactsTableViewController);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v17 = [v14 initWithContactArray:v15 contactHandles:v16];

  return v17;
}

id getter of contactViewController #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    id v5 = *(id *)(a1 + 16);
  }
  else
  {
    id v6 = RecentsDetailPresenter.contactViewController(for:)(a3);
    swift_beginAccess();
    id v7 = *v4;
    *id v4 = v6;
    id v5 = v6;

    uint64_t v3 = 0;
  }
  id v8 = v3;
  return v5;
}

id RecentsDetailPresenter.contactViewController(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *(void **)(v1 + OBJC_IVAR___MPRecentsDetailPresenter_recentsController);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1002053A0;
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for PHContactViewController);
  *(void *)(v11 + 32) = [(id)swift_getObjCClassFromMetadata() descriptorForRequiredKeys];
  v18[1] = v11;
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = [v10 contactForRecentCall:a1 keyDescriptors:isa];

  if (!v13) {
    id v13 = [objc_allocWithZone((Class)CNContact) init];
  }
  id v14 = RecentsDetailPresenter.contactViewController(for:contact:)(a1, v13);
  id v15 = [a1 imageURL];
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    goto LABEL_7;
  }
  Class v16 = v15;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
LABEL_7:

    outlined destroy of URL?((uint64_t)v9);
    return v14;
  }
  outlined destroy of URL?((uint64_t)v9);
  [v14 setUsesBrandedCallHeaderFormat:1];

  return v14;
}

void closure #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = (char *)Strong;
    if (a1)
    {
      id v13 = objc_allocWithZone((Class)MPRecentsMapItemHeaderViewController);
      id v14 = a1;
      id v15 = [v13 init];
      [v15 setRecentCall:a3];
      id v16 = [objc_allocWithZone((Class)MUPlaceViewControllerConfiguration) init];
      [v16 setHeaderViewController:v15];
      id v17 = [objc_allocWithZone((Class)MUPlaceViewController) initWithConfiguration:v16];
      [v17 setMapItem:v14];
      id v18 = [v17 navigationItem];
      [v18 setLargeTitleDisplayMode:2];
    }
    else
    {
      id v19 = [a3 identityExtension];
      id v20 = getter of contactViewController #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(a4, a5, a3);
      if (!v19)
      {
        id v21 = [*(id *)&v12[OBJC_IVAR___MPRecentsDetailPresenter_recentsController] itemForRecentCall:a3 presentationStyle:1];
        id v19 = [v21 localizedSubtitle];
      }
      [v20 setMessage:v19];

      id v22 = getter of contactViewController #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(a4, a5, a3);
      [v22 setDelegate:v12];

      id v17 = getter of contactViewController #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(a4, a5, a3);
    }
    [a6 pushViewController:v17 animated:1];
  }
}

id RecentsDetailPresenter.contactViewController(for:contact:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = [a1 contactIdentifier];
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    id v12 = [*(id *)(v3 + OBJC_IVAR___MPRecentsDetailPresenter_recentsController) fetchContactForContactCardDisplay:a2];
    id v13 = [self viewControllerForContact:v12];
    [v13 setShouldShowLinkedContacts:1];
  }
  else
  {
LABEL_6:
    id v14 = self;
    id v12 = a2;
    id v13 = [v14 viewControllerForUnknownContact:v12];
  }
  id v15 = [a1 validRemoteParticipantHandles];
  if (!v15) {
    goto LABEL_15;
  }
  id v16 = v15;
  type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
  lazy protocol witness table accessor for type CHHandle and conformance NSObject();
  uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v18 = (void *)specialized Collection.first.getter(v17);
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_15;
  }
  id v19 = [v18 value];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  swift_bridgeObjectRelease();
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    if ([a1 isComingFaceTimeCall]
      && CallReportingViewModel.atLeastOneUnknownCaller(in:)(a1))
    {
      unint64_t v24 = (unint64_t)[v13 actions] | 0x800;
    }
    else
    {
      unint64_t v24 = (unint64_t)[v13 actions] | 0x80;
    }
    [v13 setActions:v24];
  }
  else
  {
LABEL_15:
    [v13 setAllowsActions:0];
    [v13 setAllowsEditing:0];
    id v25 = v13;
    unsigned int v26 = [a1 callerIdIsBlocked];
    id v27 = [self mainBundle];
    unint64_t v39 = 0xE000000000000000;
    if (v26)
    {
      uint64_t v28 = 0x454C4C41435F4F4ELL;
      unint64_t v29 = 0xEC00000044495F52;
    }
    else
    {
      uint64_t v28 = 0x5F4E574F4E4B4E55;
      unint64_t v29 = 0xEE0052454C4C4143;
    }
    v30.value._uint64_t countAndFlagsBits = 0x746E656365524850;
    v30.value._object = (void *)0xE900000000000073;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    uint64_t v32 = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v28, v30, (NSBundle)v27, v31, *(Swift::String *)(&v39 - 1));

    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v25 setAlternateName:v33];
  }
  id v34 = [*(id *)(v3 + OBJC_IVAR___MPRecentsDetailPresenter_recentsController) itemForRecentCall:a1 presentationStyle:1];
  id v35 = [objc_allocWithZone((Class)MPRecentsContactHeaderViewController) init];
  [v35 setRecentCall:a1];
  [v35 setRecentsItem:v34];
  id v36 = v13;
  id v37 = v35;
  [v36 setContactHeaderViewController:v37];

  return v36;
}

void RecentsDetailPresenter.init()()
{
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo8CHHandleCG_So9CNContactCs5NeverOTg50177_s11MobilePhone22RecentsDetailPresenterC44multipleContactsBlockAndReportViewController33_FAD6BBFC5E0AAC96A4CD65761702D59ALL3forSo010PHContactsih5TablekL0CSo12CHRecentCallC_tFSo9e4CSo8D7CXEfU1_SDyAgJGSo12CHRecentCallC0H5Phone0jkL0CTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = __CocoaSet.count.getter();
    uint64_t result = _swiftEmptyArrayStorage;
    if (v7)
    {
      uint64_t v49 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t result = (void *)__CocoaSet.startIndex.getter();
      unint64_t v46 = result;
      uint64_t v47 = v9;
      char v48 = 1;
      if ((v7 & 0x8000000000000000) == 0) {
        goto LABEL_7;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t result = _swiftEmptyArrayStorage;
    if (v7)
    {
      uint64_t v49 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t result = (void *)specialized _NativeSet.startIndex.getter(a1);
      unint64_t v46 = result;
      uint64_t v47 = v10;
      char v48 = v11 & 1;
LABEL_7:
      unint64_t v43 = a2 & 0xC000000000000001;
      uint64_t v40 = OBJC_IVAR___MPRecentsDetailPresenter_recentsController;
      while (1)
      {
        if (!v7)
        {
          __break(1u);
          goto LABEL_39;
        }
        specialized Set.subscript.getter((uint64_t)v46, v47, v48, a1);
        id v23 = v22;
        uint64_t v44 = v7;
        if (v43)
        {
          id v24 = v22;
          if (!__CocoaDictionary.lookup(_:)()) {
            goto LABEL_18;
          }
          type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for CNContact);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v25 = v45;
          swift_unknownObjectRelease();
        }
        else
        {
          if (!*(void *)(a2 + 16)) {
            goto LABEL_19;
          }
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22);
          if ((v27 & 1) == 0)
          {
LABEL_18:

LABEL_19:
            id v28 = v23;
            unint64_t v29 = (unint64_t)[v28 type];
            if (v29 > 3) {
              uint64_t v30 = 1;
            }
            else {
              uint64_t v30 = qword_1002097C8[v29];
            }
            NSString v31 = [v28 value];
            if (!v31)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              NSString v31 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            id v32 = [objc_allocWithZone((Class)TUHandle) initWithType:v30 value:v31];

            id v33 = [a3 isoCountryCode];
            if (v33)
            {
              id v34 = v33;
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v36 = v35;
            }
            else
            {
              uint64_t v36 = 0;
            }
            id v23 = [*(id *)(a4 + v40) metadataCache];
            if (v36)
            {
              NSString v37 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            else
            {
              NSString v37 = 0;
            }
            id v38 = [self contactForHandle:v32 isoCountryCode:v37 metadataCache:v23];

            goto LABEL_31;
          }
          id v25 = *(id *)(*(void *)(a2 + 56) + 8 * v26);
        }

        if (!v25) {
          goto LABEL_19;
        }
LABEL_31:

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = (void *)specialized ContiguousArray._endMutation()();
        if (v6)
        {
          if ((v48 & 1) == 0) {
            goto LABEL_40;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<CHHandle>.Index);
          unint64_t v39 = (uint64_t (*)(void **, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          uint64_t result = (void *)v39(&v45, 0);
          --v7;
          if (v44 == 1)
          {
LABEL_36:
            outlined consume of Set<CHHandle>.Index._Variant((uint64_t)v46, v47, v48);
            return v49;
          }
        }
        else
        {
          uint64_t v12 = (uint64_t)v46;
          uint64_t v13 = v47;
          char v14 = v48;
          int64_t v15 = specialized _NativeSet.index(after:)((int64_t)v46, v47, v48, a1);
          uint64_t v17 = v16;
          uint64_t v18 = a2;
          char v20 = v19;
          uint64_t result = (void *)outlined consume of Set<CHHandle>.Index._Variant(v12, v13, v14);
          unint64_t v46 = (void *)v15;
          uint64_t v47 = v17;
          char v21 = v20 & 1;
          a2 = v18;
          unint64_t v6 = 0;
          char v48 = v21;
          --v7;
          if (v44 == 1) {
            goto LABEL_36;
          }
        }
      }
    }
  }
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    lazy protocol witness table accessor for type CHHandle and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v34;
    uint64_t v31 = v35;
    uint64_t v5 = v36;
    int64_t v6 = v37;
    unint64_t v7 = v38;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v6 = 0;
  }
  int64_t v30 = (unint64_t)(v5 + 64) >> 6;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_47;
    }
    type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v33;
    swift_unknownObjectRelease();
    int64_t v13 = v6;
    uint64_t v11 = v7;
    if (!v33) {
      goto LABEL_47;
    }
LABEL_26:
    id v17 = v14;
    unint64_t v18 = (unint64_t)[v17 type];
    if (v18 > 3) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = qword_1002097C8[v18];
    }
    NSString v20 = [v17 value];
    if (!v20)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v21 = [objc_allocWithZone((Class)TUHandle) initWithType:v19 value:v20];

    id v22 = [a2 isoCountryCode];
    if (v22)
    {
      id v23 = v22;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;
    }
    else
    {
      uint64_t v25 = 0;
    }
    id v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                                + OBJC_IVAR___MPRecentsDetailPresenter_recentsController), "metadataCache"));
    if (v25)
    {
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v27 = 0;
    }
    id v28 = [self contactForHandle:v21 isoCountryCode:v27 metadataCache:v26];

    int64_t v6 = v13;
    unint64_t v7 = v11;
    if (v28)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int64_t v6 = v13;
      unint64_t v7 = v11;
    }
  }
  if (v7)
  {
    uint64_t v11 = (v7 - 1) & v7;
    unint64_t v12 = __clz(__rbit64(v7)) | (v6 << 6);
    int64_t v13 = v6;
LABEL_25:
    id v14 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
    if (!v14) {
      goto LABEL_47;
    }
    goto LABEL_26;
  }
  int64_t v13 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v13 >= v30) {
      goto LABEL_47;
    }
    unint64_t v15 = *(void *)(v31 + 8 * v13);
    if (!v15)
    {
      int64_t v16 = v6 + 2;
      if (v6 + 2 >= v30) {
        goto LABEL_47;
      }
      unint64_t v15 = *(void *)(v31 + 8 * v16);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v16 = v6 + 3;
      if (v6 + 3 >= v30) {
        goto LABEL_47;
      }
      unint64_t v15 = *(void *)(v31 + 8 * v16);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v16 = v6 + 4;
      if (v6 + 4 >= v30) {
        goto LABEL_47;
      }
      unint64_t v15 = *(void *)(v31 + 8 * v16);
      if (v15)
      {
LABEL_23:
        int64_t v13 = v16;
      }
      else
      {
        int64_t v13 = v6 + 5;
        if (v6 + 5 >= v30) {
          goto LABEL_47;
        }
        unint64_t v15 = *(void *)(v31 + 8 * v13);
        if (!v15)
        {
          int64_t v29 = v6 + 6;
          while (v30 != v29)
          {
            unint64_t v15 = *(void *)(v31 + 8 * v29++);
            if (v15)
            {
              int64_t v13 = v29 - 1;
              goto LABEL_24;
            }
          }
LABEL_47:
          outlined consume of Set<CHHandle>.Iterator._Variant();
          return;
        }
      }
    }
LABEL_24:
    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

id specialized RecentsDetailPresenter.init(recentsController:contactsService:callReportingViewModel:)(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = OBJC_IVAR___MPRecentsDetailPresenter_logger;
  uint64_t v10 = one-time initialization token for mobilePhone;
  uint64_t v11 = v4;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(&v11[v9], v13, v12);
  uint64_t v14 = OBJC_IVAR___MPRecentsDetailPresenter_featureflags;
  *(void *)&v11[v14] = [objc_allocWithZone((Class)TUFeatureFlags) init];
  *(void *)&v11[OBJC_IVAR___MPRecentsDetailPresenter_recentsController] = a1;
  *(void *)&v11[OBJC_IVAR___MPRecentsDetailPresenter_contactsService] = a2;
  *(void *)&v11[OBJC_IVAR___MPRecentsDetailPresenter_callReportingViewModel] = a3;
  id v15 = a1;
  id v16 = a2;
  id v17 = a3;

  v19.receiver = v11;
  v19.super_class = ObjectType;
  return [super init];
}

uint64_t sub_1001CCFA0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CCFD8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CD010()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void partial apply for closure #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(void *a1)
{
  closure #1 in RecentsDetailPresenter.showRecentCallDetailsViewController(for:from:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t ObjC metadata update function for RecentsDetailPresenter()
{
  return type metadata accessor for RecentsDetailPresenter();
}

uint64_t type metadata accessor for RecentsDetailPresenter()
{
  uint64_t result = type metadata singleton initialization cache for RecentsDetailPresenter;
  if (!type metadata singleton initialization cache for RecentsDetailPresenter) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RecentsDetailPresenter()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CHHandle>);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  unint64_t v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for VMAccount(0, (unint64_t *)&lazy cache variable for type metadata for CHHandle);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t *ApplicationServicesActor.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static ApplicationServicesActor.shared;
}

uint64_t static ApplicationServicesActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  lazy protocol witness table accessor for type ApplicationServicesActor and conformance ApplicationServicesActor(&lazy protocol witness table cache variable for type ApplicationServicesActor and conformance ApplicationServicesActor, a2, (void (*)(uint64_t))type metadata accessor for ApplicationServicesActor);
  static GlobalActor.preconditionIsolated(_:file:line:)();
  BOOL v10 = (void *)swift_allocObject();
  void v10[2] = a7;
  v10[3] = a1;
  v10[4] = a2;
  partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v13) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t ApplicationServices.favoritesController_Objc.getter(uint64_t a1)
{
  if (one-time initialization token for queue != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for TPFavoritesController);
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t ApplicationServices.favoritesController.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___MPApplicationServices____lazy_storage___favoritesController) = a1;
  return _objc_release_x1();
}

void (*ApplicationServices.favoritesController.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = ApplicationServices.favoritesController.getter();
  return ApplicationServices.favoritesController.modify;
}

void ApplicationServices.favoritesController.modify(uint64_t *a1, uint64_t a2)
{
}

uint64_t ApplicationServices.voicemailController_Objc.getter(uint64_t a1)
{
  if (one-time initialization token for queue != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPVoicemailController);
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t ApplicationServices.voicemailController.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___MPApplicationServices____lazy_storage___voicemailController) = a1;
  return _objc_release_x1();
}

void (*ApplicationServices.voicemailController.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = ApplicationServices.voicemailController.getter();
  return ApplicationServices.voicemailController.modify;
}

void ApplicationServices.voicemailController.modify(uint64_t *a1, uint64_t a2)
{
}

uint64_t ApplicationServices.accountManager_objc.getter(uint64_t a1)
{
  if (one-time initialization token for queue != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for VMVoicemailManager);
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t ApplicationServices.accountManager.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___MPApplicationServices____lazy_storage___accountManager) = a1;
  return _objc_release_x1();
}

void (*ApplicationServices.accountManager.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = ApplicationServices.accountManager.getter();
  return ApplicationServices.accountManager.modify;
}

void ApplicationServices.accountManager.modify(uint64_t *a1, uint64_t a2)
{
}

uint64_t ApplicationServices.voicemailManager_Objc.getter(uint64_t a1)
{
  if (one-time initialization token for queue != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VoicemailManager);
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  type metadata accessor for MainActor();
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = &protocol witness table for MainActor;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager, v5);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(closure #1 in closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager, v2, v1);
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  swift_release();
  uint64_t v1 = [self defaultCenter];
  [v1 postNotificationName:@"PHVoicemailManagerVoicemailsChanged" object:0];

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ApplicationServices.badgeCalculator_Objc.getter(uint64_t a1)
{
  if (one-time initialization token for queue != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  type metadata accessor for VoicemailBadgeCalculator();
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

id ApplicationServices.badgeCalculator.getter()
{
  return ApplicationServices.voicemailController.getter(&OBJC_IVAR___MPApplicationServices____lazy_storage___badgeCalculator, (uint64_t (*)(uint64_t))closure #1 in ApplicationServices.badgeCalculator.getter);
}

id closure #1 in ApplicationServices.badgeCalculator.getter(void *a1)
{
  if (one-time initialization token for queue != -1) {
    swift_once();
  }
  id v18 = [objc_allocWithZone((Class)CoreTelephonyClient) initWithQueue:static VoicemailActor.queue];
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xC0);
  uint64_t v3 = v2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VMDVoicemailCountSource<CoreTelephonyClient>);
  uint64_t v4 = (char *)swift_allocObject();
  uint64_t v5 = specialized VMDVoicemailCountSource.init(subscriptionSource:accountController:)(v18, v3, v4);
  uint64_t v6 = type metadata accessor for VVMVoicemailCountSource();
  uint64_t v7 = *(void *)((char *)a1 + OBJC_IVAR___MPApplicationServices_voicemailManager);
  uint64_t v8 = *(void *)((char *)a1 + OBJC_IVAR___MPApplicationServices_voicemailManager + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = *(void *)(v8 + 8);
  uint64_t v24 = *(void *)(v8 + 16);
  v21[0] = v7;
  uint64_t v9 = swift_unknownObjectRetain();
  BOOL v10 = (void *)((uint64_t (*)(uint64_t))v2)(v9);
  char v19 = v10;
  uint64_t v20 = v7;
  uint64_t v11 = type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for VMVoicemailManager);
  uint64_t v12 = specialized VVMVoicemailCountSource.__allocating_init(voicemailManager:voicemailStatus:)((uint64_t)&v20, (uint64_t)&v19, v6, ObjectType, v11, v23, v24, (uint64_t)&protocol witness table for VMVoicemailManager);

  uint64_t v13 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  uint64_t v14 = ((uint64_t (*)(uint64_t))v2)(v13);
  id v15 = objc_allocWithZone((Class)type metadata accessor for VoicemailBadgeCalculator());
  swift_retain();
  swift_retain();
  id v16 = specialized VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(v14, v12, (uint64_t)v5, v15);
  swift_release();
  swift_release();

  return v16;
}

uint64_t ApplicationServices.badgeCalculator.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___MPApplicationServices____lazy_storage___badgeCalculator) = a1;
  return _objc_release_x1();
}

void (*ApplicationServices.badgeCalculator.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = ApplicationServices.badgeCalculator.getter();
  return ApplicationServices.badgeCalculator.modify;
}

void ApplicationServices.badgeCalculator.modify(uint64_t *a1, uint64_t a2)
{
}

void ApplicationServices.favoritesController.modify(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(void **)(v3 + *a3);
  *(void *)(v3 + *a3) = v4;
}

id ApplicationServices.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationServices();
  return [super dealloc];
}

uint64_t sub_1001CED78()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1001CEDFC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001CEE3C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CEE98(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0x88))(*a1);
}

uint64_t sub_1001CEEFC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CEF58(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xA8))(*a1);
}

uint64_t sub_1001CEFBC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xC0))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CF018(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xC8))(*a1);
}

uint64_t sub_1001CF07C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_1001CF0D8(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((swift_isaMask & **a2) + 0xF0))(*a1);
}

uint64_t partial apply for closure #1 in ApplicationServices.badgeCalculator_Objc.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0xE8))();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ApplicationServices.voicemailManager_Objc.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(*(void *)(v1 + 16) + OBJC_IVAR___MPApplicationServices_voicemailManager);
  return swift_unknownObjectRetain();
}

id specialized VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v24[3] = type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for VMVoicemailManager);
  v24[4] = &protocol witness table for VMVoicemailManager;
  v24[0] = a1;
  v23[3] = type metadata accessor for VVMVoicemailCountSource();
  void v23[4] = &protocol witness table for VVMVoicemailCountSource;
  v23[0] = a2;
  v22[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VMDVoicemailCountSource<CoreTelephonyClient>);
  void v22[4] = &protocol witness table for VMDVoicemailCountSource<A>;
  v22[0] = a3;
  uint64_t v8 = OBJC_IVAR___MPVoicemailBadgeCalculator_logger;
  uint64_t v9 = one-time initialization token for mobilePhone;
  BOOL v10 = a4;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(&v10[v8], v12, v11);
  uint64_t v13 = OBJC_IVAR___MPVoicemailBadgeCalculator_currentBadge;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PhoneBadge, Never>);
  swift_allocObject();
  *(void *)&v10[v13] = CurrentValueSubject.init(_:)();
  *(void *)&v10[OBJC_IVAR___MPVoicemailBadgeCalculator_currentUpdateTask] = 0;
  *(void *)&v10[OBJC_IVAR___MPVoicemailBadgeCalculator_cancellables] = _swiftEmptyArrayStorage;
  outlined init with copy of Tip((uint64_t)v24, (uint64_t)&v10[OBJC_IVAR___MPVoicemailBadgeCalculator_accountManager]);
  outlined init with copy of Tip((uint64_t)v23, (uint64_t)&v10[OBJC_IVAR___MPVoicemailBadgeCalculator_vvmSource]);
  outlined init with copy of Tip((uint64_t)v22, (uint64_t)&v10[OBJC_IVAR___MPVoicemailBadgeCalculator_legacySource]);

  v21.receiver = v10;
  v21.super_class = (Class)type metadata accessor for VoicemailBadgeCalculator();
  id v14 = [super init:PhoneBadgeKnownZero];
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v16 = *(void (**)(void *, uint64_t))(*(void *)v23[0] + 184);
  id v17 = v14;
  swift_retain();
  v16(&async function pointer to partial apply for closure #1 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:), v15);
  swift_release_n();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], &demangling cache variable for type metadata for [AnyCancellable]);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v19 = *(void (**)(void *, uint64_t))(*(void *)v22[0] + 224);
  swift_retain();
  v19(&async function pointer to partial apply for closure #2 in VoicemailBadgeCalculator.init(accountManager:vvmSource:legacySource:), v18);
  swift_release_n();
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  return v17;
}

char *specialized VMDVoicemailCountSource.init(subscriptionSource:accountController:)(void *a1, uint64_t a2, char *a3)
{
  v12[3] = type metadata accessor for VMAccount(0, &lazy cache variable for type metadata for VMVoicemailManager);
  v12[4] = &protocol witness table for VMVoicemailManager;
  v12[0] = a2;
  uint64_t v6 = *(void *)(*(void *)a3 + 112);
  if (one-time initialization token for mobilePhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.mobilePhone);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(&a3[v6], v8, v7);
  *(void *)&a3[*(void *)(*(void *)a3 + 120)] = _swiftEmptyArrayStorage;
  uint64_t v9 = &a3[*(void *)(*(void *)a3 + 128)];
  *(void *)uint64_t v9 = 0;
  v9[8] = -1;
  uint64_t v10 = *(void *)(*(void *)a3 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(void *)&a3[v10] = PassthroughSubject.init()();
  *((void *)a3 + 2) = a1;
  outlined init with copy of Tip((uint64_t)v12, (uint64_t)(a3 + 24));
  (*(void (**)(void *))(*(void *)a3 + 200))(a1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return a3;
}

uint64_t sub_1001CF770()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CF7A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CF7B8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for specialized closure #1 in PHVoicemailMessageTableViewCell.observeTip<A>(_:action:);
  return closure #1 in closure #1 in closure #1 in variable initialization expression of ApplicationServices.voicemailManager();
}

double partial apply for specialized closure #1 in closure #1 in static ApplicationServicesActor.sync<A>(_:file:line:)@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v4);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1001CF8EC()
{
  return _swift_deallocObject(v0, 32, 7);
}

double partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

uint64_t sub_1001CF940()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CF950()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CF960()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *SearchFooterCell.reuseIdentifier.unsafeMutableAddressor()
{
  return &static SearchFooterCell.reuseIdentifier;
}

id static SearchFooterCell.Constants.footerFont.getter()
{
  id v0 = [self preferredFontForTextStyle:UIFontTextStyleSubheadline];

  return v0;
}

id static SearchFooterCell.Constants.footerColor.getter()
{
  id v0 = [self secondaryLabelColor];

  return v0;
}

double static SearchFooterCell.Constants.verticalPadding.getter()
{
  return 20.0;
}

double static SearchFooterCell.Constants.leadingAndTrailingMargin.getter()
{
  return 16.0;
}

unint64_t static SearchFooterCell.reuseIdentifier.getter()
{
  return 0xD000000000000010;
}

double SearchFooterCell.footerHeight.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerHeight;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t SearchFooterCell.footerHeight.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerHeight);
  uint64_t result = swift_beginAccess();
  double *v3 = a1;
  return result;
}

uint64_t (*SearchFooterCell.footerHeight.modify())()
{
  return VoicemailSearchViewCell.callButtonTapHandler.modify;
}

void *SearchFooterCell.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerLabel;
  long long v5 = self;
  uint64_t v6 = v2;
  id v7 = [v5 mainScreen];
  [v7 bounds];
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;

  v27.origin.x = v9;
  v27.origin.y = v11;
  v27.size.width = v13;
  v27.size.height = v15;
  CGRectGetWidth(v27);
  double v16 = CGRectMake();
  *(void *)&v2[v4] = [objc_allocWithZone((Class)UILabel) initWithFrame:v16 v17 v18 v19];
  *(void *)&v6[OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerHeight] = 0;

  if (a2)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  v26.receiver = v6;
  v26.super_class = (Class)type metadata accessor for SearchFooterCell();
  [objc_super v21 = [v26 initWithReuseIdentifier:v20];

  char v22 = *(uint64_t (**)(void))((swift_isaMask & *v21) + 0x90);
  uint64_t v23 = v21;
  uint64_t v24 = v22();
  (*(void (**)(uint64_t))((swift_isaMask & *v23) + 0x98))(v24);

  return v23;
}

Swift::Void __swiftcall SearchFooterCell.setupViews()()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerLabel;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerLabel);
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = [v3 mainBundle];
  v21._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001002441A0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  v7.value._uint64_t countAndFlagsBits = 0x746E656365524850;
  v7.value._object = (void *)0xE900000000000073;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v21);

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setText:v9];

  double v10 = *(void **)((char *)v0 + v1);
  CGFloat v11 = self;
  id v12 = v10;
  id v13 = [v11 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  [v12 setFont:v13];

  double v14 = *(void **)((char *)v0 + v1);
  CGFloat v15 = self;
  id v16 = v14;
  id v17 = [v15 secondaryLabelColor];
  [v16 setTextColor:v17];

  [*(id *)((char *)v0 + v1) setTextAlignment:1];
  [*(id *)((char *)v0 + v1) setNumberOfLines:0];
  [*(id *)((char *)v0 + v1) setLineBreakMode:0];
  [*(id *)((char *)v0 + v1) sizeToFit];
  [*(id *)((char *)v0 + v1) frame];
  CGFloat Height = CGRectGetHeight(v22);
  (*(void (**)(double))((swift_isaMask & *v0) + 0x80))(Height + 40.0);
  [*(id *)((char *)v0 + v1) setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v19 = *(void *)((char *)v0 + v1);

  [v0 addSubview:v19];
}

Swift::Void __swiftcall SearchFooterCell.loadConstraints()()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100207760;
  uint64_t v4 = OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerLabel;
  id v5 = [*(id *)&v1[OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerLabel] topAnchor];
  id v6 = [v1 topAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6 constant:20.0];

  *(void *)(v3 + 32) = v7;
  id v8 = [*(id *)&v1[v4] leadingAnchor];
  id v9 = [v1 leadingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9 constant:16.0];

  *(void *)(v3 + 40) = v10;
  id v11 = [*(id *)&v1[v4] trailingAnchor];
  id v12 = [v1 trailingAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12 constant:-16.0];

  *(void *)(v3 + 48) = v13;
  id v14 = [*(id *)&v1[v4] bottomAnchor];
  id v15 = [v1 bottomAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15 constant:-20.0];

  *(void *)(v3 + 56) = v16;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id SearchFooterCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchFooterCell();
  return [super dealloc];
}

void specialized SearchFooterCell.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerLabel;
  id v2 = [self mainScreen];
  [v2 bounds];
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  v15.origin.x = v4;
  v15.origin.y = v6;
  v15.size.width = v8;
  v15.size.height = v10;
  CGRectGetWidth(v15);
  double v11 = CGRectMake();
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UILabel) initWithFrame:v11, v12, v13, v14];
  *(void *)&v0[OBJC_IVAR____TtC11MobilePhone16SearchFooterCell_footerHeight] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for SearchFooterCell()
{
  return self;
}

void sub_1001D03DC(void **a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))((swift_isaMask & **a1) + 0x78))();
}

uint64_t sub_1001D0438(double *a1, void **a2)
{
  return (*(uint64_t (**)(double))((swift_isaMask & **a2) + 0x80))(*a1);
}

ValueMetadata *type metadata accessor for SearchFooterCell.Constants()
{
  return &type metadata for SearchFooterCell.Constants;
}

objc_class *one-time initialization function for resourceBundle()
{
  type metadata accessor for ResourceBundleClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t result = (objc_class *)[self bundleForClass:ObjCClassFromMetadata];
  resourceBundle.super.Class isa = result;
  return result;
}

uint64_t one-time initialization function for callAcceptRTT(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.callAcceptRTT);
}

uint64_t ImageResource.callAcceptRTT.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for callAcceptRTT, (uint64_t)static ImageResource.callAcceptRTT);
}

uint64_t static ImageResource.callAcceptRTT.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for callAcceptRTT, (uint64_t)static ImageResource.callAcceptRTT, a1);
}

uint64_t one-time initialization function for keypadDeleteButton(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.keypadDeleteButton);
}

uint64_t ImageResource.keypadDeleteButton.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for keypadDeleteButton, (uint64_t)static ImageResource.keypadDeleteButton);
}

uint64_t static ImageResource.keypadDeleteButton.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for keypadDeleteButton, (uint64_t)static ImageResource.keypadDeleteButton, a1);
}

uint64_t one-time initialization function for voicemailShorcutIcon(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.voicemailShorcutIcon);
}

uint64_t ImageResource.voicemailShorcutIcon.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for voicemailShorcutIcon, (uint64_t)static ImageResource.voicemailShorcutIcon);
}

uint64_t static ImageResource.voicemailShorcutIcon.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for voicemailShorcutIcon, (uint64_t)static ImageResource.voicemailShorcutIcon, a1);
}

uint64_t one-time initialization function for voicemailShortcutIcon(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.voicemailShortcutIcon);
}

uint64_t ImageResource.voicemailShortcutIcon.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for voicemailShortcutIcon, (uint64_t)static ImageResource.voicemailShortcutIcon);
}

uint64_t static ImageResource.voicemailShortcutIcon.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for voicemailShortcutIcon, (uint64_t)static ImageResource.voicemailShortcutIcon, a1);
}

uint64_t one-time initialization function for cancel(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.cancel);
}

uint64_t ImageResource.cancel.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for cancel, (uint64_t)static ImageResource.cancel);
}

uint64_t static ImageResource.cancel.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for cancel, (uint64_t)static ImageResource.cancel, a1);
}

uint64_t one-time initialization function for cancelSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.cancelSmall);
}

uint64_t ImageResource.cancelSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for cancelSmall, (uint64_t)static ImageResource.cancelSmall);
}

uint64_t static ImageResource.cancelSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for cancelSmall, (uint64_t)static ImageResource.cancelSmall, a1);
}

uint64_t one-time initialization function for emergencyKeypadCallButton(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.emergencyKeypadCallButton);
}

uint64_t ImageResource.emergencyKeypadCallButton.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for emergencyKeypadCallButton, (uint64_t)static ImageResource.emergencyKeypadCallButton);
}

uint64_t static ImageResource.emergencyKeypadCallButton.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for emergencyKeypadCallButton, (uint64_t)static ImageResource.emergencyKeypadCallButton, a1);
}

uint64_t one-time initialization function for endAccept(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endAccept);
}

uint64_t ImageResource.endAccept.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endAccept, (uint64_t)static ImageResource.endAccept);
}

uint64_t static ImageResource.endAccept.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endAccept, (uint64_t)static ImageResource.endAccept, a1);
}

uint64_t one-time initialization function for endAcceptLarge(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endAcceptLarge);
}

uint64_t ImageResource.endAcceptLarge.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endAcceptLarge, (uint64_t)static ImageResource.endAcceptLarge);
}

uint64_t static ImageResource.endAcceptLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endAcceptLarge, (uint64_t)static ImageResource.endAcceptLarge, a1);
}

uint64_t one-time initialization function for endAcceptSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endAcceptSmall);
}

uint64_t ImageResource.endAcceptSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endAcceptSmall, (uint64_t)static ImageResource.endAcceptSmall);
}

uint64_t static ImageResource.endAcceptSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endAcceptSmall, (uint64_t)static ImageResource.endAcceptSmall, a1);
}

uint64_t one-time initialization function for endAcceptVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endAcceptVoip);
}

uint64_t ImageResource.endAcceptVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endAcceptVoip, (uint64_t)static ImageResource.endAcceptVoip);
}

uint64_t static ImageResource.endAcceptVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endAcceptVoip, (uint64_t)static ImageResource.endAcceptVoip, a1);
}

uint64_t one-time initialization function for endCallVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endCallVoip);
}

uint64_t ImageResource.endCallVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endCallVoip, (uint64_t)static ImageResource.endCallVoip);
}

uint64_t static ImageResource.endCallVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endCallVoip, (uint64_t)static ImageResource.endCallVoip, a1);
}

uint64_t one-time initialization function for endHoldAccept(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endHoldAccept);
}

uint64_t ImageResource.endHoldAccept.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endHoldAccept, (uint64_t)static ImageResource.endHoldAccept);
}

uint64_t static ImageResource.endHoldAccept.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endHoldAccept, (uint64_t)static ImageResource.endHoldAccept, a1);
}

uint64_t one-time initialization function for endHoldAcceptSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endHoldAcceptSmall);
}

uint64_t ImageResource.endHoldAcceptSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endHoldAcceptSmall, (uint64_t)static ImageResource.endHoldAcceptSmall);
}

uint64_t static ImageResource.endHoldAcceptSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endHoldAcceptSmall, (uint64_t)static ImageResource.endHoldAcceptSmall, a1);
}

uint64_t one-time initialization function for endHoldAcceptVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endHoldAcceptVoip);
}

uint64_t ImageResource.endHoldAcceptVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endHoldAcceptVoip, (uint64_t)static ImageResource.endHoldAcceptVoip);
}

uint64_t static ImageResource.endHoldAcceptVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endHoldAcceptVoip, (uint64_t)static ImageResource.endHoldAcceptVoip, a1);
}

uint64_t one-time initialization function for endVoipAccept(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endVoipAccept);
}

uint64_t ImageResource.endVoipAccept.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endVoipAccept, (uint64_t)static ImageResource.endVoipAccept);
}

uint64_t static ImageResource.endVoipAccept.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endVoipAccept, (uint64_t)static ImageResource.endVoipAccept, a1);
}

uint64_t one-time initialization function for endVoipAcceptVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.endVoipAcceptVoip);
}

uint64_t ImageResource.endVoipAcceptVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for endVoipAcceptVoip, (uint64_t)static ImageResource.endVoipAcceptVoip);
}

uint64_t static ImageResource.endVoipAcceptVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for endVoipAcceptVoip, (uint64_t)static ImageResource.endVoipAcceptVoip, a1);
}

uint64_t one-time initialization function for holdAccept(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.holdAccept);
}

uint64_t ImageResource.holdAccept.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for holdAccept, (uint64_t)static ImageResource.holdAccept);
}

uint64_t static ImageResource.holdAccept.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for holdAccept, (uint64_t)static ImageResource.holdAccept, a1);
}

uint64_t one-time initialization function for holdAcceptLarge(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.holdAcceptLarge);
}

uint64_t ImageResource.holdAcceptLarge.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for holdAcceptLarge, (uint64_t)static ImageResource.holdAcceptLarge);
}

uint64_t static ImageResource.holdAcceptLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for holdAcceptLarge, (uint64_t)static ImageResource.holdAcceptLarge, a1);
}

uint64_t one-time initialization function for holdAcceptSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.holdAcceptSmall);
}

uint64_t ImageResource.holdAcceptSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for holdAcceptSmall, (uint64_t)static ImageResource.holdAcceptSmall);
}

uint64_t static ImageResource.holdAcceptSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for holdAcceptSmall, (uint64_t)static ImageResource.holdAcceptSmall, a1);
}

uint64_t one-time initialization function for holdAcceptVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.holdAcceptVoip);
}

uint64_t ImageResource.holdAcceptVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for holdAcceptVoip, (uint64_t)static ImageResource.holdAcceptVoip);
}

uint64_t static ImageResource.holdAcceptVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for holdAcceptVoip, (uint64_t)static ImageResource.holdAcceptVoip, a1);
}

uint64_t one-time initialization function for iPhoneFaceIDLiveVoicemailOnboarding(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.iPhoneFaceIDLiveVoicemailOnboarding);
}

uint64_t ImageResource.iPhoneFaceIDLiveVoicemailOnboarding.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for iPhoneFaceIDLiveVoicemailOnboarding, (uint64_t)static ImageResource.iPhoneFaceIDLiveVoicemailOnboarding);
}

uint64_t static ImageResource.iPhoneFaceIDLiveVoicemailOnboarding.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for iPhoneFaceIDLiveVoicemailOnboarding, (uint64_t)static ImageResource.iPhoneFaceIDLiveVoicemailOnboarding, a1);
}

uint64_t one-time initialization function for iPhoneHomeLiveVoicemailOnboarding(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.iPhoneHomeLiveVoicemailOnboarding);
}

uint64_t ImageResource.iPhoneHomeLiveVoicemailOnboarding.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for iPhoneHomeLiveVoicemailOnboarding, (uint64_t)static ImageResource.iPhoneHomeLiveVoicemailOnboarding);
}

uint64_t static ImageResource.iPhoneHomeLiveVoicemailOnboarding.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for iPhoneHomeLiveVoicemailOnboarding, (uint64_t)static ImageResource.iPhoneHomeLiveVoicemailOnboarding, a1);
}

uint64_t one-time initialization function for iconAudio(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.iconAudio);
}

uint64_t ImageResource.iconAudio.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for iconAudio, (uint64_t)static ImageResource.iconAudio);
}

uint64_t static ImageResource.iconAudio.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for iconAudio, (uint64_t)static ImageResource.iconAudio, a1);
}

uint64_t one-time initialization function for iconFlipcamera(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.iconFlipcamera);
}

uint64_t ImageResource.iconFlipcamera.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for iconFlipcamera, (uint64_t)static ImageResource.iconFlipcamera);
}

uint64_t static ImageResource.iconFlipcamera.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for iconFlipcamera, (uint64_t)static ImageResource.iconFlipcamera, a1);
}

uint64_t one-time initialization function for iconMute(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.iconMute);
}

uint64_t ImageResource.iconMute.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for iconMute, (uint64_t)static ImageResource.iconMute);
}

uint64_t static ImageResource.iconMute.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for iconMute, (uint64_t)static ImageResource.iconMute, a1);
}

uint64_t one-time initialization function for iconMuteSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.iconMuteSmall);
}

uint64_t ImageResource.iconMuteSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for iconMuteSmall, (uint64_t)static ImageResource.iconMuteSmall);
}

uint64_t static ImageResource.iconMuteSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for iconMuteSmall, (uint64_t)static ImageResource.iconMuteSmall, a1);
}

uint64_t one-time initialization function for keypadDeleteArrow(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.keypadDeleteArrow);
}

uint64_t ImageResource.keypadDeleteArrow.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for keypadDeleteArrow, (uint64_t)static ImageResource.keypadDeleteArrow);
}

uint64_t static ImageResource.keypadDeleteArrow.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for keypadDeleteArrow, (uint64_t)static ImageResource.keypadDeleteArrow, a1);
}

uint64_t one-time initialization function for keypadDeleteX(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.keypadDeleteX);
}

uint64_t ImageResource.keypadDeleteX.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for keypadDeleteX, (uint64_t)static ImageResource.keypadDeleteX);
}

uint64_t static ImageResource.keypadDeleteX.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for keypadDeleteX, (uint64_t)static ImageResource.keypadDeleteX, a1);
}

uint64_t one-time initialization function for leaveAMessage(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.leaveAMessage);
}

uint64_t ImageResource.leaveAMessage.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for leaveAMessage, (uint64_t)static ImageResource.leaveAMessage);
}

uint64_t static ImageResource.leaveAMessage.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for leaveAMessage, (uint64_t)static ImageResource.leaveAMessage, a1);
}

uint64_t one-time initialization function for leaveAMessageSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.leaveAMessageSmall);
}

uint64_t ImageResource.leaveAMessageSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for leaveAMessageSmall, (uint64_t)static ImageResource.leaveAMessageSmall);
}

uint64_t static ImageResource.leaveAMessageSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for leaveAMessageSmall, (uint64_t)static ImageResource.leaveAMessageSmall, a1);
}

uint64_t one-time initialization function for phoneVolume(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.phoneVolume);
}

uint64_t ImageResource.phoneVolume.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for phoneVolume, (uint64_t)static ImageResource.phoneVolume);
}

uint64_t static ImageResource.phoneVolume.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for phoneVolume, (uint64_t)static ImageResource.phoneVolume, a1);
}

uint64_t one-time initialization function for phoneDialVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.phoneDialVoip);
}

uint64_t ImageResource.phoneDialVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for phoneDialVoip, (uint64_t)static ImageResource.phoneDialVoip);
}

uint64_t static ImageResource.phoneDialVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for phoneDialVoip, (uint64_t)static ImageResource.phoneDialVoip, a1);
}

uint64_t one-time initialization function for phoneSlideVoip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.phoneSlideVoip);
}

uint64_t ImageResource.phoneSlideVoip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for phoneSlideVoip, (uint64_t)static ImageResource.phoneSlideVoip);
}

uint64_t static ImageResource.phoneSlideVoip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for phoneSlideVoip, (uint64_t)static ImageResource.phoneSlideVoip, a1);
}

uint64_t one-time initialization function for sendToVoicemail(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.sendToVoicemail);
}

uint64_t ImageResource.sendToVoicemail.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for sendToVoicemail, (uint64_t)static ImageResource.sendToVoicemail);
}

uint64_t static ImageResource.sendToVoicemail.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for sendToVoicemail, (uint64_t)static ImageResource.sendToVoicemail, a1);
}

uint64_t one-time initialization function for sendToVoicemailSmall(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.sendToVoicemailSmall);
}

uint64_t ImageResource.sendToVoicemailSmall.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for sendToVoicemailSmall, (uint64_t)static ImageResource.sendToVoicemailSmall);
}

uint64_t static ImageResource.sendToVoicemailSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for sendToVoicemailSmall, (uint64_t)static ImageResource.sendToVoicemailSmall, a1);
}

uint64_t one-time initialization function for textSosIcon(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.textSosIcon);
}

uint64_t ImageResource.textSosIcon.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for textSosIcon, (uint64_t)static ImageResource.textSosIcon);
}

uint64_t static ImageResource.textSosIcon.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for textSosIcon, (uint64_t)static ImageResource.textSosIcon, a1);
}

uint64_t one-time initialization function for textSosIconCarPlay(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.textSosIconCarPlay);
}

uint64_t ImageResource.textSosIconCarPlay.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for textSosIconCarPlay, (uint64_t)static ImageResource.textSosIconCarPlay);
}

uint64_t static ImageResource.textSosIconCarPlay.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for textSosIconCarPlay, (uint64_t)static ImageResource.textSosIconCarPlay, a1);
}

uint64_t one-time initialization function for textSosIconCarPlayFocusRing(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.textSosIconCarPlayFocusRing);
}

uint64_t ImageResource.textSosIconCarPlayFocusRing.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for textSosIconCarPlayFocusRing, (uint64_t)static ImageResource.textSosIconCarPlayFocusRing);
}

uint64_t static ImageResource.textSosIconCarPlayFocusRing.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for textSosIconCarPlayFocusRing, (uint64_t)static ImageResource.textSosIconCarPlayFocusRing, a1);
}

uint64_t one-time initialization function for textSosIconCarPlayFocused(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.textSosIconCarPlayFocused);
}

uint64_t ImageResource.textSosIconCarPlayFocused.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for textSosIconCarPlayFocused, (uint64_t)static ImageResource.textSosIconCarPlayFocused);
}

uint64_t static ImageResource.textSosIconCarPlayFocused.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for textSosIconCarPlayFocused, (uint64_t)static ImageResource.textSosIconCarPlayFocused, a1);
}

uint64_t one-time initialization function for unknownCallersSheet(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.unknownCallersSheet);
}

uint64_t ImageResource.unknownCallersSheet.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for unknownCallersSheet, (uint64_t)static ImageResource.unknownCallersSheet);
}

uint64_t static ImageResource.unknownCallersSheet.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for unknownCallersSheet, (uint64_t)static ImageResource.unknownCallersSheet, a1);
}

uint64_t one-time initialization function for unknownCallersTip(uint64_t a1)
{
  return one-time initialization function for callAcceptRTT(a1, static ImageResource.unknownCallersTip);
}

uint64_t one-time initialization function for callAcceptRTT(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for ImageResource();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  if (one-time initialization token for resourceBundle != -1) {
    swift_once();
  }
  CGFloat v4 = resourceBundle.super.isa;
  return ImageResource.init(name:bundle:)();
}

uint64_t ImageResource.unknownCallersTip.unsafeMutableAddressor()
{
  return ImageResource.callAcceptRTT.unsafeMutableAddressor(&one-time initialization token for unknownCallersTip, (uint64_t)static ImageResource.unknownCallersTip);
}

uint64_t ImageResource.callAcceptRTT.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for ImageResource();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static ImageResource.unknownCallersTip.getter@<X0>(uint64_t a1@<X8>)
{
  return static ImageResource.callAcceptRTT.getter(&one-time initialization token for unknownCallersTip, (uint64_t)static ImageResource.unknownCallersTip, a1);
}

uint64_t static ImageResource.callAcceptRTT.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for ImageResource();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  double v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void __getSBSGetScreenLockStatusSymbolLoc_block_invoke_cold_1(void *a1)
{
  id v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"PHInCallUIUtilities.m" lineNumber:27 description:@"%s" *a1];

  __break(1u);
}

void PHFaceTimeApplicationIsRemoved_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cound not obtain application record with bundle indentifier %@; attempt failed with error %@",
    (uint8_t *)&v3,
    0x16u);
}

void PHLaunchFieldTestApplicationIfNecessaryForDestinationID_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "FBSSystemService could not be weak linked and so we could not launch the field test app", v1, 2u);
}

void __getPSSimStatusCacheClass_block_invoke_cold_1(void *a1)
{
  id v2 = +[NSAssertionHandler currentHandler];
  int v3 = +[NSString stringWithUTF8String:"void *SettingsCellularLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"MPRecentsTableViewController.m" lineNumber:70 description:@"%s" *a1];

  __break(1u);
}

void __getPSSimStatusCacheClass_block_invoke_cold_2()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getPSSimStatusCacheClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MPRecentsTableViewController.m" lineNumber:71 description:@"Unable to find class %s" "PSSimStatusCache"];

  __break(1u);
}

uint64_t type metadata accessor for IntentDialog()
{
  return type metadata accessor for IntentDialog();
}

uint64_t IntentParameter.wrappedValue.modify()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t IntentParameter.wrappedValue.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t IntentParameter.wrappedValue.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t IntentParameter.projectedValue.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t _AssistantIntent.IntentProjection.subscript.getter()
{
  return _AssistantIntent.IntentProjection.subscript.getter();
}

uint64_t type metadata accessor for _AssistantIntent.PhraseToken()
{
  return type metadata accessor for _AssistantIntent.PhraseToken();
}

uint64_t static _AssistantIntent.PhraseBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.PhraseBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
}

uint64_t static _AssistantIntent.StringValueBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.StringValueBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)()
{
  return static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
}

uint64_t static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)()
{
  return static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
}

uint64_t _AssistantIntent.Value.init<A>(for:builder:)()
{
  return _AssistantIntent.Value.init<A>(for:builder:)();
}

uint64_t type metadata accessor for _AssistantIntent.Value()
{
  return type metadata accessor for _AssistantIntent.Value();
}

uint64_t _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)()
{
  return _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
}

{
  return _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t _AssistantIntent.Phrase.init(stringInterpolation:)()
{
  return _AssistantIntent.Phrase.init(stringInterpolation:)();
}

uint64_t type metadata accessor for _AssistantIntent()
{
  return type metadata accessor for _AssistantIntent();
}

uint64_t _AssistantIntent.init<A>(_:phrases:parameterValues:)()
{
  return _AssistantIntent.init<A>(_:phrases:parameterValues:)();
}

uint64_t type metadata accessor for IntentDescription()
{
  return type metadata accessor for IntentDescription();
}

uint64_t IntentDescription.init(_:categoryName:searchKeywords:)()
{
  return IntentDescription.init(_:categoryName:searchKeywords:)();
}

uint64_t type metadata accessor for DisplayRepresentation.Image()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t DisplayRepresentation.init(title:subtitle:image:)()
{
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t _URLRepresentableEnum.urlRepresentationParameter.getter()
{
  return _URLRepresentableEnum.urlRepresentationParameter.getter();
}

uint64_t _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)()
{
  return _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
}

uint64_t _EnumURLRepresentation.init(_:)()
{
  return _EnumURLRepresentation.init(_:)();
}

uint64_t type metadata accessor for InputConnectionBehavior()
{
  return type metadata accessor for InputConnectionBehavior();
}

uint64_t TypeDisplayRepresentation.init(name:numericFormat:)()
{
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t type metadata accessor for TypeDisplayRepresentation()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.object.getter()
{
  return Notification.object.getter();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t DateComponents.day.setter()
{
  return DateComponents.day.setter();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t type metadata accessor for AttributedString()
{
  return type metadata accessor for AttributedString();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)()
{
  return PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return type metadata accessor for LocalizedStringResource.BundleDescription();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t LocalizedStringResource.init(_:table:locale:bundle:comment:)()
{
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.< infix(_:_:)()
{
  return static UUID.< infix(_:_:)();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.date(byAdding:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:to:wrappingComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return type metadata accessor for IndexSet.Index();
}

uint64_t static IndexSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexSet.init(integer:)()
{
  return IndexSet.init(integer:)();
}

uint64_t type metadata accessor for IndexSet()
{
  return type metadata accessor for IndexSet();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)IndexPath._bridgeToObjectiveC()();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexPath.row.getter()
{
  return IndexPath.row.getter();
}

uint64_t IndexPath.section.getter()
{
  return IndexPath.section.getter();
}

uint64_t type metadata accessor for IndexPath()
{
  return type metadata accessor for IndexPath();
}

uint64_t static FavoritesTip.favoriteAddedEvent.getter()
{
  return static FavoritesTip.favoriteAddedEvent.getter();
}

uint64_t FavoritesTip.init()()
{
  return FavoritesTip.init()();
}

uint64_t type metadata accessor for FavoritesTip()
{
  return type metadata accessor for FavoritesTip();
}

uint64_t dispatch thunk of TPTipsHelper.currentTip.modify()
{
  return dispatch thunk of TPTipsHelper.currentTip.modify();
}

uint64_t dispatch thunk of TPTipsHelper.currentTip.getter()
{
  return dispatch thunk of TPTipsHelper.currentTip.getter();
}

uint64_t dispatch thunk of TPTipsHelper.removeEntries(_:)()
{
  return dispatch thunk of TPTipsHelper.removeEntries(_:)();
}

uint64_t dispatch thunk of static TPTipsHelper.donateEventCalledNonContact()()
{
  return dispatch thunk of static TPTipsHelper.donateEventCalledNonContact()();
}

uint64_t dispatch thunk of static TPTipsHelper.donateEventKnownStoryLaunched()()
{
  return dispatch thunk of static TPTipsHelper.donateEventKnownStoryLaunched()();
}

uint64_t dispatch thunk of static TPTipsHelper.didDisplayCallHistorySearchTip()()
{
  return dispatch thunk of static TPTipsHelper.didDisplayCallHistorySearchTip()();
}

uint64_t dispatch thunk of static TPTipsHelper.donateEventCalledNonFavContact()()
{
  return dispatch thunk of static TPTipsHelper.donateEventCalledNonFavContact()();
}

uint64_t type metadata accessor for TPTipsHelper.Entry.Kind()
{
  return type metadata accessor for TPTipsHelper.Entry.Kind();
}

uint64_t type metadata accessor for TPTipsHelper.Entry()
{
  return type metadata accessor for TPTipsHelper.Entry();
}

uint64_t TPTipsHelper.Entry.init(_:tip:observationTask:)()
{
  return TPTipsHelper.Entry.init(_:tip:observationTask:)();
}

uint64_t dispatch thunk of TPTipsHelper.setup()()
{
  return dispatch thunk of TPTipsHelper.setup()();
}

uint64_t dispatch thunk of TPTipsHelper.addEntry(_:)()
{
  return dispatch thunk of TPTipsHelper.addEntry(_:)();
}

uint64_t static TPTipsHelper.taskQueue.getter()
{
  return static TPTipsHelper.taskQueue.getter();
}

uint64_t type metadata accessor for TPTipsHelper()
{
  return type metadata accessor for TPTipsHelper();
}

uint64_t dispatch thunk of TPTipHeaderView.hostingView.getter()
{
  return dispatch thunk of TPTipHeaderView.hostingView.getter();
}

uint64_t dispatch thunk of TPTipHeaderView.hostingView.setter()
{
  return dispatch thunk of TPTipHeaderView.hostingView.setter();
}

uint64_t static TPTipHeaderView.verticalInsetTotal.getter()
{
  return static TPTipHeaderView.verticalInsetTotal.getter();
}

uint64_t TPTipHeaderView.displaysBottomSeparator.setter()
{
  return TPTipHeaderView.displaysBottomSeparator.setter();
}

uint64_t TPTipHeaderView.init(frame:separatorInset:)()
{
  return TPTipHeaderView.init(frame:separatorInset:)();
}

uint64_t type metadata accessor for TPTipHeaderView()
{
  return type metadata accessor for TPTipHeaderView();
}

uint64_t static LiveVoicemailTip.onboardingViewedEvent.getter()
{
  return static LiveVoicemailTip.onboardingViewedEvent.getter();
}

uint64_t LiveVoicemailTip.init()()
{
  return LiveVoicemailTip.init()();
}

uint64_t type metadata accessor for LiveVoicemailTip()
{
  return type metadata accessor for LiveVoicemailTip();
}

uint64_t CallHistorySearchTip.init()()
{
  return CallHistorySearchTip.init()();
}

uint64_t type metadata accessor for CallHistorySearchTip()
{
  return type metadata accessor for CallHistorySearchTip();
}

uint64_t RecentsSaveAsContactTip.init()()
{
  return RecentsSaveAsContactTip.init()();
}

uint64_t type metadata accessor for RecentsSaveAsContactTip()
{
  return type metadata accessor for RecentsSaveAsContactTip();
}

uint64_t type metadata accessor for RecentsBrandedCallingTip()
{
  return type metadata accessor for RecentsBrandedCallingTip();
}

uint64_t RecentsBrandedCallingTip.init(_:)()
{
  return RecentsBrandedCallingTip.init(_:)();
}

uint64_t static RecentsUnknownCallersTip.spamBlockingAppsEditorialURLString.getter()
{
  return static RecentsUnknownCallersTip.spamBlockingAppsEditorialURLString.getter();
}

uint64_t RecentsUnknownCallersTip.init()()
{
  return RecentsUnknownCallersTip.init()();
}

uint64_t type metadata accessor for RecentsUnknownCallersTip()
{
  return type metadata accessor for RecentsUnknownCallersTip();
}

uint64_t RecentsSaveAsFavoritesTip.init()()
{
  return RecentsSaveAsFavoritesTip.init()();
}

uint64_t type metadata accessor for RecentsSaveAsFavoritesTip()
{
  return type metadata accessor for RecentsSaveAsFavoritesTip();
}

uint64_t dispatch thunk of TaskQueue.async(_:)()
{
  return dispatch thunk of TaskQueue.async(_:)();
}

uint64_t TaskQueue.__allocating_init(priority:)()
{
  return TaskQueue.__allocating_init(priority:)();
}

uint64_t type metadata accessor for TaskQueue()
{
  return type metadata accessor for TaskQueue();
}

uint64_t type metadata accessor for CGPathFillRule()
{
  return type metadata accessor for CGPathFillRule();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)CGFloat._bridgeToObjectiveC()();
}

uint64_t static CGFloat._forceBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Void __swiftcall SpamModelable.blockInitiator()()
{
}

Swift::OpaquePointer_optional __swiftcall NameAndPhotoUtilities.unknownSenderRecordInfo(for:)(Swift::String_optional a1)
{
  uint64_t v1 = (void *)NameAndPhotoUtilities.unknownSenderRecordInfo(for:)(a1.value._countAndFlagsBits, a1.value._object);
  result.value._rawValue = v1;
  result.is_nil = v2;
  return result;
}

uint64_t NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)()
{
  return NameAndPhotoUtilities.pendingOrCurrentIMNickname(from:)();
}

uint64_t static NameAndPhotoUtilities.shared.getter()
{
  return static NameAndPhotoUtilities.shared.getter();
}

uint64_t type metadata accessor for NameAndPhotoUtilities()
{
  return type metadata accessor for NameAndPhotoUtilities();
}

uint64_t static VoiceSpamReportTelephonyManager.shared.getter()
{
  return static VoiceSpamReportTelephonyManager.shared.getter();
}

uint64_t type metadata accessor for VoiceSpamReportTelephonyManager()
{
  return type metadata accessor for VoiceSpamReportTelephonyManager();
}

uint64_t dispatch thunk of CarrierVoiceSpamReportHelper.carrierAllowsReportVoiceCall(for:)()
{
  return dispatch thunk of CarrierVoiceSpamReportHelper.carrierAllowsReportVoiceCall(for:)();
}

uint64_t CarrierVoiceSpamReportHelper.init(voiceSpamReportTelephonyManager:)()
{
  return CarrierVoiceSpamReportHelper.init(voiceSpamReportTelephonyManager:)();
}

uint64_t dispatch thunk of CarrierVoiceSpamReportHelper.reportSpam(voiceCall:)()
{
  return dispatch thunk of CarrierVoiceSpamReportHelper.reportSpam(voiceCall:)();
}

uint64_t dispatch thunk of CarrierVoiceSpamReportHelper.reportSpamAlertControllerCarrierName(for:)()
{
  return dispatch thunk of CarrierVoiceSpamReportHelper.reportSpamAlertControllerCarrierName(for:)();
}

uint64_t dispatch thunk of CarrierVoiceSpamReportHelper.logEventForCancelledScenario(for:)()
{
  return dispatch thunk of CarrierVoiceSpamReportHelper.logEventForCancelledScenario(for:)();
}

uint64_t type metadata accessor for CarrierVoiceSpamReportHelper()
{
  return type metadata accessor for CarrierVoiceSpamReportHelper();
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)()
{
  return _HashTable.UnsafeHandle._startIterator(bucket:)();
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)()
{
  return _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
}

uint64_t _HashTable.UnsafeHandle.subscript.setter()
{
  return _HashTable.UnsafeHandle.subscript.setter();
}

uint64_t _HashTable.BucketIterator.currentValue.getter()
{
  return _HashTable.BucketIterator.currentValue.getter();
}

uint64_t _HashTable.BucketIterator.currentValue.setter()
{
  return _HashTable.BucketIterator.currentValue.setter();
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
}

uint64_t static _HashTable.maximumCapacity(forScale:)()
{
  return static _HashTable.maximumCapacity(forScale:)();
}

uint64_t static _HashTable.minimumCapacity(forScale:)()
{
  return static _HashTable.minimumCapacity(forScale:)();
}

uint64_t _HashTable.copy()()
{
  return _HashTable.copy()();
}

uint64_t static _HashTable.scale(forCapacity:)()
{
  return static _HashTable.scale(forCapacity:)();
}

uint64_t _HashTable.init(scale:reservedScale:)()
{
  return _HashTable.init(scale:reservedScale:)();
}

uint64_t dispatch thunk of Message.sandboxMessageFile.getter()
{
  return dispatch thunk of Message.sandboxMessageFile.getter();
}

uint64_t dispatch thunk of Message.recordUUID.getter()
{
  return dispatch thunk of Message.recordUUID.getter();
}

uint64_t dispatch thunk of Message.transcript.getter()
{
  return dispatch thunk of Message.transcript.getter();
}

uint64_t dispatch thunk of Message.dateCreated.getter()
{
  return dispatch thunk of Message.dateCreated.getter();
}

uint64_t dispatch thunk of Message.isSensitive.getter()
{
  return dispatch thunk of Message.isSensitive.getter();
}

uint64_t dispatch thunk of Message.mailboxType.getter()
{
  return dispatch thunk of Message.mailboxType.getter();
}

uint64_t dispatch thunk of Message.messageType.getter()
{
  return dispatch thunk of Message.messageType.getter();
}

uint64_t dispatch thunk of Message.isFromUnknown.getter()
{
  return dispatch thunk of Message.isFromUnknown.getter();
}

uint64_t dispatch thunk of Message.transcriptionStatus.getter()
{
  return dispatch thunk of Message.transcriptionStatus.getter();
}

uint64_t dispatch thunk of Message.from.getter()
{
  return dispatch thunk of Message.from.getter();
}

uint64_t dispatch thunk of Message.isRTT.getter()
{
  return dispatch thunk of Message.isRTT.getter();
}

uint64_t dispatch thunk of Message.isRead.getter()
{
  return dispatch thunk of Message.isRead.getter();
}

uint64_t dispatch thunk of Message.callUUID.getter()
{
  return dispatch thunk of Message.callUUID.getter();
}

uint64_t dispatch thunk of Message.duration.getter()
{
  return dispatch thunk of Message.duration.getter();
}

uint64_t dispatch thunk of Message.fileSize.getter()
{
  return dispatch thunk of Message.fileSize.getter();
}

uint64_t dispatch thunk of Message.provider.getter()
{
  return dispatch thunk of Message.provider.getter();
}

uint64_t dispatch thunk of Message.recipient.getter()
{
  return dispatch thunk of Message.recipient.getter();
}

uint64_t type metadata accessor for Message()
{
  return type metadata accessor for Message();
}

uint64_t static MessageFetchOptions.includeProtectedApps.getter()
{
  return static MessageFetchOptions.includeProtectedApps.getter();
}

uint64_t type metadata accessor for MessageFetchOptions()
{
  return type metadata accessor for MessageFetchOptions();
}

uint64_t MessageType.rawValue.getter()
{
  return MessageType.rawValue.getter();
}

uint64_t MessageUpdate.init(recordUUID:callUUID:conversationID:from:provider:isRead:duration:mailboxType:recipient:transcriptionStatus:isRTT:transcriptURL:simID:undelete:)()
{
  return MessageUpdate.init(recordUUID:callUUID:conversationID:from:provider:isRead:duration:mailboxType:recipient:transcriptionStatus:isRTT:transcriptURL:simID:undelete:)();
}

uint64_t MessageUpdate.recordUUID.getter()
{
  return MessageUpdate.recordUUID.getter();
}

uint64_t type metadata accessor for MessageUpdate()
{
  return type metadata accessor for MessageUpdate();
}

uint64_t MessageStoreController.addDelegate(_:)()
{
  return MessageStoreController.addDelegate(_:)();
}

uint64_t MessageStoreController.removeDelegate(_:)()
{
  return MessageStoreController.removeDelegate(_:)();
}

uint64_t static MessageStoreController.shared.getter()
{
  return static MessageStoreController.shared.getter();
}

uint64_t type metadata accessor for MessageStoreController()
{
  return type metadata accessor for MessageStoreController();
}

uint64_t type metadata accessor for MessageStoreFetchRequest.QuerySearchType()
{
  return type metadata accessor for MessageStoreFetchRequest.QuerySearchType();
}

uint64_t MessageStoreFetchRequest.init(query:sortType:options:pageSize:page:originatingBundleID:)()
{
  return MessageStoreFetchRequest.init(query:sortType:options:pageSize:page:originatingBundleID:)();
}

uint64_t type metadata accessor for MessageStoreFetchRequest()
{
  return type metadata accessor for MessageStoreFetchRequest();
}

uint64_t type metadata accessor for MessageStoreQuery()
{
  return type metadata accessor for MessageStoreQuery();
}

uint64_t Transcript.text.getter()
{
  return Transcript.text.getter();
}

uint64_t type metadata accessor for Transcript()
{
  return type metadata accessor for Transcript();
}

uint64_t MailboxType.rawValue.getter()
{
  return MailboxType.rawValue.getter();
}

uint64_t dispatch thunk of SandboxExtendedURL.sandboxResolvedURL.getter()
{
  return dispatch thunk of SandboxExtendedURL.sandboxResolvedURL.getter();
}

uint64_t TranscriptionStatus.rawValue.getter()
{
  return TranscriptionStatus.rawValue.getter();
}

uint64_t static SpotlightIndexManagerUtilities.voicemailsNeedsDeferredReindexing(defaults:)()
{
  return static SpotlightIndexManagerUtilities.voicemailsNeedsDeferredReindexing(defaults:)();
}

uint64_t static SpotlightIndexManagerUtilities.voicemailsNeedIndexingDueToVersionMismatch(defaults:)()
{
  return static SpotlightIndexManagerUtilities.voicemailsNeedIndexingDueToVersionMismatch(defaults:)();
}

uint64_t type metadata accessor for SpotlightIndexManagerUtilities()
{
  return type metadata accessor for SpotlightIndexManagerUtilities();
}

uint64_t ImageResource.init(name:bundle:)()
{
  return ImageResource.init(name:bundle:)();
}

uint64_t type metadata accessor for ImageResource()
{
  return type metadata accessor for ImageResource();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t UIViewConfigurationState.isPinned.getter()
{
  return UIViewConfigurationState.isPinned.getter();
}

uint64_t UIBackgroundConfiguration.visualEffect.setter()
{
  return UIBackgroundConfiguration.visualEffect.setter();
}

uint64_t static UIBackgroundConfiguration.listPlainHeaderFooter()()
{
  return static UIBackgroundConfiguration.listPlainHeaderFooter()();
}

uint64_t type metadata accessor for UIBackgroundConfiguration()
{
  return type metadata accessor for UIBackgroundConfiguration();
}

uint64_t UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter()
{
  return UIListContentConfiguration.TextProperties.adjustsFontForContentSizeCategory.setter();
}

uint64_t UIListContentConfiguration.TextProperties.color.setter()
{
  return UIListContentConfiguration.TextProperties.color.setter();
}

uint64_t UIListContentConfiguration.attributedText.setter()
{
  return UIListContentConfiguration.attributedText.setter();
}

uint64_t UIListContentConfiguration.textProperties.modify()
{
  return UIListContentConfiguration.textProperties.modify();
}

uint64_t UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter()
{
  return UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter();
}

uint64_t UIListContentConfiguration.ImageProperties.tintColor.setter()
{
  return UIListContentConfiguration.ImageProperties.tintColor.setter();
}

uint64_t UIListContentConfiguration.imageProperties.modify()
{
  return UIListContentConfiguration.imageProperties.modify();
}

uint64_t UIListContentConfiguration.imageToTextPadding.setter()
{
  return UIListContentConfiguration.imageToTextPadding.setter();
}

uint64_t UIListContentConfiguration.text.setter()
{
  return UIListContentConfiguration.text.setter();
}

uint64_t UIListContentConfiguration.image.setter()
{
  return UIListContentConfiguration.image.setter();
}

uint64_t type metadata accessor for UIListContentConfiguration()
{
  return type metadata accessor for UIListContentConfiguration();
}

uint64_t NSDiffableDataSourceSnapshot.appendItems(_:toSection:)()
{
  return NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
}

uint64_t NSDiffableDataSourceSnapshot.numberOfItems.getter()
{
  return NSDiffableDataSourceSnapshot.numberOfItems.getter();
}

Swift::Void __swiftcall NSDiffableDataSourceSnapshot.appendSections(_:)(Swift::OpaquePointer a1)
{
}

uint64_t NSDiffableDataSourceSnapshot.init()()
{
  return NSDiffableDataSourceSnapshot.init()();
}

uint64_t dispatch thunk of UITableViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)()
{
  return dispatch thunk of UITableViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)();
}

uint64_t UITableViewDiffableDataSource.init(tableView:cellProvider:)()
{
  return UITableViewDiffableDataSource.init(tableView:cellProvider:)();
}

uint64_t dispatch thunk of UITableViewDiffableDataSource.snapshot()()
{
  return dispatch thunk of UITableViewDiffableDataSource.snapshot()();
}

uint64_t UIContentUnavailableConfiguration.secondaryText.setter()
{
  return UIContentUnavailableConfiguration.secondaryText.setter();
}

uint64_t UIContentUnavailableConfiguration.text.setter()
{
  return UIContentUnavailableConfiguration.text.setter();
}

uint64_t static UIContentUnavailableConfiguration.empty()()
{
  return static UIContentUnavailableConfiguration.empty()();
}

uint64_t type metadata accessor for UIContentUnavailableConfiguration()
{
  return type metadata accessor for UIContentUnavailableConfiguration();
}

uint64_t type metadata accessor for UITraitPreferredContentSizeCategory()
{
  return type metadata accessor for UITraitPreferredContentSizeCategory();
}

uint64_t dispatch thunk of Tip.id.getter()
{
  return dispatch thunk of Tip.id.getter();
}

uint64_t Tip.invalidate(reason:)()
{
  return Tip.invalidate(reason:)();
}

uint64_t Tip.shouldDisplayUpdates.getter()
{
  return Tip.shouldDisplayUpdates.getter();
}

uint64_t TipUIPopoverViewController.popoverPresentationController.getter()
{
  return TipUIPopoverViewController.popoverPresentationController.getter();
}

uint64_t TipUIPopoverViewController.presentationDelegate.setter()
{
  return TipUIPopoverViewController.presentationDelegate.setter();
}

uint64_t type metadata accessor for TipUIPopoverViewController()
{
  return type metadata accessor for TipUIPopoverViewController();
}

uint64_t TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)()
{
  return TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
}

uint64_t TipView.init(_:arrowEdge:action:)()
{
  return TipView.init(_:arrowEdge:action:)();
}

uint64_t type metadata accessor for TipUIView()
{
  return type metadata accessor for TipUIView();
}

uint64_t TipUIView.init(_:arrowEdge:actionHandler:)()
{
  return TipUIView.init(_:arrowEdge:actionHandler:)();
}

uint64_t type metadata accessor for Tips.InvalidationReason()
{
  return type metadata accessor for Tips.InvalidationReason();
}

uint64_t Tips.Event.sendDonation<>(_:)()
{
  return Tips.Event.sendDonation<>(_:)();
}

uint64_t type metadata accessor for Tips.Status()
{
  return type metadata accessor for Tips.Status();
}

uint64_t AnyCancellable.store<A>(in:)()
{
  return AnyCancellable.store<A>(in:)();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return type metadata accessor for AnyCancellable();
}

uint64_t AnyCancellable.init(_:)()
{
  return AnyCancellable.init(_:)();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return AsyncPublisher.makeAsyncIterator()();
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t CurrentValueSubject.value.getter()
{
  return CurrentValueSubject.value.getter();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t Subject<>.send()()
{
  return Subject<>.send()();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t Published.projectedValue.setter()
{
  return Published.projectedValue.setter();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return Publisher.debounce<A>(for:scheduler:options:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t Publisher<>.values.getter()
{
  return Publisher<>.values.getter();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t EditButton.init()()
{
  return EditButton.init()();
}

uint64_t type metadata accessor for EditButton()
{
  return type metadata accessor for EditButton();
}

uint64_t ActionSheet.init(title:message:buttons:)()
{
  return ActionSheet.init(title:message:buttons:)();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t type metadata accessor for PreviewLayout()
{
  return type metadata accessor for PreviewLayout();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return type metadata accessor for _TaskModifier();
}

uint64_t NavigationView.init(content:)()
{
  return NavigationView.init(content:)();
}

uint64_t PlainButtonStyle.init()()
{
  return PlainButtonStyle.init()();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t EnvironmentObject.projectedValue.getter()
{
  return EnvironmentObject.projectedValue.getter();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.Wrapper.subscript.getter()
{
  return EnvironmentObject.Wrapper.subscript.getter();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t EnvironmentValues.sizeCategory.getter()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t EnvironmentValues.sizeCategory.setter()
{
  return EnvironmentValues.sizeCategory.setter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.editMode.getter()
{
  return EnvironmentValues.editMode.getter();
}

uint64_t EnvironmentValues.editMode.setter()
{
  return EnvironmentValues.editMode.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t type metadata accessor for NavigationBarItem.TitleDisplayMode()
{
  return type metadata accessor for NavigationBarItem.TitleDisplayMode();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t type metadata accessor for ContentSizeCategory()
{
  return type metadata accessor for ContentSizeCategory();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t SegmentedPickerStyle.init()()
{
  return SegmentedPickerStyle.init()();
}

uint64_t type metadata accessor for SegmentedPickerStyle()
{
  return type metadata accessor for SegmentedPickerStyle();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t UIHostingConfiguration.margins(_:_:)()
{
  return UIHostingConfiguration.margins(_:_:)();
}

uint64_t UIHostingConfiguration<>.init(content:)()
{
  return UIHostingConfiguration<>.init(content:)();
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t UIViewControllerRepresentable.body.getter()
{
  return UIViewControllerRepresentable.body.getter();
}

uint64_t UIViewControllerRepresentableContext.coordinator.getter()
{
  return UIViewControllerRepresentableContext.coordinator.getter();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t Edge.Set.init(rawValue:)()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t static Font.subheadline.getter()
{
  return static Font.subheadline.getter();
}

uint64_t static Font.title.getter()
{
  return static Font.title.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t List<>.init(content:)()
{
  return List<>.init(content:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.bold()()
{
  return Text.bold()();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t View.actionSheet(isPresented:content:)()
{
  return View.actionSheet(isPresented:content:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.pickerStyle<A>(_:)()
{
  return View.pickerStyle<A>(_:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.navigationBarItems<A, B>(leading:trailing:)()
{
  return View.navigationBarItems<A, B>(leading:trailing:)();
}

uint64_t View.navigationBarTitle(_:displayMode:)()
{
  return View.navigationBarTitle(_:displayMode:)();
}

uint64_t View.navigationBarBanner<A>(_:)()
{
  return View.navigationBarBanner<A>(_:)();
}

uint64_t View.sheet<A>(isPresented:onDismiss:content:)()
{
  return View.sheet<A>(isPresented:onDismiss:content:)();
}

uint64_t static Alert.Button.destructive(_:action:)()
{
  return static Alert.Button.destructive(_:action:)();
}

uint64_t static Alert.Button.default(_:action:)()
{
  return static Alert.Button.default(_:action:)();
}

uint64_t type metadata accessor for Alert.Button()
{
  return type metadata accessor for Alert.Button();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t static Color.accentColor.getter()
{
  return static Color.accentColor.getter();
}

uint64_t static Color.red.getter()
{
  return static Color.red.getter();
}

uint64_t static Color.blue.getter()
{
  return static Color.blue.getter();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Picker.init(selection:label:content:)()
{
  return Picker.init(selection:label:content:)();
}

uint64_t AnyView.init<A>(_:)()
{
  return AnyView.init<A>(_:)();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t type metadata accessor for Capsule()
{
  return type metadata accessor for Capsule();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t type metadata accessor for EditMode()
{
  return type metadata accessor for EditMode();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t Array.init()()
{
  return Array.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:arguments:)()
{
  return String.init(format:arguments:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.distance(from:to:)()
{
  return String.distance(from:to:)();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.background.getter()
{
  return static TaskPriority.background.getter();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.high.getter()
{
  return static TaskPriority.high.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t Int.init(truncating:)()
{
  return Int.init(truncating:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t UITableViewHeaderFooterView.backgroundConfiguration.getter()
{
  return UITableViewHeaderFooterView.backgroundConfiguration.getter();
}

uint64_t UITableViewHeaderFooterView.backgroundConfiguration.setter()
{
  return UITableViewHeaderFooterView.backgroundConfiguration.setter();
}

uint64_t UITableViewHeaderFooterView.configurationUpdateHandler.setter()
{
  return UITableViewHeaderFooterView.configurationUpdateHandler.setter();
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t CGContextRef.fillPath(using:)()
{
  return CGContextRef.fillPath(using:)();
}

uint64_t CHRecentCall.isGroupFaceTimeWithSomeUnknownContacts.getter()
{
  return CHRecentCall.isGroupFaceTimeWithSomeUnknownContacts.getter();
}

uint64_t CSSuggestion.localizedAttributedSuggestion.getter()
{
  return CSSuggestion.localizedAttributedSuggestion.getter();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t UITableViewCell.contentConfiguration.setter()
{
  return UITableViewCell.contentConfiguration.setter();
}

uint64_t UITableViewCell.defaultContentConfiguration()()
{
  return UITableViewCell.defaultContentConfiguration()();
}

uint64_t CNMutableContact.init(handle:)()
{
  return CNMutableContact.init(handle:)();
}

Swift::Void __swiftcall UIViewController.setContentScrollView(_:)(UIScrollView_optional a1)
{
}

uint64_t UIViewController.registerForTraitChanges<A>(_:handler:)()
{
  return UIViewController.registerForTraitChanges<A>(_:handler:)();
}

uint64_t UIViewController.contentUnavailableConfiguration.setter()
{
  return UIViewController.contentUnavailableConfiguration.setter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)()
{
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

{
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.async(execute:)()
{
  return OS_dispatch_queue.async(execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t NSAttributedString.init(_:)()
{
  return NSAttributedString.init(_:)();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

uint64_t UIContentSizeCategory.isAccessibilityCategory.getter()
{
  return UIContentSizeCategory.isAccessibilityCategory.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue_serial.Attributes()
{
  return type metadata accessor for OS_dispatch_queue_serial.Attributes();
}

uint64_t OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t NSArray.init(arrayLiteral:)()
{
  return NSArray.init(arrayLiteral:)();
}

uint64_t NSArray.makeIterator()()
{
  return NSArray.makeIterator()();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSString.init(stringLiteral:)()
{
  return NSString.init(stringLiteral:)();
}

uint64_t NSString.init(format:_:)()
{
  return NSString.init(format:_:)();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

Swift::String_optional __swiftcall StringProtocol.applyingTransform(_:reverse:)(NSStringTransform _, Swift::Bool reverse)
{
  uint64_t v2 = StringProtocol.applyingTransform(_:reverse:)(_, reverse);
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return StringProtocol.range<A>(of:options:range:locale:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static GlobalActor.preconditionIsolated(_:file:line:)()
{
  return static GlobalActor.preconditionIsolated(_:file:line:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t AsyncMapSequence.base.getter()
{
  return AsyncMapSequence.base.getter();
}

uint64_t AsyncMapSequence.Iterator.baseIterator.modify()
{
  return AsyncMapSequence.Iterator.baseIterator.modify();
}

uint64_t AsyncMapSequence.Iterator.transform.getter()
{
  return AsyncMapSequence.Iterator.transform.getter();
}

uint64_t AsyncMapSequence.Iterator.init(_:transform:)()
{
  return AsyncMapSequence.Iterator.init(_:transform:)();
}

uint64_t AsyncMapSequence.transform.getter()
{
  return AsyncMapSequence.transform.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t ABAddressBookSetAutorotationEnabled()
{
  return _ABAddressBookSetAutorotationEnabled();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

uint64_t CFPhoneNumberCreate()
{
  return _CFPhoneNumberCreate();
}

uint64_t CFPhoneNumberCreateString()
{
  return _CFPhoneNumberCreateString();
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return _CFStringGetCharactersPtr(theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return _CGAffineTransformIsIdentity(t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return _CGAffineTransformMakeRotation(retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return _CGColorSpaceCreateDeviceGray();
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  return _CGGradientCreateWithColorComponents(space, components, locations, count);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return _CGImageCreateWithImageInRect(image, rect);
}

void CGImageRelease(CGImageRef image)
{
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectIntegral(CGRect rect)
{
  return _CGRectIntegral(rect);
}

CFStringRef CMTimeCopyDescription(CFAllocatorRef allocator, CMTime *time)
{
  return _CMTimeCopyDescription(allocator, time);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  return _CMTimeGetSeconds(time);
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return _CMTimeMake(retstr, value, timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return _CMTimeMakeWithSeconds(retstr, seconds, preferredTimescale);
}

uint64_t CPIsInternalDevice()
{
  return _CPIsInternalDevice();
}

uint64_t CTDTMFPlayStop()
{
  return _CTDTMFPlayStop();
}

uint64_t CTSettingCopyMyPhoneNumber()
{
  return _CTSettingCopyMyPhoneNumber();
}

uint64_t CTTelephonyCenterAddObserver()
{
  return _CTTelephonyCenterAddObserver();
}

uint64_t CTTelephonyCenterGetDefault()
{
  return _CTTelephonyCenterGetDefault();
}

uint64_t CTTelephonyCenterRemoveEveryObserver()
{
  return _CTTelephonyCenterRemoveEveryObserver();
}

uint64_t CTTelephonyCenterRemoveObserver()
{
  return _CTTelephonyCenterRemoveObserver();
}

uint64_t CUTWeakLinkClass()
{
  return _CUTWeakLinkClass();
}

uint64_t CUTWeakLinkSymbol()
{
  return _CUTWeakLinkSymbol();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return _IOHIDEventSystemClientCreate();
}

uint64_t IOHIDEventSystemClientRegisterEventBlock()
{
  return _IOHIDEventSystemClientRegisterEventBlock();
}

uint64_t IOHIDEventSystemClientScheduleWithDispatchQueue()
{
  return _IOHIDEventSystemClientScheduleWithDispatchQueue();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return _IOHIDEventSystemClientSetMatching();
}

uint64_t IOHIDEventSystemClientUnscheduleFromDispatchQueue()
{
  return _IOHIDEventSystemClientUnscheduleFromDispatchQueue();
}

uint64_t MGCopyAnswerWithError()
{
  return _MGCopyAnswerWithError();
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return _NSStringFromCGSize(size);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t PNCopyBestGuessCountryCodeForNumber()
{
  return _PNCopyBestGuessCountryCodeForNumber();
}

uint64_t PNCreateFormattedStringWithCountry()
{
  return _PNCreateFormattedStringWithCountry();
}

uint64_t PNIsValidPhoneNumberForCountry()
{
  return _PNIsValidPhoneNumberForCountry();
}

uint64_t TUAddTelephonyCenterObserver()
{
  return _TUAddTelephonyCenterObserver();
}

uint64_t TUBundle()
{
  return _TUBundle();
}

uint64_t TUCallPhoneAppHistoryActivityType()
{
  return _TUCallPhoneAppHistoryActivityType();
}

uint64_t TUCallScreeningEnabled()
{
  return _TUCallScreeningEnabled();
}

uint64_t TUCallScreeningEnabledM3()
{
  return _TUCallScreeningEnabledM3();
}

uint64_t TUCallScreeningRTTEnabled()
{
  return _TUCallScreeningRTTEnabled();
}

uint64_t TUCopyIDSCanonicalAddressForDestinationID()
{
  return _TUCopyIDSCanonicalAddressForDestinationID();
}

uint64_t TUCopyIDSFromIDForHandle()
{
  return _TUCopyIDSFromIDForHandle();
}

uint64_t TUCountryCodeForIncomingCall()
{
  return _TUCountryCodeForIncomingCall();
}

uint64_t TUCurrentLocaleEligibleForCallScreeningOnboarding()
{
  return _TUCurrentLocaleEligibleForCallScreeningOnboarding();
}

uint64_t TUDefaultAppsEnabled()
{
  return _TUDefaultAppsEnabled();
}

uint64_t TUDeviceHasHomeButton()
{
  return _TUDeviceHasHomeButton();
}

uint64_t TUDispatchMainIfNecessary()
{
  return _TUDispatchMainIfNecessary();
}

uint64_t TUFormattedPhoneNumber()
{
  return _TUFormattedPhoneNumber();
}

uint64_t TUGuaranteeExecutionOnMainThreadAsync()
{
  return _TUGuaranteeExecutionOnMainThreadAsync();
}

uint64_t TUGuaranteeExecutionOnMainThreadSync()
{
  return _TUGuaranteeExecutionOnMainThreadSync();
}

uint64_t TUHandleForIDSCanonicalAddress()
{
  return _TUHandleForIDSCanonicalAddress();
}

uint64_t TUHomeCountryCode()
{
  return _TUHomeCountryCode();
}

uint64_t TUMapItemForDestinationID()
{
  return _TUMapItemForDestinationID();
}

uint64_t TUNetworkCountryCode()
{
  return _TUNetworkCountryCode();
}

uint64_t TUNumberToDial()
{
  return _TUNumberToDial();
}

uint64_t TUOpenSensitiveURL()
{
  return _TUOpenSensitiveURL();
}

uint64_t TUOpenURL()
{
  return _TUOpenURL();
}

uint64_t TUPreferredFaceTimeBundleIdentifier()
{
  return _TUPreferredFaceTimeBundleIdentifier();
}

uint64_t TURemoveEveryTelephonyCenterObserver()
{
  return _TURemoveEveryTelephonyCenterObserver();
}

uint64_t TURemoveTelephonyCenterObserver()
{
  return _TURemoveTelephonyCenterObserver();
}

uint64_t TelephonyUIBundle()
{
  return _TelephonyUIBundle();
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return _UIAccessibilityIsVoiceOverRunning();
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return _UIContentSizeCategoryIsAccessibilityCategory(category);
}

uint64_t UIFormattedPhoneNumberFromString()
{
  return _UIFormattedPhoneNumberFromString();
}

uint64_t UIFormattedPhoneNumberFromStringWithCountry()
{
  return _UIFormattedPhoneNumberFromStringWithCountry();
}

uint64_t UIFormattedPhoneStringByRemovingFromEnd()
{
  return _UIFormattedPhoneStringByRemovingFromEnd();
}

void UIGraphicsBeginImageContext(CGSize size)
{
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return _UIGraphicsGetCurrentContext();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

uint64_t UIImageGetUnreadIndicator()
{
  return _UIImageGetUnreadIndicator();
}

UIImageSymbolWeight UIImageSymbolWeightForFontWeight(UIFontWeight fontWeight)
{
  return _UIImageSymbolWeightForFontWeight(fontWeight);
}

uint64_t UIPhonePrefixFromNumber()
{
  return _UIPhonePrefixFromNumber();
}

uint64_t UIRectCenteredIntegralRect()
{
  return _UIRectCenteredIntegralRect();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _PNCopyFormattedNumberSuggestionForDigitsWithCountry()
{
  return __PNCopyFormattedNumberSuggestionForDigitsWithCountry();
}

uint64_t _PNCreateStringByStrippingFormattingAndNotVisiblyAllowable()
{
  return __PNCreateStringByStrippingFormattingAndNotVisiblyAllowable();
}

uint64_t _TUAssertShouldCrashApplication()
{
  return __TUAssertShouldCrashApplication();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return _dispatch_get_specific(key);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  return _dispatch_queue_get_specific(queue, key);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

int mkstemp(char *a1)
{
  return _mkstemp(a1);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

Class object_getClass(id a1)
{
  return _object_getClass(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStaticObject()
{
  return _swift_initStaticObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return _swift_isUniquelyReferenced_native();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

uint64_t ttyLocString()
{
  return _ttyLocString();
}

double u_getNumericValue(UChar32 c)
{
  return _u_getNumericValue(c);
}

uint64_t vm_ui_log()
{
  return _vm_ui_log();
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_CGFloatValue(void *a1, const char *a2, ...)
{
  return _[a1 CGFloatValue];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_HIDEventSystemClient(void *a1, const char *a2, ...)
{
  return _[a1 HIDEventSystemClient];
}

id objc_msgSend_IDSstatusCache(void *a1, const char *a2, ...)
{
  return _[a1 IDSstatusCache];
}

id objc_msgSend_TTYActionImage(void *a1, const char *a2, ...)
{
  return _[a1 TTYActionImage];
}

id objc_msgSend_TestAddUnknownFavorite(void *a1, const char *a2, ...)
{
  return _[a1 TestAddUnknownFavorite];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _[a1 URLContexts];
}

id objc_msgSend_URLItemWithExportedURL_localizedTitle_(void *a1, const char *a2, ...)
{
  return [a1 URLItemWithExportedURL:localizedTitle:];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__IDSStatusCacheKeyForService_withDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_IDSStatusCacheKeyForService:withDestination:");
}

id objc_msgSend__IDSStatusForService_withDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_IDSStatusForService:withDestination:");
}

id objc_msgSend__accessibilityHigherContrastTintColorForColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityHigherContrastTintColorForColor:");
}

id objc_msgSend__acquireLock(void *a1, const char *a2, ...)
{
  return _[a1 _acquireLock];
}

id objc_msgSend__activeFaceTimeCallExists(void *a1, const char *a2, ...)
{
  return _[a1 _activeFaceTimeCallExists];
}

id objc_msgSend__addNewContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addNewContact:");
}

id objc_msgSend__animateCallButton(void *a1, const char *a2, ...)
{
  return _[a1 _animateCallButton];
}

id objc_msgSend__anyContactsExist(void *a1, const char *a2, ...)
{
  return _[a1 _anyContactsExist];
}

id objc_msgSend__appearState(void *a1, const char *a2, ...)
{
  return _[a1 _appearState];
}

id objc_msgSend__audioSessionSerialQueue(void *a1, const char *a2, ...)
{
  return _[a1 _audioSessionSerialQueue];
}

id objc_msgSend__buildCaptureSessionAndOutputIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _buildCaptureSessionAndOutputIfNecessary];
}

id objc_msgSend__buildConstraints(void *a1, const char *a2, ...)
{
  return _[a1 _buildConstraints];
}

id objc_msgSend__callButtonPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callButtonPressed:");
}

id objc_msgSend__callButtonPressedActionWithCallProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callButtonPressedActionWithCallProvider:");
}

id objc_msgSend__capabilityForKey_(void *a1, const char *a2, ...)
{
  return [a1 _capabilityForKey:];
}

id objc_msgSend__carScreen(void *a1, const char *a2, ...)
{
  return _[a1 _carScreen];
}

id objc_msgSend__checkMailboxUsage(void *a1, const char *a2, ...)
{
  return _[a1 _checkMailboxUsage];
}

id objc_msgSend__clearDisplayIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _clearDisplayIfNecessary];
}

id objc_msgSend__clearIDSStatusCache(void *a1, const char *a2, ...)
{
  return _[a1 _clearIDSStatusCache];
}

id objc_msgSend__constrainRegistrationView(void *a1, const char *a2, ...)
{
  return _[a1 _constrainRegistrationView];
}

id objc_msgSend__contentViewWidthForApplicationBoundsSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentViewWidthForApplicationBoundsSize:");
}

id objc_msgSend__createAVPlayer(void *a1, const char *a2, ...)
{
  return _[a1 _createAVPlayer];
}

id objc_msgSend__createWindowFromScene_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createWindowFromScene:");
}

id objc_msgSend__currentTraitCollection(void *a1, const char *a2, ...)
{
  return _[a1 _currentTraitCollection];
}

id objc_msgSend__deleteButtonClicked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteButtonClicked:");
}

id objc_msgSend__deleteRepeat(void *a1, const char *a2, ...)
{
  return _[a1 _deleteRepeat];
}

id objc_msgSend__deviceSpecificImageNamed_(void *a1, const char *a2, ...)
{
  return [a1 _deviceSpecificImageNamed:];
}

id objc_msgSend__dialVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 _dialVoicemail];
}

id objc_msgSend__dialWithRequest_(void *a1, const char *a2, ...)
{
  return [a1 _dialWithRequest:];
}

id objc_msgSend__encodedDialerStringSkippingUnmappedCharacters_(void *a1, const char *a2, ...)
{
  return [a1 _encodedDialerStringSkippingUnmappedCharacters:];
}

id objc_msgSend__ensureProperPositionForContentView(void *a1, const char *a2, ...)
{
  return _[a1 _ensureProperPositionForContentView];
}

id objc_msgSend__externalSystemSuperDarkGrayColor(void *a1, const char *a2, ...)
{
  return _[a1 _externalSystemSuperDarkGrayColor];
}

id objc_msgSend__faceTimeInvitationExists(void *a1, const char *a2, ...)
{
  return _[a1 _faceTimeInvitationExists];
}

id objc_msgSend__fadeSubviewsOf_excludingViews_toValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fadeSubviewsOf:excludingViews:toValue:");
}

id objc_msgSend__fetchCurrentVoicemailsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCurrentVoicemailsWithCompletion:");
}

id objc_msgSend__fetchCurrentVoicemailsWithPredicate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCurrentVoicemailsWithPredicate:completion:");
}

id objc_msgSend__fetchSupportedForcedOfflineLocalesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSupportedForcedOfflineLocalesWithCompletion:");
}

id objc_msgSend__flatImageWithColor_(void *a1, const char *a2, ...)
{
  return [a1 _flatImageWithColor:];
}

id objc_msgSend__graphicsQuality(void *a1, const char *a2, ...)
{
  return _[a1 _graphicsQuality];
}

id objc_msgSend__handleCTIndicatorsVoicemailNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCTIndicatorsVoicemailNotification:");
}

id objc_msgSend__handleSIMInsertionOrRemoval(void *a1, const char *a2, ...)
{
  return _[a1 _handleSIMInsertionOrRemoval];
}

id objc_msgSend__highlightFirstVisibleRowIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 _highlightFirstVisibleRowIfAppropriate];
}

id objc_msgSend__imageThatSuppressesAccessibilityHairlineThickening(void *a1, const char *a2, ...)
{
  return _[a1 _imageThatSuppressesAccessibilityHairlineThickening];
}

id objc_msgSend__indexPathsForCallsWithStatus_includeUnknown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathsForCallsWithStatus:includeUnknown:");
}

id objc_msgSend__indexPathsForHighlightedRows(void *a1, const char *a2, ...)
{
  return _[a1 _indexPathsForHighlightedRows];
}

id objc_msgSend__initializeRootViewControllerDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _initializeRootViewControllerDictionaries];
}

id objc_msgSend__initializeUI(void *a1, const char *a2, ...)
{
  return _[a1 _initializeUI];
}

id objc_msgSend__intents_extensionMatchingAttributesForIntents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_intents_extensionMatchingAttributesForIntents:");
}

id objc_msgSend__invalidateBadge(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateBadge];
}

id objc_msgSend__isAnimatingScroll(void *a1, const char *a2, ...)
{
  return _[a1 _isAnimatingScroll];
}

id objc_msgSend__isAnimatingZoom(void *a1, const char *a2, ...)
{
  return _[a1 _isAnimatingZoom];
}

id objc_msgSend__isIPad(void *a1, const char *a2, ...)
{
  return _[a1 _isIPad];
}

id objc_msgSend__keypadImage(void *a1, const char *a2, ...)
{
  return _[a1 _keypadImage];
}

id objc_msgSend__keypadToCallButtonYSpacing(void *a1, const char *a2, ...)
{
  return _[a1 _keypadToCallButtonYSpacing];
}

id objc_msgSend__linearFocusMovementSequences(void *a1, const char *a2, ...)
{
  return _[a1 _linearFocusMovementSequences];
}

id objc_msgSend__loadOffsetDefaultForKey_withScrollView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadOffsetDefaultForKey:withScrollView:");
}

id objc_msgSend__makeCalloutVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeCalloutVisible:");
}

id objc_msgSend__metadataCacheDidUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _metadataCacheDidUpdate];
}

id objc_msgSend__metadataNameForDialerText(void *a1, const char *a2, ...)
{
  return _[a1 _metadataNameForDialerText];
}

id objc_msgSend__newContactWithPhoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 _newContactWithPhoneNumber:];
}

id objc_msgSend__pause(void *a1, const char *a2, ...)
{
  return _[a1 _pause];
}

id objc_msgSend__performScrollTest_iterations_delta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performScrollTest:iterations:delta:");
}

id objc_msgSend__performSetEnabled_(void *a1, const char *a2, ...)
{
  return [a1 _performSetEnabled:];
}

id objc_msgSend__performSetHighlighted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSetHighlighted:");
}

id objc_msgSend__performSetSelected_(void *a1, const char *a2, ...)
{
  return [a1 _performSetSelected:];
}

id objc_msgSend__phImageNamed_inBundle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_phImageNamed:inBundle:compatibleWithTraitCollection:");
}

id objc_msgSend__phonePad_appendString_suppressClearingDialedNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_phonePad:appendString:suppressClearingDialedNumber:");
}

id objc_msgSend__pickRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickRoute:");
}

id objc_msgSend__pickableRoutes(void *a1, const char *a2, ...)
{
  return _[a1 _pickableRoutes];
}

id objc_msgSend__pickableRoutesForCategory_mode_(void *a1, const char *a2, ...)
{
  return [a1 _pickableRoutesForCategory:mode:];
}

id objc_msgSend__pickableRoutesUsingAttribute(void *a1, const char *a2, ...)
{
  return _[a1 _pickableRoutesUsingAttribute];
}

id objc_msgSend__pickableRoutesUsingBackgroundQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickableRoutesUsingBackgroundQueue:");
}

id objc_msgSend__pickedRouteUsingBackgroundQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickedRouteUsingBackgroundQueue:");
}

id objc_msgSend__play(void *a1, const char *a2, ...)
{
  return _[a1 _play];
}

id objc_msgSend__preferredMaxLayoutWidth(void *a1, const char *a2, ...)
{
  return _[a1 _preferredMaxLayoutWidth];
}

id objc_msgSend__primitiveSetNavigationControllerContentInsetAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_primitiveSetNavigationControllerContentInsetAdjustment:");
}

id objc_msgSend__primitiveSetNavigationControllerContentOffsetAdjustment_(void *a1, const char *a2, ...)
{
  return [a1 _primitiveSetNavigationControllerContentOffsetAdjustment:];
}

id objc_msgSend__refreshAttributedText(void *a1, const char *a2, ...)
{
  return _[a1 _refreshAttributedText];
}

id objc_msgSend__releaseLock(void *a1, const char *a2, ...)
{
  return _[a1 _releaseLock];
}

id objc_msgSend__reloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 _reloadQueue];
}

id objc_msgSend__remoteViewControllerDialerOffset(void *a1, const char *a2, ...)
{
  return _[a1 _remoteViewControllerDialerOffset];
}

id objc_msgSend__replaceRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 _replaceRecentCalls];
}

id objc_msgSend__replaceSubviews(void *a1, const char *a2, ...)
{
  return _[a1 _replaceSubviews];
}

id objc_msgSend__requestMakeCutCopyPasteCalloutVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestMakeCutCopyPasteCalloutVisible:");
}

id objc_msgSend__resetButtonAnimation(void *a1, const char *a2, ...)
{
  return _[a1 _resetButtonAnimation];
}

id objc_msgSend__resetCurrentViewController(void *a1, const char *a2, ...)
{
  return _[a1 _resetCurrentViewController];
}

id objc_msgSend__restoreState(void *a1, const char *a2, ...)
{
  return _[a1 _restoreState];
}

id objc_msgSend__routeIsAirTunes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_routeIsAirTunes:");
}

id objc_msgSend__routeIsDefault_(void *a1, const char *a2, ...)
{
  return [a1 _routeIsDefault:];
}

id objc_msgSend__routeIsHandset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_routeIsHandset:");
}

id objc_msgSend__routeIsReceiver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_routeIsReceiver:");
}

id objc_msgSend__routeIsSpeaker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_routeIsSpeaker:");
}

id objc_msgSend__saveOffsetDefaultForKey_withScrollView_(void *a1, const char *a2, ...)
{
  return [a1 _saveOffsetDefaultForKey:withScrollView:];
}

id objc_msgSend__scaledValueForValue_(void *a1, const char *a2, ...)
{
  return [a1 _scaledValueForValue:];
}

id objc_msgSend__screen(void *a1, const char *a2, ...)
{
  return _[a1 _screen];
}

id objc_msgSend__selectCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectCell:");
}

id objc_msgSend__selectionContainsUnreadVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 _selectionContainsUnreadVoicemail];
}

id objc_msgSend__setBackgroundStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundStyle:");
}

id objc_msgSend__setCaptureView_(void *a1, const char *a2, ...)
{
  return [a1 _setCaptureView:];
}

id objc_msgSend__setChargeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setChargeEnabled:");
}

id objc_msgSend__setClipUnderlapWhileTransitioning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setClipUnderlapWhileTransitioning:");
}

id objc_msgSend__setContinuousCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContinuousCornerRadius:");
}

id objc_msgSend__setDefaultTopNavBarTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDefaultTopNavBarTintColor:");
}

id objc_msgSend__setGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setGroupName:");
}

id objc_msgSend__setInternalTitle_(void *a1, const char *a2, ...)
{
  return [a1 _setInternalTitle:];
}

id objc_msgSend__setMarginWidth_(void *a1, const char *a2, ...)
{
  return [a1 _setMarginWidth:];
}

id objc_msgSend__setMenuProvider_(void *a1, const char *a2, ...)
{
  return [a1 _setMenuProvider:];
}

id objc_msgSend__setOverrideContentInsets_forRectEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOverrideContentInsets:forRectEdges:");
}

id objc_msgSend__setPreferredMaxLayoutWidth_(void *a1, const char *a2, ...)
{
  return [a1 _setPreferredMaxLayoutWidth:];
}

id objc_msgSend__setSelectionIndicatorImage_(void *a1, const char *a2, ...)
{
  return [_a1 _setSelectionIndicatorImage:];
}

id objc_msgSend__setSpeedBumpEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSpeedBumpEdges:");
}

id objc_msgSend__setTouchInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTouchInsets:");
}

id objc_msgSend__sharedDetailDisclosureImage(void *a1, const char *a2, ...)
{
  return _[a1 _sharedDetailDisclosureImage];
}

id objc_msgSend__sharedTTYDirectImage(void *a1, const char *a2, ...)
{
  return _[a1 _sharedTTYDirectImage];
}

id objc_msgSend__sharedTTYRelayImage(void *a1, const char *a2, ...)
{
  return _[a1 _sharedTTYRelayImage];
}

id objc_msgSend__shouldShowRTTButton(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowRTTButton];
}

id objc_msgSend__showCarrierVoiceCallReportAlertForCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showCarrierVoiceCallReportAlertForCall:");
}

id objc_msgSend__startListeningForBadgeChangedNotifications_(void *a1, const char *a2, ...)
{
  return [a1 _startListeningForBadgeChangedNotifications];
}

id objc_msgSend__stopDeleteTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopDeleteTimer];
}

id objc_msgSend__stopListeningForBadgeChangedNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopListeningForBadgeChangedNotifications:");
}

id objc_msgSend__stopLookupTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopLookupTimer];
}

id objc_msgSend__stopWithError_(void *a1, const char *a2, ...)
{
  return [a1 _stopWithError:];
}

id objc_msgSend__tableView(void *a1, const char *a2, ...)
{
  return _[a1 _tableView];
}

id objc_msgSend__telephonyClient(void *a1, const char *a2, ...)
{
  return _[a1 _telephonyClient];
}

id objc_msgSend__thinSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_thinSystemFontOfSize:");
}

id objc_msgSend__titleForCellAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleForCellAtIndexPath:");
}

id objc_msgSend__unformattedPickableRoutesForAudioSessionCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unformattedPickableRoutesForAudioSessionCategory:");
}

id objc_msgSend__unformattedPickableRoutesForAudioSessionCategory_usingBackgroundQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unformattedPickableRoutesForAudioSessionCategory:usingBackgroundQueue:");
}

id objc_msgSend__update(void *a1, const char *a2, ...)
{
  return _[a1 _update];
}

id objc_msgSend__updateAllBadges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAllBadges:");
}

id objc_msgSend__updateBadgeViewForLocalizedSenderIdentityTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBadgeViewForLocalizedSenderIdentityTitle:");
}

id objc_msgSend__updateBottomTabs(void *a1, const char *a2, ...)
{
  return _[a1 _updateBottomTabs];
}

id objc_msgSend__updateBottomTabs_lastViewTypeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBottomTabs:lastViewTypeNumber:");
}

id objc_msgSend__updateButtonState(void *a1, const char *a2, ...)
{
  return _[a1 _updateButtonState];
}

id objc_msgSend__updateCachedCellHeight(void *a1, const char *a2, ...)
{
  return _[a1 _updateCachedCellHeight];
}

id objc_msgSend__updateCallButtonEnabledState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCallButtonEnabledState:");
}

id objc_msgSend__updateCallButtonEnabledState_updateNameNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCallButtonEnabledState:updateNameNow:");
}

id objc_msgSend__updateConstraints(void *a1, const char *a2, ...)
{
  return _[a1 _updateConstraints];
}

id objc_msgSend__updateConstraintsConstants(void *a1, const char *a2, ...)
{
  return _[a1 _updateConstraintsConstants];
}

id objc_msgSend__updateFonts(void *a1, const char *a2, ...)
{
  return _[a1 _updateFonts];
}

id objc_msgSend__updateGreetingButtonAllowed(void *a1, const char *a2, ...)
{
  return _[a1 _updateGreetingButtonAllowed];
}

id objc_msgSend__updateIDSStatusIfNeededForService_withDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateIDSStatusIfNeededForService:withDestination:");
}

id objc_msgSend__updateLCDNameLabelWithAMatchingName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLCDNameLabelWithAMatchingName:");
}

id objc_msgSend__updateLayout(void *a1, const char *a2, ...)
{
  return _[a1 _updateLayout];
}

id objc_msgSend__updateMetadataCacheIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 _updateMetadataCacheIfPossible];
}

id objc_msgSend__updateName(void *a1, const char *a2, ...)
{
  return _[a1 _updateName];
}

id objc_msgSend__updateNameAndRefreshResult_(void *a1, const char *a2, ...)
{
  return [a1 _updateNameAndRefreshResult:];
}

id objc_msgSend__updateNameFromMetadataCache(void *a1, const char *a2, ...)
{
  return _[a1 _updateNameFromMetadataCache];
}

id objc_msgSend__updateRecordStopXConstraints(void *a1, const char *a2, ...)
{
  return _[a1 _updateRecordStopXConstraints];
}

id objc_msgSend__updateRootViewController(void *a1, const char *a2, ...)
{
  return _[a1 _updateRootViewController];
}

id objc_msgSend__updateTextColor(void *a1, const char *a2, ...)
{
  return _[a1 _updateTextColor];
}

id objc_msgSend__updateUIForMaskViewChange(void *a1, const char *a2, ...)
{
  return _[a1 _updateUIForMaskViewChange];
}

id objc_msgSend__updateUIState(void *a1, const char *a2, ...)
{
  return _[a1 _updateUIState];
}

id objc_msgSend__updateUIStateForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUIStateForce:");
}

id objc_msgSend__verifiedCheckmarkImage(void *a1, const char *a2, ...)
{
  return _[a1 _verifiedCheckmarkImage];
}

id objc_msgSend__yOffsetForAddContactButton(void *a1, const char *a2, ...)
{
  return _[a1 _yOffsetForAddContactButton];
}

id objc_msgSend__yOffsetForKeypadView(void *a1, const char *a2, ...)
{
  return _[a1 _yOffsetForKeypadView];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_accessibilityConstraintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityConstraintsEnabled];
}

id objc_msgSend_accessibilityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityIdentifier];
}

id objc_msgSend_accessoryType(void *a1, const char *a2, ...)
{
  return _[a1 accessoryType];
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_accountAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 accountAtIndex:];
}

id objc_msgSend_accountButton(void *a1, const char *a2, ...)
{
  return _[a1 accountButton];
}

id objc_msgSend_accountDescription(void *a1, const char *a2, ...)
{
  return _[a1 accountDescription];
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accountManager(void *a1, const char *a2, ...)
{
  return _[a1 accountManager];
}

id objc_msgSend_accountProvisioningViewController(void *a1, const char *a2, ...)
{
  return _[a1 accountProvisioningViewController];
}

id objc_msgSend_accountUUID(void *a1, const char *a2, ...)
{
  return _[a1 accountUUID];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsView(void *a1, const char *a2, ...)
{
  return _[a1 accountsView];
}

id objc_msgSend_accountsView_buttonForRowAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsView:buttonForRowAtIndex:");
}

id objc_msgSend_accountsView_buttonTappedForRowWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsView:buttonTappedForRowWithIndex:");
}

id objc_msgSend_accountsViewController(void *a1, const char *a2, ...)
{
  return _[a1 accountsViewController];
}

id objc_msgSend_accountsViewControllerDidFinish_(void *a1, const char *a2, ...)
{
  return [a1 accountsViewControllerDidFinish:];
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionButton(void *a1, const char *a2, ...)
{
  return _[a1 actionButton];
}

id objc_msgSend_actionButtonImage(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonImage];
}

id objc_msgSend_actionButtonImageForActionType_(void *a1, const char *a2, ...)
{
  return [a1 actionButtonImageForActionType:];
}

id objc_msgSend_actionButtonTappedHandler(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonTappedHandler];
}

id objc_msgSend_actionType(void *a1, const char *a2, ...)
{
  return _[a1 actionType];
}

id objc_msgSend_actionWithTitle_image_identifier_handler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithTitle:image:identifier:handler:];
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithTitle:style:handler:];
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_activateAudioSessionIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 activateAudioSessionIfNeededWithCompletion:];
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return [a1 activateConstraints:];
}

id objc_msgSend_activateExtensionWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 activateExtensionWithCompletion:];
}

id objc_msgSend_activateVoicemailAudioSession(void *a1, const char *a2, ...)
{
  return _[a1 activateVoicemailAudioSession];
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 activateWithCompletion:];
}

id objc_msgSend_activeContexts(void *a1, const char *a2, ...)
{
  return _[a1 activeContexts];
}

id objc_msgSend_activeConversationForCall_(void *a1, const char *a2, ...)
{
  return [a1 activeConversationForCall:];
}

id objc_msgSend_activeConversations(void *a1, const char *a2, ...)
{
  return _[a1 activeConversations];
}

id objc_msgSend_activeInterfaceMechanismIsHardware(void *a1, const char *a2, ...)
{
  return _[a1 activeInterfaceMechanismIsHardware];
}

id objc_msgSend_activeInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 activeInterfaceOrientation];
}

id objc_msgSend_activeRemoteParticipants(void *a1, const char *a2, ...)
{
  return _[a1 activeRemoteParticipants];
}

id objc_msgSend_activeVideoCall(void *a1, const char *a2, ...)
{
  return _[a1 activeVideoCall];
}

id objc_msgSend_activityDidFinish_(void *a1, const char *a2, ...)
{
  return [a1 activityDidFinish:];
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return _[a1 activityType];
}

id objc_msgSend_actualBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 actualBackgroundColor];
}

id objc_msgSend_actualTintColor(void *a1, const char *a2, ...)
{
  return _[a1 actualTintColor];
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return [a1 addAction:];
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addAnimation:forKey:];
}

id objc_msgSend_addArrangedSubview_(void *a1, const char *a2, ...)
{
  return [a1 addArrangedSubview:];
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttribute:value:range:];
}

id objc_msgSend_addAttributes_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttributes:range:];
}

id objc_msgSend_addBoundaryTimeObserverForTimes_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addBoundaryTimeObserverForTimes:];
}

id objc_msgSend_addButton_(void *a1, const char *a2, ...)
{
  return [a1 addButton:];
}

id objc_msgSend_addButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 addButtonItem];
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return [a1 addChildViewController:];
}

id objc_msgSend_addConstraint_(void *a1, const char *a2, ...)
{
  return [a1 addConstraint:];
}

id objc_msgSend_addConstraints_(void *a1, const char *a2, ...)
{
  return [a1 addConstraints:];
}

id objc_msgSend_addConstraintsForNewCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraintsForNewCell:");
}

id objc_msgSend_addContact_animated_(void *a1, const char *a2, ...)
{
  return [a1 addContact:animated:];
}

id objc_msgSend_addContactButton(void *a1, const char *a2, ...)
{
  return _[a1 addContactButton];
}

id objc_msgSend_addContactButtonContentInsetConstant(void *a1, const char *a2, ...)
{
  return _[a1 addContactButtonContentInsetConstant];
}

id objc_msgSend_addContactButtonTopConstraint(void *a1, const char *a2, ...)
{
  return _[a1 addContactButtonTopConstraint];
}

id objc_msgSend_addContactButtonTopConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 addContactButtonTopConstraintConstant];
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:queue:];
}

id objc_msgSend_addDurationAndDataSubview(void *a1, const char *a2, ...)
{
  return _[a1 addDurationAndDataSubview];
}

id objc_msgSend_addEmergencyItemsSubview(void *a1, const char *a2, ...)
{
  return _[a1 addEmergencyItemsSubview];
}

id objc_msgSend_addEntry_(void *a1, const char *a2, ...)
{
  return [a1 addEntry:];
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 addGestureRecognizer:];
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return [a1 addIndex:];
}

id objc_msgSend_addInput_(void *a1, const char *a2, ...)
{
  return [a1 addInput:];
}

id objc_msgSend_addInteraction_(void *a1, const char *a2, ...)
{
  return [a1 addInteraction:];
}

id objc_msgSend_addKeyCommand_(void *a1, const char *a2, ...)
{
  return [a1 addKeyCommand:];
}

id objc_msgSend_addLayoutGuide_(void *a1, const char *a2, ...)
{
  return [a1 addLayoutGuide:];
}

id objc_msgSend_addListenerID_forService_(void *a1, const char *a2, ...)
{
  return [a1 addListenerID:forService:];
}

id objc_msgSend_addMessageIDToPlaybackQueue_(void *a1, const char *a2, ...)
{
  return [a1 addMessageIDToPlaybackQueue];
}

id objc_msgSend_addMessageToPlaybackQueue_(void *a1, const char *a2, ...)
{
  return [a1 addMessageToPlaybackQueue];
}

id objc_msgSend_addNotificationObservers(void *a1, const char *a2, ...)
{
  return _[a1 addNotificationObservers];
}

id objc_msgSend_addNumberFontSize(void *a1, const char *a2, ...)
{
  return _[a1 addNumberFontSize];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:];
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forKeyPath:options:context:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:selector:name:object:];
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addObserverForName:object:queue:usingBlock:];
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return [a1 addOperation:];
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 addOperationWithBlock:];
}

id objc_msgSend_addOutput_(void *a1, const char *a2, ...)
{
  return [a1 addOutput:];
}

id objc_msgSend_addPeriodicTimeObserverForInterval_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addPeriodicTimeObserverForInterval:queue:usingBlock:];
}

id objc_msgSend_addRTTInfo(void *a1, const char *a2, ...)
{
  return _[a1 addRTTInfo];
}

id objc_msgSend_addRelationForLeftOfCell_(void *a1, const char *a2, ...)
{
  return [a1 addRelationForLeftOfCell:];
}

id objc_msgSend_addRelationForRightOfCell_(void *a1, const char *a2, ...)
{
  return [a1 addRelationForRightOfCell:];
}

id objc_msgSend_addRelationForWidthOfCell_(void *a1, const char *a2, ...)
{
  return [a1 addRelationForWidthOfCell];
}

id objc_msgSend_addScreenSharingTypeSubview(void *a1, const char *a2, ...)
{
  return _[a1 addScreenSharingTypeSubview];
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return [a1 addSublayer:];
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return [a1 addSubview:];
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:forControlEvents:];
}

id objc_msgSend_addTarget_action_forEvents_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:forEvents:];
}

id objc_msgSend_addVerifiedBadge(void *a1, const char *a2, ...)
{
  return _[a1 addVerifiedBadge];
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _[a1 airplaneMode];
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerWithTitle:message:preferredStyle:];
}

id objc_msgSend_alignmentForKeyPadButtonType_(void *a1, const char *a2, ...)
{
  return [a1 alignmentForKeyPadButtonType:];
}

id objc_msgSend_allConstraints(void *a1, const char *a2, ...)
{
  return _[a1 allConstraints];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allUnknownContactInRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 allUnknownContactInRecentCall:];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allVoicemails(void *a1, const char *a2, ...)
{
  return _[a1 allVoicemails];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_allowTableViewScrolling(void *a1, const char *a2, ...)
{
  return _[a1 allowTableViewScrolling];
}

id objc_msgSend_alpha(void *a1, const char *a2, ...)
{
  return _[a1 alpha];
}

id objc_msgSend_alphaComponent(void *a1, const char *a2, ...)
{
  return _[a1 alphaComponent];
}

id objc_msgSend_alwaysShowLocalVideo(void *a1, const char *a2, ...)
{
  return _[a1 alwaysShowLocalVideo];
}

id objc_msgSend_ambientHorizontalSizeClass(void *a1, const char *a2, ...)
{
  return _[a1 ambientHorizontalSizeClass];
}

id objc_msgSend_ambientInCallControlSize(void *a1, const char *a2, ...)
{
  return _[a1 ambientInCallControlSize];
}

id objc_msgSend_ambientVerticalSizeClass(void *a1, const char *a2, ...)
{
  return _[a1 ambientVerticalSizeClass];
}

id objc_msgSend_analyticsLogger(void *a1, const char *a2, ...)
{
  return _[a1 analyticsLogger];
}

id objc_msgSend_analyticsReporter(void *a1, const char *a2, ...)
{
  return _[a1 analyticsReporter];
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateLayoutOfViewWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 animateLayoutOfViewWithCompletionBlock:];
}

id objc_msgSend_animateSearchResultsController_(void *a1, const char *a2, ...)
{
  return [a1 animateSearchResultsController:];
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:animations:];
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:delay:options:animations:completion:];
}

id objc_msgSend_animation(void *a1, const char *a2, ...)
{
  return _[a1 animation];
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 animationWithKeyPath:];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appState(void *a1, const char *a2, ...)
{
  return _[a1 appState];
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return [a1 appendAttributedString:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendPath_(void *a1, const char *a2, ...)
{
  return [a1 appendPath:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_applicationOpenURL_(void *a1, const char *a2, ...)
{
  return [a1 applicationOpenURL];
}

id objc_msgSend_applicationProxy(void *a1, const char *a2, ...)
{
  return _[a1 applicationProxy];
}

id objc_msgSend_applicationProxyForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 applicationProxyForIdentifier:];
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _[a1 applicationState];
}

id objc_msgSend_applicationTintColor(void *a1, const char *a2, ...)
{
  return _[a1 applicationTintColor];
}

id objc_msgSend_applicationsForUserActivityType_(void *a1, const char *a2, ...)
{
  return [a1 applicationsForUserActivityType:];
}

id objc_msgSend_applyLayoutConstraints(void *a1, const char *a2, ...)
{
  return _[a1 applyLayoutConstraints];
}

id objc_msgSend_applyLayoutConstraintsForSmartDialer(void *a1, const char *a2, ...)
{
  return _[a1 applyLayoutConstraintsForSmartDialer];
}

id objc_msgSend_areKeysAvailable_(void *a1, const char *a2, ...)
{
  return [a1 areKeysAvailable:];
}

id objc_msgSend_areUnknownContactsBlocked(void *a1, const char *a2, ...)
{
  return _[a1 areUnknownContactsBlocked];
}

id objc_msgSend_arrangedSubviewInColumnAtIndex_rowAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 arrangedSubviewInColumnAtIndex:rowAtIndex:];
}

id objc_msgSend_arrangedSubviews(void *a1, const char *a2, ...)
{
  return _[a1 arrangedSubviews];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObject:];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObjectsFromArray:];
}

id objc_msgSend_arrayContainsUUID_uuid_(void *a1, const char *a2, ...)
{
  return [a1 arrayContainsUUID:uuid];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_asset(void *a1, const char *a2, ...)
{
  return _[a1 asset];
}

id objc_msgSend_assetWithURL_(void *a1, const char *a2, ...)
{
  return [a1 assetWithURL:];
}

id objc_msgSend_atLeastOneUnknownCallerInRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 atLeastOneUnknownCallerInRecentCall:];
}

id objc_msgSend_attachCarPlayToWindowScene_(void *a1, const char *a2, ...)
{
  return [a1 attachCarPlayToWindowScene:];
}

id objc_msgSend_attemptToPlayKey_(void *a1, const char *a2, ...)
{
  return [a1 attemptToPlayKey:];
}

id objc_msgSend_attribute_atIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return [a1 attribute:atIndex:effectiveRange:];
}

id objc_msgSend_attributeForKey_(void *a1, const char *a2, ...)
{
  return [a1 attributeForKey:];
}

id objc_msgSend_attributedStringForDowntimeMessage_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringForDowntimeMessage];
}

id objc_msgSend_attributedStringForName_label_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringForName:label:];
}

id objc_msgSend_attributedStringToHighlightText_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringToHighlightText];
}

id objc_msgSend_attributedStringToHighlightText_primaryColour_secondaryColour_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringToHighlightText:primaryColour:secondaryColour:];
}

id objc_msgSend_attributedStringToHighlightText_primaryColour_secondaryColour_style_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringToHighlightText:primaryColour:secondaryColour:style:];
}

id objc_msgSend_attributedStringToHighlightText_style_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringToHighlightText:style:];
}

id objc_msgSend_attributedStringWithAttachment_(void *a1, const char *a2, ...)
{
  return [a1 attributedStringWithAttachment:];
}

id objc_msgSend_attributedText(void *a1, const char *a2, ...)
{
  return _[a1 attributedText];
}

id objc_msgSend_audioCategory(void *a1, const char *a2, ...)
{
  return _[a1 audioCategory];
}

id objc_msgSend_audioDeviceController(void *a1, const char *a2, ...)
{
  return _[a1 audioDeviceController];
}

id objc_msgSend_audioFavoritesEntryForFavoritesEntry_(void *a1, const char *a2, ...)
{
  return [a1 audioFavoritesEntryForFavoritesEntry:];
}

id objc_msgSend_audioMessages(void *a1, const char *a2, ...)
{
  return _[a1 audioMessages];
}

id objc_msgSend_audioMessagesPassingTest_(void *a1, const char *a2, ...)
{
  return [a1 audioMessagesPassingTest:];
}

id objc_msgSend_audioMessagesPassingTest_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 audioMessagesPassingTest:withCompletion:];
}

id objc_msgSend_audioMessagesWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 audioMessagesWithCompletion:];
}

id objc_msgSend_audioMode(void *a1, const char *a2, ...)
{
  return _[a1 audioMode];
}

id objc_msgSend_audioPlaybackRequestBlock(void *a1, const char *a2, ...)
{
  return _[a1 audioPlaybackRequestBlock];
}

id objc_msgSend_audioPlayer(void *a1, const char *a2, ...)
{
  return _[a1 audioPlayer];
}

id objc_msgSend_audioRecorderContinuedWithFile_duration_(void *a1, const char *a2, ...)
{
  return [a1 audioRecorderContinuedWithFile:duration:];
}

id objc_msgSend_audioRecorderDelegate(void *a1, const char *a2, ...)
{
  return _[a1 audioRecorderDelegate];
}

id objc_msgSend_audioRecorderEndedWithFile_duration_error_(void *a1, const char *a2, ...)
{
  return [a1 audioRecorderEndedWithFile:duration:error:];
}

id objc_msgSend_audioRecorderStartedWithFile_(void *a1, const char *a2, ...)
{
  return [a1 audioRecorderStartedWithFile:];
}

id objc_msgSend_audioRouteButton(void *a1, const char *a2, ...)
{
  return _[a1 audioRouteButton];
}

id objc_msgSend_audioRouteGlyph(void *a1, const char *a2, ...)
{
  return _[a1 audioRouteGlyph];
}

id objc_msgSend_audioRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 audioRouteGlyphForDisplayStyle:];
}

id objc_msgSend_audioRouteGlyphForRoutePicker(void *a1, const char *a2, ...)
{
  return _[a1 audioRouteGlyphForRoutePicker];
}

id objc_msgSend_audioRouteGlyphForRoutePickerWithColor_(void *a1, const char *a2, ...)
{
  return [a1 audioRouteGlyphForRoutePickerWithColor:];
}

id objc_msgSend_audioRouteGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 audioRouteGlyphImage];
}

id objc_msgSend_audioRoutingMenuController_didSelectLagunaActionForHandle_conversation_(void *a1, const char *a2, ...)
{
  return [a1 audioRoutingMenuController:didSelectLagunaActionForHandle:conversation:];
}

id objc_msgSend_audioRoutingMenuController_didSelectRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRoutingMenuController:didSelectRoute:");
}

id objc_msgSend_audioRoutingMenuController_didToggleMute_(void *a1, const char *a2, ...)
{
  return [a1 audioRoutingMenuController:didToggleMute:];
}

id objc_msgSend_audioSessionState(void *a1, const char *a2, ...)
{
  return _[a1 audioSessionState];
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _[a1 authorizationStatus];
}

id objc_msgSend_authorizationStatusForEntityType_(void *a1, const char *a2, ...)
{
  return [a1 authorizationStatusForEntityType:];
}

id objc_msgSend_autocompleteSuggestionForContact_phoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 autocompleteSuggestionForContact:phoneNumber:];
}

id objc_msgSend_avSystemControllerQueryQueue(void *a1, const char *a2, ...)
{
  return _[a1 avSystemControllerQueryQueue];
}

id objc_msgSend_availabilityForListenerID_forService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availabilityForListenerID:forService:");
}

id objc_msgSend_availableKeyDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 availableKeyDescriptor];
}

id objc_msgSend_avatarCardController(void *a1, const char *a2, ...)
{
  return _[a1 avatarCardController];
}

id objc_msgSend_avatarContentView(void *a1, const char *a2, ...)
{
  return _[a1 avatarContentView];
}

id objc_msgSend_avatarLayoutGuideLeadingAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 avatarLayoutGuideLeadingAnchorLayoutConstraintConstant];
}

id objc_msgSend_avatarLayoutGuideLeadingAnchorLayoutConstraintConstantForContentCategorySize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avatarLayoutGuideLeadingAnchorLayoutConstraintConstantForContentCategorySize:");
}

id objc_msgSend_avatarLayoutGuideWidthAnchorLayoutConstraintConstant_(void *a1, const char *a2, ...)
{
  return [a1 avatarLayoutGuideWidthAnchorLayoutConstraintConstant:];
}

id objc_msgSend_avatarView(void *a1, const char *a2, ...)
{
  return _[a1 avatarView];
}

id objc_msgSend_avatarViewContactForFavoritesEntry_(void *a1, const char *a2, ...)
{
  return [a1 avatarViewContactForFavoritesEntry:];
}

id objc_msgSend_avatarViewController(void *a1, const char *a2, ...)
{
  return _[a1 avatarViewController];
}

id objc_msgSend_avatarViewControllerSettings(void *a1, const char *a2, ...)
{
  return _[a1 avatarViewControllerSettings];
}

id objc_msgSend_backButton(void *a1, const char *a2, ...)
{
  return _[a1 backButton];
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColor];
}

id objc_msgSend_backgroundImageForSize_state_(void *a1, const char *a2, ...)
{
  return [a1 backgroundImageForSize:state:];
}

id objc_msgSend_backgroundImageNameForSize_state_(void *a1, const char *a2, ...)
{
  return [a1 backgroundImageNameForSize:state:];
}

id objc_msgSend_backgroundMaterial(void *a1, const char *a2, ...)
{
  return _[a1 backgroundMaterial];
}

id objc_msgSend_backgroundViewForTableView(void *a1, const char *a2, ...)
{
  return _[a1 backgroundViewForTableView];
}

id objc_msgSend_badge(void *a1, const char *a2, ...)
{
  return _[a1 badge];
}

id objc_msgSend_badgeCalculator(void *a1, const char *a2, ...)
{
  return _[a1 badgeCalculator];
}

id objc_msgSend_badgeString(void *a1, const char *a2, ...)
{
  return _[a1 badgeString];
}

id objc_msgSend_badgeValue(void *a1, const char *a2, ...)
{
  return _[a1 badgeValue];
}

id objc_msgSend_badgeView(void *a1, const char *a2, ...)
{
  return _[a1 badgeView];
}

id objc_msgSend_badgeViewTrailingToSubtitleLeadingConstrant(void *a1, const char *a2, ...)
{
  return _[a1 badgeViewTrailingToSubtitleLeadingConstrant];
}

id objc_msgSend_baseViewController(void *a1, const char *a2, ...)
{
  return _[a1 baseViewController];
}

id objc_msgSend_becomeCurrent(void *a1, const char *a2, ...)
{
  return _[a1 becomeCurrent];
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 becomeFirstResponder];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginInterruption(void *a1, const char *a2, ...)
{
  return _[a1 beginInterruption];
}

id objc_msgSend_beginTrackingWithTouch_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 beginTrackingWithTouch:withEvent:];
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _[a1 beginUpdates];
}

id objc_msgSend_beginningOfDocument(void *a1, const char *a2, ...)
{
  return _[a1 beginningOfDocument];
}

id objc_msgSend_bestGuessPickableRoutesForAnyCall(void *a1, const char *a2, ...)
{
  return _[a1 bestGuessPickableRoutesForAnyCall];
}

id objc_msgSend_bezierPathWithOvalInRect_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithOvalInRect:];
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithRoundedRect:cornerRadius:];
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_blockContacts_(void *a1, const char *a2, ...)
{
  return [a1 blockContacts:];
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 blockOperationWithBlock:];
}

id objc_msgSend_blockWithContacts_(void *a1, const char *a2, ...)
{
  return [a1 blockWithContacts:];
}

id objc_msgSend_blockedByExtension(void *a1, const char *a2, ...)
{
  return _[a1 blockedByExtension];
}

id objc_msgSend_blockedViewController(void *a1, const char *a2, ...)
{
  return _[a1 blockedViewController];
}

id objc_msgSend_blockedVoicemails(void *a1, const char *a2, ...)
{
  return _[a1 blockedVoicemails];
}

id objc_msgSend_bluetoothAudioRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 bluetoothAudioRouteGlyphForDisplayStyle:];
}

id objc_msgSend_boldButton(void *a1, const char *a2, ...)
{
  return _[a1 boldButton];
}

id objc_msgSend_boldSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return [a1 boldSystemFontOfSize:];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:];
}

id objc_msgSend_BOOLForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:defaultValue:];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_boostQualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 boostQualityOfService];
}

id objc_msgSend_bootSession(void *a1, const char *a2, ...)
{
  return _[a1 bootSession];
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _[a1 bottomAnchor];
}

id objc_msgSend_bottomBarGlyphWithSymbolType_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomBarGlyphWithSymbolType:sizeCategory:");
}

id objc_msgSend_bottomBarImageWithName_color_(void *a1, const char *a2, ...)
{
  return [a1 bottomBarImageWithName:color:];
}

id objc_msgSend_boundingRectWithSize_options_attributes_context_(void *a1, const char *a2, ...)
{
  return [a1 boundingRectWithSize:options:attributes:context:];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return [a1 bringSubviewToFront:];
}

id objc_msgSend_builtConstraints(void *a1, const char *a2, ...)
{
  return _[a1 builtConstraints];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return [a1 bundleForClass:];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithPath:];
}

id objc_msgSend_button(void *a1, const char *a2, ...)
{
  return _[a1 button];
}

id objc_msgSend_buttonAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 buttonAtIndex:];
}

id objc_msgSend_buttonColor(void *a1, const char *a2, ...)
{
  return _[a1 buttonColor];
}

id objc_msgSend_buttonLabel(void *a1, const char *a2, ...)
{
  return _[a1 buttonLabel];
}

id objc_msgSend_buttonLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 buttonLayoutGuide];
}

id objc_msgSend_buttonStackView(void *a1, const char *a2, ...)
{
  return _[a1 buttonStackView];
}

id objc_msgSend_buttonTitleLabelFirstBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 buttonTitleLabelFirstBaselineLayoutConstraint];
}

id objc_msgSend_buttonTitleLabelFirstBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 buttonTitleLabelFirstBaselineLayoutConstraintConstant];
}

id objc_msgSend_buttonTitleLabelLastBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 buttonTitleLabelLastBaselineLayoutConstraint];
}

id objc_msgSend_buttonTitleLabelLastBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 buttonTitleLabelLastBaselineLayoutConstraintConstant];
}

id objc_msgSend_buttonTray(void *a1, const char *a2, ...)
{
  return _[a1 buttonTray];
}

id objc_msgSend_buttonWithState_(void *a1, const char *a2, ...)
{
  return [a1 buttonWithState:];
}

id objc_msgSend_buttonWithType_(void *a1, const char *a2, ...)
{
  return [a1 buttonWithType:];
}

id objc_msgSend_buttons(void *a1, const char *a2, ...)
{
  return _[a1 buttons];
}

id objc_msgSend_callBackButton(void *a1, const char *a2, ...)
{
  return _[a1 callBackButton];
}

id objc_msgSend_callBackButtonTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callBackButtonTapped:");
}

id objc_msgSend_callButton(void *a1, const char *a2, ...)
{
  return _[a1 callButton];
}

id objc_msgSend_callButtonDiameter(void *a1, const char *a2, ...)
{
  return _[a1 callButtonDiameter];
}

id objc_msgSend_callButtonImage(void *a1, const char *a2, ...)
{
  return _[a1 callButtonImage];
}

id objc_msgSend_callButtonKeypadOffsetConstraint(void *a1, const char *a2, ...)
{
  return _[a1 callButtonKeypadOffsetConstraint];
}

id objc_msgSend_callButtonTappedHandler(void *a1, const char *a2, ...)
{
  return _[a1 callButtonTappedHandler];
}

id objc_msgSend_callCenter(void *a1, const char *a2, ...)
{
  return _[a1 callCenter];
}

id objc_msgSend_callContextMenuInteraction(void *a1, const char *a2, ...)
{
  return _[a1 callContextMenuInteraction];
}

id objc_msgSend_callDirectoryIdentityType(void *a1, const char *a2, ...)
{
  return _[a1 callDirectoryIdentityType];
}

id objc_msgSend_callDirectoryManagerIdentificationEntriesChangedNotificationToken(void *a1, const char *a2, ...)
{
  return _[a1 callDirectoryManagerIdentificationEntriesChangedNotificationToken];
}

id objc_msgSend_callFilterController(void *a1, const char *a2, ...)
{
  return _[a1 callFilterController];
}

id objc_msgSend_callForPickableRoutesUsingBackgroundQueue_(void *a1, const char *a2, ...)
{
  return [a1 callForPickableRoutesUsingBackgroundQueue:];
}

id objc_msgSend_callHistoryController(void *a1, const char *a2, ...)
{
  return _[a1 callHistoryController];
}

id objc_msgSend_callHistoryControllerCallHistoryFetchLimit(void *a1, const char *a2, ...)
{
  return _[a1 callHistoryControllerCallHistoryFetchLimit];
}

id objc_msgSend_callHistoryControllerCoalescingStrategy(void *a1, const char *a2, ...)
{
  return _[a1 callHistoryControllerCoalescingStrategy];
}

id objc_msgSend_callHistoryControllerOptions(void *a1, const char *a2, ...)
{
  return _[a1 callHistoryControllerOptions];
}

id objc_msgSend_callHistoryControllerWithCoalescingStrategy_(void *a1, const char *a2, ...)
{
  return [a1 callHistoryControllerWithCoalescingStrategy:];
}

id objc_msgSend_callHistoryControllerWithCoalescingStrategy_options_(void *a1, const char *a2, ...)
{
  return [a1 callHistoryControllerWithCoalescingStrategy:options:];
}

id objc_msgSend_callHistorySearchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 callHistorySearchEnabled];
}

id objc_msgSend_callOccurrence(void *a1, const char *a2, ...)
{
  return _[a1 callOccurrence];
}

id objc_msgSend_callOccurrences(void *a1, const char *a2, ...)
{
  return _[a1 callOccurrences];
}

id objc_msgSend_callProviderCache(void *a1, const char *a2, ...)
{
  return _[a1 callProviderCache];
}

id objc_msgSend_callProviderIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 callProviderIdentifier];
}

id objc_msgSend_callProviderManager(void *a1, const char *a2, ...)
{
  return _[a1 callProviderManager];
}

id objc_msgSend_callReportingViewModel(void *a1, const char *a2, ...)
{
  return _[a1 callReportingViewModel];
}

id objc_msgSend_callScreeningEnabled(void *a1, const char *a2, ...)
{
  return _[a1 callScreeningEnabled];
}

id objc_msgSend_callScreeningEnabledM3(void *a1, const char *a2, ...)
{
  return _[a1 callScreeningEnabledM3];
}

id objc_msgSend_callService(void *a1, const char *a2, ...)
{
  return _[a1 callService];
}

id objc_msgSend_callServices(void *a1, const char *a2, ...)
{
  return _[a1 callServices];
}

id objc_msgSend_callState(void *a1, const char *a2, ...)
{
  return _[a1 callState];
}

id objc_msgSend_callStatus(void *a1, const char *a2, ...)
{
  return _[a1 callStatus];
}

id objc_msgSend_callTypeIconLayoutGuideLeadingAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 callTypeIconLayoutGuideLeadingAnchorLayoutConstraintConstant];
}

id objc_msgSend_callTypeIconLayoutGuideLeadingAnchorLayoutConstraintConstantForContentCategorySize_(void *a1, const char *a2, ...)
{
  return [a1 callTypeIconLayoutGuideLeadingAnchorLayoutConstraintConstantForContentCategorySize:];
}

id objc_msgSend_callTypeIconLayoutGuideWidthAnchorLayoutConstraintConstant_(void *a1, const char *a2, ...)
{
  return [a1 callTypeIconLayoutGuideWidthAnchorLayoutConstraintConstant:];
}

id objc_msgSend_callTypeIconSizingView(void *a1, const char *a2, ...)
{
  return _[a1 callTypeIconSizingView];
}

id objc_msgSend_callTypeIconView(void *a1, const char *a2, ...)
{
  return _[a1 callTypeIconView];
}

id objc_msgSend_callUUID(void *a1, const char *a2, ...)
{
  return _[a1 callUUID];
}

id objc_msgSend_callbackDestinationID(void *a1, const char *a2, ...)
{
  return _[a1 callbackDestinationID];
}

id objc_msgSend_callerCountLabel(void *a1, const char *a2, ...)
{
  return _[a1 callerCountLabel];
}

id objc_msgSend_callerDateLabel(void *a1, const char *a2, ...)
{
  return _[a1 callerDateLabel];
}

id objc_msgSend_callerId(void *a1, const char *a2, ...)
{
  return _[a1 callerId];
}

id objc_msgSend_callerIdForDisplay(void *a1, const char *a2, ...)
{
  return _[a1 callerIdForDisplay];
}

id objc_msgSend_callerIdIsBlocked(void *a1, const char *a2, ...)
{
  return _[a1 callerIdIsBlocked];
}

id objc_msgSend_callerNameForDisplay(void *a1, const char *a2, ...)
{
  return _[a1 callerNameForDisplay];
}

id objc_msgSend_callsWithPredicate_limit_offset_batchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callsWithPredicate:limit:offset:batchSize:");
}

id objc_msgSend_callsWithValidHandles_(void *a1, const char *a2, ...)
{
  return [a1 callsWithValidHandles:];
}

id objc_msgSend_canAddEntry(void *a1, const char *a2, ...)
{
  return _[a1 canAddEntry];
}

id objc_msgSend_canAddInput_(void *a1, const char *a2, ...)
{
  return [a1 canAddInput:];
}

id objc_msgSend_canAddOutput_(void *a1, const char *a2, ...)
{
  return [a1 canAddOutput:];
}

id objc_msgSend_canAttemptEmergencyCallsWithoutCellularConnection(void *a1, const char *a2, ...)
{
  return _[a1 canAttemptEmergencyCallsWithoutCellularConnection];
}

id objc_msgSend_canAttemptEmergencyCallsWithoutCellularConnectionWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 canAttemptEmergencyCallsWithoutCellularConnectionWithUUID:];
}

id objc_msgSend_canAttemptTelephonyCallsWithoutCellularConnection(void *a1, const char *a2, ...)
{
  return _[a1 canAttemptTelephonyCallsWithoutCellularConnection];
}

id objc_msgSend_canBeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 canBeEnabled];
}

id objc_msgSend_canBecomeFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 canBecomeFirstResponder];
}

id objc_msgSend_canDisplaySearchBarPopover(void *a1, const char *a2, ...)
{
  return _[a1 canDisplaySearchBarPopover];
}

id objc_msgSend_canExceedUnifyingThreshold(void *a1, const char *a2, ...)
{
  return _[a1 canExceedUnifyingThreshold];
}

id objc_msgSend_canLoadOlderRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 canLoadOlderRecentCalls];
}

id objc_msgSend_canMakeEmergencyCallForSenderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 canMakeEmergencyCallForSenderIdentity:];
}

id objc_msgSend_canPerformTableViewUpdates(void *a1, const char *a2, ...)
{
  return _[a1 canPerformTableViewUpdates];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelPlaybackRequest(void *a1, const char *a2, ...)
{
  return _[a1 cancelPlaybackRequest];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return [a1 cancelPreviousPerformRequestsWithTarget:];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelPreviousSearch(void *a1, const char *a2, ...)
{
  return _[a1 cancelPreviousSearch];
}

id objc_msgSend_cancelSearchFetchOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelSearchFetchOperations];
}

id objc_msgSend_cancelTouchTracking(void *a1, const char *a2, ...)
{
  return _[a1 cancelTouchTracking];
}

id objc_msgSend_cancelTrackingWithEvent_(void *a1, const char *a2, ...)
{
  return [a1 cancelTrackingWithEvent:];
}

id objc_msgSend_canonicalHandleForISOCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 canonicalHandleForISOCountryCode:];
}

id objc_msgSend_capHeight(void *a1, const char *a2, ...)
{
  return _[a1 capHeight];
}

id objc_msgSend_cappedSizedImagesAreValid(void *a1, const char *a2, ...)
{
  return _[a1 cappedSizedImagesAreValid];
}

id objc_msgSend_captureFileOutput(void *a1, const char *a2, ...)
{
  return _[a1 captureFileOutput];
}

id objc_msgSend_captureGroup(void *a1, const char *a2, ...)
{
  return _[a1 captureGroup];
}

id objc_msgSend_captureSession(void *a1, const char *a2, ...)
{
  return _[a1 captureSession];
}

id objc_msgSend_captureView(void *a1, const char *a2, ...)
{
  return _[a1 captureView];
}

id objc_msgSend_carPlayExternalDevice(void *a1, const char *a2, ...)
{
  return _[a1 carPlayExternalDevice];
}

id objc_msgSend_carPlayInCallImageForSymbolType_(void *a1, const char *a2, ...)
{
  return [a1 carPlayInCallImageForSymbolType:];
}

id objc_msgSend_carPlayWindow(void *a1, const char *a2, ...)
{
  return _[a1 carPlayWindow];
}

id objc_msgSend_cardController(void *a1, const char *a2, ...)
{
  return _[a1 cardController];
}

id objc_msgSend_carplayRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 carplayRouteGlyphForDisplayStyle:];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return [a1 caseInsensitiveCompare:];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifier];
}

id objc_msgSend_cellClassForCachedCellHeight(void *a1, const char *a2, ...)
{
  return _[a1 cellClassForCachedCellHeight];
}

id objc_msgSend_cellConfigurator(void *a1, const char *a2, ...)
{
  return _[a1 cellConfigurator];
}

id objc_msgSend_cellDetailDestructiveActionText(void *a1, const char *a2, ...)
{
  return _[a1 cellDetailDestructiveActionText];
}

id objc_msgSend_cellForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 cellForRowAtIndexPath:];
}

id objc_msgSend_cellForRowAtIndexPath_withRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 cellForRowAtIndexPath:withRecentCall:];
}

id objc_msgSend_cellSelectionStyleForIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 cellSelectionStyleForIndexPath:];
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _[a1 centerXAnchor];
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _[a1 centerYAnchor];
}

id objc_msgSend_centralAreaContainerView(void *a1, const char *a2, ...)
{
  return _[a1 centralAreaContainerView];
}

id objc_msgSend_character(void *a1, const char *a2, ...)
{
  return _[a1 character];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_characterForNumberPadCharacter_(void *a1, const char *a2, ...)
{
  return [a1 characterForNumberPadCharacter:];
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return [a1 characterIsMember:];
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return [a1 characterSetWithCharactersInString:];
}

id objc_msgSend_characterSetWithRange_(void *a1, const char *a2, ...)
{
  return [a1 characterSetWithRange:];
}

id objc_msgSend_charge(void *a1, const char *a2, ...)
{
  return _[a1 charge];
}

id objc_msgSend_checkAndUpdateVisibilityForView_shouldInvertVisibility_(void *a1, const char *a2, ...)
{
  return [a1 checkAndUpdateVisibilityForView:shouldInvertVisibility:];
}

id objc_msgSend_checkForFacebookContactsWithDelay_allowAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForFacebookContactsWithDelay:allowAlert:");
}

id objc_msgSend_checkRecentMissedCallCount(void *a1, const char *a2, ...)
{
  return _[a1 checkRecentMissedCallCount];
}

id objc_msgSend_checkTranscriptionModelAvailability(void *a1, const char *a2, ...)
{
  return _[a1 checkTranscriptionModelAvailability];
}

id objc_msgSend_checkedForFacebookContacts(void *a1, const char *a2, ...)
{
  return _[a1 checkedForFacebookContacts];
}

id objc_msgSend_chevronImageView(void *a1, const char *a2, ...)
{
  return _[a1 chevronImageView];
}

id objc_msgSend_childViewControllers(void *a1, const char *a2, ...)
{
  return _[a1 childViewControllers];
}

id objc_msgSend_circleBounds(void *a1, const char *a2, ...)
{
  return _[a1 circleBounds];
}

id objc_msgSend_classificationViewController(void *a1, const char *a2, ...)
{
  return _[a1 classificationViewController];
}

id objc_msgSend_clearButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 clearButtonItem];
}

id objc_msgSend_clearCachedRoutes(void *a1, const char *a2, ...)
{
  return _[a1 clearCachedRoutes];
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _[a1 clearColor];
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _[a1 client];
}

id objc_msgSend_closestPositionToPoint_(void *a1, const char *a2, ...)
{
  return [a1 closestPositionToPoint:];
}

id objc_msgSend_coalesceRecentCall_withRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 coalesceRecentCall:withRecentCall:];
}

id objc_msgSend_coalescedCallWithCall_usingStrategy_(void *a1, const char *a2, ...)
{
  return [a1 coalescedCallWithCall:usingStrategy:];
}

id objc_msgSend_coalescingStrategy(void *a1, const char *a2, ...)
{
  return _[a1 coalescingStrategy];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collapsedBottomConstraint(void *a1, const char *a2, ...)
{
  return _[a1 collapsedBottomConstraint];
}

id objc_msgSend_collectionView(void *a1, const char *a2, ...)
{
  return _[a1 collectionView];
}

id objc_msgSend_colorEffect(void *a1, const char *a2, ...)
{
  return _[a1 colorEffect];
}

id objc_msgSend_colorForDodge(void *a1, const char *a2, ...)
{
  return _[a1 colorForDodge];
}

id objc_msgSend_colorForKeyPadButtonType_(void *a1, const char *a2, ...)
{
  return [a1 colorForKeyPadButtonType:];
}

id objc_msgSend_colorForLuminance(void *a1, const char *a2, ...)
{
  return _[a1 colorForLuminance];
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return [a1 colorWithAlphaComponent:];
}

id objc_msgSend_colorWithHue_saturation_brightness_alpha_(void *a1, const char *a2, ...)
{
  return [a1 colorWithHue:saturation:brightness:alpha:];
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return [a1 colorWithRed:green:blue:alpha:];
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return [a1 colorWithWhite:alpha:];
}

id objc_msgSend_columnAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 columnAtIndex:];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_commonInit(void *a1, const char *a2, ...)
{
  return _[a1 commonInit];
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return [a1 compare:options:];
}

id objc_msgSend_completionDispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 completionDispatchQueue];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsJoinedByString:];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsSeparatedByString:];
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_compose(void *a1, const char *a2, ...)
{
  return _[a1 compose];
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _[a1 confidence];
}

id objc_msgSend_confidenceRating(void *a1, const char *a2, ...)
{
  return _[a1 confidenceRating];
}

id objc_msgSend_configurationWithActions_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithActions:];
}

id objc_msgSend_configurationWithIdentifier_previewProvider_actionProvider_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithIdentifier:previewProvider:actionProvider:];
}

id objc_msgSend_configureAudioButtonForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 configureAudioButtonForRowAtIndexPath:];
}

id objc_msgSend_configureButtonUsingAudioRoute_(void *a1, const char *a2, ...)
{
  return [a1 configureButtonUsingAudioRoute:];
}

id objc_msgSend_configureCardController_presentationResultForIndex_(void *a1, const char *a2, ...)
{
  return [a1 configureCardController:presentationResultForIndex:];
}

id objc_msgSend_configureCardController_presentationResultForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 configureCardController:presentationResultForRecentCall:];
}

id objc_msgSend_configureCell_forCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureCell:forCall:");
}

id objc_msgSend_configureCell_forOngoingConversation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureCell:forOngoingConversation:");
}

id objc_msgSend_configureCellWithSeparatorColor_atIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 configureCellWithSeparatorColor:atIndexPath:];
}

id objc_msgSend_configureForImage_(void *a1, const char *a2, ...)
{
  return [a1 configureForImage:];
}

id objc_msgSend_configureGridViewArrangedSubviews(void *a1, const char *a2, ...)
{
  return _[a1 configureGridViewArrangedSubviews];
}

id objc_msgSend_configureLegacyVoicemailCell_for_showLabel_onCallTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureLegacyVoicemailCell:for:showLabel:onCallTapped:");
}

id objc_msgSend_configureSearch(void *a1, const char *a2, ...)
{
  return _[a1 configureSearch];
}

id objc_msgSend_configureWithPrimaryTitle_secondaryTitle_(void *a1, const char *a2, ...)
{
  return [a1 configureWithPrimaryTitle:secondaryTitle:];
}

id objc_msgSend_configureWithPrimaryTitle_secondaryTitle_searchString_isNumberPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithPrimaryTitle:secondaryTitle:searchString:isNumberPriority:");
}

id objc_msgSend_configureWithRecentsItem_recentCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithRecentsItem:recentCall:");
}

id objc_msgSend_configureWithTransparentBackground(void *a1, const char *a2, ...)
{
  return _[a1 configureWithTransparentBackground];
}

id objc_msgSend_configureWithViewModel_(void *a1, const char *a2, ...)
{
  return [a1 configureWithViewModel:];
}

id objc_msgSend_configureWithVoicemailMessageViewModel_expanded_shouldGrayForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithVoicemailMessageViewModel:expanded:shouldGrayForeground:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return [a1 conformsToProtocol:];
}

id objc_msgSend_connectionUnavailableView(void *a1, const char *a2, ...)
{
  return _[a1 connectionUnavailableView];
}

id objc_msgSend_connectionWithMediaType_(void *a1, const char *a2, ...)
{
  return [a1 connectionWithMediaType:];
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return [a1 constraintEqualToAnchor:];
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return [a1 constraintEqualToAnchor:];
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return [a1 constraintEqualToConstant:];
}

id objc_msgSend_constraintEqualToSystemSpacingBelowAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return [a1 constraintEqualToSystemSpacingBelowAnchor:multiplier:];
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return [a1 constraintGreaterThanOrEqualToAnchor:];
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return [a1 constraintGreaterThanOrEqualToAnchor:constant:];
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return [a1 constraintLessThanOrEqualToAnchor:];
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return [a1 constraintLessThanOrEqualToAnchor:constant:];
}

id objc_msgSend_constraintLessThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return [a1 constraintLessThanOrEqualToConstant:];
}

id objc_msgSend_constraintToFillContainerWithLeftOfCell_(void *a1, const char *a2, ...)
{
  return [a1 constraintToFillContainerWithLeftOfCell:];
}

id objc_msgSend_constraintToFillContainerWithRightOfCell_(void *a1, const char *a2, ...)
{
  return [a1 constraintToFillContainerWithRightOfCell:];
}

id objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(void *a1, const char *a2, ...)
{
  return [a1 constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:];
}

id objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_priority_(void *a1, const char *a2, ...)
{
  return [a1 constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:priority:];
}

id objc_msgSend_constraints(void *a1, const char *a2, ...)
{
  return _[a1 constraints];
}

id objc_msgSend_constraintsForLayouts(void *a1, const char *a2, ...)
{
  return _[a1 constraintsForLayouts];
}

id objc_msgSend_constraintsKeyForAccessibleLayout_expanded_editing_(void *a1, const char *a2, ...)
{
  return [a1 constraintsKeyForAccessibleLayout:expanded:editing:];
}

id objc_msgSend_constraintsLoaded(void *a1, const char *a2, ...)
{
  return _[a1 constraintsLoaded];
}

id objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(void *a1, const char *a2, ...)
{
  return [a1 constraintsWithVisualFormat:options:metrics:views:];
}

id objc_msgSend_contact(void *a1, const char *a2, ...)
{
  return _[a1 contact];
}

id objc_msgSend_contactArray(void *a1, const char *a2, ...)
{
  return _[a1 contactArray];
}

id objc_msgSend_contactAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 contactAtIndex:];
}

id objc_msgSend_contactByHandleForRecentCall_keyDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 contactByHandleForRecentCall:keyDescriptors:];
}

id objc_msgSend_contactCache(void *a1, const char *a2, ...)
{
  return _[a1 contactCache];
}

id objc_msgSend_contactCacheKeyForFavoritesEntry_(void *a1, const char *a2, ...)
{
  return [a1 contactCacheKeyForFavoritesEntry:];
}

id objc_msgSend_contactCountButton(void *a1, const char *a2, ...)
{
  return _[a1 contactCountButton];
}

id objc_msgSend_contactCountButtonView(void *a1, const char *a2, ...)
{
  return _[a1 contactCountButtonView];
}

id objc_msgSend_contactCountForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 contactCountForFetchRequest:error:];
}

id objc_msgSend_contactForFavoritesEntry_(void *a1, const char *a2, ...)
{
  return [a1 contactForFavoritesEntry:];
}

id objc_msgSend_contactForFavoritesEntry_keyDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 contactForFavoritesEntry:keyDescriptors:];
}

id objc_msgSend_contactForHandle_(void *a1, const char *a2, ...)
{
  return [a1 contactForHandle:];
}

id objc_msgSend_contactForHandle_isoCountryCode_metadataCache_(void *a1, const char *a2, ...)
{
  return [a1 contactForHandle:isoCountryCode:metadataCache:];
}

id objc_msgSend_contactForIdentifier_keysToFetch_(void *a1, const char *a2, ...)
{
  return [a1 contactForIdentifier:keysToFetch:];
}

id objc_msgSend_contactForRecentCall_keyDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 contactForRecentCall:keyDescriptors:];
}

id objc_msgSend_contactForRecentCall_metadataCache_(void *a1, const char *a2, ...)
{
  return [a1 contactForRecentCall:metadataCache:];
}

id objc_msgSend_contactFormatter(void *a1, const char *a2, ...)
{
  return _[a1 contactFormatter];
}

id objc_msgSend_contactHandles(void *a1, const char *a2, ...)
{
  return _[a1 contactHandles];
}

id objc_msgSend_contactHandlesForHandle_(void *a1, const char *a2, ...)
{
  return [a1 contactHandlesForHandle:];
}

id objc_msgSend_contactHandlesForRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 contactHandlesForRecentCalls];
}

id objc_msgSend_contactIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 contactIdentifier];
}

id objc_msgSend_contactKeyDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 contactKeyDescriptors];
}

id objc_msgSend_contactLabel(void *a1, const char *a2, ...)
{
  return _[a1 contactLabel];
}

id objc_msgSend_contactListViewController(void *a1, const char *a2, ...)
{
  return _[a1 contactListViewController];
}

id objc_msgSend_contactListViewController_didSelectContact_(void *a1, const char *a2, ...)
{
  return [a1 contactListViewController:didSelectContact:];
}

id objc_msgSend_contactProperty(void *a1, const char *a2, ...)
{
  return _[a1 contactProperty];
}

id objc_msgSend_contactRelations(void *a1, const char *a2, ...)
{
  return _[a1 contactRelations];
}

id objc_msgSend_contactResultButton(void *a1, const char *a2, ...)
{
  return _[a1 contactResultButton];
}

id objc_msgSend_contactResultButtonView(void *a1, const char *a2, ...)
{
  return _[a1 contactResultButtonView];
}

id objc_msgSend_contactResultForPhoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 contactResultForPhoneNumber:];
}

id objc_msgSend_contactSearchManager(void *a1, const char *a2, ...)
{
  return _[a1 contactSearchManager];
}

id objc_msgSend_contactStore(void *a1, const char *a2, ...)
{
  return _[a1 contactStore];
}

id objc_msgSend_contactType(void *a1, const char *a2, ...)
{
  return _[a1 contactType];
}

id objc_msgSend_contactUsingContactStore_withKeysToFetch_(void *a1, const char *a2, ...)
{
  return [a1 contactUsingContactStore:withKeysToFetch:];
}

id objc_msgSend_contactViewControllerForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 contactViewControllerForRecentCall];
}

id objc_msgSend_contactViewControllerForRecentCall_contact_(void *a1, const char *a2, ...)
{
  return [a1 contactViewControllerForRecentCall:contact];
}

id objc_msgSend_contactViewControllerForRecentCall_contact_recentsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactViewControllerForRecentCall:contact:recentsController:");
}

id objc_msgSend_contactViewControllerForVoicemail_(void *a1, const char *a2, ...)
{
  return [a1 contactViewControllerForVoicemail:];
}

id objc_msgSend_contactWithUserActivityUserInfo_keysToFetch_(void *a1, const char *a2, ...)
{
  return [a1 contactWithUserActivityUserInfo:keysToFetch:];
}

id objc_msgSend_contacts(void *a1, const char *a2, ...)
{
  return _[a1 contacts];
}

id objc_msgSend_contactsByHandleForRecentCall_keyDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 contactsByHandleForRecentCall:keyDescriptors:];
}

id objc_msgSend_contactsControllerDelegate(void *a1, const char *a2, ...)
{
  return _[a1 contactsControllerDelegate];
}

id objc_msgSend_contactsControllerDidCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactsControllerDidCancel:");
}

id objc_msgSend_contactsControllerShouldContinueAfterSelectingContact_(void *a1, const char *a2, ...)
{
  return [a1 contactsControllerShouldContinueAfterSelectingContact:];
}

id objc_msgSend_contactsDataProvider(void *a1, const char *a2, ...)
{
  return _[a1 contactsDataProvider];
}

id objc_msgSend_contactsForHandles_keyDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 contactsForHandles:keyDescriptors:];
}

id objc_msgSend_contactsForHandles_keyDescriptors_alwaysUnifyLabeledValues_(void *a1, const char *a2, ...)
{
  return [a1 contactsForHandles:keyDescriptors:alwaysUnifyLabeledValues:];
}

id objc_msgSend_contactsForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 contactsForRecentCall];
}

id objc_msgSend_contactsForRecentCallForAvatar_(void *a1, const char *a2, ...)
{
  return [a1 contactsForRecentCallForAvatar];
}

id objc_msgSend_contactsQueue(void *a1, const char *a2, ...)
{
  return _[a1 contactsQueue];
}

id objc_msgSend_contactsTabViewAppeared(void *a1, const char *a2, ...)
{
  return _[a1 contactsTabViewAppeared];
}

id objc_msgSend_contactsViewController(void *a1, const char *a2, ...)
{
  return _[a1 contactsViewController];
}

id objc_msgSend_containerSpecificLeftConstraint(void *a1, const char *a2, ...)
{
  return _[a1 containerSpecificLeftConstraint];
}

id objc_msgSend_containerSpecificRightConstraint(void *a1, const char *a2, ...)
{
  return _[a1 containerSpecificRightConstraint];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_containsRestrictedHandle_forBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 containsRestrictedHandle:forBundleIdentifier:];
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return [a1 containsString:];
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _[a1 content];
}

id objc_msgSend_contentInset(void *a1, const char *a2, ...)
{
  return _[a1 contentInset];
}

id objc_msgSend_contentLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 contentLayoutGuide];
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _[a1 contentOffset];
}

id objc_msgSend_contentScrollView(void *a1, const char *a2, ...)
{
  return _[a1 contentScrollView];
}

id objc_msgSend_contentUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 contentUnavailable];
}

id objc_msgSend_contentUnavailableView(void *a1, const char *a2, ...)
{
  return _[a1 contentUnavailableView];
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _[a1 contentView];
}

id objc_msgSend_contentViewAnimationsFadeInsteadOfMove(void *a1, const char *a2, ...)
{
  return _[a1 contentViewAnimationsFadeInsteadOfMove];
}

id objc_msgSend_contentViewCanRotate(void *a1, const char *a2, ...)
{
  return _[a1 contentViewCanRotate];
}

id objc_msgSend_contentViewOffscreenEdge(void *a1, const char *a2, ...)
{
  return _[a1 contentViewOffscreenEdge];
}

id objc_msgSend_contentViewSizeForFaceTime(void *a1, const char *a2, ...)
{
  return _[a1 contentViewSizeForFaceTime];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_context_getCarrierBundleValue_error_(void *a1, const char *a2, ...)
{
  return [a1 context:getCarrierBundleValue:error:];
}

id objc_msgSend_contextualActionWithStyle_title_handler_(void *a1, const char *a2, ...)
{
  return [a1 contextualActionWithStyle:title:handler:];
}

id objc_msgSend_continueHandoffEligibleConversation(void *a1, const char *a2, ...)
{
  return _[a1 continueHandoffEligibleConversation];
}

id objc_msgSend_continueTrackingWithTouch_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 continueTrackingWithTouch:withEvent:];
}

id objc_msgSend_continuousScrollingReachedIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 continuousScrollingReachedIndexPath];
}

id objc_msgSend_conversation(void *a1, const char *a2, ...)
{
  return _[a1 conversation];
}

id objc_msgSend_conversationForCallUID_(void *a1, const char *a2, ...)
{
  return [a1 conversationForCallUID:];
}

id objc_msgSend_conversationHandoffEnabled(void *a1, const char *a2, ...)
{
  return _[a1 conversationHandoffEnabled];
}

id objc_msgSend_conversationManager(void *a1, const char *a2, ...)
{
  return _[a1 conversationManager];
}

id objc_msgSend_conversationWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 conversationWithUUID:];
}

id objc_msgSend_convertPoint_toView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toView:");
}

id objc_msgSend_convertRect_toView_(void *a1, const char *a2, ...)
{
  return [a1 convertRect:toView:];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyCarrierBundleValue_keyHierarchy_bundleType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValue:keyHierarchy:bundleType:error:");
}

id objc_msgSend_copyCarrierBundleValueWithDefault_key_bundleType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValueWithDefault:key:bundleType:error:");
}

id objc_msgSend_cornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 cornerRadius];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countCallsWithPredicate_(void *a1, const char *a2, ...)
{
  return [a1 countCallsWithPredicate:];
}

id objc_msgSend_countLabel(void *a1, const char *a2, ...)
{
  return _[a1 countLabel];
}

id objc_msgSend_countOfExcludedHandles(void *a1, const char *a2, ...)
{
  return _[a1 countOfExcludedHandles];
}

id objc_msgSend_createConstraints(void *a1, const char *a2, ...)
{
  return _[a1 createConstraints];
}

id objc_msgSend_createConstraintsForAccessibleExpandedLayout(void *a1, const char *a2, ...)
{
  return _[a1 createConstraintsForAccessibleExpandedLayout];
}

id objc_msgSend_createConstraintsForAccessibleNonExpandedLayoutForEditing_(void *a1, const char *a2, ...)
{
  return [a1 createConstraintsForAccessibleNonExpandedLayoutForEditing:];
}

id objc_msgSend_createConstraintsForNonAccessibleExpandedLayout(void *a1, const char *a2, ...)
{
  return _[a1 createConstraintsForNonAccessibleExpandedLayout];
}

id objc_msgSend_createConstraintsForNonAccessibleNonExpandedLayoutForEditing_(void *a1, const char *a2, ...)
{
  return [a1 createConstraintsForNonAccessibleNonExpandedLayoutForEditing];
}

id objc_msgSend_createDeleteButtonX(void *a1, const char *a2, ...)
{
  return _[a1 createDeleteButtonX];
}

id objc_msgSend_createFixedConstraintsForAccessibleLayout(void *a1, const char *a2, ...)
{
  return _[a1 createFixedConstraintsForAccessibleLayout];
}

id objc_msgSend_createFixedConstraintsForNonAccessibleLayout(void *a1, const char *a2, ...)
{
  return _[a1 createFixedConstraintsForNonAccessibleLayout];
}

id objc_msgSend_createMenuForAddContactButton(void *a1, const char *a2, ...)
{
  return _[a1 createMenuForAddContactButton];
}

id objc_msgSend_createRingImageWithSize_strokeWidth_color_(void *a1, const char *a2, ...)
{
  return [a1 createRingImageWithSize:strokeWidth:color:];
}

id objc_msgSend_createVisibleCells_(void *a1, const char *a2, ...)
{
  return [a1 createVisibleCells:];
}

id objc_msgSend_ctClient(void *a1, const char *a2, ...)
{
  return _[a1 ctClient];
}

id objc_msgSend_currentActiveFixedConstraints(void *a1, const char *a2, ...)
{
  return _[a1 currentActiveFixedConstraints];
}

id objc_msgSend_currentAsset(void *a1, const char *a2, ...)
{
  return _[a1 currentAsset];
}

id objc_msgSend_currentAssetDurationWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 currentAssetDurationWithBlock:];
}

id objc_msgSend_currentAttributedTitle(void *a1, const char *a2, ...)
{
  return _[a1 currentAttributedTitle];
}

id objc_msgSend_currentAudioAndVideoCallCount(void *a1, const char *a2, ...)
{
  return _[a1 currentAudioAndVideoCallCount];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentCallCount(void *a1, const char *a2, ...)
{
  return _[a1 currentCallCount];
}

id objc_msgSend_currentCarPlayExternalDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentCarPlayExternalDevice];
}

id objc_msgSend_currentCycleStringIndex(void *a1, const char *a2, ...)
{
  return _[a1 currentCycleStringIndex];
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentDevice];
}

id objc_msgSend_currentDeviceRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 currentDeviceRouteGlyphForDisplayStyle:];
}

id objc_msgSend_currentExpandedVoicemailMessageCell(void *a1, const char *a2, ...)
{
  return _[a1 currentExpandedVoicemailMessageCell];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentIDStatusForDestination_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 currentIDStatusForDestination:service:listenerID:queue:completionBlock:];
}

id objc_msgSend_currentItem(void *a1, const char *a2, ...)
{
  return _[a1 currentItem];
}

id objc_msgSend_currentLayout(void *a1, const char *a2, ...)
{
  return _[a1 currentLayout];
}

id objc_msgSend_currentLeftView(void *a1, const char *a2, ...)
{
  return _[a1 currentLeftView];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentMode(void *a1, const char *a2, ...)
{
  return _[a1 currentMode];
}

id objc_msgSend_currentNotificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 currentNotificationCenter];
}

id objc_msgSend_currentRequiredConstraints(void *a1, const char *a2, ...)
{
  return _[a1 currentRequiredConstraints];
}

id objc_msgSend_currentRequiredConstraintsKey(void *a1, const char *a2, ...)
{
  return _[a1 currentRequiredConstraintsKey];
}

id objc_msgSend_currentRightView(void *a1, const char *a2, ...)
{
  return _[a1 currentRightView];
}

id objc_msgSend_currentRoute(void *a1, const char *a2, ...)
{
  return _[a1 currentRoute];
}

id objc_msgSend_currentStyle(void *a1, const char *a2, ...)
{
  return _[a1 currentStyle];
}

id objc_msgSend_currentTabViewType(void *a1, const char *a2, ...)
{
  return _[a1 currentTabViewType];
}

id objc_msgSend_currentThumbImage(void *a1, const char *a2, ...)
{
  return _[a1 currentThumbImage];
}

id objc_msgSend_currentTime(void *a1, const char *a2, ...)
{
  return _[a1 currentTime];
}

id objc_msgSend_currentTitle(void *a1, const char *a2, ...)
{
  return _[a1 currentTitle];
}

id objc_msgSend_currentVideoCall(void *a1, const char *a2, ...)
{
  return _[a1 currentVideoCall];
}

id objc_msgSend_currentViewModel(void *a1, const char *a2, ...)
{
  return _[a1 currentViewModel];
}

id objc_msgSend_currentlyFocusedButton(void *a1, const char *a2, ...)
{
  return _[a1 currentlyFocusedButton];
}

id objc_msgSend_customGreetingSupported(void *a1, const char *a2, ...)
{
  return _[a1 customGreetingSupported];
}

id objc_msgSend_customInfoButtonAction(void *a1, const char *a2, ...)
{
  return _[a1 customInfoButtonAction];
}

id objc_msgSend_cycleStrings(void *a1, const char *a2, ...)
{
  return _[a1 cycleStrings];
}

id objc_msgSend_cycleTimer(void *a1, const char *a2, ...)
{
  return _[a1 cycleTimer];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _[a1 dataSource];
}

id objc_msgSend_dataSourceNeedsReload(void *a1, const char *a2, ...)
{
  return _[a1 dataSourceNeedsReload];
}

id objc_msgSend_dataSourcePrefetchingOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 dataSourcePrefetchingOperationQueue];
}

id objc_msgSend_dataURL(void *a1, const char *a2, ...)
{
  return _[a1 dataURL];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return [a1 dateByAddingComponents:toDate:options:];
}

id objc_msgSend_dateFormatter(void *a1, const char *a2, ...)
{
  return _[a1 dateFormatter];
}

id objc_msgSend_dateLabel(void *a1, const char *a2, ...)
{
  return _[a1 dateLabel];
}

id objc_msgSend_dateLabelFirstBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 dateLabelFirstBaselineAnchorLayoutConstraint];
}

id objc_msgSend_dateLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 dateLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_dateLabelTrailingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 dateLabelTrailingLayoutConstraintConstant];
}

id objc_msgSend_deactivateAudioServices(void *a1, const char *a2, ...)
{
  return _[a1 deactivateAudioServices];
}

id objc_msgSend_deactivateAudioSession(void *a1, const char *a2, ...)
{
  return _[a1 deactivateAudioSession];
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return [a1 deactivateConstraints:];
}

id objc_msgSend_deactivateVoicemailAudioSession(void *a1, const char *a2, ...)
{
  return _[a1 deactivateVoicemailAudioSession];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClass:forKey:];
}

id objc_msgSend_defaultAction(void *a1, const char *a2, ...)
{
  return _[a1 defaultAction];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultConfiguration];
}

id objc_msgSend_defaultDeviceWithMediaType_(void *a1, const char *a2, ...)
{
  return [a1 defaultDeviceWithMediaType:];
}

id objc_msgSend_defaultFont(void *a1, const char *a2, ...)
{
  return _[a1 defaultFont];
}

id objc_msgSend_defaultHeight(void *a1, const char *a2, ...)
{
  return _[a1 defaultHeight];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultPNGName(void *a1, const char *a2, ...)
{
  return _[a1 defaultPNGName];
}

id objc_msgSend_defaultRowHeight(void *a1, const char *a2, ...)
{
  return _[a1 defaultRowHeight];
}

id objc_msgSend_defaultSettings(void *a1, const char *a2, ...)
{
  return _[a1 defaultSettings];
}

id objc_msgSend_defaultTabViewType(void *a1, const char *a2, ...)
{
  return _[a1 defaultTabViewType];
}

id objc_msgSend_defaultWidth(void *a1, const char *a2, ...)
{
  return _[a1 defaultWidth];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegateToQueue(void *a1, const char *a2, ...)
{
  return _[a1 delegateToQueue];
}

id objc_msgSend_deleteAllRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 deleteAllRecentCalls];
}

id objc_msgSend_deleteBackward(void *a1, const char *a2, ...)
{
  return _[a1 deleteBackward];
}

id objc_msgSend_deleteButton(void *a1, const char *a2, ...)
{
  return _[a1 deleteButton];
}

id objc_msgSend_deleteButtonImageName(void *a1, const char *a2, ...)
{
  return _[a1 deleteButtonImageName];
}

id objc_msgSend_deleteButtonXImageView(void *a1, const char *a2, ...)
{
  return _[a1 deleteButtonXImageView];
}

id objc_msgSend_deleteCharacter(void *a1, const char *a2, ...)
{
  return _[a1 deleteCharacter];
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return [a1 deleteCharactersInRange:];
}

id objc_msgSend_deleteMessages_(void *a1, const char *a2, ...)
{
  return [a1 deleteMessages:];
}

id objc_msgSend_deleteRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 deleteRecentCalls];
}

id objc_msgSend_deleteRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_deleteSections_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSections:withRowAnimation:");
}

id objc_msgSend_deleteVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 deleteVoicemails:];
}

id objc_msgSend_dequeueReusableCellWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 dequeueReusableCellWithIdentifier:];
}

id objc_msgSend_dequeueReusableCellWithIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 dequeueReusableCellWithIdentifier:forIndexPath:];
}

id objc_msgSend_descriptorForRequiredKeys(void *a1, const char *a2, ...)
{
  return _[a1 descriptorForRequiredKeys];
}

id objc_msgSend_descriptorForRequiredKeysForStyle_(void *a1, const char *a2, ...)
{
  return [a1 descriptorForRequiredKeysForStyle:];
}

id objc_msgSend_deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return [a1 deselectRowAtIndexPath:animated:];
}

id objc_msgSend_detachCarPlay(void *a1, const char *a2, ...)
{
  return _[a1 detachCarPlay];
}

id objc_msgSend_detailIndexPath(void *a1, const char *a2, ...)
{
  return _[a1 detailIndexPath];
}

id objc_msgSend_detailLabel(void *a1, const char *a2, ...)
{
  return _[a1 detailLabel];
}

id objc_msgSend_detailScrubController(void *a1, const char *a2, ...)
{
  return _[a1 detailScrubController];
}

id objc_msgSend_detailSlider_didChangeElapsedTime_(void *a1, const char *a2, ...)
{
  return [a1 detailSlider:didChangeElapsedTime:];
}

id objc_msgSend_detailSliderTrackingDidBegin_(void *a1, const char *a2, ...)
{
  return [a1 detailSliderTrackingDidBegin:];
}

id objc_msgSend_detailSliderTrackingDidCancel_(void *a1, const char *a2, ...)
{
  return [a1 detailSliderTrackingDidCancel:];
}

id objc_msgSend_detailSliderTrackingDidEnd_(void *a1, const char *a2, ...)
{
  return [a1 detailSliderTrackingDidEnd:];
}

id objc_msgSend_detailStringForVoicemail_(void *a1, const char *a2, ...)
{
  return [a1 detailStringForVoicemail:];
}

id objc_msgSend_detailsView(void *a1, const char *a2, ...)
{
  return _[a1 detailsView];
}

id objc_msgSend_detailsViewController(void *a1, const char *a2, ...)
{
  return _[a1 detailsViewController];
}

id objc_msgSend_deviceInputWithDevice_error_(void *a1, const char *a2, ...)
{
  return [a1 deviceInputWithDevice:error:];
}

id objc_msgSend_deviceModel(void *a1, const char *a2, ...)
{
  return _[a1 deviceModel];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_dialLastDialedNumberByDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 dialLastDialedNumberByDoubleTap];
}

id objc_msgSend_dialRequestButton(void *a1, const char *a2, ...)
{
  return _[a1 dialRequestButton];
}

id objc_msgSend_dialRequestForCallProvider_handle_(void *a1, const char *a2, ...)
{
  return [a1 dialRequestForCallProvider:handle:];
}

id objc_msgSend_dialRequestForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 dialRequestForRecentCall:];
}

id objc_msgSend_dialRequestForUserActivity_callProviderManager_(void *a1, const char *a2, ...)
{
  return [a1 dialRequestForUserActivity:callProviderManager:];
}

id objc_msgSend_dialType(void *a1, const char *a2, ...)
{
  return _[a1 dialType];
}

id objc_msgSend_dialVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 dialVoicemail];
}

id objc_msgSend_dialVoicemailWithAccountID_(void *a1, const char *a2, ...)
{
  return [a1 dialVoicemailWithAccountID:];
}

id objc_msgSend_dialWithRequest_(void *a1, const char *a2, ...)
{
  return [a1 dialWithRequest:];
}

id objc_msgSend_dialerController(void *a1, const char *a2, ...)
{
  return _[a1 dialerController];
}

id objc_msgSend_dialerField_stringWasPasted_(void *a1, const char *a2, ...)
{
  return [a1 dialerField:stringWasPasted:];
}

id objc_msgSend_dialerIsNumericOnly(void *a1, const char *a2, ...)
{
  return _[a1 dialerIsNumericOnly];
}

id objc_msgSend_dialerLCDFieldTextDidChange_(void *a1, const char *a2, ...)
{
  return [a1 dialerLCDFieldTextDidChange:];
}

id objc_msgSend_dialerLCDFontSize(void *a1, const char *a2, ...)
{
  return _[a1 dialerLCDFontSize];
}

id objc_msgSend_dialerLCDLabelFontSize(void *a1, const char *a2, ...)
{
  return _[a1 dialerLCDLabelFontSize];
}

id objc_msgSend_dialerNumberPadFullCharacters(void *a1, const char *a2, ...)
{
  return _[a1 dialerNumberPadFullCharacters];
}

id objc_msgSend_dialerNumberPadNumericCharacters(void *a1, const char *a2, ...)
{
  return _[a1 dialerNumberPadNumericCharacters];
}

id objc_msgSend_dialerType(void *a1, const char *a2, ...)
{
  return _[a1 dialerType];
}

id objc_msgSend_dialerView(void *a1, const char *a2, ...)
{
  return _[a1 dialerView];
}

id objc_msgSend_dialerView_stringWasPasted_(void *a1, const char *a2, ...)
{
  return [a1 dialerView:stringWasPasted:];
}

id objc_msgSend_dialerViewTextDidChange_(void *a1, const char *a2, ...)
{
  return [a1 dialerViewTextDidChange:];
}

id objc_msgSend_diameter(void *a1, const char *a2, ...)
{
  return _[a1 diameter];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithDictionary:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_didEnd(void *a1, const char *a2, ...)
{
  return _[a1 didEnd];
}

id objc_msgSend_didEnterSuspended(void *a1, const char *a2, ...)
{
  return _[a1 didEnterSuspended];
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return [a1 didMoveToParentViewController:];
}

id objc_msgSend_didSelectCustomizedGreeting(void *a1, const char *a2, ...)
{
  return _[a1 didSelectCustomizedGreeting];
}

id objc_msgSend_didSelectDefaultGreeting(void *a1, const char *a2, ...)
{
  return _[a1 didSelectDefaultGreeting];
}

id objc_msgSend_didStart(void *a1, const char *a2, ...)
{
  return _[a1 didStart];
}

id objc_msgSend_digitsEntered(void *a1, const char *a2, ...)
{
  return _[a1 digitsEntered];
}

id objc_msgSend_dimmed(void *a1, const char *a2, ...)
{
  return _[a1 dimmed];
}

id objc_msgSend_dimmedColor(void *a1, const char *a2, ...)
{
  return _[a1 dimmedColor];
}

id objc_msgSend_directionalLayoutMargins(void *a1, const char *a2, ...)
{
  return _[a1 directionalLayoutMargins];
}

id objc_msgSend_disableActions(void *a1, const char *a2, ...)
{
  return _[a1 disableActions];
}

id objc_msgSend_disableAnimation(void *a1, const char *a2, ...)
{
  return _[a1 disableAnimation];
}

id objc_msgSend_disabledTextColor(void *a1, const char *a2, ...)
{
  return _[a1 disabledTextColor];
}

id objc_msgSend_disconnectCurrentCallAndActivateHeld(void *a1, const char *a2, ...)
{
  return _[a1 disconnectCurrentCallAndActivateHeld];
}

id objc_msgSend_disconnectedReason(void *a1, const char *a2, ...)
{
  return _[a1 disconnectedReason];
}

id objc_msgSend_dismissPopover(void *a1, const char *a2, ...)
{
  return _[a1 dismissPopover];
}

id objc_msgSend_dismissUnknownCallersViewController_(void *a1, const char *a2, ...)
{
  return [a1 dismissUnknownCallersViewController:];
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return [a1 dismissViewControllerAnimated:completion:];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_displayNameUsingContactStore_(void *a1, const char *a2, ...)
{
  return [a1 displayNameUsingContactStore:];
}

id objc_msgSend_displayUIAnimated_(void *a1, const char *a2, ...)
{
  return [a1 displayUIAnimated:];
}

id objc_msgSend_displayedCallFromCalls_(void *a1, const char *a2, ...)
{
  return [a1 displayedCallFromCalls:];
}

id objc_msgSend_displayedCalls(void *a1, const char *a2, ...)
{
  return _[a1 displayedCalls];
}

id objc_msgSend_displayedErrorTitle_message_(void *a1, const char *a2, ...)
{
  return [a1 displayedErrorTitle:message:];
}

id objc_msgSend_displayedLabel(void *a1, const char *a2, ...)
{
  return _[a1 displayedLabel];
}

id objc_msgSend_displayedName(void *a1, const char *a2, ...)
{
  return _[a1 displayedName];
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return [a1 doesNotRecognizeSelector:];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_donateEventCalledNonContact(void *a1, const char *a2, ...)
{
  return _[a1 donateEventCalledNonContact];
}

id objc_msgSend_donateEventCalledNonFavContact(void *a1, const char *a2, ...)
{
  return _[a1 donateEventCalledNonFavContact];
}

id objc_msgSend_donateEventKnownCallersDone(void *a1, const char *a2, ...)
{
  return _[a1 donateEventKnownCallersDone];
}

id objc_msgSend_donateEventSavedNumber(void *a1, const char *a2, ...)
{
  return _[a1 donateEventSavedNumber];
}

id objc_msgSend_donateEventSearchedCallHistory(void *a1, const char *a2, ...)
{
  return _[a1 donateEventSearchedCallHistory];
}

id objc_msgSend_donateEventSpeakerUsed(void *a1, const char *a2, ...)
{
  return _[a1 donateEventSpeakerUsed];
}

id objc_msgSend_donateTipsEventSignalsForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 donateTipsEventSignalsForRecentCall];
}

id objc_msgSend_donateTipsEventSignalsForRecentCall_completion_(void *a1, const char *a2, ...)
{
  return [a1 donateTipsEventSignalsForRecentCall:completion:];
}

id objc_msgSend_donated(void *a1, const char *a2, ...)
{
  return _[a1 donated];
}

id objc_msgSend_doneButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 doneButtonItem];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_drawInRect_(void *a1, const char *a2, ...)
{
  return [a1 drawInRect:];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_durationAndDataLabel(void *a1, const char *a2, ...)
{
  return _[a1 durationAndDataLabel];
}

id objc_msgSend_durationAndDataText(void *a1, const char *a2, ...)
{
  return _[a1 durationAndDataText];
}

id objc_msgSend_dynamicBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicBackgroundColor];
}

id objc_msgSend_dynamicCarFocusedColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarFocusedColor];
}

id objc_msgSend_dynamicCarFocusedLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarFocusedLabelColor];
}

id objc_msgSend_dynamicCarFocusedPrimaryLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarFocusedPrimaryLabelColor];
}

id objc_msgSend_dynamicCarFocusedSecondaryLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarFocusedSecondaryLabelColor];
}

id objc_msgSend_dynamicCarPrimaryColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarPrimaryColor];
}

id objc_msgSend_dynamicCarQuaternaryColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarQuaternaryColor];
}

id objc_msgSend_dynamicCarSecondaryColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarSecondaryColor];
}

id objc_msgSend_dynamicCarTertiaryColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicCarTertiaryColor];
}

id objc_msgSend_dynamicLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicLabelColor];
}

id objc_msgSend_dynamicSecondaryLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicSecondaryLabelColor];
}

id objc_msgSend_dynamicTertiaryLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 dynamicTertiaryLabelColor];
}

id objc_msgSend_editButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 editButtonItem];
}

id objc_msgSend_effectForBlurEffect_style_(void *a1, const char *a2, ...)
{
  return [a1 effectForBlurEffect:style:];
}

id objc_msgSend_effectView(void *a1, const char *a2, ...)
{
  return _[a1 effectView];
}

id objc_msgSend_effectWithBlurRadius_(void *a1, const char *a2, ...)
{
  return [a1 effectWithBlurRadius:];
}

id objc_msgSend_effectWithStyle_(void *a1, const char *a2, ...)
{
  return [a1 effectWithStyle:];
}

id objc_msgSend_effectiveBaselineOffsetFromBottom(void *a1, const char *a2, ...)
{
  return _[a1 effectiveBaselineOffsetFromBottom];
}

id objc_msgSend_effectiveBaselineOffsetFromContentBottom(void *a1, const char *a2, ...)
{
  return _[a1 effectiveBaselineOffsetFromContentBottom];
}

id objc_msgSend_effectiveFirstBaselineOffsetFromContentTop(void *a1, const char *a2, ...)
{
  return _[a1 effectiveFirstBaselineOffsetFromContentTop];
}

id objc_msgSend_effectiveFirstBaselineOffsetFromTop(void *a1, const char *a2, ...)
{
  return _[a1 effectiveFirstBaselineOffsetFromTop];
}

id objc_msgSend_elapsedLabel(void *a1, const char *a2, ...)
{
  return _[a1 elapsedLabel];
}

id objc_msgSend_elapsedTime(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTime];
}

id objc_msgSend_elapsedTimeLabel(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTimeLabel];
}

id objc_msgSend_elapsedTimeLabelBottomAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTimeLabelBottomAnchorLayoutConstraint];
}

id objc_msgSend_elapsedTimeLabelFirstBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTimeLabelFirstBaselineAnchorLayoutConstraint];
}

id objc_msgSend_elapsedTimeLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTimeLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_elapsedTimeLabelLeadingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTimeLabelLeadingAnchorLayoutConstraint];
}

id objc_msgSend_elapsedTimeLabelTrailingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 elapsedTimeLabelTrailingAnchorLayoutConstraint];
}

id objc_msgSend_elementWithViewProvider_(void *a1, const char *a2, ...)
{
  return [a1 elementWithViewProvider:];
}

id objc_msgSend_elements(void *a1, const char *a2, ...)
{
  return _[a1 elements];
}

id objc_msgSend_eligibleLagunaDevices_(void *a1, const char *a2, ...)
{
  return [a1 eligibleLagunaDevices:];
}

id objc_msgSend_emailAddresses(void *a1, const char *a2, ...)
{
  return _[a1 emailAddresses];
}

id objc_msgSend_emergencyItemLabelText_(void *a1, const char *a2, ...)
{
  return [a1 emergencyItemLabelText];
}

id objc_msgSend_emergencyItemsText(void *a1, const char *a2, ...)
{
  return _[a1 emergencyItemsText];
}

id objc_msgSend_enableAnimation(void *a1, const char *a2, ...)
{
  return _[a1 enableAnimation];
}

id objc_msgSend_enableCallButton_(void *a1, const char *a2, ...)
{
  return [a1 enableCallButton:];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:forKey:];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_encodedDialerString(void *a1, const char *a2, ...)
{
  return _[a1 encodedDialerString];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endButton(void *a1, const char *a2, ...)
{
  return _[a1 endButton];
}

id objc_msgSend_endEditing(void *a1, const char *a2, ...)
{
  return _[a1 endEditing];
}

id objc_msgSend_endEditing_(void *a1, const char *a2, ...)
{
  return [a1 endEditing:];
}

id objc_msgSend_endInterruption(void *a1, const char *a2, ...)
{
  return _[a1 endInterruption];
}

id objc_msgSend_endOfDocument(void *a1, const char *a2, ...)
{
  return _[a1 endOfDocument];
}

id objc_msgSend_endTrackingWithTouch_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 endTrackingWithTouch:withEvent:];
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _[a1 endUpdates];
}

id objc_msgSend_ensureBaseViewControllerIsShowing(void *a1, const char *a2, ...)
{
  return _[a1 ensureBaseViewControllerIsShowing];
}

id objc_msgSend_enumerateAttribute_inRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateRangesUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateRangesUsingBlock:];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorAlertMessage(void *a1, const char *a2, ...)
{
  return _[a1 errorAlertMessage];
}

id objc_msgSend_errorAlertTitle(void *a1, const char *a2, ...)
{
  return _[a1 errorAlertTitle];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_escapedPatternForString_(void *a1, const char *a2, ...)
{
  return [a1 escapedPatternForString:];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 exceptionWithName:reason:userInfo:];
}

id objc_msgSend_executeFetchRequest_(void *a1, const char *a2, ...)
{
  return [a1 executeFetchRequest:];
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 executeFetchRequest:error:];
}

id objc_msgSend_existingGreeting(void *a1, const char *a2, ...)
{
  return _[a1 existingGreeting];
}

id objc_msgSend_expandedConstraints(void *a1, const char *a2, ...)
{
  return _[a1 expandedConstraints];
}

id objc_msgSend_exportAsynchronouslyWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 exportAsynchronouslyWithCompletionHandler:];
}

id objc_msgSend_exportVoicemailDataForVoicemail_(void *a1, const char *a2, ...)
{
  return [a1 exportVoicemailDataForVoicemail:];
}

id objc_msgSend_extensionsWithMatchingAttributes_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionsWithMatchingAttributes:completion:");
}

id objc_msgSend_externalSystemGreenColor(void *a1, const char *a2, ...)
{
  return _[a1 externalSystemGreenColor];
}

id objc_msgSend_externalSystemRedColor(void *a1, const char *a2, ...)
{
  return _[a1 externalSystemRedColor];
}

id objc_msgSend_externalSystemTealColor(void *a1, const char *a2, ...)
{
  return _[a1 externalSystemTealColor];
}

id objc_msgSend_faceTimeAudioIsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 faceTimeAudioIsAvailable];
}

id objc_msgSend_faceTimeProvider(void *a1, const char *a2, ...)
{
  return _[a1 faceTimeProvider];
}

id objc_msgSend_faceTimeShowInCallUIURL(void *a1, const char *a2, ...)
{
  return _[a1 faceTimeShowInCallUIURL];
}

id objc_msgSend_faceTimeVideoIsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 faceTimeVideoIsAvailable];
}

id objc_msgSend_failTestOnMainThread_reason_(void *a1, const char *a2, ...)
{
  return [a1 failTestOnMainThread:reason:];
}

id objc_msgSend_failedTest_withFailure_(void *a1, const char *a2, ...)
{
  return [a1 failedTest:withFailure:];
}

id objc_msgSend_fakeNavigationBar(void *a1, const char *a2, ...)
{
  return _[a1 fakeNavigationBar];
}

id objc_msgSend_fakeNavigationBarHeight(void *a1, const char *a2, ...)
{
  return _[a1 fakeNavigationBarHeight];
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return _[a1 familyName];
}

id objc_msgSend_favoritesAudioGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 favoritesAudioGlyphImage];
}

id objc_msgSend_favoritesCallTapTargetsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 favoritesCallTapTargetsEnabled];
}

id objc_msgSend_favoritesController(void *a1, const char *a2, ...)
{
  return _[a1 favoritesController];
}

id objc_msgSend_favoritesEntries(void *a1, const char *a2, ...)
{
  return _[a1 favoritesEntries];
}

id objc_msgSend_favoritesEntryAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 favoritesEntryAtIndex:];
}

id objc_msgSend_favoritesEntryPicker(void *a1, const char *a2, ...)
{
  return _[a1 favoritesEntryPicker];
}

id objc_msgSend_favoritesEntryPickerContactForContact_contactStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoritesEntryPickerContactForContact:contactStore:");
}

id objc_msgSend_favoritesMailGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 favoritesMailGlyphImage];
}

id objc_msgSend_favoritesMessageGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 favoritesMessageGlyphImage];
}

id objc_msgSend_favoritesNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 favoritesNavigationController];
}

id objc_msgSend_favoritesTTYDirectGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 favoritesTTYDirectGlyphImage];
}

id objc_msgSend_favoritesTTYRelayGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 favoritesTTYRelayGlyphImage];
}

id objc_msgSend_favoritesVideoGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 favoritesVideoGlyphImage];
}

id objc_msgSend_favoritesViewController(void *a1, const char *a2, ...)
{
  return _[a1 favoritesViewController];
}

id objc_msgSend_fbsOrientationObserver(void *a1, const char *a2, ...)
{
  return _[a1 fbsOrientationObserver];
}

id objc_msgSend_featureFlags(void *a1, const char *a2, ...)
{
  return _[a1 featureFlags];
}

id objc_msgSend_feedbackTextView(void *a1, const char *a2, ...)
{
  return _[a1 feedbackTextView];
}

id objc_msgSend_fetchAudioControlsGlyphWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchAudioControlsGlyphWithCompletion:];
}

id objc_msgSend_fetchCallProviderForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 fetchCallProviderForRecentCall:];
}

id objc_msgSend_fetchCarrierBundleValue_context_(void *a1, const char *a2, ...)
{
  return [a1 fetchCarrierBundleValue:context:];
}

id objc_msgSend_fetchCellularRadioEnabled(void *a1, const char *a2, ...)
{
  return _[a1 fetchCellularRadioEnabled];
}

id objc_msgSend_fetchContactForContactCardDisplay_(void *a1, const char *a2, ...)
{
  return [a1 fetchContactForContactCardDisplay];
}

id objc_msgSend_fetchContactFormatter(void *a1, const char *a2, ...)
{
  return _[a1 fetchContactFormatter];
}

id objc_msgSend_fetchContactsForHandles_(void *a1, const char *a2, ...)
{
  return [a1 fetchContactsForHandles:];
}

id objc_msgSend_fetchContactsForMessages_keyDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 fetchContactsForMessages:keyDescriptors:];
}

id objc_msgSend_fetchContactsForRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 fetchContactsForRecentCalls];
}

id objc_msgSend_fetchCurrentRouteWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchCurrentRouteWithCompletionHandler:];
}

id objc_msgSend_fetchGreeting(void *a1, const char *a2, ...)
{
  return _[a1 fetchGreeting];
}

id objc_msgSend_fetchIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 fetchIfNeeded];
}

id objc_msgSend_fetchImageForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 fetchImageForRecentCall:];
}

id objc_msgSend_fetchLegacyVoicemailsCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchLegacyVoicemailsCompletion:];
}

id objc_msgSend_fetchMenuActionsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchMenuActionsWithCompletionHandler:];
}

id objc_msgSend_fetchMessagesCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchMessagesCompletion:];
}

id objc_msgSend_fetchMessagesWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchMessagesWithCompletion:];
}

id objc_msgSend_fetchMetadataForMessages_(void *a1, const char *a2, ...)
{
  return [a1 fetchMetadataForMessages:];
}

id objc_msgSend_fetchMetadataForRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 fetchMetadataForRecentCalls];
}

id objc_msgSend_fetchMutableItemForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 fetchMutableItemForRecentCall];
}

id objc_msgSend_fetchMutableItemForRecentCall_numberOfOccurences_(void *a1, const char *a2, ...)
{
  return [a1 fetchMutableItemForRecentCall:numberOfOccurences:];
}

id objc_msgSend_fetchNumberFormatter(void *a1, const char *a2, ...)
{
  return _[a1 fetchNumberFormatter];
}

id objc_msgSend_fetchRTTConversationForCallUUID_(void *a1, const char *a2, ...)
{
  return [a1 fetchRTTConversationForCallUUID:];
}

id objc_msgSend_fetchRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 fetchRecentCalls];
}

id objc_msgSend_fetchRingerSwitchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 fetchRingerSwitchEnabled];
}

id objc_msgSend_fetchRoutesBackgroundCallCenter(void *a1, const char *a2, ...)
{
  return _[a1 fetchRoutesBackgroundCallCenter];
}

id objc_msgSend_fetchRoutesForAudioRoutingMenuController_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchRoutesForAudioRoutingMenuController:completionHandler:];
}

id objc_msgSend_fetchRoutesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchRoutesWithCompletionHandler:];
}

id objc_msgSend_fetchSubscriptionsInUse(void *a1, const char *a2, ...)
{
  return _[a1 fetchSubscriptionsInUse];
}

id objc_msgSend_fetchUnifiedContactForID_withDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 fetchUnifiedContactForID:withDescriptors:];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_fill(void *a1, const char *a2, ...)
{
  return _[a1 fill];
}

id objc_msgSend_fillColor(void *a1, const char *a2, ...)
{
  return _[a1 fillColor];
}

id objc_msgSend_filterType(void *a1, const char *a2, ...)
{
  return _[a1 filterType];
}

id objc_msgSend_filterWithType_(void *a1, const char *a2, ...)
{
  return [a1 filterWithType:];
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return [a1 filteredArrayUsingPredicate:];
}

id objc_msgSend_finishTestOnMainThread_(void *a1, const char *a2, ...)
{
  return [a1 finishTestOnMainThread:];
}

id objc_msgSend_finishedTest_(void *a1, const char *a2, ...)
{
  return [a1 finishedTest:];
}

id objc_msgSend_finishedTest_extraResults_(void *a1, const char *a2, ...)
{
  return [a1 finishedTest:extraResults:];
}

id objc_msgSend_finishedTest_waitForCommit_extraResults_(void *a1, const char *a2, ...)
{
  return [a1 finishedTest:waitForCommit:extraResults:];
}

id objc_msgSend_firstBaselineAnchor(void *a1, const char *a2, ...)
{
  return _[a1 firstBaselineAnchor];
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return _[a1 firstIndex];
}

id objc_msgSend_firstItem(void *a1, const char *a2, ...)
{
  return _[a1 firstItem];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstScrollViewInView_(void *a1, const char *a2, ...)
{
  return [a1 firstScrollViewInView:];
}

id objc_msgSend_fixedTableViewContentOffset(void *a1, const char *a2, ...)
{
  return _[a1 fixedTableViewContentOffset];
}

id objc_msgSend_flashScrollIndicators(void *a1, const char *a2, ...)
{
  return _[a1 flashScrollIndicators];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_folder(void *a1, const char *a2, ...)
{
  return _[a1 folder];
}

id objc_msgSend_folderName(void *a1, const char *a2, ...)
{
  return _[a1 folderName];
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _[a1 font];
}

id objc_msgSend_fontDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fontDescriptor];
}

id objc_msgSend_fontDescriptorByAddingAttributes_(void *a1, const char *a2, ...)
{
  return [a1 fontDescriptorByAddingAttributes:];
}

id objc_msgSend_fontName(void *a1, const char *a2, ...)
{
  return _[a1 fontName];
}

id objc_msgSend_fontSize(void *a1, const char *a2, ...)
{
  return _[a1 fontSize];
}

id objc_msgSend_fontWithDescriptor_size_(void *a1, const char *a2, ...)
{
  return [a1 fontWithDescriptor:];
}

id objc_msgSend_foregroundView(void *a1, const char *a2, ...)
{
  return _[a1 foregroundView];
}

id objc_msgSend_foregroundViewBottomAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 foregroundViewBottomAnchorLayoutConstraint];
}

id objc_msgSend_foregroundViewLeadingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 foregroundViewLeadingAnchorLayoutConstraint];
}

id objc_msgSend_foregroundViewTapGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 foregroundViewTapGestureRecognizer];
}

id objc_msgSend_foregroundViewTopAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 foregroundViewTopAnchorLayoutConstraint];
}

id objc_msgSend_foregroundViewTrailingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 foregroundViewTrailingAnchorLayoutConstraint];
}

id objc_msgSend_formUnionWithCharacterSet_(void *a1, const char *a2, ...)
{
  return [a1 formUnionWithCharacterSet:];
}

id objc_msgSend_formattedInitiatorValue(void *a1, const char *a2, ...)
{
  return _[a1 formattedInitiatorValue];
}

id objc_msgSend_formattedNameForHandle_countryCode_(void *a1, const char *a2, ...)
{
  return [a1 formattedNameForHandle:countryCode:];
}

id objc_msgSend_formattedStringValue(void *a1, const char *a2, ...)
{
  return _[a1 formattedStringValue];
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _[a1 frame];
}

id objc_msgSend_frameLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 frameLayoutGuide];
}

id objc_msgSend_frontmostAudioOrVideoCall(void *a1, const char *a2, ...)
{
  return _[a1 frontmostAudioOrVideoCall];
}

id objc_msgSend_frontmostCall(void *a1, const char *a2, ...)
{
  return _[a1 frontmostCall];
}

id objc_msgSend_fullDateLabel(void *a1, const char *a2, ...)
{
  return _[a1 fullDateLabel];
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _[a1 fullName];
}

id objc_msgSend_fullScreenVoicemailDetailsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 fullScreenVoicemailDetailsEnabled];
}

id objc_msgSend_functionWithName_(void *a1, const char *a2, ...)
{
  return [a1 functionWithName:];
}

id objc_msgSend_generalPasteboard(void *a1, const char *a2, ...)
{
  return _[a1 generalPasteboard];
}

id objc_msgSend_generateDetailsView(void *a1, const char *a2, ...)
{
  return _[a1 generateDetailsView];
}

id objc_msgSend_generateNumberLabelHorizontalConstraints(void *a1, const char *a2, ...)
{
  return _[a1 generateNumberLabelHorizontalConstraints];
}

id objc_msgSend_gestureRecognizers(void *a1, const char *a2, ...)
{
  return _[a1 gestureRecognizers];
}

id objc_msgSend_getActiveContexts_(void *a1, const char *a2, ...)
{
  return [a1 getActiveContexts:];
}

id objc_msgSend_getActiveContextsWithCallback_(void *a1, const char *a2, ...)
{
  return [a1 getActiveContextsWithCallback:];
}

id objc_msgSend_getBootSessionUUID(void *a1, const char *a2, ...)
{
  return _[a1 getBootSessionUUID];
}

id objc_msgSend_getCarrierNameOfCallForCall_(void *a1, const char *a2, ...)
{
  return [a1 getCarrierNameOfCallForCall:];
}

id objc_msgSend_getCarrierSpamReportAlertTitleWithCarrierName_(void *a1, const char *a2, ...)
{
  return [a1 getCarrierSpamReportAlertTitleWithCarrierName:];
}

id objc_msgSend_getGreetingPrompt(void *a1, const char *a2, ...)
{
  return _[a1 getGreetingPrompt];
}

id objc_msgSend_getHue_saturation_brightness_alpha_(void *a1, const char *a2, ...)
{
  return [a1 getHue:saturation:brightness:alpha:];
}

id objc_msgSend_getPickableRoutesForCategory_mode_completion_(void *a1, const char *a2, ...)
{
  return [a1 getPickableRoutesForCategory:mode:completion:];
}

id objc_msgSend_getSubscriptionInfo_(void *a1, const char *a2, ...)
{
  return [a1 getSubscriptionInfo:];
}

id objc_msgSend_getSubscriptionInfoWithError_(void *a1, const char *a2, ...)
{
  return [a1 getSubscriptionInfoWithError:];
}

id objc_msgSend_getVoicemailInfo_completion_(void *a1, const char *a2, ...)
{
  return [a1 getVoicemailInfo:completion:];
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _[a1 givenName];
}

id objc_msgSend_greetingDelegate(void *a1, const char *a2, ...)
{
  return _[a1 greetingDelegate];
}

id objc_msgSend_greetingExists(void *a1, const char *a2, ...)
{
  return _[a1 greetingExists];
}

id objc_msgSend_greetingModel(void *a1, const char *a2, ...)
{
  return _[a1 greetingModel];
}

id objc_msgSend_greetingRecorder(void *a1, const char *a2, ...)
{
  return _[a1 greetingRecorder];
}

id objc_msgSend_greetingState(void *a1, const char *a2, ...)
{
  return _[a1 greetingState];
}

id objc_msgSend_greetingTempFileLocation(void *a1, const char *a2, ...)
{
  return _[a1 greetingTempFileLocation];
}

id objc_msgSend_greetingViewControllerForAccount_(void *a1, const char *a2, ...)
{
  return [a1 greetingViewControllerForAccount:];
}

id objc_msgSend_gridView(void *a1, const char *a2, ...)
{
  return _[a1 gridView];
}

id objc_msgSend_groupConversations(void *a1, const char *a2, ...)
{
  return _[a1 groupConversations];
}

id objc_msgSend_groupName(void *a1, const char *a2, ...)
{
  return _[a1 groupName];
}

id objc_msgSend_groupTableViewBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 groupTableViewBackgroundColor];
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return _[a1 handle];
}

id objc_msgSend_handleAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 handleAtIndex:];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [a1 handleFailureInFunction:file:lineNumber:description:];
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [a1 handleFailureInMethod:object:file:lineNumber:description:];
}

id objc_msgSend_handleForCHRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 handleForCHRecentCall:];
}

id objc_msgSend_handleKeyCommand_receivedCharacterBlock_receivedSpecialCharacterBlock_(void *a1, const char *a2, ...)
{
  return [a1 handleKeyCommand:receivedCharacterBlock:receivedSpecialCharacterBlock:];
}

id objc_msgSend_handleKeyboardEvent_(void *a1, const char *a2, ...)
{
  return [a1 handleKeyboardEvent:];
}

id objc_msgSend_handleShortcutItem_(void *a1, const char *a2, ...)
{
  return [a1 handleShortcutItem:];
}

id objc_msgSend_handleShowDetailsURLForUniqueID_(void *a1, const char *a2, ...)
{
  return [a1 handleShowDetailsURLForUniqueID:];
}

id objc_msgSend_handleShowDetailsURLForUniqueID_withContinuingSearchText_(void *a1, const char *a2, ...)
{
  return [a1 handleShowDetailsURLForUniqueID:withContinuingSearchText:];
}

id objc_msgSend_handleType(void *a1, const char *a2, ...)
{
  return _[a1 handleType];
}

id objc_msgSend_handleURL_(void *a1, const char *a2, ...)
{
  return [a1 handleURL:];
}

id objc_msgSend_handleUserActivityContinuation_(void *a1, const char *a2, ...)
{
  return [a1 handleUserActivityContinuation:];
}

id objc_msgSend_handleWithDestinationID_(void *a1, const char *a2, ...)
{
  return [a1 handleWithDestinationID:];
}

id objc_msgSend_handleWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleWithDictionaryRepresentation:");
}

id objc_msgSend_handlingKeypadPress(void *a1, const char *a2, ...)
{
  return _[a1 handlingKeypadPress];
}

id objc_msgSend_handlingStop(void *a1, const char *a2, ...)
{
  return _[a1 handlingStop];
}

id objc_msgSend_handsetDialerSize(void *a1, const char *a2, ...)
{
  return _[a1 handsetDialerSize];
}

id objc_msgSend_handsetDialerSpacing(void *a1, const char *a2, ...)
{
  return _[a1 handsetDialerSpacing];
}

id objc_msgSend_handsetRouteAvailableForUnformattedPickableRoutes_(void *a1, const char *a2, ...)
{
  return [a1 handsetRouteAvailableForUnformattedPickableRoutes];
}

id objc_msgSend_hardPauseButtonDidChangeVisibility_(void *a1, const char *a2, ...)
{
  return [a1 hardPauseButtonDidChangeVisibility:];
}

id objc_msgSend_hardPauseButtonDidSendHardPauseDigits_(void *a1, const char *a2, ...)
{
  return [a1 hardPauseButtonDidSendHardPauseDigits:];
}

id objc_msgSend_hasAcceptableConfidenceForDisplay(void *a1, const char *a2, ...)
{
  return _[a1 hasAcceptableConfidenceForDisplay];
}

id objc_msgSend_hasBeenPersisted(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenPersisted];
}

id objc_msgSend_hasContentToDisplay(void *a1, const char *a2, ...)
{
  return _[a1 hasContentToDisplay];
}

id objc_msgSend_hasCurrentAudioCalls(void *a1, const char *a2, ...)
{
  return _[a1 hasCurrentAudioCalls];
}

id objc_msgSend_hasEnhancedVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 hasEnhancedVoicemail];
}

id objc_msgSend_hasJoinedActivitySession(void *a1, const char *a2, ...)
{
  return _[a1 hasJoinedActivitySession];
}

id objc_msgSend_hasLegacyVoicemailInboxes(void *a1, const char *a2, ...)
{
  return _[a1 hasLegacyVoicemailInboxes];
}

id objc_msgSend_hasMarkedAsRead(void *a1, const char *a2, ...)
{
  return _[a1 hasMarkedAsRead];
}

id objc_msgSend_hasMultipleSenderIdentities(void *a1, const char *a2, ...)
{
  return _[a1 hasMultipleSenderIdentities];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return [a1 hasPrefix:];
}

id objc_msgSend_hasRecordedNewGreeting(void *a1, const char *a2, ...)
{
  return _[a1 hasRecordedNewGreeting];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return [a1 hasSuffix:];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_headerLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 headerLayoutGuide];
}

id objc_msgSend_headerView(void *a1, const char *a2, ...)
{
  return _[a1 headerView];
}

id objc_msgSend_headlineLabel(void *a1, const char *a2, ...)
{
  return _[a1 headlineLabel];
}

id objc_msgSend_headlineLabelFirstBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 headlineLabelFirstBaselineAnchorLayoutConstraint];
}

id objc_msgSend_headlineLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 headlineLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_headphonesRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 headphonesRouteGlyphForDisplayStyle:];
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _[a1 heightAnchor];
}

id objc_msgSend_hideAccessoryViews(void *a1, const char *a2, ...)
{
  return _[a1 hideAccessoryViews];
}

id objc_msgSend_hideBarWithTransition_(void *a1, const char *a2, ...)
{
  return [a1 hideBarWithTransition:];
}

id objc_msgSend_hideContactResultsButtons(void *a1, const char *a2, ...)
{
  return _[a1 hideContactResultsButtons];
}

id objc_msgSend_hideProgressView(void *a1, const char *a2, ...)
{
  return _[a1 hideProgressView];
}

id objc_msgSend_hideUnreadIndicator(void *a1, const char *a2, ...)
{
  return _[a1 hideUnreadIndicator];
}

id objc_msgSend_hideUnreadIndicatorMetadataViewLeadingConstraint(void *a1, const char *a2, ...)
{
  return _[a1 hideUnreadIndicatorMetadataViewLeadingConstraint];
}

id objc_msgSend_highlightKeyAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 highlightKeyAtIndex:];
}

id objc_msgSend_highlightPropertyWithKey_identifier_important_(void *a1, const char *a2, ...)
{
  return [a1 highlightPropertyWithKey:identifier:important:];
}

id objc_msgSend_highlightRowAtIndexPath_animated_scrollPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightRowAtIndexPath:animated:scrollPosition:");
}

id objc_msgSend_highlighted(void *a1, const char *a2, ...)
{
  return _[a1 highlighted];
}

id objc_msgSend_highlightedCircleViewAlpha(void *a1, const char *a2, ...)
{
  return _[a1 highlightedCircleViewAlpha];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_icon(void *a1, const char *a2, ...)
{
  return _[a1 icon];
}

id objc_msgSend_iconImageView(void *a1, const char *a2, ...)
{
  return _[a1 iconImageView];
}

id objc_msgSend_iconSizeRatio(void *a1, const char *a2, ...)
{
  return _[a1 iconSizeRatio];
}

id objc_msgSend_iconWithTemplateImageName_(void *a1, const char *a2, ...)
{
  return [a1 iconWithTemplateImageName:];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identityExtension(void *a1, const char *a2, ...)
{
  return _[a1 identityExtension];
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _[a1 image];
}

id objc_msgSend_imageCache(void *a1, const char *a2, ...)
{
  return _[a1 imageCache];
}

id objc_msgSend_imageColorForState_(void *a1, const char *a2, ...)
{
  return [a1 imageColorForState:];
}

id objc_msgSend_imageFlippedForRightToLeftLayoutDirection(void *a1, const char *a2, ...)
{
  return _[a1 imageFlippedForRightToLeftLayoutDirection];
}

id objc_msgSend_imageForAction_callState_(void *a1, const char *a2, ...)
{
  return [a1 imageForAction:callState:];
}

id objc_msgSend_imageForActionType_(void *a1, const char *a2, ...)
{
  return [a1 imageForActionType:];
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return [a1 imageNamed:];
}

id objc_msgSend_imageNamed_inBundle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return [a1 imageNamed:inBundle:compatibleWithTraitCollection:];
}

id objc_msgSend_imageOrientation(void *a1, const char *a2, ...)
{
  return _[a1 imageOrientation];
}

id objc_msgSend_imageRectForContentRect_(void *a1, const char *a2, ...)
{
  return [a1 imageRectForContentRect:];
}

id objc_msgSend_imageURL(void *a1, const char *a2, ...)
{
  return _[a1 imageURL];
}

id objc_msgSend_imageView(void *a1, const char *a2, ...)
{
  return _[a1 imageView];
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return [a1 imageWithActions:];
}

id objc_msgSend_imageWithCGImage_scale_orientation_(void *a1, const char *a2, ...)
{
  return [a1 imageWithCGImage:scale:orientation:];
}

id objc_msgSend_imageWithRenderingMode_(void *a1, const char *a2, ...)
{
  return [a1 imageWithRenderingMode:];
}

id objc_msgSend_importRecordingWithSourceAudioURL_name_date_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importRecordingWithSourceAudioURL:name:date:completionHandler:");
}

id objc_msgSend_inCallBottomBarAssetSize(void *a1, const char *a2, ...)
{
  return _[a1 inCallBottomBarAssetSize];
}

id objc_msgSend_inCallBottomBarMaxTitleSize(void *a1, const char *a2, ...)
{
  return _[a1 inCallBottomBarMaxTitleSize];
}

id objc_msgSend_inCallBottomBarSpacing(void *a1, const char *a2, ...)
{
  return _[a1 inCallBottomBarSpacing];
}

id objc_msgSend_inCallButtonType(void *a1, const char *a2, ...)
{
  return _[a1 inCallButtonType];
}

id objc_msgSend_inCallControlAlignment(void *a1, const char *a2, ...)
{
  return _[a1 inCallControlAlignment];
}

id objc_msgSend_inCallControlButtonVerticalSpacingRatio(void *a1, const char *a2, ...)
{
  return _[a1 inCallControlButtonVerticalSpacingRatio];
}

id objc_msgSend_inCallControlSpacing(void *a1, const char *a2, ...)
{
  return _[a1 inCallControlSpacing];
}

id objc_msgSend_inCallControls(void *a1, const char *a2, ...)
{
  return _[a1 inCallControls];
}

id objc_msgSend_inboxViewController(void *a1, const char *a2, ...)
{
  return _[a1 inboxViewController];
}

id objc_msgSend_incomingVideoCall(void *a1, const char *a2, ...)
{
  return _[a1 incomingVideoCall];
}

id objc_msgSend_increaseCallHistoryEnabled(void *a1, const char *a2, ...)
{
  return _[a1 increaseCallHistoryEnabled];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return [a1 indexOfObject:];
}

id objc_msgSend_indexOfObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return [a1 indexOfObjectIdenticalTo:];
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return [a1 indexOfObjectPassingTest:];
}

id objc_msgSend_indexPathForCell_(void *a1, const char *a2, ...)
{
  return [a1 indexPathForCell:];
}

id objc_msgSend_indexPathForItem_inSection_(void *a1, const char *a2, ...)
{
  return [a1 indexPathForItem:inSection:];
}

id objc_msgSend_indexPathForMessageID_(void *a1, const char *a2, ...)
{
  return [a1 indexPathForMessageID:];
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return [a1 indexPathForRow:inSection:];
}

id objc_msgSend_indexPathForRowAtPoint_(void *a1, const char *a2, ...)
{
  return [a1 indexPathForRowAtPoint:];
}

id objc_msgSend_indexPathForSelectedRow(void *a1, const char *a2, ...)
{
  return _[a1 indexPathForSelectedRow];
}

id objc_msgSend_indexPathsForMessages_(void *a1, const char *a2, ...)
{
  return [a1 indexPathsForMessages:];
}

id objc_msgSend_indexPathsForMissedCalls(void *a1, const char *a2, ...)
{
  return _[a1 indexPathsForMissedCalls];
}

id objc_msgSend_indexPathsForNormalCalls(void *a1, const char *a2, ...)
{
  return _[a1 indexPathsForNormalCalls];
}

id objc_msgSend_indexPathsForSelectedRows(void *a1, const char *a2, ...)
{
  return _[a1 indexPathsForSelectedRows];
}

id objc_msgSend_indexPathsForVisibleRows(void *a1, const char *a2, ...)
{
  return _[a1 indexPathsForVisibleRows];
}

id objc_msgSend_indexPathsToInsertIntoCachedRecentCalls_fromBackingRecentCalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathsToInsertIntoCachedRecentCalls:fromBackingRecentCalls:");
}

id objc_msgSend_indexSetToHighlightDigitsInText_(void *a1, const char *a2, ...)
{
  return [a1 indexSetToHighlightDigitsInText:];
}

id objc_msgSend_indexSetWithIndex_(void *a1, const char *a2, ...)
{
  return [a1 indexSetWithIndex:];
}

id objc_msgSend_indicatorView(void *a1, const char *a2, ...)
{
  return _[a1 indicatorView];
}

id objc_msgSend_indicatorViewTopLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 indicatorViewTopLayoutConstraint];
}

id objc_msgSend_indicatorViewTopLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 indicatorViewTopLayoutConstraintConstant];
}

id objc_msgSend_infoButton(void *a1, const char *a2, ...)
{
  return _[a1 infoButton];
}

id objc_msgSend_initFileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 initFileURLWithPath:];
}

id objc_msgSend_initForCharacter_style_(void *a1, const char *a2, ...)
{
  return [a1 initForCharacter:style:];
}

id objc_msgSend_initForNewPINWithMinLength_maxLength_confirmPIN_(void *a1, const char *a2, ...)
{
  return [a1 initForNewPINWithMinLength:maxLength:confirmPIN:];
}

id objc_msgSend_initUnactivatedVCWithRequest_sender_isoCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUnactivatedVCWithRequest:sender:isoCountryCode:");
}

id objc_msgSend_initWithAccessibleLayout_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessibleLayout:];
}

id objc_msgSend_initWithAccount_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccount:];
}

id objc_msgSend_initWithAccountID_label_hasUnreadMessages_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccountID:label:hasUnreadMessages:];
}

id objc_msgSend_initWithAction_diameter_callState_(void *a1, const char *a2, ...)
{
  return [a1 initWithAction:diameter:callState:];
}

id objc_msgSend_initWithAction_diameter_callState_sizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 initWithAction:diameter:callState:sizeCategory:];
}

id objc_msgSend_initWithAction_diameter_callState_sizeCategory_captureView_(void *a1, const char *a2, ...)
{
  return [a1 initWithAction:diameter:callState:sizeCategory:captureView:];
}

id objc_msgSend_initWithActivityIndicatorStyle_(void *a1, const char *a2, ...)
{
  return [a1 initWithActivityIndicatorStyle:];
}

id objc_msgSend_initWithActivityItems_applicationActivities_(void *a1, const char *a2, ...)
{
  return [a1 initWithActivityItems:applicationActivities:];
}

id objc_msgSend_initWithActivityType_(void *a1, const char *a2, ...)
{
  return [a1 initWithActivityType:];
}

id objc_msgSend_initWithArrangedSubviewRows_(void *a1, const char *a2, ...)
{
  return [a1 initWithArrangedSubviewRows:];
}

id objc_msgSend_initWithArrangedSubviews_(void *a1, const char *a2, ...)
{
  return [a1 initWithArrangedSubviews:];
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return [a1 initWithArray:];
}

id objc_msgSend_initWithAsset_presetName_(void *a1, const char *a2, ...)
{
  return [a1 initWithAsset:presetName:];
}

id objc_msgSend_initWithAttributedString_(void *a1, const char *a2, ...)
{
  return [a1 initWithAttributedString:];
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return [a1 initWithBarButtonSystemItem:target:action:];
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleIdentifier:allowPlaceholder:error:];
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleType:];
}

id objc_msgSend_initWithButtons_(void *a1, const char *a2, ...)
{
  return [a1 initWithButtons:];
}

id objc_msgSend_initWithCGFloat_(void *a1, const char *a2, ...)
{
  return [a1 initWithCGFloat:];
}

id objc_msgSend_initWithCallCommunications_(void *a1, const char *a2, ...)
{
  return [a1 initWithCallCommunications:];
}

id objc_msgSend_initWithCallHistoryController_callProviderManager_contactStore_suggestedContactStore_metadataCache_(void *a1, const char *a2, ...)
{
  return [a1 initWithCallHistoryController:callHistoryController callProviderManager:callProviderManager contactStore:contactStore suggestedContactStore:suggestedContactStore metadataCache:metadataCache];
}

id objc_msgSend_initWithCallProviderManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithCallProviderManager:];
}

id objc_msgSend_initWithCallReportingViewModel_alertPresentingViewController_contactsService_(void *a1, const char *a2, ...)
{
  return [a1 initWithCallReportingViewModel:alertPresentingViewController:contactsService:];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithChatGuid_chatHandles_displayName_handle_contactIdentifier_resultSourceType_autocompleteResult_recipients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChatGuid:chatHandles:displayName:handle:contactIdentifier:resultSourceType:autocompleteResult:recipients:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:];
}

id objc_msgSend_initWithContact_(void *a1, const char *a2, ...)
{
  return [a1 initWithContact:];
}

id objc_msgSend_initWithContact_propertyKey_labeledValueIdentifier_actionType_bundleIdentifier_store_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContact:propertyKey:labeledValueIdentifier:actionType:bundleIdentifier:store:");
}

id objc_msgSend_initWithContactArray_contactHandles_(void *a1, const char *a2, ...)
{
  return [a1 initWithContactArray:contactHandles:];
}

id objc_msgSend_initWithContactArray_unknownContacts_contactHandles_tableViewModel_(void *a1, const char *a2, ...)
{
  return [a1 initWithContactArray:unknownContacts:contactHandles:tableViewModel:];
}

id objc_msgSend_initWithContactSearchType_(void *a1, const char *a2, ...)
{
  return [a1 initWithContactSearchType:];
}

id objc_msgSend_initWithContactStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithContactStore:];
}

id objc_msgSend_initWithContactsDataSource_(void *a1, const char *a2, ...)
{
  return [a1 initWithContactsDataSource:];
}

id objc_msgSend_initWithConversation_originatingUIType_(void *a1, const char *a2, ...)
{
  return [a1 initWithConversation:originatingUIType:];
}

id objc_msgSend_initWithCustomView_(void *a1, const char *a2, ...)
{
  return [a1 initWithCustomView:];
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:];
}

id objc_msgSend_initWithDataProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithDataProvider:];
}

id objc_msgSend_initWithDataProviders_(void *a1, const char *a2, ...)
{
  return [a1 initWithDataProviders:];
}

id objc_msgSend_initWithDataSource_(void *a1, const char *a2, ...)
{
  return [a1 initWithDataSource:];
}

id objc_msgSend_initWithDataSource_allowsLargeTitles_(void *a1, const char *a2, ...)
{
  return [a1 initWithDataSource:allowsLargeTitles:];
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:];
}

id objc_msgSend_initWithDestinationID_isoCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 initWithDestinationID:isoCountryCode:];
}

id objc_msgSend_initWithDialerType_(void *a1, const char *a2, ...)
{
  return [a1 initWithDialerType:];
}

id objc_msgSend_initWithDialerType_contactStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithDialerType:contactStore:];
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:];
}

id objc_msgSend_initWithDonated_transcribing_transcriptionAttempted_transcriptionAvailable_messageTranscript_(void *a1, const char *a2, ...)
{
  return [a1 initWithDonated:transcribing:transcriptionAttempted:transcriptionAvailable:messageTranscript:];
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 initWithDouble:];
}

id objc_msgSend_initWithDuration_identifier_mediaURL_thumbnailURL_isRead_isSensitive_isVideo_fromHandle_(void *a1, const char *a2, ...)
{
  return [a1 initWithDuration:identifier:mediaURL:thumbnailURL:isRead:isSensitive:isVideo:fromHandle:];
}

id objc_msgSend_initWithEffect_(void *a1, const char *a2, ...)
{
  return [a1 initWithEffect:];
}

id objc_msgSend_initWithFavoritesController_(void *a1, const char *a2, ...)
{
  return [a1 initWithFavoritesController:];
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:];
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:];
}

id objc_msgSend_initWithFrame_callUUID_ttyType_timeLabel_statusLabel_durationAndDataText_emergencyItemsText_verified_screenSharingTypeText_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:callUUID:ttyType:timeLabel:statusLabel:durationAndDataText:emergencyItemsText:verified:screenSharingTypeText:];
}

id objc_msgSend_initWithFrame_cornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:cornerRadius:];
}

id objc_msgSend_initWithFrame_forDialerType_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:forDialerType:];
}

id objc_msgSend_initWithFrame_style_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:style:];
}

id objc_msgSend_initWithFrame_title_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:title:];
}

id objc_msgSend_initWithFrame_title_style_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:title:style:];
}

id objc_msgSend_initWithGroupConversationsEnabled_recentsCallServicesDialer_(void *a1, const char *a2, ...)
{
  return [a1 initWithGroupConversationsEnabled:recentsCallServicesDialer:];
}

id objc_msgSend_initWithHandle_(void *a1, const char *a2, ...)
{
  return [a1 initWithHandle:];
}

id objc_msgSend_initWithHandles_(void *a1, const char *a2, ...)
{
  return [a1 initWithHandles:];
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return [a1 initWithImage:];
}

id objc_msgSend_initWithIndex_(void *a1, const char *a2, ...)
{
  return [a1 initWithIndex:];
}

id objc_msgSend_initWithItem_(void *a1, const char *a2, ...)
{
  return [a1 initWithItem:];
}

id objc_msgSend_initWithItems_(void *a1, const char *a2, ...)
{
  return [a1 initWithItems:];
}

id objc_msgSend_initWithKeyPadButtonType_usingSmallFont_(void *a1, const char *a2, ...)
{
  return [a1 initWithKeyPadButtonType:usingSmallFont:];
}

id objc_msgSend_initWithKeysToFetch_(void *a1, const char *a2, ...)
{
  return [a1 initWithKeysToFetch:];
}

id objc_msgSend_initWithMPMessage_(void *a1, const char *a2, ...)
{
  return [a1 initWithMPMessage:];
}

id objc_msgSend_initWithManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithManager:];
}

id objc_msgSend_initWithMessage_navigationController_voicemailController_(void *a1, const char *a2, ...)
{
  return [a1 initWithMessage:navigationController:voicemailController:];
}

id objc_msgSend_initWithMetadataCache_callProviderManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithMetadataCache:callProviderManager:];
}

id objc_msgSend_initWithNavigationController_voicemailController_(void *a1, const char *a2, ...)
{
  return [a1 initWithNavigationController:voicemailController:];
}

id objc_msgSend_initWithNibName_bundle_(void *a1, const char *a2, ...)
{
  return [a1 initWithNibName:nil bundle:nil];
}

id objc_msgSend_initWithOnDismissHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithOnDismissHandler:];
}

id objc_msgSend_initWithPlayer_(void *a1, const char *a2, ...)
{
  return [a1 initWithPlayer:];
}

id objc_msgSend_initWithPlayerItem_(void *a1, const char *a2, ...)
{
  return [a1 initWithPlayerItem:];
}

id objc_msgSend_initWithProgressViewStyle_(void *a1, const char *a2, ...)
{
  return [a1 initWithProgressViewStyle:];
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithProvider:];
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:];
}

id objc_msgSend_initWithQueue_wantsCallNotifications_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:wantsCallNotifications:];
}

id objc_msgSend_initWithRecentsController_(void *a1, const char *a2, ...)
{
  return [a1 initWithRecentsController:];
}

id objc_msgSend_initWithRecentsController_contactsService_callReportingViewModel_(void *a1, const char *a2, ...)
{
  return [a1 initWithRecentsController:contactsService:callReportingViewModel:];
}

id objc_msgSend_initWithRecentsController_searchResultsController_(void *a1, const char *a2, ...)
{
  return [a1 initWithRecentsController:searchResultsController:];
}

id objc_msgSend_initWithRemoteMembers_(void *a1, const char *a2, ...)
{
  return [a1 initWithRemoteMembers:];
}

id objc_msgSend_initWithRootViewController_(void *a1, const char *a2, ...)
{
  return [a1 initWithRootViewController:];
}

id objc_msgSend_initWithScrubbingControl_(void *a1, const char *a2, ...)
{
  return [a1 initWithScrubbingControl:];
}

id objc_msgSend_initWithSearchResultsController_(void *a1, const char *a2, ...)
{
  return [a1 initWithSearchResultsController:];
}

id objc_msgSend_initWithSender_dateReceived_(void *a1, const char *a2, ...)
{
  return [a1 initWithSender:dateReceived:];
}

id objc_msgSend_initWithSettings_(void *a1, const char *a2, ...)
{
  return [a1 initWithSettings:];
}

id objc_msgSend_initWithShouldShowBlockAll_shouldShowReportInitiator_shouldShowBlockUnknown_recentCall_reportSpammer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShouldShowBlockAll:shouldShowReportInitiator:shouldShowBlockUnknown:recentCall:reportSpammer:");
}

id objc_msgSend_initWithSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithSize:];
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return [a1 initWithSize:format:];
}

id objc_msgSend_initWithStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithStore:];
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:];
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:attributes:];
}

id objc_msgSend_initWithStyle_dataSource_delegate_wantsAsyncReload_menuChangeHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithStyle:dataSource:delegate:wantsAsyncReload:menuChangeHandler:];
}

id objc_msgSend_initWithStyle_favoritesController_(void *a1, const char *a2, ...)
{
  return [a1 initWithStyle:favoritesController:];
}

id objc_msgSend_initWithStyle_reuseIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithStyle:reuseIdentifier:];
}

id objc_msgSend_initWithSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithSubscription:];
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return [a1 initWithSuiteName:];
}

id objc_msgSend_initWithSymbolType_(void *a1, const char *a2, ...)
{
  return [a1 initWithSymbolType:];
}

id objc_msgSend_initWithTabBarSystemItem_tag_(void *a1, const char *a2, ...)
{
  return [a1 initWithTabBarSystemItem:tag:];
}

id objc_msgSend_initWithTableView_recentsController_featureFlags_tapTargets_callReportingViewModel_reportFlowPresenter_contactsService_avatarViewControllerSettings_placeCallAction_removeCallsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTableView:recentsController:featureFlags:tapTargets:callReportingViewModel:reportFlowPresenter:contactsService:avatarViewControllerSettings:placeCallAction:removeCallsAtIndexPaths:");
}

id objc_msgSend_initWithTableViewController_(void *a1, const char *a2, ...)
{
  return [a1 initWithTableViewController:];
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return [a1 initWithTarget:action:];
}

id objc_msgSend_initWithTestName_scrollView_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithTestName:scrollView:completionHandler:];
}

id objc_msgSend_initWithTitle_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:];
}

id objc_msgSend_initWithTitle_detailText_icon_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:detailText:icon:];
}

id objc_msgSend_initWithTitle_frame_theme_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:frame:theme:];
}

id objc_msgSend_initWithTitle_image_selectedImage_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:image:selectedImage:];
}

id objc_msgSend_initWithTitle_image_tag_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:image:tag:];
}

id objc_msgSend_initWithTitle_menu_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:menu:];
}

id objc_msgSend_initWithTitle_style_target_action_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:style:target:action:];
}

id objc_msgSend_initWithTitle_theme_(void *a1, const char *a2, ...)
{
  return [a1 initWithTitle:theme:];
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:];
}

id objc_msgSend_initWithType_contactStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:contactStore:];
}

id objc_msgSend_initWithType_localizedTitle_localizedSubtitle_icon_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:localizedTitle:localizedSubtitle:icon:userInfo:];
}

id objc_msgSend_initWithType_value_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:value:];
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:];
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDString:];
}

id objc_msgSend_initWithUrlString_username_userIdentifier_service_(void *a1, const char *a2, ...)
{
  return [a1 initWithUrlString:username:userIdentifier:service:];
}

id objc_msgSend_initWithUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return [a1 initWithUserInterfaceStyle:];
}

id objc_msgSend_initWithUuid_(void *a1, const char *a2, ...)
{
  return [a1 initWithUuid:];
}

id objc_msgSend_initWithVMTranscript_(void *a1, const char *a2, ...)
{
  return [a1 initWithVMTranscript:];
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return [a1 initWithValue:];
}

id objc_msgSend_initWithView_parameters_(void *a1, const char *a2, ...)
{
  return [a1 initWithView:parameters:];
}

id objc_msgSend_initWithView_type_(void *a1, const char *a2, ...)
{
  return [a1 initWithView:type:];
}

id objc_msgSend_initWithViewController_selector_(void *a1, const char *a2, ...)
{
  return [a1 initWithViewController:selector:];
}

id objc_msgSend_initWithVoiceMemoURL_voiceMemoName_voiceMemoDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithVoiceMemoURL:voiceMemoURL voiceMemoName:voiceMemoName voiceMemoDate:voiceMemoDate];
}

id objc_msgSend_initWithVoicemail_contactStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithVoicemail:contactStore:];
}

id objc_msgSend_initWithWindowScene_(void *a1, const char *a2, ...)
{
  return [a1 initWithWindowScene:];
}

id objc_msgSend_initialConstraints(void *a1, const char *a2, ...)
{
  return _[a1 initialConstraints];
}

id objc_msgSend_initializeCachedValues(void *a1, const char *a2, ...)
{
  return _[a1 initializeCachedValues];
}

id objc_msgSend_initializeIconAndTitle_(void *a1, const char *a2, ...)
{
  return [a1 initializeIconAndTitle:];
}

id objc_msgSend_input(void *a1, const char *a2, ...)
{
  return _[a1 input];
}

id objc_msgSend_insertArrangedSubview_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertArrangedSubview:atIndex:];
}

id objc_msgSend_insertAttributedString_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertAttributedString:atIndex:];
}

id objc_msgSend_insertColumnAtIndex_withArrangedSubviews_(void *a1, const char *a2, ...)
{
  return [a1 insertColumnAtIndex:withArrangedSubviews:];
}

id objc_msgSend_insertJoinableConversationsIfNecessary_(void *a1, const char *a2, ...)
{
  return [a1 insertJoinableConversationsIfNecessary:];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_insertRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return [a1 insertRowsAtIndexPaths:withRowAnimation:];
}

id objc_msgSend_insertSections_withRowAnimation_(void *a1, const char *a2, ...)
{
  return [a1 insertSections:withRowAnimation:];
}

id objc_msgSend_insertStringAtCurrentPosition_(void *a1, const char *a2, ...)
{
  return [a1 insertStringAtCurrentPosition:];
}

id objc_msgSend_insertStringAtCurrentPosition_deletingPreviousCharacter_(void *a1, const char *a2, ...)
{
  return [a1 insertStringAtCurrentPosition:deletingPreviousCharacter:];
}

id objc_msgSend_insertSublayer_below_(void *a1, const char *a2, ...)
{
  return [a1 insertSublayer:below:];
}

id objc_msgSend_insertSubview_below_(void *a1, const char *a2, ...)
{
  return [a1 insertSubview:below:];
}

id objc_msgSend_insertSubview_belowSubview_(void *a1, const char *a2, ...)
{
  return [a1 insertSubview:belowSubview:];
}

id objc_msgSend_instantMessageAddresses(void *a1, const char *a2, ...)
{
  return _[a1 instantMessageAddresses];
}

id objc_msgSend_instantiateRootViewController(void *a1, const char *a2, ...)
{
  return _[a1 instantiateRootViewController];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intent(void *a1, const char *a2, ...)
{
  return _[a1 intent];
}

id objc_msgSend_interaction(void *a1, const char *a2, ...)
{
  return _[a1 interaction];
}

id objc_msgSend_interactionModel(void *a1, const char *a2, ...)
{
  return _[a1 interactionModel];
}

id objc_msgSend_interrupted(void *a1, const char *a2, ...)
{
  return _[a1 interrupted];
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _[a1 intrinsicContentSize];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateIntrinsicContentSize(void *a1, const char *a2, ...)
{
  return _[a1 invalidateIntrinsicContentSize];
}

id objc_msgSend_invalidateSelectionAnimated_(void *a1, const char *a2, ...)
{
  return [a1 invalidateSelectionAnimated:];
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_invitationPreferencesForRecentCall(void *a1, const char *a2, ...)
{
  return _[a1 invitationPreferencesForRecentCall];
}

id objc_msgSend_isAccessibilityConstraintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilityConstraintsEnabled];
}

id objc_msgSend_isAccessiblityConstraintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAccessiblityConstraintsEnabled];
}

id objc_msgSend_isAccountProvisioningRequired(void *a1, const char *a2, ...)
{
  return _[a1 isAccountProvisioningRequired];
}

id objc_msgSend_isAccountSubscribed_(void *a1, const char *a2, ...)
{
  return [a1 isAccountSubscribed:];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _[a1 isAtEnd];
}

id objc_msgSend_isAudioSessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isAudioSessionActive];
}

id objc_msgSend_isAuxiliary(void *a1, const char *a2, ...)
{
  return _[a1 isAuxiliary];
}

id objc_msgSend_isBeingPresented(void *a1, const char *a2, ...)
{
  return _[a1 isBeingPresented];
}

id objc_msgSend_isBlocked(void *a1, const char *a2, ...)
{
  return _[a1 isBlocked];
}

id objc_msgSend_isBluetooth(void *a1, const char *a2, ...)
{
  return _[a1 isBluetooth];
}

id objc_msgSend_isBluetoothLE(void *a1, const char *a2, ...)
{
  return _[a1 isBluetoothLE];
}

id objc_msgSend_isCallScreeningEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCallScreeningEnabled];
}

id objc_msgSend_isCallVoicemailSupportedForAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 isCallVoicemailSupportedForAccountUUID:];
}

id objc_msgSend_isCarAudio(void *a1, const char *a2, ...)
{
  return _[a1 isCarAudio];
}

id objc_msgSend_isCategoryVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 isCategoryVoicemail];
}

id objc_msgSend_isCellularRadioEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCellularRadioEnabled];
}

id objc_msgSend_isConnecting(void *a1, const char *a2, ...)
{
  return _[a1 isConnecting];
}

id objc_msgSend_isConnectivityError(void *a1, const char *a2, ...)
{
  return _[a1 isConnectivityError];
}

id objc_msgSend_isContentViewLoaded(void *a1, const char *a2, ...)
{
  return _[a1 isContentViewLoaded];
}

id objc_msgSend_isContinuous(void *a1, const char *a2, ...)
{
  return _[a1 isContinuous];
}

id objc_msgSend_isConversation(void *a1, const char *a2, ...)
{
  return _[a1 isConversation];
}

id objc_msgSend_isCurrentlyPicked(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentlyPicked];
}

id objc_msgSend_isCustomized(void *a1, const char *a2, ...)
{
  return _[a1 isCustomized];
}

id objc_msgSend_isDataAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isDataAvailable];
}

id objc_msgSend_isDecelerating(void *a1, const char *a2, ...)
{
  return _[a1 isDecelerating];
}

id objc_msgSend_isDefault(void *a1, const char *a2, ...)
{
  return _[a1 isDefault];
}

id objc_msgSend_isDefaultRoute(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultRoute];
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _[a1 isDeleted];
}

id objc_msgSend_isDeviceCapableOfFaceTimeAudio(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceCapableOfFaceTimeAudio];
}

id objc_msgSend_isDeviceCapableOfFaceTimeVideo(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceCapableOfFaceTimeVideo];
}

id objc_msgSend_isDeviceCapableOfTelephonyCalls(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceCapableOfTelephonyCalls];
}

id objc_msgSend_isDragging(void *a1, const char *a2, ...)
{
  return _[a1 isDragging];
}

id objc_msgSend_isEditing(void *a1, const char *a2, ...)
{
  return _[a1 isEditing];
}

id objc_msgSend_isEmergency(void *a1, const char *a2, ...)
{
  return _[a1 isEmergency];
}

id objc_msgSend_isEmergencyNumberForDigits_senderIdentityUUID_(void *a1, const char *a2, ...)
{
  return [a1 isEmergencyNumberForDigits:senderIdentityUUID:];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEndpointOnCurrentDevice(void *a1, const char *a2, ...)
{
  return _[a1 isEndpointOnCurrentDevice];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualIgnoringIdentifiers_(void *a1, const char *a2, ...)
{
  return [a1 isEqualIgnoringIdentifiers];
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToArray:];
}

id objc_msgSend_isEqualToAttributedString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToAttributedString:];
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToDate:];
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToNumber:];
}

id objc_msgSend_isEqualToRouteIgnoringIsRecommended_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToRouteIgnoringIsRecommended:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isEqualToVoicemailMessageViewModel_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToVoicemailMessageViewModel:];
}

id objc_msgSend_isEquivalentToHandle_(void *a1, const char *a2, ...)
{
  return [a1 isEquivalentToHandle:];
}

id objc_msgSend_isExpanded(void *a1, const char *a2, ...)
{
  return _[a1 isExpanded];
}

id objc_msgSend_isFaceTimeProvider(void *a1, const char *a2, ...)
{
  return _[a1 isFaceTimeProvider];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isFocused(void *a1, const char *a2, ...)
{
  return _[a1 isFocused];
}

id objc_msgSend_isGeminiCapable(void *a1, const char *a2, ...)
{
  return _[a1 isGeminiCapable];
}

id objc_msgSend_isGreetingChangeSupportedForAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 isGreetingChangeSupportedForAccountUUID:];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isHighlighted(void *a1, const char *a2, ...)
{
  return _[a1 isHighlighted];
}

id objc_msgSend_isHostedInRemoteViewController(void *a1, const char *a2, ...)
{
  return _[a1 isHostedInRemoteViewController];
}

id objc_msgSend_isInDifferentBootSession(void *a1, const char *a2, ...)
{
  return _[a1 isInDifferentBootSession];
}

id objc_msgSend_isIncoming(void *a1, const char *a2, ...)
{
  return _[a1 isIncoming];
}

id objc_msgSend_isInitialTab(void *a1, const char *a2, ...)
{
  return _[a1 isInitialTab];
}

id objc_msgSend_isInitializationBlockQueued(void *a1, const char *a2, ...)
{
  return _[a1 isInitializationBlockQueued];
}

id objc_msgSend_isInitiatorUnknownForCall_(void *a1, const char *a2, ...)
{
  return [a1 isInitiatorUnknownForCall:];
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _[a1 isInstalled];
}

id objc_msgSend_isJunk(void *a1, const char *a2, ...)
{
  return _[a1 isJunk];
}

id objc_msgSend_isKeyAvailable_(void *a1, const char *a2, ...)
{
  return [a1 isKeyAvailable:];
}

id objc_msgSend_isLikePhoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 isLikePhoneNumber:];
}

id objc_msgSend_isLocalizedSubtitleUnknown_(void *a1, const char *a2, ...)
{
  return [a1 isLocalizedSubtitleUnknown];
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isMe(void *a1, const char *a2, ...)
{
  return _[a1 isMe];
}

id objc_msgSend_isMenuVisible(void *a1, const char *a2, ...)
{
  return _[a1 isMenuVisible];
}

id objc_msgSend_isMerging(void *a1, const char *a2, ...)
{
  return _[a1 isMerging];
}

id objc_msgSend_isMessageWaiting(void *a1, const char *a2, ...)
{
  return _[a1 isMessageWaiting];
}

id objc_msgSend_isMissedCall(void *a1, const char *a2, ...)
{
  return _[a1 isMissedCall];
}

id objc_msgSend_isMuted(void *a1, const char *a2, ...)
{
  return _[a1 isMuted];
}

id objc_msgSend_isNumeric(void *a1, const char *a2, ...)
{
  return _[a1 isNumeric];
}

id objc_msgSend_isOneToOneModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isOneToOneModeEnabled];
}

id objc_msgSend_isOnline(void *a1, const char *a2, ...)
{
  return _[a1 isOnline];
}

id objc_msgSend_isPasscodeChangeSupportedForAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 isPasscodeChangeSupportedForAccountUUID:];
}

id objc_msgSend_isPendingAudioSessionActivation(void *a1, const char *a2, ...)
{
  return _[a1 isPendingAudioSessionActivation];
}

id objc_msgSend_isPlaying(void *a1, const char *a2, ...)
{
  return _[a1 isPlaying];
}

id objc_msgSend_isPreferred(void *a1, const char *a2, ...)
{
  return _[a1 isPreferred];
}

id objc_msgSend_isPreferredContentSizeCategoryAccessible(void *a1, const char *a2, ...)
{
  return _[a1 isPreferredContentSizeCategoryAccessible];
}

id objc_msgSend_isPresentedFromSetup(void *a1, const char *a2, ...)
{
  return _[a1 isPresentedFromSetup];
}

id objc_msgSend_isProvisioned(void *a1, const char *a2, ...)
{
  return _[a1 isProvisioned];
}

id objc_msgSend_isProximityMonitoringEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isProximityMonitoringEnabled];
}

id objc_msgSend_isRead(void *a1, const char *a2, ...)
{
  return _[a1 isRead];
}

id objc_msgSend_isRecapAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isRecapAvailable];
}

id objc_msgSend_isReceiver(void *a1, const char *a2, ...)
{
  return _[a1 isReceiver];
}

id objc_msgSend_isRecentCallContactInFavorites_(void *a1, const char *a2, ...)
{
  return [a1 isRecentCallContactInFavorites:];
}

id objc_msgSend_isRecording(void *a1, const char *a2, ...)
{
  return _[a1 isRecording];
}

id objc_msgSend_isReloadingData(void *a1, const char *a2, ...)
{
  return _[a1 isReloadingData];
}

id objc_msgSend_isRemovedSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 isRemovedSystemApp];
}

id objc_msgSend_isRestricted(void *a1, const char *a2, ...)
{
  return _[a1 isRestricted];
}

id objc_msgSend_isRestrictedMessage(void *a1, const char *a2, ...)
{
  return _[a1 isRestrictedMessage];
}

id objc_msgSend_isRestrictedMessage_(void *a1, const char *a2, ...)
{
  return [a1 isRestrictedMessage:];
}

id objc_msgSend_isRunningTest(void *a1, const char *a2, ...)
{
  return _[a1 isRunningTest];
}

id objc_msgSend_isSearchViewController(void *a1, const char *a2, ...)
{
  return _[a1 isSearchViewController];
}

id objc_msgSend_isSearching(void *a1, const char *a2, ...)
{
  return _[a1 isSearching];
}

id objc_msgSend_isSecurityError(void *a1, const char *a2, ...)
{
  return _[a1 isSecurityError];
}

id objc_msgSend_isSelected(void *a1, const char *a2, ...)
{
  return _[a1 isSelected];
}

id objc_msgSend_isSensitive(void *a1, const char *a2, ...)
{
  return _[a1 isSensitive];
}

id objc_msgSend_isSharePlayActive(void *a1, const char *a2, ...)
{
  return _[a1 isSharePlayActive];
}

id objc_msgSend_isSimHidden(void *a1, const char *a2, ...)
{
  return _[a1 isSimHidden];
}

id objc_msgSend_isSpeaker(void *a1, const char *a2, ...)
{
  return _[a1 isSpeaker];
}

id objc_msgSend_isSpringBoardLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSpringBoardLocked];
}

id objc_msgSend_isSpringBoardPasscodeLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSpringBoardPasscodeLocked];
}

id objc_msgSend_isSubscribed(void *a1, const char *a2, ...)
{
  return _[a1 isSubscribed];
}

id objc_msgSend_isSuggested(void *a1, const char *a2, ...)
{
  return _[a1 isSuggested];
}

id objc_msgSend_isSuperboxProvider(void *a1, const char *a2, ...)
{
  return _[a1 isSuperboxProvider];
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return _[a1 isSuspended];
}

id objc_msgSend_isSuspendedEventsOnly(void *a1, const char *a2, ...)
{
  return _[a1 isSuspendedEventsOnly];
}

id objc_msgSend_isSwipeToDelete(void *a1, const char *a2, ...)
{
  return _[a1 isSwipeToDelete];
}

id objc_msgSend_isSystemItem(void *a1, const char *a2, ...)
{
  return _[a1 isSystemItem];
}

id objc_msgSend_isSystemProvider(void *a1, const char *a2, ...)
{
  return _[a1 isSystemProvider];
}

id objc_msgSend_isTTY(void *a1, const char *a2, ...)
{
  return _[a1 isTTY];
}

id objc_msgSend_isTelephonyProvider(void *a1, const char *a2, ...)
{
  return _[a1 isTelephonyProvider];
}

id objc_msgSend_isTracking(void *a1, const char *a2, ...)
{
  return _[a1 isTracking];
}

id objc_msgSend_isTranscribing(void *a1, const char *a2, ...)
{
  return _[a1 isTranscribing];
}

id objc_msgSend_isTranscription(void *a1, const char *a2, ...)
{
  return _[a1 isTranscription];
}

id objc_msgSend_isTranscriptionAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isTranscriptionAvailable];
}

id objc_msgSend_isTranscriptionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTranscriptionEnabled];
}

id objc_msgSend_isTranscriptionRated(void *a1, const char *a2, ...)
{
  return _[a1 isTranscriptionRated];
}

id objc_msgSend_isTranscriptionUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 isTranscriptionUnavailable];
}

id objc_msgSend_isUIFluidTransitionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isUIFluidTransitionsEnabled];
}

id objc_msgSend_isUIInitialized(void *a1, const char *a2, ...)
{
  return _[a1 isUIInitialized];
}

id objc_msgSend_isUplinkMuted(void *a1, const char *a2, ...)
{
  return _[a1 isUplinkMuted];
}

id objc_msgSend_isUsingSmallFont(void *a1, const char *a2, ...)
{
  return _[a1 isUsingSmallFont];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isVideo(void *a1, const char *a2, ...)
{
  return _[a1 isVideo];
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _[a1 isViewLoaded];
}

id objc_msgSend_isVisualVoicemailAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isVisualVoicemailAvailable];
}

id objc_msgSend_isZoomBouncing(void *a1, const char *a2, ...)
{
  return _[a1 isZoomBouncing];
}

id objc_msgSend_isZooming(void *a1, const char *a2, ...)
{
  return _[a1 isZooming];
}

id objc_msgSend_isoCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 isoCountryCode];
}

id objc_msgSend_item(void *a1, const char *a2, ...)
{
  return _[a1 item];
}

id objc_msgSend_itemCache(void *a1, const char *a2, ...)
{
  return _[a1 itemCache];
}

id objc_msgSend_itemForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 itemForRecentCall:];
}

id objc_msgSend_itemForRecentCall_numberOfOccurences_(void *a1, const char *a2, ...)
{
  return [a1 itemForRecentCall:numberOfOccurences:];
}

id objc_msgSend_itemForRecentCall_presentationStyle_(void *a1, const char *a2, ...)
{
  return [a1 itemForRecentCall:presentationStyle:];
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _[a1 items];
}

id objc_msgSend_joinCallImageView(void *a1, const char *a2, ...)
{
  return _[a1 joinCallImageView];
}

id objc_msgSend_joinConversationAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 joinConversationAtIndexPath:];
}

id objc_msgSend_joinConversationRequestForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 joinConversationRequestForRecentCall];
}

id objc_msgSend_joinableConversationUUIDs(void *a1, const char *a2, ...)
{
  return _[a1 joinableConversationUUIDs];
}

id objc_msgSend_junkIdentificationCategory(void *a1, const char *a2, ...)
{
  return _[a1 junkIdentificationCategory];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyCommandHandler(void *a1, const char *a2, ...)
{
  return _[a1 keyCommandHandler];
}

id objc_msgSend_keyCommandWithInput_modifierFlags_action_(void *a1, const char *a2, ...)
{
  return [a1 keyCommandWithInput:modifierFlags:action:];
}

id objc_msgSend_keyIndex(void *a1, const char *a2, ...)
{
  return _[a1 keyIndex];
}

id objc_msgSend_keyPadButtonType(void *a1, const char *a2, ...)
{
  return _[a1 keyPadButtonType];
}

id objc_msgSend_keyWindow(void *a1, const char *a2, ...)
{
  return _[a1 keyWindow];
}

id objc_msgSend_keypadButtonInteractedWithButtonType_(void *a1, const char *a2, ...)
{
  return [a1 keypadButtonInteractedWithButtonType:];
}

id objc_msgSend_keypadTabSwitchStarted(void *a1, const char *a2, ...)
{
  return _[a1 keypadTabSwitchStarted];
}

id objc_msgSend_keypadToContactsSwitchLog(void *a1, const char *a2, ...)
{
  return _[a1 keypadToContactsSwitchLog];
}

id objc_msgSend_keypadToContactsSwitchStartTime(void *a1, const char *a2, ...)
{
  return _[a1 keypadToContactsSwitchStartTime];
}

id objc_msgSend_keypadViewController(void *a1, const char *a2, ...)
{
  return _[a1 keypadViewController];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _[a1 labelColor];
}

id objc_msgSend_labelID(void *a1, const char *a2, ...)
{
  return _[a1 labelID];
}

id objc_msgSend_labelStackView(void *a1, const char *a2, ...)
{
  return _[a1 labelStackView];
}

id objc_msgSend_labelStackViewBaselineConstraint(void *a1, const char *a2, ...)
{
  return _[a1 labelStackViewBaselineConstraint];
}

id objc_msgSend_labelStackViewBaselineConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 labelStackViewBaselineConstraintConstant];
}

id objc_msgSend_labeledValueForEmailAddress_(void *a1, const char *a2, ...)
{
  return [a1 labeledValueForEmailAddress:];
}

id objc_msgSend_labeledValueForPhoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 labeledValueForPhoneNumber:];
}

id objc_msgSend_labeledValueForSocialProfileWithUsername_(void *a1, const char *a2, ...)
{
  return [a1 labeledValueForSocialProfileWithUsername:];
}

id objc_msgSend_labeledValueWithLabel_value_(void *a1, const char *a2, ...)
{
  return [a1 labeledValueWithLabel:value:];
}

id objc_msgSend_labelsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 labelsEnabled];
}

id objc_msgSend_lagunaActionForConversation_deviceHandle_(void *a1, const char *a2, ...)
{
  return [a1 lagunaActionForConversation:deviceHandle:];
}

id objc_msgSend_lagunaActions(void *a1, const char *a2, ...)
{
  return _[a1 lagunaActions];
}

id objc_msgSend_largeTitleDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 largeTitleDisplayMode];
}

id objc_msgSend_largeTitleInsets(void *a1, const char *a2, ...)
{
  return _[a1 largeTitleInsets];
}

id objc_msgSend_largestCallTypeIconWidth(void *a1, const char *a2, ...)
{
  return _[a1 largestCallTypeIconWidth];
}

id objc_msgSend_lastBaselineAnchor(void *a1, const char *a2, ...)
{
  return _[a1 lastBaselineAnchor];
}

id objc_msgSend_lastDialedNumber(void *a1, const char *a2, ...)
{
  return _[a1 lastDialedNumber];
}

id objc_msgSend_lastKnownBootSessionID(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownBootSessionID];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_launchAppForDialRequest_completion_(void *a1, const char *a2, ...)
{
  return [a1 launchAppForDialRequest:completion:];
}

id objc_msgSend_launchAppForJoinRequest_(void *a1, const char *a2, ...)
{
  return [a1 launchAppForJoinRequest:];
}

id objc_msgSend_launchFieldTestIfNeeded_(void *a1, const char *a2, ...)
{
  return [a1 launchFieldTestIfNeeded:];
}

id objc_msgSend_launchedToTest(void *a1, const char *a2, ...)
{
  return _[a1 launchedToTest];
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _[a1 layer];
}

id objc_msgSend_layoutFrame(void *a1, const char *a2, ...)
{
  return _[a1 layoutFrame];
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 layoutIfNeeded];
}

id objc_msgSend_layoutIsAccessible(void *a1, const char *a2, ...)
{
  return _[a1 layoutIsAccessible];
}

id objc_msgSend_layoutIsLocked_(void *a1, const char *a2, ...)
{
  return [a1 layoutIsLocked:];
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _[a1 layoutMargins];
}

id objc_msgSend_layoutMarginsGuide(void *a1, const char *a2, ...)
{
  return _[a1 layoutMarginsGuide];
}

id objc_msgSend_layoutTableHeaderView(void *a1, const char *a2, ...)
{
  return _[a1 layoutTableHeaderView];
}

id objc_msgSend_layoutTextField(void *a1, const char *a2, ...)
{
  return _[a1 layoutTextField];
}

id objc_msgSend_lcdView(void *a1, const char *a2, ...)
{
  return _[a1 lcdView];
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _[a1 leadingAnchor];
}

id objc_msgSend_leftAnchor(void *a1, const char *a2, ...)
{
  return _[a1 leftAnchor];
}

id objc_msgSend_leftBarButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 leftBarButtonItem];
}

id objc_msgSend_leftBarButtonItemGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 leftBarButtonItemGestureRecognizer];
}

id objc_msgSend_leftTitleSeparatorInsetForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 leftTitleSeparatorInsetForContentSizeCategory:];
}

id objc_msgSend_legacyVoicemails(void *a1, const char *a2, ...)
{
  return _[a1 legacyVoicemails];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lightGrayColor(void *a1, const char *a2, ...)
{
  return _[a1 lightGrayColor];
}

id objc_msgSend_limitedSoftPhoneKeypad(void *a1, const char *a2, ...)
{
  return _[a1 limitedSoftPhoneKeypad];
}

id objc_msgSend_limitedUI(void *a1, const char *a2, ...)
{
  return _[a1 limitedUI];
}

id objc_msgSend_limitedUIElements(void *a1, const char *a2, ...)
{
  return _[a1 limitedUIElements];
}

id objc_msgSend_lineHeight(void *a1, const char *a2, ...)
{
  return _[a1 lineHeight];
}

id objc_msgSend_linkButton(void *a1, const char *a2, ...)
{
  return _[a1 linkButton];
}

id objc_msgSend_linkColor(void *a1, const char *a2, ...)
{
  return _[a1 linkColor];
}

id objc_msgSend_listCellConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 listCellConfiguration];
}

id objc_msgSend_listenWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 listenWithHandler:];
}

id objc_msgSend_liveVoicemailAccount(void *a1, const char *a2, ...)
{
  return _[a1 liveVoicemailAccount];
}

id objc_msgSend_liveVoicemailEnabled(void *a1, const char *a2, ...)
{
  return _[a1 liveVoicemailEnabled];
}

id objc_msgSend_liveVoicemailWelcomeViewController(void *a1, const char *a2, ...)
{
  return _[a1 liveVoicemailWelcomeViewController];
}

id objc_msgSend_loadAccessibilityConstraints(void *a1, const char *a2, ...)
{
  return _[a1 loadAccessibilityConstraints];
}

id objc_msgSend_loadAudio_withObserverForInterval_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAudio:withObserverForInterval:usingBlock:");
}

id objc_msgSend_loadConstraints(void *a1, const char *a2, ...)
{
  return _[a1 loadConstraints];
}

id objc_msgSend_loadExpandedViewsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 loadExpandedViewsIfNecessary];
}

id objc_msgSend_loadGreeting_(void *a1, const char *a2, ...)
{
  return [a1 loadGreeting:];
}

id objc_msgSend_loadLabelConstraints(void *a1, const char *a2, ...)
{
  return _[a1 loadLabelConstraints];
}

id objc_msgSend_loadLayoutConstraints(void *a1, const char *a2, ...)
{
  return _[a1 loadLayoutConstraints];
}

id objc_msgSend_loadLocalizedTitlesForMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadLocalizedTitlesForMessages:");
}

id objc_msgSend_loadOlderCallsIfNecessaryForRemainingRowCount_(void *a1, const char *a2, ...)
{
  return [a1 loadOlderCallsIfNecessaryForRemainingRowCount:];
}

id objc_msgSend_loadOlderRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 loadOlderRecentCalls];
}

id objc_msgSend_loadRTTConversations(void *a1, const char *a2, ...)
{
  return _[a1 loadRTTConversations];
}

id objc_msgSend_loadRootViewAndContentViews(void *a1, const char *a2, ...)
{
  return _[a1 loadRootViewAndContentViews];
}

id objc_msgSend_loadSubviews(void *a1, const char *a2, ...)
{
  return _[a1 loadSubviews];
}

id objc_msgSend_loadSubviewsLayoutConstraints(void *a1, const char *a2, ...)
{
  return _[a1 loadSubviewsLayoutConstraints];
}

id objc_msgSend_loadTableHeaderView(void *a1, const char *a2, ...)
{
  return _[a1 loadTableHeaderView];
}

id objc_msgSend_loadTipHeaderView(void *a1, const char *a2, ...)
{
  return _[a1 loadTipHeaderView];
}

id objc_msgSend_loadValuesAsynchronouslyForKeys_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 loadValuesAsynchronouslyForKeys:completionHandler:];
}

id objc_msgSend_loadView(void *a1, const char *a2, ...)
{
  return _[a1 loadView];
}

id objc_msgSend_loadViews(void *a1, const char *a2, ...)
{
  return _[a1 loadViews];
}

id objc_msgSend_localParticipantUUID(void *a1, const char *a2, ...)
{
  return _[a1 localParticipantUUID];
}

id objc_msgSend_localSenderIdentityAccountUUID(void *a1, const char *a2, ...)
{
  return _[a1 localSenderIdentityAccountUUID];
}

id objc_msgSend_localSenderIdentityUUID(void *a1, const char *a2, ...)
{
  return _[a1 localSenderIdentityUUID];
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 localeIdentifier];
}

id objc_msgSend_localizedAttributedDowntimeTitleForMessage_(void *a1, const char *a2, ...)
{
  return [a1 localizedAttributedDowntimeTitleForMessage:];
}

id objc_msgSend_localizedAttributedFeedbackText(void *a1, const char *a2, ...)
{
  return _[a1 localizedAttributedFeedbackText];
}

id objc_msgSend_localizedAttributedFeedbackTextForConfidence_locale_(void *a1, const char *a2, ...)
{
  return [a1 localizedAttributedFeedbackTextForConfidence:locale:];
}

id objc_msgSend_localizedAttributedFeedbackTextWithLocale_(void *a1, const char *a2, ...)
{
  return [a1 localizedAttributedFeedbackTextWithLocale:];
}

id objc_msgSend_localizedAttributedRestrictedAlertTitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedAttributedRestrictedAlertTitle];
}

id objc_msgSend_localizedAttributedText(void *a1, const char *a2, ...)
{
  return _[a1 localizedAttributedText];
}

id objc_msgSend_localizedAttributedTextForConfidence_(void *a1, const char *a2, ...)
{
  return [a1 localizedAttributedTextForConfidence:];
}

id objc_msgSend_localizedAttributedTextForMessage(void *a1, const char *a2, ...)
{
  return _[a1 localizedAttributedTextForMessage];
}

id objc_msgSend_localizedAttributedTitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedAttributedTitle];
}

id objc_msgSend_localizedAttributedTitleForConfidence_(void *a1, const char *a2, ...)
{
  return [a1 localizedAttributedTitleForConfidence:];
}

id objc_msgSend_localizedBlockedByExtensionName(void *a1, const char *a2, ...)
{
  return _[a1 localizedBlockedByExtensionName];
}

id objc_msgSend_localizedBundleName(void *a1, const char *a2, ...)
{
  return _[a1 localizedBundleName];
}

id objc_msgSend_localizedContactPropertyLabel(void *a1, const char *a2, ...)
{
  return _[a1 localizedContactPropertyLabel];
}

id objc_msgSend_localizedCount(void *a1, const char *a2, ...)
{
  return _[a1 localizedCount];
}

id objc_msgSend_localizedDate(void *a1, const char *a2, ...)
{
  return _[a1 localizedDate];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedDisplayStringForLabel_propertyName_(void *a1, const char *a2, ...)
{
  return [a1 localizedDisplayStringForLabel:propertyName:];
}

id objc_msgSend_localizedDowntimeTitleCache(void *a1, const char *a2, ...)
{
  return _[a1 localizedDowntimeTitleCache];
}

id objc_msgSend_localizedDuration(void *a1, const char *a2, ...)
{
  return _[a1 localizedDuration];
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 localizedFailureReason];
}

id objc_msgSend_localizedHandleTitleFromMessage_(void *a1, const char *a2, ...)
{
  return [a1 localizedHandleTitleFromMessage:];
}

id objc_msgSend_localizedHeadline(void *a1, const char *a2, ...)
{
  return _[a1 localizedHeadline];
}

id objc_msgSend_localizedLettersForCharacter_(void *a1, const char *a2, ...)
{
  return [a1 localizedLettersForCharacter:];
}

id objc_msgSend_localizedLowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 localizedLowercaseString];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedSenderIdentityTitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedSenderIdentityTitle];
}

id objc_msgSend_localizedShortName(void *a1, const char *a2, ...)
{
  return _[a1 localizedShortName];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForKey:value:table:];
}

id objc_msgSend_localizedStringForLabel_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForLabel:];
}

id objc_msgSend_localizedStringForTimeInterval_timeFormatter_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForTimeInterval:timeFormatter:];
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringWithFormat:];
}

id objc_msgSend_localizedSubheadline(void *a1, const char *a2, ...)
{
  return _[a1 localizedSubheadline];
}

id objc_msgSend_localizedSubtitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedSubtitle];
}

id objc_msgSend_localizedSubtitleCache(void *a1, const char *a2, ...)
{
  return _[a1 localizedSubtitleCache];
}

id objc_msgSend_localizedSubtitleForMessage_(void *a1, const char *a2, ...)
{
  return [a1 localizedSubtitleForMessage:];
}

id objc_msgSend_localizedSubtitleForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 localizedSubtitleForRecentCall:];
}

id objc_msgSend_localizedSubtitleForRecentCall_handle_contact_(void *a1, const char *a2, ...)
{
  return [a1 localizedSubtitleForRecentCall:handle:contact:];
}

id objc_msgSend_localizedSubtitleForRecentEmergencyCall_(void *a1, const char *a2, ...)
{
  return [a1 localizedSubtitleForRecentEmergencyCall:];
}

id objc_msgSend_localizedTitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedTitle];
}

id objc_msgSend_localizedTitleCache(void *a1, const char *a2, ...)
{
  return _[a1 localizedTitleCache];
}

id objc_msgSend_localizedTitleForMessage_(void *a1, const char *a2, ...)
{
  return [a1 localizedTitleForMessage:];
}

id objc_msgSend_localizedTranscriptionMessage(void *a1, const char *a2, ...)
{
  return _[a1 localizedTranscriptionMessage];
}

id objc_msgSend_localizedValidHandlesTitle(void *a1, const char *a2, ...)
{
  return _[a1 localizedValidHandlesTitle];
}

id objc_msgSend_locationInView_(void *a1, const char *a2, ...)
{
  return [a1 locationInView:];
}

id objc_msgSend_logAnalyticsEventPhoneRecentlyDialed(void *a1, const char *a2, ...)
{
  return _[a1 logAnalyticsEventPhoneRecentlyDialed];
}

id objc_msgSend_logCustomGreetingUpdated(void *a1, const char *a2, ...)
{
  return _[a1 logCustomGreetingUpdated];
}

id objc_msgSend_logEvent_withCoreAnalyticsDictionary_(void *a1, const char *a2, ...)
{
  return [a1 logEvent:withCoreAnalyticsDictionary:];
}

id objc_msgSend_logEventForCancelledVoiceCallSpamReport_(void *a1, const char *a2, ...)
{
  return [a1 logEventForCancelledVoiceCallSpamReport];
}

id objc_msgSend_logRecentsScrollingEvent_(void *a1, const char *a2, ...)
{
  return [a1 logRecentsScrollingEvent:];
}

id objc_msgSend_logSearchBarTap(void *a1, const char *a2, ...)
{
  return _[a1 logSearchBarTap];
}

id objc_msgSend_logSearchResultInteraction_cellType_searchLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSearchResultInteraction:cellType:searchLength:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mailActionImage(void *a1, const char *a2, ...)
{
  return _[a1 mailActionImage];
}

id objc_msgSend_mailboxStorageAlertController(void *a1, const char *a2, ...)
{
  return _[a1 mailboxStorageAlertController];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainDisplay(void *a1, const char *a2, ...)
{
  return _[a1 mainDisplay];
}

id objc_msgSend_mainLabel(void *a1, const char *a2, ...)
{
  return _[a1 mainLabel];
}

id objc_msgSend_mainMenuContainerViewController(void *a1, const char *a2, ...)
{
  return _[a1 mainMenuContainerViewController];
}

id objc_msgSend_mainNumberLabel(void *a1, const char *a2, ...)
{
  return _[a1 mainNumberLabel];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _[a1 mainScreen];
}

id objc_msgSend_mainTableView(void *a1, const char *a2, ...)
{
  return _[a1 mainTableView];
}

id objc_msgSend_mainTableViewDataSource(void *a1, const char *a2, ...)
{
  return _[a1 mainTableViewDataSource];
}

id objc_msgSend_makeKeyAndVisible(void *a1, const char *a2, ...)
{
  return _[a1 makeKeyAndVisible];
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return [a1 makeObjectsPerformSelector:];
}

id objc_msgSend_makePersonalNicknameMenuView(void *a1, const char *a2, ...)
{
  return _[a1 makePersonalNicknameMenuView];
}

id objc_msgSend_makeUIForDefaultPNG(void *a1, const char *a2, ...)
{
  return _[a1 makeUIForDefaultPNG];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_marginWidth(void *a1, const char *a2, ...)
{
  return _[a1 marginWidth];
}

id objc_msgSend_markMessagesAsRead_(void *a1, const char *a2, ...)
{
  return [a1 markMessagesAsRead:];
}

id objc_msgSend_markRecentAudioCallsAsRead(void *a1, const char *a2, ...)
{
  return _[a1 markRecentAudioCallsAsRead];
}

id objc_msgSend_markRecentCallsAsRead(void *a1, const char *a2, ...)
{
  return _[a1 markRecentCallsAsRead];
}

id objc_msgSend_markVoicemailsAsRead_(void *a1, const char *a2, ...)
{
  return [a1 markVoicemailsAsRead:];
}

id objc_msgSend_matchInfo(void *a1, const char *a2, ...)
{
  return _[a1 matchInfo];
}

id objc_msgSend_matchedPhoneNumberFor_searchText_(void *a1, const char *a2, ...)
{
  return [a1 matchedPhoneNumberFor:searchText];
}

id objc_msgSend_matchedProperties(void *a1, const char *a2, ...)
{
  return _[a1 matchedProperties];
}

id objc_msgSend_matchedProperties_contains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchedProperties:contains:");
}

id objc_msgSend_maxRecordedDuration(void *a1, const char *a2, ...)
{
  return _[a1 maxRecordedDuration];
}

id objc_msgSend_maxTrackColor(void *a1, const char *a2, ...)
{
  return _[a1 maxTrackColor];
}

id objc_msgSend_maximumAllowedHeight(void *a1, const char *a2, ...)
{
  return _[a1 maximumAllowedHeight];
}

id objc_msgSend_maximumColumnsWithAccessibility(void *a1, const char *a2, ...)
{
  return _[a1 maximumColumnsWithAccessibility];
}

id objc_msgSend_maximumColumnsWithoutAccessibility(void *a1, const char *a2, ...)
{
  return _[a1 maximumColumnsWithoutAccessibility];
}

id objc_msgSend_maximumGreetingDuration(void *a1, const char *a2, ...)
{
  return _[a1 maximumGreetingDuration];
}

id objc_msgSend_maximumGreetingDurationForAccount_(void *a1, const char *a2, ...)
{
  return [a1 maximumGreetingDurationForAccount:];
}

id objc_msgSend_maximumHeightConstraint(void *a1, const char *a2, ...)
{
  return _[a1 maximumHeightConstraint];
}

id objc_msgSend_maximumPasscodeLengthForAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 maximumPasscodeLengthForAccountUUID:];
}

id objc_msgSend_maximumTime(void *a1, const char *a2, ...)
{
  return _[a1 maximumTime];
}

id objc_msgSend_meCardSharingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 meCardSharingEnabled];
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return _[a1 mediaType];
}

id objc_msgSend_menu(void *a1, const char *a2, ...)
{
  return _[a1 menu];
}

id objc_msgSend_menuActions(void *a1, const char *a2, ...)
{
  return _[a1 menuActions];
}

id objc_msgSend_menuActionsWithRoutes_(void *a1, const char *a2, ...)
{
  return [a1 menuActionsWithRoutes:];
}

id objc_msgSend_menuByReplacingChildren_(void *a1, const char *a2, ...)
{
  return [a1 menuByReplacingChildren:];
}

id objc_msgSend_menuChangeHandler(void *a1, const char *a2, ...)
{
  return _[a1 menuChangeHandler];
}

id objc_msgSend_menuWithChildren_(void *a1, const char *a2, ...)
{
  return [a1 menuWithChildren:];
}

id objc_msgSend_menuWithTitle_children_(void *a1, const char *a2, ...)
{
  return [a1 menuWithTitle:children:];
}

id objc_msgSend_menuWithTitle_image_identifier_options_children_(void *a1, const char *a2, ...)
{
  return [a1 menuWithTitle:image:identifier:options:children:];
}

id objc_msgSend_mergeAllCellConstraints(void *a1, const char *a2, ...)
{
  return _[a1 mergeAllCellConstraints];
}

id objc_msgSend_mergeVisibleCells(void *a1, const char *a2, ...)
{
  return _[a1 mergeVisibleCells];
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 messageAtIndex:];
}

id objc_msgSend_messageCountText(void *a1, const char *a2, ...)
{
  return _[a1 messageCountText];
}

id objc_msgSend_messageForIdentifier_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 messageForIdentifier:completionBlock:];
}

id objc_msgSend_messageLabel(void *a1, const char *a2, ...)
{
  return _[a1 messageLabel];
}

id objc_msgSend_messageLabelCenterXAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelCenterXAnchorLayoutConstraint];
}

id objc_msgSend_messageLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_messageLabelFirstBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelFirstBaselineLayoutConstraint];
}

id objc_msgSend_messageLabelFirstBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelFirstBaselineLayoutConstraintConstant];
}

id objc_msgSend_messageLabelLastBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelLastBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_messageLabelLastBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelLastBaselineLayoutConstraint];
}

id objc_msgSend_messageLabelLastBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelLastBaselineLayoutConstraintConstant];
}

id objc_msgSend_messageLabelLeadingLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelLeadingLayoutConstraint];
}

id objc_msgSend_messageLabelLeadingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelLeadingLayoutConstraintConstant];
}

id objc_msgSend_messageLabelTrailingLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelTrailingLayoutConstraint];
}

id objc_msgSend_messageLabelTrailingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 messageLabelTrailingLayoutConstraintConstant];
}

id objc_msgSend_messageMetadataView_didTapButtonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageMetadataView:didTapButtonType:");
}

id objc_msgSend_messagePlaybackQueue(void *a1, const char *a2, ...)
{
  return _[a1 messagePlaybackQueue];
}

id objc_msgSend_messageToPlayFromPlaybackQueue(void *a1, const char *a2, ...)
{
  return _[a1 messageToPlayFromPlaybackQueue];
}

id objc_msgSend_messageToolbar_handleActionForButtonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageToolbar:handleActionForButtonType:");
}

id objc_msgSend_messageToolbarDidSelectRTTButton_(void *a1, const char *a2, ...)
{
  return [a1 messageToolbarDidSelectRTTButton:];
}

id objc_msgSend_messageToolbarShouldShowRTTButton_(void *a1, const char *a2, ...)
{
  return [a1 messageToolbarShouldShowRTTButton:];
}

id objc_msgSend_messageTranscriptAttributedText(void *a1, const char *a2, ...)
{
  return _[a1 messageTranscriptAttributedText];
}

id objc_msgSend_messageTranscriptConfidence(void *a1, const char *a2, ...)
{
  return _[a1 messageTranscriptConfidence];
}

id objc_msgSend_messageTranscriptConfidenceRating(void *a1, const char *a2, ...)
{
  return _[a1 messageTranscriptConfidenceRating];
}

id objc_msgSend_messageTranscriptView_didReceiveTapGesture_(void *a1, const char *a2, ...)
{
  return [a1 messageTranscriptView:didReceiveTapGesture:];
}

id objc_msgSend_messageTranscriptView_didReportFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageTranscriptView:didReportFeedback:");
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _[a1 messageType];
}

id objc_msgSend_messageUUID(void *a1, const char *a2, ...)
{
  return _[a1 messageUUID];
}

id objc_msgSend_messages(void *a1, const char *a2, ...)
{
  return _[a1 messages];
}

id objc_msgSend_messagesActionImage(void *a1, const char *a2, ...)
{
  return _[a1 messagesActionImage];
}

id objc_msgSend_messagesAtIndexPaths_(void *a1, const char *a2, ...)
{
  return [a1 messagesAtIndexPaths:];
}

id objc_msgSend_metadataCache(void *a1, const char *a2, ...)
{
  return _[a1 metadataCache];
}

id objc_msgSend_metadataDestinationIDWithVoicemailMessage_(void *a1, const char *a2, ...)
{
  return [a1 metadataDestinationIDWithVoicemailMessage:];
}

id objc_msgSend_metadataDestinationIDsForCHRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 metadataDestinationIDsForCHRecentCall:];
}

id objc_msgSend_metadataDestinationIDsForCHRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 metadataDestinationIDsForCHRecentCalls:];
}

id objc_msgSend_metadataDestinationIDsForVMVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 metadataDestinationIDsForVMVoicemails];
}

id objc_msgSend_metadataForDestinationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataForDestinationID:");
}

id objc_msgSend_metadataForProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataForProvider:");
}

id objc_msgSend_metadataView(void *a1, const char *a2, ...)
{
  return _[a1 metadataView];
}

id objc_msgSend_metadataViewLeadingConstraint(void *a1, const char *a2, ...)
{
  return _[a1 metadataViewLeadingConstraint];
}

id objc_msgSend_metadataViewLeadingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 metadataViewLeadingLayoutConstraintConstant];
}

id objc_msgSend_metadataViewLeadingLayoutConstraintConstantForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 metadataViewLeadingLayoutConstraintConstantForContentSizeCategory:];
}

id objc_msgSend_metadataViewTapGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 metadataViewTapGestureRecognizer];
}

id objc_msgSend_metadataViewTopConstraint(void *a1, const char *a2, ...)
{
  return _[a1 metadataViewTopConstraint];
}

id objc_msgSend_metadataViewTrailingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 metadataViewTrailingLayoutConstraintConstant];
}

id objc_msgSend_metadataViewWithoutUnreadIndicatorImageViewLeadingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 metadataViewWithoutUnreadIndicatorImageViewLeadingLayoutConstraintConstant];
}

id objc_msgSend_metadataViewWithoutUnreadIndicatorImageViewLeadingLayoutConstraintConstant_(void *a1, const char *a2, ...)
{
  return [a1 metadataViewWithoutUnreadIndicatorImageViewLeadingLayoutConstraintConstant:];
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return [a1 methodForSelector:];
}

id objc_msgSend_metricsCollectionValidForLocale_(void *a1, const char *a2, ...)
{
  return [a1 metricsCollectionValidForLocale:];
}

id objc_msgSend_metricsForTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 metricsForTextStyle:];
}

id objc_msgSend_minimumPasscodeLengthForAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 minimumPasscodeLengthForAccountUUID:];
}

id objc_msgSend_minimumRowHeight(void *a1, const char *a2, ...)
{
  return _[a1 minimumRowHeight];
}

id objc_msgSend_minimumTime(void *a1, const char *a2, ...)
{
  return _[a1 minimumTime];
}

id objc_msgSend_mock(void *a1, const char *a2, ...)
{
  return _[a1 mock];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_modifyingStateLock(void *a1, const char *a2, ...)
{
  return _[a1 modifyingStateLock];
}

id objc_msgSend_monospacedDigitSystemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return [a1 monospacedDigitSystemFontOfSize:];
}

id objc_msgSend_mostRecentCallHandleValue(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentCallHandleValue];
}

id objc_msgSend_moveEntryAtIndex_toIndex_(void *a1, const char *a2, ...)
{
  return [a1 moveEntryAtIndex:toIndex:];
}

id objc_msgSend_moveMessagesToInbox_(void *a1, const char *a2, ...)
{
  return [a1 moveMessagesToInbox];
}

id objc_msgSend_moveObjectAtIndex_toIndex_inArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveObjectAtIndex:toIndex:inArray:");
}

id objc_msgSend_multipleContactsBlockViewControllerForRecentCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multipleContactsBlockViewControllerForRecentCall:");
}

id objc_msgSend_multipleContactsViewControllerForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 multipleContactsViewControllerForRecentCall];
}

id objc_msgSend_mutableAttributedStringWithString_alignment_symbolType_foregroundColor_usingSmallFont_(void *a1, const char *a2, ...)
{
  return [a1 mutableAttributedStringWithString:alignment:symbolType:foregroundColor:usingSmallFont:];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_muteActionTitle(void *a1, const char *a2, ...)
{
  return _[a1 muteActionTitle];
}

id objc_msgSend_muteActionTitleForAudioRoutingMenuController_(void *a1, const char *a2, ...)
{
  return [a1 muteActionTitleForAudioRoutingMenuController:];
}

id objc_msgSend_muteMenuAction(void *a1, const char *a2, ...)
{
  return _[a1 muteMenuAction];
}

id objc_msgSend_muteRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 muteRouteGlyphForDisplayStyle:];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameAndLabelFontSize(void *a1, const char *a2, ...)
{
  return _[a1 nameAndLabelFontSize];
}

id objc_msgSend_nameAndLabelLabel(void *a1, const char *a2, ...)
{
  return _[a1 nameAndLabelLabel];
}

id objc_msgSend_nameAndPhotoEnabled(void *a1, const char *a2, ...)
{
  return _[a1 nameAndPhotoEnabled];
}

id objc_msgSend_nameAndPhotoEnabledC3(void *a1, const char *a2, ...)
{
  return _[a1 nameAndPhotoEnabledC3];
}

id objc_msgSend_nameLabel(void *a1, const char *a2, ...)
{
  return _[a1 nameLabel];
}

id objc_msgSend_nameLabelBaselineConstraint(void *a1, const char *a2, ...)
{
  return _[a1 nameLabelBaselineConstraint];
}

id objc_msgSend_nameLabelBaselineConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 nameLabelBaselineConstraintConstant];
}

id objc_msgSend_nameLabelVerticalLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 nameLabelVerticalLayoutConstraint];
}

id objc_msgSend_nameLabelVerticalLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 nameLabelVerticalLayoutConstraintConstant];
}

id objc_msgSend_navBarGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 navBarGestureRecognizer];
}

id objc_msgSend_navigationBar(void *a1, const char *a2, ...)
{
  return _[a1 navigationBar];
}

id objc_msgSend_navigationBarText(void *a1, const char *a2, ...)
{
  return _[a1 navigationBarText];
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _[a1 navigationController];
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _[a1 navigationItem];
}

id objc_msgSend_needsManualInCallSounds(void *a1, const char *a2, ...)
{
  return _[a1 needsManualInCallSounds];
}

id objc_msgSend_needsReloadData(void *a1, const char *a2, ...)
{
  return _[a1 needsReloadData];
}

id objc_msgSend_negativeFeedbackURL(void *a1, const char *a2, ...)
{
  return _[a1 negativeFeedbackURL];
}

id objc_msgSend_networkReachable(void *a1, const char *a2, ...)
{
  return _[a1 networkReachable];
}

id objc_msgSend_networkUnavailableAlertControllerWithCallProvider_dialType_senderIdentityUUID_(void *a1, const char *a2, ...)
{
  return [a1 networkUnavailableAlertControllerWithCallProvider:dialType:senderIdentityUUID:];
}

id objc_msgSend_neutralFeedbackURL(void *a1, const char *a2, ...)
{
  return _[a1 neutralFeedbackURL];
}

id objc_msgSend_newAddContactButton(void *a1, const char *a2, ...)
{
  return _[a1 newAddContactButton];
}

id objc_msgSend_newCallButton(void *a1, const char *a2, ...)
{
  return _[a1 newCallButton];
}

id objc_msgSend_newContactResultButton(void *a1, const char *a2, ...)
{
  return _[a1 newContactResultButton];
}

id objc_msgSend_newDeleteButton(void *a1, const char *a2, ...)
{
  return _[a1 newDeleteButton];
}

id objc_msgSend_newLCDView(void *a1, const char *a2, ...)
{
  return _[a1 newLCDView];
}

id objc_msgSend_newNumberPadView(void *a1, const char *a2, ...)
{
  return _[a1 newNumberPadView];
}

id objc_msgSend_newOverlayView(void *a1, const char *a2, ...)
{
  return _[a1 newOverlayView];
}

id objc_msgSend_newSearchButton(void *a1, const char *a2, ...)
{
  return _[a1 newSearchButton];
}

id objc_msgSend_newWithTestName_parameters_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 newWithTestName:parameters:completionHandler:];
}

id objc_msgSend_newestSuggestedContactForDestinationID_(void *a1, const char *a2, ...)
{
  return [a1 newestSuggestedContactForDestinationID:];
}

id objc_msgSend_nextFocusedItem(void *a1, const char *a2, ...)
{
  return _[a1 nextFocusedItem];
}

id objc_msgSend_nicknameEditButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 nicknameEditButtonItem];
}

id objc_msgSend_noContentBannerView(void *a1, const char *a2, ...)
{
  return _[a1 noContentBannerView];
}

id objc_msgSend_noContentViewController(void *a1, const char *a2, ...)
{
  return _[a1 noContentViewController];
}

id objc_msgSend_normalizedHandleWithDestinationID_(void *a1, const char *a2, ...)
{
  return [a1 normalizedHandleWithDestinationID];
}

id objc_msgSend_normalizedPhoneNumberHandleForValue_isoCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 normalizedPhoneNumberHandleForValue:isoCountryCode:];
}

id objc_msgSend_normalizedValue(void *a1, const char *a2, ...)
{
  return _[a1 normalizedValue];
}

id objc_msgSend_notificationCategoryIsAllowed_(void *a1, const char *a2, ...)
{
  return [a1 notificationCategoryIsAllowed:];
}

id objc_msgSend_notificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 notificationCenter];
}

id objc_msgSend_notificationEvent(void *a1, const char *a2, ...)
{
  return _[a1 notificationEvent];
}

id objc_msgSend_notificationWithName_object_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 notificationWithName:object:userInfo:];
}

id objc_msgSend_notifyDelegatesRecentsController_didChangeCalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDelegatesRecentsController:didChangeCalls:");
}

id objc_msgSend_notifyDelegatesRecentsController_didChangeUnreadCallCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDelegatesRecentsController:didChangeUnreadCallCount:");
}

id objc_msgSend_notifyDelegatesRecentsController_didCompleteFetchingCalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDelegatesRecentsController:didCompleteFetchingCalls:");
}

id objc_msgSend_notifyDelegatesRecentsController_didUpdateCalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDelegatesRecentsController:didUpdateCalls:");
}

id objc_msgSend_numberForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 numberForKey:defaultValue:];
}

id objc_msgSend_numberFormatter(void *a1, const char *a2, ...)
{
  return _[a1 numberFormatter];
}

id objc_msgSend_numberLabelFont(void *a1, const char *a2, ...)
{
  return _[a1 numberLabelFont];
}

id objc_msgSend_numberLabelHorizontalConstraints(void *a1, const char *a2, ...)
{
  return _[a1 numberLabelHorizontalConstraints];
}

id objc_msgSend_numberLabelMinimumFontSize(void *a1, const char *a2, ...)
{
  return _[a1 numberLabelMinimumFontSize];
}

id objc_msgSend_numberOfColumns(void *a1, const char *a2, ...)
{
  return _[a1 numberOfColumns];
}

id objc_msgSend_numberOfLines(void *a1, const char *a2, ...)
{
  return _[a1 numberOfLines];
}

id objc_msgSend_numberOfLinesInSubtitleLabel(void *a1, const char *a2, ...)
{
  return _[a1 numberOfLinesInSubtitleLabel];
}

id objc_msgSend_numberOfOccurrences(void *a1, const char *a2, ...)
{
  return _[a1 numberOfOccurrences];
}

id objc_msgSend_numberOfRows(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRows];
}

id objc_msgSend_numberOfRowsForAccountsView_(void *a1, const char *a2, ...)
{
  return [a1 numberOfRowsForAccountsView:];
}

id objc_msgSend_numberOfRowsInSection_(void *a1, const char *a2, ...)
{
  return [a1 numberOfRowsInSection:];
}

id objc_msgSend_numberOfSections(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSections];
}

id objc_msgSend_numberOfSectionsInTableView_(void *a1, const char *a2, ...)
{
  return [a1 numberOfSectionsInTableView:];
}

id objc_msgSend_numberOfViewCellsForPhoneCallContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfViewCellsForPhoneCallContainer:");
}

id objc_msgSend_numberPadButtonsForCharacters_(void *a1, const char *a2, ...)
{
  return [a1 numberPadButtonsForCharacters:];
}

id objc_msgSend_numberPadCharacterForString_(void *a1, const char *a2, ...)
{
  return [a1 numberPadCharacterForString:];
}

id objc_msgSend_numberTextField(void *a1, const char *a2, ...)
{
  return _[a1 numberTextField];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithCGFloat_(void *a1, const char *a2, ...)
{
  return [a1 numberWithCGFloat:];
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return [a1 numberWithFloat:];
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInt:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInt:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLongLong:];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_onboardingController(void *a1, const char *a2, ...)
{
  return _[a1 onboardingController];
}

id objc_msgSend_openApplication_options_withResult_(void *a1, const char *a2, ...)
{
  return [a1 openApplication:options:withResult:];
}

id objc_msgSend_openFeedbackURL_(void *a1, const char *a2, ...)
{
  return [a1 openFeedbackURL:];
}

id objc_msgSend_openURL_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 openURL:withCompletionHandler:];
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _[a1 operations];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_orangeColor(void *a1, const char *a2, ...)
{
  return _[a1 orangeColor];
}

id objc_msgSend_orderFront_(void *a1, const char *a2, ...)
{
  return [a1 orderFront:];
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return [a1 orderedSetWithArray:];
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_originalBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 originalBackgroundColor];
}

id objc_msgSend_outerCircleDiameter(void *a1, const char *a2, ...)
{
  return _[a1 outerCircleDiameter];
}

id objc_msgSend_outgoingCallIconImageView(void *a1, const char *a2, ...)
{
  return _[a1 outgoingCallIconImageView];
}

id objc_msgSend_outgoingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 outgoingIndicator];
}

id objc_msgSend_outgoingLocalParticipantUUID(void *a1, const char *a2, ...)
{
  return _[a1 outgoingLocalParticipantUUID];
}

id objc_msgSend_outputFile(void *a1, const char *a2, ...)
{
  return _[a1 outputFile];
}

id objc_msgSend_outputURL(void *a1, const char *a2, ...)
{
  return _[a1 outputURL];
}

id objc_msgSend_outputs(void *a1, const char *a2, ...)
{
  return _[a1 outputs];
}

id objc_msgSend_partWithView_type_(void *a1, const char *a2, ...)
{
  return [a1 partWithView:type:];
}

id objc_msgSend_passcodeViewControllerForAccount_(void *a1, const char *a2, ...)
{
  return [a1 passcodeViewControllerForAccount:];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return [a1 pathForResource:ofType:];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pauseCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 pauseCharacterSet];
}

id objc_msgSend_pauseGreeting(void *a1, const char *a2, ...)
{
  return _[a1 pauseGreeting];
}

id objc_msgSend_pendingSearchControllerActivation(void *a1, const char *a2, ...)
{
  return _[a1 pendingSearchControllerActivation];
}

id objc_msgSend_pendingSearchText(void *a1, const char *a2, ...)
{
  return _[a1 pendingSearchText];
}

id objc_msgSend_pendingUpdatedRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 pendingUpdatedRecentCalls];
}

id objc_msgSend_performActionWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 performActionWithCompletion:];
}

id objc_msgSend_performBatchUpdates_completion_(void *a1, const char *a2, ...)
{
  return [a1 performBatchUpdates:];
}

id objc_msgSend_performCallActionForCallProvider_(void *a1, const char *a2, ...)
{
  return [a1 performCallActionForCallProvider:];
}

id objc_msgSend_performCallActionForCallProvider_video_(void *a1, const char *a2, ...)
{
  return [a1 performCallActionForCallProvider:video:];
}

id objc_msgSend_performCallActionForCallProvider_video_senderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 performCallActionForCallProvider:video:senderIdentity:];
}

id objc_msgSend_performCharacterAddAction_(void *a1, const char *a2, ...)
{
  return [a1 performCharacterAddAction:];
}

id objc_msgSend_performDeleteAction(void *a1, const char *a2, ...)
{
  return _[a1 performDeleteAction];
}

id objc_msgSend_performDeleteAtIndexPaths_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 performDeleteAtIndexPaths:completionBlock:];
}

id objc_msgSend_performDialRequest_(void *a1, const char *a2, ...)
{
  return [a1 performDialRequest:];
}

id objc_msgSend_performDialRequestForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 performDialRequestForRecentCall:];
}

id objc_msgSend_performJoinRequestForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 performJoinRequestForRecentCall];
}

id objc_msgSend_performJoinRequestForRecentCall_overrideProvider_(void *a1, const char *a2, ...)
{
  return [a1 performJoinRequestForRecentCall:overrideProvider:];
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:];
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:withObject:afterDelay:];
}

id objc_msgSend_performSynchronousBlock_(void *a1, const char *a2, ...)
{
  return [a1 performSynchronousBlock:];
}

id objc_msgSend_performTableViewDestructiveActionAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 performTableViewDestructiveActionAtIndexPath:];
}

id objc_msgSend_performTableViewRestoreActionAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 performTableViewRestoreActionAtIndexPath:];
}

id objc_msgSend_performTapActionCancelForHighlightedKey(void *a1, const char *a2, ...)
{
  return _[a1 performTapActionCancelForHighlightedKey];
}

id objc_msgSend_performTapActionDownForHighlightedKey(void *a1, const char *a2, ...)
{
  return _[a1 performTapActionDownForHighlightedKey];
}

id objc_msgSend_performTapActionEndForHighlightedKey(void *a1, const char *a2, ...)
{
  return _[a1 performTapActionEndForHighlightedKey];
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return [a1 performWithoutAnimation:];
}

id objc_msgSend_persistBootSessionID(void *a1, const char *a2, ...)
{
  return _[a1 persistBootSessionID];
}

id objc_msgSend_phCarPlayImageNamed_(void *a1, const char *a2, ...)
{
  return [a1 phCarPlayImageNamed:];
}

id objc_msgSend_phCarPlayImageNamed_inBundle_(void *a1, const char *a2, ...)
{
  return [a1 phCarPlayImageNamed:inBundle:];
}

id objc_msgSend_phPathForImageNamed_inBundle_(void *a1, const char *a2, ...)
{
  return [a1 phPathForImageNamed:inBundle:];
}

id objc_msgSend_phPreferredFontDescriptorForTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 phPreferredFontDescriptorForTextStyle:];
}

id objc_msgSend_phPreferredFontDescriptorForTextStyle_addingSymbolicTraits_(void *a1, const char *a2, ...)
{
  return [a1 phPreferredFontDescriptorForTextStyle:addingSymbolicTraits:];
}

id objc_msgSend_phPreferredTightLeadingFontForTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 phPreferredTightLeadingFontForTextStyle:];
}

id objc_msgSend_ph_supportsLocalParticipantBadge(void *a1, const char *a2, ...)
{
  return [a1 ph_supportsLocalParticipantBadge];
}

id objc_msgSend_phoneCallContainer_avatarViewControllerForViewCellAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneCallContainer:avatarViewControllerForViewCellAtIndex:");
}

id objc_msgSend_phoneCallContainer_cellIsDimmedAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 phoneCallContainer:cellIsDimmedAtIndex:];
}

id objc_msgSend_phoneCallContainer_localizedSenderIdentityForViewCellAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 phoneCallContainer:localizedSenderIdentityForViewCellAtIndex:];
}

id objc_msgSend_phoneCallContainer_phoneCallViewTappedAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 phoneCallContainer:phoneCallViewTappedAtIndex:];
}

id objc_msgSend_phoneCallContainer_subtitleColorForViewCellAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 phoneCallContainer:subtitleColorForViewCellAtIndex:];
}

id objc_msgSend_phoneCallContainer_subtitleForViewCellAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 phoneCallContainer:subtitleForViewCellAtIndex:];
}

id objc_msgSend_phoneCallContainer_titleForViewCellAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneCallContainer:titleForViewCellAtIndex:");
}

id objc_msgSend_phoneKit_isAuthorized(void *a1, const char *a2, ...)
{
  return [a1 phoneKit_isAuthorized];
}

id objc_msgSend_phoneNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 phoneNavigationController];
}

id objc_msgSend_phoneNumberPrefixHint(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumberPrefixHint];
}

id objc_msgSend_phoneNumberTypeLabel(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumberTypeLabel];
}

id objc_msgSend_phoneNumberWithDigits_countryCode_(void *a1, const char *a2, ...)
{
  return [a1 phoneNumberWithDigits:countryCode:];
}

id objc_msgSend_phoneNumberWithStringValue_(void *a1, const char *a2, ...)
{
  return [a1 phoneNumberWithStringValue:];
}

id objc_msgSend_phoneNumbers(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumbers];
}

id objc_msgSend_phonePad_appendString_(void *a1, const char *a2, ...)
{
  return [a1 phonePad:appendString:];
}

id objc_msgSend_phonePad_appendString_playDTMFTone_(void *a1, const char *a2, ...)
{
  return [a1 phonePad:appendString:playDTMFTone:];
}

id objc_msgSend_phonePadDeleteLastDigit_(void *a1, const char *a2, ...)
{
  return [a1 phonePadDeleteLastDigit:];
}

id objc_msgSend_phonePadView(void *a1, const char *a2, ...)
{
  return _[a1 phonePadView];
}

id objc_msgSend_phonePadViewTopConstraint(void *a1, const char *a2, ...)
{
  return _[a1 phonePadViewTopConstraint];
}

id objc_msgSend_phonePadViewTopShouldConstrainToLCDView(void *a1, const char *a2, ...)
{
  return _[a1 phonePadViewTopShouldConstrainToLCDView];
}

id objc_msgSend_phoneRecentsAvatarsCarplayEnabled(void *a1, const char *a2, ...)
{
  return _[a1 phoneRecentsAvatarsCarplayEnabled];
}

id objc_msgSend_phoneRecentsAvatarsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 phoneRecentsAvatarsEnabled];
}

id objc_msgSend_pickHandsetRoute(void *a1, const char *a2, ...)
{
  return _[a1 pickHandsetRoute];
}

id objc_msgSend_pickRouteWithUID_(void *a1, const char *a2, ...)
{
  return [a1 pickRouteWithUID:];
}

id objc_msgSend_pickSpeakerRoute(void *a1, const char *a2, ...)
{
  return _[a1 pickSpeakerRoute];
}

id objc_msgSend_pickableRoutesForTTY(void *a1, const char *a2, ...)
{
  return _[a1 pickableRoutesForTTY];
}

id objc_msgSend_pidForApplication_(void *a1, const char *a2, ...)
{
  return [a1 pidForApplication];
}

id objc_msgSend_pillView(void *a1, const char *a2, ...)
{
  return _[a1 pillView];
}

id objc_msgSend_pillViewTopOffset(void *a1, const char *a2, ...)
{
  return _[a1 pillViewTopOffset];
}

id objc_msgSend_placeCallWithRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 placeCallWithRecentCall:];
}

id objc_msgSend_play(void *a1, const char *a2, ...)
{
  return _[a1 play];
}

id objc_msgSend_playDTMFToneForKey_(void *a1, const char *a2, ...)
{
  return [a1 playDTMFToneForKey:];
}

id objc_msgSend_playGreeting(void *a1, const char *a2, ...)
{
  return _[a1 playGreeting];
}

id objc_msgSend_playMessage_(void *a1, const char *a2, ...)
{
  return [a1 playMessage:];
}

id objc_msgSend_playMessageFromPlaybackQueue(void *a1, const char *a2, ...)
{
  return _[a1 playMessageFromPlaybackQueue];
}

id objc_msgSend_playMessageOnReloadData(void *a1, const char *a2, ...)
{
  return _[a1 playMessageOnReloadData];
}

id objc_msgSend_playMessageWithID_(void *a1, const char *a2, ...)
{
  return [a1 playMessageWithID];
}

id objc_msgSend_playPauseButton(void *a1, const char *a2, ...)
{
  return _[a1 playPauseButton];
}

id objc_msgSend_playStopButton(void *a1, const char *a2, ...)
{
  return _[a1 playStopButton];
}

id objc_msgSend_playStopButtonTapped(void *a1, const char *a2, ...)
{
  return _[a1 playStopButtonTapped];
}

id objc_msgSend_playURL_(void *a1, const char *a2, ...)
{
  return [a1 playURL:];
}

id objc_msgSend_playbackControls_didRequestState_(void *a1, const char *a2, ...)
{
  return [a1 playbackControls:didRequestState:];
}

id objc_msgSend_playbackControlsCell(void *a1, const char *a2, ...)
{
  return _[a1 playbackControlsCell];
}

id objc_msgSend_player(void *a1, const char *a2, ...)
{
  return _[a1 player];
}

id objc_msgSend_playerControlButton(void *a1, const char *a2, ...)
{
  return _[a1 playerControlButton];
}

id objc_msgSend_playerControlButtonWidthLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 playerControlButtonWidthLayoutConstraintConstant];
}

id objc_msgSend_playerController(void *a1, const char *a2, ...)
{
  return _[a1 playerController];
}

id objc_msgSend_playerController_didChangeToCurrentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerController:didChangeToCurrentTime:");
}

id objc_msgSend_playerController_didChangeToDuration_(void *a1, const char *a2, ...)
{
  return [a1 playerController:didChangeToDuration:];
}

id objc_msgSend_playerController_didChangeToRate_(void *a1, const char *a2, ...)
{
  return [a1 playerController:didChangeToRate:];
}

id objc_msgSend_playerController_didChangeToStatus_(void *a1, const char *a2, ...)
{
  return [a1 playerController:didChangeToStatus:];
}

id objc_msgSend_playerController_didChangeToTimeControlStatus_(void *a1, const char *a2, ...)
{
  return [a1 playerController:didChangeToTimeControlStatus:];
}

id objc_msgSend_playerController_didSeekToTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerController:didSeekToTime:");
}

id objc_msgSend_playerController_willChangeToDuration_(void *a1, const char *a2, ...)
{
  return [a1 playerController:willChangeToDuration:];
}

id objc_msgSend_playerController_willChangeToRate_(void *a1, const char *a2, ...)
{
  return [a1 playerController:willChangeToRate:];
}

id objc_msgSend_playerController_willChangeToStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerController:willChangeToStatus:");
}

id objc_msgSend_playerController_willChangeToTimeControlStatus_(void *a1, const char *a2, ...)
{
  return [a1 playerController:willChangeToTimeControlStatus:];
}

id objc_msgSend_playerController_willSeekToTime_(void *a1, const char *a2, ...)
{
  return [a1 playerController:willSeekToTime:];
}

id objc_msgSend_playerControllerDidReset_(void *a1, const char *a2, ...)
{
  return [a1 playerControllerDidReset:];
}

id objc_msgSend_playerControlsView(void *a1, const char *a2, ...)
{
  return _[a1 playerControlsView];
}

id objc_msgSend_playerControlsViewBottomAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 playerControlsViewBottomAnchorLayoutConstraint];
}

id objc_msgSend_playerControlsViewLayoutConstraints(void *a1, const char *a2, ...)
{
  return _[a1 playerControlsViewLayoutConstraints];
}

id objc_msgSend_playerControlsViewRightLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 playerControlsViewRightLayoutConstraintConstant];
}

id objc_msgSend_playerControlsViewTopAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 playerControlsViewTopAnchorLayoutConstraint];
}

id objc_msgSend_playerControlsViewTopAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 playerControlsViewTopAnchorLayoutConstraintConstant];
}

id objc_msgSend_playerItem(void *a1, const char *a2, ...)
{
  return _[a1 playerItem];
}

id objc_msgSend_playerItemWithAsset_(void *a1, const char *a2, ...)
{
  return [a1 playerItemWithAsset:];
}

id objc_msgSend_playerItemWithURL_(void *a1, const char *a2, ...)
{
  return [a1 playerItemWithURL:];
}

id objc_msgSend_playerState(void *a1, const char *a2, ...)
{
  return _[a1 playerState];
}

id objc_msgSend_playerTimelineSlider_didChangeElapsedTime_(void *a1, const char *a2, ...)
{
  return [a1 playerTimelineSlider:didChangeElapsedTime:];
}

id objc_msgSend_playerTimelineSliderScrubbingDidBegin_(void *a1, const char *a2, ...)
{
  return [a1 playerTimelineSliderScrubbingDidBegin:];
}

id objc_msgSend_playerTimelineSliderScrubbingDidCancel_(void *a1, const char *a2, ...)
{
  return [a1 playerTimelineSliderScrubbingDidCancel:];
}

id objc_msgSend_playerTimelineSliderScrubbingDidEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerTimelineSliderScrubbingDidEnd:");
}

id objc_msgSend_playerWithPlayerItem_(void *a1, const char *a2, ...)
{
  return [a1 playerWithPlayerItem:];
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _[a1 pointSize];
}

id objc_msgSend_policyForAddresses_forBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 policyForAddresses:forBundleIdentifier:];
}

id objc_msgSend_popCurrentNavigationControllerToRootViewControllerIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 popCurrentNavigationControllerToRootViewControllerIfAppropriate];
}

id objc_msgSend_popToRootViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return [a1 popToRootViewControllerAnimated:];
}

id objc_msgSend_popToViewController_animated_(void *a1, const char *a2, ...)
{
  return [a1 popToViewController:animated:];
}

id objc_msgSend_popViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return [a1 popViewControllerAnimated:];
}

id objc_msgSend_popViewControllerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 popViewControllerIfNeeded];
}

id objc_msgSend_popoverPresentationController(void *a1, const char *a2, ...)
{
  return _[a1 popoverPresentationController];
}

id objc_msgSend_populateCachesForRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 populateCachesForRecentCalls:];
}

id objc_msgSend_populateItemCacheForRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 populateItemCacheForRecentCalls:];
}

id objc_msgSend_portType(void *a1, const char *a2, ...)
{
  return _[a1 portType];
}

id objc_msgSend_positionFromPosition_offset_(void *a1, const char *a2, ...)
{
  return [a1 positionFromPosition:offset:];
}

id objc_msgSend_positiveFeedbackURL(void *a1, const char *a2, ...)
{
  return _[a1 positiveFeedbackURL];
}

id objc_msgSend_postCNContactsClientDidDisplayFavoritesNotification(void *a1, const char *a2, ...)
{
  return _[a1 postCNContactsClientDidDisplayFavoritesNotification];
}

id objc_msgSend_postMPVoicemailControllerMessagesDidChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 postMPVoicemailControllerMessagesDidChangeNotification];
}

id objc_msgSend_postMPVoicemailControllerUnreadMessageCountDidChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 postMPVoicemailControllerUnreadMessageCountDidChangeNotification];
}

id objc_msgSend_postMessageOverlayIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 postMessageOverlayIfNeeded];
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return [a1 postNotificationName:object:];
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 postNotificationName:object:userInfo:];
}

id objc_msgSend_postalAddresses(void *a1, const char *a2, ...)
{
  return _[a1 postalAddresses];
}

id objc_msgSend_predicateForCallsWithUniqueID_(void *a1, const char *a2, ...)
{
  return [a1 predicateForCallsWithUniqueID:];
}

id objc_msgSend_predicateForContactsMatchingHandleStrings_(void *a1, const char *a2, ...)
{
  return [a1 predicateForContactsMatchingHandleStrings:];
}

id objc_msgSend_predicateForLegacyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 predicateForLegacyIdentifier:];
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithBlock:];
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithFormat:];
}

id objc_msgSend_predicateWithValue_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithValue:];
}

id objc_msgSend_preferencesValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 preferencesValueForKey:];
}

id objc_msgSend_preferencesValueForKey_domain_(void *a1, const char *a2, ...)
{
  return [a1 preferencesValueForKey:domain:];
}

id objc_msgSend_preferredBoldFontWithTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 preferredBoldFontWithTextStyle:];
}

id objc_msgSend_preferredCaption1BoldFont(void *a1, const char *a2, ...)
{
  return _[a1 preferredCaption1BoldFont];
}

id objc_msgSend_preferredCaption1Font(void *a1, const char *a2, ...)
{
  return _[a1 preferredCaption1Font];
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 preferredContentSizeCategory];
}

id objc_msgSend_preferredContentSizeCategoryAllowsMultilineTitleForDoubleLineCells(void *a1, const char *a2, ...)
{
  return _[a1 preferredContentSizeCategoryAllowsMultilineTitleForDoubleLineCells];
}

id objc_msgSend_preferredFontDescriptorWithTextStyle_addingSymbolicTraits_options_(void *a1, const char *a2, ...)
{
  return [a1 preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:];
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 preferredFontForTextStyle:];
}

id objc_msgSend_preferredFontWithTextStyle_(void *a1, const char *a2, ...)
{
  return [a1 preferredFontWithTextStyle:];
}

id objc_msgSend_preferredFormat(void *a1, const char *a2, ...)
{
  return _[a1 preferredFormat];
}

id objc_msgSend_preferredIntrinsicContentSizeWidth(void *a1, const char *a2, ...)
{
  return _[a1 preferredIntrinsicContentSizeWidth];
}

id objc_msgSend_preferredMaxLayoutWidth(void *a1, const char *a2, ...)
{
  return _[a1 preferredMaxLayoutWidth];
}

id objc_msgSend_preferredPhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 preferredPhoneNumber];
}

id objc_msgSend_preferredSubheadline1Font(void *a1, const char *a2, ...)
{
  return _[a1 preferredSubheadline1Font];
}

id objc_msgSend_prepareForSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 prepareForSnapshot];
}

id objc_msgSend_presentBlockAllAlertFor_(void *a1, const char *a2, ...)
{
  return [a1 presentBlockAllAlertFor:];
}

id objc_msgSend_presentBlockUnknownParticipantsFor_(void *a1, const char *a2, ...)
{
  return [a1 presentBlockUnknownParticipantsFor:];
}

id objc_msgSend_presentContactPickerViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return [a1 presentContactPickerViewControllerAnimated:YES completion:nil];
}

id objc_msgSend_presentConversationForUUID_(void *a1, const char *a2, ...)
{
  return [a1 presentConversationForUUID:];
}

id objc_msgSend_presentFaceTimeSpamReportAndBlockAlertFor_(void *a1, const char *a2, ...)
{
  return [a1 presentFaceTimeSpamReportAndBlockAlertFor:];
}

id objc_msgSend_presentGroupFaceTimeSpamReportAndBlockAlertFor_(void *a1, const char *a2, ...)
{
  return [a1 presentGroupFaceTimeSpamReportAndBlockAlertFor:];
}

id objc_msgSend_presentOnboardingControllerOnLaunchIfNeededFrom_withContactStore_(void *a1, const char *a2, ...)
{
  return [a1 presentOnboardingControllerOnLaunchIfNeededFrom:withContactStore:];
}

id objc_msgSend_presentOnboardingFlowIfNeededForMode_fromViewController_(void *a1, const char *a2, ...)
{
  return [a1 presentOnboardingFlowIfNeededForMode:fromViewController:];
}

id objc_msgSend_presentOnboardingIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 presentOnboardingIfNeeded];
}

id objc_msgSend_presentOnboardingViewController(void *a1, const char *a2, ...)
{
  return _[a1 presentOnboardingViewController];
}

id objc_msgSend_presentScreenTimeShield(void *a1, const char *a2, ...)
{
  return _[a1 presentScreenTimeShield];
}

id objc_msgSend_presentSearch(void *a1, const char *a2, ...)
{
  return _[a1 presentSearch];
}

id objc_msgSend_presentUnknownCallersViewController(void *a1, const char *a2, ...)
{
  return _[a1 presentUnknownCallersViewController];
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return [a1 presentViewController:animated:completion:];
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _[a1 presentedViewController];
}

id objc_msgSend_presentingViewController(void *a1, const char *a2, ...)
{
  return _[a1 presentingViewController];
}

id objc_msgSend_pressesBegan_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 pressesBegan:withEvent:];
}

id objc_msgSend_pressesCancelled_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 pressesCancelled:withEvent:];
}

id objc_msgSend_pressesEnded_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 pressesEnded:withEvent:];
}

id objc_msgSend_previousAccountProvisioningRequired(void *a1, const char *a2, ...)
{
  return _[a1 previousAccountProvisioningRequired];
}

id objc_msgSend_previousTextSuggestion(void *a1, const char *a2, ...)
{
  return _[a1 previousTextSuggestion];
}

id objc_msgSend_previouslyFocusedItem(void *a1, const char *a2, ...)
{
  return _[a1 previouslyFocusedItem];
}

id objc_msgSend_prewarmSearchControllersAfterSeconds_(void *a1, const char *a2, ...)
{
  return [a1 prewarmSearchControllersAfterSeconds:];
}

id objc_msgSend_primaryInteractionModel(void *a1, const char *a2, ...)
{
  return _[a1 primaryInteractionModel];
}

id objc_msgSend_prioritizedSenderIdentities(void *a1, const char *a2, ...)
{
  return _[a1 prioritizedSenderIdentities];
}

id objc_msgSend_processNumberInLatin_(void *a1, const char *a2, ...)
{
  return [a1 processNumberInLatin];
}

id objc_msgSend_programmaticallySelectRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 programmaticallySelectRowAtIndexPath:];
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_progressItem(void *a1, const char *a2, ...)
{
  return _[a1 progressItem];
}

id objc_msgSend_progressView(void *a1, const char *a2, ...)
{
  return _[a1 progressView];
}

id objc_msgSend_progressViewBottomLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewBottomLayoutConstraint];
}

id objc_msgSend_progressViewCenterXLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewCenterXLayoutConstraint];
}

id objc_msgSend_progressViewCenterYAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewCenterYAnchorConstraint];
}

id objc_msgSend_progressViewHeightAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewHeightAnchorConstraint];
}

id objc_msgSend_progressViewHeightAnchorConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 progressViewHeightAnchorConstraintConstant];
}

id objc_msgSend_progressViewLeadingAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewLeadingAnchorConstraint];
}

id objc_msgSend_progressViewLeadingLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewLeadingLayoutConstraint];
}

id objc_msgSend_progressViewTrailingAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewTrailingAnchorConstraint];
}

id objc_msgSend_progressViewTrailingLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 progressViewTrailingLayoutConstraint];
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _[a1 provider];
}

id objc_msgSend_providerForFavoritesEntry_(void *a1, const char *a2, ...)
{
  return [a1 providerForFavoritesEntry:];
}

id objc_msgSend_providerForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 providerForRecentCall:];
}

id objc_msgSend_providerWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 providerWithIdentifier:];
}

id objc_msgSend_providerWithService_video_(void *a1, const char *a2, ...)
{
  return [a1 providerWithService:video:];
}

id objc_msgSend_providers(void *a1, const char *a2, ...)
{
  return _[a1 providers];
}

id objc_msgSend_proximityState(void *a1, const char *a2, ...)
{
  return _[a1 proximityState];
}

id objc_msgSend_pseudoNameStringForDestinationID_(void *a1, const char *a2, ...)
{
  return [a1 pseudoNameStringForDestinationID:];
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return [a1 pushViewController:animated:];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queuedMessage(void *a1, const char *a2, ...)
{
  return _[a1 queuedMessage];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return [a1 raise:format:];
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfCharacterFromSet:];
}

id objc_msgSend_rangeOfCharacterFromSet_options_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfCharacterFromSet:options:];
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfString:];
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfString:options:];
}

id objc_msgSend_rangeToHighlightText_(void *a1, const char *a2, ...)
{
  return [a1 rangeToHighlightText:];
}

id objc_msgSend_rankedAutocompleteSuggestionsFromContext_candidates_(void *a1, const char *a2, ...)
{
  return [a1 rankedAutocompleteSuggestionsFromContext:candidates:];
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _[a1 rate];
}

id objc_msgSend_read(void *a1, const char *a2, ...)
{
  return _[a1 read];
}

id objc_msgSend_readButton(void *a1, const char *a2, ...)
{
  return _[a1 readButton];
}

id objc_msgSend_receiverDestinationID(void *a1, const char *a2, ...)
{
  return _[a1 receiverDestinationID];
}

id objc_msgSend_receiverISOCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 receiverISOCountryCode];
}

id objc_msgSend_receiverRouteIsPicked(void *a1, const char *a2, ...)
{
  return _[a1 receiverRouteIsPicked];
}

id objc_msgSend_recentCall(void *a1, const char *a2, ...)
{
  return _[a1 recentCall];
}

id objc_msgSend_recentCallAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 recentCallAtIndex:];
}

id objc_msgSend_recentCallAtTableViewIndex_(void *a1, const char *a2, ...)
{
  return [a1 recentCallAtTableViewIndex:];
}

id objc_msgSend_recentCallTTYType(void *a1, const char *a2, ...)
{
  return _[a1 recentCallTTYType];
}

id objc_msgSend_recentCalls(void *a1, const char *a2, ...)
{
  return _[a1 recentCalls];
}

id objc_msgSend_recentCallsChangedFromCachedRecentCalls_callHistoryControllerRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 recentCallsChangedFromCachedRecentCalls:callHistoryControllerRecentCalls:];
}

id objc_msgSend_recentCallsWithPredicate_(void *a1, const char *a2, ...)
{
  return [a1 recentCallsWithPredicate:];
}

id objc_msgSend_recentsAudioCallImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsAudioCallImage];
}

id objc_msgSend_recentsCallTapTargetsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 recentsCallTapTargetsEnabled];
}

id objc_msgSend_recentsController(void *a1, const char *a2, ...)
{
  return _[a1 recentsController];
}

id objc_msgSend_recentsController_didChangeCalls_(void *a1, const char *a2, ...)
{
  return [a1 recentsController:didChangeCalls:];
}

id objc_msgSend_recentsController_didChangeUnreadCallCount_(void *a1, const char *a2, ...)
{
  return [a1 recentsController:didChangeUnreadCallCount:];
}

id objc_msgSend_recentsController_didCompleteFetchingCalls_(void *a1, const char *a2, ...)
{
  return [a1 recentsController:didCompleteFetchingCalls:];
}

id objc_msgSend_recentsController_didUpdateCalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recentsController:didUpdateCalls:");
}

id objc_msgSend_recentsControllerDidChangeMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recentsControllerDidChangeMessages:");
}

id objc_msgSend_recentsDetailPresenter(void *a1, const char *a2, ...)
{
  return _[a1 recentsDetailPresenter];
}

id objc_msgSend_recentsNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 recentsNavigationController];
}

id objc_msgSend_recentsOutgoingAudioCallGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsOutgoingAudioCallGlyphImage];
}

id objc_msgSend_recentsOutgoingVideoCallGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsOutgoingVideoCallGlyphImage];
}

id objc_msgSend_recentsTTYDirectGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsTTYDirectGlyphImage];
}

id objc_msgSend_recentsTTYRelayGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsTTYRelayGlyphImage];
}

id objc_msgSend_recentsTableViewController(void *a1, const char *a2, ...)
{
  return _[a1 recentsTableViewController];
}

id objc_msgSend_recentsUniqueID(void *a1, const char *a2, ...)
{
  return _[a1 recentsUniqueID];
}

id objc_msgSend_recentsVerifiedCheckmarkImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsVerifiedCheckmarkImage];
}

id objc_msgSend_recentsVideoCallImage(void *a1, const char *a2, ...)
{
  return _[a1 recentsVideoCallImage];
}

id objc_msgSend_recentsViewController(void *a1, const char *a2, ...)
{
  return _[a1 recentsViewController];
}

id objc_msgSend_reconfigureRowsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return [a1 reconfigureRowsAtIndexPaths:];
}

id objc_msgSend_reconfiguringCellsForCalls_(void *a1, const char *a2, ...)
{
  return [a1 reconfiguringCellsForCalls:];
}

id objc_msgSend_recordStopButton(void *a1, const char *a2, ...)
{
  return _[a1 recordStopButton];
}

id objc_msgSend_recordStopButtonTapped(void *a1, const char *a2, ...)
{
  return _[a1 recordStopButtonTapped];
}

id objc_msgSend_recordedDuration(void *a1, const char *a2, ...)
{
  return _[a1 recordedDuration];
}

id objc_msgSend_rectForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 rectForRowAtIndexPath:];
}

id objc_msgSend_reformatText(void *a1, const char *a2, ...)
{
  return _[a1 reformatText];
}

id objc_msgSend_refreshDynamicApplicationShortcuts(void *a1, const char *a2, ...)
{
  return _[a1 refreshDynamicApplicationShortcuts];
}

id objc_msgSend_refreshLocalizedSenderIdentity(void *a1, const char *a2, ...)
{
  return _[a1 refreshLocalizedSenderIdentity];
}

id objc_msgSend_refreshTableHeaderView(void *a1, const char *a2, ...)
{
  return _[a1 refreshTableHeaderView];
}

id objc_msgSend_refreshView(void *a1, const char *a2, ...)
{
  return _[a1 refreshView];
}

id objc_msgSend_regionCode(void *a1, const char *a2, ...)
{
  return _[a1 regionCode];
}

id objc_msgSend_registerClass_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 registerClass:forCellReuseIdentifier:];
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return [a1 registerDefaults:];
}

id objc_msgSend_registerForBadgeUpdateNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForBadgeUpdateNotification];
}

id objc_msgSend_registerForRingerStateNotifications(void *a1, const char *a2, ...)
{
  return _[a1 registerForRingerStateNotifications];
}

id objc_msgSend_registerForTraitChanges_withAction_(void *a1, const char *a2, ...)
{
  return [a1 registerForTraitChanges:withAction:];
}

id objc_msgSend_registerWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerWithCompletionHandler:];
}

id objc_msgSend_reload(void *a1, const char *a2, ...)
{
  return _[a1 reload];
}

id objc_msgSend_reloadCallOccurences(void *a1, const char *a2, ...)
{
  return _[a1 reloadCallOccurences];
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _[a1 reloadData];
}

id objc_msgSend_reloadDataAnimated_(void *a1, const char *a2, ...)
{
  return [a1 reloadDataAnimated:];
}

id objc_msgSend_reloadDataForFavoritesEntries_(void *a1, const char *a2, ...)
{
  return [a1 reloadDataForFavoritesEntries:];
}

id objc_msgSend_reloadDataIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 reloadDataIfNeeded];
}

id objc_msgSend_reloadDataIfNil(void *a1, const char *a2, ...)
{
  return _[a1 reloadDataIfNil];
}

id objc_msgSend_reloadDataSource(void *a1, const char *a2, ...)
{
  return _[a1 reloadDataSource];
}

id objc_msgSend_reloadDataSourceForCalls_(void *a1, const char *a2, ...)
{
  return [a1 reloadDataSourceForCalls:];
}

id objc_msgSend_reloadLegacyVoicemails(void *a1, const char *a2, ...)
{
  return _[a1 reloadLegacyVoicemails];
}

id objc_msgSend_reloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 reloadQueue];
}

id objc_msgSend_reloadRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_reloadSections_withRowAnimation_(void *a1, const char *a2, ...)
{
  return [a1 reloadSections:withRowAnimation:];
}

id objc_msgSend_reloadTableView(void *a1, const char *a2, ...)
{
  return _[a1 reloadTableView];
}

id objc_msgSend_remainingLabel(void *a1, const char *a2, ...)
{
  return _[a1 remainingLabel];
}

id objc_msgSend_remainingTime(void *a1, const char *a2, ...)
{
  return _[a1 remainingTime];
}

id objc_msgSend_remainingTimeLabel(void *a1, const char *a2, ...)
{
  return _[a1 remainingTimeLabel];
}

id objc_msgSend_remainingTimeLabelBottomAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 remainingTimeLabelBottomAnchorLayoutConstraint];
}

id objc_msgSend_remainingTimeLabelFirstBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 remainingTimeLabelFirstBaselineAnchorLayoutConstraint];
}

id objc_msgSend_remainingTimeLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 remainingTimeLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_remainingTimeLabelLeadingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 remainingTimeLabelLeadingAnchorLayoutConstraint];
}

id objc_msgSend_remainingTimeLabelTrailingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 remainingTimeLabelTrailingAnchorLayoutConstraint];
}

id objc_msgSend_remoteMembers(void *a1, const char *a2, ...)
{
  return _[a1 remoteMembers];
}

id objc_msgSend_remoteParticipantHandles(void *a1, const char *a2, ...)
{
  return _[a1 remoteParticipantHandles];
}

id objc_msgSend_remoteViewControllerLCDOffset(void *a1, const char *a2, ...)
{
  return _[a1 remoteViewControllerLCDOffset];
}

id objc_msgSend_removeAllAnimations(void *a1, const char *a2, ...)
{
  return _[a1 removeAllAnimations];
}

id objc_msgSend_removeAllConstraintsForCell_(void *a1, const char *a2, ...)
{
  return [a1 removeAllConstraintsForCell:];
}

id objc_msgSend_removeAllIndexes(void *a1, const char *a2, ...)
{
  return _[a1 removeAllIndexes];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 removeAllRecentCalls];
}

id objc_msgSend_removeArrangedSubview_(void *a1, const char *a2, ...)
{
  return [a1 removeArrangedSubview:];
}

id objc_msgSend_removeAttribute_range_(void *a1, const char *a2, ...)
{
  return [a1 removeAttribute:range:];
}

id objc_msgSend_removeColumnAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeColumnAtIndex:];
}

id objc_msgSend_removeConstraint_(void *a1, const char *a2, ...)
{
  return [a1 removeConstraint:];
}

id objc_msgSend_removeConstraints_(void *a1, const char *a2, ...)
{
  return [a1 removeConstraints:];
}

id objc_msgSend_removeEntriesAtIndexes_(void *a1, const char *a2, ...)
{
  return [a1 removeEntriesAtIndexes:];
}

id objc_msgSend_removeFavoriteEntryAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 removeFavoriteEntryAtIndexPath:];
}

id objc_msgSend_removeFromSuperview(void *a1, const char *a2, ...)
{
  return _[a1 removeFromSuperview];
}

id objc_msgSend_removeGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 removeGestureRecognizer:];
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtURL:error:];
}

id objc_msgSend_removeJoinableConversation_(void *a1, const char *a2, ...)
{
  return [a1 removeJoinableConversation:];
}

id objc_msgSend_removeListenerID_forService_(void *a1, const char *a2, ...)
{
  return [a1 removeListenerID:forService:];
}

id objc_msgSend_removeNotificationObservers(void *a1, const char *a2, ...)
{
  return _[a1 removeNotificationObservers];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [a1 removeObject:];
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectAtIndex:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsInArray:];
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:];
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:forKeyPath:];
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:forKeyPath:context:];
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeRecentCallsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRecentCallsAtIndexPaths:");
}

id objc_msgSend_removeTarget_forEvents_(void *a1, const char *a2, ...)
{
  return [a1 removeTarget:forEvents:];
}

id objc_msgSend_removeTimeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeTimeObserver:];
}

id objc_msgSend_removeVisibleCells_(void *a1, const char *a2, ...)
{
  return [a1 removeVisibleCells:];
}

id objc_msgSend_removeVoicemailsFromTrash_(void *a1, const char *a2, ...)
{
  return [a1 removeVoicemailsFromTrash:];
}

id objc_msgSend_replaceArrangedSubview_inColumnAtIndex_rowAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceArrangedSubview:inColumnAtIndex:rowAtIndex:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return [a1 replaceCharactersInRange:withString:];
}

id objc_msgSend_replaceCurrentItemWithPlayerItem_(void *a1, const char *a2, ...)
{
  return [a1 replaceCurrentItemWithPlayerItem:];
}

id objc_msgSend_replaceRange_withText_(void *a1, const char *a2, ...)
{
  return [a1 replaceRange:withText:];
}

id objc_msgSend_reportActionImage(void *a1, const char *a2, ...)
{
  return _[a1 reportActionImage];
}

id objc_msgSend_reportActionTitleOfFlow_(void *a1, const char *a2, ...)
{
  return [a1 reportActionTitleOfFlow:];
}

id objc_msgSend_reportAndBlockSection(void *a1, const char *a2, ...)
{
  return _[a1 reportAndBlockSection];
}

id objc_msgSend_reportKeytabToContactsTransistionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportKeytabToContactsTransistionEvent:");
}

id objc_msgSend_reportSpamVoiceCall_(void *a1, const char *a2, ...)
{
  return [a1 reportSpamVoiceCall];
}

id objc_msgSend_reportSwipeActionForCall_(void *a1, const char *a2, ...)
{
  return [a1 reportSwipeActionForCall:];
}

id objc_msgSend_reportTranscriptionProblemForVoicemail_(void *a1, const char *a2, ...)
{
  return [a1 reportTranscriptionProblemForVoicemail];
}

id objc_msgSend_reportTranscriptionRatedAccurate_forVoicemail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportTranscriptionRatedAccurate:forVoicemail:");
}

id objc_msgSend_reportWithCall_(void *a1, const char *a2, ...)
{
  return [a1 reportWithCall:];
}

id objc_msgSend_reportWithRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 reportWithRecentCall:];
}

id objc_msgSend_reportingFlowForCall_(void *a1, const char *a2, ...)
{
  return [a1 reportingFlowForCall:];
}

id objc_msgSend_representedVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 representedVoicemail];
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestAudioServicesActivate(void *a1, const char *a2, ...)
{
  return _[a1 requestAudioServicesActivate];
}

id objc_msgSend_requestInitialStateIfNecessaryAndSendNotifications_(void *a1, const char *a2, ...)
{
  return [a1 requestInitialStateIfNecessaryAndSendNotifications:];
}

id objc_msgSend_requiresSmallScreenConfig(void *a1, const char *a2, ...)
{
  return _[a1 requiresSmallScreenConfig];
}

id objc_msgSend_resetAudioPlayer(void *a1, const char *a2, ...)
{
  return _[a1 resetAudioPlayer];
}

id objc_msgSend_resetPlayerToBeginning(void *a1, const char *a2, ...)
{
  return _[a1 resetPlayerToBeginning];
}

id objc_msgSend_resetSelectedIndexPath(void *a1, const char *a2, ...)
{
  return _[a1 resetSelectedIndexPath];
}

id objc_msgSend_resetViewController(void *a1, const char *a2, ...)
{
  return _[a1 resetViewController];
}

id objc_msgSend_resetWithErrorPrompt_title_(void *a1, const char *a2, ...)
{
  return [a1 resetWithErrorPrompt:title:];
}

id objc_msgSend_resignFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 resignFirstResponder];
}

id objc_msgSend_resizableImageWithCapInsets_(void *a1, const char *a2, ...)
{
  return [a1 resizableImageWithCapInsets:];
}

id objc_msgSend_respondsToEventsWhileInCall(void *a1, const char *a2, ...)
{
  return _[a1 respondsToEventsWhileInCall];
}

id objc_msgSend_restoreLastDialedNumber(void *a1, const char *a2, ...)
{
  return _[a1 restoreLastDialedNumber];
}

id objc_msgSend_restorePickedRoute(void *a1, const char *a2, ...)
{
  return _[a1 restorePickedRoute];
}

id objc_msgSend_restrictedSubtitleForConversation_(void *a1, const char *a2, ...)
{
  return [a1 restrictedSubtitleForConversation:];
}

id objc_msgSend_restrictedSubtitleForHandle_(void *a1, const char *a2, ...)
{
  return [a1 restrictedSubtitleForHandle:];
}

id objc_msgSend_restrictedSubtitleForMessage_(void *a1, const char *a2, ...)
{
  return [a1 restrictedSubtitleForMessage:];
}

id objc_msgSend_restrictedSubtitleForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 restrictedSubtitleForRecentCall:];
}

id objc_msgSend_restrictedView(void *a1, const char *a2, ...)
{
  return _[a1 restrictedView];
}

id objc_msgSend_restrictedViewBottomConstraint(void *a1, const char *a2, ...)
{
  return _[a1 restrictedViewBottomConstraint];
}

id objc_msgSend_resultContact(void *a1, const char *a2, ...)
{
  return _[a1 resultContact];
}

id objc_msgSend_resultContactPhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 resultContactPhoneNumber];
}

id objc_msgSend_reuseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 reuseIdentifier];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_rewindButton(void *a1, const char *a2, ...)
{
  return _[a1 rewindButton];
}

id objc_msgSend_rightAnchor(void *a1, const char *a2, ...)
{
  return _[a1 rightAnchor];
}

id objc_msgSend_rightBarButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 rightBarButtonItem];
}

id objc_msgSend_rightBarButtonItemGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 rightBarButtonItemGestureRecognizer];
}

id objc_msgSend_ringCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 ringCornerRadius];
}

id objc_msgSend_ringImageForDodge(void *a1, const char *a2, ...)
{
  return _[a1 ringImageForDodge];
}

id objc_msgSend_ringImageForLuminance(void *a1, const char *a2, ...)
{
  return _[a1 ringImageForLuminance];
}

id objc_msgSend_ringSize(void *a1, const char *a2, ...)
{
  return _[a1 ringSize];
}

id objc_msgSend_ringStroke(void *a1, const char *a2, ...)
{
  return _[a1 ringStroke];
}

id objc_msgSend_ringView(void *a1, const char *a2, ...)
{
  return _[a1 ringView];
}

id objc_msgSend_ringerStateNotifyToken(void *a1, const char *a2, ...)
{
  return _[a1 ringerStateNotifyToken];
}

id objc_msgSend_rootView(void *a1, const char *a2, ...)
{
  return _[a1 rootView];
}

id objc_msgSend_rootViewController(void *a1, const char *a2, ...)
{
  return _[a1 rootViewController];
}

id objc_msgSend_rootViewControllerDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 rootViewControllerDictionaries];
}

id objc_msgSend_rootViewLayoutMargins(void *a1, const char *a2, ...)
{
  return _[a1 rootViewLayoutMargins];
}

id objc_msgSend_routeActionWithTitle_route_(void *a1, const char *a2, ...)
{
  return [a1 routeActionWithTitle:route:];
}

id objc_msgSend_routeController(void *a1, const char *a2, ...)
{
  return _[a1 routeController];
}

id objc_msgSend_routeGlyphForDeviceType_displayStyle_(void *a1, const char *a2, ...)
{
  return [a1 routeGlyphForDeviceType:displayStyle:];
}

id objc_msgSend_routeGlyphForDeviceType_displayStyle_color_(void *a1, const char *a2, ...)
{
  return [a1 routeGlyphForDeviceType:displayStyle:color:];
}

id objc_msgSend_routeListController(void *a1, const char *a2, ...)
{
  return _[a1 routeListController];
}

id objc_msgSend_routesForAudioRoutingMenuController_(void *a1, const char *a2, ...)
{
  return [a1 routesForAudioRoutingMenuController:];
}

id objc_msgSend_routesForUnformattedPickableRoutes_(void *a1, const char *a2, ...)
{
  return [a1 routesForUnformattedPickableRoutes:];
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _[a1 row];
}

id objc_msgSend_rowCountForCurrentTableMode(void *a1, const char *a2, ...)
{
  return _[a1 rowCountForCurrentTableMode];
}

id objc_msgSend_rowHeight(void *a1, const char *a2, ...)
{
  return _[a1 rowHeight];
}

id objc_msgSend_rowHeightCache(void *a1, const char *a2, ...)
{
  return _[a1 rowHeightCache];
}

id objc_msgSend_rttButton(void *a1, const char *a2, ...)
{
  return _[a1 rttButton];
}

id objc_msgSend_rttConversationForUUID_(void *a1, const char *a2, ...)
{
  return [a1 rttConversationForUUID:];
}

id objc_msgSend_rttConversations(void *a1, const char *a2, ...)
{
  return _[a1 rttConversations];
}

id objc_msgSend_runSwitchTabTestWithTabViewController_fromTab_switchTo_numberOfIterations_testNameReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runSwitchTabTestWithTabViewController:fromTab:switchTo:numberOfIterations:testNameReference:");
}

id objc_msgSend_runTestWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 runTestWithParameters:];
}

id objc_msgSend_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 safeAreaLayoutGuide];
}

id objc_msgSend_sanitizedString(void *a1, const char *a2, ...)
{
  return _[a1 sanitizedString];
}

id objc_msgSend_saveGreeting(void *a1, const char *a2, ...)
{
  return _[a1 saveGreeting];
}

id objc_msgSend_saveItem(void *a1, const char *a2, ...)
{
  return _[a1 saveItem];
}

id objc_msgSend_savedPerson(void *a1, const char *a2, ...)
{
  return _[a1 savedPerson];
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_scaledValueForValue_(void *a1, const char *a2, ...)
{
  return [a1 scaledValueForValue:];
}

id objc_msgSend_scene_continueUserActivity_(void *a1, const char *a2, ...)
{
  return [a1 scene:continueUserActivity:];
}

id objc_msgSend_scene_openURLContexts_(void *a1, const char *a2, ...)
{
  return [a1 scene:openURLContexts:];
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return [a1 scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:];
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_screenSharingLabel(void *a1, const char *a2, ...)
{
  return _[a1 screenSharingLabel];
}

id objc_msgSend_screenSharingType(void *a1, const char *a2, ...)
{
  return _[a1 screenSharingType];
}

id objc_msgSend_screenSharingTypeText(void *a1, const char *a2, ...)
{
  return _[a1 screenSharingTypeText];
}

id objc_msgSend_screenSize(void *a1, const char *a2, ...)
{
  return _[a1 screenSize];
}

id objc_msgSend_scrollRectToVisible_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollRectToVisible:animated:");
}

id objc_msgSend_scrollTestsWithCount_forScrollView_(void *a1, const char *a2, ...)
{
  return [a1 scrollTestsWithCount:forScrollView:];
}

id objc_msgSend_scrollToRowAtIndexPath_atScrollPosition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToRowAtIndexPath:atScrollPosition:animated:");
}

id objc_msgSend_searchBar(void *a1, const char *a2, ...)
{
  return _[a1 searchBar];
}

id objc_msgSend_searchButton(void *a1, const char *a2, ...)
{
  return _[a1 searchButton];
}

id objc_msgSend_searchController(void *a1, const char *a2, ...)
{
  return _[a1 searchController];
}

id objc_msgSend_searchControllersForDifferentSections(void *a1, const char *a2, ...)
{
  return _[a1 searchControllersForDifferentSections];
}

id objc_msgSend_searchFinishedForController_startTime_searchLength_resultsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchFinishedForController:startTime:searchLength:resultsCount:");
}

id objc_msgSend_searchFor_shouldRefreshResult_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 searchFor:shouldRefreshResult:completionHandler:];
}

id objc_msgSend_searchResultIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 searchResultIdentifier];
}

id objc_msgSend_searchResultsController(void *a1, const char *a2, ...)
{
  return _[a1 searchResultsController];
}

id objc_msgSend_searchResultsControllerProvider(void *a1, const char *a2, ...)
{
  return _[a1 searchResultsControllerProvider];
}

id objc_msgSend_secondItem(void *a1, const char *a2, ...)
{
  return _[a1 secondItem];
}

id objc_msgSend_secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 secondaryLabelColor];
}

id objc_msgSend_secondarySystemGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 secondarySystemGroupedBackgroundColor];
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _[a1 section];
}

id objc_msgSend_sectionTypeAt_(void *a1, const char *a2, ...)
{
  return [a1 sectionTypeAt:];
}

id objc_msgSend_seekToTime_(void *a1, const char *a2, ...)
{
  return [a1 seekToTime:];
}

id objc_msgSend_segments(void *a1, const char *a2, ...)
{
  return _[a1 segments];
}

id objc_msgSend_selectRowAtIndexPath_animated_scrollPosition_(void *a1, const char *a2, ...)
{
  return [a1 selectRowAtIndexPath:animated:scrollPosition:];
}

id objc_msgSend_selected(void *a1, const char *a2, ...)
{
  return _[a1 selected];
}

id objc_msgSend_selectedAccount(void *a1, const char *a2, ...)
{
  return _[a1 selectedAccount];
}

id objc_msgSend_selectedIcon(void *a1, const char *a2, ...)
{
  return _[a1 selectedIcon];
}

id objc_msgSend_selectedMessage(void *a1, const char *a2, ...)
{
  return _[a1 selectedMessage];
}

id objc_msgSend_selectedMessageTableViewCell(void *a1, const char *a2, ...)
{
  return _[a1 selectedMessageTableViewCell];
}

id objc_msgSend_selectedSegmentIndex(void *a1, const char *a2, ...)
{
  return _[a1 selectedSegmentIndex];
}

id objc_msgSend_selectedSenderIdentity(void *a1, const char *a2, ...)
{
  return _[a1 selectedSenderIdentity];
}

id objc_msgSend_selectedTextRange(void *a1, const char *a2, ...)
{
  return _[a1 selectedTextRange];
}

id objc_msgSend_selectedViewController(void *a1, const char *a2, ...)
{
  return _[a1 selectedViewController];
}

id objc_msgSend_selectionRange(void *a1, const char *a2, ...)
{
  return _[a1 selectionRange];
}

id objc_msgSend_semanticContentAttribute(void *a1, const char *a2, ...)
{
  return _[a1 semanticContentAttribute];
}

id objc_msgSend_sendActionsForControlEvents_(void *a1, const char *a2, ...)
{
  return [a1 sendActionsForControlEvents:];
}

id objc_msgSend_sendMessageIntentExtension(void *a1, const char *a2, ...)
{
  return _[a1 sendMessageIntentExtension];
}

id objc_msgSend_sendSubviewToBack_(void *a1, const char *a2, ...)
{
  return [a1 sendSubviewToBack:];
}

id objc_msgSend_senderContactForMessage_(void *a1, const char *a2, ...)
{
  return [a1 senderContactForMessage:];
}

id objc_msgSend_senderDestinationID(void *a1, const char *a2, ...)
{
  return _[a1 senderDestinationID];
}

id objc_msgSend_senderHandle(void *a1, const char *a2, ...)
{
  return _[a1 senderHandle];
}

id objc_msgSend_senderHandleForMessage_(void *a1, const char *a2, ...)
{
  return [a1 senderHandleForMessage:];
}

id objc_msgSend_senderHandleTypeForMessage_(void *a1, const char *a2, ...)
{
  return [a1 senderHandleTypeForMessage:];
}

id objc_msgSend_senderISOCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 senderISOCountryCode];
}

id objc_msgSend_senderIdentityCapabilitiesWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 senderIdentityCapabilitiesWithUUID:];
}

id objc_msgSend_senderIdentityForAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 senderIdentityForAccountUUID:];
}

id objc_msgSend_senderIdentityForHandle_(void *a1, const char *a2, ...)
{
  return [a1 senderIdentityForHandle:];
}

id objc_msgSend_senderIdentityMenuForDialerField_selectedSenderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 senderIdentityMenuForDialerField:selectedSenderIdentity:];
}

id objc_msgSend_senderIdentityMenuForDialerView_selectedSenderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 senderIdentityMenuForDialerView:selectedSenderIdentity:];
}

id objc_msgSend_separator(void *a1, const char *a2, ...)
{
  return _[a1 separator];
}

id objc_msgSend_separatorColor(void *a1, const char *a2, ...)
{
  return _[a1 separatorColor];
}

id objc_msgSend_separatorInsetForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 separatorInsetForContentSizeCategory:];
}

id objc_msgSend_separatorInsetForContentSizeCategory_isEditing_(void *a1, const char *a2, ...)
{
  return [a1 separatorInsetForContentSizeCategory:isEditing:];
}

id objc_msgSend_sequenceWithItems_loops_(void *a1, const char *a2, ...)
{
  return [a1 sequenceWithItems:loops:];
}

id objc_msgSend_serialDispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 serialDispatchQueue];
}

id objc_msgSend_serialQueue(void *a1, const char *a2, ...)
{
  return _[a1 serialQueue];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceProvider(void *a1, const char *a2, ...)
{
  return _[a1 serviceProvider];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAccessibilityConstraintsEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setAccessibilityConstraintsEnabled:];
}

id objc_msgSend_setAccessibilityIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setAccessibilityIdentifier:];
}

id objc_msgSend_setAccessibilityLabel_(void *a1, const char *a2, ...)
{
  return [a1 setAccessibilityLabel:];
}

id objc_msgSend_setAccessibilityUserInputLabels_(void *a1, const char *a2, ...)
{
  return [a1 setAccessibilityUserInputLabels:];
}

id objc_msgSend_setAccessoryType_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryType:];
}

id objc_msgSend_setAccessoryView_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryView:];
}

id objc_msgSend_setAccountProvisioningViewController_(void *a1, const char *a2, ...)
{
  return [a1 setAccountProvisioningViewController:];
}

id objc_msgSend_setAccounts_(void *a1, const char *a2, ...)
{
  return [a1 setAccounts:];
}

id objc_msgSend_setAccountsView_(void *a1, const char *a2, ...)
{
  return [a1 setAccountsView:];
}

id objc_msgSend_setAction_(void *a1, const char *a2, ...)
{
  return [a1 setAction:];
}

id objc_msgSend_setActionAtItemEnd_(void *a1, const char *a2, ...)
{
  return [a1 setActionAtItemEnd:];
}

id objc_msgSend_setActionButton_(void *a1, const char *a2, ...)
{
  return [a1 setActionButton:];
}

id objc_msgSend_setActionButtonImage_(void *a1, const char *a2, ...)
{
  return [a1 setActionButtonImage:];
}

id objc_msgSend_setActionButtonTappedHandler_(void *a1, const char *a2, ...)
{
  return [a1 setActionButtonTappedHandler:];
}

id objc_msgSend_setActionType_(void *a1, const char *a2, ...)
{
  return [a1 setActionType:];
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return [a1 setActions:];
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return [a1 setActive:];
}

id objc_msgSend_setActive_error_(void *a1, const char *a2, ...)
{
  return [a1 setActive:error:];
}

id objc_msgSend_setActive_withOptions_error_(void *a1, const char *a2, ...)
{
  return [a1 setActive:withOptions:error:];
}

id objc_msgSend_setActualBackgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setActualBackgroundColor:];
}

id objc_msgSend_setActualTintColor_(void *a1, const char *a2, ...)
{
  return [a1 setActualTintColor:];
}

id objc_msgSend_setAddContactButton_(void *a1, const char *a2, ...)
{
  return [a1 setAddContactButton:];
}

id objc_msgSend_setAddContactButtonTopConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setAddContactButtonTopConstraint:];
}

id objc_msgSend_setAdjustsFontForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustsFontForContentSizeCategory:];
}

id objc_msgSend_setAdjustsFontSizeToFitWidth_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustsFontSizeToFitWidth:];
}

id objc_msgSend_setAdjustsImageSizeForAccessibilityContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustsImageSizeForAccessibilityContentSizeCategory:];
}

id objc_msgSend_setAdjustsImageWhenDisabled_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustsImageWhenDisabled:];
}

id objc_msgSend_setAdjustsImageWhenHighlighted_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustsImageWhenHighlighted:];
}

id objc_msgSend_setAlignment_(void *a1, const char *a2, ...)
{
  return [a1 setAlignment:];
}

id objc_msgSend_setAlignment_forView_inAxis_(void *a1, const char *a2, ...)
{
  return [a1 setAlignment:forView:inAxis:];
}

id objc_msgSend_setAllConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setAllConstraints:];
}

id objc_msgSend_setAllVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 setAllVoicemails:];
}

id objc_msgSend_setAllowStaleRendering_(void *a1, const char *a2, ...)
{
  return [a1 setAllowStaleRendering:];
}

id objc_msgSend_setAllowTableViewScrolling_(void *a1, const char *a2, ...)
{
  return [a1 setAllowTableViewScrolling:];
}

id objc_msgSend_setAllowedPressTypes_(void *a1, const char *a2, ...)
{
  return [a1 setAllowedPressTypes:];
}

id objc_msgSend_setAllowedUnits_(void *a1, const char *a2, ...)
{
  return [a1 setAllowedUnits:];
}

id objc_msgSend_setAllowsActions_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsActions:];
}

id objc_msgSend_setAllowsCancel_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsCancel:];
}

id objc_msgSend_setAllowsCardDeletion_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsCardDeletion:];
}

id objc_msgSend_setAllowsCardEditing_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsCardEditing:];
}

id objc_msgSend_setAllowsContactBlocking_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsContactBlocking:];
}

id objc_msgSend_setAllowsEditing_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsEditing:];
}

id objc_msgSend_setAllowsExternalPlayback_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsExternalPlayback:];
}

id objc_msgSend_setAllowsGroupBlending_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsGroupBlending:];
}

id objc_msgSend_setAllowsGroupOpacity_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsGroupOpacity:];
}

id objc_msgSend_setAllowsMultipleSelectionDuringEditing_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsMultipleSelectionDuringEditing:];
}

id objc_msgSend_setAllowsSelection_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsSelection:];
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return [a1 setAlpha:];
}

id objc_msgSend_setAlternateName_(void *a1, const char *a2, ...)
{
  return [a1 setAlternateName:];
}

id objc_msgSend_setAnalyticsLogger_(void *a1, const char *a2, ...)
{
  return [a1 setAnalyticsLogger:];
}

id objc_msgSend_setAnimationsEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setAnimationsEnabled:];
}

id objc_msgSend_setArrangedSubviewRows_(void *a1, const char *a2, ...)
{
  return [a1 setArrangedSubviewRows:];
}

id objc_msgSend_setArrangedSubviews_(void *a1, const char *a2, ...)
{
  return [a1 setArrangedSubviews:];
}

id objc_msgSend_setArrowDirection_(void *a1, const char *a2, ...)
{
  return [a1 setArrowDirection:];
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return [a1 setAttribute:forKey:error:];
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return [a1 setAttributedText:];
}

id objc_msgSend_setAttributedTitle_forState_(void *a1, const char *a2, ...)
{
  return [a1 setAttributedTitle:forState:];
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return [a1 setAttributes:];
}

id objc_msgSend_setAttributes_range_(void *a1, const char *a2, ...)
{
  return [a1 setAttributes:range:];
}

id objc_msgSend_setAudioPlaybackRequestBlock_(void *a1, const char *a2, ...)
{
  return [a1 setAudioPlaybackRequestBlock:];
}

id objc_msgSend_setAudioPlayer_(void *a1, const char *a2, ...)
{
  return [a1 setAudioPlayer:];
}

id objc_msgSend_setAudioRecorderDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setAudioRecorderDelegate:];
}

id objc_msgSend_setAudioServicesActivated_(void *a1, const char *a2, ...)
{
  return [a1 setAudioServicesActivated:];
}

id objc_msgSend_setAudioSessionState_(void *a1, const char *a2, ...)
{
  return [a1 setAudioSessionState];
}

id objc_msgSend_setAutocloses_(void *a1, const char *a2, ...)
{
  return [a1 setAutocloses:];
}

id objc_msgSend_setAutoresizesSubviews_(void *a1, const char *a2, ...)
{
  return [a1 setAutoresizesSubviews:];
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return [a1 setAutoresizingMask:];
}

id objc_msgSend_setAvatarViewController_(void *a1, const char *a2, ...)
{
  return [a1 setAvatarViewController:];
}

id objc_msgSend_setAvatarViewControllerSettings_(void *a1, const char *a2, ...)
{
  return [a1 setAvatarViewControllerSettings:];
}

id objc_msgSend_setAxis_(void *a1, const char *a2, ...)
{
  return [a1 setAxis:];
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundColor:];
}

id objc_msgSend_setBackgroundConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundConfiguration:];
}

id objc_msgSend_setBackgroundEffects_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundEffects:];
}

id objc_msgSend_setBackgroundImage_forBarPosition_barMetrics_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundImage:forBarPosition:barMetrics:];
}

id objc_msgSend_setBackgroundImage_forState_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundImage:forState:];
}

id objc_msgSend_setBackgroundStyle_animated_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundStyle:animated:];
}

id objc_msgSend_setBackgroundView_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundView:];
}

id objc_msgSend_setBadge_(void *a1, const char *a2, ...)
{
  return [a1 setBadge:];
}

id objc_msgSend_setBadgeText_(void *a1, const char *a2, ...)
{
  return [a1 setBadgeText:];
}

id objc_msgSend_setBadgeValue_(void *a1, const char *a2, ...)
{
  return [a1 setBadgeValue:];
}

id objc_msgSend_setBadgeView_(void *a1, const char *a2, ...)
{
  return [a1 setBadgeView:];
}

id objc_msgSend_setBarStyle_(void *a1, const char *a2, ...)
{
  return [a1 setBarStyle:];
}

id objc_msgSend_setBaselineRelativeArrangement_(void *a1, const char *a2, ...)
{
  return [a1 setBaselineRelativeArrangement:];
}

id objc_msgSend_setBlockedVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 setBlockedVoicemails:];
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return [a1 setBounds:];
}

id objc_msgSend_setBuiltConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setBuiltConstraints:];
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return [a1 setBundleID:];
}

id objc_msgSend_setButton_(void *a1, const char *a2, ...)
{
  return [a1 setButton:];
}

id objc_msgSend_setButtonCenterXLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setButtonCenterXLayoutConstraint:];
}

id objc_msgSend_setButtonHidden_(void *a1, const char *a2, ...)
{
  return [a1 setButtonHidden:];
}

id objc_msgSend_setButtonHidden_animated_(void *a1, const char *a2, ...)
{
  return [a1 setButtonHidden:animated:];
}

id objc_msgSend_setButtonHidden_animated_completion_(void *a1, const char *a2, ...)
{
  return [a1 setButtonHidden:animated:completion:];
}

id objc_msgSend_setButtonLabel_(void *a1, const char *a2, ...)
{
  return [a1 setButtonLabel:];
}

id objc_msgSend_setButtonLeadingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setButtonLeadingLayoutConstraint:];
}

id objc_msgSend_setButtonTitleLabelFirstBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setButtonTitleLabelFirstBaselineLayoutConstraint:];
}

id objc_msgSend_setButtonTitleLabelLastBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setButtonTitleLabelLastBaselineLayoutConstraint:];
}

id objc_msgSend_setButtonTrailingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setButtonTrailingLayoutConstraint:];
}

id objc_msgSend_setButtonType_enabled_(void *a1, const char *a2, ...)
{
  return [a1 setButtonType:enabled:];
}

id objc_msgSend_setCachedCellHeight_(void *a1, const char *a2, ...)
{
  return [a1 setCachedCellHeight:];
}

id objc_msgSend_setCallButton_(void *a1, const char *a2, ...)
{
  return [a1 setCallButton:];
}

id objc_msgSend_setCallButtonImage_(void *a1, const char *a2, ...)
{
  return [a1 setCallButtonImage:];
}

id objc_msgSend_setCallButtonKeypadOffsetConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setCallButtonKeypadOffsetConstraint:];
}

id objc_msgSend_setCallButtonTappedHandler_(void *a1, const char *a2, ...)
{
  return [a1 setCallButtonTappedHandler:];
}

id objc_msgSend_setCallContextMenuInteraction_(void *a1, const char *a2, ...)
{
  return [a1 setCallContextMenuInteraction:];
}

id objc_msgSend_setCallOccurrence_(void *a1, const char *a2, ...)
{
  return [a1 setCallOccurrence:];
}

id objc_msgSend_setCallProviderManager_(void *a1, const char *a2, ...)
{
  return [a1 setCallProviderManager:];
}

id objc_msgSend_setCallStatus_(void *a1, const char *a2, ...)
{
  return [a1 setCallStatus:];
}

id objc_msgSend_setCallerID_(void *a1, const char *a2, ...)
{
  return [a1 setCallerID:];
}

id objc_msgSend_setCallerId_(void *a1, const char *a2, ...)
{
  return [a1 setCallerId:];
}

id objc_msgSend_setCarPlayExternalDevice_(void *a1, const char *a2, ...)
{
  return [a1 setCarPlayExternalDevice:];
}

id objc_msgSend_setCarPlayWindow_(void *a1, const char *a2, ...)
{
  return [a1 setCarPlayWindow:];
}

id objc_msgSend_setCategory_error_(void *a1, const char *a2, ...)
{
  return [a1 setCategory:error:];
}

id objc_msgSend_setCellularRadioEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setCellularRadioEnabled:];
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return [a1 setCenter:];
}

id objc_msgSend_setCentralAreaContainerView_(void *a1, const char *a2, ...)
{
  return [a1 setCentralAreaContainerView:];
}

id objc_msgSend_setCharge_(void *a1, const char *a2, ...)
{
  return [a1 setCharge:];
}

id objc_msgSend_setCheckedForFacebookContacts_(void *a1, const char *a2, ...)
{
  return [a1 setCheckedForFacebookContacts:];
}

id objc_msgSend_setClassificationViewController_(void *a1, const char *a2, ...)
{
  return [a1 setClassificationViewController:];
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return [a1 setClipsToBounds:];
}

id objc_msgSend_setCollapsedBottomConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setCollapsedBottomConstraint:];
}

id objc_msgSend_setColor_(void *a1, const char *a2, ...)
{
  return [a1 setColor:];
}

id objc_msgSend_setColumnSpacing_(void *a1, const char *a2, ...)
{
  return [a1 setColumnSpacing:];
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 setCompletionBlock:];
}

id objc_msgSend_setCompletionWithItemsHandler_(void *a1, const char *a2, ...)
{
  return [a1 setCompletionWithItemsHandler:];
}

id objc_msgSend_setCompositingFilter_(void *a1, const char *a2, ...)
{
  return [a1 setCompositingFilter:];
}

id objc_msgSend_setConnectionUnavailableView_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionUnavailableView:];
}

id objc_msgSend_setConstant_(void *a1, const char *a2, ...)
{
  return [a1 setConstant:];
}

id objc_msgSend_setConstraintsForLayouts_(void *a1, const char *a2, ...)
{
  return [a1 setConstraintsForLayouts:];
}

id objc_msgSend_setConstraintsLoaded_(void *a1, const char *a2, ...)
{
  return [a1 setConstraintsLoaded:];
}

id objc_msgSend_setContact_(void *a1, const char *a2, ...)
{
  return [a1 setContact:];
}

id objc_msgSend_setContactCountButton_(void *a1, const char *a2, ...)
{
  return [a1 setContactCountButton:];
}

id objc_msgSend_setContactCountButtonView_(void *a1, const char *a2, ...)
{
  return [a1 setContactCountButtonView:];
}

id objc_msgSend_setContactFormatter_(void *a1, const char *a2, ...)
{
  return [a1 setContactFormatter:];
}

id objc_msgSend_setContactHeaderViewController_(void *a1, const char *a2, ...)
{
  return [a1 setContactHeaderViewController:];
}

id objc_msgSend_setContactIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setContactIdentifier:];
}

id objc_msgSend_setContactLabel_(void *a1, const char *a2, ...)
{
  return [a1 setContactLabel:];
}

id objc_msgSend_setContactResultButton_(void *a1, const char *a2, ...)
{
  return [a1 setContactResultButton:];
}

id objc_msgSend_setContactResultButtonView_(void *a1, const char *a2, ...)
{
  return [a1 setContactResultButtonView:];
}

id objc_msgSend_setContactSearchResults_hasCompleteMatch_(void *a1, const char *a2, ...)
{
  return [a1 setContactSearchResults:hasCompleteMatch:];
}

id objc_msgSend_setContactStore_(void *a1, const char *a2, ...)
{
  return [a1 setContactStore:];
}

id objc_msgSend_setContactType_(void *a1, const char *a2, ...)
{
  return [a1 setContactType:];
}

id objc_msgSend_setContacts_(void *a1, const char *a2, ...)
{
  return [a1 setContacts:];
}

id objc_msgSend_setContactsDataProvider_(void *a1, const char *a2, ...)
{
  return [a1 setContactsDataProvider:];
}

id objc_msgSend_setContainerSpecificLeftConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setContainerSpecificLeftConstraint:];
}

id objc_msgSend_setContainerSpecificRightConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setContainerSpecificRightConstraint:];
}

id objc_msgSend_setContentCompressionResistancePriority_forAxis_(void *a1, const char *a2, ...)
{
  return [a1 setContentCompressionResistancePriority:forAxis:];
}

id objc_msgSend_setContentEdgeInsets_(void *a1, const char *a2, ...)
{
  return [a1 setContentEdgeInsets:];
}

id objc_msgSend_setContentHorizontalAlignment_(void *a1, const char *a2, ...)
{
  return [a1 setContentHorizontalAlignment:];
}

id objc_msgSend_setContentHuggingPriority_forAxis_(void *a1, const char *a2, ...)
{
  return [a1 setContentHuggingPriority:forAxis:];
}

id objc_msgSend_setContentInset_(void *a1, const char *a2, ...)
{
  return [a1 setContentInset:];
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return [a1 setContentMode:];
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return [a1 setContentOffset:];
}

id objc_msgSend_setContentUnavailable_(void *a1, const char *a2, ...)
{
  return [a1 setContentUnavailable:];
}

id objc_msgSend_setContentUnavailable_animated_(void *a1, const char *a2, ...)
{
  return [a1 setContentUnavailable:animated:];
}

id objc_msgSend_setContentUnavailableView_(void *a1, const char *a2, ...)
{
  return [a1 setContentUnavailableView:];
}

id objc_msgSend_setContentUnavailableViewTitle_(void *a1, const char *a2, ...)
{
  return [a1 setContentUnavailableViewTitle:];
}

id objc_msgSend_setContentViewHiddenPosition(void *a1, const char *a2, ...)
{
  return _[a1 setContentViewHiddenPosition];
}

id objc_msgSend_setContentViewNormalPosition(void *a1, const char *a2, ...)
{
  return _[a1 setContentViewNormalPosition];
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return [a1 setContents:];
}

id objc_msgSend_setContentsIsSingleValue_(void *a1, const char *a2, ...)
{
  return [a1 setContentsIsSingleValue:];
}

id objc_msgSend_setContextMenuIsPrimary_(void *a1, const char *a2, ...)
{
  return [a1 setContextMenuIsPrimary:];
}

id objc_msgSend_setContextToken_(void *a1, const char *a2, ...)
{
  return [a1 setContextToken:];
}

id objc_msgSend_setConversation_(void *a1, const char *a2, ...)
{
  return [a1 setConversation:];
}

id objc_msgSend_setCornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 setCornerRadius:];
}

id objc_msgSend_setCountLabel_(void *a1, const char *a2, ...)
{
  return [a1 setCountLabel:];
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return [a1 setCreationDate:];
}

id objc_msgSend_setCurrentActiveFixedConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentActiveFixedConstraints:];
}

id objc_msgSend_setCurrentCycleStringIndex_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentCycleStringIndex:];
}

id objc_msgSend_setCurrentRequiredConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentRequiredConstraints:];
}

id objc_msgSend_setCurrentRequiredConstraintsKey_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentRequiredConstraintsKey:];
}

id objc_msgSend_setCurrentViewModel_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentViewModel:];
}

id objc_msgSend_setCurrentlyFocusedButton_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentlyFocusedButton:];
}

id objc_msgSend_setCustomBaselineOffsetFromBottom_(void *a1, const char *a2, ...)
{
  return [a1 setCustomBaselineOffsetFromBottom:];
}

id objc_msgSend_setCustomFirstBaselineOffsetFromTop_(void *a1, const char *a2, ...)
{
  return [a1 setCustomFirstBaselineOffsetFromTop:];
}

id objc_msgSend_setCycleTimer_(void *a1, const char *a2, ...)
{
  return [a1 setCycleTimer:];
}

id objc_msgSend_setDamping_(void *a1, const char *a2, ...)
{
  return [a1 setDamping:];
}

id objc_msgSend_setDataDetectorTypes_(void *a1, const char *a2, ...)
{
  return [a1 setDataDetectorTypes:];
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return [a1 setDataSource:];
}

id objc_msgSend_setDataSourceNeedsReload_(void *a1, const char *a2, ...)
{
  return [a1 setDataSourceNeedsReload:];
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return [a1 setDate:];
}

id objc_msgSend_setDateLabel_(void *a1, const char *a2, ...)
{
  return [a1 setDateLabel:];
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return [a1 setDateStyle:];
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return [a1 setDay:];
}

id objc_msgSend_setDebugBoundingBoxesEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setDebugBoundingBoxesEnabled:];
}

id objc_msgSend_setDefinesPresentationContext_(void *a1, const char *a2, ...)
{
  return [a1 setDefinesPresentationContext:];
}

id objc_msgSend_setDelaysContentTouches_(void *a1, const char *a2, ...)
{
  return [a1 setDelaysContentTouches:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDeleteButton_(void *a1, const char *a2, ...)
{
  return [a1 setDeleteButton:];
}

id objc_msgSend_setDeleteButtonAlpha_(void *a1, const char *a2, ...)
{
  return [a1 setDeleteButtonAlpha:];
}

id objc_msgSend_setDeliversTouchesForGesturesToSuperview_(void *a1, const char *a2, ...)
{
  return [a1 setDeliversTouchesForGesturesToSuperview:];
}

id objc_msgSend_setDetailIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 setDetailIndexPath:];
}

id objc_msgSend_setDetailedScrubbingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setDetailedScrubbingEnabled:];
}

id objc_msgSend_setDetailsView_(void *a1, const char *a2, ...)
{
  return [a1 setDetailsView:];
}

id objc_msgSend_setDialLastDialedNumberByDoubleTap_(void *a1, const char *a2, ...)
{
  return [a1 setDialLastDialedNumberByDoubleTap:];
}

id objc_msgSend_setDialType_(void *a1, const char *a2, ...)
{
  return [a1 setDialType:];
}

id objc_msgSend_setDialerController_(void *a1, const char *a2, ...)
{
  return [a1 setDialerController:];
}

id objc_msgSend_setDialerType_(void *a1, const char *a2, ...)
{
  return [a1 setDialerType:];
}

id objc_msgSend_setDidEnd_(void *a1, const char *a2, ...)
{
  return [a1 setDidEnd:];
}

id objc_msgSend_setDidStart_(void *a1, const char *a2, ...)
{
  return [a1 setDidStart:];
}

id objc_msgSend_setDimmed_(void *a1, const char *a2, ...)
{
  return [a1 setDimmed:];
}

id objc_msgSend_setDimmed_animated_(void *a1, const char *a2, ...)
{
  return [a1 setDimmed:animated:];
}

id objc_msgSend_setDirection_(void *a1, const char *a2, ...)
{
  return [a1 setDirection:];
}

id objc_msgSend_setDirectionalLayoutMargins_(void *a1, const char *a2, ...)
{
  return [a1 setDirectionalLayoutMargins:];
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return [a1 setDisableActions:];
}

id objc_msgSend_setDiscoverabilityTitle_(void *a1, const char *a2, ...)
{
  return [a1 setDiscoverabilityTitle:];
}

id objc_msgSend_setDisplayedLabel_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayedLabel:];
}

id objc_msgSend_setDisplayedName_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayedName:];
}

id objc_msgSend_setDistribution_(void *a1, const char *a2, ...)
{
  return [a1 setDistribution:];
}

id objc_msgSend_setDoesRelativeDateFormatting_(void *a1, const char *a2, ...)
{
  return [a1 setDoesRelativeDateFormatting:];
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return [a1 setDuration:];
}

id objc_msgSend_setEdgesForExtendedLayout_(void *a1, const char *a2, ...)
{
  return [a1 setEdgesForExtendedLayout:];
}

id objc_msgSend_setEditable_(void *a1, const char *a2, ...)
{
  return [a1 setEditable:];
}

id objc_msgSend_setEditing_(void *a1, const char *a2, ...)
{
  return [a1 setEditing:];
}

id objc_msgSend_setEditing_animated_(void *a1, const char *a2, ...)
{
  return [a1 setEditing:animated:];
}

id objc_msgSend_setEditingRow_(void *a1, const char *a2, ...)
{
  return [a1 setEditingRow:];
}

id objc_msgSend_setEffectView_(void *a1, const char *a2, ...)
{
  return [a1 setEffectView:];
}

id objc_msgSend_setElapsedTime_(void *a1, const char *a2, ...)
{
  return [a1 setElapsedTime:];
}

id objc_msgSend_setElapsedTime_animated_(void *a1, const char *a2, ...)
{
  return [a1 setElapsedTime:animated:];
}

id objc_msgSend_setElapsedTime_animated_force_(void *a1, const char *a2, ...)
{
  return [a1 setElapsedTime:animated:force:];
}

id objc_msgSend_setElapsedTimeLabelBottomAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setElapsedTimeLabelBottomAnchorLayoutConstraint:];
}

id objc_msgSend_setElapsedTimeLabelFirstBaselineAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setElapsedTimeLabelFirstBaselineAnchorLayoutConstraint:];
}

id objc_msgSend_setElapsedTimeLabelLeadingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setElapsedTimeLabelLeadingAnchorLayoutConstraint:];
}

id objc_msgSend_setEmailAddresses_(void *a1, const char *a2, ...)
{
  return [a1 setEmailAddresses:];
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setEnabled:];
}

id objc_msgSend_setEstimatedRowHeight_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedRowHeight:];
}

id objc_msgSend_setExpanded_(void *a1, const char *a2, ...)
{
  return [a1 setExpanded:];
}

id objc_msgSend_setExpanded_animated_(void *a1, const char *a2, ...)
{
  return [a1 setExpanded:animated:];
}

id objc_msgSend_setExpandedConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setExpandedConstraints:];
}

id objc_msgSend_setFamilyName_(void *a1, const char *a2, ...)
{
  return [a1 setFamilyName:];
}

id objc_msgSend_setFavoritesEntries_(void *a1, const char *a2, ...)
{
  return [a1 setFavoritesEntries:];
}

id objc_msgSend_setFavoritesEntries_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setFavoritesEntries:completionHandler:];
}

id objc_msgSend_setFavoritesEntryPicker_(void *a1, const char *a2, ...)
{
  return [a1 setFavoritesEntryPicker:];
}

id objc_msgSend_setFeatureFlags_(void *a1, const char *a2, ...)
{
  return [a1 setFeatureFlags:];
}

id objc_msgSend_setFeedbackTextViewBottomLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setFeedbackTextViewBottomLayoutConstraint:];
}

id objc_msgSend_setFeedbackTextViewLeadingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setFeedbackTextViewLeadingLayoutConstraint:];
}

id objc_msgSend_setFeedbackTextViewTopLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setFeedbackTextViewTopLayoutConstraint:];
}

id objc_msgSend_setFeedbackTextViewTrailingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setFeedbackTextViewTrailingLayoutConstraint:];
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _[a1 setFill];
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return [a1 setFillColor:];
}

id objc_msgSend_setFillMode_(void *a1, const char *a2, ...)
{
  return [a1 setFillMode:];
}

id objc_msgSend_setFilterType_(void *a1, const char *a2, ...)
{
  return [a1 setFilterType:];
}

id objc_msgSend_setFixedTableViewContentOffset_(void *a1, const char *a2, ...)
{
  return [a1 setFixedTableViewContentOffset:];
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return [a1 setFont:];
}

id objc_msgSend_setFontSize_(void *a1, const char *a2, ...)
{
  return [a1 setFontSize:];
}

id objc_msgSend_setForegroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundColor:];
}

id objc_msgSend_setForegroundView_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundView:];
}

id objc_msgSend_setForegroundViewBottomAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundViewBottomAnchorLayoutConstraint:];
}

id objc_msgSend_setForegroundViewLeadingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundViewLeadingAnchorLayoutConstraint:];
}

id objc_msgSend_setForegroundViewTopAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundViewTopAnchorLayoutConstraint:];
}

id objc_msgSend_setForegroundViewTrailingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setForegroundViewTrailingAnchorLayoutConstraint:];
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return [a1 setFrame:];
}

id objc_msgSend_setGivenName_(void *a1, const char *a2, ...)
{
  return [a1 setGivenName:];
}

id objc_msgSend_setGreetingDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setGreetingDelegate:];
}

id objc_msgSend_setGreetingModel_(void *a1, const char *a2, ...)
{
  return [a1 setGreetingModel:];
}

id objc_msgSend_setGreetingState_(void *a1, const char *a2, ...)
{
  return [a1 setGreetingState:];
}

id objc_msgSend_setGroupName_(void *a1, const char *a2, ...)
{
  return [a1 setGroupName:];
}

id objc_msgSend_setHIDEventSystemClient_(void *a1, const char *a2, ...)
{
  return [a1 setHIDEventSystemClient:];
}

id objc_msgSend_setHandle_(void *a1, const char *a2, ...)
{
  return [a1 setHandle:];
}

id objc_msgSend_setHandlingKeypadPress_(void *a1, const char *a2, ...)
{
  return [a1 setHandlingKeypadPress:];
}

id objc_msgSend_setHandlingStop_(void *a1, const char *a2, ...)
{
  return [a1 setHandlingStop:];
}

id objc_msgSend_setHardwareControlsBroadcaster_(void *a1, const char *a2, ...)
{
  return [a1 setHardwareControlsBroadcaster:];
}

id objc_msgSend_setHasMarkedAsRead_(void *a1, const char *a2, ...)
{
  return [a1 setHasMarkedAsRead:];
}

id objc_msgSend_setHasRecordedNewGreeting_(void *a1, const char *a2, ...)
{
  return [a1 setHasRecordedNewGreeting:];
}

id objc_msgSend_setHasRingView_(void *a1, const char *a2, ...)
{
  return [a1 setHasRingView:];
}

id objc_msgSend_setHeadIndent_(void *a1, const char *a2, ...)
{
  return [a1 setHeadIndent:];
}

id objc_msgSend_setHeaderLayoutGuide_(void *a1, const char *a2, ...)
{
  return [a1 setHeaderLayoutGuide:];
}

id objc_msgSend_setHeaderViewController_(void *a1, const char *a2, ...)
{
  return [a1 setHeaderViewController:];
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return [a1 setHidden:];
}

id objc_msgSend_setHideUnreadIndicatorMetadataViewLeadingConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setHideUnreadIndicatorMetadataViewLeadingConstraint:];
}

id objc_msgSend_setHidesBackButton_(void *a1, const char *a2, ...)
{
  return [a1 setHidesBackButton:];
}

id objc_msgSend_setHidesSearchBarWhenScrolling_(void *a1, const char *a2, ...)
{
  return [a1 setHidesSearchBarWhenScrolling:];
}

id objc_msgSend_setHidesSearchableSources_(void *a1, const char *a2, ...)
{
  return [a1 setHidesSearchableSources:];
}

id objc_msgSend_setHighlightView_(void *a1, const char *a2, ...)
{
  return [a1 setHighlightView:];
}

id objc_msgSend_setHighlighted_(void *a1, const char *a2, ...)
{
  return [a1 setHighlighted:];
}

id objc_msgSend_setHighlightedImage_(void *a1, const char *a2, ...)
{
  return [a1 setHighlightedImage:];
}

id objc_msgSend_setHighlightedTextColor_(void *a1, const char *a2, ...)
{
  return [a1 setHighlightedTextColor:];
}

id objc_msgSend_setHorizontalAlignment_(void *a1, const char *a2, ...)
{
  return [a1 setHorizontalAlignment:];
}

id objc_msgSend_setHostingNavigationController_(void *a1, const char *a2, ...)
{
  return [a1 setHostingNavigationController:];
}

id objc_msgSend_setIconSizeRatio_(void *a1, const char *a2, ...)
{
  return [a1 setIconSizeRatio:];
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setIdentifier:];
}

id objc_msgSend_setIdleTimerDisabled_(void *a1, const char *a2, ...)
{
  return [a1 setIdleTimerDisabled:];
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return [a1 setImage:];
}

id objc_msgSend_setImage_forState_(void *a1, const char *a2, ...)
{
  return [a1 setImage:forState:];
}

id objc_msgSend_setImage_forStates_(void *a1, const char *a2, ...)
{
  return [a1 setImage:forStates:];
}

id objc_msgSend_setImageEdgeInsets_(void *a1, const char *a2, ...)
{
  return [a1 setImageEdgeInsets:];
}

id objc_msgSend_setIncludeDonatedContacts_(void *a1, const char *a2, ...)
{
  return [a1 setIncludeDonatedContacts:];
}

id objc_msgSend_setIncludeSuggestedContacts_(void *a1, const char *a2, ...)
{
  return [a1 setIncludeSuggestedContacts:];
}

id objc_msgSend_setIndexPathsForMissedCalls_(void *a1, const char *a2, ...)
{
  return [a1 setIndexPathsForMissedCalls:];
}

id objc_msgSend_setIndexPathsForNormalCalls_(void *a1, const char *a2, ...)
{
  return [a1 setIndexPathsForNormalCalls];
}

id objc_msgSend_setIndicatorViewCenterXLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setIndicatorViewCenterXLayoutConstraint:];
}

id objc_msgSend_setIndicatorViewTopLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setIndicatorViewTopLayoutConstraint:];
}

id objc_msgSend_setInitialConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setInitialConstraints:];
}

id objc_msgSend_setInitializationBlockQueued_(void *a1, const char *a2, ...)
{
  return [a1 setInitializationBlockQueued:];
}

id objc_msgSend_setInterrupted_(void *a1, const char *a2, ...)
{
  return [a1 setInterrupted:];
}

id objc_msgSend_setInvitationPreferences_(void *a1, const char *a2, ...)
{
  return [a1 setInvitationPreferences:];
}

id objc_msgSend_setIsDeleted_(void *a1, const char *a2, ...)
{
  return [a1 setIsDeleted:];
}

id objc_msgSend_setIsHostedInRemoteViewController_(void *a1, const char *a2, ...)
{
  return [a1 setIsHostedInRemoteViewController:];
}

id objc_msgSend_setIsInitialTab_(void *a1, const char *a2, ...)
{
  return [a1 setIsInitialTab:];
}

id objc_msgSend_setIsMissedCall_(void *a1, const char *a2, ...)
{
  return [a1 setIsMissedCall:];
}

id objc_msgSend_setIsPendingAudioSessionActivation_(void *a1, const char *a2, ...)
{
  return [a1 setIsPendingAudioSessionActivation:];
}

id objc_msgSend_setIsRead_(void *a1, const char *a2, ...)
{
  return [a1 setIsRead:];
}

id objc_msgSend_setIsRecording_(void *a1, const char *a2, ...)
{
  return [a1 setIsRecording:];
}

id objc_msgSend_setIsSwipeToDelete_(void *a1, const char *a2, ...)
{
  return [a1 setIsSwipeToDelete:];
}

id objc_msgSend_setIsUIInitialized_(void *a1, const char *a2, ...)
{
  return [a1 setIsUIInitialized:];
}

id objc_msgSend_setIsWaitingForProximitySensor_(void *a1, const char *a2, ...)
{
  return [a1 setIsWaitingForProximitySensor:];
}

id objc_msgSend_setItem_(void *a1, const char *a2, ...)
{
  return [a1 setItem:];
}

id objc_msgSend_setJoinCallImageView_(void *a1, const char *a2, ...)
{
  return [a1 setJoinCallImageView:];
}

id objc_msgSend_setKeyIndex_(void *a1, const char *a2, ...)
{
  return [a1 setKeyIndex:];
}

id objc_msgSend_setKeyTimes_(void *a1, const char *a2, ...)
{
  return [a1 setKeyTimes:];
}

id objc_msgSend_setKeypadToContactsSwitchStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setKeypadToContactsSwitchStartTime:];
}

id objc_msgSend_setLabelStackView_(void *a1, const char *a2, ...)
{
  return [a1 setLabelStackView:];
}

id objc_msgSend_setLabelsEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setLabelsEnabled:];
}

id objc_msgSend_setLargeContentImage_(void *a1, const char *a2, ...)
{
  return [a1 setLargeContentImage:];
}

id objc_msgSend_setLargeTitleDisplayMode_(void *a1, const char *a2, ...)
{
  return [a1 setLargeTitleDisplayMode:];
}

id objc_msgSend_setLargeTitleInsets_(void *a1, const char *a2, ...)
{
  return [a1 setLargeTitleInsets:];
}

id objc_msgSend_setLayoutIsAccessible_(void *a1, const char *a2, ...)
{
  return [a1 setLayoutIsAccessible:];
}

id objc_msgSend_setLayoutMargins_(void *a1, const char *a2, ...)
{
  return [a1 setLayoutMargins:];
}

id objc_msgSend_setLayoutMarginsRelativeArrangement_(void *a1, const char *a2, ...)
{
  return [a1 setLayoutMarginsRelativeArrangement:];
}

id objc_msgSend_setLayoutSize_withContentPriority_(void *a1, const char *a2, ...)
{
  return [a1 setLayoutSize:withContentPriority:];
}

id objc_msgSend_setLcdView_(void *a1, const char *a2, ...)
{
  return [a1 setLcdView:];
}

id objc_msgSend_setLcdViewTextFieldDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setLcdViewTextFieldDelegate:];
}

id objc_msgSend_setLeftBarButtonItem_(void *a1, const char *a2, ...)
{
  return [a1 setLeftBarButtonItem:];
}

id objc_msgSend_setLeftBarButtonItem_animated_(void *a1, const char *a2, ...)
{
  return [a1 setLeftBarButtonItem:animated:];
}

id objc_msgSend_setLeftBarButtonItemGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 setLeftBarButtonItemGestureRecognizer:];
}

id objc_msgSend_setLegacyVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 setLegacyVoicemails];
}

id objc_msgSend_setLimitedSoftPhoneKeypad_(void *a1, const char *a2, ...)
{
  return [a1 setLimitedSoftPhoneKeypad:];
}

id objc_msgSend_setLineBreakMode_(void *a1, const char *a2, ...)
{
  return [a1 setLineBreakMode:];
}

id objc_msgSend_setLineFragmentPadding_(void *a1, const char *a2, ...)
{
  return [a1 setLineFragmentPadding:];
}

id objc_msgSend_setLineHeight_(void *a1, const char *a2, ...)
{
  return [a1 setLineHeight:];
}

id objc_msgSend_setLinkTextAttributes_(void *a1, const char *a2, ...)
{
  return [a1 setLinkTextAttributes:];
}

id objc_msgSend_setLocalSenderIdentityAccountUUID_(void *a1, const char *a2, ...)
{
  return [a1 setLocalSenderIdentityAccountUUID:];
}

id objc_msgSend_setLocalSenderIdentityUUID_(void *a1, const char *a2, ...)
{
  return [a1 setLocalSenderIdentityUUID:];
}

id objc_msgSend_setLocalizedAttributedRestrictedAlertTitle_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedAttributedRestrictedAlertTitle:];
}

id objc_msgSend_setLocalizedCount_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedCount];
}

id objc_msgSend_setLocalizedDate_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedDate:];
}

id objc_msgSend_setLocalizedDuration_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedDuration:];
}

id objc_msgSend_setLocalizedHeadline_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedHeadline:];
}

id objc_msgSend_setLocalizedSenderIdentityTitle_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedSenderIdentityTitle:];
}

id objc_msgSend_setLocalizedSubheadline_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedSubheadline:];
}

id objc_msgSend_setLocalizedSubtitle_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedSubtitle:];
}

id objc_msgSend_setLocalizedTitle_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedTitle:];
}

id objc_msgSend_setLocalizedValidHandlesTitle_(void *a1, const char *a2, ...)
{
  return [a1 setLocalizedValidHandlesTitle:];
}

id objc_msgSend_setMailboxStorageAlertController_(void *a1, const char *a2, ...)
{
  return [a1 setMailboxStorageAlertController:];
}

id objc_msgSend_setMainMenuContainerViewController_(void *a1, const char *a2, ...)
{
  return [a1 setMainMenuContainerViewController:];
}

id objc_msgSend_setMainNumberLabel_(void *a1, const char *a2, ...)
{
  return [a1 setMainNumberLabel:];
}

id objc_msgSend_setMainTableView_(void *a1, const char *a2, ...)
{
  return [a1 setMainTableView:];
}

id objc_msgSend_setMapItem_(void *a1, const char *a2, ...)
{
  return [a1 setMapItem:];
}

id objc_msgSend_setMasksToBounds_(void *a1, const char *a2, ...)
{
  return [a1 setMasksToBounds:];
}

id objc_msgSend_setMass_(void *a1, const char *a2, ...)
{
  return [a1 setMass:];
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaxConcurrentOperationCount:];
}

id objc_msgSend_setMaxRecordedDuration_(void *a1, const char *a2, ...)
{
  return [a1 setMaxRecordedDuration:];
}

id objc_msgSend_setMaximumAllowedHeight_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumAllowedHeight:];
}

id objc_msgSend_setMaximumColumnsWithAccessibility_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumColumnsWithAccessibility:];
}

id objc_msgSend_setMaximumColumnsWithoutAccessibility_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumColumnsWithoutAccessibility:];
}

id objc_msgSend_setMaximumContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumContentSizeCategory:];
}

id objc_msgSend_setMaximumHeightConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumHeightConstraint:];
}

id objc_msgSend_setMaximumLayoutSize_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumLayoutSize:];
}

id objc_msgSend_setMaximumNumberOfLines_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumNumberOfLines:];
}

id objc_msgSend_setMaximumTime_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumTime:];
}

id objc_msgSend_setMaximumTrackImage_forState_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumTrackImage:forState:];
}

id objc_msgSend_setMeCardSharingSettingsViewControllerObserver_(void *a1, const char *a2, ...)
{
  return [a1 setMeCardSharingSettingsViewControllerObserver:];
}

id objc_msgSend_setMediaType_(void *a1, const char *a2, ...)
{
  return [a1 setMediaType:];
}

id objc_msgSend_setMenu_(void *a1, const char *a2, ...)
{
  return [a1 setMenu:];
}

id objc_msgSend_setMenuVisible_animated_(void *a1, const char *a2, ...)
{
  return [a1 setMenuVisible:animated:];
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return [a1 setMessage:];
}

id objc_msgSend_setMessageLabelCenterXAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMessageLabelCenterXAnchorLayoutConstraint:];
}

id objc_msgSend_setMessageLabelFirstBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMessageLabelFirstBaselineLayoutConstraint:];
}

id objc_msgSend_setMessageLabelLastBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMessageLabelLastBaselineLayoutConstraint:];
}

id objc_msgSend_setMessageLabelLeadingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMessageLabelLeadingLayoutConstraint:];
}

id objc_msgSend_setMessageLabelTrailingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMessageLabelTrailingLayoutConstraint:];
}

id objc_msgSend_setMessages_(void *a1, const char *a2, ...)
{
  return [a1 setMessages:];
}

id objc_msgSend_setMetadataCache_(void *a1, const char *a2, ...)
{
  return [a1 setMetadataCache:];
}

id objc_msgSend_setMetadataViewLeadingConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMetadataViewLeadingConstraint:];
}

id objc_msgSend_setMetadataViewTopConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setMetadataViewTopConstraint:];
}

id objc_msgSend_setMinimumFontSize_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumFontSize:];
}

id objc_msgSend_setMinimumLayoutSize_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumLayoutSize:];
}

id objc_msgSend_setMinimumPressDuration_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumPressDuration:];
}

id objc_msgSend_setMinimumScaleFactor_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumScaleFactor:];
}

id objc_msgSend_setMinimumTrackImage_forState_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumTrackImage:forState:];
}

id objc_msgSend_setModalPresentationStyle_(void *a1, const char *a2, ...)
{
  return [a1 setModalPresentationStyle:];
}

id objc_msgSend_setModalTransitionStyle_(void *a1, const char *a2, ...)
{
  return [a1 setModalTransitionStyle:];
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return [a1 setMode:];
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return [a1 setName:];
}

id objc_msgSend_setName_numberLabel_(void *a1, const char *a2, ...)
{
  return [a1 setName:numberLabel:];
}

id objc_msgSend_setName_numberLabel_suggestion_(void *a1, const char *a2, ...)
{
  return [a1 setName:numberLabel:suggestion:];
}

id objc_msgSend_setNameAndLabelLabel_(void *a1, const char *a2, ...)
{
  return [a1 setNameAndLabelLabel:];
}

id objc_msgSend_setNameLabel_(void *a1, const char *a2, ...)
{
  return [a1 setNameLabel:];
}

id objc_msgSend_setNameLabelBaselineConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setNameLabelBaselineConstraint:];
}

id objc_msgSend_setNameLabelVerticalLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setNameLabelVerticalLayoutConstraint:];
}

id objc_msgSend_setNavBarGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 setNavBarGestureRecognizer:];
}

id objc_msgSend_setNavigationBarHidden_animated_(void *a1, const char *a2, ...)
{
  return [a1 setNavigationBarHidden:animated:];
}

id objc_msgSend_setNavigationItemsForEditing_animated_(void *a1, const char *a2, ...)
{
  return [a1 setNavigationItemsForEditing:animated:];
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsDisplay];
}

id objc_msgSend_setNeedsFocusUpdate(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsFocusUpdate];
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsLayout];
}

id objc_msgSend_setNeedsReloadData_(void *a1, const char *a2, ...)
{
  return [a1 setNeedsReloadData:];
}

id objc_msgSend_setNeedsSave_(void *a1, const char *a2, ...)
{
  return [a1 setNeedsSave:];
}

id objc_msgSend_setNeedsStatusBarAppearanceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsStatusBarAppearanceUpdate];
}

id objc_msgSend_setNeedsUpdateConstraints(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsUpdateConstraints];
}

id objc_msgSend_setNeedsWhitePointAdaptivityStyleUpdate(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsWhitePointAdaptivityStyleUpdate];
}

id objc_msgSend_setNoContentBannerShown_(void *a1, const char *a2, ...)
{
  return [a1 setNoContentBannerShown:];
}

id objc_msgSend_setNoContentBannerView_(void *a1, const char *a2, ...)
{
  return [a1 setNoContentBannerView:];
}

id objc_msgSend_setNonEditingLinebreakMode_(void *a1, const char *a2, ...)
{
  return [a1 setNonEditingLinebreakMode:];
}

id objc_msgSend_setNotificationCenter_(void *a1, const char *a2, ...)
{
  return [a1 setNotificationCenter:];
}

id objc_msgSend_setNumber_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setNumber:forKey:];
}

id objc_msgSend_setNumberFormatter_(void *a1, const char *a2, ...)
{
  return [a1 setNumberFormatter:];
}

id objc_msgSend_setNumberLabelHorizontalConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setNumberLabelHorizontalConstraints:];
}

id objc_msgSend_setNumberOfLines_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfLines:];
}

id objc_msgSend_setNumberOfTapsRequired_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfTapsRequired:];
}

id objc_msgSend_setNumberOfTouchesRequired_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfTouchesRequired:];
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:atIndexedSubscript:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setObjectViewControllerDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setObjectViewControllerDelegate:];
}

id objc_msgSend_setObscuresBackgroundDuringPresentation_(void *a1, const char *a2, ...)
{
  return [a1 setObscuresBackgroundDuringPresentation:];
}

id objc_msgSend_setObservedProgress_(void *a1, const char *a2, ...)
{
  return [a1 setObservedProgress:];
}

id objc_msgSend_setOnboardingController_(void *a1, const char *a2, ...)
{
  return [a1 setOnboardingController:];
}

id objc_msgSend_setOnlyRealContacts_(void *a1, const char *a2, ...)
{
  return [a1 setOnlyRealContacts:];
}

id objc_msgSend_setOpacity_(void *a1, const char *a2, ...)
{
  return [a1 setOpacity:];
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return [a1 setOpaque:];
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return [a1 setOptions:];
}

id objc_msgSend_setOrganizationName_(void *a1, const char *a2, ...)
{
  return [a1 setOrganizationName:];
}

id objc_msgSend_setOrientationEventsEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setOrientationEventsEnabled:];
}

id objc_msgSend_setOriginalBackgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setOriginalBackgroundColor:];
}

id objc_msgSend_setOriginatingUIType_(void *a1, const char *a2, ...)
{
  return [a1 setOriginatingUIType:];
}

id objc_msgSend_setOutputFile_(void *a1, const char *a2, ...)
{
  return [a1 setOutputFile:];
}

id objc_msgSend_setOutputFileType_(void *a1, const char *a2, ...)
{
  return [a1 setOutputFileType:];
}

id objc_msgSend_setOutputURL_(void *a1, const char *a2, ...)
{
  return [a1 setOutputURL:];
}

id objc_msgSend_setPasscode_forAccountUUID_completion_(void *a1, const char *a2, ...)
{
  return [a1 setPasscode:forAccountUUID:completion:];
}

id objc_msgSend_setPendingSearchControllerActivation_(void *a1, const char *a2, ...)
{
  return [a1 setPendingSearchControllerActivation:];
}

id objc_msgSend_setPendingSearchText_(void *a1, const char *a2, ...)
{
  return [a1 setPendingSearchText:];
}

id objc_msgSend_setPendingState_(void *a1, const char *a2, ...)
{
  return [a1 setPendingState:];
}

id objc_msgSend_setPendingUpdatedRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 setPendingUpdatedRecentCalls:];
}

id objc_msgSend_setPerformDialAssist_(void *a1, const char *a2, ...)
{
  return [a1 setPerformDialAssist:];
}

id objc_msgSend_setPerformLocalDialAssist_(void *a1, const char *a2, ...)
{
  return [a1 setPerformLocalDialAssist:];
}

id objc_msgSend_setPermittedArrowDirections_(void *a1, const char *a2, ...)
{
  return [a1 setPermittedArrowDirections:];
}

id objc_msgSend_setPhoneNumberPrefixHint_(void *a1, const char *a2, ...)
{
  return [a1 setPhoneNumberPrefixHint:];
}

id objc_msgSend_setPhoneNumberTypeLabel_(void *a1, const char *a2, ...)
{
  return [a1 setPhoneNumberTypeLabel:];
}

id objc_msgSend_setPhoneNumberTypeLabelText_(void *a1, const char *a2, ...)
{
  return [a1 setPhoneNumberTypeLabelText:];
}

id objc_msgSend_setPhoneNumbers_(void *a1, const char *a2, ...)
{
  return [a1 setPhoneNumbers:];
}

id objc_msgSend_setPhonePadView_(void *a1, const char *a2, ...)
{
  return [a1 setPhonePadView:];
}

id objc_msgSend_setPhonePadViewTopConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setPhonePadViewTopConstraint:];
}

id objc_msgSend_setPillView_(void *a1, const char *a2, ...)
{
  return [a1 setPillView:];
}

id objc_msgSend_setPlayMessageOnReloadData_(void *a1, const char *a2, ...)
{
  return [a1 setPlayMessageOnReloadData:];
}

id objc_msgSend_setPlayPauseButton_(void *a1, const char *a2, ...)
{
  return [a1 setPlayPauseButton:];
}

id objc_msgSend_setPlayerController_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerController:];
}

id objc_msgSend_setPlayerControlsView_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerControlsView:];
}

id objc_msgSend_setPlayerControlsViewBottomAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerControlsViewBottomAnchorLayoutConstraint:];
}

id objc_msgSend_setPlayerControlsViewLayoutConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerControlsViewLayoutConstraints:];
}

id objc_msgSend_setPlayerControlsViewTopAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerControlsViewTopAnchorLayoutConstraint:];
}

id objc_msgSend_setPlayerItem_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerItem:];
}

id objc_msgSend_setPlayerState_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerState:];
}

id objc_msgSend_setPlayerState_enabled_(void *a1, const char *a2, ...)
{
  return [a1 setPlayerState:enabled:];
}

id objc_msgSend_setPlaysSounds_(void *a1, const char *a2, ...)
{
  return [a1 setPlaysSounds:];
}

id objc_msgSend_setPreFetchingPredicate_(void *a1, const char *a2, ...)
{
  return [a1 setPreFetchingPredicate:];
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return [a1 setPredicate:];
}

id objc_msgSend_setPredicateForEnablingContact_(void *a1, const char *a2, ...)
{
  return [a1 setPredicateForEnablingContact];
}

id objc_msgSend_setPredicateForSelectionOfContact_(void *a1, const char *a2, ...)
{
  return [a1 setPredicateForSelectionOfContact:];
}

id objc_msgSend_setPreferencesValue_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setPreferencesValue:forKey:];
}

id objc_msgSend_setPreferencesValue_forKey_domain_(void *a1, const char *a2, ...)
{
  return [a1 setPreferencesValue:forKey:domain:];
}

id objc_msgSend_setPreferredIntrinsicContentSizeWidth_(void *a1, const char *a2, ...)
{
  return [a1 setPreferredIntrinsicContentSizeWidth:];
}

id objc_msgSend_setPreferredMaxLayoutWidth_(void *a1, const char *a2, ...)
{
  return [a1 setPreferredMaxLayoutWidth:];
}

id objc_msgSend_setPreferredPhoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 setPreferredPhoneNumber:];
}

id objc_msgSend_setPrefersLargeTitles_(void *a1, const char *a2, ...)
{
  return [a1 setPrefersLargeTitles:];
}

id objc_msgSend_setPrefetchDataSource_(void *a1, const char *a2, ...)
{
  return [a1 setPrefetchDataSource:];
}

id objc_msgSend_setPresentedFromSetup_(void *a1, const char *a2, ...)
{
  return [a1 setPresentedFromSetup:];
}

id objc_msgSend_setPreservesSuperviewLayoutMargins_(void *a1, const char *a2, ...)
{
  return [a1 setPreservesSuperviewLayoutMargins:];
}

id objc_msgSend_setPreviousAccountProvisioningRequired_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousAccountProvisioningRequired:];
}

id objc_msgSend_setPreviousTextSuggestion_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousTextSuggestion];
}

id objc_msgSend_setPrewarmProvider_(void *a1, const char *a2, ...)
{
  return [a1 setPrewarmProvider:];
}

id objc_msgSend_setPrimaryPropertyKey_(void *a1, const char *a2, ...)
{
  return [a1 setPrimaryPropertyKey:];
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return [a1 setPriority:];
}

id objc_msgSend_setPriorityOfConstraints_to_(void *a1, const char *a2, ...)
{
  return [a1 setPriorityOfConstraints:to:];
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return [a1 setProgress:];
}

id objc_msgSend_setProgressItem_(void *a1, const char *a2, ...)
{
  return [a1 setProgressItem:];
}

id objc_msgSend_setProgressTintColor_(void *a1, const char *a2, ...)
{
  return [a1 setProgressTintColor:];
}

id objc_msgSend_setProgressView_(void *a1, const char *a2, ...)
{
  return [a1 setProgressView:];
}

id objc_msgSend_setProgressViewBottomLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewBottomLayoutConstraint:];
}

id objc_msgSend_setProgressViewCenterXLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewCenterXLayoutConstraint:];
}

id objc_msgSend_setProgressViewCenterYAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewCenterYAnchorConstraint:];
}

id objc_msgSend_setProgressViewHeightAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewHeightAnchorConstraint:];
}

id objc_msgSend_setProgressViewLeadingAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewLeadingAnchorConstraint:];
}

id objc_msgSend_setProgressViewLeadingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewLeadingLayoutConstraint:];
}

id objc_msgSend_setProgressViewTrailingAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewTrailingAnchorConstraint:];
}

id objc_msgSend_setProgressViewTrailingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setProgressViewTrailingLayoutConstraint:];
}

id objc_msgSend_setPrompt_(void *a1, const char *a2, ...)
{
  return [a1 setPrompt:];
}

id objc_msgSend_setPromptTextForConfirmingNewPIN_(void *a1, const char *a2, ...)
{
  return [a1 setPromptTextForConfirmingNewPIN];
}

id objc_msgSend_setPromptTextForNewPIN_(void *a1, const char *a2, ...)
{
  return [a1 setPromptTextForNewPIN:];
}

id objc_msgSend_setPromptTextForOldPIN_(void *a1, const char *a2, ...)
{
  return [a1 setPromptTextForOldPIN:];
}

id objc_msgSend_setPromptTextForSavingPIN_(void *a1, const char *a2, ...)
{
  return [a1 setPromptTextForSavingPIN:];
}

id objc_msgSend_setProvider_(void *a1, const char *a2, ...)
{
  return [a1 setProvider:];
}

id objc_msgSend_setProvidesPresentationContextTransitionStyle_(void *a1, const char *a2, ...)
{
  return [a1 setProvidesPresentationContextTransitionStyle:];
}

id objc_msgSend_setProximityMonitoringEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setProximityMonitoringEnabled:];
}

id objc_msgSend_setQueuedMessage_(void *a1, const char *a2, ...)
{
  return [a1 setQueuedMessage:];
}

id objc_msgSend_setRate_(void *a1, const char *a2, ...)
{
  return [a1 setRate:];
}

id objc_msgSend_setRead_(void *a1, const char *a2, ...)
{
  return [a1 setRead:];
}

id objc_msgSend_setReadButton_(void *a1, const char *a2, ...)
{
  return [a1 setReadButton:];
}

id objc_msgSend_setReceivesMemoryWarnings_(void *a1, const char *a2, ...)
{
  return [a1 setReceivesMemoryWarnings:];
}

id objc_msgSend_setRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 setRecentCall:];
}

id objc_msgSend_setRecentCalls_(void *a1, const char *a2, ...)
{
  return [a1 setRecentCalls:];
}

id objc_msgSend_setRecentsItem_(void *a1, const char *a2, ...)
{
  return [a1 setRecentsItem:];
}

id objc_msgSend_setReloadingData_(void *a1, const char *a2, ...)
{
  return [a1 setReloadingData:];
}

id objc_msgSend_setRemainingTimeLabelBottomAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setRemainingTimeLabelBottomAnchorLayoutConstraint:];
}

id objc_msgSend_setRemainingTimeLabelFirstBaselineAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setRemainingTimeLabelFirstBaselineAnchorLayoutConstraint:];
}

id objc_msgSend_setRemainingTimeLabelLeadingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setRemainingTimeLabelLeadingAnchorLayoutConstraint:];
}

id objc_msgSend_setRemainingTimeLabelTrailingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setRemainingTimeLabelTrailingAnchorLayoutConstraint:];
}

id objc_msgSend_setRemovedOnCompletion_(void *a1, const char *a2, ...)
{
  return [a1 setRemovedOnCompletion:];
}

id objc_msgSend_setRenderMode_(void *a1, const char *a2, ...)
{
  return [a1 setRenderMode:];
}

id objc_msgSend_setReportAndBlockSection_(void *a1, const char *a2, ...)
{
  return [a1 setReportAndBlockSection:];
}

id objc_msgSend_setRepresentedVoicemail_(void *a1, const char *a2, ...)
{
  return [a1 setRepresentedVoicemail:];
}

id objc_msgSend_setRepresentedVoicemail_isRestrictedMessage_(void *a1, const char *a2, ...)
{
  return [a1 setRepresentedVoicemail:isRestrictedMessage:];
}

id objc_msgSend_setRespondsToEventsWhileInCall_(void *a1, const char *a2, ...)
{
  return [a1 setRespondsToEventsWhileInCall:];
}

id objc_msgSend_setRestricted_(void *a1, const char *a2, ...)
{
  return [a1 setRestricted:];
}

id objc_msgSend_setRestrictedMessage_(void *a1, const char *a2, ...)
{
  return [a1 setRestrictedMessage];
}

id objc_msgSend_setRestrictedViewBottomConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setRestrictedViewBottomConstraint:];
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return [a1 setRightBarButtonItem:];
}

id objc_msgSend_setRightBarButtonItem_animated_(void *a1, const char *a2, ...)
{
  return [a1 setRightBarButtonItem:animated:];
}

id objc_msgSend_setRightBarButtonItemGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 setRightBarButtonItemGestureRecognizer:];
}

id objc_msgSend_setRingView_(void *a1, const char *a2, ...)
{
  return [a1 setRingView:];
}

id objc_msgSend_setRingerStateNotifyToken_(void *a1, const char *a2, ...)
{
  return [a1 setRingerStateNotifyToken:];
}

id objc_msgSend_setRingerSwitchEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setRingerSwitchEnabled:];
}

id objc_msgSend_setRootViewController_(void *a1, const char *a2, ...)
{
  return [a1 setRootViewController:];
}

id objc_msgSend_setRootViewControllerDictionaries_(void *a1, const char *a2, ...)
{
  return [a1 setRootViewControllerDictionaries:];
}

id objc_msgSend_setRowHeight_(void *a1, const char *a2, ...)
{
  return [a1 setRowHeight:];
}

id objc_msgSend_setRowSpacing_(void *a1, const char *a2, ...)
{
  return [a1 setRowSpacing:];
}

id objc_msgSend_setRttConversations_(void *a1, const char *a2, ...)
{
  return [a1 setRttConversations:];
}

id objc_msgSend_setSaveItem_(void *a1, const char *a2, ...)
{
  return [a1 setSaveItem:];
}

id objc_msgSend_setSavedPerson_(void *a1, const char *a2, ...)
{
  return [a1 setSavedPerson:];
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return [a1 setScale:];
}

id objc_msgSend_setScrollEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setScrollEnabled:];
}

id objc_msgSend_setSearchButton_(void *a1, const char *a2, ...)
{
  return [a1 setSearchButton:];
}

id objc_msgSend_setSearchController_(void *a1, const char *a2, ...)
{
  return [a1 setSearchController:];
}

id objc_msgSend_setSearchControllerProvider_(void *a1, const char *a2, ...)
{
  return [a1 setSearchControllerProvider:];
}

id objc_msgSend_setSearchResultsUpdater_(void *a1, const char *a2, ...)
{
  return [a1 setSearchResultsUpdater:];
}

id objc_msgSend_setSelectable_(void *a1, const char *a2, ...)
{
  return [a1 setSelectable:];
}

id objc_msgSend_setSelected_(void *a1, const char *a2, ...)
{
  return [a1 setSelected:];
}

id objc_msgSend_setSelected_animated_(void *a1, const char *a2, ...)
{
  return [a1 setSelected:animated:];
}

id objc_msgSend_setSelectedAccount_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedAccount:];
}

id objc_msgSend_setSelectedGreeting_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedGreeting:];
}

id objc_msgSend_setSelectedIndex_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedIndex:];
}

id objc_msgSend_setSelectedSegmentIndex_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedSegmentIndex:];
}

id objc_msgSend_setSelectedSenderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedSenderIdentity:];
}

id objc_msgSend_setSelectedTextRange_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedTextRange:];
}

id objc_msgSend_setSelectedViewController_(void *a1, const char *a2, ...)
{
  return [a1 setSelectedViewController:];
}

id objc_msgSend_setSelectionRange_(void *a1, const char *a2, ...)
{
  return [a1 setSelectionRange:];
}

id objc_msgSend_setSelectionStyle_(void *a1, const char *a2, ...)
{
  return [a1 setSelectionStyle:];
}

id objc_msgSend_setSemanticContentAttribute_(void *a1, const char *a2, ...)
{
  return [a1 setSemanticContentAttribute:];
}

id objc_msgSend_setSenderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 setSenderIdentity:];
}

id objc_msgSend_setSeparator_(void *a1, const char *a2, ...)
{
  return [a1 setSeparator:];
}

id objc_msgSend_setSeparatorColor_(void *a1, const char *a2, ...)
{
  return [a1 setSeparatorColor:];
}

id objc_msgSend_setSeparatorInset_(void *a1, const char *a2, ...)
{
  return [a1 setSeparatorInset:];
}

id objc_msgSend_setSeparatorInsetReference_(void *a1, const char *a2, ...)
{
  return [a1 setSeparatorInsetReference:];
}

id objc_msgSend_setSeparatorStyle_(void *a1, const char *a2, ...)
{
  return [a1 setSeparatorStyle:];
}

id objc_msgSend_setServiceProvider_(void *a1, const char *a2, ...)
{
  return [a1 setServiceProvider:];
}

id objc_msgSend_setSessionPreset_(void *a1, const char *a2, ...)
{
  return [a1 setSessionPreset:];
}

id objc_msgSend_setSharedServiceIsSubscribedPreviousValue_(void *a1, const char *a2, ...)
{
  return [a1 setSharedServiceIsSubscribedPreviousValue];
}

id objc_msgSend_setSharingAudience_(void *a1, const char *a2, ...)
{
  return [a1 setSharingAudience:];
}

id objc_msgSend_setSharingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setSharingEnabled:];
}

id objc_msgSend_setShortcutItem_(void *a1, const char *a2, ...)
{
  return [a1 setShortcutItem:];
}

id objc_msgSend_setShortcutItems_(void *a1, const char *a2, ...)
{
  return [a1 setShortcutItems:];
}

id objc_msgSend_setShouldDisplayMeContactBanner_(void *a1, const char *a2, ...)
{
  return [a1 setShouldDisplayMeContactBanner:];
}

id objc_msgSend_setShouldFlick_(void *a1, const char *a2, ...)
{
  return [a1 setShouldFlick];
}

id objc_msgSend_setShouldHideDeleteButtonWhenEmpty_(void *a1, const char *a2, ...)
{
  return [a1 setShouldHideDeleteButtonWhenEmpty:];
}

id objc_msgSend_setShouldShowAddButtonItem_(void *a1, const char *a2, ...)
{
  return [a1 setShouldShowAddButtonItem:];
}

id objc_msgSend_setShouldShowAddButtonItem_animated_(void *a1, const char *a2, ...)
{
  return [a1 setShouldShowAddButtonItem:animated:];
}

id objc_msgSend_setShouldShowLinkedContacts_(void *a1, const char *a2, ...)
{
  return [a1 setShouldShowLinkedContacts:];
}

id objc_msgSend_setShouldSuppressShowingLastDialedNumber_(void *a1, const char *a2, ...)
{
  return [a1 setShouldSuppressShowingLastDialedNumber:];
}

id objc_msgSend_setShouldSwitchToMostRecentViewType_(void *a1, const char *a2, ...)
{
  return [a1 setShouldSwitchToMostRecentViewType:];
}

id objc_msgSend_setShowLegacyVoicemailLabel_(void *a1, const char *a2, ...)
{
  return [a1 setShowLegacyVoicemailLabel:];
}

id objc_msgSend_setShowsChevron_(void *a1, const char *a2, ...)
{
  return [a1 setShowsChevron:];
}

id objc_msgSend_setShowsLargeContentViewer_(void *a1, const char *a2, ...)
{
  return [a1 setShowsLargeContentViewer:];
}

id objc_msgSend_setShowsMenuAsPrimaryAction_(void *a1, const char *a2, ...)
{
  return [a1 setShowsMenuAsPrimaryAction:];
}

id objc_msgSend_setShowsOutgoingCallIcon_(void *a1, const char *a2, ...)
{
  return [a1 setShowsOutgoingCallIcon:];
}

id objc_msgSend_setShowsPlayerControls_(void *a1, const char *a2, ...)
{
  return [a1 setShowsPlayerControls:];
}

id objc_msgSend_setShowsPlayerControls_animated_(void *a1, const char *a2, ...)
{
  return [a1 setShowsPlayerControls:animated:];
}

id objc_msgSend_setShowsRestrictedAlertView_(void *a1, const char *a2, ...)
{
  return [a1 setShowsRestrictedAlertView:];
}

id objc_msgSend_setShowsSearchResultsController_(void *a1, const char *a2, ...)
{
  return [a1 setShowsSearchResultsController:];
}

id objc_msgSend_setShowsTranscriptionView_(void *a1, const char *a2, ...)
{
  return [a1 setShowsTranscriptionView:];
}

id objc_msgSend_setSignpostIntervalDidBegin_(void *a1, const char *a2, ...)
{
  return [a1 setSignpostIntervalDidBegin:];
}

id objc_msgSend_setSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 setSizeCategory:];
}

id objc_msgSend_setSliderBottomAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setSliderBottomAnchorLayoutConstraint:];
}

id objc_msgSend_setSliderLeadingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setSliderLeadingAnchorLayoutConstraint:];
}

id objc_msgSend_setSliderTopAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setSliderTopAnchorLayoutConstraint:];
}

id objc_msgSend_setSliderTrailingAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setSliderTrailingAnchorLayoutConstraint:];
}

id objc_msgSend_setSocialProfiles_(void *a1, const char *a2, ...)
{
  return [a1 setSocialProfiles:];
}

id objc_msgSend_setSourceRect_(void *a1, const char *a2, ...)
{
  return [a1 setSourceRect:];
}

id objc_msgSend_setSourceView_(void *a1, const char *a2, ...)
{
  return [a1 setSourceView:];
}

id objc_msgSend_setSpacing_(void *a1, const char *a2, ...)
{
  return [a1 setSpacing:];
}

id objc_msgSend_setSpecialLayoutType_(void *a1, const char *a2, ...)
{
  return [a1 setSpecialLayoutType:];
}

id objc_msgSend_setSpecialRingView_(void *a1, const char *a2, ...)
{
  return [a1 setSpecialRingView:];
}

id objc_msgSend_setSpecialization_(void *a1, const char *a2, ...)
{
  return [a1 setSpecialization:];
}

id objc_msgSend_setSpringBoardLocked_(void *a1, const char *a2, ...)
{
  return [a1 setSpringBoardLocked:];
}

id objc_msgSend_setStackView_(void *a1, const char *a2, ...)
{
  return [a1 setStackView:];
}

id objc_msgSend_setStackViewVerticalLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setStackViewVerticalLayoutConstraint:];
}

id objc_msgSend_setStandardAppearance_(void *a1, const char *a2, ...)
{
  return [a1 setStandardAppearance:];
}

id objc_msgSend_setStandardConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setStandardConstraints:];
}

id objc_msgSend_setStartedLoadingOlderCalls_(void *a1, const char *a2, ...)
{
  return [a1 setStartedLoadingOlderCalls:];
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return [a1 setState:];
}

id objc_msgSend_setState_animated_(void *a1, const char *a2, ...)
{
  return [a1 setState:animated:];
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return [a1 setStatus:];
}

id objc_msgSend_setStiffness_(void *a1, const char *a2, ...)
{
  return [a1 setStiffness:];
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return [a1 setString:];
}

id objc_msgSend_setStroke(void *a1, const char *a2, ...)
{
  return _[a1 setStroke];
}

id objc_msgSend_setStyle_(void *a1, const char *a2, ...)
{
  return [a1 setStyle:];
}

id objc_msgSend_setSubtitleLabel_(void *a1, const char *a2, ...)
{
  return [a1 setSubtitleLabel:];
}

id objc_msgSend_setSubtitleLabelBaselineConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setSubtitleLabelBaselineConstraint:];
}

id objc_msgSend_setSubtitleString_(void *a1, const char *a2, ...)
{
  return [a1 setSubtitleString:];
}

id objc_msgSend_setSuggestedContactStore_(void *a1, const char *a2, ...)
{
  return [a1 setSuggestedContactStore:];
}

id objc_msgSend_setSuggestionsDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setSuggestionsDelegate:];
}

id objc_msgSend_setSummaries_(void *a1, const char *a2, ...)
{
  return [a1 setSummaries:];
}

id objc_msgSend_setTabBarItem_(void *a1, const char *a2, ...)
{
  return [a1 setTabBarItem:];
}

id objc_msgSend_setTableDataSource_(void *a1, const char *a2, ...)
{
  return [a1 setTableDataSource:];
}

id objc_msgSend_setTableFooterView_(void *a1, const char *a2, ...)
{
  return [a1 setTableFooterView:];
}

id objc_msgSend_setTableHeaderView_(void *a1, const char *a2, ...)
{
  return [a1 setTableHeaderView:];
}

id objc_msgSend_setTableViewDisplayMode_(void *a1, const char *a2, ...)
{
  return [a1 setTableViewDisplayMode:];
}

id objc_msgSend_setTableViewModel_(void *a1, const char *a2, ...)
{
  return [a1 setTableViewModel:];
}

id objc_msgSend_setTableViewReloadIsRequiredOnViewWillAppear_(void *a1, const char *a2, ...)
{
  return [a1 setTableViewReloadIsRequiredOnViewWillAppear:];
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return [a1 setTag:];
}

id objc_msgSend_setTapTargets_(void *a1, const char *a2, ...)
{
  return [a1 setTapTargets:];
}

id objc_msgSend_setTargetRect_inView_(void *a1, const char *a2, ...)
{
  return [a1 setTargetRect:inView:];
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return [a1 setText:];
}

id objc_msgSend_setText_needsFormat_(void *a1, const char *a2, ...)
{
  return [a1 setText:needsFormat:];
}

id objc_msgSend_setText_needsFormat_name_label_(void *a1, const char *a2, ...)
{
  return [a1 setText:needsFormat:name:label:];
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return [a1 setTextAlignment:];
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return [a1 setTextColor:];
}

id objc_msgSend_setTextContainerInset_(void *a1, const char *a2, ...)
{
  return [a1 setTextContainerInset:];
}

id objc_msgSend_setTextViewBottomLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTextViewBottomLayoutConstraint:];
}

id objc_msgSend_setTextViewFirstBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTextViewFirstBaselineLayoutConstraint:];
}

id objc_msgSend_setTextViewFirstBaselineWithoutAccessoryViewsLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTextViewFirstBaselineWithoutAccessoryViewsLayoutConstraint:];
}

id objc_msgSend_setTextViewLastBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTextViewLastBaselineLayoutConstraint:];
}

id objc_msgSend_setTextViewLeadingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTextViewLeadingLayoutConstraint:];
}

id objc_msgSend_setTextViewTrailingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTextViewTrailingLayoutConstraint:];
}

id objc_msgSend_setThreeDTouchEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setThreeDTouchEnabled:];
}

id objc_msgSend_setThumbImage_forState_(void *a1, const char *a2, ...)
{
  return [a1 setThumbImage:forState:];
}

id objc_msgSend_setThumbImageView_(void *a1, const char *a2, ...)
{
  return [a1 setThumbImageView:];
}

id objc_msgSend_setTimeControlStatus_(void *a1, const char *a2, ...)
{
  return [a1 setTimeControlStatus:];
}

id objc_msgSend_setTimeObserver_(void *a1, const char *a2, ...)
{
  return [a1 setTimeObserver:];
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return [a1 setTimeStyle:];
}

id objc_msgSend_setTimelineSliderCenterYAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTimelineSliderCenterYAnchorConstraint:];
}

id objc_msgSend_setTimelineSliderLeadingAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTimelineSliderLeadingAnchorConstraint:];
}

id objc_msgSend_setTimelineSliderTrailingAnchorConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTimelineSliderTrailingAnchorConstraint:];
}

id objc_msgSend_setTimingFunction_(void *a1, const char *a2, ...)
{
  return [a1 setTimingFunction:];
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return [a1 setTintColor:];
}

id objc_msgSend_setTintColorDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setTintColorDelegate:];
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:];
}

id objc_msgSend_setTitle_alignment_symbolType_normalStateColor_usingSmallFont_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:alignment:symbolType:normalStateColor:usingSmallFont:];
}

id objc_msgSend_setTitle_forState_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:forState:];
}

id objc_msgSend_setTitle_subtitle_subtitleColor_localizedSenderIdentityTitle_animated_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:subtitle:subtitleColor:localizedSenderIdentityTitle:animated:];
}

id objc_msgSend_setTitleColor_forState_(void *a1, const char *a2, ...)
{
  return [a1 setTitleColor:forState:];
}

id objc_msgSend_setTitleEdgeInsets_(void *a1, const char *a2, ...)
{
  return [a1 setTitleEdgeInsets:];
}

id objc_msgSend_setTitleLabel_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabel:];
}

id objc_msgSend_setTitleLabelCenterXAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelCenterXAnchorLayoutConstraint:];
}

id objc_msgSend_setTitleLabelCenterXLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelCenterXLayoutConstraint:];
}

id objc_msgSend_setTitleLabelFirstBaselineAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelFirstBaselineAnchorLayoutConstraint:];
}

id objc_msgSend_setTitleLabelFirstBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelFirstBaselineLayoutConstraint:];
}

id objc_msgSend_setTitleLabelLastBaselineAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelLastBaselineAnchorLayoutConstraint:];
}

id objc_msgSend_setTitleLabelLastBaselineLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelLastBaselineLayoutConstraint:];
}

id objc_msgSend_setTitleLabelLeadingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelLeadingLayoutConstraint:];
}

id objc_msgSend_setTitleLabelTopLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelTopLayoutConstraint:];
}

id objc_msgSend_setTitleLabelTrailingLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTitleLabelTrailingLayoutConstraint:];
}

id objc_msgSend_setTitleString_(void *a1, const char *a2, ...)
{
  return [a1 setTitleString:];
}

id objc_msgSend_setTitleView_(void *a1, const char *a2, ...)
{
  return [a1 setTitleView:];
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return [a1 setToValue:];
}

id objc_msgSend_setToggledOn_(void *a1, const char *a2, ...)
{
  return [a1 setToggledOn:];
}

id objc_msgSend_setToolbarBottomConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setToolbarBottomConstraint:];
}

id objc_msgSend_setToolbarHidden_(void *a1, const char *a2, ...)
{
  return [a1 setToolbarHidden:];
}

id objc_msgSend_setToolbarItems_(void *a1, const char *a2, ...)
{
  return [a1 setToolbarItems:];
}

id objc_msgSend_setTrackTintColor_(void *a1, const char *a2, ...)
{
  return [a1 setTrackTintColor:];
}

id objc_msgSend_setTranscriptBottomConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTranscriptBottomConstraint:];
}

id objc_msgSend_setTranscriptSeparatorViewTopAnchorLayoutConstraint_(void *a1, const char *a2, ...)
{
  return [a1 setTranscriptSeparatorViewTopAnchorLayoutConstraint:];
}

id objc_msgSend_setTranscriptViewModel_(void *a1, const char *a2, ...)
{
  return [a1 setTranscriptViewModel:];
}

id objc_msgSend_setTranscriptionUnavailable_(void *a1, const char *a2, ...)
{
  return [a1 setTranscriptionUnavailable:];
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return [a1 setTransform:];
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setTranslatesAutoresizingMaskIntoConstraints:];
}

id objc_msgSend_setTranslucent_(void *a1, const char *a2, ...)
{
  return [a1 setTranslucent:];
}

id objc_msgSend_setTrashVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 setTrashVoicemails];
}

id objc_msgSend_setTtyType_(void *a1, const char *a2, ...)
{
  return [a1 setTtyType:];
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return [a1 setType:];
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return [a1 setURL:];
}

id objc_msgSend_setUUID_(void *a1, const char *a2, ...)
{
  return [a1 setUUID:];
}

id objc_msgSend_setUniqueId_(void *a1, const char *a2, ...)
{
  return [a1 setUniqueId:];
}

id objc_msgSend_setUnreadCallCount_(void *a1, const char *a2, ...)
{
  return [a1 setUnreadCallCount:];
}

id objc_msgSend_setUnreadIndicatorImageView_(void *a1, const char *a2, ...)
{
  return [a1 setUnreadIndicatorImageView:];
}

id objc_msgSend_setUpReportAndBlockSection(void *a1, const char *a2, ...)
{
  return _[a1 setUpReportAndBlockSection];
}

id objc_msgSend_setUpTableView(void *a1, const char *a2, ...)
{
  return _[a1 setUpTableView];
}

id objc_msgSend_setUpdateTimer_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateTimer:];
}

id objc_msgSend_setUrl_(void *a1, const char *a2, ...)
{
  return [a1 setUrl:];
}

id objc_msgSend_setUserActivity_(void *a1, const char *a2, ...)
{
  return [a1 setUserActivity:];
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return [a1 setUserInfo:];
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setUserInteractionEnabled:];
}

id objc_msgSend_setUsesBrandedCallHeaderFormat_(void *a1, const char *a2, ...)
{
  return [a1 setUsesBrandedCallHeaderFormat:];
}

id objc_msgSend_setUsesEvenOddFillRule_(void *a1, const char *a2, ...)
{
  return [a1 setUsesEvenOddFillRule:];
}

id objc_msgSend_setUsingSmallFont_(void *a1, const char *a2, ...)
{
  return [a1 setUsingSmallFont:];
}

id objc_msgSend_setValue_animated_(void *a1, const char *a2, ...)
{
  return [a1 setValue:animated:];
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forKey:];
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return [a1 setValues:];
}

id objc_msgSend_setVerified_(void *a1, const char *a2, ...)
{
  return [a1 setVerified:];
}

id objc_msgSend_setVerifiedBadgeView_(void *a1, const char *a2, ...)
{
  return [a1 setVerifiedBadgeView:];
}

id objc_msgSend_setVerticalAlignment_(void *a1, const char *a2, ...)
{
  return [a1 setVerticalAlignment:];
}

id objc_msgSend_setVibrantOptions_(void *a1, const char *a2, ...)
{
  return [a1 setVibrantOptions:];
}

id objc_msgSend_setVideo_(void *a1, const char *a2, ...)
{
  return [a1 setVideo:];
}

id objc_msgSend_setVideoEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setVideoEnabled:];
}

id objc_msgSend_setView_(void *a1, const char *a2, ...)
{
  return [a1 setView:];
}

id objc_msgSend_setViewControllers_(void *a1, const char *a2, ...)
{
  return [a1 setViewControllers:];
}

id objc_msgSend_setViewControllers_animated_(void *a1, const char *a2, ...)
{
  return [a1 setViewControllers:animated:];
}

id objc_msgSend_setViewHadAppeared_(void *a1, const char *a2, ...)
{
  return [a1 setViewHadAppeared:];
}

id objc_msgSend_setViewModel_(void *a1, const char *a2, ...)
{
  return [a1 setViewModel:];
}

id objc_msgSend_setVisible_(void *a1, const char *a2, ...)
{
  return [a1 setVisible:];
}

id objc_msgSend_setVisiblePath_(void *a1, const char *a2, ...)
{
  return [a1 setVisiblePath:];
}

id objc_msgSend_setVisualEffect_(void *a1, const char *a2, ...)
{
  return [a1 setVisualEffect:];
}

id objc_msgSend_setVoicemailController_(void *a1, const char *a2, ...)
{
  return [a1 setVoicemailController:];
}

id objc_msgSend_setVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 setVoicemails:];
}

id objc_msgSend_setWantsCallButtonAnimation_(void *a1, const char *a2, ...)
{
  return [a1 setWantsCallButtonAnimation:];
}

id objc_msgSend_setWantsStagingArea_(void *a1, const char *a2, ...)
{
  return [a1 setWantsStagingArea:];
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return [a1 setWithArray:];
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 setWithCapacity:];
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return [a1 setWithObject:];
}

id objc_msgSend_setWrapperNavigationController_(void *a1, const char *a2, ...)
{
  return [a1 setWrapperNavigationController:];
}

id objc_msgSend_setZeroFormattingBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setZeroFormattingBehavior:];
}

id objc_msgSend_settingsWithContactStore_threeDTouchEnabled_(void *a1, const char *a2, ...)
{
  return [a1 settingsWithContactStore:threeDTouchEnabled:];
}

id objc_msgSend_setupCollapsedView(void *a1, const char *a2, ...)
{
  return _[a1 setupCollapsedView];
}

id objc_msgSend_setupContentViewFullSize(void *a1, const char *a2, ...)
{
  return _[a1 setupContentViewFullSize];
}

id objc_msgSend_setupContentViewSidebar(void *a1, const char *a2, ...)
{
  return _[a1 setupContentViewSidebar];
}

id objc_msgSend_setupExpandedView(void *a1, const char *a2, ...)
{
  return _[a1 setupExpandedView];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _[a1 sharedApplication];
}

id objc_msgSend_sharedAudioDeviceController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAudioDeviceController];
}

id objc_msgSend_sharedAudioSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAudioSystemController];
}

id objc_msgSend_sharedControllerWithCoalescingStrategy_options_(void *a1, const char *a2, ...)
{
  return [a1 sharedControllerWithCoalescingStrategy:options:];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedMenuController(void *a1, const char *a2, ...)
{
  return _[a1 sharedMenuController];
}

id objc_msgSend_sharedMonitorForDisplayType_(void *a1, const char *a2, ...)
{
  return [a1 sharedMonitorForDisplayType:];
}

id objc_msgSend_sharedNumberFormatter(void *a1, const char *a2, ...)
{
  return _[a1 sharedNumberFormatter];
}

id objc_msgSend_sharedPlayerController(void *a1, const char *a2, ...)
{
  return _[a1 sharedPlayerController];
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _[a1 sharedPreferences];
}

id objc_msgSend_sharedService(void *a1, const char *a2, ...)
{
  return _[a1 sharedService];
}

id objc_msgSend_sharedServiceIsSubscribedPreviousValue(void *a1, const char *a2, ...)
{
  return _[a1 sharedServiceIsSubscribedPreviousValue];
}

id objc_msgSend_sharedSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedSystemController];
}

id objc_msgSend_sharedUtilityProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedUtilityProvider];
}

id objc_msgSend_sharedVoicemailManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedVoicemailManager];
}

id objc_msgSend_shortDateLabel(void *a1, const char *a2, ...)
{
  return _[a1 shortDateLabel];
}

id objc_msgSend_shortDurationLabel(void *a1, const char *a2, ...)
{
  return _[a1 shortDurationLabel];
}

id objc_msgSend_shortcutItem(void *a1, const char *a2, ...)
{
  return _[a1 shortcutItem];
}

id objc_msgSend_shortcutItems(void *a1, const char *a2, ...)
{
  return _[a1 shortcutItems];
}

id objc_msgSend_shouldAnimateCallButton(void *a1, const char *a2, ...)
{
  return _[a1 shouldAnimateCallButton];
}

id objc_msgSend_shouldDisableEdgeClip(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisableEdgeClip];
}

id objc_msgSend_shouldDisplayTranscript(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisplayTranscript];
}

id objc_msgSend_shouldEnableProximityMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 shouldEnableProximityMonitoring];
}

id objc_msgSend_shouldHideDeleteButtonWhenEmpty(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideDeleteButtonWhenEmpty];
}

id objc_msgSend_shouldInsertStringAtCurrentPosition_deletingPreviousCharacter_(void *a1, const char *a2, ...)
{
  return [a1 shouldInsertStringAtCurrentPosition:deletingPreviousCharacter:];
}

id objc_msgSend_shouldLimitKeypadAccess(void *a1, const char *a2, ...)
{
  return _[a1 shouldLimitKeypadAccess];
}

id objc_msgSend_shouldMakeUIForDefaultPNG(void *a1, const char *a2, ...)
{
  return _[a1 shouldMakeUIForDefaultPNG];
}

id objc_msgSend_shouldMarkAsReadForPlaybackCurrentTime_(void *a1, const char *a2, ...)
{
  return [a1 shouldMarkAsReadForPlaybackCurrentTime:];
}

id objc_msgSend_shouldNavigationControllerPresentLargeTitles(void *a1, const char *a2, ...)
{
  return _[a1 shouldNavigationControllerPresentLargeTitles];
}

id objc_msgSend_shouldPlayDTMFTone(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlayDTMFTone];
}

id objc_msgSend_shouldReloadCellsWithNumberOfCells_(void *a1, const char *a2, ...)
{
  return [a1 shouldReloadCellsWithNumberOfCells:];
}

id objc_msgSend_shouldRespondToHardwareControlEvent(void *a1, const char *a2, ...)
{
  return _[a1 shouldRespondToHardwareControlEvent];
}

id objc_msgSend_shouldRestrictAddresses_forBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 shouldRestrictAddresses:forBundleIdentifier:];
}

id objc_msgSend_shouldRestrictConversation_performSynchronously_(void *a1, const char *a2, ...)
{
  return [a1 shouldRestrictConversation:performSynchronously:];
}

id objc_msgSend_shouldRestrictDialRequest_(void *a1, const char *a2, ...)
{
  return [a1 shouldRestrictDialRequest:];
}

id objc_msgSend_shouldRestrictDialRequest_performSynchronously_(void *a1, const char *a2, ...)
{
  return [a1 shouldRestrictDialRequest:performSynchronously:];
}

id objc_msgSend_shouldRestrictJoinConversationRequest_performSynchronously_(void *a1, const char *a2, ...)
{
  return [a1 shouldRestrictJoinConversationRequest:performSynchronously:];
}

id objc_msgSend_shouldSaveAndRestoreState(void *a1, const char *a2, ...)
{
  return _[a1 shouldSaveAndRestoreState];
}

id objc_msgSend_shouldShowAddButtonItem(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowAddButtonItem];
}

id objc_msgSend_shouldShowAutomaticTelephonyCallFallback(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowAutomaticTelephonyCallFallback];
}

id objc_msgSend_shouldShowBlockAll(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowBlockAll];
}

id objc_msgSend_shouldShowBlockUnknown(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowBlockUnknown];
}

id objc_msgSend_shouldShowBlockedSubFolder(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowBlockedSubFolder];
}

id objc_msgSend_shouldShowContactBlockReportButtonForCall_(void *a1, const char *a2, ...)
{
  return [a1 shouldShowContactBlockReportButtonForCall:];
}

id objc_msgSend_shouldShowGreetingButton(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowGreetingButton];
}

id objc_msgSend_shouldShowLastViewedTabGivenLastViewedTab_(void *a1, const char *a2, ...)
{
  return [a1 shouldShowLastViewedTabGivenLastViewedTab:];
}

id objc_msgSend_shouldShowPlayButtonForDefaultGreeting(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowPlayButtonForDefaultGreeting];
}

id objc_msgSend_shouldShowReportActionForCall_(void *a1, const char *a2, ...)
{
  return [a1 shouldShowReportActionForCall:];
}

id objc_msgSend_shouldShowReportInitiator(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowReportInitiator];
}

id objc_msgSend_shouldShowRestrictedAlertView(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowRestrictedAlertView];
}

id objc_msgSend_shouldShowSaveButton(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowSaveButton];
}

id objc_msgSend_shouldShowTranscriptView(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowTranscriptView];
}

id objc_msgSend_shouldShowTranscriptionModelWarningHeaderViewForCount_(void *a1, const char *a2, ...)
{
  return [a1 shouldShowTranscriptionModelWarningHeaderViewForCount:];
}

id objc_msgSend_shouldShowTrashSubFolder(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowTrashSubFolder];
}

id objc_msgSend_shouldShowVoicemailOnboarding(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowVoicemailOnboarding];
}

id objc_msgSend_shouldSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 shouldSnapshot];
}

id objc_msgSend_shouldStringAutoDial_givenLastChar_(void *a1, const char *a2, ...)
{
  return [a1 shouldStringAutoDial:givenLastChar:];
}

id objc_msgSend_shouldSuppressAudioRouteAlertController(void *a1, const char *a2, ...)
{
  return _[a1 shouldSuppressAudioRouteAlertController];
}

id objc_msgSend_shouldSuppressMultiwayRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 shouldSuppressMultiwayRecentCalls];
}

id objc_msgSend_shouldSuppressShowingLastDialedNumber(void *a1, const char *a2, ...)
{
  return _[a1 shouldSuppressShowingLastDialedNumber];
}

id objc_msgSend_shouldSwitchToMostRecentViewType(void *a1, const char *a2, ...)
{
  return _[a1 shouldSwitchToMostRecentViewType];
}

id objc_msgSend_shouldUseExplicitLayoutDimensions(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseExplicitLayoutDimensions];
}

id objc_msgSend_showAllContactsList(void *a1, const char *a2, ...)
{
  return _[a1 showAllContactsList];
}

id objc_msgSend_showBarWithTransition_(void *a1, const char *a2, ...)
{
  return [a1 showBarWithTransition:];
}

id objc_msgSend_showBlockAllAlert(void *a1, const char *a2, ...)
{
  return _[a1 showBlockAllAlert];
}

id objc_msgSend_showBlockUnknownAlert(void *a1, const char *a2, ...)
{
  return _[a1 showBlockUnknownAlert];
}

id objc_msgSend_showCardForContact_animated_(void *a1, const char *a2, ...)
{
  return [a1 showCardForContact:animated:];
}

id objc_msgSend_showContentViewAnimated_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 showContentViewAnimated:completionBlock:];
}

id objc_msgSend_showFaceTimeFirstRunViewIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 showFaceTimeFirstRunViewIfNeeded];
}

id objc_msgSend_showFavoritesTab_recentsTab_contactsTab_keypadTab_voicemailTab_prewarm_(void *a1, const char *a2, ...)
{
  return [a1 showFavoritesTab:recentsTab:contactsTab:keypadTab:voicemailTab:prewarm:];
}

id objc_msgSend_showHideProgressView(void *a1, const char *a2, ...)
{
  return _[a1 showHideProgressView];
}

id objc_msgSend_showInitialView(void *a1, const char *a2, ...)
{
  return _[a1 showInitialView];
}

id objc_msgSend_showLegacyVoicemailLabel(void *a1, const char *a2, ...)
{
  return _[a1 showLegacyVoicemailLabel];
}

id objc_msgSend_showName_label_animated_(void *a1, const char *a2, ...)
{
  return [a1 showName:label:animated:];
}

id objc_msgSend_showOrHideDeleteButton(void *a1, const char *a2, ...)
{
  return _[a1 showOrHideDeleteButton];
}

id objc_msgSend_showProgressView(void *a1, const char *a2, ...)
{
  return _[a1 showProgressView];
}

id objc_msgSend_showRecentCallDetailsViewControllerFor_from_(void *a1, const char *a2, ...)
{
  return [a1 showRecentCallDetailsViewControllerFor:from:];
}

id objc_msgSend_showRecentCallDetailsViewControllerForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 showRecentCallDetailsViewControllerForRecentCall:];
}

id objc_msgSend_showRecentCallDetailsViewControllerForRecentCall_animated_(void *a1, const char *a2, ...)
{
  return [a1 showRecentCallDetailsViewControllerForRecentCall:animated:];
}

id objc_msgSend_showReportAlert(void *a1, const char *a2, ...)
{
  return _[a1 showReportAlert];
}

id objc_msgSend_showReportingExtensionForCall_(void *a1, const char *a2, ...)
{
  return [a1 showReportingExtensionForCall:];
}

id objc_msgSend_showRestrictedAlertForMessage_(void *a1, const char *a2, ...)
{
  return [a1 showRestrictedAlertForMessage];
}

id objc_msgSend_showRestrictedAlertWithMessage_(void *a1, const char *a2, ...)
{
  return [a1 showRestrictedAlertWithMessage:];
}

id objc_msgSend_showTimelineSlider(void *a1, const char *a2, ...)
{
  return _[a1 showTimelineSlider];
}

id objc_msgSend_showViewController_playingMessage_(void *a1, const char *a2, ...)
{
  return [a1 showViewController:playingMessage:];
}

id objc_msgSend_showsCallsFromService_(void *a1, const char *a2, ...)
{
  return [a1 showsCallsFromService:];
}

id objc_msgSend_showsChevron(void *a1, const char *a2, ...)
{
  return _[a1 showsChevron];
}

id objc_msgSend_showsFaceTimeAudio(void *a1, const char *a2, ...)
{
  return _[a1 showsFaceTimeAudio];
}

id objc_msgSend_showsFaceTimeAudioRecents(void *a1, const char *a2, ...)
{
  return _[a1 showsFaceTimeAudioRecents];
}

id objc_msgSend_showsFaceTimeVideo(void *a1, const char *a2, ...)
{
  return _[a1 showsFaceTimeVideo];
}

id objc_msgSend_showsFaceTimeVideoRecents(void *a1, const char *a2, ...)
{
  return _[a1 showsFaceTimeVideoRecents];
}

id objc_msgSend_showsPhoneDialer(void *a1, const char *a2, ...)
{
  return _[a1 showsPhoneDialer];
}

id objc_msgSend_showsPhoneVoicemail(void *a1, const char *a2, ...)
{
  return _[a1 showsPhoneVoicemail];
}

id objc_msgSend_showsPlayerControls(void *a1, const char *a2, ...)
{
  return _[a1 showsPlayerControls];
}

id objc_msgSend_showsRestrictedAlertView(void *a1, const char *a2, ...)
{
  return _[a1 showsRestrictedAlertView];
}

id objc_msgSend_showsTelephonyCalls(void *a1, const char *a2, ...)
{
  return _[a1 showsTelephonyCalls];
}

id objc_msgSend_showsTelephonyRecents(void *a1, const char *a2, ...)
{
  return _[a1 showsTelephonyRecents];
}

id objc_msgSend_showsThirdPartyRecents(void *a1, const char *a2, ...)
{
  return _[a1 showsThirdPartyRecents];
}

id objc_msgSend_showsTranscriptionView(void *a1, const char *a2, ...)
{
  return _[a1 showsTranscriptionView];
}

id objc_msgSend_signpostIntervalDidBegin(void *a1, const char *a2, ...)
{
  return _[a1 signpostIntervalDidBegin];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return [a1 sizeThatFits:];
}

id objc_msgSend_sizeToFit(void *a1, const char *a2, ...)
{
  return _[a1 sizeToFit];
}

id objc_msgSend_slider(void *a1, const char *a2, ...)
{
  return _[a1 slider];
}

id objc_msgSend_sliderBottomAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 sliderBottomAnchorLayoutConstraint];
}

id objc_msgSend_sliderCell(void *a1, const char *a2, ...)
{
  return _[a1 sliderCell];
}

id objc_msgSend_sliderLeadingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 sliderLeadingAnchorLayoutConstraint];
}

id objc_msgSend_sliderTopAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 sliderTopAnchorLayoutConstraint];
}

id objc_msgSend_sliderTrailingAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 sliderTrailingAnchorLayoutConstraint];
}

id objc_msgSend_smallHeight(void *a1, const char *a2, ...)
{
  return _[a1 smallHeight];
}

id objc_msgSend_smartDialerEnabled(void *a1, const char *a2, ...)
{
  return _[a1 smartDialerEnabled];
}

id objc_msgSend_smartDialerExpandedSearchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 smartDialerExpandedSearchEnabled];
}

id objc_msgSend_socialProfiles(void *a1, const char *a2, ...)
{
  return _[a1 socialProfiles];
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return [a1 sortDescriptorWithKey:ascending:];
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 sortedArrayUsingDescriptors:];
}

id objc_msgSend_soundPlayer(void *a1, const char *a2, ...)
{
  return _[a1 soundPlayer];
}

id objc_msgSend_sourceView(void *a1, const char *a2, ...)
{
  return _[a1 sourceView];
}

id objc_msgSend_spacingBetweenContactResultButtons(void *a1, const char *a2, ...)
{
  return _[a1 spacingBetweenContactResultButtons];
}

id objc_msgSend_spacingBetweenNumberAndContactResult(void *a1, const char *a2, ...)
{
  return _[a1 spacingBetweenNumberAndContactResult];
}

id objc_msgSend_spacingBetweenNumberBaselineAndNameBaseline(void *a1, const char *a2, ...)
{
  return _[a1 spacingBetweenNumberBaselineAndNameBaseline];
}

id objc_msgSend_speakerAudioRouteGlyph(void *a1, const char *a2, ...)
{
  return _[a1 speakerAudioRouteGlyph];
}

id objc_msgSend_speakerRouteAvailableForUnformattedPickableRoutes_(void *a1, const char *a2, ...)
{
  return [a1 speakerRouteAvailableForUnformattedPickableRoutes];
}

id objc_msgSend_speakerRouteGlyphForDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 speakerRouteGlyphForDisplayStyle:];
}

id objc_msgSend_specialDialerCharacters(void *a1, const char *a2, ...)
{
  return _[a1 specialDialerCharacters];
}

id objc_msgSend_specialRingView(void *a1, const char *a2, ...)
{
  return _[a1 specialRingView];
}

id objc_msgSend_stackView(void *a1, const char *a2, ...)
{
  return _[a1 stackView];
}

id objc_msgSend_stackViewVerticalLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 stackViewVerticalLayoutConstraint];
}

id objc_msgSend_stackViewVerticalLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 stackViewVerticalLayoutConstraintConstant];
}

id objc_msgSend_standardConstraints(void *a1, const char *a2, ...)
{
  return _[a1 standardConstraints];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_starAndOctothorpeCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 starAndOctothorpeCharacterSet];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startAnimating(void *a1, const char *a2, ...)
{
  return _[a1 startAnimating];
}

id objc_msgSend_startObservingPreferences(void *a1, const char *a2, ...)
{
  return _[a1 startObservingPreferences];
}

id objc_msgSend_startOnboardingOrEditForMode_fromViewController_(void *a1, const char *a2, ...)
{
  return [a1 startOnboardingOrEditForMode:fromViewController:];
}

id objc_msgSend_startPreviewIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 startPreviewIfNeeded];
}

id objc_msgSend_startRecording(void *a1, const char *a2, ...)
{
  return _[a1 startRecording];
}

id objc_msgSend_startRecordingToOutputFileURL_recordingDelegate_(void *a1, const char *a2, ...)
{
  return [a1 startRecordingToOutputFileURL:recordingDelegate:];
}

id objc_msgSend_startRunning(void *a1, const char *a2, ...)
{
  return _[a1 startRunning];
}

id objc_msgSend_startScrollTest(void *a1, const char *a2, ...)
{
  return _[a1 startScrollTest];
}

id objc_msgSend_startScrollVoicemailWithInteractionTest(void *a1, const char *a2, ...)
{
  return _[a1 startScrollVoicemailWithInteractionTest];
}

id objc_msgSend_startScrollWithInteractionTest(void *a1, const char *a2, ...)
{
  return _[a1 startScrollWithInteractionTest];
}

id objc_msgSend_startSearching(void *a1, const char *a2, ...)
{
  return _[a1 startSearching];
}

id objc_msgSend_startSearchingForText_(void *a1, const char *a2, ...)
{
  return [a1 startSearchingForText:];
}

id objc_msgSend_startSwitchTest_(void *a1, const char *a2, ...)
{
  return [a1 startSwitchTest:];
}

id objc_msgSend_startTestOnMainThread_(void *a1, const char *a2, ...)
{
  return [a1 startTestOnMainThread:];
}

id objc_msgSend_startWithError_(void *a1, const char *a2, ...)
{
  return [a1 startWithError:];
}

id objc_msgSend_startedLoadingOlderCalls(void *a1, const char *a2, ...)
{
  return _[a1 startedLoadingOlderCalls];
}

id objc_msgSend_startedTest_(void *a1, const char *a2, ...)
{
  return [a1 startedTest:];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateForNotifyToken_(void *a1, const char *a2, ...)
{
  return [a1 stateForNotifyToken:];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusLabel(void *a1, const char *a2, ...)
{
  return _[a1 statusLabel];
}

id objc_msgSend_statusOfValueForKey_error_(void *a1, const char *a2, ...)
{
  return [a1 statusOfValueForKey:error:];
}

id objc_msgSend_statusText(void *a1, const char *a2, ...)
{
  return _[a1 statusText];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopAnimating(void *a1, const char *a2, ...)
{
  return _[a1 stopAnimating];
}

id objc_msgSend_stopObservingPreferences(void *a1, const char *a2, ...)
{
  return _[a1 stopObservingPreferences];
}

id objc_msgSend_stopRecording(void *a1, const char *a2, ...)
{
  return _[a1 stopRecording];
}

id objc_msgSend_stopRunning(void *a1, const char *a2, ...)
{
  return _[a1 stopRunning];
}

id objc_msgSend_storageUsage(void *a1, const char *a2, ...)
{
  return _[a1 storageUsage];
}

id objc_msgSend_store(void *a1, const char *a2, ...)
{
  return _[a1 store];
}

id objc_msgSend_storeWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 storeWithOptions:];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathComponent:];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingString:];
}

id objc_msgSend_stringByApplyingTransform_reverse_(void *a1, const char *a2, ...)
{
  return [a1 stringByApplyingTransform:reverse:];
}

id objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 stringByPaddingToLength:withString:startingAtIndex:];
}

id objc_msgSend_stringByRemovingCharactersFromSet_(void *a1, const char *a2, ...)
{
  return [a1 stringByRemovingCharactersFromSet:];
}

id objc_msgSend_stringByRemovingDiatrics(void *a1, const char *a2, ...)
{
  return _[a1 stringByRemovingDiatrics];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:withString:];
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return [a1 stringByTrimmingCharactersInSet:];
}

id objc_msgSend_stringByTrimmingLastCharacter(void *a1, const char *a2, ...)
{
  return _[a1 stringByTrimmingLastCharacter];
}

id objc_msgSend_stringForDataUsage_(void *a1, const char *a2, ...)
{
  return [a1 stringForDataUsage];
}

id objc_msgSend_stringForTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 stringForTimeInterval:];
}

id objc_msgSend_stringFromByteCount_countStyle_(void *a1, const char *a2, ...)
{
  return [a1 stringFromByteCount:countStyle:];
}

id objc_msgSend_stringFromContact_(void *a1, const char *a2, ...)
{
  return [a1 stringFromContact:];
}

id objc_msgSend_stringFromContact_style_(void *a1, const char *a2, ...)
{
  return [a1 stringFromContact:style:];
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return [a1 stringFromDate:];
}

id objc_msgSend_stringFromIOHIDUsage_(void *a1, const char *a2, ...)
{
  return [a1 stringFromIOHIDUsage:];
}

id objc_msgSend_stringFromIOHIDUsagePage_(void *a1, const char *a2, ...)
{
  return [a1 stringFromIOHIDUsagePage:];
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return [a1 stringFromNumber:];
}

id objc_msgSend_stringFromSeconds_(void *a1, const char *a2, ...)
{
  return [a1 stringFromSeconds:];
}

id objc_msgSend_stringFromTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 stringFromTimeInterval:];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return [a1 stringWithString:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_stroke(void *a1, const char *a2, ...)
{
  return _[a1 stroke];
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return [a1 subarrayWithRange:];
}

id objc_msgSend_subheadlineLabel(void *a1, const char *a2, ...)
{
  return _[a1 subheadlineLabel];
}

id objc_msgSend_subheadlineLabelFirstBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 subheadlineLabelFirstBaselineAnchorLayoutConstraint];
}

id objc_msgSend_subheadlineLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 subheadlineLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return _[a1 subscriptions];
}

id objc_msgSend_subscriptionsInUse(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionsInUse];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringFromIndex:];
}

id objc_msgSend_substringRange(void *a1, const char *a2, ...)
{
  return _[a1 substringRange];
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringToIndex:];
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return [a1 substringWithRange:];
}

id objc_msgSend_subtitleForNoContentBanner(void *a1, const char *a2, ...)
{
  return _[a1 subtitleForNoContentBanner];
}

id objc_msgSend_subtitleForRecentEmergencyCall_(void *a1, const char *a2, ...)
{
  return [a1 subtitleForRecentEmergencyCall:];
}

id objc_msgSend_subtitleImageView(void *a1, const char *a2, ...)
{
  return _[a1 subtitleImageView];
}

id objc_msgSend_subtitleLabel(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabel];
}

id objc_msgSend_subtitleLabelBaselineConstraint(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabelBaselineConstraint];
}

id objc_msgSend_subtitleLabelBaselineConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabelBaselineConstraintConstant];
}

id objc_msgSend_subtitleLabelFirstBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabelFirstBaselineLayoutConstraintConstant];
}

id objc_msgSend_subtitleLabelLastBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabelLastBaselineLayoutConstraintConstant];
}

id objc_msgSend_subtitleLabelLeadingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabelLeadingLayoutConstraintConstant];
}

id objc_msgSend_subtitleLabelTextColor(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLabelTextColor];
}

id objc_msgSend_subtitleLeadingToLayoutMarginConstrant(void *a1, const char *a2, ...)
{
  return _[a1 subtitleLeadingToLayoutMarginConstrant];
}

id objc_msgSend_subtitleProvider(void *a1, const char *a2, ...)
{
  return _[a1 subtitleProvider];
}

id objc_msgSend_subtitleStackView(void *a1, const char *a2, ...)
{
  return _[a1 subtitleStackView];
}

id objc_msgSend_subviews(void *a1, const char *a2, ...)
{
  return _[a1 subviews];
}

id objc_msgSend_subviewsLayoutConstraintsLoaded(void *a1, const char *a2, ...)
{
  return _[a1 subviewsLayoutConstraintsLoaded];
}

id objc_msgSend_suggestedContactForHandle_isoCountryCode_metadataCache_(void *a1, const char *a2, ...)
{
  return [a1 suggestedContactForHandle:isoCountryCode:metadataCache:];
}

id objc_msgSend_suggestedContactStore(void *a1, const char *a2, ...)
{
  return _[a1 suggestedContactStore];
}

id objc_msgSend_suggestionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 suggestionsEnabled];
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _[a1 superview];
}

id objc_msgSend_supportedHandleTypes(void *a1, const char *a2, ...)
{
  return _[a1 supportedHandleTypes];
}

id objc_msgSend_supportsAVCaptureSessionPreset_(void *a1, const char *a2, ...)
{
  return [a1 supportsAVCaptureSessionPreset:];
}

id objc_msgSend_supportsAudioAndVideo(void *a1, const char *a2, ...)
{
  return _[a1 supportsAudioAndVideo];
}

id objc_msgSend_supportsDisplayingFaceTimeAudioCalls(void *a1, const char *a2, ...)
{
  return _[a1 supportsDisplayingFaceTimeAudioCalls];
}

id objc_msgSend_supportsDisplayingFaceTimeVideoCalls(void *a1, const char *a2, ...)
{
  return _[a1 supportsDisplayingFaceTimeVideoCalls];
}

id objc_msgSend_supportsHandleType_(void *a1, const char *a2, ...)
{
  return [a1 supportsHandleType:];
}

id objc_msgSend_supportsPrimaryCalling(void *a1, const char *a2, ...)
{
  return _[a1 supportsPrimaryCalling];
}

id objc_msgSend_supportsSendMessageIntent(void *a1, const char *a2, ...)
{
  return _[a1 supportsSendMessageIntent];
}

id objc_msgSend_supportsSharePlay(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharePlay];
}

id objc_msgSend_supportsSimultaneousVoiceAndData(void *a1, const char *a2, ...)
{
  return _[a1 supportsSimultaneousVoiceAndData];
}

id objc_msgSend_switchToMostRecentlyUsedTabType_(void *a1, const char *a2, ...)
{
  return [a1 switchToMostRecentlyUsedTabType:];
}

id objc_msgSend_switchToTab_(void *a1, const char *a2, ...)
{
  return [a1 switchToTab:];
}

id objc_msgSend_symbolScaleForSymbolType_sizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 symbolScaleForSymbolType:sizeCategory:];
}

id objc_msgSend_symbolTypeForKeyPadButtonType_(void *a1, const char *a2, ...)
{
  return [a1 symbolTypeForKeyPadButtonType:];
}

id objc_msgSend_systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 systemBackgroundColor];
}

id objc_msgSend_systemBlackColor(void *a1, const char *a2, ...)
{
  return _[a1 systemBlackColor];
}

id objc_msgSend_systemBlueColor(void *a1, const char *a2, ...)
{
  return _[a1 systemBlueColor];
}

id objc_msgSend_systemButtonWithImage_target_action_(void *a1, const char *a2, ...)
{
  return [a1 systemButtonWithImage:nil target:nil action:nil];
}

id objc_msgSend_systemDarkGreenColor(void *a1, const char *a2, ...)
{
  return _[a1 systemDarkGreenColor];
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return [a1 systemFontOfSize:];
}

id objc_msgSend_systemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return [a1 systemFontOfSize:];
}

id objc_msgSend_systemGray3Color(void *a1, const char *a2, ...)
{
  return _[a1 systemGray3Color];
}

id objc_msgSend_systemGrayColor(void *a1, const char *a2, ...)
{
  return _[a1 systemGrayColor];
}

id objc_msgSend_systemGreenColor(void *a1, const char *a2, ...)
{
  return _[a1 systemGreenColor];
}

id objc_msgSend_systemImageNamed_(void *a1, const char *a2, ...)
{
  return [a1 systemImageNamed:];
}

id objc_msgSend_systemLayoutSizeFittingSize_(void *a1, const char *a2, ...)
{
  return [a1 systemLayoutSizeFittingSize:];
}

id objc_msgSend_systemLightGrayColor(void *a1, const char *a2, ...)
{
  return _[a1 systemLightGrayColor];
}

id objc_msgSend_systemMidGrayColor(void *a1, const char *a2, ...)
{
  return _[a1 systemMidGrayColor];
}

id objc_msgSend_systemMinimumLayoutMargins(void *a1, const char *a2, ...)
{
  return _[a1 systemMinimumLayoutMargins];
}

id objc_msgSend_systemRedColor(void *a1, const char *a2, ...)
{
  return _[a1 systemRedColor];
}

id objc_msgSend_systemTealColor(void *a1, const char *a2, ...)
{
  return _[a1 systemTealColor];
}

id objc_msgSend_systemTintColor(void *a1, const char *a2, ...)
{
  return _[a1 systemTintColor];
}

id objc_msgSend_systemWhiteColor(void *a1, const char *a2, ...)
{
  return _[a1 systemWhiteColor];
}

id objc_msgSend_tabBar(void *a1, const char *a2, ...)
{
  return _[a1 tabBar];
}

id objc_msgSend_tabBarCanSlide(void *a1, const char *a2, ...)
{
  return _[a1 tabBarCanSlide];
}

id objc_msgSend_tabBarController(void *a1, const char *a2, ...)
{
  return _[a1 tabBarController];
}

id objc_msgSend_tabBarControllerShouldSelectViewController_(void *a1, const char *a2, ...)
{
  return [a1 tabBarControllerShouldSelectViewController:];
}

id objc_msgSend_tabBarFillsScreen(void *a1, const char *a2, ...)
{
  return _[a1 tabBarFillsScreen];
}

id objc_msgSend_tabBarIconImage(void *a1, const char *a2, ...)
{
  return _[a1 tabBarIconImage];
}

id objc_msgSend_tabBarIconName(void *a1, const char *a2, ...)
{
  return _[a1 tabBarIconName];
}

id objc_msgSend_tabBarItem(void *a1, const char *a2, ...)
{
  return _[a1 tabBarItem];
}

id objc_msgSend_tabBarItemImage(void *a1, const char *a2, ...)
{
  return _[a1 tabBarItemImage];
}

id objc_msgSend_tabBarItemSelectedImage(void *a1, const char *a2, ...)
{
  return _[a1 tabBarItemSelectedImage];
}

id objc_msgSend_tabBarItemTitle(void *a1, const char *a2, ...)
{
  return _[a1 tabBarItemTitle];
}

id objc_msgSend_tabBarSystemItem(void *a1, const char *a2, ...)
{
  return _[a1 tabBarSystemItem];
}

id objc_msgSend_tabBarSystemItemTag(void *a1, const char *a2, ...)
{
  return _[a1 tabBarSystemItemTag];
}

id objc_msgSend_tabBarSystemItemTitle(void *a1, const char *a2, ...)
{
  return _[a1 tabBarSystemItemTitle];
}

id objc_msgSend_tabTypeForViewController_(void *a1, const char *a2, ...)
{
  return [a1 tabTypeForViewController:];
}

id objc_msgSend_tabViewTypeToReturnTo_(void *a1, const char *a2, ...)
{
  return [a1 tabViewTypeToReturnTo:];
}

id objc_msgSend_table(void *a1, const char *a2, ...)
{
  return _[a1 table];
}

id objc_msgSend_tableBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 tableBackgroundColor];
}

id objc_msgSend_tableHeaderView(void *a1, const char *a2, ...)
{
  return _[a1 tableHeaderView];
}

id objc_msgSend_tableView(void *a1, const char *a2, ...)
{
  return _[a1 tableView];
}

id objc_msgSend_tableView_accessoryButtonTappedForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView:accessoryButtonTappedForRowWithIndexPath:");
}

id objc_msgSend_tableView_collapseRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return [a1 tableView:collapseRowAtIndexPath:animated:];
}

id objc_msgSend_tableView_didSelectRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 tableView:didSelectRowAtIndexPath:];
}

id objc_msgSend_tableView_expandRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return [a1 tableView:expandRowAtIndexPath:animated:];
}

id objc_msgSend_tableView_numberOfRowsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView:numberOfRowsInSection:");
}

id objc_msgSend_tableView_willSelectRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 tableView:willSelectRowAtIndexPath:];
}

id objc_msgSend_tableViewCanPerformReloadData_(void *a1, const char *a2, ...)
{
  return [a1 tableViewCanPerformReloadData:];
}

id objc_msgSend_tableViewCellClass(void *a1, const char *a2, ...)
{
  return _[a1 tableViewCellClass];
}

id objc_msgSend_tableViewContentInset(void *a1, const char *a2, ...)
{
  return _[a1 tableViewContentInset];
}

id objc_msgSend_tableViewController_didChangeCalls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewController:didChangeCalls:");
}

id objc_msgSend_tableViewController_didChangeVoicemails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewController:didChangeVoicemails:");
}

id objc_msgSend_tableViewDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 tableViewDisplayMode];
}

id objc_msgSend_tableViewDisplayModeSegmentedControl(void *a1, const char *a2, ...)
{
  return _[a1 tableViewDisplayModeSegmentedControl];
}

id objc_msgSend_tableViewModel(void *a1, const char *a2, ...)
{
  return _[a1 tableViewModel];
}

id objc_msgSend_tableViewReloadIsRequiredOnViewWillAppear(void *a1, const char *a2, ...)
{
  return _[a1 tableViewReloadIsRequiredOnViewWillAppear];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_tapTargets(void *a1, const char *a2, ...)
{
  return _[a1 tapTargets];
}

id objc_msgSend_telephonyCallingIsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 telephonyCallingIsAvailable];
}

id objc_msgSend_telephonyClient(void *a1, const char *a2, ...)
{
  return _[a1 telephonyClient];
}

id objc_msgSend_telephonyProvider(void *a1, const char *a2, ...)
{
  return _[a1 telephonyProvider];
}

id objc_msgSend_telephonyUIBodyShortEmphasizedFont(void *a1, const char *a2, ...)
{
  return _[a1 telephonyUIBodyShortEmphasizedFont];
}

id objc_msgSend_telephonyUIBodyShortFont(void *a1, const char *a2, ...)
{
  return _[a1 telephonyUIBodyShortFont];
}

id objc_msgSend_telephonyUIFootnoteShortFont(void *a1, const char *a2, ...)
{
  return _[a1 telephonyUIFootnoteShortFont];
}

id objc_msgSend_telephonyUIInfoButtonGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 telephonyUIInfoButtonGlyphImage];
}

id objc_msgSend_telephonyUISubheadlineShortFont(void *a1, const char *a2, ...)
{
  return _[a1 telephonyUISubheadlineShortFont];
}

id objc_msgSend_telephonyUIUnreadIndicatorGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 telephonyUIUnreadIndicatorGlyphImage];
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _[a1 text];
}

id objc_msgSend_textAttachmentWithImage_(void *a1, const char *a2, ...)
{
  return [a1 textAttachmentWithImage:];
}

id objc_msgSend_textColor(void *a1, const char *a2, ...)
{
  return _[a1 textColor];
}

id objc_msgSend_textContainer(void *a1, const char *a2, ...)
{
  return _[a1 textContainer];
}

id objc_msgSend_textField_didUpdateString_(void *a1, const char *a2, ...)
{
  return [a1 textField:didUpdateString:];
}

id objc_msgSend_textInRange_(void *a1, const char *a2, ...)
{
  return [a1 textInRange:];
}

id objc_msgSend_textInputTraits(void *a1, const char *a2, ...)
{
  return _[a1 textInputTraits];
}

id objc_msgSend_textLabel(void *a1, const char *a2, ...)
{
  return _[a1 textLabel];
}

id objc_msgSend_textRangeFromPosition_toPosition_(void *a1, const char *a2, ...)
{
  return [a1 textRangeFromPosition:toPosition:];
}

id objc_msgSend_textStyleForSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 textStyleForSizeCategory:];
}

id objc_msgSend_textStylingAtPosition_inDirection_(void *a1, const char *a2, ...)
{
  return [a1 textStylingAtPosition:inDirection:];
}

id objc_msgSend_textView(void *a1, const char *a2, ...)
{
  return _[a1 textView];
}

id objc_msgSend_textViewBottomLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 textViewBottomLayoutConstraint];
}

id objc_msgSend_textViewFirstBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 textViewFirstBaselineLayoutConstraint];
}

id objc_msgSend_textViewFirstBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 textViewFirstBaselineLayoutConstraintConstant];
}

id objc_msgSend_textViewFirstBaselineWithoutAccessoryViewsLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 textViewFirstBaselineWithoutAccessoryViewsLayoutConstraint];
}

id objc_msgSend_textViewLastBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 textViewLastBaselineLayoutConstraint];
}

id objc_msgSend_textViewLastBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 textViewLastBaselineLayoutConstraintConstant];
}

id objc_msgSend_textViewLineHeight(void *a1, const char *a2, ...)
{
  return _[a1 textViewLineHeight];
}

id objc_msgSend_thumbHitRect(void *a1, const char *a2, ...)
{
  return _[a1 thumbHitRect];
}

id objc_msgSend_thumbImageView(void *a1, const char *a2, ...)
{
  return _[a1 thumbImageView];
}

id objc_msgSend_thumbRectForBounds_trackRect_value_(void *a1, const char *a2, ...)
{
  return [a1 thumbRectForBounds:trackRect:value:];
}

id objc_msgSend_thumbnailURL(void *a1, const char *a2, ...)
{
  return _[a1 thumbnailURL];
}

id objc_msgSend_timeControlStatus(void *a1, const char *a2, ...)
{
  return _[a1 timeControlStatus];
}

id objc_msgSend_timeFormatter(void *a1, const char *a2, ...)
{
  return _[a1 timeFormatter];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeLabel(void *a1, const char *a2, ...)
{
  return _[a1 timeLabel];
}

id objc_msgSend_timeObserver(void *a1, const char *a2, ...)
{
  return _[a1 timeObserver];
}

id objc_msgSend_timeText(void *a1, const char *a2, ...)
{
  return _[a1 timeText];
}

id objc_msgSend_timelineSlider(void *a1, const char *a2, ...)
{
  return _[a1 timelineSlider];
}

id objc_msgSend_timelineSliderCenterYAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 timelineSliderCenterYAnchorConstraint];
}

id objc_msgSend_timelineSliderLeadingAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 timelineSliderLeadingAnchorConstraint];
}

id objc_msgSend_timelineSliderTopAnchorConstraintAccessibilityConstant(void *a1, const char *a2, ...)
{
  return _[a1 timelineSliderTopAnchorConstraintAccessibilityConstant];
}

id objc_msgSend_timelineSliderTrailingAnchorConstraint(void *a1, const char *a2, ...)
{
  return _[a1 timelineSliderTrailingAnchorConstraint];
}

id objc_msgSend_tintColor(void *a1, const char *a2, ...)
{
  return _[a1 tintColor];
}

id objc_msgSend_tintColorDelegate(void *a1, const char *a2, ...)
{
  return _[a1 tintColorDelegate];
}

id objc_msgSend_tintColorForColor_(void *a1, const char *a2, ...)
{
  return [a1 tintColorForColor:];
}

id objc_msgSend_tipKitActionFavoriteAdded(void *a1, const char *a2, ...)
{
  return _[a1 tipKitActionFavoriteAdded];
}

id objc_msgSend_tipKitLogAnalyticsAddFavoritesEvent(void *a1, const char *a2, ...)
{
  return _[a1 tipKitLogAnalyticsAddFavoritesEvent];
}

id objc_msgSend_tipKitSetNumberOfFavorites_(void *a1, const char *a2, ...)
{
  return [a1 tipKitSetNumberOfFavorites:];
}

id objc_msgSend_tipKitStartObservation(void *a1, const char *a2, ...)
{
  return _[a1 tipKitStartObservation];
}

id objc_msgSend_tipKitStopObservation(void *a1, const char *a2, ...)
{
  return _[a1 tipKitStopObservation];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_titleForAccountsView_(void *a1, const char *a2, ...)
{
  return [a1 titleForAccountsView:];
}

id objc_msgSend_titleForKeyPadButtonType_(void *a1, const char *a2, ...)
{
  return [a1 titleForKeyPadButtonType:];
}

id objc_msgSend_titleForNoContentBanner(void *a1, const char *a2, ...)
{
  return _[a1 titleForNoContentBanner];
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _[a1 titleLabel];
}

id objc_msgSend_titleLabelBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_titleLabelCenterXLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelCenterXLayoutConstraint];
}

id objc_msgSend_titleLabelFirstBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelFirstBaselineAnchorLayoutConstraint];
}

id objc_msgSend_titleLabelFirstBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelFirstBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_titleLabelFirstBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelFirstBaselineLayoutConstraint];
}

id objc_msgSend_titleLabelFirstBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelFirstBaselineLayoutConstraintConstant];
}

id objc_msgSend_titleLabelLastBaselineAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelLastBaselineAnchorLayoutConstraint];
}

id objc_msgSend_titleLabelLastBaselineAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelLastBaselineAnchorLayoutConstraintConstant];
}

id objc_msgSend_titleLabelLastBaselineLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelLastBaselineLayoutConstraint];
}

id objc_msgSend_titleLabelLastBaselineLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelLastBaselineLayoutConstraintConstant];
}

id objc_msgSend_titleLabelLeadingAnchorLayoutConstraintConstantForContentCategorySize_(void *a1, const char *a2, ...)
{
  return [a1 titleLabelLeadingAnchorLayoutConstraintConstantForContentCategorySize:];
}

id objc_msgSend_titleLabelLeadingLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelLeadingLayoutConstraint];
}

id objc_msgSend_titleLabelLeadingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelLeadingLayoutConstraintConstant];
}

id objc_msgSend_titleLabelTopLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelTopLayoutConstraint];
}

id objc_msgSend_titleLabelTrailingLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelTrailingLayoutConstraint];
}

id objc_msgSend_titleLabelTrailingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 titleLabelTrailingLayoutConstraintConstant];
}

id objc_msgSend_titleRectYOffset(void *a1, const char *a2, ...)
{
  return _[a1 titleRectYOffset];
}

id objc_msgSend_titleStackView(void *a1, const char *a2, ...)
{
  return _[a1 titleStackView];
}

id objc_msgSend_toggledOn(void *a1, const char *a2, ...)
{
  return _[a1 toggledOn];
}

id objc_msgSend_toolbar(void *a1, const char *a2, ...)
{
  return _[a1 toolbar];
}

id objc_msgSend_toolbarBottomConstraint(void *a1, const char *a2, ...)
{
  return _[a1 toolbarBottomConstraint];
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _[a1 topAnchor];
}

id objc_msgSend_topViewController(void *a1, const char *a2, ...)
{
  return _[a1 topViewController];
}

id objc_msgSend_touchesBegan_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 touchesBegan:withEvent:];
}

id objc_msgSend_touchesCancelled_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 touchesCancelled:withEvent:];
}

id objc_msgSend_touchesEnded_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 touchesEnded:withEvent:];
}

id objc_msgSend_touchesForView_(void *a1, const char *a2, ...)
{
  return [a1 touchesForView:];
}

id objc_msgSend_touchesMoved_withEvent_(void *a1, const char *a2, ...)
{
  return [a1 touchesMoved:withEvent:];
}

id objc_msgSend_tpFlattenedWithColor_(void *a1, const char *a2, ...)
{
  return [a1 tpFlattenedWithColor:];
}

id objc_msgSend_tpHierarchicalImageForSymbolType_pointSize_(void *a1, const char *a2, ...)
{
  return [a1 tpHierarchicalImageForSymbolType:pointSize:];
}

id objc_msgSend_tpImageForSymbolType_pointSize_(void *a1, const char *a2, ...)
{
  return [a1 tpImageForSymbolType:pointSize:];
}

id objc_msgSend_tpImageForSymbolType_textStyle_scale_isStaticSize_(void *a1, const char *a2, ...)
{
  return [a1 tpImageForSymbolType:textStyle:scale:isStaticSize:];
}

id objc_msgSend_tpImageForSymbolType_textStyle_scale_paletteColors_isStaticSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tpImageForSymbolType:textStyle:scale:paletteColors:isStaticSize:");
}

id objc_msgSend_tpImageForSymbolType_textStyle_scale_symbolWeight_(void *a1, const char *a2, ...)
{
  return [a1 tpImageForSymbolType:textStyle:scale:symbolWeight:];
}

id objc_msgSend_tpImageNamed_inBundle_(void *a1, const char *a2, ...)
{
  return [a1 tpImageNamed:inBundle:];
}

id objc_msgSend_trackColor(void *a1, const char *a2, ...)
{
  return _[a1 trackColor];
}

id objc_msgSend_trackRectForBounds_(void *a1, const char *a2, ...)
{
  return [a1 trackRectForBounds:];
}

id objc_msgSend_trackView(void *a1, const char *a2, ...)
{
  return _[a1 trackView];
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _[a1 trailingAnchor];
}

id objc_msgSend_trailingSwipeActionsConfigurationForRowAt_recentCall_(void *a1, const char *a2, ...)
{
  return [a1 trailingSwipeActionsConfigurationForRowAt:recentCall:];
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _[a1 traitCollection];
}

id objc_msgSend_transcript(void *a1, const char *a2, ...)
{
  return _[a1 transcript];
}

id objc_msgSend_transcriptBottomConstraint(void *a1, const char *a2, ...)
{
  return _[a1 transcriptBottomConstraint];
}

id objc_msgSend_transcriptSeparatorViewTopAnchorLayoutConstraint(void *a1, const char *a2, ...)
{
  return _[a1 transcriptSeparatorViewTopAnchorLayoutConstraint];
}

id objc_msgSend_transcriptSeparatorViewTopAnchorLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 transcriptSeparatorViewTopAnchorLayoutConstraintConstant];
}

id objc_msgSend_transcriptView(void *a1, const char *a2, ...)
{
  return _[a1 transcriptView];
}

id objc_msgSend_transcriptViewModel(void *a1, const char *a2, ...)
{
  return _[a1 transcriptViewModel];
}

id objc_msgSend_transcriptionAttempted(void *a1, const char *a2, ...)
{
  return _[a1 transcriptionAttempted];
}

id objc_msgSend_transcriptionProgress(void *a1, const char *a2, ...)
{
  return _[a1 transcriptionProgress];
}

id objc_msgSend_transcriptionString(void *a1, const char *a2, ...)
{
  return _[a1 transcriptionString];
}

id objc_msgSend_transcriptionUnavailableView(void *a1, const char *a2, ...)
{
  return _[a1 transcriptionUnavailableView];
}

id objc_msgSend_transform(void *a1, const char *a2, ...)
{
  return _[a1 transform];
}

id objc_msgSend_transitionCompleted(void *a1, const char *a2, ...)
{
  return _[a1 transitionCompleted];
}

id objc_msgSend_transitionWithView_duration_options_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 transitionWithView:duration:options:animations:completion:];
}

id objc_msgSend_transportNameCache(void *a1, const char *a2, ...)
{
  return _[a1 transportNameCache];
}

id objc_msgSend_transportNameForFavoritesEntry_(void *a1, const char *a2, ...)
{
  return [a1 transportNameForFavoritesEntry:];
}

id objc_msgSend_trashButton(void *a1, const char *a2, ...)
{
  return _[a1 trashButton];
}

id objc_msgSend_trashMessages_(void *a1, const char *a2, ...)
{
  return [a1 trashMessages:];
}

id objc_msgSend_trashViewController(void *a1, const char *a2, ...)
{
  return _[a1 trashViewController];
}

id objc_msgSend_trashVoicemails(void *a1, const char *a2, ...)
{
  return _[a1 trashVoicemails];
}

id objc_msgSend_trashVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 trashVoicemails:];
}

id objc_msgSend_ttyType(void *a1, const char *a2, ...)
{
  return _[a1 ttyType];
}

id objc_msgSend_tuHandle(void *a1, const char *a2, ...)
{
  return _[a1 tuHandle];
}

id objc_msgSend_tu_contactStoreConfigurationForCall_(void *a1, const char *a2, ...)
{
  return [a1 tu_contactStoreConfigurationForCall];
}

id objc_msgSend_tu_dynamicIdentifier(void *a1, const char *a2, ...)
{
  return [a1 tu_dynamicIdentifier];
}

id objc_msgSend_tu_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return [a1 tu_firstObjectPassingTest:];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unblockWithContacts_(void *a1, const char *a2, ...)
{
  return [a1 unblockWithContacts:];
}

id objc_msgSend_unformattedInternationalStringValue(void *a1, const char *a2, ...)
{
  return _[a1 unformattedInternationalStringValue];
}

id objc_msgSend_unformattedNumber(void *a1, const char *a2, ...)
{
  return _[a1 unformattedNumber];
}

id objc_msgSend_unformattedNumberInLatin(void *a1, const char *a2, ...)
{
  return _[a1 unformattedNumberInLatin];
}

id objc_msgSend_unformattedText(void *a1, const char *a2, ...)
{
  return _[a1 unformattedText];
}

id objc_msgSend_unhighlightedBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 unhighlightedBackgroundColor];
}

id objc_msgSend_unhighlightedCircleViewAlpha(void *a1, const char *a2, ...)
{
  return _[a1 unhighlightedCircleViewAlpha];
}

id objc_msgSend_unicodeDirectionalCharactersSet(void *a1, const char *a2, ...)
{
  return _[a1 unicodeDirectionalCharactersSet];
}

id objc_msgSend_unifiedContactWithIdentifier_keysToFetch_error_(void *a1, const char *a2, ...)
{
  return [a1 unifiedContactWithIdentifier:keysToFetch:error:];
}

id objc_msgSend_unifiedContactsMatchingPredicate_keysToFetch_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unifiedContactsMatchingPredicate:keysToFetch:error:");
}

id objc_msgSend_uniqueId(void *a1, const char *a2, ...)
{
  return _[a1 uniqueId];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unknownCallersViewController(void *a1, const char *a2, ...)
{
  return _[a1 unknownCallersViewController];
}

id objc_msgSend_unknownCallersViewControllerDidRequestDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unknownCallersViewControllerDidRequestDismiss:");
}

id objc_msgSend_unknownCallersViewControllerDidRequestEnable_(void *a1, const char *a2, ...)
{
  return [a1 unknownCallersViewControllerDidRequestEnable:];
}

id objc_msgSend_unknownContactForMessage_(void *a1, const char *a2, ...)
{
  return [a1 unknownContactForMessage:];
}

id objc_msgSend_unknownContactForRecentCall_(void *a1, const char *a2, ...)
{
  return [a1 unknownContactForRecentCall];
}

id objc_msgSend_unknownContacts(void *a1, const char *a2, ...)
{
  return _[a1 unknownContacts];
}

id objc_msgSend_unknownInitiatorReportEnabled(void *a1, const char *a2, ...)
{
  return _[a1 unknownInitiatorReportEnabled];
}

id objc_msgSend_unknownLabel(void *a1, const char *a2, ...)
{
  return _[a1 unknownLabel];
}

id objc_msgSend_unloadConstraints(void *a1, const char *a2, ...)
{
  return _[a1 unloadConstraints];
}

id objc_msgSend_unreadCallCount(void *a1, const char *a2, ...)
{
  return _[a1 unreadCallCount];
}

id objc_msgSend_unreadIndicatorImageView(void *a1, const char *a2, ...)
{
  return _[a1 unreadIndicatorImageView];
}

id objc_msgSend_unreadIndicatorImageViewLeadingLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 unreadIndicatorImageViewLeadingLayoutConstraintConstant];
}

id objc_msgSend_unreadIndicatorImageViewLeadingLayoutConstraintConstantForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 unreadIndicatorImageViewLeadingLayoutConstraintConstantForContentSizeCategory:];
}

id objc_msgSend_unreadIndicatorImageViewTopLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 unreadIndicatorImageViewTopLayoutConstraintConstant];
}

id objc_msgSend_unreadIndicatorImageViewWidthLayoutConstraintConstant(void *a1, const char *a2, ...)
{
  return _[a1 unreadIndicatorImageViewWidthLayoutConstraintConstant];
}

id objc_msgSend_unreadIndicatorImageViewWidthLayoutConstraintConstantForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return [a1 unreadIndicatorImageViewWidthLayoutConstraintConstantForContentSizeCategory:];
}

id objc_msgSend_unregisterForRingerStateNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForRingerStateNotifications];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_updateAccounts(void *a1, const char *a2, ...)
{
  return _[a1 updateAccounts];
}

id objc_msgSend_updateAccountsView(void *a1, const char *a2, ...)
{
  return _[a1 updateAccountsView];
}

id objc_msgSend_updateActiveContexts(void *a1, const char *a2, ...)
{
  return _[a1 updateActiveContexts];
}

id objc_msgSend_updateAddAndDeleteButtonForText_name_animated_(void *a1, const char *a2, ...)
{
  return [a1 updateAddAndDeleteButtonForText:name:animated:];
}

id objc_msgSend_updateAddAndDeleteButtonForText_name_label_suggestion_animated_(void *a1, const char *a2, ...)
{
  return [a1 updateAddAndDeleteButtonForText:name:label:suggestion:animated:];
}

id objc_msgSend_updateAllCellConstraints(void *a1, const char *a2, ...)
{
  return _[a1 updateAllCellConstraints];
}

id objc_msgSend_updateAudioRouteButtonWithTouchUpInsideEnabled_(void *a1, const char *a2, ...)
{
  return [a1 updateAudioRouteButtonWithTouchUpInsideEnabled:];
}

id objc_msgSend_updateAudioSessionNotifications(void *a1, const char *a2, ...)
{
  return _[a1 updateAudioSessionNotifications];
}

id objc_msgSend_updateBadgeString(void *a1, const char *a2, ...)
{
  return _[a1 updateBadgeString];
}

id objc_msgSend_updateButtonGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 updateButtonGlyphImage];
}

id objc_msgSend_updateButtonsState(void *a1, const char *a2, ...)
{
  return _[a1 updateButtonsState];
}

id objc_msgSend_updateCacheWithDestinationIDs_(void *a1, const char *a2, ...)
{
  return [a1 updateCacheWithDestinationIDs:];
}

id objc_msgSend_updateCacheWithDestinationIDs_completion_(void *a1, const char *a2, ...)
{
  return [a1 updateCacheWithDestinationIDs:completion:];
}

id objc_msgSend_updateCanDisplayCallHistorySearchTip_(void *a1, const char *a2, ...)
{
  return [a1 updateCanDisplayCallHistorySearchTip];
}

id objc_msgSend_updateCell_atIndex_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCell:atIndex:animated:");
}

id objc_msgSend_updateCellOfFlow_isBlocked_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCellOfFlow:isBlocked:style:");
}

id objc_msgSend_updateConstraintsConstants(void *a1, const char *a2, ...)
{
  return _[a1 updateConstraintsConstants];
}

id objc_msgSend_updateConstraintsForExpandedState_(void *a1, const char *a2, ...)
{
  return [a1 updateConstraintsForExpandedState:];
}

id objc_msgSend_updateContactResultButton(void *a1, const char *a2, ...)
{
  return _[a1 updateContactResultButton];
}

id objc_msgSend_updateContraintsForStatusBar(void *a1, const char *a2, ...)
{
  return _[a1 updateContraintsForStatusBar];
}

id objc_msgSend_updateCustomizedGreetingCell(void *a1, const char *a2, ...)
{
  return _[a1 updateCustomizedGreetingCell];
}

id objc_msgSend_updateDefaultGreetingCell(void *a1, const char *a2, ...)
{
  return _[a1 updateDefaultGreetingCell];
}

id objc_msgSend_updateElapsedTimeLabelText(void *a1, const char *a2, ...)
{
  return _[a1 updateElapsedTimeLabelText];
}

id objc_msgSend_updateExpandedViewsWithViewModel_(void *a1, const char *a2, ...)
{
  return [a1 updateExpandedViewsWithViewModel:];
}

id objc_msgSend_updateFonts(void *a1, const char *a2, ...)
{
  return _[a1 updateFonts];
}

id objc_msgSend_updateFontsAndLayoutMetrics(void *a1, const char *a2, ...)
{
  return _[a1 updateFontsAndLayoutMetrics];
}

id objc_msgSend_updateFontsLayoutMetricsAndSeparatorInset(void *a1, const char *a2, ...)
{
  return _[a1 updateFontsLayoutMetricsAndSeparatorInset];
}

id objc_msgSend_updateIDSStatus(void *a1, const char *a2, ...)
{
  return _[a1 updateIDSStatus];
}

id objc_msgSend_updateImageViewAlpha(void *a1, const char *a2, ...)
{
  return _[a1 updateImageViewAlpha];
}

id objc_msgSend_updateLabelColors(void *a1, const char *a2, ...)
{
  return _[a1 updateLabelColors];
}

id objc_msgSend_updateLabelConstraintConstants(void *a1, const char *a2, ...)
{
  return _[a1 updateLabelConstraintConstants];
}

id objc_msgSend_updateLabels(void *a1, const char *a2, ...)
{
  return _[a1 updateLabels];
}

id objc_msgSend_updateLargeTitleInsets(void *a1, const char *a2, ...)
{
  return _[a1 updateLargeTitleInsets];
}

id objc_msgSend_updateLayoutAnimated_(void *a1, const char *a2, ...)
{
  return [a1 updateLayoutAnimated:];
}

id objc_msgSend_updateLocalizedSenderIdentity_(void *a1, const char *a2, ...)
{
  return [a1 updateLocalizedSenderIdentity];
}

id objc_msgSend_updateMaximumTrackImage(void *a1, const char *a2, ...)
{
  return _[a1 updateMaximumTrackImage];
}

id objc_msgSend_updateMinimumTrackImage(void *a1, const char *a2, ...)
{
  return _[a1 updateMinimumTrackImage];
}

id objc_msgSend_updateNoContentBanner(void *a1, const char *a2, ...)
{
  return _[a1 updateNoContentBanner];
}

id objc_msgSend_updateNumberLabelHorizontalConstraints(void *a1, const char *a2, ...)
{
  return _[a1 updateNumberLabelHorizontalConstraints];
}

id objc_msgSend_updateNumberOfCellsWithNewValue_animated_(void *a1, const char *a2, ...)
{
  return [a1 updateNumberOfCellsWithNewValue:animated:];
}

id objc_msgSend_updatePendingState(void *a1, const char *a2, ...)
{
  return _[a1 updatePendingState];
}

id objc_msgSend_updatePersonalNicknameIfNecessaryWithMeCardSharingResult_(void *a1, const char *a2, ...)
{
  return [a1 updatePersonalNicknameIfNecessaryWithMeCardSharingResult:];
}

id objc_msgSend_updatePlayPauseButton(void *a1, const char *a2, ...)
{
  return _[a1 updatePlayPauseButton];
}

id objc_msgSend_updateProximityMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 updateProximityMonitoring];
}

id objc_msgSend_updateRTTButton(void *a1, const char *a2, ...)
{
  return _[a1 updateRTTButton];
}

id objc_msgSend_updateRecentCalls(void *a1, const char *a2, ...)
{
  return _[a1 updateRecentCalls];
}

id objc_msgSend_updateRemainingTimeLabelText(void *a1, const char *a2, ...)
{
  return _[a1 updateRemainingTimeLabelText];
}

id objc_msgSend_updateRootView(void *a1, const char *a2, ...)
{
  return _[a1 updateRootView];
}

id objc_msgSend_updateRootViewWithAvatarView(void *a1, const char *a2, ...)
{
  return _[a1 updateRootViewWithAvatarView];
}

id objc_msgSend_updateScreenTimeRestrictedViewForMessage_withViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateScreenTimeRestrictedViewForMessage:withViewModel:");
}

id objc_msgSend_updateSearchBarLayoutMarginsPresentingSearchResults_(void *a1, const char *a2, ...)
{
  return [a1 updateSearchBarLayoutMarginsPresentingSearchResults:];
}

id objc_msgSend_updateSearchResultsForSearchController_(void *a1, const char *a2, ...)
{
  return [a1 updateSearchResultsForSearchController:];
}

id objc_msgSend_updateSearchText_(void *a1, const char *a2, ...)
{
  return [a1 updateSearchText:];
}

id objc_msgSend_updateSelectedViewController_(void *a1, const char *a2, ...)
{
  return [a1 updateSelectedViewController:];
}

id objc_msgSend_updateSubviewConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 updateSubviewConfiguration];
}

id objc_msgSend_updateTabBarAppearanceToTransparent_(void *a1, const char *a2, ...)
{
  return [a1 updateTabBarAppearanceToTransparent:];
}

id objc_msgSend_updateTabBarItem(void *a1, const char *a2, ...)
{
  return _[a1 updateTabBarItem];
}

id objc_msgSend_updateTabBarItemWithCount_(void *a1, const char *a2, ...)
{
  return [a1 updateTabBarItemWithCount:];
}

id objc_msgSend_updateTableViewCell_withContactUsingFavoritesEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTableViewCell:withContactUsingFavoritesEntry:");
}

id objc_msgSend_updateTextColor(void *a1, const char *a2, ...)
{
  return _[a1 updateTextColor];
}

id objc_msgSend_updateThumbImage(void *a1, const char *a2, ...)
{
  return _[a1 updateThumbImage];
}

id objc_msgSend_updateTitleDisplayModeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 updateTitleDisplayModeIfNeeded];
}

id objc_msgSend_updateTitleDisplayModeIfNeeded_(void *a1, const char *a2, ...)
{
  return [a1 updateTitleDisplayModeIfNeeded:];
}

id objc_msgSend_updateToProperIconColor(void *a1, const char *a2, ...)
{
  return _[a1 updateToProperIconColor];
}

id objc_msgSend_updateTrackImages(void *a1, const char *a2, ...)
{
  return _[a1 updateTrackImages];
}

id objc_msgSend_updateVideoViewControllerWithOrientationMonitor_(void *a1, const char *a2, ...)
{
  return [a1 updateVideoViewControllerWithOrientationMonitor:];
}

id objc_msgSend_updateView(void *a1, const char *a2, ...)
{
  return _[a1 updateView];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_urlAddresses(void *a1, const char *a2, ...)
{
  return _[a1 urlAddresses];
}

id objc_msgSend_useSharedRecentsViewModel(void *a1, const char *a2, ...)
{
  return _[a1 useSharedRecentsViewModel];
}

id objc_msgSend_useSwiftUIRecents(void *a1, const char *a2, ...)
{
  return _[a1 useSwiftUIRecents];
}

id objc_msgSend_userActivities(void *a1, const char *a2, ...)
{
  return _[a1 userActivities];
}

id objc_msgSend_userActivity(void *a1, const char *a2, ...)
{
  return _[a1 userActivity];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceIdiom];
}

id objc_msgSend_userInterfaceLayoutDirection(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceLayoutDirection];
}

id objc_msgSend_userInterfaceLayoutDirectionForSemanticContentAttribute_(void *a1, const char *a2, ...)
{
  return [a1 userInterfaceLayoutDirectionForSemanticContentAttribute:];
}

id objc_msgSend_userInterfaceStyle(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceStyle];
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _[a1 username];
}

id objc_msgSend_usesUnifiedInterface(void *a1, const char *a2, ...)
{
  return _[a1 usesUnifiedInterface];
}

id objc_msgSend_utterances(void *a1, const char *a2, ...)
{
  return _[a1 utterances];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_validNetworkReachable(void *a1, const char *a2, ...)
{
  return _[a1 validNetworkReachable];
}

id objc_msgSend_validRemoteParticipantHandles(void *a1, const char *a2, ...)
{
  return _[a1 validRemoteParticipantHandles];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return [a1 valueForKey:];
}

id objc_msgSend_valueWithCMTime_(void *a1, const char *a2, ...)
{
  return [a1 valueWithCMTime:];
}

id objc_msgSend_verificationStatus(void *a1, const char *a2, ...)
{
  return _[a1 verificationStatus];
}

id objc_msgSend_verified(void *a1, const char *a2, ...)
{
  return _[a1 verified];
}

id objc_msgSend_verifiedBadgeView(void *a1, const char *a2, ...)
{
  return _[a1 verifiedBadgeView];
}

id objc_msgSend_verticalPadding(void *a1, const char *a2, ...)
{
  return _[a1 verticalPadding];
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _[a1 view];
}

id objc_msgSend_viewController(void *a1, const char *a2, ...)
{
  return _[a1 viewController];
}

id objc_msgSend_viewControllerAtIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerAtIndexPath:];
}

id objc_msgSend_viewControllerForContact_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerForContact:];
}

id objc_msgSend_viewControllerForConversation_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerForConversation];
}

id objc_msgSend_viewControllerForNewContact_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerForNewContact:];
}

id objc_msgSend_viewControllerForTabViewType_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerForTabViewType:];
}

id objc_msgSend_viewControllerForUnknownContact_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerForUnknownContact:];
}

id objc_msgSend_viewControllerForUpdatingContact_withPropertiesFromContact_(void *a1, const char *a2, ...)
{
  return [a1 viewControllerForUpdatingContact:withPropertiesFromContact:];
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _[a1 viewControllers];
}

id objc_msgSend_viewHadAppeared(void *a1, const char *a2, ...)
{
  return _[a1 viewHadAppeared];
}

id objc_msgSend_viewIsInAppearedState(void *a1, const char *a2, ...)
{
  return _[a1 viewIsInAppearedState];
}

id objc_msgSend_viewModel(void *a1, const char *a2, ...)
{
  return _[a1 viewModel];
}

id objc_msgSend_visible(void *a1, const char *a2, ...)
{
  return _[a1 visible];
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _[a1 visibleCells];
}

id objc_msgSend_visibleViewController(void *a1, const char *a2, ...)
{
  return _[a1 visibleViewController];
}

id objc_msgSend_vmMessage(void *a1, const char *a2, ...)
{
  return _[a1 vmMessage];
}

id objc_msgSend_vmdVoiceMailManager(void *a1, const char *a2, ...)
{
  return _[a1 vmdVoiceMailManager];
}

id objc_msgSend_voiceMemoDate(void *a1, const char *a2, ...)
{
  return _[a1 voiceMemoDate];
}

id objc_msgSend_voiceMemoName(void *a1, const char *a2, ...)
{
  return _[a1 voiceMemoName];
}

id objc_msgSend_voiceMemoURL(void *a1, const char *a2, ...)
{
  return _[a1 voiceMemoURL];
}

id objc_msgSend_voicemail(void *a1, const char *a2, ...)
{
  return _[a1 voicemail];
}

id objc_msgSend_voicemailAudioRouteGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailAudioRouteGlyphImage];
}

id objc_msgSend_voicemailCaptionRegularFont(void *a1, const char *a2, ...)
{
  return _[a1 voicemailCaptionRegularFont];
}

id objc_msgSend_voicemailCaptionRegularFontDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 voicemailCaptionRegularFontDescriptor];
}

id objc_msgSend_voicemailController(void *a1, const char *a2, ...)
{
  return _[a1 voicemailController];
}

id objc_msgSend_voicemailDeleteGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailDeleteGlyphImage];
}

id objc_msgSend_voicemailDialRequestGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailDialRequestGlyphImage];
}

id objc_msgSend_voicemailFootnoteFont(void *a1, const char *a2, ...)
{
  return _[a1 voicemailFootnoteFont];
}

id objc_msgSend_voicemailGreetingAudioControllerDidChangeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailGreetingAudioControllerDidChangeState:");
}

id objc_msgSend_voicemailGreetingDidFinishRecording(void *a1, const char *a2, ...)
{
  return _[a1 voicemailGreetingDidFinishRecording];
}

id objc_msgSend_voicemailGreetingDurationChanged_(void *a1, const char *a2, ...)
{
  return [a1 voicemailGreetingDurationChanged:];
}

id objc_msgSend_voicemailGreetingFailedWithError_(void *a1, const char *a2, ...)
{
  return [a1 voicemailGreetingFailedWithError:];
}

id objc_msgSend_voicemailGreetingPlayingProgressChanged_(void *a1, const char *a2, ...)
{
  return [a1 voicemailGreetingPlayingProgressChanged];
}

id objc_msgSend_voicemailGreetingRecordingProgressChanged_(void *a1, const char *a2, ...)
{
  return [a1 voicemailGreetingRecordingProgressChanged:];
}

id objc_msgSend_voicemailGreetingViewControllerFinished_(void *a1, const char *a2, ...)
{
  return [a1 voicemailGreetingViewControllerFinished:];
}

id objc_msgSend_voicemailHeadlineShortFont(void *a1, const char *a2, ...)
{
  return _[a1 voicemailHeadlineShortFont];
}

id objc_msgSend_voicemailHeadlineShortFontDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 voicemailHeadlineShortFontDescriptor];
}

id objc_msgSend_voicemailManager(void *a1, const char *a2, ...)
{
  return _[a1 voicemailManager];
}

id objc_msgSend_voicemailMessageCellDidTapToCollapse_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageCellDidTapToCollapse:];
}

id objc_msgSend_voicemailMessageDetailViewController_destructiveActionPerformedForMessage_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageDetailViewController:destructiveActionPerformedForMessage:completionBlock:];
}

id objc_msgSend_voicemailMessageTableViewCell_actionButtonTappedForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:actionButtonTappedForRowWithIndexPath:");
}

id objc_msgSend_voicemailMessageTableViewCell_audioRouteButtonTappedForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageTableViewCell:audioRouteButtonTappedForRowWithIndexPath:];
}

id objc_msgSend_voicemailMessageTableViewCell_dialRequestButtonTappedForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:dialRequestButtonTappedForRowWithIndexPath:");
}

id objc_msgSend_voicemailMessageTableViewCell_didChangeElapsedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:didChangeElapsedTime:");
}

id objc_msgSend_voicemailMessageTableViewCell_didReceiveTranscriptFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:didReceiveTranscriptFeedback:");
}

id objc_msgSend_voicemailMessageTableViewCell_didReceiveTranscriptTapGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:didReceiveTranscriptTapGesture:");
}

id objc_msgSend_voicemailMessageTableViewCell_didRequestPlayState_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageTableViewCell:didRequestPlayState:];
}

id objc_msgSend_voicemailMessageTableViewCell_moveButtonTappedForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:moveButtonTappedForRowWithIndexPath:");
}

id objc_msgSend_voicemailMessageTableViewCell_rttButtonTappedForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageTableViewCell:rttButtonTappedForRowWithIndexPath:];
}

id objc_msgSend_voicemailMessageTableViewCell_shouldShowRTTButtonForRowWithIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCell:shouldShowRTTButtonForRowWithIndexPath:");
}

id objc_msgSend_voicemailMessageTableViewCellDidBeginScrubbing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voicemailMessageTableViewCellDidBeginScrubbing:");
}

id objc_msgSend_voicemailMessageTableViewCellDidCancelScrubbing_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageTableViewCellDidCancelScrubbing:];
}

id objc_msgSend_voicemailMessageTableViewCellDidEndScrubbing_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageTableViewCellDidEndScrubbing:];
}

id objc_msgSend_voicemailMessageUUID(void *a1, const char *a2, ...)
{
  return _[a1 voicemailMessageUUID];
}

id objc_msgSend_voicemailMessageViewModelCache(void *a1, const char *a2, ...)
{
  return _[a1 voicemailMessageViewModelCache];
}

id objc_msgSend_voicemailMessageViewModelForVoicemail_isExpanded_(void *a1, const char *a2, ...)
{
  return [a1 voicemailMessageViewModelForVoicemail:isExpanded:];
}

id objc_msgSend_voicemailNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 voicemailNavigationController];
}

id objc_msgSend_voicemailPauseGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailPauseGlyphImage];
}

id objc_msgSend_voicemailPlayGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailPlayGlyphImage];
}

id objc_msgSend_voicemailPredicate(void *a1, const char *a2, ...)
{
  return _[a1 voicemailPredicate];
}

id objc_msgSend_voicemailProvider(void *a1, const char *a2, ...)
{
  return _[a1 voicemailProvider];
}

id objc_msgSend_voicemailRecordID(void *a1, const char *a2, ...)
{
  return _[a1 voicemailRecordID];
}

id objc_msgSend_voicemailReportFeedbackGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailReportFeedbackGlyphImage];
}

id objc_msgSend_voicemailSearchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voicemailSearchEnabled];
}

id objc_msgSend_voicemailTTYGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailTTYGlyphImage];
}

id objc_msgSend_voicemailTipView(void *a1, const char *a2, ...)
{
  return _[a1 voicemailTipView];
}

id objc_msgSend_voicemailUndeleteGlyphImage(void *a1, const char *a2, ...)
{
  return _[a1 voicemailUndeleteGlyphImage];
}

id objc_msgSend_voicemailViewController(void *a1, const char *a2, ...)
{
  return _[a1 voicemailViewController];
}

id objc_msgSend_voicemailWithID_completion_(void *a1, const char *a2, ...)
{
  return [a1 voicemailWithID:completion:];
}

id objc_msgSend_voicemailWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [a1 voicemailWithIdentifier:completion:];
}

id objc_msgSend_voicemails(void *a1, const char *a2, ...)
{
  return _[a1 voicemails];
}

id objc_msgSend_voicemails_passingTest_(void *a1, const char *a2, ...)
{
  return [a1 voicemails:passingTest:];
}

id objc_msgSend_voipTintColor(void *a1, const char *a2, ...)
{
  return _[a1 voipTintColor];
}

id objc_msgSend_wantsAsyncReload(void *a1, const char *a2, ...)
{
  return _[a1 wantsAsyncReload];
}

id objc_msgSend_wantsCallButtonAnimation(void *a1, const char *a2, ...)
{
  return _[a1 wantsCallButtonAnimation];
}

id objc_msgSend_warmInCallServiceIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 warmInCallServiceIfNecessary];
}

id objc_msgSend_wasEmergencyCall(void *a1, const char *a2, ...)
{
  return _[a1 wasEmergencyCall];
}

id objc_msgSend_wasTranscriptionAttempted(void *a1, const char *a2, ...)
{
  return _[a1 wasTranscriptionAttempted];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_weightForSymbolType_(void *a1, const char *a2, ...)
{
  return [a1 weightForSymbolType:];
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _[a1 whiteColor];
}

id objc_msgSend_whitePointAdaptivityStyle(void *a1, const char *a2, ...)
{
  return _[a1 whitePointAdaptivityStyle];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _[a1 widthAnchor];
}

id objc_msgSend_wifiAllowedForBundleId_(void *a1, const char *a2, ...)
{
  return [a1 wifiAllowedForBundleId:];
}

id objc_msgSend_willShowVoicemails_(void *a1, const char *a2, ...)
{
  return [a1 willShowVoicemails:];
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _[a1 window];
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _[a1 windowScene];
}

id objc_msgSend_withCaseSensitiveAttribute(void *a1, const char *a2, ...)
{
  return _[a1 withCaseSensitiveAttribute];
}

id objc_msgSend_withPriority_(void *a1, const char *a2, ...)
{
  return [a1 withPriority:];
}

id objc_msgSend_wrapperNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 wrapperNavigationController];
}

id objc_msgSend_yOffsetForDialerLCDView(void *a1, const char *a2, ...)
{
  return _[a1 yOffsetForDialerLCDView];
}

id objc_msgSend_yOffsetForDialerLCDViewForDxDevices(void *a1, const char *a2, ...)
{
  return _[a1 yOffsetForDialerLCDViewForDxDevices];
}

id objc_msgSend_yOffsetForSmartDialerLCDView(void *a1, const char *a2, ...)
{
  return _[a1 yOffsetForSmartDialerLCDView];
}

id objc_msgSend_yOffsetFromKeypadToDialerButtonForExplictLayoutDevices(void *a1, const char *a2, ...)
{
  return _[a1 yOffsetFromKeypadToDialerButtonForExplictLayoutDevices];
}

id objc_msgSend_yOffsetFromKeypadToLCDViewForExplicitLayoutDevices(void *a1, const char *a2, ...)
{
  return _[a1 yOffsetFromKeypadToLCDViewForExplicitLayoutDevices];
}

id objc_msgSend_yParticipantsViewAdjustmentForKeypad(void *a1, const char *a2, ...)
{
  return _[a1 yParticipantsViewAdjustmentForKeypad];
}